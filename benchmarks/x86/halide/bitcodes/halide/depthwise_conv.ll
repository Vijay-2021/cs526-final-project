; ModuleID = 'depthwise_conv'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.200 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 0
@4 = private constant i64 0
@5 = private constant [6 x i64*] [i64* @2, i64* null, i64* @3, i64* null, i64* @4, i64* null]
@str.201 = private constant [7 x i8] c"filter\00", align 32
@str.202 = private constant [12 x i8] c"filter_zero\00", align 32
@6 = private constant i64 0
@7 = private constant [2 x i64*] [i64* @6, i64* null]
@str.203 = private constant [5 x i8] c"bias\00", align 32
@str.204 = private constant [17 x i8] c"depth_multiplier\00", align 32
@str.205 = private constant [9 x i8] c"stride_x\00", align 32
@str.206 = private constant [9 x i8] c"stride_y\00", align 32
@str.207 = private constant [11 x i8] c"dilation_x\00", align 32
@str.208 = private constant [11 x i8] c"dilation_y\00", align 32
@str.209 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.210 = private constant [13 x i8] c"output_shift\00", align 32
@str.211 = private constant [12 x i8] c"output_zero\00", align 32
@str.212 = private constant [11 x i8] c"output_min\00", align 32
@str.213 = private constant [11 x i8] c"output_max\00", align 32
@8 = private constant i64 0
@9 = private constant [8 x i64*] [i64* @8, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.214 = private constant [7 x i8] c"output\00", align 32
@10 = private constant [16 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.200, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.201, i32 0, i32 0), i32 1, i32 3, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([6 x i64*], [6 x i64*]* @5, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.202, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.203, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @7, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.204, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.205, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.206, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.207, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.208, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.209, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.210, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.211, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.212, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.213, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.214, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @9, i32 0, i32 0) }]
@str.215 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.216 = private constant [15 x i8] c"depthwise_conv\00", align 32
@depthwise_conv_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 16, %struct.halide_filter_argument_t* getelementptr inbounds ([16 x %struct.halide_filter_argument_t], [16 x %struct.halide_filter_argument_t]* @10, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.215, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.216, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #17
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #17
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #17
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #17
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #17
  call void @halide_print(i8* %user_context, i8* nonnull %0) #17
  call void @abort() #17
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #17
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #17
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #17
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #17
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #17
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #17
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #17
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #18
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #18
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #17
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #17
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #18
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #18
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #18
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #18
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #17
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #17
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  tail call void @halide_thread_yield() #17
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  tail call void @halide_thread_yield() #17
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #17
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #18
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #18
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #18
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #18
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #17
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #17
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #17
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #17
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #17
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #17
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #17
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #17
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #17
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #17
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #17
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #17
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #17
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #17
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #17
  call void @abort() #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #17
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #17
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #17
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #18
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #17
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #17
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #17
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #18
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #17
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #18
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #17
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #17
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #18
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #17
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #17
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #18
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #17
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #17
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #17
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #17
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #17
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #17
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #17
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #17
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #17
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #17
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #18
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #18
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #17
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #17
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #17
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #17
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #17
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #17
  tail call void @halide_free(i8* %user_context, i8* %array) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #18
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #18
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #17
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #18
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #17
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #17
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #17
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #17
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #18
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #17
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #17
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #17
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #17
  tail call void @abort() #17
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #17
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #17
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #17
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #17
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #17
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #17
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #17
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #17
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #17
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #17
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #17
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #17
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #17
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #17
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #17
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #17
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #17
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #17
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #17
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #17
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #17
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #17
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #17
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #17
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #17
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #17
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #17
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #17
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #17
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #17
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #17
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #17
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #17
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #17
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #17
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #17
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #17
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #17
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #17
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #17
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #17
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #17
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #17
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #17
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #17
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #17
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #17
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #17
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #17
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #17
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #17
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #17
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #17
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #17
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #17
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #17
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #17
  tail call void @halide_set_trace_file(i32 %call5) #18
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #17
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #18
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #17
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #17
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #17
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #17
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #17
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #17
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #17
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #17
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #17
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #18
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #18
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #17
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #17
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #17
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #18
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #17
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #17
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #17
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #17
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #17
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #17
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #17
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #17
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #17
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #17
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #17
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #17
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #17
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #18
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #17
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #17
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #17
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #18
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #17
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #18
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #17
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #17
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #18
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #17
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #18
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #18
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #18
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #18
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #18
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #18
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #17
  tail call void @abort() #17
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #18
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #17
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #18
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #18
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #18
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #18
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #18
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #18
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #18
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #18
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #18
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #17
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #18
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #18
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #17
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #18
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #18
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #17
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #17
  tail call void @abort() #17
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #18
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #17
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #18
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #17
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #18
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #18
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #18
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #18
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #18
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #18
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #18
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #18
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #18
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #18
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #18
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #18
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #18
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #18
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #18
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #18
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #18
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #18
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #18
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #18
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #18
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #18
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #18
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #18
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #18
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #18
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #18
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #18
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #18
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #18
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #18
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #18
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #18
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #18
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #17
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #17
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #17
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #18
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #17
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #17
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #17
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #17
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #18
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #17
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #18
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #17
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #17
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #17
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #17
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #18
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #17
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #18
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #17
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #18
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #18
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #18
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #18
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #18
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #18
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #17
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #18
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #17
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #17
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #17
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #17
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #17
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #17
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #17
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #17
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #17
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #17
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #18
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #17
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #17
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #17
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #17
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #17
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #17
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #17
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #17
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #17
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #17
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #17
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #17
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #17
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #17
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #17
  %call.i = call i8* @malloc(i64 1024) #17
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #17
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #17
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #17
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #17
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #17
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #17
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #17
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #17
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #17
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #17
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #17
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #17
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #17
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #17
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #17
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #17
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #17
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #17
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #17
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #17
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #17
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #17
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #17
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #17
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #17
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #17
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #17
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #17
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #17
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #17
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #17
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #17
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #17
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #17
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #17
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #17
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #17
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #17
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #17
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #17
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #17
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #17
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #17
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #17
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #17
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #17
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #17
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #17
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #17
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #17
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #17
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #17
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #17
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #17
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #17
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #17
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #17
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #17
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #17
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #17
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #17
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #17
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #17
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #17
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #17
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #17
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #17
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #17
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #17
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #17
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #17
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #17
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #17
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #17
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #17
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #17
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #17
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #17
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #17
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #17
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #17
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #17
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #17
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #17
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #17
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #17
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #17
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #17
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #17
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #18
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #17
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #17
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #17
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #17
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #17
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #17
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #17
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #17
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #17
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #17
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #17
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #17
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #17
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #17
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #17
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #17
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #17
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #17
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #17
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #17
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #17
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #17
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #17
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #17
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #17
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #17
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #17
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #17
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #17
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #17
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #17
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #17
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #17
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #17
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #17
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #17
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #17
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #17
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #17
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #17
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #18
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #17
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #18
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #17
  call void @halide_sleep_ms(i8* null, i32 %call422) #17
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #17
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #18
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #17
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #17
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #17
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #17
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #18
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #17
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #17
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #8

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #8

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #17
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #17
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #17
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #17
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #17
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #17
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #9 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #7

; Function Attrs: nounwind
define i32 @depthwise_conv(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias nocapture readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %depth_multiplier, i32 %stride_x, i32 %stride_y, i32 %a187, i32 %a186, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias readonly %output.buffer) local_unnamed_addr #10 {
entry:
  %offset_c545774 = alloca [64 x i32], align 32
  %resampled_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep706 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep707 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep708 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot, i64 0, i32 2
  %sum_filter776 = alloca [16 x i32], align 32
  %filter_zeroed.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %2 = load i8*, i8** %host.i, align 8, !tbaa !172
  %host.i919 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i64 0, i32 2
  %3 = load i8*, i8** %host.i919, align 8, !tbaa !172
  %dim.i920 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i64 0, i32 6
  %4 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i920, align 8, !tbaa !176
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 0, i32 1
  %5 = load i32, i32* %extent.i, align 4, !tbaa !178
  %extent.i928 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 1, i32 1
  %6 = load i32, i32* %extent.i928, align 4, !tbaa !178
  %stride.i930 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 1, i32 2
  %7 = load i32, i32* %stride.i930, align 4, !tbaa !182
  %extent.i934 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 2, i32 1
  %8 = load i32, i32* %extent.i934, align 4, !tbaa !178
  %stride.i936 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %4, i64 2, i32 2
  %9 = load i32, i32* %stride.i936, align 4, !tbaa !182
  %host.i937 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %10 = load i8*, i8** %host.i937, align 8, !tbaa !172
  %dim.i938 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i938, align 8, !tbaa !176
  %min.i943 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 1, i32 0
  %12 = load i32, i32* %min.i943, align 4, !tbaa !181
  %stride.i945 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 1, i32 2
  %13 = load i32, i32* %stride.i945, align 4, !tbaa !182
  %min.i947 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 2, i32 0
  %14 = load i32, i32* %min.i947, align 4, !tbaa !181
  %stride.i949 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 2, i32 2
  %15 = load i32, i32* %stride.i949, align 4, !tbaa !182
  %min.i951 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 3, i32 0
  %16 = load i32, i32* %min.i951, align 4, !tbaa !181
  %extent.i953 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 3, i32 1
  %17 = load i32, i32* %extent.i953, align 4, !tbaa !178
  %stride.i955 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 3, i32 2
  %18 = load i32, i32* %stride.i955, align 4, !tbaa !182
  %host.i956 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 2
  %19 = load i8*, i8** %host.i956, align 8, !tbaa !172
  %dim.i957 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 6
  %20 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i957, align 8, !tbaa !176
  %min.i964 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 1, i32 0
  %21 = load i32, i32* %min.i964, align 4, !tbaa !181
  %extent.i966 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 1, i32 1
  %22 = load i32, i32* %extent.i966, align 4, !tbaa !178
  %stride.i968 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 1, i32 2
  %23 = load i32, i32* %stride.i968, align 4, !tbaa !182
  %min.i970 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 2, i32 0
  %24 = load i32, i32* %min.i970, align 4, !tbaa !181
  %extent.i972 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 2, i32 1
  %25 = load i32, i32* %extent.i972, align 4, !tbaa !178
  %stride.i974 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 2, i32 2
  %26 = load i32, i32* %stride.i974, align 4, !tbaa !182
  %stride.i980 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %20, i64 3, i32 2
  %27 = load i32, i32* %stride.i980, align 4, !tbaa !182
  %28 = icmp sgt i32 %22, 7
  %29 = and i32 %22, 1
  %30 = icmp eq i32 %29, 0
  %31 = or i1 %28, %30
  %32 = icmp sgt i32 %25, 7
  %33 = and i32 %25, 1
  %34 = icmp eq i32 %33, 0
  %35 = or i1 %32, %34
  %36 = and i1 %31, %35
  %37 = icmp sgt i32 %5, 15
  %38 = and i1 %37, %36
  br i1 %38, label %then_bb, label %next_bb

after_bb.loopexit:                                ; preds = %"end for output.s0.b.rebased"
  %39 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb

after_bb.loopexit1527:                            ; preds = %"end for output.s0.b.rebased48"
  %40 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb

after_bb.loopexit1529:                            ; preds = %"end for output.s0.y.yo181"
  %41 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %after_bb

after_bb:                                         ; preds = %after_bb.loopexit1529, %after_bb.loopexit1527, %after_bb.loopexit, %"consume sum_filter108", %next_bb19
  %.01291 = phi i8* [ null, %"consume sum_filter108" ], [ null, %next_bb19 ], [ %.2, %after_bb.loopexit ], [ %.4, %after_bb.loopexit1527 ], [ %41, %after_bb.loopexit1529 ]
  %.0 = phi i8* [ %1899, %"consume sum_filter108" ], [ null, %next_bb19 ], [ %39, %after_bb.loopexit ], [ %40, %after_bb.loopexit1527 ], [ %1899, %after_bb.loopexit1529 ]
  %42 = load i8*, i8** %host.i, align 8, !tbaa !172
  %43 = load i8*, i8** %host.i919, align 8, !tbaa !172
  %44 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i920, align 8, !tbaa !176
  %extent.i990 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 0, i32 1
  %45 = load i32, i32* %extent.i990, align 4, !tbaa !178
  %extent.i996 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 1, i32 1
  %46 = load i32, i32* %extent.i996, align 4, !tbaa !178
  %stride.i998 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 1, i32 2
  %47 = load i32, i32* %stride.i998, align 4, !tbaa !182
  %extent.i1002 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 2, i32 1
  %48 = load i32, i32* %extent.i1002, align 4, !tbaa !178
  %stride.i1004 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %44, i64 2, i32 2
  %49 = load i32, i32* %stride.i1004, align 4, !tbaa !182
  %50 = load i8*, i8** %host.i937, align 8, !tbaa !172
  %51 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i938, align 8, !tbaa !176
  %min.i1011 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 1, i32 0
  %52 = load i32, i32* %min.i1011, align 4, !tbaa !181
  %stride.i1013 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 1, i32 2
  %53 = load i32, i32* %stride.i1013, align 4, !tbaa !182
  %min.i1015 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 2, i32 0
  %54 = load i32, i32* %min.i1015, align 4, !tbaa !181
  %stride.i1017 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 2, i32 2
  %55 = load i32, i32* %stride.i1017, align 4, !tbaa !182
  %min.i1019 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 3, i32 0
  %56 = load i32, i32* %min.i1019, align 4, !tbaa !181
  %extent.i1021 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 3, i32 1
  %57 = load i32, i32* %extent.i1021, align 4, !tbaa !178
  %stride.i1023 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %51, i64 3, i32 2
  %58 = load i32, i32* %stride.i1023, align 4, !tbaa !182
  %59 = load i8*, i8** %host.i956, align 8, !tbaa !172
  %60 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i957, align 8, !tbaa !176
  %min.i1032 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 1, i32 0
  %61 = load i32, i32* %min.i1032, align 4, !tbaa !181
  %extent.i1034 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 1, i32 1
  %62 = load i32, i32* %extent.i1034, align 4, !tbaa !178
  %stride.i1036 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 1, i32 2
  %63 = load i32, i32* %stride.i1036, align 4, !tbaa !182
  %min.i1038 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 2, i32 0
  %64 = load i32, i32* %min.i1038, align 4, !tbaa !181
  %extent.i1040 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 2, i32 1
  %65 = load i32, i32* %extent.i1040, align 4, !tbaa !178
  %stride.i1042 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 2, i32 2
  %66 = load i32, i32* %stride.i1042, align 4, !tbaa !182
  %stride.i1048 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %60, i64 3, i32 2
  %67 = load i32, i32* %stride.i1048, align 4, !tbaa !182
  %68 = icmp sgt i32 %62, 7
  %69 = and i32 %62, 1
  %70 = icmp eq i32 %69, 0
  %71 = or i1 %68, %70
  %72 = icmp sgt i32 %65, 7
  %73 = and i32 %65, 1
  %74 = icmp eq i32 %73, 0
  %75 = or i1 %72, %74
  %76 = and i1 %71, %75
  %77 = icmp sgt i32 %45, 15
  %78 = and i1 %77, %76
  br i1 %78, label %then_bb231, label %next_bb232

then_bb:                                          ; preds = %entry
  %t2158 = icmp slt i32 %a187, 0
  %79 = add nsw i32 %6, -1
  %t2159 = mul nsw i32 %79, %a187
  %t2160 = icmp slt i32 %stride_x, 0
  %80 = icmp slt i32 %22, 2
  %t2161 = select i1 %80, i32 %22, i32 2
  %t2162 = add nsw i32 %t2161, -2
  %t2163 = add nsw i32 %22, -1
  %t2164 = select i1 %t2158, i32 %t2159, i32 0
  %81 = select i1 %t2160, i32 %t2163, i32 %t2162
  %82 = add nsw i32 %81, %21
  %t2165 = mul nsw i32 %82, %stride_x
  %t2166 = icmp slt i32 %a186, 0
  %83 = add nsw i32 %8, -1
  %t2167 = mul nsw i32 %83, %a186
  %t2168 = icmp slt i32 %stride_y, 0
  %84 = icmp slt i32 %25, 2
  %t2169 = select i1 %84, i32 %25, i32 2
  %t2170 = add nsw i32 %t2169, -2
  %t2171 = add nsw i32 %25, -1
  %t2172 = select i1 %t2166, i32 %t2167, i32 0
  %85 = select i1 %t2168, i32 %t2171, i32 %t2170
  %86 = add nsw i32 %85, %24
  %t2173 = mul nsw i32 %86, %stride_y
  %87 = icmp eq i32 %6, 3
  %88 = icmp eq i32 %8, 3
  %t2174 = and i1 %87, %88
  %a187.op894 = shl i32 %a187, 1
  %t2175 = select i1 %t2158, i32 %a187.op894, i32 0
  %a186.op895 = shl i32 %a186, 1
  %t2176 = select i1 %t2166, i32 %a186.op895, i32 0
  %t2151 = icmp eq i32 %depth_multiplier, 1
  %89 = add nuw nsw i32 %25, 1
  %t2153 = ashr i32 %89, 1
  %90 = add nuw nsw i32 %22, 1
  %t2154 = ashr i32 %90, 1
  %91 = add nuw nsw i32 %5, 15
  %t2129 = ashr i32 %91, 4
  %92 = icmp sgt i32 %a186, 0
  %93 = select i1 %92, i32 %a186, i32 0
  %t2142 = shl nuw nsw i32 %93, 1
  %94 = icmp sgt i32 %a187, 0
  %95 = select i1 %94, i32 %a187, i32 0
  %t2149 = shl nuw nsw i32 %95, 1
  %96 = select i1 %t2174, i32 %t2176, i32 %t2172
  %b16 = add nsw i32 %t2173, %96
  %97 = select i1 %t2174, i32 %t2175, i32 %t2164
  %b15 = add nsw i32 %t2165, %97
  %b20 = add nsw i32 %t2173, %t2172
  %98 = select i1 %t2166, i32 0, i32 %t2167
  %99 = select i1 %t2168, i32 %t2170, i32 %t2171
  %100 = add nsw i32 %99, %24
  %101 = mul nsw i32 %100, %stride_y
  %b19 = add nsw i32 %101, %98
  %b18 = add nsw i32 %t2165, %t2164
  %102 = select i1 %t2158, i32 0, i32 %t2159
  %103 = select i1 %t2160, i32 %t2162, i32 %t2163
  %104 = add nsw i32 %103, %21
  %105 = mul nsw i32 %104, %stride_x
  %b17 = add nsw i32 %105, %102
  %106 = mul nsw i32 %15, %14
  %107 = mul nsw i32 %18, %16
  %108 = mul nsw i32 %13, %12
  %109 = add i32 %106, %108
  %t2152 = add i32 %109, %107
  %b10 = add nsw i32 %5, -16
  %110 = icmp sgt i32 %6, 0
  %111 = select i1 %110, i32 %6, i32 0
  %t2439 = zext i32 %111 to i64
  %112 = icmp sgt i32 %8, 0
  %113 = select i1 %112, i32 %8, i32 0
  %t2440 = zext i32 %113 to i64
  %114 = shl nuw nsw i64 %t2439, 5
  %115 = mul i64 %114, %t2440
  %116 = or i64 %115, 6
  %117 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %118 = sext i32 %7 to i64
  %119 = insertelement <16 x i8> undef, i8 %filter_zero, i32 0
  %120 = shufflevector <16 x i8> %119, <16 x i8> undef, <16 x i32> zeroinitializer
  %121 = zext <16 x i8> %120 to <16 x i16>
  %122 = bitcast i8* %2 to i32*
  %123 = zext i8 %input_zero to i32
  %124 = insertelement <16 x i32> undef, i32 %123, i32 0
  %125 = shufflevector <16 x i32> %124, <16 x i32> undef, <16 x i32> zeroinitializer
  %126 = bitcast [16 x i32]* %sum_filter776 to <8 x i32>*
  %127 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter776, i64 0, i64 8
  %128 = bitcast i32* %127 to <8 x i32>*
  %129 = icmp sgt i32 %97, %t2164
  %t2182 = select i1 %129, i32 %b18, i32 %b15
  %130 = icmp sgt i32 %96, %t2172
  %t2180 = select i1 %130, i32 %b20, i32 %b16
  %131 = select i1 %t2174, i32 %t2149, i32 %102
  %a15 = add nsw i32 %105, %131
  %132 = icmp sgt i32 %131, %102
  %133 = select i1 %132, i32 %a15, i32 %b17
  %t2183 = sub nsw i32 %133, %t2182
  %134 = select i1 %t2174, i32 %t2142, i32 %98
  %a17 = add nsw i32 %101, %134
  %135 = icmp sgt i32 %134, %98
  %136 = select i1 %135, i32 %a17, i32 %b19
  %t2181 = sub nsw i32 %136, %t2180
  %t2185 = sub nsw i32 %b17, %b18
  %t2184 = sub nsw i32 %b19, %b20
  %.neg1493 = mul i32 %26, %24
  %.neg1494 = mul i32 %23, %21
  %.neg1495 = mul i32 %27, %16
  %137 = icmp sgt i32 %17, 0
  %a22 = add nsw i32 %t2181, 1
  %a21 = add nsw i32 %t2183, 1
  %.inv898 = icmp slt i32 %t2183, 0
  %138 = select i1 %.inv898, i32 0, i32 %a21
  %t2441 = zext i32 %138 to i64
  %.inv899 = icmp slt i32 %t2181, 0
  %139 = select i1 %.inv899, i32 0, i32 %a22
  %t2442 = zext i32 %139 to i64
  %t2443 = shl nuw nsw i64 %t2441, 4
  %140 = mul i64 %t2443, %t2442
  %141 = or i64 %140, 3
  %142 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2202 = sub i32 %b18, %t2182
  %t2203 = sub i32 %b20, %t2180
  %143 = icmp eq i32 %depth_multiplier, 0
  %t2446 = select i1 %143, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit910 = ashr i32 %depth_multiplier, 31
  %144 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %145 = shufflevector <16 x i32> %144, <16 x i32> undef, <16 x i32> zeroinitializer
  %146 = sub nsw <16 x i32> %145, %t2446
  %147 = xor i32 %depth_multiplier.lobit910, -1
  %148 = sub nsw i32 %147, %depth_multiplier.lobit910
  %149 = insertelement <16 x i32> undef, i32 %148, i32 0
  %150 = shufflevector <16 x i32> %149, <16 x i32> undef, <16 x i32> zeroinitializer
  %151 = xor <16 x i32> %t2446, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %152 = sext i32 %b18 to i64
  %153 = sext i32 %13 to i64
  %t2211 = sub nsw i32 %a186.op895, %t2180
  %reass.add1497 = add i32 %.neg1493, %.neg1494
  %reass.add1498 = add i32 %reass.add1497, %.neg1495
  %154 = icmp sgt i32 %25, 0
  %b25 = add nsw i32 %25, -2
  %155 = insertelement <2 x i32> poison, i32 %a187, i32 0
  %156 = insertelement <2 x i32> %155, i32 %a187.op894, i32 1
  %157 = insertelement <2 x i32> poison, i32 %t2182, i32 0
  %158 = shufflevector <2 x i32> %157, <2 x i32> undef, <2 x i32> zeroinitializer
  %159 = sub nsw <2 x i32> %156, %158
  %shuffle2277 = shufflevector <2 x i32> %159, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %t2242 = sub nsw i32 %a186, %t2180
  %160 = icmp sgt i32 %22, 0
  %b26 = add nsw i32 %22, -2
  %161 = bitcast [64 x i32]* %offset_c545774 to <8 x i32>*
  %162 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 8
  %163 = bitcast i32* %162 to <8 x i32>*
  %164 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 16
  %165 = bitcast i32* %164 to <8 x i32>*
  %166 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 24
  %167 = bitcast i32* %166 to <8 x i32>*
  %168 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 32
  %169 = bitcast i32* %168 to <8 x i32>*
  %170 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 40
  %171 = bitcast i32* %170 to <8 x i32>*
  %172 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 48
  %173 = bitcast i32* %172 to <8 x i32>*
  %174 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 56
  %175 = bitcast i32* %174 to <8 x i32>*
  %176 = sext i32 %a187 to i64
  %177 = sext i32 %21 to i64
  %178 = sext i32 %stride_x to i64
  %179 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %180 = shufflevector <16 x i32> %179, <16 x i32> undef, <16 x i32> zeroinitializer
  %181 = sext <16 x i32> %180 to <16 x i64>
  %182 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %183 = shufflevector <16 x i32> %182, <16 x i32> undef, <16 x i32> zeroinitializer
  %.not903 = icmp eq i32 %output_shift, 0
  %184 = select i1 %.not903, <16 x i32> zeroinitializer, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %185 = add i32 %output_shift, -1
  %186 = insertelement <16 x i32> undef, i32 %185, i32 0
  %187 = shufflevector <16 x i32> %186, <16 x i32> undef, <16 x i32> zeroinitializer
  %188 = zext i8 %output_zero to i16
  %189 = insertelement <16 x i16> undef, i16 %188, i32 0
  %190 = shufflevector <16 x i16> %189, <16 x i16> undef, <16 x i32> zeroinitializer
  %191 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b28 = shufflevector <16 x i8> %191, <16 x i8> undef, <16 x i32> zeroinitializer
  %192 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b27 = shufflevector <16 x i8> %192, <16 x i8> undef, <16 x i32> zeroinitializer
  %193 = sext i32 %23 to i64
  %194 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %195 = zext i32 %6 to i64
  %196 = sext i32 %6 to i64
  %197 = sext i32 %9 to i64
  %198 = zext i32 %8 to i64
  %199 = zext i32 %t2185 to i64
  %200 = sext i32 %t2203 to i64
  %201 = sext i32 %a21 to i64
  %202 = sext i32 %t2202 to i64
  %203 = sext i32 %b20 to i64
  %204 = sext i32 %15 to i64
  %205 = zext i32 %t2184 to i64
  %206 = sext i32 %16 to i64
  %207 = sext i32 %18 to i64
  %zext1956 = zext i32 %17 to i64
  %208 = add nsw i64 %195, -1
  %209 = add nsw i64 %195, -1
  %210 = add nuw nsw i64 %199, 1
  %brmerge.demorgan = and i1 %112, %110
  %xtraiter2358 = and i64 %195, 3
  %211 = icmp ult i64 %208, 3
  %unroll_iter2361 = and i64 %195, 4294967292
  %lcmp.mod2360.not = icmp eq i64 %xtraiter2358, 0
  %xtraiter2363 = and i64 %195, 3
  %212 = icmp ult i64 %209, 3
  %unroll_iter2368 = and i64 %195, 4294967292
  %lcmp.mod2365.not = icmp eq i64 %xtraiter2363, 0
  %213 = or i32 %t2184, %t2185
  %214 = icmp slt i32 %213, 0
  %215 = or i32 %t2184, %t2185
  %.not2229 = icmp sgt i32 %215, -1
  %xtraiter2370 = and i64 %210, 3
  %216 = icmp ult i32 %t2185, 3
  %unroll_iter2373 = and i64 %210, 8589934588
  %lcmp.mod2372.not = icmp eq i64 %xtraiter2370, 0
  %217 = insertelement <2 x i32> poison, i32 %stride_y, i32 0
  %218 = shufflevector <2 x i32> %217, <2 x i32> undef, <2 x i32> zeroinitializer
  %219 = insertelement <2 x i32> poison, i32 %t2242, i32 0
  %220 = shufflevector <2 x i32> %219, <2 x i32> undef, <2 x i32> zeroinitializer
  %221 = insertelement <2 x i32> poison, i32 %a21, i32 0
  %222 = shufflevector <2 x i32> %221, <2 x i32> undef, <2 x i32> zeroinitializer
  %223 = insertelement <2 x i32> poison, i32 %t2211, i32 0
  %224 = shufflevector <2 x i32> %223, <2 x i32> undef, <2 x i32> zeroinitializer
  %225 = insertelement <2 x i32> poison, i32 %a21, i32 0
  %226 = shufflevector <2 x i32> %225, <2 x i32> undef, <2 x i32> zeroinitializer
  %227 = insertelement <4 x i32> poison, i32 %t2182, i32 0
  %228 = insertelement <4 x i32> %227, i32 %t2182, i32 1
  %229 = insertelement <2 x i32> poison, i32 %t2180, i32 0
  %230 = shufflevector <2 x i32> %229, <2 x i32> undef, <2 x i32> zeroinitializer
  %231 = extractelement <2 x i32> %159, i32 1
  %232 = extractelement <2 x i32> %159, i32 0
  %233 = shufflevector <2 x i32> %159, <2 x i32> undef, <2 x i32> <i32 1, i32 1>
  %234 = insertelement <4 x i32> %228, i32 %232, i32 2
  %235 = insertelement <4 x i32> %234, i32 %232, i32 3
  %236 = insertelement <2 x i64> poison, i64 %178, i32 0
  %237 = shufflevector <2 x i64> %236, <2 x i64> undef, <2 x i32> zeroinitializer
  %238 = insertelement <2 x i32> poison, i32 %stride_x, i32 0
  %239 = shufflevector <2 x i32> %238, <2 x i32> undef, <2 x i32> zeroinitializer
  %240 = insertelement <2 x i32> poison, i32 %a21, i32 0
  %241 = shufflevector <2 x i32> %240, <2 x i32> undef, <2 x i32> zeroinitializer
  br label %"for output.s0.c.co"

next_bb:                                          ; preds = %entry
  br i1 %37, label %then_bb18, label %next_bb19

"for output.s0.c.co":                             ; preds = %then_bb, %"end for output.s0.b.rebased"
  %.11292 = phi i8* [ null, %then_bb ], [ %.2, %"end for output.s0.b.rebased" ]
  %output.s0.c.co = phi i32 [ 0, %then_bb ], [ %399, %"end for output.s0.b.rebased" ]
  %a8 = shl nsw i32 %output.s0.c.co, 4
  %242 = icmp sgt i32 %b10, %a8
  %output.s0.c.c.base = select i1 %242, i32 %a8, i32 %b10
  %243 = load i64, i64* %.fca.1.gep, align 8, !tbaa !386
  %cmp.i = icmp ult i64 %243, %116
  %244 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !388
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !389

if.then.i:                                        ; preds = %"for output.s0.c.co"
  %tobool1.not.i = icmp ne i8* %244, null
  %245 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %245, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %244) #17
  %.pre2093 = load i64, i64* %.fca.2.gep, align 8, !tbaa !390
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %246 = phi i64 [ %.pre2093, %if.then3.i ], [ %245, %if.then.i ]
  %add.i = add i64 %246, %116
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !390
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %116) #17
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !388
  store i64 %116, i64* %.fca.1.gep, align 8, !tbaa !386
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for output.s0.c.co", %if.end11.i
  %247 = phi i8* [ %storemerge.i, %if.end11.i ], [ %244, %"for output.s0.c.co" ]
  %248 = bitcast i8* %247 to i16*
  %.not896 = icmp eq i8* %247, null
  br i1 %.not896, label %then_bb2, label %"produce filter_zeroed", !prof !391

then_bb2:                                         ; preds = %pseudostack_alloc.exit
  %249 = alloca i8*, i64 %116, align 32
  %250 = bitcast i8** %249 to i16*
  store i8** %249, i8*** %117, align 8
  br label %"produce filter_zeroed"

"produce filter_zeroed":                          ; preds = %pseudostack_alloc.exit, %then_bb2
  %filter_zeroed = phi i16* [ %250, %then_bb2 ], [ %248, %pseudostack_alloc.exit ]
  br i1 %brmerge.demorgan, label %"for filter_zeroed.s0.y.us.preheader", label %"consume sum_filter", !prof !392

"for filter_zeroed.s0.y.us.preheader":            ; preds = %"produce filter_zeroed"
  %251 = sext i32 %output.s0.c.c.base to i64
  br label %"for filter_zeroed.s0.y.us"

"for filter_zeroed.s0.y.us":                      ; preds = %"for filter_zeroed.s0.y.us.preheader", %"end for filter_zeroed.s0.x.loopexit.us"
  %indvars.iv1926 = phi i64 [ 0, %"for filter_zeroed.s0.y.us.preheader" ], [ %indvars.iv.next1927, %"end for filter_zeroed.s0.x.loopexit.us" ]
  %252 = mul nsw i64 %indvars.iv1926, %196
  %253 = mul nsw i64 %indvars.iv1926, %197
  %254 = add nsw i64 %253, %251
  br i1 %211, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"for filter_zeroed.s0.x.us":                      ; preds = %"for filter_zeroed.s0.y.us", %"for filter_zeroed.s0.x.us"
  %indvars.iv1924 = phi i64 [ %indvars.iv.next1925.3, %"for filter_zeroed.s0.x.us" ], [ 0, %"for filter_zeroed.s0.y.us" ]
  %niter2362 = phi i64 [ %niter2362.nsub.3, %"for filter_zeroed.s0.x.us" ], [ %unroll_iter2361, %"for filter_zeroed.s0.y.us" ]
  %255 = mul nsw i64 %indvars.iv1924, %118
  %256 = add nsw i64 %255, %254
  %257 = getelementptr inbounds i8, i8* %3, i64 %256
  %258 = bitcast i8* %257 to <16 x i8>*
  %259 = load <16 x i8>, <16 x i8>* %258, align 1, !tbaa !393
  %260 = zext <16 x i8> %259 to <16 x i16>
  %261 = sub nsw <16 x i16> %260, %121
  %262 = add nsw i64 %indvars.iv1924, %252
  %263 = shl nsw i64 %262, 4
  %264 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %263
  %265 = bitcast i16* %264 to <16 x i16>*
  store <16 x i16> %261, <16 x i16>* %265, align 32, !tbaa !396
  %indvars.iv.next1925 = or i64 %indvars.iv1924, 1
  %266 = mul nsw i64 %indvars.iv.next1925, %118
  %267 = add nsw i64 %266, %254
  %268 = getelementptr inbounds i8, i8* %3, i64 %267
  %269 = bitcast i8* %268 to <16 x i8>*
  %270 = load <16 x i8>, <16 x i8>* %269, align 1, !tbaa !393
  %271 = zext <16 x i8> %270 to <16 x i16>
  %272 = sub nsw <16 x i16> %271, %121
  %273 = add nsw i64 %indvars.iv.next1925, %252
  %274 = shl nsw i64 %273, 4
  %275 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %274
  %276 = bitcast i16* %275 to <16 x i16>*
  store <16 x i16> %272, <16 x i16>* %276, align 32, !tbaa !396
  %indvars.iv.next1925.1 = or i64 %indvars.iv1924, 2
  %277 = mul nsw i64 %indvars.iv.next1925.1, %118
  %278 = add nsw i64 %277, %254
  %279 = getelementptr inbounds i8, i8* %3, i64 %278
  %280 = bitcast i8* %279 to <16 x i8>*
  %281 = load <16 x i8>, <16 x i8>* %280, align 1, !tbaa !393
  %282 = zext <16 x i8> %281 to <16 x i16>
  %283 = sub nsw <16 x i16> %282, %121
  %284 = add nsw i64 %indvars.iv.next1925.1, %252
  %285 = shl nsw i64 %284, 4
  %286 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %285
  %287 = bitcast i16* %286 to <16 x i16>*
  store <16 x i16> %283, <16 x i16>* %287, align 32, !tbaa !396
  %indvars.iv.next1925.2 = or i64 %indvars.iv1924, 3
  %288 = mul nsw i64 %indvars.iv.next1925.2, %118
  %289 = add nsw i64 %288, %254
  %290 = getelementptr inbounds i8, i8* %3, i64 %289
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1, !tbaa !393
  %293 = zext <16 x i8> %292 to <16 x i16>
  %294 = sub nsw <16 x i16> %293, %121
  %295 = add nsw i64 %indvars.iv.next1925.2, %252
  %296 = shl nsw i64 %295, 4
  %297 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %296
  %298 = bitcast i16* %297 to <16 x i16>*
  store <16 x i16> %294, <16 x i16>* %298, align 32, !tbaa !396
  %indvars.iv.next1925.3 = add nuw nsw i64 %indvars.iv1924, 4
  %niter2362.nsub.3 = add i64 %niter2362, -4
  %niter2362.ncmp.3 = icmp eq i64 %niter2362.nsub.3, 0
  br i1 %niter2362.ncmp.3, label %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x.us"

"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x.us", %"for filter_zeroed.s0.y.us"
  %indvars.iv1924.unr = phi i64 [ 0, %"for filter_zeroed.s0.y.us" ], [ %indvars.iv.next1925.3, %"for filter_zeroed.s0.x.us" ]
  br i1 %lcmp.mod2360.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil"

"for filter_zeroed.s0.x.us.epil":                 ; preds = %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x.us.epil"
  %indvars.iv1924.epil = phi i64 [ %indvars.iv.next1925.epil, %"for filter_zeroed.s0.x.us.epil" ], [ %indvars.iv1924.unr, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %epil.iter2359 = phi i64 [ %epil.iter2359.sub, %"for filter_zeroed.s0.x.us.epil" ], [ %xtraiter2358, %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa" ]
  %299 = mul nsw i64 %indvars.iv1924.epil, %118
  %300 = add nsw i64 %299, %254
  %301 = getelementptr inbounds i8, i8* %3, i64 %300
  %302 = bitcast i8* %301 to <16 x i8>*
  %303 = load <16 x i8>, <16 x i8>* %302, align 1, !tbaa !393
  %304 = zext <16 x i8> %303 to <16 x i16>
  %305 = sub nsw <16 x i16> %304, %121
  %306 = add nsw i64 %indvars.iv1924.epil, %252
  %307 = shl nsw i64 %306, 4
  %308 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %307
  %309 = bitcast i16* %308 to <16 x i16>*
  store <16 x i16> %305, <16 x i16>* %309, align 32, !tbaa !396
  %indvars.iv.next1925.epil = add nuw nsw i64 %indvars.iv1924.epil, 1
  %epil.iter2359.sub = add i64 %epil.iter2359, -1
  %epil.iter2359.cmp.not = icmp eq i64 %epil.iter2359.sub, 0
  br i1 %epil.iter2359.cmp.not, label %"end for filter_zeroed.s0.x.loopexit.us", label %"for filter_zeroed.s0.x.us.epil", !llvm.loop !398

"end for filter_zeroed.s0.x.loopexit.us":         ; preds = %"for filter_zeroed.s0.x.us.epil", %"end for filter_zeroed.s0.x.loopexit.us.unr-lcssa"
  %indvars.iv.next1927 = add nuw nsw i64 %indvars.iv1926, 1
  %.not916.us = icmp eq i64 %indvars.iv.next1927, %198
  br i1 %.not916.us, label %"for sum_filter.s1.r19$y.preheader", label %"for filter_zeroed.s0.y.us"

"for sum_filter.s1.r19$y.preheader":              ; preds = %"end for filter_zeroed.s0.x.loopexit.us"
  br i1 %110, label %"for sum_filter.s1.r19$y.us", label %"consume sum_filter", !prof !399

"for sum_filter.s1.r19$y.us":                     ; preds = %"for sum_filter.s1.r19$y.preheader", %"end for sum_filter.s1.r19$x.loopexit.us"
  %indvars.iv1932 = phi i64 [ %indvars.iv.next1933, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved775.sroa.40.0.us = phi <8 x i32> [ %.lcssa2303, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %convolved775.sroa.0.0.us = phi <8 x i32> [ %353, %"end for sum_filter.s1.r19$x.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ]
  %310 = mul nsw i64 %indvars.iv1932, %196
  br i1 %212, label %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x.us"

"for sum_filter.s1.r19$x.us":                     ; preds = %"for sum_filter.s1.r19$y.us", %"for sum_filter.s1.r19$x.us"
  %indvars.iv1930 = phi i64 [ %indvars.iv.next1931.3, %"for sum_filter.s1.r19$x.us" ], [ 0, %"for sum_filter.s1.r19$y.us" ]
  %convolved775.sroa.40.1.us = phi <8 x i32> [ %341, %"for sum_filter.s1.r19$x.us" ], [ %convolved775.sroa.40.0.us, %"for sum_filter.s1.r19$y.us" ]
  %convolved775.sroa.0.1.us = phi <8 x i32> [ %340, %"for sum_filter.s1.r19$x.us" ], [ %convolved775.sroa.0.0.us, %"for sum_filter.s1.r19$y.us" ]
  %niter2369 = phi i64 [ %niter2369.nsub.3, %"for sum_filter.s1.r19$x.us" ], [ %unroll_iter2368, %"for sum_filter.s1.r19$y.us" ]
  %311 = shufflevector <8 x i32> %convolved775.sroa.0.1.us, <8 x i32> %convolved775.sroa.40.1.us, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %312 = add nsw i64 %indvars.iv1930, %310
  %313 = shl nsw i64 %312, 4
  %314 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %313
  %315 = bitcast i16* %314 to <16 x i16>*
  %316 = load <16 x i16>, <16 x i16>* %315, align 32, !tbaa !396
  %317 = sext <16 x i16> %316 to <16 x i32>
  %318 = add nsw <16 x i32> %311, %317
  %indvars.iv.next1931 = or i64 %indvars.iv1930, 1
  %319 = add nsw i64 %indvars.iv.next1931, %310
  %320 = shl nsw i64 %319, 4
  %321 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %320
  %322 = bitcast i16* %321 to <16 x i16>*
  %323 = load <16 x i16>, <16 x i16>* %322, align 32, !tbaa !396
  %324 = sext <16 x i16> %323 to <16 x i32>
  %325 = add nsw <16 x i32> %318, %324
  %indvars.iv.next1931.1 = or i64 %indvars.iv1930, 2
  %326 = add nsw i64 %indvars.iv.next1931.1, %310
  %327 = shl nsw i64 %326, 4
  %328 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %327
  %329 = bitcast i16* %328 to <16 x i16>*
  %330 = load <16 x i16>, <16 x i16>* %329, align 32, !tbaa !396
  %331 = sext <16 x i16> %330 to <16 x i32>
  %332 = add nsw <16 x i32> %325, %331
  %indvars.iv.next1931.2 = or i64 %indvars.iv1930, 3
  %333 = add nsw i64 %indvars.iv.next1931.2, %310
  %334 = shl nsw i64 %333, 4
  %335 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %334
  %336 = bitcast i16* %335 to <16 x i16>*
  %337 = load <16 x i16>, <16 x i16>* %336, align 32, !tbaa !396
  %338 = sext <16 x i16> %337 to <16 x i32>
  %339 = add nsw <16 x i32> %332, %338
  %340 = shufflevector <16 x i32> %339, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %341 = shufflevector <16 x i32> %339, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1931.3 = add nuw nsw i64 %indvars.iv1930, 4
  %niter2369.nsub.3 = add i64 %niter2369, -4
  %niter2369.ncmp.3 = icmp eq i64 %niter2369.nsub.3, 0
  br i1 %niter2369.ncmp.3, label %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit", label %"for sum_filter.s1.r19$x.us"

"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit": ; preds = %"for sum_filter.s1.r19$x.us"
  %342 = shufflevector <16 x i32> %339, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa"

"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa": ; preds = %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit", %"for sum_filter.s1.r19$y.us"
  %.lcssa2304.ph = phi <16 x i32> [ undef, %"for sum_filter.s1.r19$y.us" ], [ %339, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2303.ph = phi <8 x i32> [ undef, %"for sum_filter.s1.r19$y.us" ], [ %341, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv1930.unr = phi i64 [ 0, %"for sum_filter.s1.r19$y.us" ], [ %indvars.iv.next1931.3, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.40.1.us.unr = phi <8 x i32> [ %convolved775.sroa.40.0.us, %"for sum_filter.s1.r19$y.us" ], [ %341, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.0.1.us.unr = phi <8 x i32> [ %convolved775.sroa.0.0.us, %"for sum_filter.s1.r19$y.us" ], [ %342, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2365.not, label %"end for sum_filter.s1.r19$x.loopexit.us", label %"for sum_filter.s1.r19$x.us.epil"

"for sum_filter.s1.r19$x.us.epil":                ; preds = %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x.us.epil"
  %indvars.iv1930.epil = phi i64 [ %indvars.iv.next1931.epil, %"for sum_filter.s1.r19$x.us.epil" ], [ %indvars.iv1930.unr, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa" ]
  %convolved775.sroa.40.1.us.epil = phi <8 x i32> [ %352, %"for sum_filter.s1.r19$x.us.epil" ], [ %convolved775.sroa.40.1.us.unr, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa" ]
  %convolved775.sroa.0.1.us.epil = phi <8 x i32> [ %351, %"for sum_filter.s1.r19$x.us.epil" ], [ %convolved775.sroa.0.1.us.unr, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa" ]
  %epil.iter2364 = phi i64 [ %epil.iter2364.sub, %"for sum_filter.s1.r19$x.us.epil" ], [ %xtraiter2363, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa" ]
  %343 = shufflevector <8 x i32> %convolved775.sroa.0.1.us.epil, <8 x i32> %convolved775.sroa.40.1.us.epil, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %344 = add nsw i64 %indvars.iv1930.epil, %310
  %345 = shl nsw i64 %344, 4
  %346 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %345
  %347 = bitcast i16* %346 to <16 x i16>*
  %348 = load <16 x i16>, <16 x i16>* %347, align 32, !tbaa !396
  %349 = sext <16 x i16> %348 to <16 x i32>
  %350 = add nsw <16 x i32> %343, %349
  %351 = shufflevector <16 x i32> %350, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %352 = shufflevector <16 x i32> %350, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1931.epil = add nuw nsw i64 %indvars.iv1930.epil, 1
  %epil.iter2364.sub = add i64 %epil.iter2364, -1
  %epil.iter2364.cmp.not = icmp eq i64 %epil.iter2364.sub, 0
  br i1 %epil.iter2364.cmp.not, label %"end for sum_filter.s1.r19$x.loopexit.us", label %"for sum_filter.s1.r19$x.us.epil", !llvm.loop !400

"end for sum_filter.s1.r19$x.loopexit.us":        ; preds = %"for sum_filter.s1.r19$x.us.epil", %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa"
  %.lcssa2304 = phi <16 x i32> [ %.lcssa2304.ph, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa" ], [ %350, %"for sum_filter.s1.r19$x.us.epil" ]
  %.lcssa2303 = phi <8 x i32> [ %.lcssa2303.ph, %"end for sum_filter.s1.r19$x.loopexit.us.unr-lcssa" ], [ %352, %"for sum_filter.s1.r19$x.us.epil" ]
  %353 = shufflevector <16 x i32> %.lcssa2304, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next1933 = add nuw nsw i64 %indvars.iv1932, 1
  %.not914.us = icmp eq i64 %indvars.iv.next1933, %198
  br i1 %.not914.us, label %"consume sum_filter.loopexit", label %"for sum_filter.s1.r19$y.us"

"consume sum_filter.loopexit":                    ; preds = %"end for sum_filter.s1.r19$x.loopexit.us"
  %354 = shufflevector <16 x i32> %.lcssa2304, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume sum_filter"

"consume sum_filter":                             ; preds = %"produce filter_zeroed", %"consume sum_filter.loopexit", %"for sum_filter.s1.r19$y.preheader"
  %convolved775.sroa.40.3 = phi <8 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ], [ %.lcssa2303, %"consume sum_filter.loopexit" ]
  %convolved775.sroa.0.3 = phi <8 x i32> [ zeroinitializer, %"produce filter_zeroed" ], [ zeroinitializer, %"for sum_filter.s1.r19$y.preheader" ], [ %354, %"consume sum_filter.loopexit" ]
  %355 = sext i32 %output.s0.c.c.base to i64
  %356 = getelementptr inbounds i32, i32* %122, i64 %355
  %357 = bitcast i32* %356 to <8 x i32>*
  %358 = load <8 x i32>, <8 x i32>* %357, align 4, !tbaa !401
  %359 = getelementptr inbounds i32, i32* %356, i64 8
  %360 = bitcast i32* %359 to <8 x i32>*
  %361 = load <8 x i32>, <8 x i32>* %360, align 4, !tbaa !401
  %362 = shufflevector <8 x i32> %358, <8 x i32> %361, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %363 = shufflevector <8 x i32> %convolved775.sroa.0.3, <8 x i32> %convolved775.sroa.40.3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %364 = mul nsw <16 x i32> %363, %125
  %365 = sub nsw <16 x i32> %362, %364
  %366 = shufflevector <16 x i32> %365, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %366, <8 x i32>* %126, align 32, !tbaa !403
  %367 = shufflevector <16 x i32> %365, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %367, <8 x i32>* %128, align 32, !tbaa !413
  br i1 %137, label %"for output.s0.b.rebased.preheader", label %"end for output.s0.b.rebased", !prof !399

"for output.s0.b.rebased.preheader":              ; preds = %"consume sum_filter"
  %368 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base, i32 0
  %369 = shufflevector <16 x i32> %368, <16 x i32> undef, <16 x i32> zeroinitializer
  %370 = add nsw <16 x i32> %369, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %371 = shufflevector <16 x i32> %370, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %372 = shufflevector <16 x i32> %370, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit908 = ashr <8 x i32> %371, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %.lobit909 = ashr <8 x i32> %372, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %t2445 = shufflevector <8 x i32> %.lobit908, <8 x i32> %.lobit909, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %373 = sub nsw <16 x i32> %370, %t2445
  %374 = and <16 x i32> %t2445, %150
  %375 = sub i32 %output.s0.c.c.base, %t2152
  %376 = bitcast i16* %filter_zeroed to <16 x i16>*
  %377 = getelementptr inbounds i16, i16* %filter_zeroed, i64 16
  %378 = bitcast i16* %377 to <16 x i16>*
  %379 = getelementptr inbounds i16, i16* %filter_zeroed, i64 32
  %380 = bitcast i16* %379 to <16 x i16>*
  %381 = getelementptr inbounds i16, i16* %filter_zeroed, i64 48
  %382 = bitcast i16* %381 to <16 x i16>*
  %383 = getelementptr inbounds i16, i16* %filter_zeroed, i64 64
  %384 = bitcast i16* %383 to <16 x i16>*
  %385 = getelementptr inbounds i16, i16* %filter_zeroed, i64 80
  %386 = bitcast i16* %385 to <16 x i16>*
  %387 = getelementptr inbounds i16, i16* %filter_zeroed, i64 96
  %388 = bitcast i16* %387 to <16 x i16>*
  %389 = getelementptr inbounds i16, i16* %filter_zeroed, i64 112
  %390 = bitcast i16* %389 to <16 x i16>*
  %391 = getelementptr inbounds i16, i16* %filter_zeroed, i64 128
  %392 = bitcast i16* %391 to <16 x i16>*
  %393 = sext i32 %375 to i64
  br label %"for output.s0.b.rebased"

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.yo"
  %indvars.iv1953 = phi i64 [ 0, %"for output.s0.b.rebased.preheader" ], [ %indvars.iv.next1954, %"end for output.s0.y.yo" ]
  %394 = load i64, i64* %.fca.1.gep707, align 8, !tbaa !386
  %cmp.i1050 = icmp ult i64 %394, %141
  %395 = load i8*, i8** %.fca.0.gep706, align 8, !tbaa !388
  br i1 %cmp.i1050, label %if.then.i1053, label %pseudostack_alloc.exit1066, !prof !389

if.then.i1053:                                    ; preds = %"for output.s0.b.rebased"
  %tobool1.not.i1052 = icmp ne i8* %395, null
  %396 = load i64, i64* %.fca.2.gep708, align 8
  %cmp2.i1055 = icmp ugt i64 %396, 16384
  %or.cond1458 = and i1 %tobool1.not.i1052, %cmp2.i1055
  br i1 %or.cond1458, label %if.then3.i1057, label %if.end.i1061

if.then3.i1057:                                   ; preds = %if.then.i1053
  call void @halide_free(i8* null, i8* nonnull %395) #17
  %.pre2094 = load i64, i64* %.fca.2.gep708, align 8, !tbaa !390
  br label %if.end.i1061

if.end.i1061:                                     ; preds = %if.then3.i1057, %if.then.i1053
  %397 = phi i64 [ %.pre2094, %if.then3.i1057 ], [ %396, %if.then.i1053 ]
  %add.i1059 = add i64 %397, %141
  store i64 %add.i1059, i64* %.fca.2.gep708, align 8, !tbaa !390
  %cmp7.i1060 = icmp ugt i64 %add.i1059, 16384
  br i1 %cmp7.i1060, label %if.then8.i1063, label %if.end11.i1065

if.then8.i1063:                                   ; preds = %if.end.i1061
  %call.i1062 = call i8* @halide_malloc(i8* null, i64 %141) #17
  br label %if.end11.i1065

if.end11.i1065:                                   ; preds = %if.then8.i1063, %if.end.i1061
  %storemerge.i1064 = phi i8* [ %call.i1062, %if.then8.i1063 ], [ null, %if.end.i1061 ]
  store i8* %storemerge.i1064, i8** %.fca.0.gep706, align 8, !tbaa !388
  store i64 %141, i64* %.fca.1.gep707, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1066

pseudostack_alloc.exit1066:                       ; preds = %"for output.s0.b.rebased", %if.end11.i1065
  %398 = phi i8* [ %storemerge.i1064, %if.end11.i1065 ], [ %395, %"for output.s0.b.rebased" ]
  %.not900 = icmp eq i8* %398, null
  br i1 %.not900, label %then_bb5, label %"produce resampled_input", !prof !391

"end for output.s0.b.rebased":                    ; preds = %"end for output.s0.y.yo", %"consume sum_filter"
  %.2 = phi i8* [ %.11292, %"consume sum_filter" ], [ %194, %"end for output.s0.y.yo" ]
  %399 = add nuw nsw i32 %output.s0.c.co, 1
  %.not897 = icmp eq i32 %399, %t2129
  br i1 %.not897, label %after_bb.loopexit, label %"for output.s0.c.co"

then_bb5:                                         ; preds = %pseudostack_alloc.exit1066
  %400 = alloca i8*, i64 %141, align 32
  %401 = bitcast i8** %400 to i8*
  store i8** %400, i8*** %142, align 8
  br label %"produce resampled_input"

"produce resampled_input":                        ; preds = %pseudostack_alloc.exit1066, %then_bb5
  %resampled_input = phi i8* [ %401, %then_bb5 ], [ %398, %pseudostack_alloc.exit1066 ]
  %402 = add nsw i64 %indvars.iv1953, %206
  br i1 %t2151, label %then_bb7, label %next_bb8

then_bb7:                                         ; preds = %"produce resampled_input"
  %403 = mul nsw i64 %402, %207
  %404 = add nsw i64 %403, %393
  br i1 %.not2229, label %"for resampled_input.s0.y.rebased.us", label %"consume resampled_input", !prof !392

"for resampled_input.s0.y.rebased.us":            ; preds = %then_bb7, %"end for resampled_input.s0.x.rebased.loopexit.us"
  %indvars.iv1943 = phi i64 [ %indvars.iv.next1944, %"end for resampled_input.s0.x.rebased.loopexit.us" ], [ 0, %then_bb7 ]
  %405 = add nsw i64 %indvars.iv1943, %200
  %406 = mul nsw i64 %405, %201
  %407 = add nsw i64 %406, %202
  %408 = add nsw i64 %indvars.iv1943, %203
  %409 = mul nsw i64 %408, %204
  %410 = add nsw i64 %404, %409
  br i1 %216, label %"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased.us"

"for resampled_input.s0.x.rebased.us":            ; preds = %"for resampled_input.s0.y.rebased.us", %"for resampled_input.s0.x.rebased.us"
  %indvars.iv1941 = phi i64 [ %indvars.iv.next1942.3, %"for resampled_input.s0.x.rebased.us" ], [ 0, %"for resampled_input.s0.y.rebased.us" ]
  %niter2374 = phi i64 [ %niter2374.nsub.3, %"for resampled_input.s0.x.rebased.us" ], [ %unroll_iter2373, %"for resampled_input.s0.y.rebased.us" ]
  %411 = add nsw i64 %indvars.iv1941, %152
  %412 = mul nsw i64 %411, %153
  %413 = add nsw i64 %412, %410
  %414 = getelementptr inbounds i8, i8* %10, i64 %413
  %415 = bitcast i8* %414 to <16 x i8>*
  %416 = load <16 x i8>, <16 x i8>* %415, align 1, !tbaa !415
  %417 = add nsw i64 %indvars.iv1941, %407
  %418 = shl nsw i64 %417, 4
  %419 = getelementptr inbounds i8, i8* %resampled_input, i64 %418
  %420 = bitcast i8* %419 to <16 x i8>*
  store <16 x i8> %416, <16 x i8>* %420, align 16, !tbaa !417
  %indvars.iv.next1942 = or i64 %indvars.iv1941, 1
  %421 = add nsw i64 %indvars.iv.next1942, %152
  %422 = mul nsw i64 %421, %153
  %423 = add nsw i64 %422, %410
  %424 = getelementptr inbounds i8, i8* %10, i64 %423
  %425 = bitcast i8* %424 to <16 x i8>*
  %426 = load <16 x i8>, <16 x i8>* %425, align 1, !tbaa !415
  %427 = add nsw i64 %indvars.iv.next1942, %407
  %428 = shl nsw i64 %427, 4
  %429 = getelementptr inbounds i8, i8* %resampled_input, i64 %428
  %430 = bitcast i8* %429 to <16 x i8>*
  store <16 x i8> %426, <16 x i8>* %430, align 16, !tbaa !417
  %indvars.iv.next1942.1 = or i64 %indvars.iv1941, 2
  %431 = add nsw i64 %indvars.iv.next1942.1, %152
  %432 = mul nsw i64 %431, %153
  %433 = add nsw i64 %432, %410
  %434 = getelementptr inbounds i8, i8* %10, i64 %433
  %435 = bitcast i8* %434 to <16 x i8>*
  %436 = load <16 x i8>, <16 x i8>* %435, align 1, !tbaa !415
  %437 = add nsw i64 %indvars.iv.next1942.1, %407
  %438 = shl nsw i64 %437, 4
  %439 = getelementptr inbounds i8, i8* %resampled_input, i64 %438
  %440 = bitcast i8* %439 to <16 x i8>*
  store <16 x i8> %436, <16 x i8>* %440, align 16, !tbaa !417
  %indvars.iv.next1942.2 = or i64 %indvars.iv1941, 3
  %441 = add nsw i64 %indvars.iv.next1942.2, %152
  %442 = mul nsw i64 %441, %153
  %443 = add nsw i64 %442, %410
  %444 = getelementptr inbounds i8, i8* %10, i64 %443
  %445 = bitcast i8* %444 to <16 x i8>*
  %446 = load <16 x i8>, <16 x i8>* %445, align 1, !tbaa !415
  %447 = add nsw i64 %indvars.iv.next1942.2, %407
  %448 = shl nsw i64 %447, 4
  %449 = getelementptr inbounds i8, i8* %resampled_input, i64 %448
  %450 = bitcast i8* %449 to <16 x i8>*
  store <16 x i8> %446, <16 x i8>* %450, align 16, !tbaa !417
  %indvars.iv.next1942.3 = add nuw nsw i64 %indvars.iv1941, 4
  %niter2374.nsub.3 = add i64 %niter2374, -4
  %niter2374.ncmp.3 = icmp eq i64 %niter2374.nsub.3, 0
  br i1 %niter2374.ncmp.3, label %"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased.us"

"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa": ; preds = %"for resampled_input.s0.x.rebased.us", %"for resampled_input.s0.y.rebased.us"
  %indvars.iv1941.unr = phi i64 [ 0, %"for resampled_input.s0.y.rebased.us" ], [ %indvars.iv.next1942.3, %"for resampled_input.s0.x.rebased.us" ]
  br i1 %lcmp.mod2372.not, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us.epil"

"for resampled_input.s0.x.rebased.us.epil":       ; preds = %"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa", %"for resampled_input.s0.x.rebased.us.epil"
  %indvars.iv1941.epil = phi i64 [ %indvars.iv.next1942.epil, %"for resampled_input.s0.x.rebased.us.epil" ], [ %indvars.iv1941.unr, %"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa" ]
  %epil.iter2371 = phi i64 [ %epil.iter2371.sub, %"for resampled_input.s0.x.rebased.us.epil" ], [ %xtraiter2370, %"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa" ]
  %451 = add nsw i64 %indvars.iv1941.epil, %152
  %452 = mul nsw i64 %451, %153
  %453 = add nsw i64 %452, %410
  %454 = getelementptr inbounds i8, i8* %10, i64 %453
  %455 = bitcast i8* %454 to <16 x i8>*
  %456 = load <16 x i8>, <16 x i8>* %455, align 1, !tbaa !415
  %457 = add nsw i64 %indvars.iv1941.epil, %407
  %458 = shl nsw i64 %457, 4
  %459 = getelementptr inbounds i8, i8* %resampled_input, i64 %458
  %460 = bitcast i8* %459 to <16 x i8>*
  store <16 x i8> %456, <16 x i8>* %460, align 16, !tbaa !417
  %indvars.iv.next1942.epil = add nuw nsw i64 %indvars.iv1941.epil, 1
  %epil.iter2371.sub = add i64 %epil.iter2371, -1
  %epil.iter2371.cmp.not = icmp eq i64 %epil.iter2371.sub, 0
  br i1 %epil.iter2371.cmp.not, label %"end for resampled_input.s0.x.rebased.loopexit.us", label %"for resampled_input.s0.x.rebased.us.epil", !llvm.loop !419

"end for resampled_input.s0.x.rebased.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased.us.epil", %"end for resampled_input.s0.x.rebased.loopexit.us.unr-lcssa"
  %indvars.iv.next1944 = add nuw nsw i64 %indvars.iv1943, 1
  %.not912.us = icmp eq i64 %indvars.iv1943, %205
  br i1 %.not912.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased.us"

next_bb8:                                         ; preds = %"produce resampled_input"
  %461 = trunc i64 %402 to i32
  %462 = mul i32 %18, %461
  %t2201 = sub i32 %462, %t2152
  br i1 %214, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.preheader.split.us", !prof !420

"for resampled_input.s0.y.rebased9.preheader.split.us": ; preds = %next_bb8
  %463 = sdiv <16 x i32> %373, %146
  %464 = add nsw <16 x i32> %463, %374
  %465 = and <16 x i32> %464, %151
  br label %"for resampled_input.s0.y.rebased9.us"

"for resampled_input.s0.y.rebased9.us":           ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"for resampled_input.s0.y.rebased9.preheader.split.us"
  %indvars.iv1937 = phi i64 [ %indvars.iv.next1938, %"end for resampled_input.s0.x.rebased13.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased9.preheader.split.us" ]
  %466 = add nsw i64 %indvars.iv1937, %200
  %467 = mul nsw i64 %466, %201
  %468 = add nsw i64 %467, %202
  %469 = trunc i64 %indvars.iv1937 to i32
  %470 = add i32 %b20, %469
  %471 = mul i32 %470, %15
  %472 = add i32 %471, %t2201
  br label %"for resampled_input.s0.x.rebased12.us"

"for resampled_input.s0.x.rebased12.us":          ; preds = %"for resampled_input.s0.y.rebased9.us", %"for resampled_input.s0.x.rebased12.us"
  %indvars.iv1935 = phi i64 [ 0, %"for resampled_input.s0.y.rebased9.us" ], [ %indvars.iv.next1936, %"for resampled_input.s0.x.rebased12.us" ]
  %473 = trunc i64 %indvars.iv1935 to i32
  %474 = add nsw i32 %b18, %473
  %475 = mul nsw i32 %474, %13
  %476 = add nsw i32 %472, %475
  %477 = insertelement <16 x i32> undef, i32 %476, i32 0
  %478 = shufflevector <16 x i32> %477, <16 x i32> undef, <16 x i32> zeroinitializer
  %479 = add nsw <16 x i32> %478, %465
  %480 = extractelement <16 x i32> %479, i32 0
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %10, i64 %481
  %483 = load i8, i8* %482, align 1, !tbaa !415
  %484 = insertelement <16 x i8> undef, i8 %483, i32 0
  %485 = extractelement <16 x i32> %479, i32 1
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds i8, i8* %10, i64 %486
  %488 = load i8, i8* %487, align 1, !tbaa !415
  %489 = insertelement <16 x i8> %484, i8 %488, i32 1
  %490 = extractelement <16 x i32> %479, i32 2
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds i8, i8* %10, i64 %491
  %493 = load i8, i8* %492, align 1, !tbaa !415
  %494 = insertelement <16 x i8> %489, i8 %493, i32 2
  %495 = extractelement <16 x i32> %479, i32 3
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %10, i64 %496
  %498 = load i8, i8* %497, align 1, !tbaa !415
  %499 = insertelement <16 x i8> %494, i8 %498, i32 3
  %500 = extractelement <16 x i32> %479, i32 4
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i8, i8* %10, i64 %501
  %503 = load i8, i8* %502, align 1, !tbaa !415
  %504 = insertelement <16 x i8> %499, i8 %503, i32 4
  %505 = extractelement <16 x i32> %479, i32 5
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i8, i8* %10, i64 %506
  %508 = load i8, i8* %507, align 1, !tbaa !415
  %509 = insertelement <16 x i8> %504, i8 %508, i32 5
  %510 = extractelement <16 x i32> %479, i32 6
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i8, i8* %10, i64 %511
  %513 = load i8, i8* %512, align 1, !tbaa !415
  %514 = insertelement <16 x i8> %509, i8 %513, i32 6
  %515 = extractelement <16 x i32> %479, i32 7
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds i8, i8* %10, i64 %516
  %518 = load i8, i8* %517, align 1, !tbaa !415
  %519 = insertelement <16 x i8> %514, i8 %518, i32 7
  %520 = extractelement <16 x i32> %479, i32 8
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i8, i8* %10, i64 %521
  %523 = load i8, i8* %522, align 1, !tbaa !415
  %524 = insertelement <16 x i8> %519, i8 %523, i32 8
  %525 = extractelement <16 x i32> %479, i32 9
  %526 = sext i32 %525 to i64
  %527 = getelementptr inbounds i8, i8* %10, i64 %526
  %528 = load i8, i8* %527, align 1, !tbaa !415
  %529 = insertelement <16 x i8> %524, i8 %528, i32 9
  %530 = extractelement <16 x i32> %479, i32 10
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds i8, i8* %10, i64 %531
  %533 = load i8, i8* %532, align 1, !tbaa !415
  %534 = insertelement <16 x i8> %529, i8 %533, i32 10
  %535 = extractelement <16 x i32> %479, i32 11
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i8, i8* %10, i64 %536
  %538 = load i8, i8* %537, align 1, !tbaa !415
  %539 = insertelement <16 x i8> %534, i8 %538, i32 11
  %540 = extractelement <16 x i32> %479, i32 12
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds i8, i8* %10, i64 %541
  %543 = load i8, i8* %542, align 1, !tbaa !415
  %544 = insertelement <16 x i8> %539, i8 %543, i32 12
  %545 = extractelement <16 x i32> %479, i32 13
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds i8, i8* %10, i64 %546
  %548 = load i8, i8* %547, align 1, !tbaa !415
  %549 = insertelement <16 x i8> %544, i8 %548, i32 13
  %550 = extractelement <16 x i32> %479, i32 14
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds i8, i8* %10, i64 %551
  %553 = load i8, i8* %552, align 1, !tbaa !415
  %554 = insertelement <16 x i8> %549, i8 %553, i32 14
  %555 = extractelement <16 x i32> %479, i32 15
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds i8, i8* %10, i64 %556
  %558 = load i8, i8* %557, align 1, !tbaa !415
  %559 = insertelement <16 x i8> %554, i8 %558, i32 15
  %560 = add nsw i64 %indvars.iv1935, %468
  %561 = shl nsw i64 %560, 4
  %562 = getelementptr inbounds i8, i8* %resampled_input, i64 %561
  %563 = bitcast i8* %562 to <16 x i8>*
  store <16 x i8> %559, <16 x i8>* %563, align 16, !tbaa !417
  %indvars.iv.next1936 = add nuw nsw i64 %indvars.iv1935, 1
  %.not911.us = icmp eq i64 %indvars.iv1935, %199
  br i1 %.not911.us, label %"end for resampled_input.s0.x.rebased13.loopexit.us", label %"for resampled_input.s0.x.rebased12.us"

"end for resampled_input.s0.x.rebased13.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased12.us"
  %indvars.iv.next1938 = add nuw nsw i64 %indvars.iv1937, 1
  %.not907.us = icmp eq i64 %indvars.iv1937, %205
  br i1 %.not907.us, label %"consume resampled_input", label %"for resampled_input.s0.y.rebased9.us"

"consume resampled_input":                        ; preds = %"end for resampled_input.s0.x.rebased13.loopexit.us", %"end for resampled_input.s0.x.rebased.loopexit.us", %next_bb8, %then_bb7
  %564 = trunc i64 %402 to i32
  %565 = mul i32 %27, %564
  %t2191 = add i32 %565, %output.s0.c.c.base
  %t2212 = sub i32 %t2191, %reass.add1498
  br i1 %154, label %"for output.s0.y.yo.preheader", label %"end for output.s0.y.yo", !prof !399

"for output.s0.y.yo.preheader":                   ; preds = %"consume resampled_input"
  %566 = load <8 x i32>, <8 x i32>* %126, align 32
  %567 = load <8 x i32>, <8 x i32>* %128, align 32
  %568 = shufflevector <8 x i32> %566, <8 x i32> %567, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"for output.s0.y.yo"

"for output.s0.y.yo":                             ; preds = %"for output.s0.y.yo.preheader", %"end for output.s0.x.xo"
  %output.s0.y.yo = phi i32 [ %604, %"end for output.s0.x.xo" ], [ 0, %"for output.s0.y.yo.preheader" ]
  %a23 = shl nuw nsw i32 %output.s0.y.yo, 1
  %569 = icmp sgt i32 %b25, %a23
  %output.s0.y.y.base.s = select i1 %569, i32 %a23, i32 %b25
  %t2237 = add nsw i32 %output.s0.y.y.base.s, %24
  %t2238 = add nsw i32 %t2237, 1
  %570 = insertelement <2 x i32> poison, i32 %t2237, i32 0
  %571 = insertelement <2 x i32> %570, i32 %t2238, i32 1
  %572 = mul nsw <2 x i32> %571, %218
  %573 = add nsw <2 x i32> %572, %224
  %574 = mul nsw <2 x i32> %573, %226
  %shuffle2279 = shufflevector <2 x i32> %574, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %575 = add nsw <2 x i32> %572, %220
  %576 = mul nsw <2 x i32> %575, %222
  %577 = sub nsw <2 x i32> %572, %230
  %578 = extractelement <2 x i32> %577, i32 0
  %t2248 = mul nsw i32 %578, %a21
  %579 = extractelement <2 x i32> %577, i32 1
  %t2250 = mul nsw i32 %579, %a21
  br i1 %160, label %"for output.s0.x.xo.preheader", label %"end for output.s0.x.xo", !prof !399

"for output.s0.x.xo.preheader":                   ; preds = %"for output.s0.y.yo"
  %shuffle2276 = shufflevector <2 x i32> %576, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %580 = mul nsw i32 %t2237, %26
  %t2235 = add nsw i32 %580, %t2212
  %581 = mul nsw i32 %t2238, %26
  %t2236 = add nsw i32 %581, %t2212
  %582 = add nsw <2 x i32> %574, %233
  %583 = add nsw <4 x i32> %shuffle2276, %shuffle2277
  %t2217 = add nsw i32 %t2248, %231
  %t2215 = add nsw i32 %t2248, %232
  %t2218 = add nsw i32 %t2250, %231
  %t2216 = add nsw i32 %t2250, %232
  %584 = extractelement <2 x i32> %576, i32 0
  %t2220 = sub nsw i32 %584, %t2182
  %585 = sub nsw <4 x i32> %shuffle2279, %235
  %586 = add nsw <4 x i32> %shuffle2279, %235
  %587 = shufflevector <4 x i32> %585, <4 x i32> %586, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %588 = extractelement <2 x i32> %576, i32 1
  %t2221 = sub nsw i32 %588, %t2182
  %t2213 = sub nsw i32 %t2248, %t2182
  %t2214 = sub nsw i32 %t2250, %t2182
  %589 = sext i32 %t2213 to i64
  %590 = sext i32 %t2214 to i64
  %591 = sext i32 %t2215 to i64
  %592 = sext i32 %t2216 to i64
  %593 = sext i32 %t2217 to i64
  %594 = sext i32 %t2218 to i64
  %595 = sext i32 %t2220 to i64
  %596 = sext i32 %t2221 to i64
  %597 = sext <4 x i32> %583 to <4 x i64>
  %shuffle2278 = shufflevector <4 x i64> %597, <4 x i64> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %598 = sext <4 x i32> %587 to <4 x i64>
  %shuffle2280 = shufflevector <4 x i64> %598, <4 x i64> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %599 = sext <2 x i32> %582 to <2 x i64>
  %shuffle2281 = shufflevector <2 x i64> %599, <2 x i64> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %600 = sext i32 %t2235 to i64
  %601 = sext i32 %t2236 to i64
  br label %"for output.s0.x.xo"

"end for output.s0.y.yo":                         ; preds = %"end for output.s0.x.xo", %"consume resampled_input"
  %indvars.iv.next1954 = add nuw nsw i64 %indvars.iv1953, 1
  %602 = icmp eq i64 %indvars.iv.next1954, %zext1956
  br i1 %602, label %"end for output.s0.b.rebased", label %"for output.s0.b.rebased"

"for output.s0.x.xo":                             ; preds = %"for output.s0.x.xo.preheader", %"consume convolved"
  %output.s0.x.xo = phi i32 [ %1188, %"consume convolved" ], [ 0, %"for output.s0.x.xo.preheader" ]
  %a24 = shl nuw nsw i32 %output.s0.x.xo, 1
  %603 = icmp sgt i32 %b26, %a24
  %output.s0.x.x.base.s = select i1 %603, i32 %a24, i32 %b26
  br i1 %t2174, label %then_bb16, label %next_bb17

"end for output.s0.x.xo.loopexit":                ; preds = %"consume convolved"
  store <8 x i32> %.lcssa15951611, <8 x i32>* %161, align 32, !tbaa !421
  store <8 x i32> %.lcssa1577.us.lcssa1614, <8 x i32>* %163, align 32, !tbaa !431
  store <8 x i32> %.lcssa15991617, <8 x i32>* %165, align 32, !tbaa !433
  store <8 x i32> %.lcssa1581.us.lcssa1620, <8 x i32>* %167, align 32, !tbaa !436
  store <8 x i32> %.lcssa16031623, <8 x i32>* %169, align 32, !tbaa !438
  store <8 x i32> %.lcssa1585.us.lcssa1626, <8 x i32>* %171, align 32, !tbaa !442
  store <8 x i32> %.lcssa16071629, <8 x i32>* %173, align 32, !tbaa !444
  store <8 x i32> %.lcssa1589.us.lcssa1632, <8 x i32>* %175, align 32, !tbaa !447
  br label %"end for output.s0.x.xo"

"end for output.s0.x.xo":                         ; preds = %"end for output.s0.x.xo.loopexit", %"for output.s0.y.yo"
  %604 = add nuw nsw i32 %output.s0.y.yo, 1
  %.not902 = icmp eq i32 %604, %t2153
  br i1 %.not902, label %"end for output.s0.y.yo", label %"for output.s0.y.yo"

then_bb16:                                        ; preds = %"for output.s0.x.xo"
  %605 = load <16 x i16>, <16 x i16>* %376, align 32, !tbaa !449
  %606 = sext <16 x i16> %605 to <16 x i32>
  %607 = sext i32 %output.s0.x.x.base.s to i64
  %608 = add nsw i64 %607, %177
  %609 = add nsw i64 %608, 1
  %610 = insertelement <2 x i64> poison, i64 %608, i32 0
  %611 = insertelement <2 x i64> %610, i64 %609, i32 1
  %612 = mul nsw <2 x i64> %611, %237
  %shuffle2275 = shufflevector <2 x i64> %612, <2 x i64> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %613 = extractelement <2 x i64> %612, i32 0
  %614 = add nsw i64 %613, %589
  %615 = shl nsw i64 %614, 4
  %616 = getelementptr inbounds i8, i8* %resampled_input, i64 %615
  %617 = bitcast i8* %616 to <16 x i8>*
  %618 = load <16 x i8>, <16 x i8>* %617, align 16, !tbaa !417
  %619 = zext <16 x i8> %618 to <16 x i32>
  %620 = mul nsw <16 x i32> %619, %606
  %621 = add nsw <16 x i32> %620, %568
  %622 = extractelement <2 x i64> %612, i32 1
  %623 = add nsw i64 %622, %589
  %624 = shl nsw i64 %623, 4
  %625 = getelementptr inbounds i8, i8* %resampled_input, i64 %624
  %626 = bitcast i8* %625 to <16 x i8>*
  %627 = load <16 x i8>, <16 x i8>* %626, align 16, !tbaa !417
  %628 = zext <16 x i8> %627 to <16 x i32>
  %629 = mul nsw <16 x i32> %628, %606
  %630 = add nsw <16 x i32> %629, %568
  %631 = add nsw i64 %613, %590
  %632 = shl nsw i64 %631, 4
  %633 = getelementptr inbounds i8, i8* %resampled_input, i64 %632
  %634 = bitcast i8* %633 to <16 x i8>*
  %635 = load <16 x i8>, <16 x i8>* %634, align 16, !tbaa !417
  %636 = zext <16 x i8> %635 to <16 x i32>
  %637 = mul nsw <16 x i32> %636, %606
  %638 = add nsw <16 x i32> %637, %568
  %639 = add nsw i64 %622, %590
  %640 = shl nsw i64 %639, 4
  %641 = getelementptr inbounds i8, i8* %resampled_input, i64 %640
  %642 = bitcast i8* %641 to <16 x i8>*
  %643 = load <16 x i8>, <16 x i8>* %642, align 16, !tbaa !417
  %644 = zext <16 x i8> %643 to <16 x i32>
  %645 = mul nsw <16 x i32> %644, %606
  %646 = add nsw <16 x i32> %645, %568
  %647 = load <16 x i16>, <16 x i16>* %378, align 32, !tbaa !457
  %648 = sext <16 x i16> %647 to <16 x i32>
  %649 = add nsw i64 %613, %591
  %650 = shl nsw i64 %649, 4
  %651 = getelementptr inbounds i8, i8* %resampled_input, i64 %650
  %652 = bitcast i8* %651 to <16 x i8>*
  %653 = load <16 x i8>, <16 x i8>* %652, align 16, !tbaa !417
  %654 = zext <16 x i8> %653 to <16 x i32>
  %655 = mul nsw <16 x i32> %654, %648
  %656 = add nsw <16 x i32> %655, %621
  %657 = add nsw i64 %622, %591
  %658 = shl nsw i64 %657, 4
  %659 = getelementptr inbounds i8, i8* %resampled_input, i64 %658
  %660 = bitcast i8* %659 to <16 x i8>*
  %661 = load <16 x i8>, <16 x i8>* %660, align 16, !tbaa !417
  %662 = zext <16 x i8> %661 to <16 x i32>
  %663 = mul nsw <16 x i32> %662, %648
  %664 = add nsw <16 x i32> %663, %630
  %665 = add nsw i64 %613, %592
  %666 = shl nsw i64 %665, 4
  %667 = getelementptr inbounds i8, i8* %resampled_input, i64 %666
  %668 = bitcast i8* %667 to <16 x i8>*
  %669 = load <16 x i8>, <16 x i8>* %668, align 16, !tbaa !417
  %670 = zext <16 x i8> %669 to <16 x i32>
  %671 = mul nsw <16 x i32> %670, %648
  %672 = add nsw <16 x i32> %671, %638
  %673 = add nsw i64 %622, %592
  %674 = shl nsw i64 %673, 4
  %675 = getelementptr inbounds i8, i8* %resampled_input, i64 %674
  %676 = bitcast i8* %675 to <16 x i8>*
  %677 = load <16 x i8>, <16 x i8>* %676, align 16, !tbaa !417
  %678 = zext <16 x i8> %677 to <16 x i32>
  %679 = mul nsw <16 x i32> %678, %648
  %680 = add nsw <16 x i32> %679, %646
  %681 = load <16 x i16>, <16 x i16>* %380, align 32, !tbaa !459
  %682 = sext <16 x i16> %681 to <16 x i32>
  %683 = add nsw i64 %613, %593
  %684 = shl nsw i64 %683, 4
  %685 = getelementptr inbounds i8, i8* %resampled_input, i64 %684
  %686 = bitcast i8* %685 to <16 x i8>*
  %687 = load <16 x i8>, <16 x i8>* %686, align 16, !tbaa !417
  %688 = zext <16 x i8> %687 to <16 x i32>
  %689 = mul nsw <16 x i32> %688, %682
  %690 = add nsw <16 x i32> %689, %656
  %691 = add nsw i64 %622, %593
  %692 = shl nsw i64 %691, 4
  %693 = getelementptr inbounds i8, i8* %resampled_input, i64 %692
  %694 = bitcast i8* %693 to <16 x i8>*
  %695 = load <16 x i8>, <16 x i8>* %694, align 16, !tbaa !417
  %696 = zext <16 x i8> %695 to <16 x i32>
  %697 = mul nsw <16 x i32> %696, %682
  %698 = add nsw <16 x i32> %697, %664
  %699 = add nsw i64 %613, %594
  %700 = shl nsw i64 %699, 4
  %701 = getelementptr inbounds i8, i8* %resampled_input, i64 %700
  %702 = bitcast i8* %701 to <16 x i8>*
  %703 = load <16 x i8>, <16 x i8>* %702, align 16, !tbaa !417
  %704 = zext <16 x i8> %703 to <16 x i32>
  %705 = mul nsw <16 x i32> %704, %682
  %706 = add nsw <16 x i32> %705, %672
  %707 = add nsw i64 %622, %594
  %708 = shl nsw i64 %707, 4
  %709 = getelementptr inbounds i8, i8* %resampled_input, i64 %708
  %710 = bitcast i8* %709 to <16 x i8>*
  %711 = load <16 x i8>, <16 x i8>* %710, align 16, !tbaa !417
  %712 = zext <16 x i8> %711 to <16 x i32>
  %713 = mul nsw <16 x i32> %712, %682
  %714 = add nsw <16 x i32> %713, %680
  %715 = load <16 x i16>, <16 x i16>* %382, align 32, !tbaa !396
  %716 = sext <16 x i16> %715 to <16 x i32>
  %717 = add nsw i64 %613, %595
  %718 = shl nsw i64 %717, 4
  %719 = getelementptr inbounds i8, i8* %resampled_input, i64 %718
  %720 = bitcast i8* %719 to <16 x i8>*
  %721 = load <16 x i8>, <16 x i8>* %720, align 16, !tbaa !417
  %722 = zext <16 x i8> %721 to <16 x i32>
  %723 = mul nsw <16 x i32> %722, %716
  %724 = add nsw <16 x i32> %723, %690
  %725 = add nsw i64 %622, %595
  %726 = shl nsw i64 %725, 4
  %727 = getelementptr inbounds i8, i8* %resampled_input, i64 %726
  %728 = bitcast i8* %727 to <16 x i8>*
  %729 = load <16 x i8>, <16 x i8>* %728, align 16, !tbaa !417
  %730 = zext <16 x i8> %729 to <16 x i32>
  %731 = mul nsw <16 x i32> %730, %716
  %732 = add nsw <16 x i32> %731, %698
  %733 = add nsw i64 %613, %596
  %734 = shl nsw i64 %733, 4
  %735 = getelementptr inbounds i8, i8* %resampled_input, i64 %734
  %736 = bitcast i8* %735 to <16 x i8>*
  %737 = load <16 x i8>, <16 x i8>* %736, align 16, !tbaa !417
  %738 = zext <16 x i8> %737 to <16 x i32>
  %739 = mul nsw <16 x i32> %738, %716
  %740 = add nsw <16 x i32> %739, %706
  %741 = add nsw i64 %622, %596
  %742 = shl nsw i64 %741, 4
  %743 = getelementptr inbounds i8, i8* %resampled_input, i64 %742
  %744 = bitcast i8* %743 to <16 x i8>*
  %745 = load <16 x i8>, <16 x i8>* %744, align 16, !tbaa !417
  %746 = zext <16 x i8> %745 to <16 x i32>
  %747 = mul nsw <16 x i32> %746, %716
  %748 = add nsw <16 x i32> %747, %714
  %749 = load <16 x i16>, <16 x i16>* %384, align 32, !tbaa !396
  %750 = sext <16 x i16> %749 to <16 x i32>
  %751 = add nsw <8 x i64> %shuffle2275, %shuffle2278
  %752 = shl nsw <8 x i64> %751, <i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4>
  %753 = extractelement <8 x i64> %752, i32 0
  %754 = getelementptr inbounds i8, i8* %resampled_input, i64 %753
  %755 = bitcast i8* %754 to <16 x i8>*
  %756 = load <16 x i8>, <16 x i8>* %755, align 16, !tbaa !417
  %757 = zext <16 x i8> %756 to <16 x i32>
  %758 = mul nsw <16 x i32> %757, %750
  %759 = add nsw <16 x i32> %758, %724
  %760 = extractelement <8 x i64> %752, i32 1
  %761 = getelementptr inbounds i8, i8* %resampled_input, i64 %760
  %762 = bitcast i8* %761 to <16 x i8>*
  %763 = load <16 x i8>, <16 x i8>* %762, align 16, !tbaa !417
  %764 = zext <16 x i8> %763 to <16 x i32>
  %765 = mul nsw <16 x i32> %764, %750
  %766 = add nsw <16 x i32> %765, %732
  %767 = extractelement <8 x i64> %752, i32 2
  %768 = getelementptr inbounds i8, i8* %resampled_input, i64 %767
  %769 = bitcast i8* %768 to <16 x i8>*
  %770 = load <16 x i8>, <16 x i8>* %769, align 16, !tbaa !417
  %771 = zext <16 x i8> %770 to <16 x i32>
  %772 = mul nsw <16 x i32> %771, %750
  %773 = add nsw <16 x i32> %772, %740
  %774 = extractelement <8 x i64> %752, i32 3
  %775 = getelementptr inbounds i8, i8* %resampled_input, i64 %774
  %776 = bitcast i8* %775 to <16 x i8>*
  %777 = load <16 x i8>, <16 x i8>* %776, align 16, !tbaa !417
  %778 = zext <16 x i8> %777 to <16 x i32>
  %779 = mul nsw <16 x i32> %778, %750
  %780 = add nsw <16 x i32> %779, %748
  %781 = load <16 x i16>, <16 x i16>* %386, align 32, !tbaa !396
  %782 = sext <16 x i16> %781 to <16 x i32>
  %783 = extractelement <8 x i64> %752, i32 4
  %784 = getelementptr inbounds i8, i8* %resampled_input, i64 %783
  %785 = bitcast i8* %784 to <16 x i8>*
  %786 = load <16 x i8>, <16 x i8>* %785, align 16, !tbaa !417
  %787 = zext <16 x i8> %786 to <16 x i32>
  %788 = mul nsw <16 x i32> %787, %782
  %789 = add nsw <16 x i32> %788, %759
  %790 = extractelement <8 x i64> %752, i32 5
  %791 = getelementptr inbounds i8, i8* %resampled_input, i64 %790
  %792 = bitcast i8* %791 to <16 x i8>*
  %793 = load <16 x i8>, <16 x i8>* %792, align 16, !tbaa !417
  %794 = zext <16 x i8> %793 to <16 x i32>
  %795 = mul nsw <16 x i32> %794, %782
  %796 = add nsw <16 x i32> %795, %766
  %797 = extractelement <8 x i64> %752, i32 6
  %798 = getelementptr inbounds i8, i8* %resampled_input, i64 %797
  %799 = bitcast i8* %798 to <16 x i8>*
  %800 = load <16 x i8>, <16 x i8>* %799, align 16, !tbaa !417
  %801 = zext <16 x i8> %800 to <16 x i32>
  %802 = mul nsw <16 x i32> %801, %782
  %803 = add nsw <16 x i32> %802, %773
  %804 = extractelement <8 x i64> %752, i32 7
  %805 = getelementptr inbounds i8, i8* %resampled_input, i64 %804
  %806 = bitcast i8* %805 to <16 x i8>*
  %807 = load <16 x i8>, <16 x i8>* %806, align 16, !tbaa !417
  %808 = zext <16 x i8> %807 to <16 x i32>
  %809 = mul nsw <16 x i32> %808, %782
  %810 = add nsw <16 x i32> %809, %780
  %811 = load <16 x i16>, <16 x i16>* %388, align 32, !tbaa !396
  %812 = sext <16 x i16> %811 to <16 x i32>
  %813 = shufflevector <2 x i64> %612, <2 x i64> undef, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %814 = add nsw <8 x i64> %813, %shuffle2280
  %815 = shl nsw <8 x i64> %814, <i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4>
  %816 = extractelement <8 x i64> %815, i32 0
  %817 = getelementptr inbounds i8, i8* %resampled_input, i64 %816
  %818 = bitcast i8* %817 to <16 x i8>*
  %819 = load <16 x i8>, <16 x i8>* %818, align 16, !tbaa !417
  %820 = zext <16 x i8> %819 to <16 x i32>
  %821 = mul nsw <16 x i32> %820, %812
  %822 = add nsw <16 x i32> %821, %789
  %823 = extractelement <8 x i64> %815, i32 1
  %824 = getelementptr inbounds i8, i8* %resampled_input, i64 %823
  %825 = bitcast i8* %824 to <16 x i8>*
  %826 = load <16 x i8>, <16 x i8>* %825, align 16, !tbaa !417
  %827 = zext <16 x i8> %826 to <16 x i32>
  %828 = mul nsw <16 x i32> %827, %812
  %829 = add nsw <16 x i32> %828, %796
  %830 = extractelement <8 x i64> %815, i32 2
  %831 = getelementptr inbounds i8, i8* %resampled_input, i64 %830
  %832 = bitcast i8* %831 to <16 x i8>*
  %833 = load <16 x i8>, <16 x i8>* %832, align 16, !tbaa !417
  %834 = zext <16 x i8> %833 to <16 x i32>
  %835 = mul nsw <16 x i32> %834, %812
  %836 = add nsw <16 x i32> %835, %803
  %837 = extractelement <8 x i64> %815, i32 3
  %838 = getelementptr inbounds i8, i8* %resampled_input, i64 %837
  %839 = bitcast i8* %838 to <16 x i8>*
  %840 = load <16 x i8>, <16 x i8>* %839, align 16, !tbaa !417
  %841 = zext <16 x i8> %840 to <16 x i32>
  %842 = mul nsw <16 x i32> %841, %812
  %843 = add nsw <16 x i32> %842, %810
  %844 = load <16 x i16>, <16 x i16>* %390, align 32, !tbaa !396
  %845 = sext <16 x i16> %844 to <16 x i32>
  %846 = extractelement <8 x i64> %815, i32 4
  %847 = getelementptr inbounds i8, i8* %resampled_input, i64 %846
  %848 = bitcast i8* %847 to <16 x i8>*
  %849 = load <16 x i8>, <16 x i8>* %848, align 16, !tbaa !417
  %850 = zext <16 x i8> %849 to <16 x i32>
  %851 = mul nsw <16 x i32> %850, %845
  %852 = add nsw <16 x i32> %851, %822
  %853 = extractelement <8 x i64> %815, i32 5
  %854 = getelementptr inbounds i8, i8* %resampled_input, i64 %853
  %855 = bitcast i8* %854 to <16 x i8>*
  %856 = load <16 x i8>, <16 x i8>* %855, align 16, !tbaa !417
  %857 = zext <16 x i8> %856 to <16 x i32>
  %858 = mul nsw <16 x i32> %857, %845
  %859 = add nsw <16 x i32> %858, %829
  %860 = extractelement <8 x i64> %815, i32 6
  %861 = getelementptr inbounds i8, i8* %resampled_input, i64 %860
  %862 = bitcast i8* %861 to <16 x i8>*
  %863 = load <16 x i8>, <16 x i8>* %862, align 16, !tbaa !417
  %864 = zext <16 x i8> %863 to <16 x i32>
  %865 = mul nsw <16 x i32> %864, %845
  %866 = add nsw <16 x i32> %865, %836
  %867 = extractelement <8 x i64> %815, i32 7
  %868 = getelementptr inbounds i8, i8* %resampled_input, i64 %867
  %869 = bitcast i8* %868 to <16 x i8>*
  %870 = load <16 x i8>, <16 x i8>* %869, align 16, !tbaa !417
  %871 = zext <16 x i8> %870 to <16 x i32>
  %872 = mul nsw <16 x i32> %871, %845
  %873 = add nsw <16 x i32> %872, %843
  %874 = load <16 x i16>, <16 x i16>* %392, align 32, !tbaa !396
  %875 = sext <16 x i16> %874 to <16 x i32>
  %876 = shufflevector <2 x i64> %612, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %877 = add nsw <4 x i64> %876, %shuffle2281
  %878 = shl nsw <4 x i64> %877, <i64 4, i64 4, i64 4, i64 4>
  %879 = extractelement <4 x i64> %878, i32 0
  %880 = getelementptr inbounds i8, i8* %resampled_input, i64 %879
  %881 = bitcast i8* %880 to <16 x i8>*
  %882 = load <16 x i8>, <16 x i8>* %881, align 16, !tbaa !417
  %883 = zext <16 x i8> %882 to <16 x i32>
  %884 = mul nsw <16 x i32> %883, %875
  %885 = add nsw <16 x i32> %884, %852
  %886 = shufflevector <16 x i32> %885, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %887 = shufflevector <16 x i32> %885, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %888 = extractelement <4 x i64> %878, i32 1
  %889 = getelementptr inbounds i8, i8* %resampled_input, i64 %888
  %890 = bitcast i8* %889 to <16 x i8>*
  %891 = load <16 x i8>, <16 x i8>* %890, align 16, !tbaa !417
  %892 = zext <16 x i8> %891 to <16 x i32>
  %893 = mul nsw <16 x i32> %892, %875
  %894 = add nsw <16 x i32> %893, %859
  %895 = shufflevector <16 x i32> %894, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %896 = shufflevector <16 x i32> %894, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %897 = extractelement <4 x i64> %878, i32 2
  %898 = getelementptr inbounds i8, i8* %resampled_input, i64 %897
  %899 = bitcast i8* %898 to <16 x i8>*
  %900 = load <16 x i8>, <16 x i8>* %899, align 16, !tbaa !417
  %901 = zext <16 x i8> %900 to <16 x i32>
  %902 = mul nsw <16 x i32> %901, %875
  %903 = add nsw <16 x i32> %902, %866
  %904 = shufflevector <16 x i32> %903, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %905 = shufflevector <16 x i32> %903, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %906 = extractelement <4 x i64> %878, i32 3
  %907 = getelementptr inbounds i8, i8* %resampled_input, i64 %906
  %908 = bitcast i8* %907 to <16 x i8>*
  %909 = load <16 x i8>, <16 x i8>* %908, align 16, !tbaa !417
  %910 = zext <16 x i8> %909 to <16 x i32>
  %911 = mul nsw <16 x i32> %910, %875
  %912 = add nsw <16 x i32> %911, %873
  %913 = shufflevector <16 x i32> %912, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %914 = shufflevector <16 x i32> %912, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"consume convolved"

next_bb17:                                        ; preds = %"for output.s0.x.xo"
  %t2253 = add nsw i32 %output.s0.x.x.base.s, %21
  %915 = add nsw i32 %t2253, 1
  %916 = insertelement <2 x i32> poison, i32 %t2253, i32 0
  %917 = insertelement <2 x i32> %916, i32 %915, i32 1
  %918 = mul nsw <2 x i32> %917, %239
  %919 = sub nsw <2 x i32> %918, %158
  %shuffle2283 = shufflevector <2 x i32> %919, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  br i1 %112, label %"for convolved.s1.r19$y.preheader", label %"consume convolved", !prof !399

"for convolved.s1.r19$y.preheader":               ; preds = %next_bb17
  br i1 %110, label %"for convolved.s1.r19$y.us", label %"consume convolved", !prof !399

"for convolved.s1.r19$y.us":                      ; preds = %"for convolved.s1.r19$y.preheader", %"end for convolved.s1.r19$x.loopexit.us"
  %indvars.iv1949 = phi i64 [ %indvars.iv.next1950, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1589.us1609 = phi <8 x i32> [ %989, %"end for convolved.s1.r19$x.loopexit.us" ], [ %567, %"for convolved.s1.r19$y.preheader" ]
  %920 = phi <8 x i32> [ %993, %"end for convolved.s1.r19$x.loopexit.us" ], [ %566, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1585.us1605 = phi <8 x i32> [ %979, %"end for convolved.s1.r19$x.loopexit.us" ], [ %567, %"for convolved.s1.r19$y.preheader" ]
  %921 = phi <8 x i32> [ %992, %"end for convolved.s1.r19$x.loopexit.us" ], [ %566, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1581.us1601 = phi <8 x i32> [ %969, %"end for convolved.s1.r19$x.loopexit.us" ], [ %567, %"for convolved.s1.r19$y.preheader" ]
  %922 = phi <8 x i32> [ %991, %"end for convolved.s1.r19$x.loopexit.us" ], [ %566, %"for convolved.s1.r19$y.preheader" ]
  %.lcssa1577.us1597 = phi <8 x i32> [ %959, %"end for convolved.s1.r19$x.loopexit.us" ], [ %567, %"for convolved.s1.r19$y.preheader" ]
  %923 = phi <8 x i32> [ %990, %"end for convolved.s1.r19$x.loopexit.us" ], [ %566, %"for convolved.s1.r19$y.preheader" ]
  %"convolved.s1.r19$y.us" = phi i32 [ %994, %"end for convolved.s1.r19$x.loopexit.us" ], [ 0, %"for convolved.s1.r19$y.preheader" ]
  %t2259.us = mul nsw i32 %"convolved.s1.r19$y.us", %a186
  %924 = insertelement <2 x i32> poison, i32 %t2259.us, i32 0
  %925 = shufflevector <2 x i32> %924, <2 x i32> undef, <2 x i32> zeroinitializer
  %926 = add nsw <2 x i32> %925, %577
  %927 = mul nsw <2 x i32> %926, %241
  %shuffle2282 = shufflevector <2 x i32> %927, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %928 = mul nsw i64 %indvars.iv1949, %196
  %929 = add nsw <4 x i32> %shuffle2282, %shuffle2283
  %930 = sext <4 x i32> %929 to <4 x i64>
  br label %"for convolved.s1.r19$x.us"

"for convolved.s1.r19$x.us":                      ; preds = %"for convolved.s1.r19$y.us", %"for convolved.s1.r19$x.us"
  %indvars.iv1947 = phi i64 [ 0, %"for convolved.s1.r19$y.us" ], [ %indvars.iv.next1948, %"for convolved.s1.r19$x.us" ]
  %931 = phi <8 x i32> [ %.lcssa1589.us1609, %"for convolved.s1.r19$y.us" ], [ %989, %"for convolved.s1.r19$x.us" ]
  %932 = phi <8 x i32> [ %920, %"for convolved.s1.r19$y.us" ], [ %988, %"for convolved.s1.r19$x.us" ]
  %933 = phi <8 x i32> [ %.lcssa1585.us1605, %"for convolved.s1.r19$y.us" ], [ %979, %"for convolved.s1.r19$x.us" ]
  %934 = phi <8 x i32> [ %921, %"for convolved.s1.r19$y.us" ], [ %978, %"for convolved.s1.r19$x.us" ]
  %935 = phi <8 x i32> [ %.lcssa1581.us1601, %"for convolved.s1.r19$y.us" ], [ %969, %"for convolved.s1.r19$x.us" ]
  %936 = phi <8 x i32> [ %922, %"for convolved.s1.r19$y.us" ], [ %968, %"for convolved.s1.r19$x.us" ]
  %937 = phi <8 x i32> [ %.lcssa1577.us1597, %"for convolved.s1.r19$y.us" ], [ %959, %"for convolved.s1.r19$x.us" ]
  %938 = phi <8 x i32> [ %923, %"for convolved.s1.r19$y.us" ], [ %958, %"for convolved.s1.r19$x.us" ]
  %939 = shufflevector <8 x i32> %938, <8 x i32> %937, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %940 = add nsw i64 %indvars.iv1947, %928
  %941 = shl nsw i64 %940, 4
  %942 = getelementptr inbounds i16, i16* %filter_zeroed, i64 %941
  %943 = bitcast i16* %942 to <16 x i16>*
  %944 = load <16 x i16>, <16 x i16>* %943, align 32, !tbaa !396
  %945 = sext <16 x i16> %944 to <16 x i32>
  %946 = mul nsw i64 %indvars.iv1947, %176
  %947 = insertelement <4 x i64> poison, i64 %946, i32 0
  %948 = shufflevector <4 x i64> %947, <4 x i64> undef, <4 x i32> zeroinitializer
  %949 = add nsw <4 x i64> %948, %930
  %950 = shl nsw <4 x i64> %949, <i64 4, i64 4, i64 4, i64 4>
  %951 = extractelement <4 x i64> %950, i32 0
  %952 = getelementptr inbounds i8, i8* %resampled_input, i64 %951
  %953 = bitcast i8* %952 to <16 x i8>*
  %954 = load <16 x i8>, <16 x i8>* %953, align 16, !tbaa !417
  %955 = zext <16 x i8> %954 to <16 x i32>
  %956 = mul nsw <16 x i32> %955, %945
  %957 = add nsw <16 x i32> %956, %939
  %958 = shufflevector <16 x i32> %957, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %959 = shufflevector <16 x i32> %957, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %960 = shufflevector <8 x i32> %936, <8 x i32> %935, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %961 = extractelement <4 x i64> %950, i32 1
  %962 = getelementptr inbounds i8, i8* %resampled_input, i64 %961
  %963 = bitcast i8* %962 to <16 x i8>*
  %964 = load <16 x i8>, <16 x i8>* %963, align 16, !tbaa !417
  %965 = zext <16 x i8> %964 to <16 x i32>
  %966 = mul nsw <16 x i32> %965, %945
  %967 = add nsw <16 x i32> %966, %960
  %968 = shufflevector <16 x i32> %967, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %969 = shufflevector <16 x i32> %967, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %970 = shufflevector <8 x i32> %934, <8 x i32> %933, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %971 = extractelement <4 x i64> %950, i32 2
  %972 = getelementptr inbounds i8, i8* %resampled_input, i64 %971
  %973 = bitcast i8* %972 to <16 x i8>*
  %974 = load <16 x i8>, <16 x i8>* %973, align 16, !tbaa !417
  %975 = zext <16 x i8> %974 to <16 x i32>
  %976 = mul nsw <16 x i32> %975, %945
  %977 = add nsw <16 x i32> %976, %970
  %978 = shufflevector <16 x i32> %977, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %979 = shufflevector <16 x i32> %977, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %980 = shufflevector <8 x i32> %932, <8 x i32> %931, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %981 = extractelement <4 x i64> %950, i32 3
  %982 = getelementptr inbounds i8, i8* %resampled_input, i64 %981
  %983 = bitcast i8* %982 to <16 x i8>*
  %984 = load <16 x i8>, <16 x i8>* %983, align 16, !tbaa !417
  %985 = zext <16 x i8> %984 to <16 x i32>
  %986 = mul nsw <16 x i32> %985, %945
  %987 = add nsw <16 x i32> %986, %980
  %988 = shufflevector <16 x i32> %987, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %989 = shufflevector <16 x i32> %987, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1948 = add nuw nsw i64 %indvars.iv1947, 1
  %.not906.us = icmp eq i64 %indvars.iv.next1948, %195
  br i1 %.not906.us, label %"end for convolved.s1.r19$x.loopexit.us", label %"for convolved.s1.r19$x.us"

"end for convolved.s1.r19$x.loopexit.us":         ; preds = %"for convolved.s1.r19$x.us"
  %990 = shufflevector <16 x i32> %957, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %991 = shufflevector <16 x i32> %967, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %992 = shufflevector <16 x i32> %977, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %993 = shufflevector <16 x i32> %987, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next1950 = add nuw nsw i64 %indvars.iv1949, 1
  %994 = add nuw nsw i32 %"convolved.s1.r19$y.us", 1
  %.not905.us = icmp eq i64 %indvars.iv.next1950, %198
  br i1 %.not905.us, label %"consume convolved.loopexit", label %"for convolved.s1.r19$y.us"

"consume convolved.loopexit":                     ; preds = %"end for convolved.s1.r19$x.loopexit.us"
  %995 = shufflevector <16 x i32> %957, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %996 = shufflevector <16 x i32> %967, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %997 = shufflevector <16 x i32> %977, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %998 = shufflevector <16 x i32> %987, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume convolved"

"consume convolved":                              ; preds = %"consume convolved.loopexit", %"for convolved.s1.r19$y.preheader", %next_bb17, %then_bb16
  %.lcssa1589.us.lcssa1632 = phi <8 x i32> [ %567, %next_bb17 ], [ %914, %then_bb16 ], [ %567, %"for convolved.s1.r19$y.preheader" ], [ %989, %"consume convolved.loopexit" ]
  %.lcssa16071629 = phi <8 x i32> [ %566, %next_bb17 ], [ %913, %then_bb16 ], [ %566, %"for convolved.s1.r19$y.preheader" ], [ %998, %"consume convolved.loopexit" ]
  %.lcssa1585.us.lcssa1626 = phi <8 x i32> [ %567, %next_bb17 ], [ %905, %then_bb16 ], [ %567, %"for convolved.s1.r19$y.preheader" ], [ %979, %"consume convolved.loopexit" ]
  %.lcssa16031623 = phi <8 x i32> [ %566, %next_bb17 ], [ %904, %then_bb16 ], [ %566, %"for convolved.s1.r19$y.preheader" ], [ %997, %"consume convolved.loopexit" ]
  %.lcssa1581.us.lcssa1620 = phi <8 x i32> [ %567, %next_bb17 ], [ %896, %then_bb16 ], [ %567, %"for convolved.s1.r19$y.preheader" ], [ %969, %"consume convolved.loopexit" ]
  %.lcssa15991617 = phi <8 x i32> [ %566, %next_bb17 ], [ %895, %then_bb16 ], [ %566, %"for convolved.s1.r19$y.preheader" ], [ %996, %"consume convolved.loopexit" ]
  %.lcssa1577.us.lcssa1614 = phi <8 x i32> [ %567, %next_bb17 ], [ %887, %then_bb16 ], [ %567, %"for convolved.s1.r19$y.preheader" ], [ %959, %"consume convolved.loopexit" ]
  %.lcssa15951611 = phi <8 x i32> [ %566, %next_bb17 ], [ %886, %then_bb16 ], [ %566, %"for convolved.s1.r19$y.preheader" ], [ %995, %"consume convolved.loopexit" ]
  %999 = shufflevector <8 x i32> %.lcssa15951611, <8 x i32> %.lcssa1577.us.lcssa1614, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1000 = sext <16 x i32> %999 to <16 x i64>
  %1001 = mul nsw <16 x i64> %1000, %181
  %1002 = ashr <16 x i64> %1001, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1003 = add nsw <16 x i64> %1002, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a28 = ashr <16 x i64> %1003, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1004 = shufflevector <16 x i64> %a28, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1005 = icmp slt <4 x i64> %1004, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1006 = shufflevector <16 x i64> %a28, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1007 = icmp slt <4 x i64> %1006, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1008 = shufflevector <16 x i64> %a28, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1009 = icmp slt <4 x i64> %1008, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1010 = shufflevector <16 x i64> %a28, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1011 = icmp slt <4 x i64> %1010, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1012 = select <4 x i1> %1005, <4 x i64> %1004, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1013 = select <4 x i1> %1007, <4 x i64> %1006, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1014 = select <4 x i1> %1009, <4 x i64> %1008, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1015 = select <4 x i1> %1011, <4 x i64> %1010, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1016 = icmp sgt <4 x i64> %1012, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1017 = icmp sgt <4 x i64> %1013, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1018 = icmp sgt <4 x i64> %1014, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1019 = icmp sgt <4 x i64> %1015, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1020 = select <4 x i1> %1016, <4 x i64> %1012, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1021 = select <4 x i1> %1017, <4 x i64> %1013, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1022 = select <4 x i1> %1018, <4 x i64> %1014, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1023 = select <4 x i1> %1019, <4 x i64> %1015, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1024 = shufflevector <4 x i64> %1020, <4 x i64> %1021, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1025 = shufflevector <4 x i64> %1022, <4 x i64> %1023, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1026 = shufflevector <8 x i64> %1024, <8 x i64> %1025, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1027 = trunc <16 x i64> %1026 to <16 x i32>
  %1028 = ashr <16 x i32> %1027, %183
  %1029 = lshr <16 x i32> %1027, %187
  %1030 = and <16 x i32> %1029, %184
  %1031 = add nsw <16 x i32> %1030, %1028
  %1032 = shufflevector <16 x i32> %1031, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1033 = shufflevector <16 x i32> %1031, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1034 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1032, <8 x i32> %1033) #11
  %1035 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1034, <16 x i16> %190)
  %1036 = shufflevector <16 x i16> %1035, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1037 = shufflevector <16 x i16> %1035, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1038 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1036, <8 x i16> %1037) #11
  %1039 = icmp ugt <16 x i8> %b28, %1038
  %a25 = select <16 x i1> %1039, <16 x i8> %1038, <16 x i8> %b28
  %1040 = icmp ugt <16 x i8> %a25, %b27
  %1041 = select <16 x i1> %1040, <16 x i8> %a25, <16 x i8> %b27
  %1042 = sext i32 %output.s0.x.x.base.s to i64
  %1043 = add nsw i64 %1042, %177
  %1044 = mul nsw i64 %1043, %193
  %1045 = add nsw i64 %1044, %600
  %1046 = getelementptr inbounds i8, i8* %19, i64 %1045
  %1047 = bitcast i8* %1046 to <16 x i8>*
  store <16 x i8> %1041, <16 x i8>* %1047, align 1, !tbaa !462
  %1048 = shufflevector <8 x i32> %.lcssa15991617, <8 x i32> %.lcssa1581.us.lcssa1620, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1049 = sext <16 x i32> %1048 to <16 x i64>
  %1050 = mul nsw <16 x i64> %1049, %181
  %1051 = ashr <16 x i64> %1050, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1052 = add nsw <16 x i64> %1051, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a34 = ashr <16 x i64> %1052, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1053 = shufflevector <16 x i64> %a34, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1054 = icmp slt <4 x i64> %1053, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1055 = shufflevector <16 x i64> %a34, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1056 = icmp slt <4 x i64> %1055, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1057 = shufflevector <16 x i64> %a34, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1058 = icmp slt <4 x i64> %1057, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1059 = shufflevector <16 x i64> %a34, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1060 = icmp slt <4 x i64> %1059, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1061 = select <4 x i1> %1054, <4 x i64> %1053, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1062 = select <4 x i1> %1056, <4 x i64> %1055, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1063 = select <4 x i1> %1058, <4 x i64> %1057, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1064 = select <4 x i1> %1060, <4 x i64> %1059, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1065 = icmp sgt <4 x i64> %1061, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1066 = icmp sgt <4 x i64> %1062, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1067 = icmp sgt <4 x i64> %1063, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1068 = icmp sgt <4 x i64> %1064, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1069 = select <4 x i1> %1065, <4 x i64> %1061, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1070 = select <4 x i1> %1066, <4 x i64> %1062, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1071 = select <4 x i1> %1067, <4 x i64> %1063, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1072 = select <4 x i1> %1068, <4 x i64> %1064, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1073 = shufflevector <4 x i64> %1069, <4 x i64> %1070, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1074 = shufflevector <4 x i64> %1071, <4 x i64> %1072, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1075 = shufflevector <8 x i64> %1073, <8 x i64> %1074, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1076 = trunc <16 x i64> %1075 to <16 x i32>
  %1077 = ashr <16 x i32> %1076, %183
  %1078 = lshr <16 x i32> %1076, %187
  %1079 = and <16 x i32> %1078, %184
  %1080 = add nsw <16 x i32> %1079, %1077
  %1081 = shufflevector <16 x i32> %1080, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1082 = shufflevector <16 x i32> %1080, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1083 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1081, <8 x i32> %1082) #11
  %1084 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1083, <16 x i16> %190)
  %1085 = shufflevector <16 x i16> %1084, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1086 = shufflevector <16 x i16> %1084, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1087 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1085, <8 x i16> %1086) #11
  %1088 = icmp ugt <16 x i8> %b28, %1087
  %a31 = select <16 x i1> %1088, <16 x i8> %1087, <16 x i8> %b28
  %1089 = icmp ugt <16 x i8> %a31, %b27
  %1090 = select <16 x i1> %1089, <16 x i8> %a31, <16 x i8> %b27
  %1091 = add nsw i64 %1043, 1
  %1092 = mul nsw i64 %1091, %193
  %1093 = add nsw i64 %1092, %600
  %1094 = getelementptr inbounds i8, i8* %19, i64 %1093
  %1095 = bitcast i8* %1094 to <16 x i8>*
  store <16 x i8> %1090, <16 x i8>* %1095, align 1, !tbaa !462
  %1096 = shufflevector <8 x i32> %.lcssa16031623, <8 x i32> %.lcssa1585.us.lcssa1626, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1097 = sext <16 x i32> %1096 to <16 x i64>
  %1098 = mul nsw <16 x i64> %1097, %181
  %1099 = ashr <16 x i64> %1098, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1100 = add nsw <16 x i64> %1099, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a40 = ashr <16 x i64> %1100, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1101 = shufflevector <16 x i64> %a40, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1102 = icmp slt <4 x i64> %1101, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1103 = shufflevector <16 x i64> %a40, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1104 = icmp slt <4 x i64> %1103, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1105 = shufflevector <16 x i64> %a40, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1106 = icmp slt <4 x i64> %1105, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1107 = shufflevector <16 x i64> %a40, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1108 = icmp slt <4 x i64> %1107, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1109 = select <4 x i1> %1102, <4 x i64> %1101, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1110 = select <4 x i1> %1104, <4 x i64> %1103, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1111 = select <4 x i1> %1106, <4 x i64> %1105, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1112 = select <4 x i1> %1108, <4 x i64> %1107, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1113 = icmp sgt <4 x i64> %1109, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1114 = icmp sgt <4 x i64> %1110, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1115 = icmp sgt <4 x i64> %1111, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1116 = icmp sgt <4 x i64> %1112, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1117 = select <4 x i1> %1113, <4 x i64> %1109, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1118 = select <4 x i1> %1114, <4 x i64> %1110, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1119 = select <4 x i1> %1115, <4 x i64> %1111, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1120 = select <4 x i1> %1116, <4 x i64> %1112, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1121 = shufflevector <4 x i64> %1117, <4 x i64> %1118, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1122 = shufflevector <4 x i64> %1119, <4 x i64> %1120, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1123 = shufflevector <8 x i64> %1121, <8 x i64> %1122, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1124 = trunc <16 x i64> %1123 to <16 x i32>
  %1125 = ashr <16 x i32> %1124, %183
  %1126 = lshr <16 x i32> %1124, %187
  %1127 = and <16 x i32> %1126, %184
  %1128 = add nsw <16 x i32> %1127, %1125
  %1129 = shufflevector <16 x i32> %1128, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1130 = shufflevector <16 x i32> %1128, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1131 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1129, <8 x i32> %1130) #11
  %1132 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1131, <16 x i16> %190)
  %1133 = shufflevector <16 x i16> %1132, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1134 = shufflevector <16 x i16> %1132, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1135 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1133, <8 x i16> %1134) #11
  %1136 = icmp ugt <16 x i8> %b28, %1135
  %a37 = select <16 x i1> %1136, <16 x i8> %1135, <16 x i8> %b28
  %1137 = icmp ugt <16 x i8> %a37, %b27
  %1138 = select <16 x i1> %1137, <16 x i8> %a37, <16 x i8> %b27
  %1139 = add nsw i64 %1044, %601
  %1140 = getelementptr inbounds i8, i8* %19, i64 %1139
  %1141 = bitcast i8* %1140 to <16 x i8>*
  store <16 x i8> %1138, <16 x i8>* %1141, align 1, !tbaa !462
  %1142 = shufflevector <8 x i32> %.lcssa16071629, <8 x i32> %.lcssa1589.us.lcssa1632, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1143 = sext <16 x i32> %1142 to <16 x i64>
  %1144 = mul nsw <16 x i64> %1143, %181
  %1145 = ashr <16 x i64> %1144, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1146 = add nsw <16 x i64> %1145, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a46 = ashr <16 x i64> %1146, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1147 = shufflevector <16 x i64> %a46, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1148 = icmp slt <4 x i64> %1147, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1149 = shufflevector <16 x i64> %a46, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1150 = icmp slt <4 x i64> %1149, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1151 = shufflevector <16 x i64> %a46, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1152 = icmp slt <4 x i64> %1151, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1153 = shufflevector <16 x i64> %a46, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1154 = icmp slt <4 x i64> %1153, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1155 = select <4 x i1> %1148, <4 x i64> %1147, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1156 = select <4 x i1> %1150, <4 x i64> %1149, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1157 = select <4 x i1> %1152, <4 x i64> %1151, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1158 = select <4 x i1> %1154, <4 x i64> %1153, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1159 = icmp sgt <4 x i64> %1155, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1160 = icmp sgt <4 x i64> %1156, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1161 = icmp sgt <4 x i64> %1157, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1162 = icmp sgt <4 x i64> %1158, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1163 = select <4 x i1> %1159, <4 x i64> %1155, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1164 = select <4 x i1> %1160, <4 x i64> %1156, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1165 = select <4 x i1> %1161, <4 x i64> %1157, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1166 = select <4 x i1> %1162, <4 x i64> %1158, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1167 = shufflevector <4 x i64> %1163, <4 x i64> %1164, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1168 = shufflevector <4 x i64> %1165, <4 x i64> %1166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1169 = shufflevector <8 x i64> %1167, <8 x i64> %1168, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1170 = trunc <16 x i64> %1169 to <16 x i32>
  %1171 = ashr <16 x i32> %1170, %183
  %1172 = lshr <16 x i32> %1170, %187
  %1173 = and <16 x i32> %1172, %184
  %1174 = add nsw <16 x i32> %1173, %1171
  %1175 = shufflevector <16 x i32> %1174, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1176 = shufflevector <16 x i32> %1174, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1177 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1175, <8 x i32> %1176) #11
  %1178 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1177, <16 x i16> %190)
  %1179 = shufflevector <16 x i16> %1178, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1180 = shufflevector <16 x i16> %1178, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1181 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1179, <8 x i16> %1180) #11
  %1182 = icmp ugt <16 x i8> %b28, %1181
  %a43 = select <16 x i1> %1182, <16 x i8> %1181, <16 x i8> %b28
  %1183 = icmp ugt <16 x i8> %a43, %b27
  %1184 = select <16 x i1> %1183, <16 x i8> %a43, <16 x i8> %b27
  %1185 = add nsw i64 %1092, %601
  %1186 = getelementptr inbounds i8, i8* %19, i64 %1185
  %1187 = bitcast i8* %1186 to <16 x i8>*
  store <16 x i8> %1184, <16 x i8>* %1187, align 1, !tbaa !462
  %1188 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not904 = icmp eq i32 %1188, %t2154
  br i1 %.not904, label %"end for output.s0.x.xo.loopexit", label %"for output.s0.x.xo"

then_bb18:                                        ; preds = %next_bb
  %t2287 = icmp slt i32 %a187, 0
  %1189 = add nsw i32 %6, -1
  %t2288 = mul nsw i32 %1189, %a187
  %t2289 = icmp slt i32 %stride_x, 0
  %t2290 = select i1 %t2287, i32 %t2288, i32 0
  %1190 = select i1 %t2289, i32 %22, i32 1
  %1191 = add i32 %21, -1
  %1192 = add i32 %1191, %1190
  %t2291 = mul nsw i32 %1192, %stride_x
  %t2292 = icmp slt i32 %a186, 0
  %1193 = add nsw i32 %8, -1
  %t2293 = mul nsw i32 %1193, %a186
  %t2294 = icmp slt i32 %stride_y, 0
  %t2295 = select i1 %t2292, i32 %t2293, i32 0
  %1194 = select i1 %t2294, i32 %25, i32 1
  %1195 = add i32 %24, -1
  %1196 = add i32 %1195, %1194
  %t2296 = mul nsw i32 %1196, %stride_y
  %1197 = icmp eq i32 %6, 3
  %1198 = icmp eq i32 %8, 3
  %t2297 = and i1 %1197, %1198
  %a187.op870 = shl i32 %a187, 1
  %t2298 = select i1 %t2287, i32 %a187.op870, i32 0
  %a186.op871 = shl i32 %a186, 1
  %t2299 = select i1 %t2292, i32 %a186.op871, i32 0
  %t2282 = icmp eq i32 %depth_multiplier, 1
  %1199 = add nuw nsw i32 %5, 15
  %t2262 = ashr i32 %1199, 4
  %1200 = icmp sgt i32 %a186, 0
  %1201 = select i1 %1200, i32 %a186, i32 0
  %t2274 = shl nuw nsw i32 %1201, 1
  %1202 = icmp sgt i32 %a187, 0
  %1203 = select i1 %1202, i32 %a187, i32 0
  %t2280 = shl nuw nsw i32 %1203, 1
  %1204 = select i1 %t2297, i32 %t2299, i32 %t2295
  %b63 = add nsw i32 %t2296, %1204
  %1205 = select i1 %t2297, i32 %t2298, i32 %t2290
  %b62 = add nsw i32 %t2291, %1205
  %b67 = add nsw i32 %t2296, %t2295
  %1206 = select i1 %t2292, i32 0, i32 %t2293
  %1207 = add nsw i32 %25, -1
  %1208 = select i1 %t2294, i32 0, i32 %1207
  %1209 = add nsw i32 %1208, %24
  %1210 = mul nsw i32 %1209, %stride_y
  %b66 = add nsw i32 %1210, %1206
  %b65 = add nsw i32 %t2291, %t2290
  %1211 = select i1 %t2287, i32 0, i32 %t2288
  %1212 = add nsw i32 %22, -1
  %1213 = select i1 %t2289, i32 0, i32 %1212
  %1214 = add nsw i32 %1213, %21
  %1215 = mul nsw i32 %1214, %stride_x
  %b64 = add nsw i32 %1215, %1211
  %1216 = mul nsw i32 %15, %14
  %1217 = mul nsw i32 %18, %16
  %1218 = mul nsw i32 %13, %12
  %1219 = add i32 %1216, %1218
  %t2283 = add i32 %1219, %1217
  %b57 = add nsw i32 %5, -16
  %1220 = icmp sgt i32 %6, 0
  %1221 = select i1 %1220, i32 %6, i32 0
  %t2448 = zext i32 %1221 to i64
  %1222 = icmp sgt i32 %8, 0
  %1223 = select i1 %1222, i32 %8, i32 0
  %t2449 = zext i32 %1223 to i64
  %1224 = shl nuw nsw i64 %t2448, 5
  %1225 = mul i64 %1224, %t2449
  %1226 = or i64 %1225, 6
  %1227 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %1228 = bitcast [64 x i32]* %offset_c545774 to <8 x i32>*
  %1229 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 8
  %1230 = bitcast i32* %1229 to <8 x i32>*
  %1231 = sext i32 %7 to i64
  %1232 = insertelement <16 x i8> undef, i8 %filter_zero, i32 0
  %1233 = shufflevector <16 x i8> %1232, <16 x i8> undef, <16 x i32> zeroinitializer
  %1234 = zext <16 x i8> %1233 to <16 x i16>
  %1235 = bitcast i8* %2 to i32*
  %1236 = zext i8 %input_zero to i32
  %1237 = insertelement <16 x i32> undef, i32 %1236, i32 0
  %1238 = shufflevector <16 x i32> %1237, <16 x i32> undef, <16 x i32> zeroinitializer
  %1239 = icmp sgt i32 %1205, %t2290
  %t2305 = select i1 %1239, i32 %b65, i32 %b62
  %1240 = icmp sgt i32 %1204, %t2295
  %t2303 = select i1 %1240, i32 %b67, i32 %b63
  %1241 = select i1 %t2297, i32 %t2280, i32 %1211
  %a62 = add nsw i32 %1215, %1241
  %1242 = icmp sgt i32 %1241, %1211
  %1243 = select i1 %1242, i32 %a62, i32 %b64
  %t2306 = sub nsw i32 %1243, %t2305
  %1244 = select i1 %t2297, i32 %t2274, i32 %1206
  %a64 = add nsw i32 %1210, %1244
  %1245 = icmp sgt i32 %1244, %1206
  %1246 = select i1 %1245, i32 %a64, i32 %b66
  %t2304 = sub nsw i32 %1246, %t2303
  %t2308 = sub nsw i32 %b64, %b65
  %t2307 = sub nsw i32 %b66, %b67
  %.neg1486 = mul i32 %26, %24
  %.neg1487 = mul i32 %23, %21
  %.neg1488 = mul i32 %27, %16
  %1247 = icmp sgt i32 %17, 0
  %a69 = add nsw i32 %t2304, 1
  %a68 = add nsw i32 %t2306, 1
  %.inv874 = icmp slt i32 %t2306, 0
  %1248 = select i1 %.inv874, i32 0, i32 %a68
  %t2450 = zext i32 %1248 to i64
  %.inv875 = icmp slt i32 %t2304, 0
  %1249 = select i1 %.inv875, i32 0, i32 %a69
  %t2451 = zext i32 %1249 to i64
  %t2452 = shl nuw nsw i64 %t2450, 4
  %1250 = mul i64 %t2452, %t2451
  %1251 = or i64 %1250, 3
  %1252 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2321 = sub i32 %b65, %t2305
  %t2322 = sub i32 %b67, %t2303
  %1253 = icmp eq i32 %depth_multiplier, 0
  %t2455 = select i1 %1253, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit886 = ashr i32 %depth_multiplier, 31
  %1254 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %1255 = shufflevector <16 x i32> %1254, <16 x i32> undef, <16 x i32> zeroinitializer
  %1256 = sub nsw <16 x i32> %1255, %t2455
  %1257 = xor i32 %depth_multiplier.lobit886, -1
  %1258 = sub nsw i32 %1257, %depth_multiplier.lobit886
  %1259 = insertelement <16 x i32> undef, i32 %1258, i32 0
  %1260 = shufflevector <16 x i32> %1259, <16 x i32> undef, <16 x i32> zeroinitializer
  %1261 = xor <16 x i32> %t2455, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %1262 = sext i32 %b65 to i64
  %1263 = sext i32 %13 to i64
  %t2330 = sub i32 %a186.op871, %t2303
  %t2326 = sub nsw i32 %a187.op870, %t2305
  %1264 = icmp sgt i32 %25, 0
  %t2348 = sub nsw i32 %a187, %t2305
  %1265 = sub i32 %a186, %t2303
  %reass.add1490 = add i32 %.neg1486, %.neg1487
  %reass.add1491 = add i32 %reass.add1490, %.neg1488
  %1266 = icmp sgt i32 %22, 0
  %1267 = bitcast [16 x i32]* %sum_filter776 to <8 x i32>*
  %1268 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter776, i64 0, i64 8
  %1269 = bitcast i32* %1268 to <8 x i32>*
  %1270 = sext i32 %a187 to i64
  %1271 = sext i32 %21 to i64
  %1272 = sext i32 %stride_x to i64
  %1273 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %1274 = shufflevector <16 x i32> %1273, <16 x i32> undef, <16 x i32> zeroinitializer
  %1275 = sext <16 x i32> %1274 to <16 x i64>
  %1276 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %1277 = shufflevector <16 x i32> %1276, <16 x i32> undef, <16 x i32> zeroinitializer
  %.not879 = icmp eq i32 %output_shift, 0
  %1278 = select i1 %.not879, <16 x i32> zeroinitializer, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1279 = add i32 %output_shift, -1
  %1280 = insertelement <16 x i32> undef, i32 %1279, i32 0
  %1281 = shufflevector <16 x i32> %1280, <16 x i32> undef, <16 x i32> zeroinitializer
  %1282 = zext i8 %output_zero to i16
  %1283 = insertelement <16 x i16> undef, i16 %1282, i32 0
  %1284 = shufflevector <16 x i16> %1283, <16 x i16> undef, <16 x i32> zeroinitializer
  %1285 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b73 = shufflevector <16 x i8> %1285, <16 x i8> undef, <16 x i32> zeroinitializer
  %1286 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b72 = shufflevector <16 x i8> %1286, <16 x i8> undef, <16 x i32> zeroinitializer
  %1287 = sext i32 %23 to i64
  %1288 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %1289 = zext i32 %6 to i64
  %1290 = sext i32 %6 to i64
  %1291 = sext i32 %9 to i64
  %1292 = zext i32 %8 to i64
  %1293 = zext i32 %t2308 to i64
  %1294 = sext i32 %t2322 to i64
  %1295 = sext i32 %a68 to i64
  %1296 = sext i32 %t2321 to i64
  %1297 = sext i32 %b67 to i64
  %1298 = sext i32 %15 to i64
  %1299 = zext i32 %t2307 to i64
  %1300 = zext i32 %22 to i64
  %1301 = sext i32 %24 to i64
  %1302 = sext i32 %stride_y to i64
  %1303 = sext i32 %t2330 to i64
  %1304 = sext i32 %t2305 to i64
  %1305 = sext i32 %1265 to i64
  %1306 = sext i32 %t2303 to i64
  %1307 = zext i32 %25 to i64
  %1308 = sext i32 %16 to i64
  %1309 = sext i32 %18 to i64
  %1310 = bitcast [64 x i32]* %offset_c545774 to i8*
  %1311 = bitcast [64 x i32]* %offset_c545774 to i8*
  %1312 = bitcast [64 x i32]* %offset_c545774 to i8*
  %zext1923 = zext i32 %17 to i64
  %1313 = add nsw i64 %1289, -1
  %1314 = add nsw i64 %1289, -1
  %1315 = add nuw nsw i64 %1293, 1
  %xtraiter2334 = and i64 %1289, 3
  %1316 = icmp ult i64 %1313, 3
  %unroll_iter2337 = and i64 %1289, 4294967292
  %lcmp.mod2336.not = icmp eq i64 %xtraiter2334, 0
  %xtraiter2339 = and i64 %1289, 3
  %1317 = icmp ult i64 %1314, 3
  %unroll_iter2345 = and i64 %1289, 4294967292
  %lcmp.mod2342.not = icmp eq i64 %xtraiter2339, 0
  %1318 = or i32 %t2307, %t2308
  %1319 = icmp slt i32 %1318, 0
  %1320 = or i32 %t2307, %t2308
  %.not2228 = icmp sgt i32 %1320, -1
  %xtraiter2347 = and i64 %1315, 3
  %1321 = icmp ult i32 %t2308, 3
  %unroll_iter2350 = and i64 %1315, 8589934588
  %lcmp.mod2349.not = icmp eq i64 %xtraiter2347, 0
  %brmerge2181.demorgan = and i1 %1222, %1220
  %xtraiter2352 = and i64 %1289, 1
  %1322 = icmp eq i32 %6, 1
  %unroll_iter2356 = and i64 %1289, 4294967294
  %lcmp.mod2355.not = icmp eq i64 %xtraiter2352, 0
  br label %"for output.s0.c.co20"

next_bb19:                                        ; preds = %next_bb
  %1323 = icmp sgt i32 %5, 0
  br i1 %1323, label %if.end.i1115, label %after_bb

"for output.s0.c.co20":                           ; preds = %then_bb18, %"end for output.s0.b.rebased48"
  %.3 = phi i8* [ null, %then_bb18 ], [ %.4, %"end for output.s0.b.rebased48" ]
  %output.s0.c.co22 = phi i32 [ 0, %then_bb18 ], [ %1488, %"end for output.s0.b.rebased48" ]
  %a55 = shl nsw i32 %output.s0.c.co22, 4
  %1324 = icmp sgt i32 %b57, %a55
  %output.s0.c.c.base23 = select i1 %1324, i32 %a55, i32 %b57
  %1325 = load i64, i64* %.fca.1.gep, align 8, !tbaa !386
  %cmp.i1068 = icmp ult i64 %1325, %1226
  %1326 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !388
  br i1 %cmp.i1068, label %if.then.i1071, label %pseudostack_alloc.exit1084, !prof !389

if.then.i1071:                                    ; preds = %"for output.s0.c.co20"
  %tobool1.not.i1070 = icmp ne i8* %1326, null
  %1327 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1073 = icmp ugt i64 %1327, 16384
  %or.cond1459 = and i1 %tobool1.not.i1070, %cmp2.i1073
  br i1 %or.cond1459, label %if.then3.i1075, label %if.end.i1079

if.then3.i1075:                                   ; preds = %if.then.i1071
  call void @halide_free(i8* null, i8* nonnull %1326) #17
  %.pre2091 = load i64, i64* %.fca.2.gep, align 8, !tbaa !390
  br label %if.end.i1079

if.end.i1079:                                     ; preds = %if.then3.i1075, %if.then.i1071
  %1328 = phi i64 [ %.pre2091, %if.then3.i1075 ], [ %1327, %if.then.i1071 ]
  %add.i1077 = add i64 %1328, %1226
  store i64 %add.i1077, i64* %.fca.2.gep, align 8, !tbaa !390
  %cmp7.i1078 = icmp ugt i64 %add.i1077, 16384
  br i1 %cmp7.i1078, label %if.then8.i1081, label %if.end11.i1083

if.then8.i1081:                                   ; preds = %if.end.i1079
  %call.i1080 = call i8* @halide_malloc(i8* null, i64 %1226) #17
  br label %if.end11.i1083

if.end11.i1083:                                   ; preds = %if.then8.i1081, %if.end.i1079
  %storemerge.i1082 = phi i8* [ %call.i1080, %if.then8.i1081 ], [ null, %if.end.i1079 ]
  store i8* %storemerge.i1082, i8** %.fca.0.gep, align 8, !tbaa !388
  store i64 %1226, i64* %.fca.1.gep, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1084

pseudostack_alloc.exit1084:                       ; preds = %"for output.s0.c.co20", %if.end11.i1083
  %1329 = phi i8* [ %storemerge.i1082, %if.end11.i1083 ], [ %1326, %"for output.s0.c.co20" ]
  %1330 = bitcast i8* %1329 to i16*
  %.not872 = icmp eq i8* %1329, null
  br i1 %.not872, label %then_bb25, label %"produce filter_zeroed27", !prof !391

then_bb25:                                        ; preds = %pseudostack_alloc.exit1084
  %1331 = alloca i8*, i64 %1226, align 32
  %1332 = bitcast i8** %1331 to i16*
  store i8** %1331, i8*** %1227, align 8
  br label %"produce filter_zeroed27"

"produce filter_zeroed27":                        ; preds = %pseudostack_alloc.exit1084, %then_bb25
  %filter_zeroed26 = phi i16* [ %1332, %then_bb25 ], [ %1330, %pseudostack_alloc.exit1084 ]
  br i1 %1222, label %"for filter_zeroed.s0.y28.preheader", label %"produce sum_filter37.thread", !prof !399

"for filter_zeroed.s0.y28.preheader":             ; preds = %"produce filter_zeroed27"
  br i1 %1220, label %"for filter_zeroed.s0.y28.us.preheader", label %"for sum_filter.s1.r19$y38.preheader.thread", !prof !399

"for sum_filter.s1.r19$y38.preheader.thread":     ; preds = %"for filter_zeroed.s0.y28.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 dereferenceable(64) %1311, i8 0, i64 64, i1 false)
  br label %"consume sum_filter44"

"for filter_zeroed.s0.y28.us.preheader":          ; preds = %"for filter_zeroed.s0.y28.preheader"
  %1333 = sext i32 %output.s0.c.c.base23 to i64
  br label %"for filter_zeroed.s0.y28.us"

"for filter_zeroed.s0.y28.us":                    ; preds = %"for filter_zeroed.s0.y28.us.preheader", %"end for filter_zeroed.s0.x32.loopexit.us"
  %indvars.iv1875 = phi i64 [ 0, %"for filter_zeroed.s0.y28.us.preheader" ], [ %indvars.iv.next1876, %"end for filter_zeroed.s0.x32.loopexit.us" ]
  %1334 = mul nsw i64 %indvars.iv1875, %1290
  %1335 = mul nsw i64 %indvars.iv1875, %1291
  %1336 = add nsw i64 %1335, %1333
  br i1 %1316, label %"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x31.us"

"for filter_zeroed.s0.x31.us":                    ; preds = %"for filter_zeroed.s0.y28.us", %"for filter_zeroed.s0.x31.us"
  %indvars.iv1873 = phi i64 [ %indvars.iv.next1874.3, %"for filter_zeroed.s0.x31.us" ], [ 0, %"for filter_zeroed.s0.y28.us" ]
  %niter2338 = phi i64 [ %niter2338.nsub.3, %"for filter_zeroed.s0.x31.us" ], [ %unroll_iter2337, %"for filter_zeroed.s0.y28.us" ]
  %1337 = mul nsw i64 %indvars.iv1873, %1231
  %1338 = add nsw i64 %1337, %1336
  %1339 = getelementptr inbounds i8, i8* %3, i64 %1338
  %1340 = bitcast i8* %1339 to <16 x i8>*
  %1341 = load <16 x i8>, <16 x i8>* %1340, align 1, !tbaa !393
  %1342 = zext <16 x i8> %1341 to <16 x i16>
  %1343 = sub nsw <16 x i16> %1342, %1234
  %1344 = add nsw i64 %indvars.iv1873, %1334
  %1345 = shl nsw i64 %1344, 4
  %1346 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1345
  %1347 = bitcast i16* %1346 to <16 x i16>*
  store <16 x i16> %1343, <16 x i16>* %1347, align 32, !tbaa !396
  %indvars.iv.next1874 = or i64 %indvars.iv1873, 1
  %1348 = mul nsw i64 %indvars.iv.next1874, %1231
  %1349 = add nsw i64 %1348, %1336
  %1350 = getelementptr inbounds i8, i8* %3, i64 %1349
  %1351 = bitcast i8* %1350 to <16 x i8>*
  %1352 = load <16 x i8>, <16 x i8>* %1351, align 1, !tbaa !393
  %1353 = zext <16 x i8> %1352 to <16 x i16>
  %1354 = sub nsw <16 x i16> %1353, %1234
  %1355 = add nsw i64 %indvars.iv.next1874, %1334
  %1356 = shl nsw i64 %1355, 4
  %1357 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1356
  %1358 = bitcast i16* %1357 to <16 x i16>*
  store <16 x i16> %1354, <16 x i16>* %1358, align 32, !tbaa !396
  %indvars.iv.next1874.1 = or i64 %indvars.iv1873, 2
  %1359 = mul nsw i64 %indvars.iv.next1874.1, %1231
  %1360 = add nsw i64 %1359, %1336
  %1361 = getelementptr inbounds i8, i8* %3, i64 %1360
  %1362 = bitcast i8* %1361 to <16 x i8>*
  %1363 = load <16 x i8>, <16 x i8>* %1362, align 1, !tbaa !393
  %1364 = zext <16 x i8> %1363 to <16 x i16>
  %1365 = sub nsw <16 x i16> %1364, %1234
  %1366 = add nsw i64 %indvars.iv.next1874.1, %1334
  %1367 = shl nsw i64 %1366, 4
  %1368 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1367
  %1369 = bitcast i16* %1368 to <16 x i16>*
  store <16 x i16> %1365, <16 x i16>* %1369, align 32, !tbaa !396
  %indvars.iv.next1874.2 = or i64 %indvars.iv1873, 3
  %1370 = mul nsw i64 %indvars.iv.next1874.2, %1231
  %1371 = add nsw i64 %1370, %1336
  %1372 = getelementptr inbounds i8, i8* %3, i64 %1371
  %1373 = bitcast i8* %1372 to <16 x i8>*
  %1374 = load <16 x i8>, <16 x i8>* %1373, align 1, !tbaa !393
  %1375 = zext <16 x i8> %1374 to <16 x i16>
  %1376 = sub nsw <16 x i16> %1375, %1234
  %1377 = add nsw i64 %indvars.iv.next1874.2, %1334
  %1378 = shl nsw i64 %1377, 4
  %1379 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1378
  %1380 = bitcast i16* %1379 to <16 x i16>*
  store <16 x i16> %1376, <16 x i16>* %1380, align 32, !tbaa !396
  %indvars.iv.next1874.3 = add nuw nsw i64 %indvars.iv1873, 4
  %niter2338.nsub.3 = add i64 %niter2338, -4
  %niter2338.ncmp.3 = icmp eq i64 %niter2338.nsub.3, 0
  br i1 %niter2338.ncmp.3, label %"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x31.us"

"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x31.us", %"for filter_zeroed.s0.y28.us"
  %indvars.iv1873.unr = phi i64 [ 0, %"for filter_zeroed.s0.y28.us" ], [ %indvars.iv.next1874.3, %"for filter_zeroed.s0.x31.us" ]
  br i1 %lcmp.mod2336.not, label %"end for filter_zeroed.s0.x32.loopexit.us", label %"for filter_zeroed.s0.x31.us.epil"

"for filter_zeroed.s0.x31.us.epil":               ; preds = %"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x31.us.epil"
  %indvars.iv1873.epil = phi i64 [ %indvars.iv.next1874.epil, %"for filter_zeroed.s0.x31.us.epil" ], [ %indvars.iv1873.unr, %"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa" ]
  %epil.iter2335 = phi i64 [ %epil.iter2335.sub, %"for filter_zeroed.s0.x31.us.epil" ], [ %xtraiter2334, %"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa" ]
  %1381 = mul nsw i64 %indvars.iv1873.epil, %1231
  %1382 = add nsw i64 %1381, %1336
  %1383 = getelementptr inbounds i8, i8* %3, i64 %1382
  %1384 = bitcast i8* %1383 to <16 x i8>*
  %1385 = load <16 x i8>, <16 x i8>* %1384, align 1, !tbaa !393
  %1386 = zext <16 x i8> %1385 to <16 x i16>
  %1387 = sub nsw <16 x i16> %1386, %1234
  %1388 = add nsw i64 %indvars.iv1873.epil, %1334
  %1389 = shl nsw i64 %1388, 4
  %1390 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1389
  %1391 = bitcast i16* %1390 to <16 x i16>*
  store <16 x i16> %1387, <16 x i16>* %1391, align 32, !tbaa !396
  %indvars.iv.next1874.epil = add nuw nsw i64 %indvars.iv1873.epil, 1
  %epil.iter2335.sub = add i64 %epil.iter2335, -1
  %epil.iter2335.cmp.not = icmp eq i64 %epil.iter2335.sub, 0
  br i1 %epil.iter2335.cmp.not, label %"end for filter_zeroed.s0.x32.loopexit.us", label %"for filter_zeroed.s0.x31.us.epil", !llvm.loop !464

"end for filter_zeroed.s0.x32.loopexit.us":       ; preds = %"for filter_zeroed.s0.x31.us.epil", %"end for filter_zeroed.s0.x32.loopexit.us.unr-lcssa"
  %indvars.iv.next1876 = add nuw nsw i64 %indvars.iv1875, 1
  %.not892.us = icmp eq i64 %indvars.iv.next1876, %1292
  br i1 %.not892.us, label %"for sum_filter.s1.r19$y38.preheader", label %"for filter_zeroed.s0.y28.us"

"produce sum_filter37.thread":                    ; preds = %"produce filter_zeroed27"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 dereferenceable(64) %1310, i8 0, i64 64, i1 false)
  br label %"consume sum_filter44"

"for sum_filter.s1.r19$y38.preheader":            ; preds = %"end for filter_zeroed.s0.x32.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 dereferenceable(64) %1312, i8 0, i64 64, i1 false)
  br i1 %1220, label %"for sum_filter.s1.r19$y38.us", label %"consume sum_filter44", !prof !399

"for sum_filter.s1.r19$y38.us":                   ; preds = %"for sum_filter.s1.r19$y38.preheader", %"end for sum_filter.s1.r19$x42.loopexit.us"
  %indvars.iv1881 = phi i64 [ %indvars.iv.next1882, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y38.preheader" ]
  %.lcssa1551.us1555 = phi <8 x i32> [ %.lcssa2314, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1392 = phi <8 x i32> [ %1440, %"end for sum_filter.s1.r19$x42.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1393 = mul nsw i64 %indvars.iv1881, %1290
  br i1 %1317, label %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x41.us"

"for sum_filter.s1.r19$x41.us":                   ; preds = %"for sum_filter.s1.r19$y38.us", %"for sum_filter.s1.r19$x41.us"
  %indvars.iv1879 = phi i64 [ %indvars.iv.next1880.3, %"for sum_filter.s1.r19$x41.us" ], [ 0, %"for sum_filter.s1.r19$y38.us" ]
  %1394 = phi <8 x i32> [ %1426, %"for sum_filter.s1.r19$x41.us" ], [ %.lcssa1551.us1555, %"for sum_filter.s1.r19$y38.us" ]
  %1395 = phi <8 x i32> [ %1425, %"for sum_filter.s1.r19$x41.us" ], [ %1392, %"for sum_filter.s1.r19$y38.us" ]
  %niter2346 = phi i64 [ %niter2346.nsub.3, %"for sum_filter.s1.r19$x41.us" ], [ %unroll_iter2345, %"for sum_filter.s1.r19$y38.us" ]
  %1396 = shufflevector <8 x i32> %1395, <8 x i32> %1394, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1397 = add nsw i64 %indvars.iv1879, %1393
  %1398 = shl nsw i64 %1397, 4
  %1399 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1398
  %1400 = bitcast i16* %1399 to <16 x i16>*
  %1401 = load <16 x i16>, <16 x i16>* %1400, align 32, !tbaa !396
  %1402 = sext <16 x i16> %1401 to <16 x i32>
  %1403 = add nsw <16 x i32> %1396, %1402
  %indvars.iv.next1880 = or i64 %indvars.iv1879, 1
  %1404 = add nsw i64 %indvars.iv.next1880, %1393
  %1405 = shl nsw i64 %1404, 4
  %1406 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1405
  %1407 = bitcast i16* %1406 to <16 x i16>*
  %1408 = load <16 x i16>, <16 x i16>* %1407, align 32, !tbaa !396
  %1409 = sext <16 x i16> %1408 to <16 x i32>
  %1410 = add nsw <16 x i32> %1403, %1409
  %indvars.iv.next1880.1 = or i64 %indvars.iv1879, 2
  %1411 = add nsw i64 %indvars.iv.next1880.1, %1393
  %1412 = shl nsw i64 %1411, 4
  %1413 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1412
  %1414 = bitcast i16* %1413 to <16 x i16>*
  %1415 = load <16 x i16>, <16 x i16>* %1414, align 32, !tbaa !396
  %1416 = sext <16 x i16> %1415 to <16 x i32>
  %1417 = add nsw <16 x i32> %1410, %1416
  %indvars.iv.next1880.2 = or i64 %indvars.iv1879, 3
  %1418 = add nsw i64 %indvars.iv.next1880.2, %1393
  %1419 = shl nsw i64 %1418, 4
  %1420 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1419
  %1421 = bitcast i16* %1420 to <16 x i16>*
  %1422 = load <16 x i16>, <16 x i16>* %1421, align 32, !tbaa !396
  %1423 = sext <16 x i16> %1422 to <16 x i32>
  %1424 = add nsw <16 x i32> %1417, %1423
  %1425 = shufflevector <16 x i32> %1424, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1426 = shufflevector <16 x i32> %1424, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1880.3 = add nuw nsw i64 %indvars.iv1879, 4
  %niter2346.nsub.3 = add i64 %niter2346, -4
  %niter2346.ncmp.3 = icmp eq i64 %niter2346.nsub.3, 0
  br i1 %niter2346.ncmp.3, label %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit", label %"for sum_filter.s1.r19$x41.us"

"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit": ; preds = %"for sum_filter.s1.r19$x41.us"
  %1427 = shufflevector <16 x i32> %1424, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa"

"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa": ; preds = %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit", %"for sum_filter.s1.r19$y38.us"
  %.lcssa2315.ph = phi <16 x i32> [ undef, %"for sum_filter.s1.r19$y38.us" ], [ %1424, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2314.ph = phi <8 x i32> [ undef, %"for sum_filter.s1.r19$y38.us" ], [ %1426, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv1879.unr = phi i64 [ 0, %"for sum_filter.s1.r19$y38.us" ], [ %indvars.iv.next1880.3, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit" ]
  %.unr = phi <8 x i32> [ %.lcssa1551.us1555, %"for sum_filter.s1.r19$y38.us" ], [ %1426, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2341 = phi <8 x i32> [ %1392, %"for sum_filter.s1.r19$y38.us" ], [ %1427, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2342.not, label %"end for sum_filter.s1.r19$x42.loopexit.us", label %"for sum_filter.s1.r19$x41.us.epil"

"for sum_filter.s1.r19$x41.us.epil":              ; preds = %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x41.us.epil"
  %indvars.iv1879.epil = phi i64 [ %indvars.iv.next1880.epil, %"for sum_filter.s1.r19$x41.us.epil" ], [ %indvars.iv1879.unr, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa" ]
  %1428 = phi <8 x i32> [ %1439, %"for sum_filter.s1.r19$x41.us.epil" ], [ %.unr, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa" ]
  %1429 = phi <8 x i32> [ %1438, %"for sum_filter.s1.r19$x41.us.epil" ], [ %.unr2341, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa" ]
  %epil.iter2340 = phi i64 [ %epil.iter2340.sub, %"for sum_filter.s1.r19$x41.us.epil" ], [ %xtraiter2339, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa" ]
  %1430 = shufflevector <8 x i32> %1429, <8 x i32> %1428, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1431 = add nsw i64 %indvars.iv1879.epil, %1393
  %1432 = shl nsw i64 %1431, 4
  %1433 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1432
  %1434 = bitcast i16* %1433 to <16 x i16>*
  %1435 = load <16 x i16>, <16 x i16>* %1434, align 32, !tbaa !396
  %1436 = sext <16 x i16> %1435 to <16 x i32>
  %1437 = add nsw <16 x i32> %1430, %1436
  %1438 = shufflevector <16 x i32> %1437, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1439 = shufflevector <16 x i32> %1437, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1880.epil = add nuw nsw i64 %indvars.iv1879.epil, 1
  %epil.iter2340.sub = add i64 %epil.iter2340, -1
  %epil.iter2340.cmp.not = icmp eq i64 %epil.iter2340.sub, 0
  br i1 %epil.iter2340.cmp.not, label %"end for sum_filter.s1.r19$x42.loopexit.us", label %"for sum_filter.s1.r19$x41.us.epil", !llvm.loop !465

"end for sum_filter.s1.r19$x42.loopexit.us":      ; preds = %"for sum_filter.s1.r19$x41.us.epil", %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa"
  %.lcssa2315 = phi <16 x i32> [ %.lcssa2315.ph, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa" ], [ %1437, %"for sum_filter.s1.r19$x41.us.epil" ]
  %.lcssa2314 = phi <8 x i32> [ %.lcssa2314.ph, %"end for sum_filter.s1.r19$x42.loopexit.us.unr-lcssa" ], [ %1439, %"for sum_filter.s1.r19$x41.us.epil" ]
  %1440 = shufflevector <16 x i32> %.lcssa2315, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next1882 = add nuw nsw i64 %indvars.iv1881, 1
  %.not890.us = icmp eq i64 %indvars.iv.next1882, %1292
  br i1 %.not890.us, label %"consume sum_filter44.loopexit.split.us", label %"for sum_filter.s1.r19$y38.us"

"consume sum_filter44.loopexit.split.us":         ; preds = %"end for sum_filter.s1.r19$x42.loopexit.us"
  %1441 = shufflevector <16 x i32> %.lcssa2315, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %1441, <8 x i32>* %1228, align 32, !tbaa !421
  store <8 x i32> %.lcssa2314, <8 x i32>* %1230, align 32, !tbaa !431
  br label %"consume sum_filter44"

"consume sum_filter44":                           ; preds = %"for sum_filter.s1.r19$y38.preheader", %"for sum_filter.s1.r19$y38.preheader.thread", %"consume sum_filter44.loopexit.split.us", %"produce sum_filter37.thread"
  %1442 = phi <8 x i32> [ %.lcssa2314, %"consume sum_filter44.loopexit.split.us" ], [ zeroinitializer, %"produce sum_filter37.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1443 = phi <8 x i32> [ %1441, %"consume sum_filter44.loopexit.split.us" ], [ zeroinitializer, %"produce sum_filter37.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y38.preheader" ]
  %1444 = sext i32 %output.s0.c.c.base23 to i64
  %1445 = getelementptr inbounds i32, i32* %1235, i64 %1444
  %1446 = bitcast i32* %1445 to <8 x i32>*
  %1447 = load <8 x i32>, <8 x i32>* %1446, align 4, !tbaa !401
  %1448 = getelementptr inbounds i32, i32* %1445, i64 8
  %1449 = bitcast i32* %1448 to <8 x i32>*
  %1450 = load <8 x i32>, <8 x i32>* %1449, align 4, !tbaa !401
  %1451 = shufflevector <8 x i32> %1447, <8 x i32> %1450, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1452 = shufflevector <8 x i32> %1443, <8 x i32> %1442, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1453 = mul nsw <16 x i32> %1452, %1238
  %1454 = sub nsw <16 x i32> %1451, %1453
  %1455 = shufflevector <16 x i32> %1454, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1456 = shufflevector <16 x i32> %1454, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br i1 %1247, label %"for output.s0.b.rebased47.preheader", label %"end for output.s0.b.rebased48", !prof !399

"for output.s0.b.rebased47.preheader":            ; preds = %"consume sum_filter44"
  %1457 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base23, i32 0
  %1458 = shufflevector <16 x i32> %1457, <16 x i32> undef, <16 x i32> zeroinitializer
  %1459 = add nsw <16 x i32> %1458, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1460 = shufflevector <16 x i32> %1459, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1461 = shufflevector <16 x i32> %1459, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit884 = ashr <8 x i32> %1460, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %.lobit885 = ashr <8 x i32> %1461, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %t2454 = shufflevector <8 x i32> %.lobit884, <8 x i32> %.lobit885, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1462 = sub nsw <16 x i32> %1459, %t2454
  %1463 = and <16 x i32> %t2454, %1260
  %1464 = sub i32 %output.s0.c.c.base23, %t2283
  %1465 = bitcast i16* %filter_zeroed26 to <16 x i16>*
  %1466 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 16
  %1467 = bitcast i16* %1466 to <16 x i16>*
  %1468 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 32
  %1469 = bitcast i16* %1468 to <16 x i16>*
  %1470 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 48
  %1471 = bitcast i16* %1470 to <16 x i16>*
  %1472 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 64
  %1473 = bitcast i16* %1472 to <16 x i16>*
  %1474 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 80
  %1475 = bitcast i16* %1474 to <16 x i16>*
  %1476 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 96
  %1477 = bitcast i16* %1476 to <16 x i16>*
  %1478 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 112
  %1479 = bitcast i16* %1478 to <16 x i16>*
  %1480 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 128
  %1481 = bitcast i16* %1480 to <16 x i16>*
  %1482 = sext i32 %1464 to i64
  br label %"for output.s0.b.rebased47"

"for output.s0.b.rebased47":                      ; preds = %"for output.s0.b.rebased47.preheader", %"end for output.s0.y.yo71"
  %indvars.iv1920 = phi i64 [ 0, %"for output.s0.b.rebased47.preheader" ], [ %indvars.iv.next1921, %"end for output.s0.y.yo71" ]
  %1483 = load i64, i64* %.fca.1.gep707, align 8, !tbaa !386
  %cmp.i1086 = icmp ult i64 %1483, %1251
  %1484 = load i8*, i8** %.fca.0.gep706, align 8, !tbaa !388
  br i1 %cmp.i1086, label %if.then.i1089, label %pseudostack_alloc.exit1102, !prof !389

if.then.i1089:                                    ; preds = %"for output.s0.b.rebased47"
  %tobool1.not.i1088 = icmp ne i8* %1484, null
  %1485 = load i64, i64* %.fca.2.gep708, align 8
  %cmp2.i1091 = icmp ugt i64 %1485, 16384
  %or.cond1460 = and i1 %tobool1.not.i1088, %cmp2.i1091
  br i1 %or.cond1460, label %if.then3.i1093, label %if.end.i1097

if.then3.i1093:                                   ; preds = %if.then.i1089
  call void @halide_free(i8* null, i8* nonnull %1484) #17
  %.pre2092 = load i64, i64* %.fca.2.gep708, align 8, !tbaa !390
  br label %if.end.i1097

if.end.i1097:                                     ; preds = %if.then3.i1093, %if.then.i1089
  %1486 = phi i64 [ %.pre2092, %if.then3.i1093 ], [ %1485, %if.then.i1089 ]
  %add.i1095 = add i64 %1486, %1251
  store i64 %add.i1095, i64* %.fca.2.gep708, align 8, !tbaa !390
  %cmp7.i1096 = icmp ugt i64 %add.i1095, 16384
  br i1 %cmp7.i1096, label %if.then8.i1099, label %if.end11.i1101

if.then8.i1099:                                   ; preds = %if.end.i1097
  %call.i1098 = call i8* @halide_malloc(i8* null, i64 %1251) #17
  br label %if.end11.i1101

if.end11.i1101:                                   ; preds = %if.then8.i1099, %if.end.i1097
  %storemerge.i1100 = phi i8* [ %call.i1098, %if.then8.i1099 ], [ null, %if.end.i1097 ]
  store i8* %storemerge.i1100, i8** %.fca.0.gep706, align 8, !tbaa !388
  store i64 %1251, i64* %.fca.1.gep707, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1102

pseudostack_alloc.exit1102:                       ; preds = %"for output.s0.b.rebased47", %if.end11.i1101
  %1487 = phi i8* [ %storemerge.i1100, %if.end11.i1101 ], [ %1484, %"for output.s0.b.rebased47" ]
  %.not876 = icmp eq i8* %1487, null
  br i1 %.not876, label %then_bb51, label %"produce resampled_input53", !prof !391

"end for output.s0.b.rebased48":                  ; preds = %"end for output.s0.y.yo71", %"consume sum_filter44"
  %.4 = phi i8* [ %.3, %"consume sum_filter44" ], [ %1288, %"end for output.s0.y.yo71" ]
  %1488 = add nuw nsw i32 %output.s0.c.co22, 1
  %.not873 = icmp eq i32 %1488, %t2262
  br i1 %.not873, label %after_bb.loopexit1527, label %"for output.s0.c.co20"

then_bb51:                                        ; preds = %pseudostack_alloc.exit1102
  %1489 = alloca i8*, i64 %1251, align 32
  %1490 = bitcast i8** %1489 to i8*
  store i8** %1489, i8*** %1252, align 8
  br label %"produce resampled_input53"

"produce resampled_input53":                      ; preds = %pseudostack_alloc.exit1102, %then_bb51
  %resampled_input52 = phi i8* [ %1490, %then_bb51 ], [ %1487, %pseudostack_alloc.exit1102 ]
  br i1 %t2282, label %then_bb55, label %next_bb56

then_bb55:                                        ; preds = %"produce resampled_input53"
  %1491 = add nsw i64 %indvars.iv1920, %1308
  %1492 = mul nsw i64 %1491, %1309
  %1493 = add nsw i64 %1492, %1482
  br i1 %.not2228, label %"for resampled_input.s0.y.rebased57.us", label %"consume resampled_input69", !prof !392

"for resampled_input.s0.y.rebased57.us":          ; preds = %then_bb55, %"end for resampled_input.s0.x.rebased61.loopexit.us"
  %indvars.iv1892 = phi i64 [ %indvars.iv.next1893, %"end for resampled_input.s0.x.rebased61.loopexit.us" ], [ 0, %then_bb55 ]
  %1494 = add nsw i64 %indvars.iv1892, %1294
  %1495 = mul nsw i64 %1494, %1295
  %1496 = add nsw i64 %1495, %1296
  %1497 = add nsw i64 %indvars.iv1892, %1297
  %1498 = mul nsw i64 %1497, %1298
  %1499 = add nsw i64 %1493, %1498
  br i1 %1321, label %"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased60.us"

"for resampled_input.s0.x.rebased60.us":          ; preds = %"for resampled_input.s0.y.rebased57.us", %"for resampled_input.s0.x.rebased60.us"
  %indvars.iv1890 = phi i64 [ %indvars.iv.next1891.3, %"for resampled_input.s0.x.rebased60.us" ], [ 0, %"for resampled_input.s0.y.rebased57.us" ]
  %niter2351 = phi i64 [ %niter2351.nsub.3, %"for resampled_input.s0.x.rebased60.us" ], [ %unroll_iter2350, %"for resampled_input.s0.y.rebased57.us" ]
  %1500 = add nsw i64 %indvars.iv1890, %1262
  %1501 = mul nsw i64 %1500, %1263
  %1502 = add nsw i64 %1501, %1499
  %1503 = getelementptr inbounds i8, i8* %10, i64 %1502
  %1504 = bitcast i8* %1503 to <16 x i8>*
  %1505 = load <16 x i8>, <16 x i8>* %1504, align 1, !tbaa !415
  %1506 = add nsw i64 %indvars.iv1890, %1496
  %1507 = shl nsw i64 %1506, 4
  %1508 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1507
  %1509 = bitcast i8* %1508 to <16 x i8>*
  store <16 x i8> %1505, <16 x i8>* %1509, align 16, !tbaa !417
  %indvars.iv.next1891 = or i64 %indvars.iv1890, 1
  %1510 = add nsw i64 %indvars.iv.next1891, %1262
  %1511 = mul nsw i64 %1510, %1263
  %1512 = add nsw i64 %1511, %1499
  %1513 = getelementptr inbounds i8, i8* %10, i64 %1512
  %1514 = bitcast i8* %1513 to <16 x i8>*
  %1515 = load <16 x i8>, <16 x i8>* %1514, align 1, !tbaa !415
  %1516 = add nsw i64 %indvars.iv.next1891, %1496
  %1517 = shl nsw i64 %1516, 4
  %1518 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1517
  %1519 = bitcast i8* %1518 to <16 x i8>*
  store <16 x i8> %1515, <16 x i8>* %1519, align 16, !tbaa !417
  %indvars.iv.next1891.1 = or i64 %indvars.iv1890, 2
  %1520 = add nsw i64 %indvars.iv.next1891.1, %1262
  %1521 = mul nsw i64 %1520, %1263
  %1522 = add nsw i64 %1521, %1499
  %1523 = getelementptr inbounds i8, i8* %10, i64 %1522
  %1524 = bitcast i8* %1523 to <16 x i8>*
  %1525 = load <16 x i8>, <16 x i8>* %1524, align 1, !tbaa !415
  %1526 = add nsw i64 %indvars.iv.next1891.1, %1496
  %1527 = shl nsw i64 %1526, 4
  %1528 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1527
  %1529 = bitcast i8* %1528 to <16 x i8>*
  store <16 x i8> %1525, <16 x i8>* %1529, align 16, !tbaa !417
  %indvars.iv.next1891.2 = or i64 %indvars.iv1890, 3
  %1530 = add nsw i64 %indvars.iv.next1891.2, %1262
  %1531 = mul nsw i64 %1530, %1263
  %1532 = add nsw i64 %1531, %1499
  %1533 = getelementptr inbounds i8, i8* %10, i64 %1532
  %1534 = bitcast i8* %1533 to <16 x i8>*
  %1535 = load <16 x i8>, <16 x i8>* %1534, align 1, !tbaa !415
  %1536 = add nsw i64 %indvars.iv.next1891.2, %1496
  %1537 = shl nsw i64 %1536, 4
  %1538 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1537
  %1539 = bitcast i8* %1538 to <16 x i8>*
  store <16 x i8> %1535, <16 x i8>* %1539, align 16, !tbaa !417
  %indvars.iv.next1891.3 = add nuw nsw i64 %indvars.iv1890, 4
  %niter2351.nsub.3 = add i64 %niter2351, -4
  %niter2351.ncmp.3 = icmp eq i64 %niter2351.nsub.3, 0
  br i1 %niter2351.ncmp.3, label %"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased60.us"

"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa": ; preds = %"for resampled_input.s0.x.rebased60.us", %"for resampled_input.s0.y.rebased57.us"
  %indvars.iv1890.unr = phi i64 [ 0, %"for resampled_input.s0.y.rebased57.us" ], [ %indvars.iv.next1891.3, %"for resampled_input.s0.x.rebased60.us" ]
  br i1 %lcmp.mod2349.not, label %"end for resampled_input.s0.x.rebased61.loopexit.us", label %"for resampled_input.s0.x.rebased60.us.epil"

"for resampled_input.s0.x.rebased60.us.epil":     ; preds = %"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa", %"for resampled_input.s0.x.rebased60.us.epil"
  %indvars.iv1890.epil = phi i64 [ %indvars.iv.next1891.epil, %"for resampled_input.s0.x.rebased60.us.epil" ], [ %indvars.iv1890.unr, %"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa" ]
  %epil.iter2348 = phi i64 [ %epil.iter2348.sub, %"for resampled_input.s0.x.rebased60.us.epil" ], [ %xtraiter2347, %"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa" ]
  %1540 = add nsw i64 %indvars.iv1890.epil, %1262
  %1541 = mul nsw i64 %1540, %1263
  %1542 = add nsw i64 %1541, %1499
  %1543 = getelementptr inbounds i8, i8* %10, i64 %1542
  %1544 = bitcast i8* %1543 to <16 x i8>*
  %1545 = load <16 x i8>, <16 x i8>* %1544, align 1, !tbaa !415
  %1546 = add nsw i64 %indvars.iv1890.epil, %1496
  %1547 = shl nsw i64 %1546, 4
  %1548 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1547
  %1549 = bitcast i8* %1548 to <16 x i8>*
  store <16 x i8> %1545, <16 x i8>* %1549, align 16, !tbaa !417
  %indvars.iv.next1891.epil = add nuw nsw i64 %indvars.iv1890.epil, 1
  %epil.iter2348.sub = add i64 %epil.iter2348, -1
  %epil.iter2348.cmp.not = icmp eq i64 %epil.iter2348.sub, 0
  br i1 %epil.iter2348.cmp.not, label %"end for resampled_input.s0.x.rebased61.loopexit.us", label %"for resampled_input.s0.x.rebased60.us.epil", !llvm.loop !466

"end for resampled_input.s0.x.rebased61.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased60.us.epil", %"end for resampled_input.s0.x.rebased61.loopexit.us.unr-lcssa"
  %indvars.iv.next1893 = add nuw nsw i64 %indvars.iv1892, 1
  %.not888.us = icmp eq i64 %indvars.iv1892, %1299
  br i1 %.not888.us, label %"consume resampled_input69", label %"for resampled_input.s0.y.rebased57.us"

next_bb56:                                        ; preds = %"produce resampled_input53"
  %1550 = trunc i64 %indvars.iv1920 to i32
  %1551 = add i32 %16, %1550
  %1552 = mul i32 %1551, %18
  %t2320 = sub i32 %1552, %t2283
  br i1 %1319, label %"consume resampled_input69", label %"for resampled_input.s0.y.rebased63.preheader.split.us", !prof !420

"for resampled_input.s0.y.rebased63.preheader.split.us": ; preds = %next_bb56
  %1553 = sdiv <16 x i32> %1462, %1256
  %1554 = add nsw <16 x i32> %1553, %1463
  %1555 = and <16 x i32> %1554, %1261
  br label %"for resampled_input.s0.y.rebased63.us"

"for resampled_input.s0.y.rebased63.us":          ; preds = %"end for resampled_input.s0.x.rebased67.loopexit.us", %"for resampled_input.s0.y.rebased63.preheader.split.us"
  %indvars.iv1886 = phi i64 [ %indvars.iv.next1887, %"end for resampled_input.s0.x.rebased67.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased63.preheader.split.us" ]
  %1556 = add nsw i64 %indvars.iv1886, %1294
  %1557 = mul nsw i64 %1556, %1295
  %1558 = add nsw i64 %1557, %1296
  %1559 = trunc i64 %indvars.iv1886 to i32
  %1560 = add i32 %b67, %1559
  %1561 = mul i32 %1560, %15
  %1562 = add i32 %1561, %t2320
  br label %"for resampled_input.s0.x.rebased66.us"

"for resampled_input.s0.x.rebased66.us":          ; preds = %"for resampled_input.s0.y.rebased63.us", %"for resampled_input.s0.x.rebased66.us"
  %indvars.iv1884 = phi i64 [ 0, %"for resampled_input.s0.y.rebased63.us" ], [ %indvars.iv.next1885, %"for resampled_input.s0.x.rebased66.us" ]
  %1563 = trunc i64 %indvars.iv1884 to i32
  %1564 = add nsw i32 %b65, %1563
  %1565 = mul nsw i32 %1564, %13
  %1566 = add nsw i32 %1562, %1565
  %1567 = insertelement <16 x i32> undef, i32 %1566, i32 0
  %1568 = shufflevector <16 x i32> %1567, <16 x i32> undef, <16 x i32> zeroinitializer
  %1569 = add nsw <16 x i32> %1568, %1555
  %1570 = extractelement <16 x i32> %1569, i32 0
  %1571 = sext i32 %1570 to i64
  %1572 = getelementptr inbounds i8, i8* %10, i64 %1571
  %1573 = load i8, i8* %1572, align 1, !tbaa !415
  %1574 = insertelement <16 x i8> undef, i8 %1573, i32 0
  %1575 = extractelement <16 x i32> %1569, i32 1
  %1576 = sext i32 %1575 to i64
  %1577 = getelementptr inbounds i8, i8* %10, i64 %1576
  %1578 = load i8, i8* %1577, align 1, !tbaa !415
  %1579 = insertelement <16 x i8> %1574, i8 %1578, i32 1
  %1580 = extractelement <16 x i32> %1569, i32 2
  %1581 = sext i32 %1580 to i64
  %1582 = getelementptr inbounds i8, i8* %10, i64 %1581
  %1583 = load i8, i8* %1582, align 1, !tbaa !415
  %1584 = insertelement <16 x i8> %1579, i8 %1583, i32 2
  %1585 = extractelement <16 x i32> %1569, i32 3
  %1586 = sext i32 %1585 to i64
  %1587 = getelementptr inbounds i8, i8* %10, i64 %1586
  %1588 = load i8, i8* %1587, align 1, !tbaa !415
  %1589 = insertelement <16 x i8> %1584, i8 %1588, i32 3
  %1590 = extractelement <16 x i32> %1569, i32 4
  %1591 = sext i32 %1590 to i64
  %1592 = getelementptr inbounds i8, i8* %10, i64 %1591
  %1593 = load i8, i8* %1592, align 1, !tbaa !415
  %1594 = insertelement <16 x i8> %1589, i8 %1593, i32 4
  %1595 = extractelement <16 x i32> %1569, i32 5
  %1596 = sext i32 %1595 to i64
  %1597 = getelementptr inbounds i8, i8* %10, i64 %1596
  %1598 = load i8, i8* %1597, align 1, !tbaa !415
  %1599 = insertelement <16 x i8> %1594, i8 %1598, i32 5
  %1600 = extractelement <16 x i32> %1569, i32 6
  %1601 = sext i32 %1600 to i64
  %1602 = getelementptr inbounds i8, i8* %10, i64 %1601
  %1603 = load i8, i8* %1602, align 1, !tbaa !415
  %1604 = insertelement <16 x i8> %1599, i8 %1603, i32 6
  %1605 = extractelement <16 x i32> %1569, i32 7
  %1606 = sext i32 %1605 to i64
  %1607 = getelementptr inbounds i8, i8* %10, i64 %1606
  %1608 = load i8, i8* %1607, align 1, !tbaa !415
  %1609 = insertelement <16 x i8> %1604, i8 %1608, i32 7
  %1610 = extractelement <16 x i32> %1569, i32 8
  %1611 = sext i32 %1610 to i64
  %1612 = getelementptr inbounds i8, i8* %10, i64 %1611
  %1613 = load i8, i8* %1612, align 1, !tbaa !415
  %1614 = insertelement <16 x i8> %1609, i8 %1613, i32 8
  %1615 = extractelement <16 x i32> %1569, i32 9
  %1616 = sext i32 %1615 to i64
  %1617 = getelementptr inbounds i8, i8* %10, i64 %1616
  %1618 = load i8, i8* %1617, align 1, !tbaa !415
  %1619 = insertelement <16 x i8> %1614, i8 %1618, i32 9
  %1620 = extractelement <16 x i32> %1569, i32 10
  %1621 = sext i32 %1620 to i64
  %1622 = getelementptr inbounds i8, i8* %10, i64 %1621
  %1623 = load i8, i8* %1622, align 1, !tbaa !415
  %1624 = insertelement <16 x i8> %1619, i8 %1623, i32 10
  %1625 = extractelement <16 x i32> %1569, i32 11
  %1626 = sext i32 %1625 to i64
  %1627 = getelementptr inbounds i8, i8* %10, i64 %1626
  %1628 = load i8, i8* %1627, align 1, !tbaa !415
  %1629 = insertelement <16 x i8> %1624, i8 %1628, i32 11
  %1630 = extractelement <16 x i32> %1569, i32 12
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds i8, i8* %10, i64 %1631
  %1633 = load i8, i8* %1632, align 1, !tbaa !415
  %1634 = insertelement <16 x i8> %1629, i8 %1633, i32 12
  %1635 = extractelement <16 x i32> %1569, i32 13
  %1636 = sext i32 %1635 to i64
  %1637 = getelementptr inbounds i8, i8* %10, i64 %1636
  %1638 = load i8, i8* %1637, align 1, !tbaa !415
  %1639 = insertelement <16 x i8> %1634, i8 %1638, i32 13
  %1640 = extractelement <16 x i32> %1569, i32 14
  %1641 = sext i32 %1640 to i64
  %1642 = getelementptr inbounds i8, i8* %10, i64 %1641
  %1643 = load i8, i8* %1642, align 1, !tbaa !415
  %1644 = insertelement <16 x i8> %1639, i8 %1643, i32 14
  %1645 = extractelement <16 x i32> %1569, i32 15
  %1646 = sext i32 %1645 to i64
  %1647 = getelementptr inbounds i8, i8* %10, i64 %1646
  %1648 = load i8, i8* %1647, align 1, !tbaa !415
  %1649 = insertelement <16 x i8> %1644, i8 %1648, i32 15
  %1650 = add nsw i64 %indvars.iv1884, %1558
  %1651 = shl nsw i64 %1650, 4
  %1652 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1651
  %1653 = bitcast i8* %1652 to <16 x i8>*
  store <16 x i8> %1649, <16 x i8>* %1653, align 16, !tbaa !417
  %indvars.iv.next1885 = add nuw nsw i64 %indvars.iv1884, 1
  %.not887.us = icmp eq i64 %indvars.iv1884, %1293
  br i1 %.not887.us, label %"end for resampled_input.s0.x.rebased67.loopexit.us", label %"for resampled_input.s0.x.rebased66.us"

"end for resampled_input.s0.x.rebased67.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased66.us"
  %indvars.iv.next1887 = add nuw nsw i64 %indvars.iv1886, 1
  %.not883.us = icmp eq i64 %indvars.iv1886, %1299
  br i1 %.not883.us, label %"consume resampled_input69", label %"for resampled_input.s0.y.rebased63.us"

"consume resampled_input69":                      ; preds = %"end for resampled_input.s0.x.rebased67.loopexit.us", %"end for resampled_input.s0.x.rebased61.loopexit.us", %next_bb56, %then_bb55
  br i1 %1264, label %"for output.s0.y.yo70.preheader", label %"end for output.s0.y.yo71", !prof !399

"for output.s0.y.yo70.preheader":                 ; preds = %"consume resampled_input69"
  %1654 = trunc i64 %indvars.iv1920 to i32
  %1655 = add i32 %16, %1654
  %1656 = mul i32 %1655, %27
  %t2314 = add i32 %1656, %output.s0.c.c.base23
  br label %"for output.s0.y.yo70"

"for output.s0.y.yo70":                           ; preds = %"for output.s0.y.yo70.preheader", %"end for output.s0.x.xo74"
  %indvars.iv1903 = phi i64 [ 0, %"for output.s0.y.yo70.preheader" ], [ %indvars.iv.next1904, %"end for output.s0.x.xo74" ]
  %output.s0.y.yo72 = phi i32 [ 0, %"for output.s0.y.yo70.preheader" ], [ %1681, %"end for output.s0.x.xo74" ]
  %1657 = add nsw i64 %indvars.iv1903, %1301
  %t2345 = add nsw i32 %output.s0.y.yo72, %24
  %1658 = mul nsw i64 %1657, %1302
  %t2346 = mul nsw i32 %t2345, %stride_y
  %1659 = add nsw i32 %t2330, %t2346
  %t2347 = mul nsw i32 %1659, %a68
  %1660 = add nsw i32 %1265, %t2346
  %t2349 = mul nsw i32 %1660, %a68
  %1661 = sub nsw i64 %1658, %1306
  %t2350 = sub nsw i32 %t2346, %t2303
  %t2351 = mul nsw i32 %t2350, %a68
  br i1 %1266, label %"for output.s0.x.xo73.preheader", label %"end for output.s0.x.xo74", !prof !399

"for output.s0.x.xo73.preheader":                 ; preds = %"for output.s0.y.yo70"
  %1662 = mul nsw i64 %1661, %1295
  %1663 = add nsw i64 %1658, %1305
  %1664 = mul nsw i64 %1663, %1295
  %1665 = add nsw i64 %1658, %1303
  %1666 = mul nsw i64 %1665, %1295
  %1667 = trunc i64 %1657 to i32
  %1668 = mul i32 %26, %1667
  %t2331 = add i32 %t2314, %1668
  %t2344 = sub i32 %t2331, %reass.add1491
  %t2342 = add nsw i32 %t2347, %t2326
  %t2341 = add nsw i32 %t2347, %t2348
  %t2338 = add nsw i32 %t2349, %t2326
  %t2337 = add nsw i32 %t2349, %t2348
  %t2334 = add nsw i32 %t2351, %t2326
  %t2333 = add nsw i32 %t2351, %t2348
  %1669 = sub nsw i64 %1666, %1304
  %1670 = sub nsw i64 %1664, %1304
  %1671 = sub nsw i64 %1662, %1304
  %1672 = sext i32 %t2333 to i64
  %1673 = sext i32 %t2334 to i64
  %1674 = sext i32 %t2337 to i64
  %1675 = sext i32 %t2338 to i64
  %1676 = sext i32 %t2341 to i64
  %1677 = sext i32 %t2342 to i64
  %1678 = sext i32 %t2344 to i64
  %1679 = trunc i64 %1661 to i32
  br label %"for output.s0.x.xo73"

"end for output.s0.y.yo71":                       ; preds = %"end for output.s0.x.xo74", %"consume resampled_input69"
  %indvars.iv.next1921 = add nuw nsw i64 %indvars.iv1920, 1
  %1680 = icmp eq i64 %indvars.iv.next1921, %zext1923
  br i1 %1680, label %"end for output.s0.b.rebased48", label %"for output.s0.b.rebased47"

"for output.s0.x.xo73":                           ; preds = %"for output.s0.x.xo73.preheader", %"consume convolved86"
  %indvars.iv1901 = phi i64 [ 0, %"for output.s0.x.xo73.preheader" ], [ %indvars.iv.next1902, %"consume convolved86" ]
  br i1 %t2297, label %then_bb78, label %next_bb79

"end for output.s0.x.xo74.loopexit":              ; preds = %"consume convolved86"
  store <8 x i32> %.lcssa15621566, <8 x i32>* %1267, align 32, !tbaa !403
  store <8 x i32> %.lcssa1559.us.lcssa1569, <8 x i32>* %1269, align 32, !tbaa !413
  br label %"end for output.s0.x.xo74"

"end for output.s0.x.xo74":                       ; preds = %"end for output.s0.x.xo74.loopexit", %"for output.s0.y.yo70"
  %indvars.iv.next1904 = add nuw nsw i64 %indvars.iv1903, 1
  %1681 = add nuw nsw i32 %output.s0.y.yo72, 1
  %.not878 = icmp eq i64 %indvars.iv.next1904, %1307
  br i1 %.not878, label %"end for output.s0.y.yo71", label %"for output.s0.y.yo70"

then_bb78:                                        ; preds = %"for output.s0.x.xo73"
  %1682 = load <16 x i16>, <16 x i16>* %1465, align 32, !tbaa !449
  %1683 = sext <16 x i16> %1682 to <16 x i32>
  %1684 = add nsw i64 %indvars.iv1901, %1271
  %1685 = mul nsw i64 %1684, %1272
  %1686 = add nsw i64 %1685, %1671
  %1687 = shl nsw i64 %1686, 4
  %1688 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1687
  %1689 = bitcast i8* %1688 to <16 x i8>*
  %1690 = load <16 x i8>, <16 x i8>* %1689, align 16, !tbaa !417
  %1691 = zext <16 x i8> %1690 to <16 x i32>
  %1692 = mul nsw <16 x i32> %1691, %1683
  %1693 = add nsw <16 x i32> %1692, %1454
  %1694 = load <16 x i16>, <16 x i16>* %1467, align 32, !tbaa !457
  %1695 = sext <16 x i16> %1694 to <16 x i32>
  %1696 = add nsw i64 %1685, %1672
  %1697 = shl nsw i64 %1696, 4
  %1698 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1697
  %1699 = bitcast i8* %1698 to <16 x i8>*
  %1700 = load <16 x i8>, <16 x i8>* %1699, align 16, !tbaa !417
  %1701 = zext <16 x i8> %1700 to <16 x i32>
  %1702 = mul nsw <16 x i32> %1701, %1695
  %1703 = add nsw <16 x i32> %1702, %1693
  %1704 = load <16 x i16>, <16 x i16>* %1469, align 32, !tbaa !459
  %1705 = sext <16 x i16> %1704 to <16 x i32>
  %1706 = add nsw i64 %1685, %1673
  %1707 = shl nsw i64 %1706, 4
  %1708 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1707
  %1709 = bitcast i8* %1708 to <16 x i8>*
  %1710 = load <16 x i8>, <16 x i8>* %1709, align 16, !tbaa !417
  %1711 = zext <16 x i8> %1710 to <16 x i32>
  %1712 = mul nsw <16 x i32> %1711, %1705
  %1713 = add nsw <16 x i32> %1712, %1703
  %1714 = load <16 x i16>, <16 x i16>* %1471, align 32, !tbaa !396
  %1715 = sext <16 x i16> %1714 to <16 x i32>
  %1716 = add nsw i64 %1685, %1670
  %1717 = shl nsw i64 %1716, 4
  %1718 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1717
  %1719 = bitcast i8* %1718 to <16 x i8>*
  %1720 = load <16 x i8>, <16 x i8>* %1719, align 16, !tbaa !417
  %1721 = zext <16 x i8> %1720 to <16 x i32>
  %1722 = mul nsw <16 x i32> %1721, %1715
  %1723 = add nsw <16 x i32> %1722, %1713
  %1724 = load <16 x i16>, <16 x i16>* %1473, align 32, !tbaa !396
  %1725 = sext <16 x i16> %1724 to <16 x i32>
  %1726 = add nsw i64 %1685, %1674
  %1727 = shl nsw i64 %1726, 4
  %1728 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1727
  %1729 = bitcast i8* %1728 to <16 x i8>*
  %1730 = load <16 x i8>, <16 x i8>* %1729, align 16, !tbaa !417
  %1731 = zext <16 x i8> %1730 to <16 x i32>
  %1732 = mul nsw <16 x i32> %1731, %1725
  %1733 = add nsw <16 x i32> %1732, %1723
  %1734 = load <16 x i16>, <16 x i16>* %1475, align 32, !tbaa !396
  %1735 = sext <16 x i16> %1734 to <16 x i32>
  %1736 = add nsw i64 %1685, %1675
  %1737 = shl nsw i64 %1736, 4
  %1738 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1737
  %1739 = bitcast i8* %1738 to <16 x i8>*
  %1740 = load <16 x i8>, <16 x i8>* %1739, align 16, !tbaa !417
  %1741 = zext <16 x i8> %1740 to <16 x i32>
  %1742 = mul nsw <16 x i32> %1741, %1735
  %1743 = add nsw <16 x i32> %1742, %1733
  %1744 = load <16 x i16>, <16 x i16>* %1477, align 32, !tbaa !396
  %1745 = sext <16 x i16> %1744 to <16 x i32>
  %1746 = add nsw i64 %1685, %1669
  %1747 = shl nsw i64 %1746, 4
  %1748 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1747
  %1749 = bitcast i8* %1748 to <16 x i8>*
  %1750 = load <16 x i8>, <16 x i8>* %1749, align 16, !tbaa !417
  %1751 = zext <16 x i8> %1750 to <16 x i32>
  %1752 = mul nsw <16 x i32> %1751, %1745
  %1753 = add nsw <16 x i32> %1752, %1743
  %1754 = load <16 x i16>, <16 x i16>* %1479, align 32, !tbaa !396
  %1755 = sext <16 x i16> %1754 to <16 x i32>
  %1756 = add nsw i64 %1685, %1676
  %1757 = shl nsw i64 %1756, 4
  %1758 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1757
  %1759 = bitcast i8* %1758 to <16 x i8>*
  %1760 = load <16 x i8>, <16 x i8>* %1759, align 16, !tbaa !417
  %1761 = zext <16 x i8> %1760 to <16 x i32>
  %1762 = mul nsw <16 x i32> %1761, %1755
  %1763 = add nsw <16 x i32> %1762, %1753
  %1764 = load <16 x i16>, <16 x i16>* %1481, align 32, !tbaa !396
  %1765 = sext <16 x i16> %1764 to <16 x i32>
  %1766 = add nsw i64 %1685, %1677
  %1767 = shl nsw i64 %1766, 4
  %1768 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1767
  %1769 = bitcast i8* %1768 to <16 x i8>*
  %1770 = load <16 x i8>, <16 x i8>* %1769, align 16, !tbaa !417
  %1771 = zext <16 x i8> %1770 to <16 x i32>
  %1772 = mul nsw <16 x i32> %1771, %1765
  %1773 = add nsw <16 x i32> %1772, %1763
  %1774 = shufflevector <16 x i32> %1773, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1775 = shufflevector <16 x i32> %1773, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"consume convolved86"

next_bb79:                                        ; preds = %"for output.s0.x.xo73"
  %1776 = trunc i64 %indvars.iv1901 to i32
  %1777 = add nsw i32 %21, %1776
  %1778 = mul nsw i32 %1777, %stride_x
  %t2352 = sub i32 %1778, %t2305
  br i1 %brmerge2181.demorgan, label %"for convolved.s1.r19$y80.us", label %"consume convolved86", !prof !392

"for convolved.s1.r19$y80.us":                    ; preds = %next_bb79, %"end for convolved.s1.r19$x84.loopexit.us"
  %indvars.iv1898 = phi i64 [ %indvars.iv.next1899, %"end for convolved.s1.r19$x84.loopexit.us" ], [ 0, %next_bb79 ]
  %.lcssa1559.us1564 = phi <8 x i32> [ %.lcssa2316, %"end for convolved.s1.r19$x84.loopexit.us" ], [ %1456, %next_bb79 ]
  %1779 = phi <8 x i32> [ %1838, %"end for convolved.s1.r19$x84.loopexit.us" ], [ %1455, %next_bb79 ]
  %"convolved.s1.r19$y82.us" = phi i32 [ %1839, %"end for convolved.s1.r19$x84.loopexit.us" ], [ 0, %next_bb79 ]
  %1780 = mul nsw i64 %indvars.iv1898, %1290
  %1781 = mul nsw i32 %"convolved.s1.r19$y82.us", %a186
  %1782 = add nsw i32 %1781, %1679
  %1783 = mul nsw i32 %1782, %a68
  %t2354.us = add nsw i32 %t2352, %1783
  %1784 = sext i32 %t2354.us to i64
  br i1 %1322, label %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x83.us"

"for convolved.s1.r19$x83.us":                    ; preds = %"for convolved.s1.r19$y80.us", %"for convolved.s1.r19$x83.us"
  %indvars.iv1896 = phi i64 [ %indvars.iv.next1897.1, %"for convolved.s1.r19$x83.us" ], [ 0, %"for convolved.s1.r19$y80.us" ]
  %1785 = phi <8 x i32> [ %1819, %"for convolved.s1.r19$x83.us" ], [ %.lcssa1559.us1564, %"for convolved.s1.r19$y80.us" ]
  %1786 = phi <8 x i32> [ %1818, %"for convolved.s1.r19$x83.us" ], [ %1779, %"for convolved.s1.r19$y80.us" ]
  %niter2357 = phi i64 [ %niter2357.nsub.1, %"for convolved.s1.r19$x83.us" ], [ %unroll_iter2356, %"for convolved.s1.r19$y80.us" ]
  %1787 = shufflevector <8 x i32> %1786, <8 x i32> %1785, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1788 = add nsw i64 %indvars.iv1896, %1780
  %1789 = shl nsw i64 %1788, 4
  %1790 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1789
  %1791 = bitcast i16* %1790 to <16 x i16>*
  %1792 = load <16 x i16>, <16 x i16>* %1791, align 32, !tbaa !396
  %1793 = sext <16 x i16> %1792 to <16 x i32>
  %1794 = mul nsw i64 %indvars.iv1896, %1270
  %1795 = add nsw i64 %1794, %1784
  %1796 = shl nsw i64 %1795, 4
  %1797 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1796
  %1798 = bitcast i8* %1797 to <16 x i8>*
  %1799 = load <16 x i8>, <16 x i8>* %1798, align 16, !tbaa !417
  %1800 = zext <16 x i8> %1799 to <16 x i32>
  %1801 = mul nsw <16 x i32> %1800, %1793
  %1802 = add nsw <16 x i32> %1801, %1787
  %indvars.iv.next1897 = or i64 %indvars.iv1896, 1
  %1803 = add nsw i64 %indvars.iv.next1897, %1780
  %1804 = shl nsw i64 %1803, 4
  %1805 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1804
  %1806 = bitcast i16* %1805 to <16 x i16>*
  %1807 = load <16 x i16>, <16 x i16>* %1806, align 32, !tbaa !396
  %1808 = sext <16 x i16> %1807 to <16 x i32>
  %1809 = mul nsw i64 %indvars.iv.next1897, %1270
  %1810 = add nsw i64 %1809, %1784
  %1811 = shl nsw i64 %1810, 4
  %1812 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1811
  %1813 = bitcast i8* %1812 to <16 x i8>*
  %1814 = load <16 x i8>, <16 x i8>* %1813, align 16, !tbaa !417
  %1815 = zext <16 x i8> %1814 to <16 x i32>
  %1816 = mul nsw <16 x i32> %1815, %1808
  %1817 = add nsw <16 x i32> %1816, %1802
  %1818 = shufflevector <16 x i32> %1817, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1819 = shufflevector <16 x i32> %1817, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1897.1 = add nuw nsw i64 %indvars.iv1896, 2
  %niter2357.nsub.1 = add i64 %niter2357, -2
  %niter2357.ncmp.1 = icmp eq i64 %niter2357.nsub.1, 0
  br i1 %niter2357.ncmp.1, label %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit", label %"for convolved.s1.r19$x83.us"

"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit": ; preds = %"for convolved.s1.r19$x83.us"
  %1820 = shufflevector <16 x i32> %1817, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa"

"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa": ; preds = %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit", %"for convolved.s1.r19$y80.us"
  %.lcssa2317.ph = phi <16 x i32> [ undef, %"for convolved.s1.r19$y80.us" ], [ %1817, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2316.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$y80.us" ], [ %1819, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv1896.unr = phi i64 [ 0, %"for convolved.s1.r19$y80.us" ], [ %indvars.iv.next1897.1, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2353 = phi <8 x i32> [ %.lcssa1559.us1564, %"for convolved.s1.r19$y80.us" ], [ %1819, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2354 = phi <8 x i32> [ %1779, %"for convolved.s1.r19$y80.us" ], [ %1820, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2355.not, label %"end for convolved.s1.r19$x84.loopexit.us", label %"for convolved.s1.r19$x83.us.epil"

"for convolved.s1.r19$x83.us.epil":               ; preds = %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa"
  %1821 = shufflevector <8 x i32> %.unr2354, <8 x i32> %.unr2353, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1822 = add nsw i64 %indvars.iv1896.unr, %1780
  %1823 = shl nsw i64 %1822, 4
  %1824 = getelementptr inbounds i16, i16* %filter_zeroed26, i64 %1823
  %1825 = bitcast i16* %1824 to <16 x i16>*
  %1826 = load <16 x i16>, <16 x i16>* %1825, align 32, !tbaa !396
  %1827 = sext <16 x i16> %1826 to <16 x i32>
  %1828 = mul nsw i64 %indvars.iv1896.unr, %1270
  %1829 = add nsw i64 %1828, %1784
  %1830 = shl nsw i64 %1829, 4
  %1831 = getelementptr inbounds i8, i8* %resampled_input52, i64 %1830
  %1832 = bitcast i8* %1831 to <16 x i8>*
  %1833 = load <16 x i8>, <16 x i8>* %1832, align 16, !tbaa !417
  %1834 = zext <16 x i8> %1833 to <16 x i32>
  %1835 = mul nsw <16 x i32> %1834, %1827
  %1836 = add nsw <16 x i32> %1835, %1821
  %1837 = shufflevector <16 x i32> %1836, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"end for convolved.s1.r19$x84.loopexit.us"

"end for convolved.s1.r19$x84.loopexit.us":       ; preds = %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x83.us.epil"
  %.lcssa2317 = phi <16 x i32> [ %.lcssa2317.ph, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa" ], [ %1836, %"for convolved.s1.r19$x83.us.epil" ]
  %.lcssa2316 = phi <8 x i32> [ %.lcssa2316.ph, %"end for convolved.s1.r19$x84.loopexit.us.unr-lcssa" ], [ %1837, %"for convolved.s1.r19$x83.us.epil" ]
  %1838 = shufflevector <16 x i32> %.lcssa2317, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next1899 = add nuw nsw i64 %indvars.iv1898, 1
  %1839 = add nuw nsw i32 %"convolved.s1.r19$y82.us", 1
  %.not881.us = icmp eq i64 %indvars.iv.next1899, %1292
  br i1 %.not881.us, label %"consume convolved86.loopexit", label %"for convolved.s1.r19$y80.us"

"consume convolved86.loopexit":                   ; preds = %"end for convolved.s1.r19$x84.loopexit.us"
  %1840 = shufflevector <16 x i32> %.lcssa2317, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume convolved86"

"consume convolved86":                            ; preds = %next_bb79, %"consume convolved86.loopexit", %then_bb78
  %.lcssa1559.us.lcssa1569 = phi <8 x i32> [ %1456, %next_bb79 ], [ %1775, %then_bb78 ], [ %.lcssa2316, %"consume convolved86.loopexit" ]
  %.lcssa15621566 = phi <8 x i32> [ %1455, %next_bb79 ], [ %1774, %then_bb78 ], [ %1840, %"consume convolved86.loopexit" ]
  %1841 = shufflevector <8 x i32> %.lcssa15621566, <8 x i32> %.lcssa1559.us.lcssa1569, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1842 = sext <16 x i32> %1841 to <16 x i64>
  %1843 = mul nsw <16 x i64> %1842, %1275
  %1844 = ashr <16 x i64> %1843, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1845 = add nsw <16 x i64> %1844, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a73 = ashr <16 x i64> %1845, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1846 = shufflevector <16 x i64> %a73, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1847 = icmp slt <4 x i64> %1846, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1848 = shufflevector <16 x i64> %a73, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1849 = icmp slt <4 x i64> %1848, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1850 = shufflevector <16 x i64> %a73, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1851 = icmp slt <4 x i64> %1850, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1852 = shufflevector <16 x i64> %a73, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1853 = icmp slt <4 x i64> %1852, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1854 = select <4 x i1> %1847, <4 x i64> %1846, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1855 = select <4 x i1> %1849, <4 x i64> %1848, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1856 = select <4 x i1> %1851, <4 x i64> %1850, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1857 = select <4 x i1> %1853, <4 x i64> %1852, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1858 = icmp sgt <4 x i64> %1854, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1859 = icmp sgt <4 x i64> %1855, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1860 = icmp sgt <4 x i64> %1856, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1861 = icmp sgt <4 x i64> %1857, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1862 = select <4 x i1> %1858, <4 x i64> %1854, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1863 = select <4 x i1> %1859, <4 x i64> %1855, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1864 = select <4 x i1> %1860, <4 x i64> %1856, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1865 = select <4 x i1> %1861, <4 x i64> %1857, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1866 = shufflevector <4 x i64> %1862, <4 x i64> %1863, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1867 = shufflevector <4 x i64> %1864, <4 x i64> %1865, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1868 = shufflevector <8 x i64> %1866, <8 x i64> %1867, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1869 = trunc <16 x i64> %1868 to <16 x i32>
  %1870 = ashr <16 x i32> %1869, %1277
  %1871 = lshr <16 x i32> %1869, %1281
  %1872 = and <16 x i32> %1871, %1278
  %1873 = add nsw <16 x i32> %1872, %1870
  %1874 = shufflevector <16 x i32> %1873, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1875 = shufflevector <16 x i32> %1873, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1876 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1874, <8 x i32> %1875) #11
  %1877 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1876, <16 x i16> %1284)
  %1878 = shufflevector <16 x i16> %1877, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1879 = shufflevector <16 x i16> %1877, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1880 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %1878, <8 x i16> %1879) #11
  %1881 = icmp ugt <16 x i8> %b73, %1880
  %a70 = select <16 x i1> %1881, <16 x i8> %1880, <16 x i8> %b73
  %1882 = icmp ugt <16 x i8> %a70, %b72
  %1883 = select <16 x i1> %1882, <16 x i8> %a70, <16 x i8> %b72
  %1884 = add nsw i64 %indvars.iv1901, %1271
  %1885 = mul nsw i64 %1884, %1287
  %1886 = add nsw i64 %1885, %1678
  %1887 = getelementptr inbounds i8, i8* %19, i64 %1886
  %1888 = bitcast i8* %1887 to <16 x i8>*
  store <16 x i8> %1883, <16 x i8>* %1888, align 1, !tbaa !462
  %indvars.iv.next1902 = add nuw nsw i64 %indvars.iv1901, 1
  %.not880 = icmp eq i64 %indvars.iv.next1902, %1300
  br i1 %.not880, label %"end for output.s0.x.xo74.loopexit", label %"for output.s0.x.xo73"

if.end.i1115:                                     ; preds = %next_bb19
  %1889 = icmp eq i32 %6, 3
  %1890 = icmp eq i32 %8, 3
  %1891 = and i1 %1889, %1890
  %1892 = icmp sgt i32 %6, 0
  %1893 = select i1 %1892, i32 %6, i32 0
  %t2457 = zext i32 %1893 to i64
  %1894 = icmp sgt i32 %8, 0
  %1895 = select i1 %1894, i32 %8, i32 0
  %t2458 = zext i32 %1895 to i64
  %1896 = shl nuw nsw i64 %t2457, 5
  %1897 = mul i64 %1896, %t2458
  %1898 = or i64 %1897, 6
  %1899 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  store i64 %1898, i64* %.fca.2.gep, align 8, !tbaa !390
  %cmp7.i1114 = icmp ugt i64 %1898, 16384
  br i1 %cmp7.i1114, label %pseudostack_alloc.exit1120, label %pseudostack_alloc.exit1120.thread

pseudostack_alloc.exit1120.thread:                ; preds = %if.end.i1115
  store i64 %1898, i64* %.fca.1.gep, align 8, !tbaa !386
  br label %then_bb90

pseudostack_alloc.exit1120:                       ; preds = %if.end.i1115
  %call.i1116 = tail call i8* @halide_malloc(i8* null, i64 %1898) #17
  store i8* %call.i1116, i8** %.fca.0.gep, align 8, !tbaa !388
  store i64 %1898, i64* %.fca.1.gep, align 8, !tbaa !386
  %1900 = bitcast i8* %call.i1116 to i16*
  %.not844 = icmp eq i8* %call.i1116, null
  br i1 %.not844, label %then_bb90, label %"produce filter_zeroed92", !prof !391

then_bb90:                                        ; preds = %pseudostack_alloc.exit1120.thread, %pseudostack_alloc.exit1120
  %1901 = alloca i8*, i64 %1898, align 32
  %1902 = bitcast i8** %1901 to i16*
  %1903 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %1901, i8*** %1903, align 8
  br label %"produce filter_zeroed92"

"produce filter_zeroed92":                        ; preds = %pseudostack_alloc.exit1120, %then_bb90
  %filter_zeroed91 = phi i16* [ %1902, %then_bb90 ], [ %1900, %pseudostack_alloc.exit1120 ]
  %1904 = insertelement <16 x i32> undef, i32 %5, i32 0
  %1905 = shufflevector <16 x i32> %1904, <16 x i32> undef, <8 x i32> zeroinitializer
  br i1 %1894, label %"for filter_zeroed.s0.y93.preheader", label %"produce sum_filter101", !prof !399

"for filter_zeroed.s0.y93.preheader":             ; preds = %"produce filter_zeroed92"
  %1906 = icmp slt <8 x i32> %1905, <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>
  %1907 = icmp slt <8 x i32> %1905, <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %1908 = shufflevector <8 x i1> %1906, <8 x i1> %1907, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1909 = xor <16 x i1> %1908, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %1910 = sext i32 %7 to i64
  %1911 = insertelement <16 x i8> undef, i8 %filter_zero, i32 0
  %1912 = shufflevector <16 x i8> %1911, <16 x i8> undef, <16 x i32> zeroinitializer
  %1913 = zext <16 x i8> %1912 to <16 x i16>
  br i1 %1892, label %"for filter_zeroed.s0.y93.us.preheader", label %"produce sum_filter101", !prof !399

"for filter_zeroed.s0.y93.us.preheader":          ; preds = %"for filter_zeroed.s0.y93.preheader"
  %1914 = zext i32 %6 to i64
  %1915 = zext i32 %6 to i64
  %1916 = sext i32 %9 to i64
  %1917 = zext i32 %8 to i64
  %1918 = add nsw i64 %1914, -1
  %xtraiter = and i64 %1914, 3
  %1919 = icmp ult i64 %1918, 3
  %unroll_iter = and i64 %1914, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for filter_zeroed.s0.y93.us"

"for filter_zeroed.s0.y93.us":                    ; preds = %"for filter_zeroed.s0.y93.us.preheader", %"end for filter_zeroed.s0.x97.loopexit.us"
  %indvars.iv1826 = phi i64 [ 0, %"for filter_zeroed.s0.y93.us.preheader" ], [ %indvars.iv.next1827, %"end for filter_zeroed.s0.x97.loopexit.us" ]
  %1920 = mul nsw i64 %indvars.iv1826, %1915
  %1921 = mul nsw i64 %indvars.iv1826, %1916
  br i1 %1919, label %"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x96.us"

"for filter_zeroed.s0.x96.us":                    ; preds = %"for filter_zeroed.s0.y93.us", %"for filter_zeroed.s0.x96.us"
  %indvars.iv = phi i64 [ %indvars.iv.next.3, %"for filter_zeroed.s0.x96.us" ], [ 0, %"for filter_zeroed.s0.y93.us" ]
  %niter = phi i64 [ %niter.nsub.3, %"for filter_zeroed.s0.x96.us" ], [ %unroll_iter, %"for filter_zeroed.s0.y93.us" ]
  %1922 = mul nsw i64 %indvars.iv, %1910
  %1923 = add nsw i64 %1922, %1921
  %1924 = getelementptr inbounds i8, i8* %3, i64 %1923
  %1925 = bitcast i8* %1924 to <16 x i8>*
  %1926 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %1925, i32 1, <16 x i1> %1909, <16 x i8> undef), !tbaa !393
  %1927 = zext <16 x i8> %1926 to <16 x i16>
  %1928 = sub nsw <16 x i16> %1927, %1913
  %1929 = add nuw nsw i64 %indvars.iv, %1920
  %1930 = shl nsw i64 %1929, 4
  %1931 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %1930
  %1932 = bitcast i16* %1931 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %1928, <16 x i16>* %1932, i32 32, <16 x i1> %1909), !tbaa !396
  %indvars.iv.next = or i64 %indvars.iv, 1
  %1933 = mul nsw i64 %indvars.iv.next, %1910
  %1934 = add nsw i64 %1933, %1921
  %1935 = getelementptr inbounds i8, i8* %3, i64 %1934
  %1936 = bitcast i8* %1935 to <16 x i8>*
  %1937 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %1936, i32 1, <16 x i1> %1909, <16 x i8> undef), !tbaa !393
  %1938 = zext <16 x i8> %1937 to <16 x i16>
  %1939 = sub nsw <16 x i16> %1938, %1913
  %1940 = add nuw nsw i64 %indvars.iv.next, %1920
  %1941 = shl nsw i64 %1940, 4
  %1942 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %1941
  %1943 = bitcast i16* %1942 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %1939, <16 x i16>* %1943, i32 32, <16 x i1> %1909), !tbaa !396
  %indvars.iv.next.1 = or i64 %indvars.iv, 2
  %1944 = mul nsw i64 %indvars.iv.next.1, %1910
  %1945 = add nsw i64 %1944, %1921
  %1946 = getelementptr inbounds i8, i8* %3, i64 %1945
  %1947 = bitcast i8* %1946 to <16 x i8>*
  %1948 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %1947, i32 1, <16 x i1> %1909, <16 x i8> undef), !tbaa !393
  %1949 = zext <16 x i8> %1948 to <16 x i16>
  %1950 = sub nsw <16 x i16> %1949, %1913
  %1951 = add nuw nsw i64 %indvars.iv.next.1, %1920
  %1952 = shl nsw i64 %1951, 4
  %1953 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %1952
  %1954 = bitcast i16* %1953 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %1950, <16 x i16>* %1954, i32 32, <16 x i1> %1909), !tbaa !396
  %indvars.iv.next.2 = or i64 %indvars.iv, 3
  %1955 = mul nsw i64 %indvars.iv.next.2, %1910
  %1956 = add nsw i64 %1955, %1921
  %1957 = getelementptr inbounds i8, i8* %3, i64 %1956
  %1958 = bitcast i8* %1957 to <16 x i8>*
  %1959 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %1958, i32 1, <16 x i1> %1909, <16 x i8> undef), !tbaa !393
  %1960 = zext <16 x i8> %1959 to <16 x i16>
  %1961 = sub nsw <16 x i16> %1960, %1913
  %1962 = add nuw nsw i64 %indvars.iv.next.2, %1920
  %1963 = shl nsw i64 %1962, 4
  %1964 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %1963
  %1965 = bitcast i16* %1964 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %1961, <16 x i16>* %1965, i32 32, <16 x i1> %1909), !tbaa !396
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x96.us"

"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x96.us", %"for filter_zeroed.s0.y93.us"
  %indvars.iv.unr = phi i64 [ 0, %"for filter_zeroed.s0.y93.us" ], [ %indvars.iv.next.3, %"for filter_zeroed.s0.x96.us" ]
  br i1 %lcmp.mod.not, label %"end for filter_zeroed.s0.x97.loopexit.us", label %"for filter_zeroed.s0.x96.us.epil"

"for filter_zeroed.s0.x96.us.epil":               ; preds = %"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x96.us.epil"
  %indvars.iv.epil = phi i64 [ %indvars.iv.next.epil, %"for filter_zeroed.s0.x96.us.epil" ], [ %indvars.iv.unr, %"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for filter_zeroed.s0.x96.us.epil" ], [ %xtraiter, %"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa" ]
  %1966 = mul nsw i64 %indvars.iv.epil, %1910
  %1967 = add nsw i64 %1966, %1921
  %1968 = getelementptr inbounds i8, i8* %3, i64 %1967
  %1969 = bitcast i8* %1968 to <16 x i8>*
  %1970 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %1969, i32 1, <16 x i1> %1909, <16 x i8> undef), !tbaa !393
  %1971 = zext <16 x i8> %1970 to <16 x i16>
  %1972 = sub nsw <16 x i16> %1971, %1913
  %1973 = add nuw nsw i64 %indvars.iv.epil, %1920
  %1974 = shl nsw i64 %1973, 4
  %1975 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %1974
  %1976 = bitcast i16* %1975 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %1972, <16 x i16>* %1976, i32 32, <16 x i1> %1909), !tbaa !396
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for filter_zeroed.s0.x97.loopexit.us", label %"for filter_zeroed.s0.x96.us.epil", !llvm.loop !467

"end for filter_zeroed.s0.x97.loopexit.us":       ; preds = %"for filter_zeroed.s0.x96.us.epil", %"end for filter_zeroed.s0.x97.loopexit.us.unr-lcssa"
  %indvars.iv.next1827 = add nuw nsw i64 %indvars.iv1826, 1
  %.not868.us = icmp eq i64 %indvars.iv.next1827, %1917
  br i1 %.not868.us, label %"produce sum_filter101", label %"for filter_zeroed.s0.y93.us"

"produce sum_filter101":                          ; preds = %"end for filter_zeroed.s0.x97.loopexit.us", %"produce filter_zeroed92", %"for filter_zeroed.s0.y93.preheader"
  %1977 = icmp slt <8 x i32> %1905, <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>
  %1978 = icmp slt <8 x i32> %1905, <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %1979 = shufflevector <8 x i1> %1977, <8 x i1> %1978, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1980 = xor <16 x i1> %1979, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %1981 = bitcast [16 x i32]* %sum_filter776 to <8 x i32>*
  %1982 = shufflevector <16 x i1> %1980, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> zeroinitializer, <8 x i32>* nonnull %1981, i32 32, <8 x i1> %1982), !tbaa !403
  %1983 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter776, i64 0, i64 8
  %1984 = bitcast i32* %1983 to <8 x i32>*
  %1985 = shufflevector <16 x i1> %1980, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> zeroinitializer, <8 x i32>* nonnull %1984, i32 32, <8 x i1> %1985), !tbaa !413
  %brmerge2184.demorgan = and i1 %1894, %1892
  br i1 %brmerge2184.demorgan, label %"for sum_filter.s1.r19$y102.us.preheader", label %"consume sum_filter108", !prof !392

"for sum_filter.s1.r19$y102.us.preheader":        ; preds = %"produce sum_filter101"
  %1986 = zext i32 %6 to i64
  %1987 = zext i32 %6 to i64
  %1988 = zext i32 %8 to i64
  %xtraiter2321 = and i64 %1986, 1
  %1989 = icmp eq i32 %6, 1
  %unroll_iter2323 = and i64 %1986, 4294967294
  %lcmp.mod2322.not = icmp eq i64 %xtraiter2321, 0
  br label %"for sum_filter.s1.r19$y102.us"

"for sum_filter.s1.r19$y102.us":                  ; preds = %"for sum_filter.s1.r19$y102.us.preheader", %"end for sum_filter.s1.r19$x106.loopexit.us"
  %indvars.iv1832 = phi i64 [ 0, %"for sum_filter.s1.r19$y102.us.preheader" ], [ %indvars.iv.next1833, %"end for sum_filter.s1.r19$x106.loopexit.us" ]
  %1990 = mul nsw i64 %indvars.iv1832, %1987
  br i1 %1989, label %"end for sum_filter.s1.r19$x106.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x105.us"

"for sum_filter.s1.r19$x105.us":                  ; preds = %"for sum_filter.s1.r19$y102.us", %"for sum_filter.s1.r19$x105.us"
  %indvars.iv1830 = phi i64 [ %indvars.iv.next1831.1, %"for sum_filter.s1.r19$x105.us" ], [ 0, %"for sum_filter.s1.r19$y102.us" ]
  %niter2324 = phi i64 [ %niter2324.nsub.1, %"for sum_filter.s1.r19$x105.us" ], [ %unroll_iter2323, %"for sum_filter.s1.r19$y102.us" ]
  %unmaskedload865.us = load <8 x i32>, <8 x i32>* %1981, align 32
  %1991 = select <8 x i1> %1982, <8 x i32> %unmaskedload865.us, <8 x i32> undef
  %unmaskedload866.us = load <8 x i32>, <8 x i32>* %1984, align 32
  %1992 = select <8 x i1> %1985, <8 x i32> %unmaskedload866.us, <8 x i32> undef
  %1993 = shufflevector <8 x i32> %1991, <8 x i32> %1992, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1994 = add nuw nsw i64 %indvars.iv1830, %1990
  %1995 = shl nsw i64 %1994, 4
  %1996 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %1995
  %1997 = bitcast i16* %1996 to <16 x i16>*
  %1998 = call <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>* %1997, i32 32, <16 x i1> %1980, <16 x i16> undef), !tbaa !396
  %1999 = sext <16 x i16> %1998 to <16 x i32>
  %2000 = add nsw <16 x i32> %1993, %1999
  %2001 = shufflevector <16 x i32> %2000, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2001, <8 x i32>* nonnull %1981, i32 32, <8 x i1> %1982), !tbaa !403
  %2002 = shufflevector <16 x i32> %2000, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2002, <8 x i32>* nonnull %1984, i32 32, <8 x i1> %1985), !tbaa !413
  %indvars.iv.next1831 = or i64 %indvars.iv1830, 1
  %unmaskedload865.us.1 = load <8 x i32>, <8 x i32>* %1981, align 32
  %2003 = select <8 x i1> %1982, <8 x i32> %unmaskedload865.us.1, <8 x i32> undef
  %unmaskedload866.us.1 = load <8 x i32>, <8 x i32>* %1984, align 32
  %2004 = select <8 x i1> %1985, <8 x i32> %unmaskedload866.us.1, <8 x i32> undef
  %2005 = shufflevector <8 x i32> %2003, <8 x i32> %2004, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2006 = add nuw nsw i64 %indvars.iv.next1831, %1990
  %2007 = shl nsw i64 %2006, 4
  %2008 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2007
  %2009 = bitcast i16* %2008 to <16 x i16>*
  %2010 = call <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>* %2009, i32 32, <16 x i1> %1980, <16 x i16> undef), !tbaa !396
  %2011 = sext <16 x i16> %2010 to <16 x i32>
  %2012 = add nsw <16 x i32> %2005, %2011
  %2013 = shufflevector <16 x i32> %2012, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2013, <8 x i32>* nonnull %1981, i32 32, <8 x i1> %1982), !tbaa !403
  %2014 = shufflevector <16 x i32> %2012, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2014, <8 x i32>* nonnull %1984, i32 32, <8 x i1> %1985), !tbaa !413
  %indvars.iv.next1831.1 = add nuw nsw i64 %indvars.iv1830, 2
  %niter2324.nsub.1 = add i64 %niter2324, -2
  %niter2324.ncmp.1 = icmp eq i64 %niter2324.nsub.1, 0
  br i1 %niter2324.ncmp.1, label %"end for sum_filter.s1.r19$x106.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x105.us"

"end for sum_filter.s1.r19$x106.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x105.us", %"for sum_filter.s1.r19$y102.us"
  %indvars.iv1830.unr = phi i64 [ 0, %"for sum_filter.s1.r19$y102.us" ], [ %indvars.iv.next1831.1, %"for sum_filter.s1.r19$x105.us" ]
  br i1 %lcmp.mod2322.not, label %"end for sum_filter.s1.r19$x106.loopexit.us", label %"for sum_filter.s1.r19$x105.us.epil"

"for sum_filter.s1.r19$x105.us.epil":             ; preds = %"end for sum_filter.s1.r19$x106.loopexit.us.unr-lcssa"
  %unmaskedload865.us.epil = load <8 x i32>, <8 x i32>* %1981, align 32
  %2015 = select <8 x i1> %1982, <8 x i32> %unmaskedload865.us.epil, <8 x i32> undef
  %unmaskedload866.us.epil = load <8 x i32>, <8 x i32>* %1984, align 32
  %2016 = select <8 x i1> %1985, <8 x i32> %unmaskedload866.us.epil, <8 x i32> undef
  %2017 = shufflevector <8 x i32> %2015, <8 x i32> %2016, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2018 = add nuw nsw i64 %indvars.iv1830.unr, %1990
  %2019 = shl nsw i64 %2018, 4
  %2020 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2019
  %2021 = bitcast i16* %2020 to <16 x i16>*
  %2022 = call <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>* %2021, i32 32, <16 x i1> %1980, <16 x i16> undef), !tbaa !396
  %2023 = sext <16 x i16> %2022 to <16 x i32>
  %2024 = add nsw <16 x i32> %2017, %2023
  %2025 = shufflevector <16 x i32> %2024, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2025, <8 x i32>* nonnull %1981, i32 32, <8 x i1> %1982), !tbaa !403
  %2026 = shufflevector <16 x i32> %2024, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2026, <8 x i32>* nonnull %1984, i32 32, <8 x i1> %1985), !tbaa !413
  br label %"end for sum_filter.s1.r19$x106.loopexit.us"

"end for sum_filter.s1.r19$x106.loopexit.us":     ; preds = %"end for sum_filter.s1.r19$x106.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x105.us.epil"
  %indvars.iv.next1833 = add nuw nsw i64 %indvars.iv1832, 1
  %.not864.us = icmp eq i64 %indvars.iv.next1833, %1988
  br i1 %.not864.us, label %"consume sum_filter108", label %"for sum_filter.s1.r19$y102.us"

"consume sum_filter108":                          ; preds = %"end for sum_filter.s1.r19$x106.loopexit.us", %"produce sum_filter101"
  %2027 = bitcast i8* %2 to <8 x i32>*
  %2028 = call <8 x i32> @llvm.masked.load.v8i32.p0v8i32(<8 x i32>* %2027, i32 4, <8 x i1> %1982, <8 x i32> undef), !tbaa !468
  %2029 = getelementptr inbounds i8, i8* %2, i64 32
  %2030 = bitcast i8* %2029 to <8 x i32>*
  %2031 = call <8 x i32> @llvm.masked.load.v8i32.p0v8i32(<8 x i32>* nonnull %2030, i32 4, <8 x i1> %1985, <8 x i32> undef), !tbaa !477
  %2032 = shufflevector <8 x i32> %2028, <8 x i32> %2031, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %unmaskedload845 = load <8 x i32>, <8 x i32>* %1981, align 32
  %2033 = select <8 x i1> %1982, <8 x i32> %unmaskedload845, <8 x i32> undef
  %unmaskedload846 = load <8 x i32>, <8 x i32>* %1984, align 32
  %2034 = select <8 x i1> %1985, <8 x i32> %unmaskedload846, <8 x i32> undef
  %2035 = shufflevector <8 x i32> %2033, <8 x i32> %2034, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2036 = zext i8 %input_zero to i32
  %2037 = insertelement <16 x i32> undef, i32 %2036, i32 0
  %2038 = shufflevector <16 x i32> %2037, <16 x i32> undef, <16 x i32> zeroinitializer
  %2039 = mul nsw <16 x i32> %2035, %2038
  %2040 = sub nsw <16 x i32> %2032, %2039
  %2041 = shufflevector <16 x i32> %2040, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2042 = bitcast [64 x i32]* %offset_c545774 to <8 x i32>*
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2041, <8 x i32>* nonnull %2042, i32 32, <8 x i1> %1982), !tbaa !421
  %2043 = shufflevector <16 x i32> %2040, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2044 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 8
  %2045 = bitcast i32* %2044 to <8 x i32>*
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %2043, <8 x i32>* nonnull %2045, i32 32, <8 x i1> %1985), !tbaa !431
  %t2382 = icmp slt i32 %a187, 0
  %2046 = add nsw i32 %6, -1
  %t2383 = mul nsw i32 %2046, %a187
  %t2384 = icmp slt i32 %stride_x, 0
  %t2385 = select i1 %t2382, i32 %t2383, i32 0
  %2047 = select i1 %t2384, i32 %22, i32 1
  %2048 = add i32 %21, -1
  %2049 = add i32 %2048, %2047
  %t2386 = mul nsw i32 %2049, %stride_x
  %t2387 = icmp slt i32 %a186, 0
  %2050 = add nsw i32 %8, -1
  %t2388 = mul nsw i32 %2050, %a186
  %t2389 = icmp slt i32 %stride_y, 0
  %t2390 = select i1 %t2387, i32 %t2388, i32 0
  %2051 = select i1 %t2389, i32 %25, i32 1
  %2052 = add i32 %24, -1
  %2053 = add i32 %2052, %2051
  %t2391 = mul nsw i32 %2053, %stride_y
  %a187.op847 = shl i32 %a187, 1
  %t2393 = select i1 %t2382, i32 %a187.op847, i32 0
  %a186.op848 = shl i32 %a186, 1
  %t2394 = select i1 %t2387, i32 %a186.op848, i32 0
  %t2375 = icmp eq i32 %depth_multiplier, 1
  %2054 = select i1 %1891, i32 %t2394, i32 %t2390
  %2055 = select i1 %1891, i32 %t2393, i32 %t2385
  %b90 = add nsw i32 %t2391, %t2390
  %2056 = select i1 %t2387, i32 0, i32 %t2388
  %2057 = add nsw i32 %25, -1
  %2058 = select i1 %t2389, i32 0, i32 %2057
  %2059 = add nsw i32 %2058, %24
  %2060 = mul nsw i32 %2059, %stride_y
  %b89 = add nsw i32 %2060, %2056
  %b93 = add nsw i32 %t2386, %t2385
  %2061 = select i1 %t2382, i32 0, i32 %t2383
  %2062 = add nsw i32 %22, -1
  %2063 = select i1 %t2384, i32 0, i32 %2062
  %2064 = add nsw i32 %2063, %21
  %2065 = mul nsw i32 %2064, %stride_x
  %b92 = add nsw i32 %2065, %2061
  %2066 = mul nsw i32 %15, %14
  %2067 = mul nsw i32 %18, %16
  %2068 = mul nsw i32 %13, %12
  %2069 = add i32 %2066, %2068
  %t2376 = add i32 %2069, %2067
  %2070 = icmp sgt i32 %17, 0
  br i1 %2070, label %"for output.s0.b.rebased111.preheader", label %after_bb, !prof !399

"for output.s0.b.rebased111.preheader":           ; preds = %"consume sum_filter108"
  %b91 = add nsw i32 %t2386, %2055
  %b88 = add nsw i32 %t2391, %2054
  %2071 = icmp sgt i32 %a187, 0
  %2072 = select i1 %2071, i32 %a187, i32 0
  %t2373 = shl nuw nsw i32 %2072, 1
  %2073 = icmp sgt i32 %a186, 0
  %2074 = select i1 %2073, i32 %a186, i32 0
  %t2367 = shl nuw nsw i32 %2074, 1
  %2075 = icmp sgt i32 %2054, %t2390
  %resampled_input.y.min_realized = select i1 %2075, i32 %b90, i32 %b88
  %2076 = select i1 %1891, i32 %t2367, i32 %2056
  %a87 = add nsw i32 %2060, %2076
  %2077 = icmp sgt i32 %2076, %2056
  %2078 = select i1 %2077, i32 %a87, i32 %b89
  %2079 = sub nsw i32 %2078, %resampled_input.y.min_realized
  %a95 = add nsw i32 %2079, 1
  %2080 = icmp sgt i32 %2055, %t2385
  %resampled_input.x.min_realized = select i1 %2080, i32 %b93, i32 %b91
  %2081 = select i1 %1891, i32 %t2373, i32 %2061
  %a90 = add nsw i32 %2065, %2081
  %2082 = icmp sgt i32 %2081, %2061
  %2083 = select i1 %2082, i32 %a90, i32 %b92
  %2084 = sub nsw i32 %2083, %resampled_input.x.min_realized
  %a94 = add nsw i32 %2084, 1
  %.inv849 = icmp slt i32 %2084, 0
  %2085 = select i1 %.inv849, i32 0, i32 %a94
  %t2459 = zext i32 %2085 to i64
  %.inv850 = icmp slt i32 %2079, 0
  %2086 = select i1 %.inv850, i32 0, i32 %a95
  %t2460 = zext i32 %2086 to i64
  %t2461 = shl nuw nsw i64 %t2459, 4
  %2087 = mul i64 %t2461, %t2460
  %2088 = or i64 %2087, 3
  %2089 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2405 = sub i32 %b93, %resampled_input.x.min_realized
  %t2403 = sub nsw i32 %b92, %b93
  %t2406 = sub i32 %b90, %resampled_input.y.min_realized
  %t2402 = sub nsw i32 %b89, %b90
  %2090 = sext i32 %b93 to i64
  %2091 = sext i32 %13 to i64
  %2092 = icmp sgt i32 %5, 1
  %2093 = icmp eq i32 %depth_multiplier, 0
  %t2463 = sext i1 %2093 to i32
  %2094 = sub nsw i32 %depth_multiplier, %t2463
  %2095 = add i32 %2094, 1
  %2096 = icmp ult i32 %2095, 3
  %2097 = select i1 %2096, i32 %2094, i32 0
  %2098 = xor i32 %t2463, -1
  %2099 = and i32 %2097, %2098
  %2100 = sext i32 %2099 to i64
  %.not1475 = icmp eq i32 %5, 2
  %2101 = icmp sgt i32 %5, 3
  %.not1476 = icmp eq i32 %5, 4
  %2102 = icmp sgt i32 %5, 5
  %.not1477 = icmp eq i32 %5, 6
  %2103 = icmp sgt i32 %5, 7
  %.not1478 = icmp eq i32 %5, 8
  %2104 = icmp sgt i32 %5, 9
  %.not1479 = icmp eq i32 %5, 10
  %2105 = icmp sgt i32 %5, 11
  %.not1480 = icmp eq i32 %5, 12
  %2106 = icmp sgt i32 %5, 13
  %.not1481 = icmp eq i32 %5, 14
  %.neg = mul i32 %26, %24
  %.neg1482 = mul i32 %23, %21
  %.neg1483 = mul i32 %27, %16
  %t2414 = sub i32 %a186.op848, %resampled_input.y.min_realized
  %t2410 = sub nsw i32 %a187.op847, %resampled_input.x.min_realized
  %2107 = icmp sgt i32 %25, 0
  %t2432 = sub nsw i32 %a187, %resampled_input.x.min_realized
  %2108 = sub i32 %a186, %resampled_input.y.min_realized
  %reass.add = add i32 %.neg, %.neg1482
  %reass.add1485 = add i32 %reass.add, %.neg1483
  %2109 = icmp sgt i32 %22, 0
  %2110 = sext i32 %a187 to i64
  %2111 = bitcast i16* %filter_zeroed91 to <16 x i16>*
  %2112 = sext i32 %21 to i64
  %2113 = sext i32 %stride_x to i64
  %2114 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 16
  %2115 = bitcast i16* %2114 to <16 x i16>*
  %2116 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 32
  %2117 = bitcast i16* %2116 to <16 x i16>*
  %2118 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 48
  %2119 = bitcast i16* %2118 to <16 x i16>*
  %2120 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 64
  %2121 = bitcast i16* %2120 to <16 x i16>*
  %2122 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 80
  %2123 = bitcast i16* %2122 to <16 x i16>*
  %2124 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 96
  %2125 = bitcast i16* %2124 to <16 x i16>*
  %2126 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 112
  %2127 = bitcast i16* %2126 to <16 x i16>*
  %2128 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 128
  %2129 = bitcast i16* %2128 to <16 x i16>*
  %2130 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %2131 = shufflevector <16 x i32> %2130, <16 x i32> undef, <16 x i32> zeroinitializer
  %2132 = sext <16 x i32> %2131 to <16 x i64>
  %2133 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %2134 = shufflevector <16 x i32> %2133, <16 x i32> undef, <16 x i32> zeroinitializer
  %.not856 = icmp eq i32 %output_shift, 0
  %2135 = select i1 %.not856, <16 x i32> zeroinitializer, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2136 = add i32 %output_shift, -1
  %2137 = insertelement <16 x i32> undef, i32 %2136, i32 0
  %2138 = shufflevector <16 x i32> %2137, <16 x i32> undef, <16 x i32> zeroinitializer
  %2139 = zext i8 %output_zero to i16
  %2140 = insertelement <16 x i16> undef, i16 %2139, i32 0
  %2141 = shufflevector <16 x i16> %2140, <16 x i16> undef, <16 x i32> zeroinitializer
  %2142 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b99 = shufflevector <16 x i8> %2142, <16 x i8> undef, <16 x i32> zeroinitializer
  %2143 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b98 = shufflevector <16 x i8> %2143, <16 x i8> undef, <16 x i32> zeroinitializer
  %2144 = sext i32 %23 to i64
  %2145 = zext i32 %t2403 to i64
  %2146 = sext i32 %t2406 to i64
  %2147 = sext i32 %a94 to i64
  %2148 = sext i32 %t2405 to i64
  %2149 = sext i32 %b90 to i64
  %2150 = sext i32 %15 to i64
  %2151 = zext i32 %t2402 to i64
  %2152 = zext i32 %6 to i64
  %2153 = sext i32 %6 to i64
  %2154 = zext i32 %8 to i64
  %2155 = zext i32 %22 to i64
  %2156 = sext i32 %24 to i64
  %2157 = sext i32 %stride_y to i64
  %2158 = sext i32 %t2414 to i64
  %2159 = sext i32 %resampled_input.x.min_realized to i64
  %2160 = sext i32 %2108 to i64
  %2161 = sext i32 %resampled_input.y.min_realized to i64
  %2162 = zext i32 %25 to i64
  %2163 = zext i32 %16 to i64
  %zext = zext i32 %17 to i64
  %2164 = add nuw nsw i64 %2145, 1
  %2165 = or i32 %t2402, %t2403
  %2166 = icmp slt i32 %2165, 0
  %.not2227 = icmp sgt i32 %2165, -1
  %xtraiter2325 = and i64 %2164, 3
  %2167 = icmp ult i32 %t2403, 3
  %unroll_iter2328 = and i64 %2164, 8589934588
  %lcmp.mod2327.not = icmp eq i64 %xtraiter2325, 0
  %brmerge2193.demorgan = and i1 %1894, %1892
  %xtraiter2330 = and i64 %2152, 1
  %2168 = icmp eq i32 %6, 1
  %unroll_iter2332 = and i64 %2152, 4294967294
  %lcmp.mod2331.not = icmp eq i64 %xtraiter2330, 0
  br label %"for output.s0.b.rebased111"

"for output.s0.b.rebased111":                     ; preds = %"for output.s0.b.rebased111.preheader", %"end for output.s0.y.yo181"
  %indvars.iv1871 = phi i64 [ 0, %"for output.s0.b.rebased111.preheader" ], [ %indvars.iv.next1872, %"end for output.s0.y.yo181" ]
  %2169 = load i64, i64* %.fca.1.gep707, align 8, !tbaa !386
  %cmp.i1122 = icmp ult i64 %2169, %2088
  %2170 = load i8*, i8** %.fca.0.gep706, align 8, !tbaa !388
  br i1 %cmp.i1122, label %if.then.i1125, label %pseudostack_alloc.exit1138, !prof !389

if.then.i1125:                                    ; preds = %"for output.s0.b.rebased111"
  %tobool1.not.i1124 = icmp ne i8* %2170, null
  %2171 = load i64, i64* %.fca.2.gep708, align 8
  %cmp2.i1127 = icmp ugt i64 %2171, 16384
  %or.cond1461 = and i1 %tobool1.not.i1124, %cmp2.i1127
  br i1 %or.cond1461, label %if.then3.i1129, label %if.end.i1133

if.then3.i1129:                                   ; preds = %if.then.i1125
  call void @halide_free(i8* null, i8* nonnull %2170) #17
  %.pre = load i64, i64* %.fca.2.gep708, align 8, !tbaa !390
  br label %if.end.i1133

if.end.i1133:                                     ; preds = %if.then3.i1129, %if.then.i1125
  %2172 = phi i64 [ %.pre, %if.then3.i1129 ], [ %2171, %if.then.i1125 ]
  %add.i1131 = add i64 %2172, %2088
  store i64 %add.i1131, i64* %.fca.2.gep708, align 8, !tbaa !390
  %cmp7.i1132 = icmp ugt i64 %add.i1131, 16384
  br i1 %cmp7.i1132, label %if.then8.i1135, label %if.end11.i1137

if.then8.i1135:                                   ; preds = %if.end.i1133
  %call.i1134 = call i8* @halide_malloc(i8* null, i64 %2088) #17
  br label %if.end11.i1137

if.end11.i1137:                                   ; preds = %if.then8.i1135, %if.end.i1133
  %storemerge.i1136 = phi i8* [ %call.i1134, %if.then8.i1135 ], [ null, %if.end.i1133 ]
  store i8* %storemerge.i1136, i8** %.fca.0.gep706, align 8, !tbaa !388
  store i64 %2088, i64* %.fca.1.gep707, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1138

pseudostack_alloc.exit1138:                       ; preds = %"for output.s0.b.rebased111", %if.end11.i1137
  %2173 = phi i8* [ %storemerge.i1136, %if.end11.i1137 ], [ %2170, %"for output.s0.b.rebased111" ]
  %.not851 = icmp eq i8* %2173, null
  br i1 %.not851, label %then_bb115, label %"produce resampled_input117", !prof !391

then_bb115:                                       ; preds = %pseudostack_alloc.exit1138
  %2174 = alloca i8*, i64 %2088, align 32
  %2175 = bitcast i8** %2174 to i8*
  store i8** %2174, i8*** %2089, align 8
  br label %"produce resampled_input117"

"produce resampled_input117":                     ; preds = %pseudostack_alloc.exit1138, %then_bb115
  %resampled_input116 = phi i8* [ %2175, %then_bb115 ], [ %2173, %pseudostack_alloc.exit1138 ]
  %2176 = add nuw i64 %indvars.iv1871, %2163
  br i1 %t2375, label %then_bb119, label %next_bb120

then_bb119:                                       ; preds = %"produce resampled_input117"
  br i1 %.not2227, label %"for resampled_input.s0.y.rebased121.us.preheader", label %"consume resampled_input179", !prof !392

"for resampled_input.s0.y.rebased121.us.preheader": ; preds = %then_bb119
  %2177 = trunc i64 %2176 to i32
  %2178 = mul i32 %18, %2177
  %t2397 = sub i32 %2178, %t2376
  %2179 = sext i32 %t2397 to i64
  br label %"for resampled_input.s0.y.rebased121.us"

"for resampled_input.s0.y.rebased121.us":         ; preds = %"for resampled_input.s0.y.rebased121.us.preheader", %"end for resampled_input.s0.x.rebased125.loopexit.us"
  %indvars.iv1843 = phi i64 [ 0, %"for resampled_input.s0.y.rebased121.us.preheader" ], [ %indvars.iv.next1844, %"end for resampled_input.s0.x.rebased125.loopexit.us" ]
  %2180 = add nsw i64 %indvars.iv1843, %2146
  %2181 = mul nsw i64 %2180, %2147
  %2182 = add nsw i64 %2181, %2148
  %2183 = add nsw i64 %indvars.iv1843, %2149
  %2184 = mul nsw i64 %2183, %2150
  %2185 = add nsw i64 %2184, %2179
  br i1 %2167, label %"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased124.us"

"for resampled_input.s0.x.rebased124.us":         ; preds = %"for resampled_input.s0.y.rebased121.us", %"for resampled_input.s0.x.rebased124.us"
  %indvars.iv1841 = phi i64 [ %indvars.iv.next1842.3, %"for resampled_input.s0.x.rebased124.us" ], [ 0, %"for resampled_input.s0.y.rebased121.us" ]
  %niter2329 = phi i64 [ %niter2329.nsub.3, %"for resampled_input.s0.x.rebased124.us" ], [ %unroll_iter2328, %"for resampled_input.s0.y.rebased121.us" ]
  %2186 = add nsw i64 %indvars.iv1841, %2090
  %2187 = mul nsw i64 %2186, %2091
  %2188 = add nsw i64 %2187, %2185
  %2189 = getelementptr inbounds i8, i8* %10, i64 %2188
  %2190 = bitcast i8* %2189 to <16 x i8>*
  %2191 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2190, i32 1, <16 x i1> %1980, <16 x i8> undef), !tbaa !415
  %2192 = add nsw i64 %indvars.iv1841, %2182
  %2193 = shl nsw i64 %2192, 4
  %2194 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2193
  %2195 = bitcast i8* %2194 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2191, <16 x i8>* %2195, i32 16, <16 x i1> %1980), !tbaa !417
  %indvars.iv.next1842 = or i64 %indvars.iv1841, 1
  %2196 = add nsw i64 %indvars.iv.next1842, %2090
  %2197 = mul nsw i64 %2196, %2091
  %2198 = add nsw i64 %2197, %2185
  %2199 = getelementptr inbounds i8, i8* %10, i64 %2198
  %2200 = bitcast i8* %2199 to <16 x i8>*
  %2201 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2200, i32 1, <16 x i1> %1980, <16 x i8> undef), !tbaa !415
  %2202 = add nsw i64 %indvars.iv.next1842, %2182
  %2203 = shl nsw i64 %2202, 4
  %2204 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2203
  %2205 = bitcast i8* %2204 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2201, <16 x i8>* %2205, i32 16, <16 x i1> %1980), !tbaa !417
  %indvars.iv.next1842.1 = or i64 %indvars.iv1841, 2
  %2206 = add nsw i64 %indvars.iv.next1842.1, %2090
  %2207 = mul nsw i64 %2206, %2091
  %2208 = add nsw i64 %2207, %2185
  %2209 = getelementptr inbounds i8, i8* %10, i64 %2208
  %2210 = bitcast i8* %2209 to <16 x i8>*
  %2211 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2210, i32 1, <16 x i1> %1980, <16 x i8> undef), !tbaa !415
  %2212 = add nsw i64 %indvars.iv.next1842.1, %2182
  %2213 = shl nsw i64 %2212, 4
  %2214 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2213
  %2215 = bitcast i8* %2214 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2211, <16 x i8>* %2215, i32 16, <16 x i1> %1980), !tbaa !417
  %indvars.iv.next1842.2 = or i64 %indvars.iv1841, 3
  %2216 = add nsw i64 %indvars.iv.next1842.2, %2090
  %2217 = mul nsw i64 %2216, %2091
  %2218 = add nsw i64 %2217, %2185
  %2219 = getelementptr inbounds i8, i8* %10, i64 %2218
  %2220 = bitcast i8* %2219 to <16 x i8>*
  %2221 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2220, i32 1, <16 x i1> %1980, <16 x i8> undef), !tbaa !415
  %2222 = add nsw i64 %indvars.iv.next1842.2, %2182
  %2223 = shl nsw i64 %2222, 4
  %2224 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2223
  %2225 = bitcast i8* %2224 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2221, <16 x i8>* %2225, i32 16, <16 x i1> %1980), !tbaa !417
  %indvars.iv.next1842.3 = add nuw nsw i64 %indvars.iv1841, 4
  %niter2329.nsub.3 = add i64 %niter2329, -4
  %niter2329.ncmp.3 = icmp eq i64 %niter2329.nsub.3, 0
  br i1 %niter2329.ncmp.3, label %"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased124.us"

"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa": ; preds = %"for resampled_input.s0.x.rebased124.us", %"for resampled_input.s0.y.rebased121.us"
  %indvars.iv1841.unr = phi i64 [ 0, %"for resampled_input.s0.y.rebased121.us" ], [ %indvars.iv.next1842.3, %"for resampled_input.s0.x.rebased124.us" ]
  br i1 %lcmp.mod2327.not, label %"end for resampled_input.s0.x.rebased125.loopexit.us", label %"for resampled_input.s0.x.rebased124.us.epil"

"for resampled_input.s0.x.rebased124.us.epil":    ; preds = %"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa", %"for resampled_input.s0.x.rebased124.us.epil"
  %indvars.iv1841.epil = phi i64 [ %indvars.iv.next1842.epil, %"for resampled_input.s0.x.rebased124.us.epil" ], [ %indvars.iv1841.unr, %"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa" ]
  %epil.iter2326 = phi i64 [ %epil.iter2326.sub, %"for resampled_input.s0.x.rebased124.us.epil" ], [ %xtraiter2325, %"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa" ]
  %2226 = add nsw i64 %indvars.iv1841.epil, %2090
  %2227 = mul nsw i64 %2226, %2091
  %2228 = add nsw i64 %2227, %2185
  %2229 = getelementptr inbounds i8, i8* %10, i64 %2228
  %2230 = bitcast i8* %2229 to <16 x i8>*
  %2231 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2230, i32 1, <16 x i1> %1980, <16 x i8> undef), !tbaa !415
  %2232 = add nsw i64 %indvars.iv1841.epil, %2182
  %2233 = shl nsw i64 %2232, 4
  %2234 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2233
  %2235 = bitcast i8* %2234 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2231, <16 x i8>* %2235, i32 16, <16 x i1> %1980), !tbaa !417
  %indvars.iv.next1842.epil = add nuw nsw i64 %indvars.iv1841.epil, 1
  %epil.iter2326.sub = add i64 %epil.iter2326, -1
  %epil.iter2326.cmp.not = icmp eq i64 %epil.iter2326.sub, 0
  br i1 %epil.iter2326.cmp.not, label %"end for resampled_input.s0.x.rebased125.loopexit.us", label %"for resampled_input.s0.x.rebased124.us.epil", !llvm.loop !479

"end for resampled_input.s0.x.rebased125.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased124.us.epil", %"end for resampled_input.s0.x.rebased125.loopexit.us.unr-lcssa"
  %indvars.iv.next1844 = add nuw nsw i64 %indvars.iv1843, 1
  %.not862.us = icmp eq i64 %indvars.iv1843, %2151
  br i1 %.not862.us, label %"consume resampled_input179", label %"for resampled_input.s0.y.rebased121.us"

next_bb120:                                       ; preds = %"produce resampled_input117"
  br i1 %2166, label %"consume resampled_input179", label %"for resampled_input.s0.y.rebased127.us.preheader", !prof !420

"for resampled_input.s0.y.rebased127.us.preheader": ; preds = %next_bb120
  %2236 = trunc i64 %2176 to i32
  %2237 = mul i32 %18, %2236
  %t2404 = sub i32 %2237, %t2376
  %2238 = sext i32 %t2404 to i64
  br label %"for resampled_input.s0.y.rebased127.us"

"for resampled_input.s0.y.rebased127.us":         ; preds = %"for resampled_input.s0.y.rebased127.us.preheader", %"end for resampled_input.s0.x.rebased131.loopexit.us"
  %indvars.iv1837 = phi i64 [ 0, %"for resampled_input.s0.y.rebased127.us.preheader" ], [ %indvars.iv.next1838, %"end for resampled_input.s0.x.rebased131.loopexit.us" ]
  %2239 = add nsw i64 %indvars.iv1837, %2146
  %2240 = mul nsw i64 %2239, %2147
  %2241 = add nsw i64 %2240, %2148
  %2242 = add nsw i64 %indvars.iv1837, %2149
  %2243 = mul nsw i64 %2242, %2150
  %2244 = add nsw i64 %2243, %2238
  br label %"for resampled_input.s0.x.rebased130.us"

"for resampled_input.s0.x.rebased130.us":         ; preds = %"for resampled_input.s0.y.rebased127.us", %after_bb178.us
  %indvars.iv1835 = phi i64 [ 0, %"for resampled_input.s0.y.rebased127.us" ], [ %indvars.iv.next1836, %after_bb178.us ]
  %2245 = add nsw i64 %indvars.iv1835, %2090
  %2246 = mul nsw i64 %2245, %2091
  %2247 = add nsw i64 %2246, %2244
  %2248 = getelementptr inbounds i8, i8* %10, i64 %2247
  %2249 = load i8, i8* %2248, align 1, !tbaa !415
  br i1 %2092, label %after_bb136.us, label %after_bb178.us

after_bb136.us:                                   ; preds = %"for resampled_input.s0.x.rebased130.us"
  %2250 = add nsw i64 %2247, %2100
  %2251 = getelementptr inbounds i8, i8* %10, i64 %2250
  %2252 = load i8, i8* %2251, align 1, !tbaa !415
  br i1 %.not1475, label %after_bb178.us, label %after_bb139.us

after_bb139.us:                                   ; preds = %after_bb136.us
  %2253 = sdiv i32 2, %2094
  %2254 = and i32 %2253, %2098
  %2255 = sext i32 %2254 to i64
  %2256 = add nsw i64 %2247, %2255
  %2257 = getelementptr inbounds i8, i8* %10, i64 %2256
  %2258 = load i8, i8* %2257, align 1, !tbaa !415
  br i1 %2101, label %after_bb142.us, label %after_bb178.us

after_bb142.us:                                   ; preds = %after_bb139.us
  %2259 = sdiv i32 3, %2094
  %2260 = and i32 %2259, %2098
  %2261 = sext i32 %2260 to i64
  %2262 = add nsw i64 %2247, %2261
  %2263 = getelementptr inbounds i8, i8* %10, i64 %2262
  %2264 = load i8, i8* %2263, align 1, !tbaa !415
  br i1 %.not1476, label %after_bb178.us, label %after_bb145.us

after_bb145.us:                                   ; preds = %after_bb142.us
  %2265 = sdiv i32 4, %2094
  %2266 = and i32 %2265, %2098
  %2267 = sext i32 %2266 to i64
  %2268 = add nsw i64 %2247, %2267
  %2269 = getelementptr inbounds i8, i8* %10, i64 %2268
  %2270 = load i8, i8* %2269, align 1, !tbaa !415
  br i1 %2102, label %after_bb148.us, label %after_bb178.us

after_bb148.us:                                   ; preds = %after_bb145.us
  %2271 = sdiv i32 5, %2094
  %2272 = and i32 %2271, %2098
  %2273 = sext i32 %2272 to i64
  %2274 = add nsw i64 %2247, %2273
  %2275 = getelementptr inbounds i8, i8* %10, i64 %2274
  %2276 = load i8, i8* %2275, align 1, !tbaa !415
  br i1 %.not1477, label %after_bb178.us, label %after_bb151.us

after_bb151.us:                                   ; preds = %after_bb148.us
  %2277 = sdiv i32 6, %2094
  %2278 = and i32 %2277, %2098
  %2279 = sext i32 %2278 to i64
  %2280 = add nsw i64 %2247, %2279
  %2281 = getelementptr inbounds i8, i8* %10, i64 %2280
  %2282 = load i8, i8* %2281, align 1, !tbaa !415
  br i1 %2103, label %after_bb154.us, label %after_bb178.us

after_bb154.us:                                   ; preds = %after_bb151.us
  %2283 = sdiv i32 7, %2094
  %2284 = and i32 %2283, %2098
  %2285 = sext i32 %2284 to i64
  %2286 = add nsw i64 %2247, %2285
  %2287 = getelementptr inbounds i8, i8* %10, i64 %2286
  %2288 = load i8, i8* %2287, align 1, !tbaa !415
  br i1 %.not1478, label %after_bb178.us, label %after_bb157.us

after_bb157.us:                                   ; preds = %after_bb154.us
  %2289 = sdiv i32 8, %2094
  %2290 = and i32 %2289, %2098
  %2291 = sext i32 %2290 to i64
  %2292 = add nsw i64 %2247, %2291
  %2293 = getelementptr inbounds i8, i8* %10, i64 %2292
  %2294 = load i8, i8* %2293, align 1, !tbaa !415
  br i1 %2104, label %after_bb160.us, label %after_bb178.us

after_bb160.us:                                   ; preds = %after_bb157.us
  %2295 = sdiv i32 9, %2094
  %2296 = and i32 %2295, %2098
  %2297 = sext i32 %2296 to i64
  %2298 = add nsw i64 %2247, %2297
  %2299 = getelementptr inbounds i8, i8* %10, i64 %2298
  %2300 = load i8, i8* %2299, align 1, !tbaa !415
  br i1 %.not1479, label %after_bb178.us, label %after_bb163.us

after_bb163.us:                                   ; preds = %after_bb160.us
  %2301 = sdiv i32 10, %2094
  %2302 = and i32 %2301, %2098
  %2303 = sext i32 %2302 to i64
  %2304 = add nsw i64 %2247, %2303
  %2305 = getelementptr inbounds i8, i8* %10, i64 %2304
  %2306 = load i8, i8* %2305, align 1, !tbaa !415
  br i1 %2105, label %after_bb166.us, label %after_bb178.us

after_bb166.us:                                   ; preds = %after_bb163.us
  %2307 = sdiv i32 11, %2094
  %2308 = and i32 %2307, %2098
  %2309 = sext i32 %2308 to i64
  %2310 = add nsw i64 %2247, %2309
  %2311 = getelementptr inbounds i8, i8* %10, i64 %2310
  %2312 = load i8, i8* %2311, align 1, !tbaa !415
  br i1 %.not1480, label %after_bb178.us, label %after_bb169.us

after_bb169.us:                                   ; preds = %after_bb166.us
  %2313 = sdiv i32 12, %2094
  %2314 = and i32 %2313, %2098
  %2315 = sext i32 %2314 to i64
  %2316 = add nsw i64 %2247, %2315
  %2317 = getelementptr inbounds i8, i8* %10, i64 %2316
  %2318 = load i8, i8* %2317, align 1, !tbaa !415
  br i1 %2106, label %after_bb172.us, label %after_bb178.us

after_bb172.us:                                   ; preds = %after_bb169.us
  %2319 = sdiv i32 13, %2094
  %2320 = and i32 %2319, %2098
  %2321 = sext i32 %2320 to i64
  %2322 = add nsw i64 %2247, %2321
  %2323 = getelementptr inbounds i8, i8* %10, i64 %2322
  %2324 = load i8, i8* %2323, align 1, !tbaa !415
  br i1 %.not1481, label %after_bb178.us, label %true_bb173.us

true_bb173.us:                                    ; preds = %after_bb172.us
  %2325 = sdiv i32 14, %2094
  %2326 = and i32 %2325, %2098
  %2327 = sext i32 %2326 to i64
  %2328 = add nsw i64 %2247, %2327
  %2329 = getelementptr inbounds i8, i8* %10, i64 %2328
  %2330 = load i8, i8* %2329, align 1, !tbaa !415
  br label %after_bb178.us

after_bb178.us:                                   ; preds = %true_bb173.us, %after_bb172.us, %after_bb169.us, %after_bb166.us, %after_bb163.us, %after_bb160.us, %after_bb157.us, %after_bb154.us, %after_bb151.us, %after_bb148.us, %after_bb145.us, %after_bb142.us, %after_bb139.us, %after_bb136.us, %"for resampled_input.s0.x.rebased130.us"
  %2331 = phi i8 [ %2324, %true_bb173.us ], [ %2324, %after_bb172.us ], [ 0, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ], [ 0, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2332 = phi i8 [ %2312, %true_bb173.us ], [ %2312, %after_bb172.us ], [ %2312, %after_bb169.us ], [ %2312, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ], [ 0, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2333 = phi i8 [ %2300, %true_bb173.us ], [ %2300, %after_bb172.us ], [ %2300, %after_bb169.us ], [ %2300, %after_bb166.us ], [ %2300, %after_bb163.us ], [ %2300, %after_bb160.us ], [ 0, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2334 = phi i8 [ %2288, %true_bb173.us ], [ %2288, %after_bb172.us ], [ %2288, %after_bb169.us ], [ %2288, %after_bb166.us ], [ %2288, %after_bb163.us ], [ %2288, %after_bb160.us ], [ %2288, %after_bb157.us ], [ %2288, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2335 = phi i8 [ %2276, %true_bb173.us ], [ %2276, %after_bb172.us ], [ %2276, %after_bb169.us ], [ %2276, %after_bb166.us ], [ %2276, %after_bb163.us ], [ %2276, %after_bb160.us ], [ %2276, %after_bb157.us ], [ %2276, %after_bb154.us ], [ %2276, %after_bb151.us ], [ %2276, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2336 = phi i8 [ %2264, %true_bb173.us ], [ %2264, %after_bb172.us ], [ %2264, %after_bb169.us ], [ %2264, %after_bb166.us ], [ %2264, %after_bb163.us ], [ %2264, %after_bb160.us ], [ %2264, %after_bb157.us ], [ %2264, %after_bb154.us ], [ %2264, %after_bb151.us ], [ %2264, %after_bb148.us ], [ %2264, %after_bb145.us ], [ %2264, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2337 = phi i8 [ %2252, %true_bb173.us ], [ %2252, %after_bb172.us ], [ %2252, %after_bb169.us ], [ %2252, %after_bb166.us ], [ %2252, %after_bb163.us ], [ %2252, %after_bb160.us ], [ %2252, %after_bb157.us ], [ %2252, %after_bb154.us ], [ %2252, %after_bb151.us ], [ %2252, %after_bb148.us ], [ %2252, %after_bb145.us ], [ %2252, %after_bb142.us ], [ %2252, %after_bb139.us ], [ %2252, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2338 = phi i8 [ %2258, %true_bb173.us ], [ %2258, %after_bb172.us ], [ %2258, %after_bb169.us ], [ %2258, %after_bb166.us ], [ %2258, %after_bb163.us ], [ %2258, %after_bb160.us ], [ %2258, %after_bb157.us ], [ %2258, %after_bb154.us ], [ %2258, %after_bb151.us ], [ %2258, %after_bb148.us ], [ %2258, %after_bb145.us ], [ %2258, %after_bb142.us ], [ %2258, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2339 = phi i8 [ %2270, %true_bb173.us ], [ %2270, %after_bb172.us ], [ %2270, %after_bb169.us ], [ %2270, %after_bb166.us ], [ %2270, %after_bb163.us ], [ %2270, %after_bb160.us ], [ %2270, %after_bb157.us ], [ %2270, %after_bb154.us ], [ %2270, %after_bb151.us ], [ %2270, %after_bb148.us ], [ %2270, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2340 = phi i8 [ %2282, %true_bb173.us ], [ %2282, %after_bb172.us ], [ %2282, %after_bb169.us ], [ %2282, %after_bb166.us ], [ %2282, %after_bb163.us ], [ %2282, %after_bb160.us ], [ %2282, %after_bb157.us ], [ %2282, %after_bb154.us ], [ %2282, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2341 = phi i8 [ %2294, %true_bb173.us ], [ %2294, %after_bb172.us ], [ %2294, %after_bb169.us ], [ %2294, %after_bb166.us ], [ %2294, %after_bb163.us ], [ %2294, %after_bb160.us ], [ %2294, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2342 = phi i8 [ %2306, %true_bb173.us ], [ %2306, %after_bb172.us ], [ %2306, %after_bb169.us ], [ %2306, %after_bb166.us ], [ %2306, %after_bb163.us ], [ 0, %after_bb160.us ], [ 0, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2343 = phi i8 [ %2318, %true_bb173.us ], [ %2318, %after_bb172.us ], [ %2318, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ], [ 0, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2344 = phi i8 [ %2330, %true_bb173.us ], [ 0, %after_bb172.us ], [ 0, %after_bb169.us ], [ 0, %after_bb166.us ], [ 0, %after_bb163.us ], [ 0, %after_bb160.us ], [ 0, %after_bb157.us ], [ 0, %after_bb154.us ], [ 0, %after_bb151.us ], [ 0, %after_bb148.us ], [ 0, %after_bb145.us ], [ 0, %after_bb142.us ], [ 0, %after_bb139.us ], [ 0, %after_bb136.us ], [ 0, %"for resampled_input.s0.x.rebased130.us" ]
  %2345 = insertelement <16 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %2249, i32 0
  %2346 = insertelement <16 x i8> %2345, i8 %2337, i32 1
  %2347 = insertelement <16 x i8> %2346, i8 %2338, i32 2
  %2348 = insertelement <16 x i8> %2347, i8 %2336, i32 3
  %2349 = insertelement <16 x i8> %2348, i8 %2339, i32 4
  %2350 = insertelement <16 x i8> %2349, i8 %2335, i32 5
  %2351 = insertelement <16 x i8> %2350, i8 %2340, i32 6
  %2352 = insertelement <16 x i8> %2351, i8 %2334, i32 7
  %2353 = insertelement <16 x i8> %2352, i8 %2341, i32 8
  %2354 = insertelement <16 x i8> %2353, i8 %2333, i32 9
  %2355 = insertelement <16 x i8> %2354, i8 %2342, i32 10
  %2356 = insertelement <16 x i8> %2355, i8 %2332, i32 11
  %2357 = insertelement <16 x i8> %2356, i8 %2343, i32 12
  %2358 = insertelement <16 x i8> %2357, i8 %2331, i32 13
  %2359 = insertelement <16 x i8> %2358, i8 %2344, i32 14
  %2360 = add nsw i64 %indvars.iv1835, %2241
  %2361 = shl nsw i64 %2360, 4
  %2362 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2361
  %2363 = bitcast i8* %2362 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2359, <16 x i8>* %2363, i32 16, <16 x i1> %1980), !tbaa !417
  %indvars.iv.next1836 = add nuw nsw i64 %indvars.iv1835, 1
  %.not861.us = icmp eq i64 %indvars.iv1835, %2145
  br i1 %.not861.us, label %"end for resampled_input.s0.x.rebased131.loopexit.us", label %"for resampled_input.s0.x.rebased130.us"

"end for resampled_input.s0.x.rebased131.loopexit.us": ; preds = %after_bb178.us
  %indvars.iv.next1838 = add nuw nsw i64 %indvars.iv1837, 1
  %.not860.us = icmp eq i64 %indvars.iv1837, %2151
  br i1 %.not860.us, label %"consume resampled_input179", label %"for resampled_input.s0.y.rebased127.us"

"consume resampled_input179":                     ; preds = %"end for resampled_input.s0.x.rebased131.loopexit.us", %"end for resampled_input.s0.x.rebased125.loopexit.us", %next_bb120, %then_bb119
  br i1 %2107, label %"for output.s0.y.yo180.preheader", label %"end for output.s0.y.yo181", !prof !399

"for output.s0.y.yo180.preheader":                ; preds = %"consume resampled_input179"
  %2364 = load <8 x i32>, <8 x i32>* %2042, align 32
  %2365 = load <8 x i32>, <8 x i32>* %2045, align 32
  %2366 = shufflevector <8 x i32> %2364, <8 x i32> %2365, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2367 = trunc i64 %2176 to i32
  %2368 = mul i32 %27, %2367
  br label %"for output.s0.y.yo180"

"for output.s0.y.yo180":                          ; preds = %"for output.s0.y.yo180.preheader", %"end for output.s0.x.xo184"
  %indvars.iv1854 = phi i64 [ 0, %"for output.s0.y.yo180.preheader" ], [ %indvars.iv.next1855, %"end for output.s0.x.xo184" ]
  %output.s0.y.yo182 = phi i32 [ 0, %"for output.s0.y.yo180.preheader" ], [ %2393, %"end for output.s0.x.xo184" ]
  %2369 = add nsw i64 %indvars.iv1854, %2156
  %t2429 = add nsw i32 %output.s0.y.yo182, %24
  %2370 = mul nsw i64 %2369, %2157
  %t2430 = mul nsw i32 %t2429, %stride_y
  %2371 = add nsw i32 %t2414, %t2430
  %t2431 = mul nsw i32 %2371, %a94
  %2372 = add nsw i32 %2108, %t2430
  %t2433 = mul nsw i32 %2372, %a94
  %2373 = sub nsw i64 %2370, %2161
  %t2434 = sub nsw i32 %t2430, %resampled_input.y.min_realized
  %t2435 = mul nsw i32 %t2434, %a94
  br i1 %2109, label %"for output.s0.x.xo183.preheader", label %"end for output.s0.x.xo184", !prof !399

"for output.s0.x.xo183.preheader":                ; preds = %"for output.s0.y.yo180"
  %2374 = mul nsw i64 %2373, %2147
  %2375 = add nsw i64 %2370, %2160
  %2376 = mul nsw i64 %2375, %2147
  %2377 = add nsw i64 %2370, %2158
  %2378 = mul nsw i64 %2377, %2147
  %2379 = trunc i64 %2369 to i32
  %2380 = mul i32 %26, %2379
  %t2415 = add i32 %2380, %2368
  %t2428 = sub i32 %t2415, %reass.add1485
  %t2426 = add nsw i32 %t2431, %t2410
  %t2425 = add nsw i32 %t2431, %t2432
  %t2422 = add nsw i32 %t2433, %t2410
  %t2421 = add nsw i32 %t2433, %t2432
  %t2418 = add nsw i32 %t2435, %t2410
  %t2417 = add nsw i32 %t2435, %t2432
  %2381 = sub nsw i64 %2378, %2159
  %2382 = sub nsw i64 %2376, %2159
  %2383 = sub nsw i64 %2374, %2159
  %2384 = sext i32 %t2417 to i64
  %2385 = sext i32 %t2418 to i64
  %2386 = sext i32 %t2421 to i64
  %2387 = sext i32 %t2422 to i64
  %2388 = sext i32 %t2425 to i64
  %2389 = sext i32 %t2426 to i64
  %2390 = sext i32 %t2428 to i64
  %2391 = trunc i64 %2373 to i32
  br label %"for output.s0.x.xo183"

"end for output.s0.y.yo181":                      ; preds = %"end for output.s0.x.xo184", %"consume resampled_input179"
  %indvars.iv.next1872 = add nuw nsw i64 %indvars.iv1871, 1
  %2392 = icmp eq i64 %indvars.iv.next1872, %zext
  br i1 %2392, label %after_bb.loopexit1529, label %"for output.s0.b.rebased111"

"for output.s0.x.xo183":                          ; preds = %"for output.s0.x.xo183.preheader", %"consume convolved196"
  %indvars.iv1852 = phi i64 [ 0, %"for output.s0.x.xo183.preheader" ], [ %indvars.iv.next1853, %"consume convolved196" ]
  br i1 %1891, label %then_bb188, label %next_bb189

"end for output.s0.x.xo184":                      ; preds = %"consume convolved196", %"for output.s0.y.yo180"
  %indvars.iv.next1855 = add nuw nsw i64 %indvars.iv1854, 1
  %2393 = add nuw nsw i32 %output.s0.y.yo182, 1
  %.not853 = icmp eq i64 %indvars.iv.next1855, %2162
  br i1 %.not853, label %"end for output.s0.y.yo181", label %"for output.s0.y.yo180"

then_bb188:                                       ; preds = %"for output.s0.x.xo183"
  %2394 = load <16 x i16>, <16 x i16>* %2111, align 32, !tbaa !449
  %2395 = sext <16 x i16> %2394 to <16 x i32>
  %2396 = add nsw i64 %indvars.iv1852, %2112
  %2397 = mul nsw i64 %2396, %2113
  %2398 = add nsw i64 %2397, %2383
  %2399 = shl nsw i64 %2398, 4
  %2400 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2399
  %2401 = bitcast i8* %2400 to <16 x i8>*
  %2402 = load <16 x i8>, <16 x i8>* %2401, align 16, !tbaa !417
  %2403 = zext <16 x i8> %2402 to <16 x i32>
  %2404 = mul nsw <16 x i32> %2403, %2395
  %2405 = add nsw <16 x i32> %2404, %2366
  %2406 = load <16 x i16>, <16 x i16>* %2115, align 32, !tbaa !457
  %2407 = sext <16 x i16> %2406 to <16 x i32>
  %2408 = add nsw i64 %2397, %2384
  %2409 = shl nsw i64 %2408, 4
  %2410 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2409
  %2411 = bitcast i8* %2410 to <16 x i8>*
  %2412 = load <16 x i8>, <16 x i8>* %2411, align 16, !tbaa !417
  %2413 = zext <16 x i8> %2412 to <16 x i32>
  %2414 = mul nsw <16 x i32> %2413, %2407
  %2415 = add nsw <16 x i32> %2405, %2414
  %2416 = load <16 x i16>, <16 x i16>* %2117, align 32, !tbaa !459
  %2417 = sext <16 x i16> %2416 to <16 x i32>
  %2418 = add nsw i64 %2397, %2385
  %2419 = shl nsw i64 %2418, 4
  %2420 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2419
  %2421 = bitcast i8* %2420 to <16 x i8>*
  %2422 = load <16 x i8>, <16 x i8>* %2421, align 16, !tbaa !417
  %2423 = zext <16 x i8> %2422 to <16 x i32>
  %2424 = mul nsw <16 x i32> %2423, %2417
  %2425 = add nsw <16 x i32> %2415, %2424
  %2426 = load <16 x i16>, <16 x i16>* %2119, align 32, !tbaa !396
  %2427 = sext <16 x i16> %2426 to <16 x i32>
  %2428 = add nsw i64 %2397, %2382
  %2429 = shl nsw i64 %2428, 4
  %2430 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2429
  %2431 = bitcast i8* %2430 to <16 x i8>*
  %2432 = load <16 x i8>, <16 x i8>* %2431, align 16, !tbaa !417
  %2433 = zext <16 x i8> %2432 to <16 x i32>
  %2434 = mul nsw <16 x i32> %2433, %2427
  %2435 = add nsw <16 x i32> %2425, %2434
  %2436 = load <16 x i16>, <16 x i16>* %2121, align 32, !tbaa !396
  %2437 = sext <16 x i16> %2436 to <16 x i32>
  %2438 = add nsw i64 %2397, %2386
  %2439 = shl nsw i64 %2438, 4
  %2440 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2439
  %2441 = bitcast i8* %2440 to <16 x i8>*
  %2442 = load <16 x i8>, <16 x i8>* %2441, align 16, !tbaa !417
  %2443 = zext <16 x i8> %2442 to <16 x i32>
  %2444 = mul nsw <16 x i32> %2443, %2437
  %2445 = add nsw <16 x i32> %2435, %2444
  %2446 = load <16 x i16>, <16 x i16>* %2123, align 32, !tbaa !396
  %2447 = sext <16 x i16> %2446 to <16 x i32>
  %2448 = add nsw i64 %2397, %2387
  %2449 = shl nsw i64 %2448, 4
  %2450 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2449
  %2451 = bitcast i8* %2450 to <16 x i8>*
  %2452 = load <16 x i8>, <16 x i8>* %2451, align 16, !tbaa !417
  %2453 = zext <16 x i8> %2452 to <16 x i32>
  %2454 = mul nsw <16 x i32> %2453, %2447
  %2455 = add nsw <16 x i32> %2445, %2454
  %2456 = load <16 x i16>, <16 x i16>* %2125, align 32, !tbaa !396
  %2457 = sext <16 x i16> %2456 to <16 x i32>
  %2458 = add nsw i64 %2397, %2381
  %2459 = shl nsw i64 %2458, 4
  %2460 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2459
  %2461 = bitcast i8* %2460 to <16 x i8>*
  %2462 = load <16 x i8>, <16 x i8>* %2461, align 16, !tbaa !417
  %2463 = zext <16 x i8> %2462 to <16 x i32>
  %2464 = mul nsw <16 x i32> %2463, %2457
  %2465 = add nsw <16 x i32> %2455, %2464
  %2466 = load <16 x i16>, <16 x i16>* %2127, align 32, !tbaa !396
  %2467 = sext <16 x i16> %2466 to <16 x i32>
  %2468 = add nsw i64 %2397, %2388
  %2469 = shl nsw i64 %2468, 4
  %2470 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2469
  %2471 = bitcast i8* %2470 to <16 x i8>*
  %2472 = load <16 x i8>, <16 x i8>* %2471, align 16, !tbaa !417
  %2473 = zext <16 x i8> %2472 to <16 x i32>
  %2474 = mul nsw <16 x i32> %2473, %2467
  %2475 = add nsw <16 x i32> %2465, %2474
  %2476 = load <16 x i16>, <16 x i16>* %2129, align 32, !tbaa !396
  %2477 = sext <16 x i16> %2476 to <16 x i32>
  %2478 = add nsw i64 %2397, %2389
  %2479 = shl nsw i64 %2478, 4
  %2480 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2479
  %2481 = bitcast i8* %2480 to <16 x i8>*
  %2482 = load <16 x i8>, <16 x i8>* %2481, align 16, !tbaa !417
  %2483 = zext <16 x i8> %2482 to <16 x i32>
  %2484 = mul nsw <16 x i32> %2483, %2477
  %2485 = add nsw <16 x i32> %2475, %2484
  %2486 = shufflevector <16 x i32> %2485, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2487 = shufflevector <16 x i32> %2485, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"consume convolved196"

next_bb189:                                       ; preds = %"for output.s0.x.xo183"
  %2488 = trunc i64 %indvars.iv1852 to i32
  %2489 = add nsw i32 %21, %2488
  %2490 = mul nsw i32 %2489, %stride_x
  %t2436 = sub i32 %2490, %resampled_input.x.min_realized
  br i1 %brmerge2193.demorgan, label %"for convolved.s1.r19$y190.us", label %"consume convolved196", !prof !392

"for convolved.s1.r19$y190.us":                   ; preds = %next_bb189, %"end for convolved.s1.r19$x194.loopexit.us"
  %indvars.iv1849 = phi i64 [ %indvars.iv.next1850, %"end for convolved.s1.r19$x194.loopexit.us" ], [ 0, %next_bb189 ]
  %convolved775.sroa.40.4.us = phi <8 x i32> [ %.lcssa2319, %"end for convolved.s1.r19$x194.loopexit.us" ], [ %2365, %next_bb189 ]
  %convolved775.sroa.0.4.us = phi <8 x i32> [ %2547, %"end for convolved.s1.r19$x194.loopexit.us" ], [ %2364, %next_bb189 ]
  %"convolved.s1.r19$y192.us" = phi i32 [ %2548, %"end for convolved.s1.r19$x194.loopexit.us" ], [ 0, %next_bb189 ]
  %2491 = mul nsw i64 %indvars.iv1849, %2153
  %2492 = mul nsw i32 %"convolved.s1.r19$y192.us", %a186
  %2493 = add nsw i32 %2492, %2391
  %2494 = mul nsw i32 %2493, %a94
  %t2438.us = add nsw i32 %t2436, %2494
  %2495 = sext i32 %t2438.us to i64
  br i1 %2168, label %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x193.us"

"for convolved.s1.r19$x193.us":                   ; preds = %"for convolved.s1.r19$y190.us", %"for convolved.s1.r19$x193.us"
  %indvars.iv1847 = phi i64 [ %indvars.iv.next1848.1, %"for convolved.s1.r19$x193.us" ], [ 0, %"for convolved.s1.r19$y190.us" ]
  %convolved775.sroa.40.5.us = phi <8 x i32> [ %2528, %"for convolved.s1.r19$x193.us" ], [ %convolved775.sroa.40.4.us, %"for convolved.s1.r19$y190.us" ]
  %convolved775.sroa.0.5.us = phi <8 x i32> [ %2527, %"for convolved.s1.r19$x193.us" ], [ %convolved775.sroa.0.4.us, %"for convolved.s1.r19$y190.us" ]
  %niter2333 = phi i64 [ %niter2333.nsub.1, %"for convolved.s1.r19$x193.us" ], [ %unroll_iter2332, %"for convolved.s1.r19$y190.us" ]
  %2496 = shufflevector <8 x i32> %convolved775.sroa.0.5.us, <8 x i32> %convolved775.sroa.40.5.us, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2497 = add nsw i64 %indvars.iv1847, %2491
  %2498 = shl nsw i64 %2497, 4
  %2499 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2498
  %2500 = bitcast i16* %2499 to <16 x i16>*
  %2501 = load <16 x i16>, <16 x i16>* %2500, align 32, !tbaa !396
  %2502 = sext <16 x i16> %2501 to <16 x i32>
  %2503 = mul nsw i64 %indvars.iv1847, %2110
  %2504 = add nsw i64 %2503, %2495
  %2505 = shl nsw i64 %2504, 4
  %2506 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2505
  %2507 = bitcast i8* %2506 to <16 x i8>*
  %2508 = load <16 x i8>, <16 x i8>* %2507, align 16, !tbaa !417
  %2509 = zext <16 x i8> %2508 to <16 x i32>
  %2510 = mul nsw <16 x i32> %2509, %2502
  %2511 = add nsw <16 x i32> %2510, %2496
  %indvars.iv.next1848 = or i64 %indvars.iv1847, 1
  %2512 = add nsw i64 %indvars.iv.next1848, %2491
  %2513 = shl nsw i64 %2512, 4
  %2514 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2513
  %2515 = bitcast i16* %2514 to <16 x i16>*
  %2516 = load <16 x i16>, <16 x i16>* %2515, align 32, !tbaa !396
  %2517 = sext <16 x i16> %2516 to <16 x i32>
  %2518 = mul nsw i64 %indvars.iv.next1848, %2110
  %2519 = add nsw i64 %2518, %2495
  %2520 = shl nsw i64 %2519, 4
  %2521 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2520
  %2522 = bitcast i8* %2521 to <16 x i8>*
  %2523 = load <16 x i8>, <16 x i8>* %2522, align 16, !tbaa !417
  %2524 = zext <16 x i8> %2523 to <16 x i32>
  %2525 = mul nsw <16 x i32> %2524, %2517
  %2526 = add nsw <16 x i32> %2525, %2511
  %2527 = shufflevector <16 x i32> %2526, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2528 = shufflevector <16 x i32> %2526, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1848.1 = add nuw nsw i64 %indvars.iv1847, 2
  %niter2333.nsub.1 = add i64 %niter2333, -2
  %niter2333.ncmp.1 = icmp eq i64 %niter2333.nsub.1, 0
  br i1 %niter2333.ncmp.1, label %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit", label %"for convolved.s1.r19$x193.us"

"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit": ; preds = %"for convolved.s1.r19$x193.us"
  %2529 = shufflevector <16 x i32> %2526, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa"

"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa": ; preds = %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit", %"for convolved.s1.r19$y190.us"
  %.lcssa2320.ph = phi <16 x i32> [ undef, %"for convolved.s1.r19$y190.us" ], [ %2526, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2319.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$y190.us" ], [ %2528, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv1847.unr = phi i64 [ 0, %"for convolved.s1.r19$y190.us" ], [ %indvars.iv.next1848.1, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.40.5.us.unr = phi <8 x i32> [ %convolved775.sroa.40.4.us, %"for convolved.s1.r19$y190.us" ], [ %2528, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.0.5.us.unr = phi <8 x i32> [ %convolved775.sroa.0.4.us, %"for convolved.s1.r19$y190.us" ], [ %2529, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2331.not, label %"end for convolved.s1.r19$x194.loopexit.us", label %"for convolved.s1.r19$x193.us.epil"

"for convolved.s1.r19$x193.us.epil":              ; preds = %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa"
  %2530 = shufflevector <8 x i32> %convolved775.sroa.0.5.us.unr, <8 x i32> %convolved775.sroa.40.5.us.unr, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2531 = add nsw i64 %indvars.iv1847.unr, %2491
  %2532 = shl nsw i64 %2531, 4
  %2533 = getelementptr inbounds i16, i16* %filter_zeroed91, i64 %2532
  %2534 = bitcast i16* %2533 to <16 x i16>*
  %2535 = load <16 x i16>, <16 x i16>* %2534, align 32, !tbaa !396
  %2536 = sext <16 x i16> %2535 to <16 x i32>
  %2537 = mul nsw i64 %indvars.iv1847.unr, %2110
  %2538 = add nsw i64 %2537, %2495
  %2539 = shl nsw i64 %2538, 4
  %2540 = getelementptr inbounds i8, i8* %resampled_input116, i64 %2539
  %2541 = bitcast i8* %2540 to <16 x i8>*
  %2542 = load <16 x i8>, <16 x i8>* %2541, align 16, !tbaa !417
  %2543 = zext <16 x i8> %2542 to <16 x i32>
  %2544 = mul nsw <16 x i32> %2543, %2536
  %2545 = add nsw <16 x i32> %2544, %2530
  %2546 = shufflevector <16 x i32> %2545, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"end for convolved.s1.r19$x194.loopexit.us"

"end for convolved.s1.r19$x194.loopexit.us":      ; preds = %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x193.us.epil"
  %.lcssa2320 = phi <16 x i32> [ %.lcssa2320.ph, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa" ], [ %2545, %"for convolved.s1.r19$x193.us.epil" ]
  %.lcssa2319 = phi <8 x i32> [ %.lcssa2319.ph, %"end for convolved.s1.r19$x194.loopexit.us.unr-lcssa" ], [ %2546, %"for convolved.s1.r19$x193.us.epil" ]
  %2547 = shufflevector <16 x i32> %.lcssa2320, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next1850 = add nuw nsw i64 %indvars.iv1849, 1
  %2548 = add nuw nsw i32 %"convolved.s1.r19$y192.us", 1
  %.not858.us = icmp eq i64 %indvars.iv.next1850, %2154
  br i1 %.not858.us, label %"consume convolved196.loopexit", label %"for convolved.s1.r19$y190.us"

"consume convolved196.loopexit":                  ; preds = %"end for convolved.s1.r19$x194.loopexit.us"
  %2549 = shufflevector <16 x i32> %.lcssa2320, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume convolved196"

"consume convolved196":                           ; preds = %next_bb189, %"consume convolved196.loopexit", %then_bb188
  %convolved775.sroa.40.7 = phi <8 x i32> [ %2487, %then_bb188 ], [ %2365, %next_bb189 ], [ %.lcssa2319, %"consume convolved196.loopexit" ]
  %convolved775.sroa.0.7 = phi <8 x i32> [ %2486, %then_bb188 ], [ %2364, %next_bb189 ], [ %2549, %"consume convolved196.loopexit" ]
  %2550 = select <8 x i1> %1982, <8 x i32> %convolved775.sroa.0.7, <8 x i32> undef
  %2551 = select <8 x i1> %1985, <8 x i32> %convolved775.sroa.40.7, <8 x i32> undef
  %2552 = shufflevector <8 x i32> %2550, <8 x i32> %2551, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2553 = sext <16 x i32> %2552 to <16 x i64>
  %2554 = mul nsw <16 x i64> %2553, %2132
  %2555 = ashr <16 x i64> %2554, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2556 = add nsw <16 x i64> %2555, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a99 = ashr <16 x i64> %2556, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2557 = shufflevector <16 x i64> %a99, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2558 = icmp slt <4 x i64> %2557, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2559 = shufflevector <16 x i64> %a99, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2560 = icmp slt <4 x i64> %2559, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2561 = shufflevector <16 x i64> %a99, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2562 = icmp slt <4 x i64> %2561, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2563 = shufflevector <16 x i64> %a99, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2564 = icmp slt <4 x i64> %2563, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2565 = select <4 x i1> %2558, <4 x i64> %2557, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2566 = select <4 x i1> %2560, <4 x i64> %2559, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2567 = select <4 x i1> %2562, <4 x i64> %2561, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2568 = select <4 x i1> %2564, <4 x i64> %2563, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2569 = icmp sgt <4 x i64> %2565, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2570 = icmp sgt <4 x i64> %2566, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2571 = icmp sgt <4 x i64> %2567, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2572 = icmp sgt <4 x i64> %2568, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2573 = select <4 x i1> %2569, <4 x i64> %2565, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2574 = select <4 x i1> %2570, <4 x i64> %2566, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2575 = select <4 x i1> %2571, <4 x i64> %2567, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2576 = select <4 x i1> %2572, <4 x i64> %2568, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2577 = shufflevector <4 x i64> %2573, <4 x i64> %2574, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2578 = shufflevector <4 x i64> %2575, <4 x i64> %2576, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2579 = shufflevector <8 x i64> %2577, <8 x i64> %2578, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2580 = trunc <16 x i64> %2579 to <16 x i32>
  %2581 = ashr <16 x i32> %2580, %2134
  %2582 = lshr <16 x i32> %2580, %2138
  %2583 = and <16 x i32> %2582, %2135
  %2584 = add nsw <16 x i32> %2583, %2581
  %2585 = shufflevector <16 x i32> %2584, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2586 = shufflevector <16 x i32> %2584, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2587 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %2585, <8 x i32> %2586) #11
  %2588 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %2587, <16 x i16> %2141)
  %2589 = shufflevector <16 x i16> %2588, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2590 = shufflevector <16 x i16> %2588, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2591 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2589, <8 x i16> %2590) #11
  %2592 = icmp ugt <16 x i8> %b99, %2591
  %a96 = select <16 x i1> %2592, <16 x i8> %2591, <16 x i8> %b99
  %2593 = icmp ugt <16 x i8> %a96, %b98
  %2594 = select <16 x i1> %2593, <16 x i8> %a96, <16 x i8> %b98
  %2595 = add nsw i64 %indvars.iv1852, %2112
  %2596 = mul nsw i64 %2595, %2144
  %2597 = add nsw i64 %2596, %2390
  %2598 = getelementptr inbounds i8, i8* %19, i64 %2597
  %2599 = bitcast i8* %2598 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %2594, <16 x i8>* %2599, i32 1, <16 x i1> %1980), !tbaa !462
  %indvars.iv.next1853 = add nuw nsw i64 %indvars.iv1852, 1
  %.not857 = icmp eq i64 %indvars.iv.next1853, %2155
  br i1 %.not857, label %"end for output.s0.x.xo184", label %"for output.s0.x.xo183"

after_bb230.loopexit:                             ; preds = %"end for output.s0.b.rebased302"
  %2600 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb230

after_bb230.loopexit1523:                         ; preds = %"end for output.s0.b.rebased459"
  %2601 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  br label %after_bb230

after_bb230:                                      ; preds = %after_bb230.loopexit1523, %after_bb230.loopexit, %"consume sum_filter557", %next_bb402
  %.5 = phi i8* [ %.01291, %"consume sum_filter557" ], [ %.01291, %next_bb402 ], [ %.7, %after_bb230.loopexit ], [ %.9, %after_bb230.loopexit1523 ]
  %.1 = phi i8* [ %4429, %"consume sum_filter557" ], [ %.0, %next_bb402 ], [ %2600, %after_bb230.loopexit ], [ %2601, %after_bb230.loopexit1523 ]
  %tobool.not.i.not = icmp eq i8* %.5, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i1139

if.then.i1139.loopexit:                           ; preds = %"end for output.s0.y.yo670"
  %2602 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  br label %if.then.i1139

if.then.i1139:                                    ; preds = %if.then.i1139.loopexit, %after_bb230
  %.11378 = phi i8* [ %.1, %after_bb230 ], [ %4429, %if.then.i1139.loopexit ]
  %.51375 = phi i8* [ %.5, %after_bb230 ], [ %2602, %if.then.i1139.loopexit ]
  %ptr1.i = bitcast i8* %.51375 to i8**
  %2603 = load i8*, i8** %ptr1.i, align 8, !tbaa !388
  %tobool.not.i1253 = icmp eq i8* %2603, null
  br i1 %tobool.not.i1253, label %pseudostack_free.exit, label %land.lhs.true.i1256

land.lhs.true.i1256:                              ; preds = %if.then.i1139
  %cumulative_size.i1254 = getelementptr inbounds i8, i8* %.51375, i64 16
  %2604 = bitcast i8* %cumulative_size.i1254 to i64*
  %2605 = load i64, i64* %2604, align 8, !tbaa !390
  %cmp.i1255 = icmp ugt i64 %2605, 16384
  br i1 %cmp.i1255, label %if.then.i1257, label %pseudostack_free.exit

if.then.i1257:                                    ; preds = %land.lhs.true.i1256
  call void @halide_free(i8* null, i8* nonnull %2603) #17
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i1139, %land.lhs.true.i1256, %if.then.i1257
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.51375, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %after_bb230, %pseudostack_free.exit
  %.11377 = phi i8* [ %.1, %after_bb230 ], [ %.11378, %pseudostack_free.exit ]
  %tobool.not.i1141.not = icmp eq i8* %.11377, null
  br i1 %tobool.not.i1141.not, label %call_destructor.exit1144, label %if.then.i1142

if.then.i1142:                                    ; preds = %call_destructor.exit
  %ptr1.i1260 = bitcast i8* %.11377 to i8**
  %2606 = load i8*, i8** %ptr1.i1260, align 8, !tbaa !388
  %tobool.not.i1261 = icmp eq i8* %2606, null
  br i1 %tobool.not.i1261, label %pseudostack_free.exit1269, label %land.lhs.true.i1264

land.lhs.true.i1264:                              ; preds = %if.then.i1142
  %cumulative_size.i1262 = getelementptr inbounds i8, i8* %.11377, i64 16
  %2607 = bitcast i8* %cumulative_size.i1262 to i64*
  %2608 = load i64, i64* %2607, align 8, !tbaa !390
  %cmp.i1263 = icmp ugt i64 %2608, 16384
  br i1 %cmp.i1263, label %if.then.i1265, label %pseudostack_free.exit1269

if.then.i1265:                                    ; preds = %land.lhs.true.i1264
  call void @halide_free(i8* null, i8* nonnull %2606) #17
  br label %pseudostack_free.exit1269

pseudostack_free.exit1269:                        ; preds = %if.then.i1142, %land.lhs.true.i1264, %if.then.i1265
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.11377, i8 0, i64 24, i1 false)
  br label %call_destructor.exit1144

call_destructor.exit1144:                         ; preds = %call_destructor.exit, %pseudostack_free.exit1269
  ret i32 0

then_bb231:                                       ; preds = %after_bb
  %t2158233 = icmp slt i32 %a187, 0
  %2609 = add nsw i32 %46, -1
  %t2159234 = mul nsw i32 %2609, %a187
  %t2160235 = icmp slt i32 %stride_x, 0
  %2610 = icmp slt i32 %62, 2
  %t2161236 = select i1 %2610, i32 %62, i32 2
  %t2162237 = add nsw i32 %t2161236, -2
  %t2163238 = add nsw i32 %62, -1
  %t2164239 = select i1 %t2158233, i32 %t2159234, i32 0
  %2611 = select i1 %t2160235, i32 %t2163238, i32 %t2162237
  %2612 = add nsw i32 %2611, %61
  %t2165240 = mul nsw i32 %2612, %stride_x
  %t2166241 = icmp slt i32 %a186, 0
  %2613 = add nsw i32 %48, -1
  %t2167242 = mul nsw i32 %2613, %a186
  %t2168243 = icmp slt i32 %stride_y, 0
  %2614 = icmp slt i32 %65, 2
  %t2169244 = select i1 %2614, i32 %65, i32 2
  %t2170245 = add nsw i32 %t2169244, -2
  %t2171246 = add nsw i32 %65, -1
  %t2172247 = select i1 %t2166241, i32 %t2167242, i32 0
  %2615 = select i1 %t2168243, i32 %t2171246, i32 %t2170245
  %2616 = add nsw i32 %2615, %64
  %t2173248 = mul nsw i32 %2616, %stride_y
  %2617 = icmp eq i32 %46, 3
  %2618 = icmp eq i32 %48, 3
  %t2174249 = and i1 %2617, %2618
  %a187.op820 = shl i32 %a187, 1
  %t2175250 = select i1 %t2158233, i32 %a187.op820, i32 0
  %a186.op821 = shl i32 %a186, 1
  %t2176251 = select i1 %t2166241, i32 %a186.op821, i32 0
  %t2151252 = icmp eq i32 %depth_multiplier, 1
  %2619 = add nuw nsw i32 %65, 1
  %t2153253 = ashr i32 %2619, 1
  %2620 = add nuw nsw i32 %62, 1
  %t2154254 = ashr i32 %2620, 1
  %2621 = add nuw nsw i32 %45, 15
  %t2129255 = ashr i32 %2621, 4
  %2622 = icmp sgt i32 %a186, 0
  %2623 = select i1 %2622, i32 %a186, i32 0
  %t2142256 = shl nuw nsw i32 %2623, 1
  %2624 = icmp sgt i32 %a187, 0
  %2625 = select i1 %2624, i32 %a187, i32 0
  %t2149257 = shl nuw nsw i32 %2625, 1
  %2626 = select i1 %t2174249, i32 %t2176251, i32 %t2172247
  %b118 = add nsw i32 %t2173248, %2626
  %2627 = select i1 %t2174249, i32 %t2175250, i32 %t2164239
  %b117 = add nsw i32 %t2165240, %2627
  %b122 = add nsw i32 %t2173248, %t2172247
  %2628 = select i1 %t2166241, i32 0, i32 %t2167242
  %2629 = select i1 %t2168243, i32 %t2170245, i32 %t2171246
  %2630 = add nsw i32 %2629, %64
  %2631 = mul nsw i32 %2630, %stride_y
  %b121 = add nsw i32 %2631, %2628
  %b120 = add nsw i32 %t2165240, %t2164239
  %2632 = select i1 %t2158233, i32 0, i32 %t2159234
  %2633 = select i1 %t2160235, i32 %t2162237, i32 %t2163238
  %2634 = add nsw i32 %2633, %61
  %2635 = mul nsw i32 %2634, %stride_x
  %b119 = add nsw i32 %2635, %2632
  %2636 = mul nsw i32 %55, %54
  %2637 = mul nsw i32 %58, %56
  %2638 = mul nsw i32 %53, %52
  %2639 = add i32 %2636, %2638
  %t2152259 = add i32 %2639, %2637
  %b112 = add nsw i32 %45, -16
  %2640 = icmp sgt i32 %46, 0
  %2641 = select i1 %2640, i32 %46, i32 0
  %t2493 = zext i32 %2641 to i64
  %2642 = icmp sgt i32 %48, 0
  %2643 = select i1 %2642, i32 %48, i32 0
  %t2494 = zext i32 %2643 to i64
  %2644 = shl nuw nsw i64 %t2493, 5
  %2645 = mul i64 %2644, %t2494
  %2646 = or i64 %2645, 6
  %2647 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %2648 = sext i32 %47 to i64
  %2649 = insertelement <16 x i8> undef, i8 %filter_zero, i32 0
  %2650 = shufflevector <16 x i8> %2649, <16 x i8> undef, <16 x i32> zeroinitializer
  %2651 = zext <16 x i8> %2650 to <16 x i16>
  %2652 = bitcast i8* %42 to i32*
  %2653 = zext i8 %input_zero to i32
  %2654 = insertelement <16 x i32> undef, i32 %2653, i32 0
  %2655 = shufflevector <16 x i32> %2654, <16 x i32> undef, <16 x i32> zeroinitializer
  %2656 = bitcast [16 x i32]* %sum_filter776 to <8 x i32>*
  %2657 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter776, i64 0, i64 8
  %2658 = bitcast i32* %2657 to <8 x i32>*
  %2659 = icmp sgt i32 %2627, %t2164239
  %t2182294 = select i1 %2659, i32 %b120, i32 %b117
  %2660 = icmp sgt i32 %2626, %t2172247
  %t2180295 = select i1 %2660, i32 %b122, i32 %b118
  %2661 = select i1 %t2174249, i32 %t2149257, i32 %2632
  %a117 = add nsw i32 %2635, %2661
  %2662 = icmp sgt i32 %2661, %2632
  %2663 = select i1 %2662, i32 %a117, i32 %b119
  %t2183296 = sub nsw i32 %2663, %t2182294
  %2664 = select i1 %t2174249, i32 %t2142256, i32 %2628
  %a119 = add nsw i32 %2631, %2664
  %2665 = icmp sgt i32 %2664, %2628
  %2666 = select i1 %2665, i32 %a119, i32 %b121
  %t2181297 = sub nsw i32 %2666, %t2180295
  %t2185298 = sub nsw i32 %b119, %b120
  %t2184299 = sub nsw i32 %b121, %b122
  %.neg1514 = mul i32 %66, %64
  %.neg1515 = mul i32 %63, %61
  %.neg1516 = mul i32 %67, %56
  %2667 = icmp sgt i32 %57, 0
  %a124 = add nsw i32 %t2181297, 1
  %a123 = add nsw i32 %t2183296, 1
  %.inv824 = icmp slt i32 %t2183296, 0
  %2668 = select i1 %.inv824, i32 0, i32 %a123
  %t2495 = zext i32 %2668 to i64
  %.inv825 = icmp slt i32 %t2181297, 0
  %2669 = select i1 %.inv825, i32 0, i32 %a124
  %t2496 = zext i32 %2669 to i64
  %t2497 = shl nuw nsw i64 %t2495, 4
  %2670 = mul i64 %t2497, %t2496
  %2671 = or i64 %2670, 3
  %2672 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2202323 = sub i32 %b120, %t2182294
  %t2203324 = sub i32 %b122, %t2180295
  %2673 = icmp eq i32 %depth_multiplier, 0
  %t2500 = select i1 %2673, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit836 = ashr i32 %depth_multiplier, 31
  %2674 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %2675 = shufflevector <16 x i32> %2674, <16 x i32> undef, <16 x i32> zeroinitializer
  %2676 = sub nsw <16 x i32> %2675, %t2500
  %2677 = xor i32 %depth_multiplier.lobit836, -1
  %2678 = sub nsw i32 %2677, %depth_multiplier.lobit836
  %2679 = insertelement <16 x i32> undef, i32 %2678, i32 0
  %2680 = shufflevector <16 x i32> %2679, <16 x i32> undef, <16 x i32> zeroinitializer
  %2681 = xor <16 x i32> %t2500, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %2682 = sext i32 %b120 to i64
  %2683 = sext i32 %53 to i64
  %t2211334 = sub nsw i32 %a186.op821, %t2180295
  %reass.add1518 = add i32 %.neg1514, %.neg1515
  %reass.add1519 = add i32 %reass.add1518, %.neg1516
  %2684 = icmp sgt i32 %65, 0
  %b127 = add nsw i32 %65, -2
  %2685 = insertelement <2 x i32> poison, i32 %a187, i32 0
  %2686 = insertelement <2 x i32> %2685, i32 %a187.op820, i32 1
  %2687 = insertelement <2 x i32> poison, i32 %t2182294, i32 0
  %2688 = shufflevector <2 x i32> %2687, <2 x i32> undef, <2 x i32> zeroinitializer
  %2689 = sub nsw <2 x i32> %2686, %2688
  %shuffle2268 = shufflevector <2 x i32> %2689, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %t2242346 = sub nsw i32 %a186, %t2180295
  %2690 = icmp sgt i32 %62, 0
  %b128 = add nsw i32 %62, -2
  %2691 = bitcast [64 x i32]* %offset_c545774 to <8 x i32>*
  %2692 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 8
  %2693 = bitcast i32* %2692 to <8 x i32>*
  %2694 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 16
  %2695 = bitcast i32* %2694 to <8 x i32>*
  %2696 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 24
  %2697 = bitcast i32* %2696 to <8 x i32>*
  %2698 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 32
  %2699 = bitcast i32* %2698 to <8 x i32>*
  %2700 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 40
  %2701 = bitcast i32* %2700 to <8 x i32>*
  %2702 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 48
  %2703 = bitcast i32* %2702 to <8 x i32>*
  %2704 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 56
  %2705 = bitcast i32* %2704 to <8 x i32>*
  %2706 = sext i32 %a187 to i64
  %2707 = sext i32 %61 to i64
  %2708 = sext i32 %stride_x to i64
  %2709 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %2710 = shufflevector <16 x i32> %2709, <16 x i32> undef, <16 x i32> zeroinitializer
  %2711 = sext <16 x i32> %2710 to <16 x i64>
  %2712 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %2713 = shufflevector <16 x i32> %2712, <16 x i32> undef, <16 x i32> zeroinitializer
  %.not829 = icmp eq i32 %output_shift, 0
  %2714 = select i1 %.not829, <16 x i32> zeroinitializer, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %2715 = add i32 %output_shift, -1
  %2716 = insertelement <16 x i32> undef, i32 %2715, i32 0
  %2717 = shufflevector <16 x i32> %2716, <16 x i32> undef, <16 x i32> zeroinitializer
  %2718 = zext i8 %output_zero to i16
  %2719 = insertelement <16 x i16> undef, i16 %2718, i32 0
  %2720 = shufflevector <16 x i16> %2719, <16 x i16> undef, <16 x i32> zeroinitializer
  %2721 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b130 = shufflevector <16 x i8> %2721, <16 x i8> undef, <16 x i32> zeroinitializer
  %2722 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b129 = shufflevector <16 x i8> %2722, <16 x i8> undef, <16 x i32> zeroinitializer
  %2723 = sext i32 %63 to i64
  %2724 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %2725 = zext i32 %46 to i64
  %2726 = sext i32 %46 to i64
  %2727 = sext i32 %49 to i64
  %2728 = zext i32 %48 to i64
  %2729 = zext i32 %t2185298 to i64
  %2730 = sext i32 %t2203324 to i64
  %2731 = sext i32 %a123 to i64
  %2732 = sext i32 %t2202323 to i64
  %2733 = sext i32 %b122 to i64
  %2734 = sext i32 %55 to i64
  %2735 = zext i32 %t2184299 to i64
  %2736 = sext i32 %56 to i64
  %2737 = sext i32 %58 to i64
  %zext2090 = zext i32 %57 to i64
  %2738 = add nsw i64 %2725, -1
  %2739 = add nsw i64 %2725, -1
  %2740 = add nuw nsw i64 %2729, 1
  %brmerge2196.demorgan = and i1 %2642, %2640
  %xtraiter2418 = and i64 %2725, 3
  %2741 = icmp ult i64 %2738, 3
  %unroll_iter2421 = and i64 %2725, 4294967292
  %lcmp.mod2420.not = icmp eq i64 %xtraiter2418, 0
  %xtraiter2423 = and i64 %2725, 3
  %2742 = icmp ult i64 %2739, 3
  %unroll_iter2428 = and i64 %2725, 4294967292
  %lcmp.mod2425.not = icmp eq i64 %xtraiter2423, 0
  %2743 = or i32 %t2184299, %t2185298
  %2744 = icmp slt i32 %2743, 0
  %2745 = or i32 %t2184299, %t2185298
  %.not2226 = icmp sgt i32 %2745, -1
  %xtraiter2430 = and i64 %2740, 3
  %2746 = icmp ult i32 %t2185298, 3
  %unroll_iter2433 = and i64 %2740, 8589934588
  %lcmp.mod2432.not = icmp eq i64 %xtraiter2430, 0
  %2747 = insertelement <2 x i32> poison, i32 %stride_y, i32 0
  %2748 = shufflevector <2 x i32> %2747, <2 x i32> undef, <2 x i32> zeroinitializer
  %2749 = insertelement <2 x i32> poison, i32 %t2242346, i32 0
  %2750 = shufflevector <2 x i32> %2749, <2 x i32> undef, <2 x i32> zeroinitializer
  %2751 = insertelement <2 x i32> poison, i32 %a123, i32 0
  %2752 = shufflevector <2 x i32> %2751, <2 x i32> undef, <2 x i32> zeroinitializer
  %2753 = insertelement <2 x i32> poison, i32 %t2211334, i32 0
  %2754 = shufflevector <2 x i32> %2753, <2 x i32> undef, <2 x i32> zeroinitializer
  %2755 = insertelement <2 x i32> poison, i32 %a123, i32 0
  %2756 = shufflevector <2 x i32> %2755, <2 x i32> undef, <2 x i32> zeroinitializer
  %2757 = insertelement <4 x i32> poison, i32 %t2182294, i32 0
  %2758 = insertelement <4 x i32> %2757, i32 %t2182294, i32 1
  %2759 = insertelement <2 x i32> poison, i32 %t2180295, i32 0
  %2760 = shufflevector <2 x i32> %2759, <2 x i32> undef, <2 x i32> zeroinitializer
  %2761 = extractelement <2 x i32> %2689, i32 1
  %2762 = extractelement <2 x i32> %2689, i32 0
  %2763 = shufflevector <2 x i32> %2689, <2 x i32> undef, <2 x i32> <i32 1, i32 1>
  %2764 = insertelement <4 x i32> %2758, i32 %2762, i32 2
  %2765 = insertelement <4 x i32> %2764, i32 %2762, i32 3
  %2766 = insertelement <2 x i64> poison, i64 %2708, i32 0
  %2767 = shufflevector <2 x i64> %2766, <2 x i64> undef, <2 x i32> zeroinitializer
  %2768 = insertelement <2 x i32> poison, i32 %stride_x, i32 0
  %2769 = shufflevector <2 x i32> %2768, <2 x i32> undef, <2 x i32> zeroinitializer
  %2770 = insertelement <2 x i32> poison, i32 %a123, i32 0
  %2771 = shufflevector <2 x i32> %2770, <2 x i32> undef, <2 x i32> zeroinitializer
  br label %"for output.s0.c.co260"

next_bb232:                                       ; preds = %after_bb
  br i1 %77, label %then_bb401, label %next_bb402

"for output.s0.c.co260":                          ; preds = %then_bb231, %"end for output.s0.b.rebased302"
  %.6 = phi i8* [ %.01291, %then_bb231 ], [ %.7, %"end for output.s0.b.rebased302" ]
  %output.s0.c.co262 = phi i32 [ 0, %then_bb231 ], [ %2929, %"end for output.s0.b.rebased302" ]
  %a110 = shl nsw i32 %output.s0.c.co262, 4
  %2772 = icmp sgt i32 %b112, %a110
  %output.s0.c.c.base263 = select i1 %2772, i32 %a110, i32 %b112
  %2773 = load i64, i64* %.fca.1.gep, align 8, !tbaa !386
  %cmp.i1146 = icmp ult i64 %2773, %2646
  %2774 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !388
  br i1 %cmp.i1146, label %if.then.i1149, label %pseudostack_alloc.exit1162, !prof !389

if.then.i1149:                                    ; preds = %"for output.s0.c.co260"
  %tobool1.not.i1148 = icmp ne i8* %2774, null
  %2775 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1151 = icmp ugt i64 %2775, 16384
  %or.cond1462 = and i1 %tobool1.not.i1148, %cmp2.i1151
  br i1 %or.cond1462, label %if.then3.i1153, label %if.end.i1157

if.then3.i1153:                                   ; preds = %if.then.i1149
  call void @halide_free(i8* null, i8* nonnull %2774) #17
  %.pre2099 = load i64, i64* %.fca.2.gep, align 8, !tbaa !390
  br label %if.end.i1157

if.end.i1157:                                     ; preds = %if.then3.i1153, %if.then.i1149
  %2776 = phi i64 [ %.pre2099, %if.then3.i1153 ], [ %2775, %if.then.i1149 ]
  %add.i1155 = add i64 %2776, %2646
  store i64 %add.i1155, i64* %.fca.2.gep, align 8, !tbaa !390
  %cmp7.i1156 = icmp ugt i64 %add.i1155, 16384
  br i1 %cmp7.i1156, label %if.then8.i1159, label %if.end11.i1161

if.then8.i1159:                                   ; preds = %if.end.i1157
  %call.i1158 = call i8* @halide_malloc(i8* null, i64 %2646) #17
  br label %if.end11.i1161

if.end11.i1161:                                   ; preds = %if.then8.i1159, %if.end.i1157
  %storemerge.i1160 = phi i8* [ %call.i1158, %if.then8.i1159 ], [ null, %if.end.i1157 ]
  store i8* %storemerge.i1160, i8** %.fca.0.gep, align 8, !tbaa !388
  store i64 %2646, i64* %.fca.1.gep, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1162

pseudostack_alloc.exit1162:                       ; preds = %"for output.s0.c.co260", %if.end11.i1161
  %2777 = phi i8* [ %storemerge.i1160, %if.end11.i1161 ], [ %2774, %"for output.s0.c.co260" ]
  %2778 = bitcast i8* %2777 to i16*
  %.not822 = icmp eq i8* %2777, null
  br i1 %.not822, label %then_bb265, label %"produce filter_zeroed267", !prof !391

then_bb265:                                       ; preds = %pseudostack_alloc.exit1162
  %2779 = alloca i8*, i64 %2646, align 32
  %2780 = bitcast i8** %2779 to i16*
  store i8** %2779, i8*** %2647, align 8
  br label %"produce filter_zeroed267"

"produce filter_zeroed267":                       ; preds = %pseudostack_alloc.exit1162, %then_bb265
  %filter_zeroed266 = phi i16* [ %2780, %then_bb265 ], [ %2778, %pseudostack_alloc.exit1162 ]
  br i1 %brmerge2196.demorgan, label %"for filter_zeroed.s0.y268.us.preheader", label %"consume sum_filter287", !prof !392

"for filter_zeroed.s0.y268.us.preheader":         ; preds = %"produce filter_zeroed267"
  %2781 = sext i32 %output.s0.c.c.base263 to i64
  br label %"for filter_zeroed.s0.y268.us"

"for filter_zeroed.s0.y268.us":                   ; preds = %"for filter_zeroed.s0.y268.us.preheader", %"end for filter_zeroed.s0.x274.loopexit.us"
  %indvars.iv2060 = phi i64 [ 0, %"for filter_zeroed.s0.y268.us.preheader" ], [ %indvars.iv.next2061, %"end for filter_zeroed.s0.x274.loopexit.us" ]
  %2782 = mul nsw i64 %indvars.iv2060, %2726
  %2783 = mul nsw i64 %indvars.iv2060, %2727
  %2784 = add nsw i64 %2783, %2781
  br i1 %2741, label %"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x273.us"

"for filter_zeroed.s0.x273.us":                   ; preds = %"for filter_zeroed.s0.y268.us", %"for filter_zeroed.s0.x273.us"
  %indvars.iv2058 = phi i64 [ %indvars.iv.next2059.3, %"for filter_zeroed.s0.x273.us" ], [ 0, %"for filter_zeroed.s0.y268.us" ]
  %niter2422 = phi i64 [ %niter2422.nsub.3, %"for filter_zeroed.s0.x273.us" ], [ %unroll_iter2421, %"for filter_zeroed.s0.y268.us" ]
  %2785 = mul nsw i64 %indvars.iv2058, %2648
  %2786 = add nsw i64 %2785, %2784
  %2787 = getelementptr inbounds i8, i8* %43, i64 %2786
  %2788 = bitcast i8* %2787 to <16 x i8>*
  %2789 = load <16 x i8>, <16 x i8>* %2788, align 1, !tbaa !393
  %2790 = zext <16 x i8> %2789 to <16 x i16>
  %2791 = sub nsw <16 x i16> %2790, %2651
  %2792 = add nsw i64 %indvars.iv2058, %2782
  %2793 = shl nsw i64 %2792, 4
  %2794 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2793
  %2795 = bitcast i16* %2794 to <16 x i16>*
  store <16 x i16> %2791, <16 x i16>* %2795, align 32, !tbaa !396
  %indvars.iv.next2059 = or i64 %indvars.iv2058, 1
  %2796 = mul nsw i64 %indvars.iv.next2059, %2648
  %2797 = add nsw i64 %2796, %2784
  %2798 = getelementptr inbounds i8, i8* %43, i64 %2797
  %2799 = bitcast i8* %2798 to <16 x i8>*
  %2800 = load <16 x i8>, <16 x i8>* %2799, align 1, !tbaa !393
  %2801 = zext <16 x i8> %2800 to <16 x i16>
  %2802 = sub nsw <16 x i16> %2801, %2651
  %2803 = add nsw i64 %indvars.iv.next2059, %2782
  %2804 = shl nsw i64 %2803, 4
  %2805 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2804
  %2806 = bitcast i16* %2805 to <16 x i16>*
  store <16 x i16> %2802, <16 x i16>* %2806, align 32, !tbaa !396
  %indvars.iv.next2059.1 = or i64 %indvars.iv2058, 2
  %2807 = mul nsw i64 %indvars.iv.next2059.1, %2648
  %2808 = add nsw i64 %2807, %2784
  %2809 = getelementptr inbounds i8, i8* %43, i64 %2808
  %2810 = bitcast i8* %2809 to <16 x i8>*
  %2811 = load <16 x i8>, <16 x i8>* %2810, align 1, !tbaa !393
  %2812 = zext <16 x i8> %2811 to <16 x i16>
  %2813 = sub nsw <16 x i16> %2812, %2651
  %2814 = add nsw i64 %indvars.iv.next2059.1, %2782
  %2815 = shl nsw i64 %2814, 4
  %2816 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2815
  %2817 = bitcast i16* %2816 to <16 x i16>*
  store <16 x i16> %2813, <16 x i16>* %2817, align 32, !tbaa !396
  %indvars.iv.next2059.2 = or i64 %indvars.iv2058, 3
  %2818 = mul nsw i64 %indvars.iv.next2059.2, %2648
  %2819 = add nsw i64 %2818, %2784
  %2820 = getelementptr inbounds i8, i8* %43, i64 %2819
  %2821 = bitcast i8* %2820 to <16 x i8>*
  %2822 = load <16 x i8>, <16 x i8>* %2821, align 1, !tbaa !393
  %2823 = zext <16 x i8> %2822 to <16 x i16>
  %2824 = sub nsw <16 x i16> %2823, %2651
  %2825 = add nsw i64 %indvars.iv.next2059.2, %2782
  %2826 = shl nsw i64 %2825, 4
  %2827 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2826
  %2828 = bitcast i16* %2827 to <16 x i16>*
  store <16 x i16> %2824, <16 x i16>* %2828, align 32, !tbaa !396
  %indvars.iv.next2059.3 = add nuw nsw i64 %indvars.iv2058, 4
  %niter2422.nsub.3 = add i64 %niter2422, -4
  %niter2422.ncmp.3 = icmp eq i64 %niter2422.nsub.3, 0
  br i1 %niter2422.ncmp.3, label %"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x273.us"

"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x273.us", %"for filter_zeroed.s0.y268.us"
  %indvars.iv2058.unr = phi i64 [ 0, %"for filter_zeroed.s0.y268.us" ], [ %indvars.iv.next2059.3, %"for filter_zeroed.s0.x273.us" ]
  br i1 %lcmp.mod2420.not, label %"end for filter_zeroed.s0.x274.loopexit.us", label %"for filter_zeroed.s0.x273.us.epil"

"for filter_zeroed.s0.x273.us.epil":              ; preds = %"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x273.us.epil"
  %indvars.iv2058.epil = phi i64 [ %indvars.iv.next2059.epil, %"for filter_zeroed.s0.x273.us.epil" ], [ %indvars.iv2058.unr, %"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa" ]
  %epil.iter2419 = phi i64 [ %epil.iter2419.sub, %"for filter_zeroed.s0.x273.us.epil" ], [ %xtraiter2418, %"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa" ]
  %2829 = mul nsw i64 %indvars.iv2058.epil, %2648
  %2830 = add nsw i64 %2829, %2784
  %2831 = getelementptr inbounds i8, i8* %43, i64 %2830
  %2832 = bitcast i8* %2831 to <16 x i8>*
  %2833 = load <16 x i8>, <16 x i8>* %2832, align 1, !tbaa !393
  %2834 = zext <16 x i8> %2833 to <16 x i16>
  %2835 = sub nsw <16 x i16> %2834, %2651
  %2836 = add nsw i64 %indvars.iv2058.epil, %2782
  %2837 = shl nsw i64 %2836, 4
  %2838 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2837
  %2839 = bitcast i16* %2838 to <16 x i16>*
  store <16 x i16> %2835, <16 x i16>* %2839, align 32, !tbaa !396
  %indvars.iv.next2059.epil = add nuw nsw i64 %indvars.iv2058.epil, 1
  %epil.iter2419.sub = add i64 %epil.iter2419, -1
  %epil.iter2419.cmp.not = icmp eq i64 %epil.iter2419.sub, 0
  br i1 %epil.iter2419.cmp.not, label %"end for filter_zeroed.s0.x274.loopexit.us", label %"for filter_zeroed.s0.x273.us.epil", !llvm.loop !480

"end for filter_zeroed.s0.x274.loopexit.us":      ; preds = %"for filter_zeroed.s0.x273.us.epil", %"end for filter_zeroed.s0.x274.loopexit.us.unr-lcssa"
  %indvars.iv.next2061 = add nuw nsw i64 %indvars.iv2060, 1
  %.not842.us = icmp eq i64 %indvars.iv.next2061, %2728
  br i1 %.not842.us, label %"for sum_filter.s1.r19$y280.preheader", label %"for filter_zeroed.s0.y268.us"

"for sum_filter.s1.r19$y280.preheader":           ; preds = %"end for filter_zeroed.s0.x274.loopexit.us"
  br i1 %2640, label %"for sum_filter.s1.r19$y280.us", label %"consume sum_filter287", !prof !399

"for sum_filter.s1.r19$y280.us":                  ; preds = %"for sum_filter.s1.r19$y280.preheader", %"end for sum_filter.s1.r19$x285.loopexit.us"
  %indvars.iv2066 = phi i64 [ %indvars.iv.next2067, %"end for sum_filter.s1.r19$x285.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y280.preheader" ]
  %convolved775.sroa.40.8.us = phi <8 x i32> [ %.lcssa, %"end for sum_filter.s1.r19$x285.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y280.preheader" ]
  %convolved775.sroa.0.8.us = phi <8 x i32> [ %2883, %"end for sum_filter.s1.r19$x285.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y280.preheader" ]
  %2840 = mul nsw i64 %indvars.iv2066, %2726
  br i1 %2742, label %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x284.us"

"for sum_filter.s1.r19$x284.us":                  ; preds = %"for sum_filter.s1.r19$y280.us", %"for sum_filter.s1.r19$x284.us"
  %indvars.iv2064 = phi i64 [ %indvars.iv.next2065.3, %"for sum_filter.s1.r19$x284.us" ], [ 0, %"for sum_filter.s1.r19$y280.us" ]
  %convolved775.sroa.40.9.us = phi <8 x i32> [ %2871, %"for sum_filter.s1.r19$x284.us" ], [ %convolved775.sroa.40.8.us, %"for sum_filter.s1.r19$y280.us" ]
  %convolved775.sroa.0.9.us = phi <8 x i32> [ %2870, %"for sum_filter.s1.r19$x284.us" ], [ %convolved775.sroa.0.8.us, %"for sum_filter.s1.r19$y280.us" ]
  %niter2429 = phi i64 [ %niter2429.nsub.3, %"for sum_filter.s1.r19$x284.us" ], [ %unroll_iter2428, %"for sum_filter.s1.r19$y280.us" ]
  %2841 = shufflevector <8 x i32> %convolved775.sroa.0.9.us, <8 x i32> %convolved775.sroa.40.9.us, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2842 = add nsw i64 %indvars.iv2064, %2840
  %2843 = shl nsw i64 %2842, 4
  %2844 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2843
  %2845 = bitcast i16* %2844 to <16 x i16>*
  %2846 = load <16 x i16>, <16 x i16>* %2845, align 32, !tbaa !396
  %2847 = sext <16 x i16> %2846 to <16 x i32>
  %2848 = add nsw <16 x i32> %2841, %2847
  %indvars.iv.next2065 = or i64 %indvars.iv2064, 1
  %2849 = add nsw i64 %indvars.iv.next2065, %2840
  %2850 = shl nsw i64 %2849, 4
  %2851 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2850
  %2852 = bitcast i16* %2851 to <16 x i16>*
  %2853 = load <16 x i16>, <16 x i16>* %2852, align 32, !tbaa !396
  %2854 = sext <16 x i16> %2853 to <16 x i32>
  %2855 = add nsw <16 x i32> %2848, %2854
  %indvars.iv.next2065.1 = or i64 %indvars.iv2064, 2
  %2856 = add nsw i64 %indvars.iv.next2065.1, %2840
  %2857 = shl nsw i64 %2856, 4
  %2858 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2857
  %2859 = bitcast i16* %2858 to <16 x i16>*
  %2860 = load <16 x i16>, <16 x i16>* %2859, align 32, !tbaa !396
  %2861 = sext <16 x i16> %2860 to <16 x i32>
  %2862 = add nsw <16 x i32> %2855, %2861
  %indvars.iv.next2065.2 = or i64 %indvars.iv2064, 3
  %2863 = add nsw i64 %indvars.iv.next2065.2, %2840
  %2864 = shl nsw i64 %2863, 4
  %2865 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2864
  %2866 = bitcast i16* %2865 to <16 x i16>*
  %2867 = load <16 x i16>, <16 x i16>* %2866, align 32, !tbaa !396
  %2868 = sext <16 x i16> %2867 to <16 x i32>
  %2869 = add nsw <16 x i32> %2862, %2868
  %2870 = shufflevector <16 x i32> %2869, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2871 = shufflevector <16 x i32> %2869, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2065.3 = add nuw nsw i64 %indvars.iv2064, 4
  %niter2429.nsub.3 = add i64 %niter2429, -4
  %niter2429.ncmp.3 = icmp eq i64 %niter2429.nsub.3, 0
  br i1 %niter2429.ncmp.3, label %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit", label %"for sum_filter.s1.r19$x284.us"

"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit": ; preds = %"for sum_filter.s1.r19$x284.us"
  %2872 = shufflevector <16 x i32> %2869, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa"

"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa": ; preds = %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit", %"for sum_filter.s1.r19$y280.us"
  %.lcssa2285.ph = phi <16 x i32> [ undef, %"for sum_filter.s1.r19$y280.us" ], [ %2869, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa.ph = phi <8 x i32> [ undef, %"for sum_filter.s1.r19$y280.us" ], [ %2871, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv2064.unr = phi i64 [ 0, %"for sum_filter.s1.r19$y280.us" ], [ %indvars.iv.next2065.3, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.40.9.us.unr = phi <8 x i32> [ %convolved775.sroa.40.8.us, %"for sum_filter.s1.r19$y280.us" ], [ %2871, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.0.9.us.unr = phi <8 x i32> [ %convolved775.sroa.0.8.us, %"for sum_filter.s1.r19$y280.us" ], [ %2872, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2425.not, label %"end for sum_filter.s1.r19$x285.loopexit.us", label %"for sum_filter.s1.r19$x284.us.epil"

"for sum_filter.s1.r19$x284.us.epil":             ; preds = %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x284.us.epil"
  %indvars.iv2064.epil = phi i64 [ %indvars.iv.next2065.epil, %"for sum_filter.s1.r19$x284.us.epil" ], [ %indvars.iv2064.unr, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa" ]
  %convolved775.sroa.40.9.us.epil = phi <8 x i32> [ %2882, %"for sum_filter.s1.r19$x284.us.epil" ], [ %convolved775.sroa.40.9.us.unr, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa" ]
  %convolved775.sroa.0.9.us.epil = phi <8 x i32> [ %2881, %"for sum_filter.s1.r19$x284.us.epil" ], [ %convolved775.sroa.0.9.us.unr, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa" ]
  %epil.iter2424 = phi i64 [ %epil.iter2424.sub, %"for sum_filter.s1.r19$x284.us.epil" ], [ %xtraiter2423, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa" ]
  %2873 = shufflevector <8 x i32> %convolved775.sroa.0.9.us.epil, <8 x i32> %convolved775.sroa.40.9.us.epil, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2874 = add nsw i64 %indvars.iv2064.epil, %2840
  %2875 = shl nsw i64 %2874, 4
  %2876 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %2875
  %2877 = bitcast i16* %2876 to <16 x i16>*
  %2878 = load <16 x i16>, <16 x i16>* %2877, align 32, !tbaa !396
  %2879 = sext <16 x i16> %2878 to <16 x i32>
  %2880 = add nsw <16 x i32> %2873, %2879
  %2881 = shufflevector <16 x i32> %2880, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2882 = shufflevector <16 x i32> %2880, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2065.epil = add nuw nsw i64 %indvars.iv2064.epil, 1
  %epil.iter2424.sub = add i64 %epil.iter2424, -1
  %epil.iter2424.cmp.not = icmp eq i64 %epil.iter2424.sub, 0
  br i1 %epil.iter2424.cmp.not, label %"end for sum_filter.s1.r19$x285.loopexit.us", label %"for sum_filter.s1.r19$x284.us.epil", !llvm.loop !481

"end for sum_filter.s1.r19$x285.loopexit.us":     ; preds = %"for sum_filter.s1.r19$x284.us.epil", %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa"
  %.lcssa2285 = phi <16 x i32> [ %.lcssa2285.ph, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa" ], [ %2880, %"for sum_filter.s1.r19$x284.us.epil" ]
  %.lcssa = phi <8 x i32> [ %.lcssa.ph, %"end for sum_filter.s1.r19$x285.loopexit.us.unr-lcssa" ], [ %2882, %"for sum_filter.s1.r19$x284.us.epil" ]
  %2883 = shufflevector <16 x i32> %.lcssa2285, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next2067 = add nuw nsw i64 %indvars.iv2066, 1
  %.not840.us = icmp eq i64 %indvars.iv.next2067, %2728
  br i1 %.not840.us, label %"consume sum_filter287.loopexit", label %"for sum_filter.s1.r19$y280.us"

"consume sum_filter287.loopexit":                 ; preds = %"end for sum_filter.s1.r19$x285.loopexit.us"
  %2884 = shufflevector <16 x i32> %.lcssa2285, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume sum_filter287"

"consume sum_filter287":                          ; preds = %"produce filter_zeroed267", %"consume sum_filter287.loopexit", %"for sum_filter.s1.r19$y280.preheader"
  %convolved775.sroa.40.11 = phi <8 x i32> [ zeroinitializer, %"produce filter_zeroed267" ], [ zeroinitializer, %"for sum_filter.s1.r19$y280.preheader" ], [ %.lcssa, %"consume sum_filter287.loopexit" ]
  %convolved775.sroa.0.11 = phi <8 x i32> [ zeroinitializer, %"produce filter_zeroed267" ], [ zeroinitializer, %"for sum_filter.s1.r19$y280.preheader" ], [ %2884, %"consume sum_filter287.loopexit" ]
  %2885 = sext i32 %output.s0.c.c.base263 to i64
  %2886 = getelementptr inbounds i32, i32* %2652, i64 %2885
  %2887 = bitcast i32* %2886 to <8 x i32>*
  %2888 = load <8 x i32>, <8 x i32>* %2887, align 4, !tbaa !401
  %2889 = getelementptr inbounds i32, i32* %2886, i64 8
  %2890 = bitcast i32* %2889 to <8 x i32>*
  %2891 = load <8 x i32>, <8 x i32>* %2890, align 4, !tbaa !401
  %2892 = shufflevector <8 x i32> %2888, <8 x i32> %2891, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2893 = shufflevector <8 x i32> %convolved775.sroa.0.11, <8 x i32> %convolved775.sroa.40.11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2894 = mul nsw <16 x i32> %2893, %2655
  %2895 = sub nsw <16 x i32> %2892, %2894
  %2896 = shufflevector <16 x i32> %2895, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %2896, <8 x i32>* %2656, align 32, !tbaa !403
  %2897 = shufflevector <16 x i32> %2895, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  store <8 x i32> %2897, <8 x i32>* %2658, align 32, !tbaa !413
  br i1 %2667, label %"for output.s0.b.rebased301.preheader", label %"end for output.s0.b.rebased302", !prof !399

"for output.s0.b.rebased301.preheader":           ; preds = %"consume sum_filter287"
  %2898 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base263, i32 0
  %2899 = shufflevector <16 x i32> %2898, <16 x i32> undef, <16 x i32> zeroinitializer
  %2900 = add nsw <16 x i32> %2899, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2901 = shufflevector <16 x i32> %2900, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2902 = shufflevector <16 x i32> %2900, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit834 = ashr <8 x i32> %2901, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %.lobit835 = ashr <8 x i32> %2902, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %t2499 = shufflevector <8 x i32> %.lobit834, <8 x i32> %.lobit835, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2903 = sub nsw <16 x i32> %2900, %t2499
  %2904 = and <16 x i32> %t2499, %2680
  %2905 = sub i32 %output.s0.c.c.base263, %t2152259
  %2906 = bitcast i16* %filter_zeroed266 to <16 x i16>*
  %2907 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 16
  %2908 = bitcast i16* %2907 to <16 x i16>*
  %2909 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 32
  %2910 = bitcast i16* %2909 to <16 x i16>*
  %2911 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 48
  %2912 = bitcast i16* %2911 to <16 x i16>*
  %2913 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 64
  %2914 = bitcast i16* %2913 to <16 x i16>*
  %2915 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 80
  %2916 = bitcast i16* %2915 to <16 x i16>*
  %2917 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 96
  %2918 = bitcast i16* %2917 to <16 x i16>*
  %2919 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 112
  %2920 = bitcast i16* %2919 to <16 x i16>*
  %2921 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 128
  %2922 = bitcast i16* %2921 to <16 x i16>*
  %2923 = sext i32 %2905 to i64
  br label %"for output.s0.b.rebased301"

"for output.s0.b.rebased301":                     ; preds = %"for output.s0.b.rebased301.preheader", %"end for output.s0.y.yo338"
  %indvars.iv2087 = phi i64 [ 0, %"for output.s0.b.rebased301.preheader" ], [ %indvars.iv.next2088, %"end for output.s0.y.yo338" ]
  %2924 = load i64, i64* %.fca.1.gep707, align 8, !tbaa !386
  %cmp.i1164 = icmp ult i64 %2924, %2671
  %2925 = load i8*, i8** %.fca.0.gep706, align 8, !tbaa !388
  br i1 %cmp.i1164, label %if.then.i1167, label %pseudostack_alloc.exit1180, !prof !389

if.then.i1167:                                    ; preds = %"for output.s0.b.rebased301"
  %tobool1.not.i1166 = icmp ne i8* %2925, null
  %2926 = load i64, i64* %.fca.2.gep708, align 8
  %cmp2.i1169 = icmp ugt i64 %2926, 16384
  %or.cond1463 = and i1 %tobool1.not.i1166, %cmp2.i1169
  br i1 %or.cond1463, label %if.then3.i1171, label %if.end.i1175

if.then3.i1171:                                   ; preds = %if.then.i1167
  call void @halide_free(i8* null, i8* nonnull %2925) #17
  %.pre2100 = load i64, i64* %.fca.2.gep708, align 8, !tbaa !390
  br label %if.end.i1175

if.end.i1175:                                     ; preds = %if.then3.i1171, %if.then.i1167
  %2927 = phi i64 [ %.pre2100, %if.then3.i1171 ], [ %2926, %if.then.i1167 ]
  %add.i1173 = add i64 %2927, %2671
  store i64 %add.i1173, i64* %.fca.2.gep708, align 8, !tbaa !390
  %cmp7.i1174 = icmp ugt i64 %add.i1173, 16384
  br i1 %cmp7.i1174, label %if.then8.i1177, label %if.end11.i1179

if.then8.i1177:                                   ; preds = %if.end.i1175
  %call.i1176 = call i8* @halide_malloc(i8* null, i64 %2671) #17
  br label %if.end11.i1179

if.end11.i1179:                                   ; preds = %if.then8.i1177, %if.end.i1175
  %storemerge.i1178 = phi i8* [ %call.i1176, %if.then8.i1177 ], [ null, %if.end.i1175 ]
  store i8* %storemerge.i1178, i8** %.fca.0.gep706, align 8, !tbaa !388
  store i64 %2671, i64* %.fca.1.gep707, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1180

pseudostack_alloc.exit1180:                       ; preds = %"for output.s0.b.rebased301", %if.end11.i1179
  %2928 = phi i8* [ %storemerge.i1178, %if.end11.i1179 ], [ %2925, %"for output.s0.b.rebased301" ]
  %.not826 = icmp eq i8* %2928, null
  br i1 %.not826, label %then_bb305, label %"produce resampled_input307", !prof !391

"end for output.s0.b.rebased302":                 ; preds = %"end for output.s0.y.yo338", %"consume sum_filter287"
  %.7 = phi i8* [ %.6, %"consume sum_filter287" ], [ %2724, %"end for output.s0.y.yo338" ]
  %2929 = add nuw nsw i32 %output.s0.c.co262, 1
  %.not823 = icmp eq i32 %2929, %t2129255
  br i1 %.not823, label %after_bb230.loopexit, label %"for output.s0.c.co260"

then_bb305:                                       ; preds = %pseudostack_alloc.exit1180
  %2930 = alloca i8*, i64 %2671, align 32
  %2931 = bitcast i8** %2930 to i8*
  store i8** %2930, i8*** %2672, align 8
  br label %"produce resampled_input307"

"produce resampled_input307":                     ; preds = %pseudostack_alloc.exit1180, %then_bb305
  %resampled_input306 = phi i8* [ %2931, %then_bb305 ], [ %2928, %pseudostack_alloc.exit1180 ]
  %2932 = add nsw i64 %indvars.iv2087, %2736
  br i1 %t2151252, label %then_bb309, label %next_bb310

then_bb309:                                       ; preds = %"produce resampled_input307"
  %2933 = mul nsw i64 %2932, %2737
  %2934 = add nsw i64 %2933, %2923
  br i1 %.not2226, label %"for resampled_input.s0.y.rebased314.us", label %"consume resampled_input333", !prof !392

"for resampled_input.s0.y.rebased314.us":         ; preds = %then_bb309, %"end for resampled_input.s0.x.rebased320.loopexit.us"
  %indvars.iv2077 = phi i64 [ %indvars.iv.next2078, %"end for resampled_input.s0.x.rebased320.loopexit.us" ], [ 0, %then_bb309 ]
  %2935 = add nsw i64 %indvars.iv2077, %2730
  %2936 = mul nsw i64 %2935, %2731
  %2937 = add nsw i64 %2936, %2732
  %2938 = add nsw i64 %indvars.iv2077, %2733
  %2939 = mul nsw i64 %2938, %2734
  %2940 = add nsw i64 %2934, %2939
  br i1 %2746, label %"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased319.us"

"for resampled_input.s0.x.rebased319.us":         ; preds = %"for resampled_input.s0.y.rebased314.us", %"for resampled_input.s0.x.rebased319.us"
  %indvars.iv2075 = phi i64 [ %indvars.iv.next2076.3, %"for resampled_input.s0.x.rebased319.us" ], [ 0, %"for resampled_input.s0.y.rebased314.us" ]
  %niter2434 = phi i64 [ %niter2434.nsub.3, %"for resampled_input.s0.x.rebased319.us" ], [ %unroll_iter2433, %"for resampled_input.s0.y.rebased314.us" ]
  %2941 = add nsw i64 %indvars.iv2075, %2682
  %2942 = mul nsw i64 %2941, %2683
  %2943 = add nsw i64 %2942, %2940
  %2944 = getelementptr inbounds i8, i8* %50, i64 %2943
  %2945 = bitcast i8* %2944 to <16 x i8>*
  %2946 = load <16 x i8>, <16 x i8>* %2945, align 1, !tbaa !415
  %2947 = add nsw i64 %indvars.iv2075, %2937
  %2948 = shl nsw i64 %2947, 4
  %2949 = getelementptr inbounds i8, i8* %resampled_input306, i64 %2948
  %2950 = bitcast i8* %2949 to <16 x i8>*
  store <16 x i8> %2946, <16 x i8>* %2950, align 16, !tbaa !417
  %indvars.iv.next2076 = or i64 %indvars.iv2075, 1
  %2951 = add nsw i64 %indvars.iv.next2076, %2682
  %2952 = mul nsw i64 %2951, %2683
  %2953 = add nsw i64 %2952, %2940
  %2954 = getelementptr inbounds i8, i8* %50, i64 %2953
  %2955 = bitcast i8* %2954 to <16 x i8>*
  %2956 = load <16 x i8>, <16 x i8>* %2955, align 1, !tbaa !415
  %2957 = add nsw i64 %indvars.iv.next2076, %2937
  %2958 = shl nsw i64 %2957, 4
  %2959 = getelementptr inbounds i8, i8* %resampled_input306, i64 %2958
  %2960 = bitcast i8* %2959 to <16 x i8>*
  store <16 x i8> %2956, <16 x i8>* %2960, align 16, !tbaa !417
  %indvars.iv.next2076.1 = or i64 %indvars.iv2075, 2
  %2961 = add nsw i64 %indvars.iv.next2076.1, %2682
  %2962 = mul nsw i64 %2961, %2683
  %2963 = add nsw i64 %2962, %2940
  %2964 = getelementptr inbounds i8, i8* %50, i64 %2963
  %2965 = bitcast i8* %2964 to <16 x i8>*
  %2966 = load <16 x i8>, <16 x i8>* %2965, align 1, !tbaa !415
  %2967 = add nsw i64 %indvars.iv.next2076.1, %2937
  %2968 = shl nsw i64 %2967, 4
  %2969 = getelementptr inbounds i8, i8* %resampled_input306, i64 %2968
  %2970 = bitcast i8* %2969 to <16 x i8>*
  store <16 x i8> %2966, <16 x i8>* %2970, align 16, !tbaa !417
  %indvars.iv.next2076.2 = or i64 %indvars.iv2075, 3
  %2971 = add nsw i64 %indvars.iv.next2076.2, %2682
  %2972 = mul nsw i64 %2971, %2683
  %2973 = add nsw i64 %2972, %2940
  %2974 = getelementptr inbounds i8, i8* %50, i64 %2973
  %2975 = bitcast i8* %2974 to <16 x i8>*
  %2976 = load <16 x i8>, <16 x i8>* %2975, align 1, !tbaa !415
  %2977 = add nsw i64 %indvars.iv.next2076.2, %2937
  %2978 = shl nsw i64 %2977, 4
  %2979 = getelementptr inbounds i8, i8* %resampled_input306, i64 %2978
  %2980 = bitcast i8* %2979 to <16 x i8>*
  store <16 x i8> %2976, <16 x i8>* %2980, align 16, !tbaa !417
  %indvars.iv.next2076.3 = add nuw nsw i64 %indvars.iv2075, 4
  %niter2434.nsub.3 = add i64 %niter2434, -4
  %niter2434.ncmp.3 = icmp eq i64 %niter2434.nsub.3, 0
  br i1 %niter2434.ncmp.3, label %"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased319.us"

"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa": ; preds = %"for resampled_input.s0.x.rebased319.us", %"for resampled_input.s0.y.rebased314.us"
  %indvars.iv2075.unr = phi i64 [ 0, %"for resampled_input.s0.y.rebased314.us" ], [ %indvars.iv.next2076.3, %"for resampled_input.s0.x.rebased319.us" ]
  br i1 %lcmp.mod2432.not, label %"end for resampled_input.s0.x.rebased320.loopexit.us", label %"for resampled_input.s0.x.rebased319.us.epil"

"for resampled_input.s0.x.rebased319.us.epil":    ; preds = %"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa", %"for resampled_input.s0.x.rebased319.us.epil"
  %indvars.iv2075.epil = phi i64 [ %indvars.iv.next2076.epil, %"for resampled_input.s0.x.rebased319.us.epil" ], [ %indvars.iv2075.unr, %"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa" ]
  %epil.iter2431 = phi i64 [ %epil.iter2431.sub, %"for resampled_input.s0.x.rebased319.us.epil" ], [ %xtraiter2430, %"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa" ]
  %2981 = add nsw i64 %indvars.iv2075.epil, %2682
  %2982 = mul nsw i64 %2981, %2683
  %2983 = add nsw i64 %2982, %2940
  %2984 = getelementptr inbounds i8, i8* %50, i64 %2983
  %2985 = bitcast i8* %2984 to <16 x i8>*
  %2986 = load <16 x i8>, <16 x i8>* %2985, align 1, !tbaa !415
  %2987 = add nsw i64 %indvars.iv2075.epil, %2937
  %2988 = shl nsw i64 %2987, 4
  %2989 = getelementptr inbounds i8, i8* %resampled_input306, i64 %2988
  %2990 = bitcast i8* %2989 to <16 x i8>*
  store <16 x i8> %2986, <16 x i8>* %2990, align 16, !tbaa !417
  %indvars.iv.next2076.epil = add nuw nsw i64 %indvars.iv2075.epil, 1
  %epil.iter2431.sub = add i64 %epil.iter2431, -1
  %epil.iter2431.cmp.not = icmp eq i64 %epil.iter2431.sub, 0
  br i1 %epil.iter2431.cmp.not, label %"end for resampled_input.s0.x.rebased320.loopexit.us", label %"for resampled_input.s0.x.rebased319.us.epil", !llvm.loop !482

"end for resampled_input.s0.x.rebased320.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased319.us.epil", %"end for resampled_input.s0.x.rebased320.loopexit.us.unr-lcssa"
  %indvars.iv.next2078 = add nuw nsw i64 %indvars.iv2077, 1
  %.not838.us = icmp eq i64 %indvars.iv2077, %2735
  br i1 %.not838.us, label %"consume resampled_input333", label %"for resampled_input.s0.y.rebased314.us"

next_bb310:                                       ; preds = %"produce resampled_input307"
  %2991 = trunc i64 %2932 to i32
  %2992 = mul i32 %58, %2991
  %t2201322 = sub i32 %2992, %t2152259
  br i1 %2744, label %"consume resampled_input333", label %"for resampled_input.s0.y.rebased325.preheader.split.us", !prof !420

"for resampled_input.s0.y.rebased325.preheader.split.us": ; preds = %next_bb310
  %2993 = sdiv <16 x i32> %2903, %2676
  %2994 = add nsw <16 x i32> %2993, %2904
  %2995 = and <16 x i32> %2994, %2681
  br label %"for resampled_input.s0.y.rebased325.us"

"for resampled_input.s0.y.rebased325.us":         ; preds = %"end for resampled_input.s0.x.rebased331.loopexit.us", %"for resampled_input.s0.y.rebased325.preheader.split.us"
  %indvars.iv2071 = phi i64 [ %indvars.iv.next2072, %"end for resampled_input.s0.x.rebased331.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased325.preheader.split.us" ]
  %2996 = add nsw i64 %indvars.iv2071, %2730
  %2997 = mul nsw i64 %2996, %2731
  %2998 = add nsw i64 %2997, %2732
  %2999 = trunc i64 %indvars.iv2071 to i32
  %3000 = add i32 %b122, %2999
  %3001 = mul i32 %3000, %55
  %3002 = add i32 %3001, %t2201322
  br label %"for resampled_input.s0.x.rebased330.us"

"for resampled_input.s0.x.rebased330.us":         ; preds = %"for resampled_input.s0.y.rebased325.us", %"for resampled_input.s0.x.rebased330.us"
  %indvars.iv2069 = phi i64 [ 0, %"for resampled_input.s0.y.rebased325.us" ], [ %indvars.iv.next2070, %"for resampled_input.s0.x.rebased330.us" ]
  %3003 = trunc i64 %indvars.iv2069 to i32
  %3004 = add nsw i32 %b120, %3003
  %3005 = mul nsw i32 %3004, %53
  %3006 = add nsw i32 %3002, %3005
  %3007 = insertelement <16 x i32> undef, i32 %3006, i32 0
  %3008 = shufflevector <16 x i32> %3007, <16 x i32> undef, <16 x i32> zeroinitializer
  %3009 = add nsw <16 x i32> %3008, %2995
  %3010 = extractelement <16 x i32> %3009, i32 0
  %3011 = sext i32 %3010 to i64
  %3012 = getelementptr inbounds i8, i8* %50, i64 %3011
  %3013 = load i8, i8* %3012, align 1, !tbaa !415
  %3014 = insertelement <16 x i8> undef, i8 %3013, i32 0
  %3015 = extractelement <16 x i32> %3009, i32 1
  %3016 = sext i32 %3015 to i64
  %3017 = getelementptr inbounds i8, i8* %50, i64 %3016
  %3018 = load i8, i8* %3017, align 1, !tbaa !415
  %3019 = insertelement <16 x i8> %3014, i8 %3018, i32 1
  %3020 = extractelement <16 x i32> %3009, i32 2
  %3021 = sext i32 %3020 to i64
  %3022 = getelementptr inbounds i8, i8* %50, i64 %3021
  %3023 = load i8, i8* %3022, align 1, !tbaa !415
  %3024 = insertelement <16 x i8> %3019, i8 %3023, i32 2
  %3025 = extractelement <16 x i32> %3009, i32 3
  %3026 = sext i32 %3025 to i64
  %3027 = getelementptr inbounds i8, i8* %50, i64 %3026
  %3028 = load i8, i8* %3027, align 1, !tbaa !415
  %3029 = insertelement <16 x i8> %3024, i8 %3028, i32 3
  %3030 = extractelement <16 x i32> %3009, i32 4
  %3031 = sext i32 %3030 to i64
  %3032 = getelementptr inbounds i8, i8* %50, i64 %3031
  %3033 = load i8, i8* %3032, align 1, !tbaa !415
  %3034 = insertelement <16 x i8> %3029, i8 %3033, i32 4
  %3035 = extractelement <16 x i32> %3009, i32 5
  %3036 = sext i32 %3035 to i64
  %3037 = getelementptr inbounds i8, i8* %50, i64 %3036
  %3038 = load i8, i8* %3037, align 1, !tbaa !415
  %3039 = insertelement <16 x i8> %3034, i8 %3038, i32 5
  %3040 = extractelement <16 x i32> %3009, i32 6
  %3041 = sext i32 %3040 to i64
  %3042 = getelementptr inbounds i8, i8* %50, i64 %3041
  %3043 = load i8, i8* %3042, align 1, !tbaa !415
  %3044 = insertelement <16 x i8> %3039, i8 %3043, i32 6
  %3045 = extractelement <16 x i32> %3009, i32 7
  %3046 = sext i32 %3045 to i64
  %3047 = getelementptr inbounds i8, i8* %50, i64 %3046
  %3048 = load i8, i8* %3047, align 1, !tbaa !415
  %3049 = insertelement <16 x i8> %3044, i8 %3048, i32 7
  %3050 = extractelement <16 x i32> %3009, i32 8
  %3051 = sext i32 %3050 to i64
  %3052 = getelementptr inbounds i8, i8* %50, i64 %3051
  %3053 = load i8, i8* %3052, align 1, !tbaa !415
  %3054 = insertelement <16 x i8> %3049, i8 %3053, i32 8
  %3055 = extractelement <16 x i32> %3009, i32 9
  %3056 = sext i32 %3055 to i64
  %3057 = getelementptr inbounds i8, i8* %50, i64 %3056
  %3058 = load i8, i8* %3057, align 1, !tbaa !415
  %3059 = insertelement <16 x i8> %3054, i8 %3058, i32 9
  %3060 = extractelement <16 x i32> %3009, i32 10
  %3061 = sext i32 %3060 to i64
  %3062 = getelementptr inbounds i8, i8* %50, i64 %3061
  %3063 = load i8, i8* %3062, align 1, !tbaa !415
  %3064 = insertelement <16 x i8> %3059, i8 %3063, i32 10
  %3065 = extractelement <16 x i32> %3009, i32 11
  %3066 = sext i32 %3065 to i64
  %3067 = getelementptr inbounds i8, i8* %50, i64 %3066
  %3068 = load i8, i8* %3067, align 1, !tbaa !415
  %3069 = insertelement <16 x i8> %3064, i8 %3068, i32 11
  %3070 = extractelement <16 x i32> %3009, i32 12
  %3071 = sext i32 %3070 to i64
  %3072 = getelementptr inbounds i8, i8* %50, i64 %3071
  %3073 = load i8, i8* %3072, align 1, !tbaa !415
  %3074 = insertelement <16 x i8> %3069, i8 %3073, i32 12
  %3075 = extractelement <16 x i32> %3009, i32 13
  %3076 = sext i32 %3075 to i64
  %3077 = getelementptr inbounds i8, i8* %50, i64 %3076
  %3078 = load i8, i8* %3077, align 1, !tbaa !415
  %3079 = insertelement <16 x i8> %3074, i8 %3078, i32 13
  %3080 = extractelement <16 x i32> %3009, i32 14
  %3081 = sext i32 %3080 to i64
  %3082 = getelementptr inbounds i8, i8* %50, i64 %3081
  %3083 = load i8, i8* %3082, align 1, !tbaa !415
  %3084 = insertelement <16 x i8> %3079, i8 %3083, i32 14
  %3085 = extractelement <16 x i32> %3009, i32 15
  %3086 = sext i32 %3085 to i64
  %3087 = getelementptr inbounds i8, i8* %50, i64 %3086
  %3088 = load i8, i8* %3087, align 1, !tbaa !415
  %3089 = insertelement <16 x i8> %3084, i8 %3088, i32 15
  %3090 = add nsw i64 %indvars.iv2069, %2998
  %3091 = shl nsw i64 %3090, 4
  %3092 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3091
  %3093 = bitcast i8* %3092 to <16 x i8>*
  store <16 x i8> %3089, <16 x i8>* %3093, align 16, !tbaa !417
  %indvars.iv.next2070 = add nuw nsw i64 %indvars.iv2069, 1
  %.not837.us = icmp eq i64 %indvars.iv2069, %2729
  br i1 %.not837.us, label %"end for resampled_input.s0.x.rebased331.loopexit.us", label %"for resampled_input.s0.x.rebased330.us"

"end for resampled_input.s0.x.rebased331.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased330.us"
  %indvars.iv.next2072 = add nuw nsw i64 %indvars.iv2071, 1
  %.not833.us = icmp eq i64 %indvars.iv2071, %2735
  br i1 %.not833.us, label %"consume resampled_input333", label %"for resampled_input.s0.y.rebased325.us"

"consume resampled_input333":                     ; preds = %"end for resampled_input.s0.x.rebased331.loopexit.us", %"end for resampled_input.s0.x.rebased320.loopexit.us", %next_bb310, %then_bb309
  %3094 = trunc i64 %2932 to i32
  %3095 = mul i32 %67, %3094
  %t2191300 = add i32 %3095, %output.s0.c.c.base263
  %t2212336 = sub i32 %t2191300, %reass.add1519
  br i1 %2684, label %"for output.s0.y.yo337.preheader", label %"end for output.s0.y.yo338", !prof !399

"for output.s0.y.yo337.preheader":                ; preds = %"consume resampled_input333"
  %3096 = load <8 x i32>, <8 x i32>* %2656, align 32
  %3097 = load <8 x i32>, <8 x i32>* %2658, align 32
  %3098 = shufflevector <8 x i32> %3096, <8 x i32> %3097, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"for output.s0.y.yo337"

"for output.s0.y.yo337":                          ; preds = %"for output.s0.y.yo337.preheader", %"end for output.s0.x.xo376"
  %output.s0.y.yo339 = phi i32 [ %3134, %"end for output.s0.x.xo376" ], [ 0, %"for output.s0.y.yo337.preheader" ]
  %a125 = shl nuw nsw i32 %output.s0.y.yo339, 1
  %3099 = icmp sgt i32 %b127, %a125
  %output.s0.y.y.base.s340 = select i1 %3099, i32 %a125, i32 %b127
  %t2237341 = add nsw i32 %output.s0.y.y.base.s340, %64
  %t2238342 = add nsw i32 %t2237341, 1
  %3100 = insertelement <2 x i32> poison, i32 %t2237341, i32 0
  %3101 = insertelement <2 x i32> %3100, i32 %t2238342, i32 1
  %3102 = mul nsw <2 x i32> %3101, %2748
  %3103 = add nsw <2 x i32> %3102, %2754
  %3104 = mul nsw <2 x i32> %3103, %2756
  %shuffle2270 = shufflevector <2 x i32> %3104, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3105 = add nsw <2 x i32> %3102, %2750
  %3106 = mul nsw <2 x i32> %3105, %2752
  %3107 = sub nsw <2 x i32> %3102, %2760
  %3108 = extractelement <2 x i32> %3107, i32 0
  %t2248352 = mul nsw i32 %3108, %a123
  %3109 = extractelement <2 x i32> %3107, i32 1
  %t2250354 = mul nsw i32 %3109, %a123
  br i1 %2690, label %"for output.s0.x.xo375.preheader", label %"end for output.s0.x.xo376", !prof !399

"for output.s0.x.xo375.preheader":                ; preds = %"for output.s0.y.yo337"
  %shuffle2267 = shufflevector <2 x i32> %3106, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3110 = mul nsw i32 %t2237341, %66
  %t2235374 = add nsw i32 %3110, %t2212336
  %3111 = mul nsw i32 %t2238342, %66
  %t2236373 = add nsw i32 %3111, %t2212336
  %3112 = add nsw <2 x i32> %3104, %2763
  %3113 = add nsw <4 x i32> %shuffle2267, %shuffle2268
  %t2217364 = add nsw i32 %t2248352, %2761
  %t2215363 = add nsw i32 %t2248352, %2762
  %t2218362 = add nsw i32 %t2250354, %2761
  %t2216361 = add nsw i32 %t2250354, %2762
  %3114 = extractelement <2 x i32> %3106, i32 0
  %t2220359 = sub nsw i32 %3114, %t2182294
  %3115 = sub nsw <4 x i32> %shuffle2270, %2765
  %3116 = add nsw <4 x i32> %shuffle2270, %2765
  %3117 = shufflevector <4 x i32> %3115, <4 x i32> %3116, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %3118 = extractelement <2 x i32> %3106, i32 1
  %t2221357 = sub nsw i32 %3118, %t2182294
  %t2213356 = sub nsw i32 %t2248352, %t2182294
  %t2214355 = sub nsw i32 %t2250354, %t2182294
  %3119 = sext i32 %t2213356 to i64
  %3120 = sext i32 %t2214355 to i64
  %3121 = sext i32 %t2215363 to i64
  %3122 = sext i32 %t2216361 to i64
  %3123 = sext i32 %t2217364 to i64
  %3124 = sext i32 %t2218362 to i64
  %3125 = sext i32 %t2220359 to i64
  %3126 = sext i32 %t2221357 to i64
  %3127 = sext <4 x i32> %3113 to <4 x i64>
  %shuffle2269 = shufflevector <4 x i64> %3127, <4 x i64> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %3128 = sext <4 x i32> %3117 to <4 x i64>
  %shuffle2271 = shufflevector <4 x i64> %3128, <4 x i64> poison, <8 x i32> <i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3>
  %3129 = sext <2 x i32> %3112 to <2 x i64>
  %shuffle2272 = shufflevector <2 x i64> %3129, <2 x i64> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %3130 = sext i32 %t2235374 to i64
  %3131 = sext i32 %t2236373 to i64
  br label %"for output.s0.x.xo375"

"end for output.s0.y.yo338":                      ; preds = %"end for output.s0.x.xo376", %"consume resampled_input333"
  %indvars.iv.next2088 = add nuw nsw i64 %indvars.iv2087, 1
  %3132 = icmp eq i64 %indvars.iv.next2088, %zext2090
  br i1 %3132, label %"end for output.s0.b.rebased302", label %"for output.s0.b.rebased301"

"for output.s0.x.xo375":                          ; preds = %"for output.s0.x.xo375.preheader", %"consume convolved400"
  %output.s0.x.xo377 = phi i32 [ %3718, %"consume convolved400" ], [ 0, %"for output.s0.x.xo375.preheader" ]
  %a126 = shl nuw nsw i32 %output.s0.x.xo377, 1
  %3133 = icmp sgt i32 %b128, %a126
  %output.s0.x.x.base.s378 = select i1 %3133, i32 %a126, i32 %b128
  br i1 %t2174249, label %then_bb381, label %next_bb382

"end for output.s0.x.xo376.loopexit":             ; preds = %"consume convolved400"
  store <8 x i32> %.lcssa16841700, <8 x i32>* %2691, align 32, !tbaa !421
  store <8 x i32> %.lcssa1666.us.lcssa1703, <8 x i32>* %2693, align 32, !tbaa !431
  store <8 x i32> %.lcssa16881706, <8 x i32>* %2695, align 32, !tbaa !433
  store <8 x i32> %.lcssa1670.us.lcssa1709, <8 x i32>* %2697, align 32, !tbaa !436
  store <8 x i32> %.lcssa16921712, <8 x i32>* %2699, align 32, !tbaa !438
  store <8 x i32> %.lcssa1674.us.lcssa1715, <8 x i32>* %2701, align 32, !tbaa !442
  store <8 x i32> %.lcssa16961718, <8 x i32>* %2703, align 32, !tbaa !444
  store <8 x i32> %.lcssa1678.us.lcssa1721, <8 x i32>* %2705, align 32, !tbaa !447
  br label %"end for output.s0.x.xo376"

"end for output.s0.x.xo376":                      ; preds = %"end for output.s0.x.xo376.loopexit", %"for output.s0.y.yo337"
  %3134 = add nuw nsw i32 %output.s0.y.yo339, 1
  %.not828 = icmp eq i32 %3134, %t2153253
  br i1 %.not828, label %"end for output.s0.y.yo338", label %"for output.s0.y.yo337"

then_bb381:                                       ; preds = %"for output.s0.x.xo375"
  %3135 = load <16 x i16>, <16 x i16>* %2906, align 32, !tbaa !449
  %3136 = sext <16 x i16> %3135 to <16 x i32>
  %3137 = sext i32 %output.s0.x.x.base.s378 to i64
  %3138 = add nsw i64 %3137, %2707
  %3139 = add nsw i64 %3138, 1
  %3140 = insertelement <2 x i64> poison, i64 %3138, i32 0
  %3141 = insertelement <2 x i64> %3140, i64 %3139, i32 1
  %3142 = mul nsw <2 x i64> %3141, %2767
  %shuffle = shufflevector <2 x i64> %3142, <2 x i64> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %3143 = extractelement <2 x i64> %3142, i32 0
  %3144 = add nsw i64 %3143, %3119
  %3145 = shl nsw i64 %3144, 4
  %3146 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3145
  %3147 = bitcast i8* %3146 to <16 x i8>*
  %3148 = load <16 x i8>, <16 x i8>* %3147, align 16, !tbaa !417
  %3149 = zext <16 x i8> %3148 to <16 x i32>
  %3150 = mul nsw <16 x i32> %3149, %3136
  %3151 = add nsw <16 x i32> %3150, %3098
  %3152 = extractelement <2 x i64> %3142, i32 1
  %3153 = add nsw i64 %3152, %3119
  %3154 = shl nsw i64 %3153, 4
  %3155 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3154
  %3156 = bitcast i8* %3155 to <16 x i8>*
  %3157 = load <16 x i8>, <16 x i8>* %3156, align 16, !tbaa !417
  %3158 = zext <16 x i8> %3157 to <16 x i32>
  %3159 = mul nsw <16 x i32> %3158, %3136
  %3160 = add nsw <16 x i32> %3159, %3098
  %3161 = add nsw i64 %3143, %3120
  %3162 = shl nsw i64 %3161, 4
  %3163 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3162
  %3164 = bitcast i8* %3163 to <16 x i8>*
  %3165 = load <16 x i8>, <16 x i8>* %3164, align 16, !tbaa !417
  %3166 = zext <16 x i8> %3165 to <16 x i32>
  %3167 = mul nsw <16 x i32> %3166, %3136
  %3168 = add nsw <16 x i32> %3167, %3098
  %3169 = add nsw i64 %3152, %3120
  %3170 = shl nsw i64 %3169, 4
  %3171 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3170
  %3172 = bitcast i8* %3171 to <16 x i8>*
  %3173 = load <16 x i8>, <16 x i8>* %3172, align 16, !tbaa !417
  %3174 = zext <16 x i8> %3173 to <16 x i32>
  %3175 = mul nsw <16 x i32> %3174, %3136
  %3176 = add nsw <16 x i32> %3175, %3098
  %3177 = load <16 x i16>, <16 x i16>* %2908, align 32, !tbaa !457
  %3178 = sext <16 x i16> %3177 to <16 x i32>
  %3179 = add nsw i64 %3143, %3121
  %3180 = shl nsw i64 %3179, 4
  %3181 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3180
  %3182 = bitcast i8* %3181 to <16 x i8>*
  %3183 = load <16 x i8>, <16 x i8>* %3182, align 16, !tbaa !417
  %3184 = zext <16 x i8> %3183 to <16 x i32>
  %3185 = mul nsw <16 x i32> %3184, %3178
  %3186 = add nsw <16 x i32> %3185, %3151
  %3187 = add nsw i64 %3152, %3121
  %3188 = shl nsw i64 %3187, 4
  %3189 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3188
  %3190 = bitcast i8* %3189 to <16 x i8>*
  %3191 = load <16 x i8>, <16 x i8>* %3190, align 16, !tbaa !417
  %3192 = zext <16 x i8> %3191 to <16 x i32>
  %3193 = mul nsw <16 x i32> %3192, %3178
  %3194 = add nsw <16 x i32> %3193, %3160
  %3195 = add nsw i64 %3143, %3122
  %3196 = shl nsw i64 %3195, 4
  %3197 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3196
  %3198 = bitcast i8* %3197 to <16 x i8>*
  %3199 = load <16 x i8>, <16 x i8>* %3198, align 16, !tbaa !417
  %3200 = zext <16 x i8> %3199 to <16 x i32>
  %3201 = mul nsw <16 x i32> %3200, %3178
  %3202 = add nsw <16 x i32> %3201, %3168
  %3203 = add nsw i64 %3152, %3122
  %3204 = shl nsw i64 %3203, 4
  %3205 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3204
  %3206 = bitcast i8* %3205 to <16 x i8>*
  %3207 = load <16 x i8>, <16 x i8>* %3206, align 16, !tbaa !417
  %3208 = zext <16 x i8> %3207 to <16 x i32>
  %3209 = mul nsw <16 x i32> %3208, %3178
  %3210 = add nsw <16 x i32> %3209, %3176
  %3211 = load <16 x i16>, <16 x i16>* %2910, align 32, !tbaa !459
  %3212 = sext <16 x i16> %3211 to <16 x i32>
  %3213 = add nsw i64 %3143, %3123
  %3214 = shl nsw i64 %3213, 4
  %3215 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3214
  %3216 = bitcast i8* %3215 to <16 x i8>*
  %3217 = load <16 x i8>, <16 x i8>* %3216, align 16, !tbaa !417
  %3218 = zext <16 x i8> %3217 to <16 x i32>
  %3219 = mul nsw <16 x i32> %3218, %3212
  %3220 = add nsw <16 x i32> %3219, %3186
  %3221 = add nsw i64 %3152, %3123
  %3222 = shl nsw i64 %3221, 4
  %3223 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3222
  %3224 = bitcast i8* %3223 to <16 x i8>*
  %3225 = load <16 x i8>, <16 x i8>* %3224, align 16, !tbaa !417
  %3226 = zext <16 x i8> %3225 to <16 x i32>
  %3227 = mul nsw <16 x i32> %3226, %3212
  %3228 = add nsw <16 x i32> %3227, %3194
  %3229 = add nsw i64 %3143, %3124
  %3230 = shl nsw i64 %3229, 4
  %3231 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3230
  %3232 = bitcast i8* %3231 to <16 x i8>*
  %3233 = load <16 x i8>, <16 x i8>* %3232, align 16, !tbaa !417
  %3234 = zext <16 x i8> %3233 to <16 x i32>
  %3235 = mul nsw <16 x i32> %3234, %3212
  %3236 = add nsw <16 x i32> %3235, %3202
  %3237 = add nsw i64 %3152, %3124
  %3238 = shl nsw i64 %3237, 4
  %3239 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3238
  %3240 = bitcast i8* %3239 to <16 x i8>*
  %3241 = load <16 x i8>, <16 x i8>* %3240, align 16, !tbaa !417
  %3242 = zext <16 x i8> %3241 to <16 x i32>
  %3243 = mul nsw <16 x i32> %3242, %3212
  %3244 = add nsw <16 x i32> %3243, %3210
  %3245 = load <16 x i16>, <16 x i16>* %2912, align 32, !tbaa !396
  %3246 = sext <16 x i16> %3245 to <16 x i32>
  %3247 = add nsw i64 %3143, %3125
  %3248 = shl nsw i64 %3247, 4
  %3249 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3248
  %3250 = bitcast i8* %3249 to <16 x i8>*
  %3251 = load <16 x i8>, <16 x i8>* %3250, align 16, !tbaa !417
  %3252 = zext <16 x i8> %3251 to <16 x i32>
  %3253 = mul nsw <16 x i32> %3252, %3246
  %3254 = add nsw <16 x i32> %3253, %3220
  %3255 = add nsw i64 %3152, %3125
  %3256 = shl nsw i64 %3255, 4
  %3257 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3256
  %3258 = bitcast i8* %3257 to <16 x i8>*
  %3259 = load <16 x i8>, <16 x i8>* %3258, align 16, !tbaa !417
  %3260 = zext <16 x i8> %3259 to <16 x i32>
  %3261 = mul nsw <16 x i32> %3260, %3246
  %3262 = add nsw <16 x i32> %3261, %3228
  %3263 = add nsw i64 %3143, %3126
  %3264 = shl nsw i64 %3263, 4
  %3265 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3264
  %3266 = bitcast i8* %3265 to <16 x i8>*
  %3267 = load <16 x i8>, <16 x i8>* %3266, align 16, !tbaa !417
  %3268 = zext <16 x i8> %3267 to <16 x i32>
  %3269 = mul nsw <16 x i32> %3268, %3246
  %3270 = add nsw <16 x i32> %3269, %3236
  %3271 = add nsw i64 %3152, %3126
  %3272 = shl nsw i64 %3271, 4
  %3273 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3272
  %3274 = bitcast i8* %3273 to <16 x i8>*
  %3275 = load <16 x i8>, <16 x i8>* %3274, align 16, !tbaa !417
  %3276 = zext <16 x i8> %3275 to <16 x i32>
  %3277 = mul nsw <16 x i32> %3276, %3246
  %3278 = add nsw <16 x i32> %3277, %3244
  %3279 = load <16 x i16>, <16 x i16>* %2914, align 32, !tbaa !396
  %3280 = sext <16 x i16> %3279 to <16 x i32>
  %3281 = add nsw <8 x i64> %shuffle, %shuffle2269
  %3282 = shl nsw <8 x i64> %3281, <i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4>
  %3283 = extractelement <8 x i64> %3282, i32 0
  %3284 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3283
  %3285 = bitcast i8* %3284 to <16 x i8>*
  %3286 = load <16 x i8>, <16 x i8>* %3285, align 16, !tbaa !417
  %3287 = zext <16 x i8> %3286 to <16 x i32>
  %3288 = mul nsw <16 x i32> %3287, %3280
  %3289 = add nsw <16 x i32> %3288, %3254
  %3290 = extractelement <8 x i64> %3282, i32 1
  %3291 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3290
  %3292 = bitcast i8* %3291 to <16 x i8>*
  %3293 = load <16 x i8>, <16 x i8>* %3292, align 16, !tbaa !417
  %3294 = zext <16 x i8> %3293 to <16 x i32>
  %3295 = mul nsw <16 x i32> %3294, %3280
  %3296 = add nsw <16 x i32> %3295, %3262
  %3297 = extractelement <8 x i64> %3282, i32 2
  %3298 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3297
  %3299 = bitcast i8* %3298 to <16 x i8>*
  %3300 = load <16 x i8>, <16 x i8>* %3299, align 16, !tbaa !417
  %3301 = zext <16 x i8> %3300 to <16 x i32>
  %3302 = mul nsw <16 x i32> %3301, %3280
  %3303 = add nsw <16 x i32> %3302, %3270
  %3304 = extractelement <8 x i64> %3282, i32 3
  %3305 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3304
  %3306 = bitcast i8* %3305 to <16 x i8>*
  %3307 = load <16 x i8>, <16 x i8>* %3306, align 16, !tbaa !417
  %3308 = zext <16 x i8> %3307 to <16 x i32>
  %3309 = mul nsw <16 x i32> %3308, %3280
  %3310 = add nsw <16 x i32> %3309, %3278
  %3311 = load <16 x i16>, <16 x i16>* %2916, align 32, !tbaa !396
  %3312 = sext <16 x i16> %3311 to <16 x i32>
  %3313 = extractelement <8 x i64> %3282, i32 4
  %3314 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3313
  %3315 = bitcast i8* %3314 to <16 x i8>*
  %3316 = load <16 x i8>, <16 x i8>* %3315, align 16, !tbaa !417
  %3317 = zext <16 x i8> %3316 to <16 x i32>
  %3318 = mul nsw <16 x i32> %3317, %3312
  %3319 = add nsw <16 x i32> %3318, %3289
  %3320 = extractelement <8 x i64> %3282, i32 5
  %3321 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3320
  %3322 = bitcast i8* %3321 to <16 x i8>*
  %3323 = load <16 x i8>, <16 x i8>* %3322, align 16, !tbaa !417
  %3324 = zext <16 x i8> %3323 to <16 x i32>
  %3325 = mul nsw <16 x i32> %3324, %3312
  %3326 = add nsw <16 x i32> %3325, %3296
  %3327 = extractelement <8 x i64> %3282, i32 6
  %3328 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3327
  %3329 = bitcast i8* %3328 to <16 x i8>*
  %3330 = load <16 x i8>, <16 x i8>* %3329, align 16, !tbaa !417
  %3331 = zext <16 x i8> %3330 to <16 x i32>
  %3332 = mul nsw <16 x i32> %3331, %3312
  %3333 = add nsw <16 x i32> %3332, %3303
  %3334 = extractelement <8 x i64> %3282, i32 7
  %3335 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3334
  %3336 = bitcast i8* %3335 to <16 x i8>*
  %3337 = load <16 x i8>, <16 x i8>* %3336, align 16, !tbaa !417
  %3338 = zext <16 x i8> %3337 to <16 x i32>
  %3339 = mul nsw <16 x i32> %3338, %3312
  %3340 = add nsw <16 x i32> %3339, %3310
  %3341 = load <16 x i16>, <16 x i16>* %2918, align 32, !tbaa !396
  %3342 = sext <16 x i16> %3341 to <16 x i32>
  %3343 = shufflevector <2 x i64> %3142, <2 x i64> undef, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>
  %3344 = add nsw <8 x i64> %3343, %shuffle2271
  %3345 = shl nsw <8 x i64> %3344, <i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4, i64 4>
  %3346 = extractelement <8 x i64> %3345, i32 0
  %3347 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3346
  %3348 = bitcast i8* %3347 to <16 x i8>*
  %3349 = load <16 x i8>, <16 x i8>* %3348, align 16, !tbaa !417
  %3350 = zext <16 x i8> %3349 to <16 x i32>
  %3351 = mul nsw <16 x i32> %3350, %3342
  %3352 = add nsw <16 x i32> %3351, %3319
  %3353 = extractelement <8 x i64> %3345, i32 1
  %3354 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3353
  %3355 = bitcast i8* %3354 to <16 x i8>*
  %3356 = load <16 x i8>, <16 x i8>* %3355, align 16, !tbaa !417
  %3357 = zext <16 x i8> %3356 to <16 x i32>
  %3358 = mul nsw <16 x i32> %3357, %3342
  %3359 = add nsw <16 x i32> %3358, %3326
  %3360 = extractelement <8 x i64> %3345, i32 2
  %3361 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3360
  %3362 = bitcast i8* %3361 to <16 x i8>*
  %3363 = load <16 x i8>, <16 x i8>* %3362, align 16, !tbaa !417
  %3364 = zext <16 x i8> %3363 to <16 x i32>
  %3365 = mul nsw <16 x i32> %3364, %3342
  %3366 = add nsw <16 x i32> %3365, %3333
  %3367 = extractelement <8 x i64> %3345, i32 3
  %3368 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3367
  %3369 = bitcast i8* %3368 to <16 x i8>*
  %3370 = load <16 x i8>, <16 x i8>* %3369, align 16, !tbaa !417
  %3371 = zext <16 x i8> %3370 to <16 x i32>
  %3372 = mul nsw <16 x i32> %3371, %3342
  %3373 = add nsw <16 x i32> %3372, %3340
  %3374 = load <16 x i16>, <16 x i16>* %2920, align 32, !tbaa !396
  %3375 = sext <16 x i16> %3374 to <16 x i32>
  %3376 = extractelement <8 x i64> %3345, i32 4
  %3377 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3376
  %3378 = bitcast i8* %3377 to <16 x i8>*
  %3379 = load <16 x i8>, <16 x i8>* %3378, align 16, !tbaa !417
  %3380 = zext <16 x i8> %3379 to <16 x i32>
  %3381 = mul nsw <16 x i32> %3380, %3375
  %3382 = add nsw <16 x i32> %3381, %3352
  %3383 = extractelement <8 x i64> %3345, i32 5
  %3384 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3383
  %3385 = bitcast i8* %3384 to <16 x i8>*
  %3386 = load <16 x i8>, <16 x i8>* %3385, align 16, !tbaa !417
  %3387 = zext <16 x i8> %3386 to <16 x i32>
  %3388 = mul nsw <16 x i32> %3387, %3375
  %3389 = add nsw <16 x i32> %3388, %3359
  %3390 = extractelement <8 x i64> %3345, i32 6
  %3391 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3390
  %3392 = bitcast i8* %3391 to <16 x i8>*
  %3393 = load <16 x i8>, <16 x i8>* %3392, align 16, !tbaa !417
  %3394 = zext <16 x i8> %3393 to <16 x i32>
  %3395 = mul nsw <16 x i32> %3394, %3375
  %3396 = add nsw <16 x i32> %3395, %3366
  %3397 = extractelement <8 x i64> %3345, i32 7
  %3398 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3397
  %3399 = bitcast i8* %3398 to <16 x i8>*
  %3400 = load <16 x i8>, <16 x i8>* %3399, align 16, !tbaa !417
  %3401 = zext <16 x i8> %3400 to <16 x i32>
  %3402 = mul nsw <16 x i32> %3401, %3375
  %3403 = add nsw <16 x i32> %3402, %3373
  %3404 = load <16 x i16>, <16 x i16>* %2922, align 32, !tbaa !396
  %3405 = sext <16 x i16> %3404 to <16 x i32>
  %3406 = shufflevector <2 x i64> %3142, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %3407 = add nsw <4 x i64> %3406, %shuffle2272
  %3408 = shl nsw <4 x i64> %3407, <i64 4, i64 4, i64 4, i64 4>
  %3409 = extractelement <4 x i64> %3408, i32 0
  %3410 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3409
  %3411 = bitcast i8* %3410 to <16 x i8>*
  %3412 = load <16 x i8>, <16 x i8>* %3411, align 16, !tbaa !417
  %3413 = zext <16 x i8> %3412 to <16 x i32>
  %3414 = mul nsw <16 x i32> %3413, %3405
  %3415 = add nsw <16 x i32> %3414, %3382
  %3416 = shufflevector <16 x i32> %3415, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3417 = shufflevector <16 x i32> %3415, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3418 = extractelement <4 x i64> %3408, i32 1
  %3419 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3418
  %3420 = bitcast i8* %3419 to <16 x i8>*
  %3421 = load <16 x i8>, <16 x i8>* %3420, align 16, !tbaa !417
  %3422 = zext <16 x i8> %3421 to <16 x i32>
  %3423 = mul nsw <16 x i32> %3422, %3405
  %3424 = add nsw <16 x i32> %3423, %3389
  %3425 = shufflevector <16 x i32> %3424, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3426 = shufflevector <16 x i32> %3424, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3427 = extractelement <4 x i64> %3408, i32 2
  %3428 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3427
  %3429 = bitcast i8* %3428 to <16 x i8>*
  %3430 = load <16 x i8>, <16 x i8>* %3429, align 16, !tbaa !417
  %3431 = zext <16 x i8> %3430 to <16 x i32>
  %3432 = mul nsw <16 x i32> %3431, %3405
  %3433 = add nsw <16 x i32> %3432, %3396
  %3434 = shufflevector <16 x i32> %3433, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3435 = shufflevector <16 x i32> %3433, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3436 = extractelement <4 x i64> %3408, i32 3
  %3437 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3436
  %3438 = bitcast i8* %3437 to <16 x i8>*
  %3439 = load <16 x i8>, <16 x i8>* %3438, align 16, !tbaa !417
  %3440 = zext <16 x i8> %3439 to <16 x i32>
  %3441 = mul nsw <16 x i32> %3440, %3405
  %3442 = add nsw <16 x i32> %3441, %3403
  %3443 = shufflevector <16 x i32> %3442, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3444 = shufflevector <16 x i32> %3442, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"consume convolved400"

next_bb382:                                       ; preds = %"for output.s0.x.xo375"
  %t2253383 = add nsw i32 %output.s0.x.x.base.s378, %61
  %3445 = add nsw i32 %t2253383, 1
  %3446 = insertelement <2 x i32> poison, i32 %t2253383, i32 0
  %3447 = insertelement <2 x i32> %3446, i32 %3445, i32 1
  %3448 = mul nsw <2 x i32> %3447, %2769
  %3449 = sub nsw <2 x i32> %3448, %2688
  %shuffle2274 = shufflevector <2 x i32> %3449, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  br i1 %2642, label %"for convolved.s1.r19$y386.preheader", label %"consume convolved400", !prof !399

"for convolved.s1.r19$y386.preheader":            ; preds = %next_bb382
  br i1 %2640, label %"for convolved.s1.r19$y386.us", label %"consume convolved400", !prof !399

"for convolved.s1.r19$y386.us":                   ; preds = %"for convolved.s1.r19$y386.preheader", %"end for convolved.s1.r19$x398.loopexit.us"
  %indvars.iv2083 = phi i64 [ %indvars.iv.next2084, %"end for convolved.s1.r19$x398.loopexit.us" ], [ 0, %"for convolved.s1.r19$y386.preheader" ]
  %.lcssa1678.us1698 = phi <8 x i32> [ %3519, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3097, %"for convolved.s1.r19$y386.preheader" ]
  %3450 = phi <8 x i32> [ %3523, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3096, %"for convolved.s1.r19$y386.preheader" ]
  %.lcssa1674.us1694 = phi <8 x i32> [ %3509, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3097, %"for convolved.s1.r19$y386.preheader" ]
  %3451 = phi <8 x i32> [ %3522, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3096, %"for convolved.s1.r19$y386.preheader" ]
  %.lcssa1670.us1690 = phi <8 x i32> [ %3499, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3097, %"for convolved.s1.r19$y386.preheader" ]
  %3452 = phi <8 x i32> [ %3521, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3096, %"for convolved.s1.r19$y386.preheader" ]
  %.lcssa1666.us1686 = phi <8 x i32> [ %3489, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3097, %"for convolved.s1.r19$y386.preheader" ]
  %3453 = phi <8 x i32> [ %3520, %"end for convolved.s1.r19$x398.loopexit.us" ], [ %3096, %"for convolved.s1.r19$y386.preheader" ]
  %"convolved.s1.r19$y388.us" = phi i32 [ %3524, %"end for convolved.s1.r19$x398.loopexit.us" ], [ 0, %"for convolved.s1.r19$y386.preheader" ]
  %t2259389.us = mul nsw i32 %"convolved.s1.r19$y388.us", %a186
  %3454 = insertelement <2 x i32> poison, i32 %t2259389.us, i32 0
  %3455 = shufflevector <2 x i32> %3454, <2 x i32> undef, <2 x i32> zeroinitializer
  %3456 = add nsw <2 x i32> %3455, %3107
  %3457 = mul nsw <2 x i32> %3456, %2771
  %shuffle2273 = shufflevector <2 x i32> %3457, <2 x i32> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %3458 = mul nsw i64 %indvars.iv2083, %2726
  %3459 = add nsw <4 x i32> %shuffle2273, %shuffle2274
  %3460 = sext <4 x i32> %3459 to <4 x i64>
  br label %"for convolved.s1.r19$x397.us"

"for convolved.s1.r19$x397.us":                   ; preds = %"for convolved.s1.r19$y386.us", %"for convolved.s1.r19$x397.us"
  %indvars.iv2081 = phi i64 [ 0, %"for convolved.s1.r19$y386.us" ], [ %indvars.iv.next2082, %"for convolved.s1.r19$x397.us" ]
  %3461 = phi <8 x i32> [ %.lcssa1678.us1698, %"for convolved.s1.r19$y386.us" ], [ %3519, %"for convolved.s1.r19$x397.us" ]
  %3462 = phi <8 x i32> [ %3450, %"for convolved.s1.r19$y386.us" ], [ %3518, %"for convolved.s1.r19$x397.us" ]
  %3463 = phi <8 x i32> [ %.lcssa1674.us1694, %"for convolved.s1.r19$y386.us" ], [ %3509, %"for convolved.s1.r19$x397.us" ]
  %3464 = phi <8 x i32> [ %3451, %"for convolved.s1.r19$y386.us" ], [ %3508, %"for convolved.s1.r19$x397.us" ]
  %3465 = phi <8 x i32> [ %.lcssa1670.us1690, %"for convolved.s1.r19$y386.us" ], [ %3499, %"for convolved.s1.r19$x397.us" ]
  %3466 = phi <8 x i32> [ %3452, %"for convolved.s1.r19$y386.us" ], [ %3498, %"for convolved.s1.r19$x397.us" ]
  %3467 = phi <8 x i32> [ %.lcssa1666.us1686, %"for convolved.s1.r19$y386.us" ], [ %3489, %"for convolved.s1.r19$x397.us" ]
  %3468 = phi <8 x i32> [ %3453, %"for convolved.s1.r19$y386.us" ], [ %3488, %"for convolved.s1.r19$x397.us" ]
  %3469 = shufflevector <8 x i32> %3468, <8 x i32> %3467, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3470 = add nsw i64 %indvars.iv2081, %3458
  %3471 = shl nsw i64 %3470, 4
  %3472 = getelementptr inbounds i16, i16* %filter_zeroed266, i64 %3471
  %3473 = bitcast i16* %3472 to <16 x i16>*
  %3474 = load <16 x i16>, <16 x i16>* %3473, align 32, !tbaa !396
  %3475 = sext <16 x i16> %3474 to <16 x i32>
  %3476 = mul nsw i64 %indvars.iv2081, %2706
  %3477 = insertelement <4 x i64> poison, i64 %3476, i32 0
  %3478 = shufflevector <4 x i64> %3477, <4 x i64> undef, <4 x i32> zeroinitializer
  %3479 = add nsw <4 x i64> %3478, %3460
  %3480 = shl nsw <4 x i64> %3479, <i64 4, i64 4, i64 4, i64 4>
  %3481 = extractelement <4 x i64> %3480, i32 0
  %3482 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3481
  %3483 = bitcast i8* %3482 to <16 x i8>*
  %3484 = load <16 x i8>, <16 x i8>* %3483, align 16, !tbaa !417
  %3485 = zext <16 x i8> %3484 to <16 x i32>
  %3486 = mul nsw <16 x i32> %3485, %3475
  %3487 = add nsw <16 x i32> %3486, %3469
  %3488 = shufflevector <16 x i32> %3487, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3489 = shufflevector <16 x i32> %3487, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3490 = shufflevector <8 x i32> %3466, <8 x i32> %3465, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3491 = extractelement <4 x i64> %3480, i32 1
  %3492 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3491
  %3493 = bitcast i8* %3492 to <16 x i8>*
  %3494 = load <16 x i8>, <16 x i8>* %3493, align 16, !tbaa !417
  %3495 = zext <16 x i8> %3494 to <16 x i32>
  %3496 = mul nsw <16 x i32> %3495, %3475
  %3497 = add nsw <16 x i32> %3496, %3490
  %3498 = shufflevector <16 x i32> %3497, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3499 = shufflevector <16 x i32> %3497, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3500 = shufflevector <8 x i32> %3464, <8 x i32> %3463, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3501 = extractelement <4 x i64> %3480, i32 2
  %3502 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3501
  %3503 = bitcast i8* %3502 to <16 x i8>*
  %3504 = load <16 x i8>, <16 x i8>* %3503, align 16, !tbaa !417
  %3505 = zext <16 x i8> %3504 to <16 x i32>
  %3506 = mul nsw <16 x i32> %3505, %3475
  %3507 = add nsw <16 x i32> %3506, %3500
  %3508 = shufflevector <16 x i32> %3507, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3509 = shufflevector <16 x i32> %3507, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3510 = shufflevector <8 x i32> %3462, <8 x i32> %3461, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3511 = extractelement <4 x i64> %3480, i32 3
  %3512 = getelementptr inbounds i8, i8* %resampled_input306, i64 %3511
  %3513 = bitcast i8* %3512 to <16 x i8>*
  %3514 = load <16 x i8>, <16 x i8>* %3513, align 16, !tbaa !417
  %3515 = zext <16 x i8> %3514 to <16 x i32>
  %3516 = mul nsw <16 x i32> %3515, %3475
  %3517 = add nsw <16 x i32> %3516, %3510
  %3518 = shufflevector <16 x i32> %3517, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3519 = shufflevector <16 x i32> %3517, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2082 = add nuw nsw i64 %indvars.iv2081, 1
  %.not832.us = icmp eq i64 %indvars.iv.next2082, %2725
  br i1 %.not832.us, label %"end for convolved.s1.r19$x398.loopexit.us", label %"for convolved.s1.r19$x397.us"

"end for convolved.s1.r19$x398.loopexit.us":      ; preds = %"for convolved.s1.r19$x397.us"
  %3520 = shufflevector <16 x i32> %3487, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3521 = shufflevector <16 x i32> %3497, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3522 = shufflevector <16 x i32> %3507, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3523 = shufflevector <16 x i32> %3517, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next2084 = add nuw nsw i64 %indvars.iv2083, 1
  %3524 = add nuw nsw i32 %"convolved.s1.r19$y388.us", 1
  %.not831.us = icmp eq i64 %indvars.iv.next2084, %2728
  br i1 %.not831.us, label %"consume convolved400.loopexit", label %"for convolved.s1.r19$y386.us"

"consume convolved400.loopexit":                  ; preds = %"end for convolved.s1.r19$x398.loopexit.us"
  %3525 = shufflevector <16 x i32> %3487, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3526 = shufflevector <16 x i32> %3497, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3527 = shufflevector <16 x i32> %3507, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3528 = shufflevector <16 x i32> %3517, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume convolved400"

"consume convolved400":                           ; preds = %"consume convolved400.loopexit", %"for convolved.s1.r19$y386.preheader", %next_bb382, %then_bb381
  %.lcssa1678.us.lcssa1721 = phi <8 x i32> [ %3097, %next_bb382 ], [ %3444, %then_bb381 ], [ %3097, %"for convolved.s1.r19$y386.preheader" ], [ %3519, %"consume convolved400.loopexit" ]
  %.lcssa16961718 = phi <8 x i32> [ %3096, %next_bb382 ], [ %3443, %then_bb381 ], [ %3096, %"for convolved.s1.r19$y386.preheader" ], [ %3528, %"consume convolved400.loopexit" ]
  %.lcssa1674.us.lcssa1715 = phi <8 x i32> [ %3097, %next_bb382 ], [ %3435, %then_bb381 ], [ %3097, %"for convolved.s1.r19$y386.preheader" ], [ %3509, %"consume convolved400.loopexit" ]
  %.lcssa16921712 = phi <8 x i32> [ %3096, %next_bb382 ], [ %3434, %then_bb381 ], [ %3096, %"for convolved.s1.r19$y386.preheader" ], [ %3527, %"consume convolved400.loopexit" ]
  %.lcssa1670.us.lcssa1709 = phi <8 x i32> [ %3097, %next_bb382 ], [ %3426, %then_bb381 ], [ %3097, %"for convolved.s1.r19$y386.preheader" ], [ %3499, %"consume convolved400.loopexit" ]
  %.lcssa16881706 = phi <8 x i32> [ %3096, %next_bb382 ], [ %3425, %then_bb381 ], [ %3096, %"for convolved.s1.r19$y386.preheader" ], [ %3526, %"consume convolved400.loopexit" ]
  %.lcssa1666.us.lcssa1703 = phi <8 x i32> [ %3097, %next_bb382 ], [ %3417, %then_bb381 ], [ %3097, %"for convolved.s1.r19$y386.preheader" ], [ %3489, %"consume convolved400.loopexit" ]
  %.lcssa16841700 = phi <8 x i32> [ %3096, %next_bb382 ], [ %3416, %then_bb381 ], [ %3096, %"for convolved.s1.r19$y386.preheader" ], [ %3525, %"consume convolved400.loopexit" ]
  %3529 = shufflevector <8 x i32> %.lcssa16841700, <8 x i32> %.lcssa1666.us.lcssa1703, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3530 = sext <16 x i32> %3529 to <16 x i64>
  %3531 = mul nsw <16 x i64> %3530, %2711
  %3532 = ashr <16 x i64> %3531, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3533 = add nsw <16 x i64> %3532, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a130 = ashr <16 x i64> %3533, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3534 = shufflevector <16 x i64> %a130, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3535 = icmp slt <4 x i64> %3534, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3536 = shufflevector <16 x i64> %a130, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3537 = icmp slt <4 x i64> %3536, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3538 = shufflevector <16 x i64> %a130, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3539 = icmp slt <4 x i64> %3538, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3540 = shufflevector <16 x i64> %a130, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3541 = icmp slt <4 x i64> %3540, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3542 = select <4 x i1> %3535, <4 x i64> %3534, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3543 = select <4 x i1> %3537, <4 x i64> %3536, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3544 = select <4 x i1> %3539, <4 x i64> %3538, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3545 = select <4 x i1> %3541, <4 x i64> %3540, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3546 = icmp sgt <4 x i64> %3542, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3547 = icmp sgt <4 x i64> %3543, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3548 = icmp sgt <4 x i64> %3544, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3549 = icmp sgt <4 x i64> %3545, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3550 = select <4 x i1> %3546, <4 x i64> %3542, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3551 = select <4 x i1> %3547, <4 x i64> %3543, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3552 = select <4 x i1> %3548, <4 x i64> %3544, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3553 = select <4 x i1> %3549, <4 x i64> %3545, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3554 = shufflevector <4 x i64> %3550, <4 x i64> %3551, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3555 = shufflevector <4 x i64> %3552, <4 x i64> %3553, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3556 = shufflevector <8 x i64> %3554, <8 x i64> %3555, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3557 = trunc <16 x i64> %3556 to <16 x i32>
  %3558 = ashr <16 x i32> %3557, %2713
  %3559 = lshr <16 x i32> %3557, %2717
  %3560 = and <16 x i32> %3559, %2714
  %3561 = add nsw <16 x i32> %3560, %3558
  %3562 = shufflevector <16 x i32> %3561, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3563 = shufflevector <16 x i32> %3561, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3564 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %3562, <8 x i32> %3563) #11
  %3565 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %3564, <16 x i16> %2720)
  %3566 = shufflevector <16 x i16> %3565, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3567 = shufflevector <16 x i16> %3565, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3568 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3566, <8 x i16> %3567) #11
  %3569 = icmp ugt <16 x i8> %b130, %3568
  %a127 = select <16 x i1> %3569, <16 x i8> %3568, <16 x i8> %b130
  %3570 = icmp ugt <16 x i8> %a127, %b129
  %3571 = select <16 x i1> %3570, <16 x i8> %a127, <16 x i8> %b129
  %3572 = sext i32 %output.s0.x.x.base.s378 to i64
  %3573 = add nsw i64 %3572, %2707
  %3574 = mul nsw i64 %3573, %2723
  %3575 = add nsw i64 %3574, %3130
  %3576 = getelementptr inbounds i8, i8* %59, i64 %3575
  %3577 = bitcast i8* %3576 to <16 x i8>*
  store <16 x i8> %3571, <16 x i8>* %3577, align 1, !tbaa !462
  %3578 = shufflevector <8 x i32> %.lcssa16881706, <8 x i32> %.lcssa1670.us.lcssa1709, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3579 = sext <16 x i32> %3578 to <16 x i64>
  %3580 = mul nsw <16 x i64> %3579, %2711
  %3581 = ashr <16 x i64> %3580, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3582 = add nsw <16 x i64> %3581, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a136 = ashr <16 x i64> %3582, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3583 = shufflevector <16 x i64> %a136, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3584 = icmp slt <4 x i64> %3583, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3585 = shufflevector <16 x i64> %a136, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3586 = icmp slt <4 x i64> %3585, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3587 = shufflevector <16 x i64> %a136, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3588 = icmp slt <4 x i64> %3587, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3589 = shufflevector <16 x i64> %a136, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3590 = icmp slt <4 x i64> %3589, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3591 = select <4 x i1> %3584, <4 x i64> %3583, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3592 = select <4 x i1> %3586, <4 x i64> %3585, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3593 = select <4 x i1> %3588, <4 x i64> %3587, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3594 = select <4 x i1> %3590, <4 x i64> %3589, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3595 = icmp sgt <4 x i64> %3591, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3596 = icmp sgt <4 x i64> %3592, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3597 = icmp sgt <4 x i64> %3593, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3598 = icmp sgt <4 x i64> %3594, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3599 = select <4 x i1> %3595, <4 x i64> %3591, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3600 = select <4 x i1> %3596, <4 x i64> %3592, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3601 = select <4 x i1> %3597, <4 x i64> %3593, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3602 = select <4 x i1> %3598, <4 x i64> %3594, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3603 = shufflevector <4 x i64> %3599, <4 x i64> %3600, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3604 = shufflevector <4 x i64> %3601, <4 x i64> %3602, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3605 = shufflevector <8 x i64> %3603, <8 x i64> %3604, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3606 = trunc <16 x i64> %3605 to <16 x i32>
  %3607 = ashr <16 x i32> %3606, %2713
  %3608 = lshr <16 x i32> %3606, %2717
  %3609 = and <16 x i32> %3608, %2714
  %3610 = add nsw <16 x i32> %3609, %3607
  %3611 = shufflevector <16 x i32> %3610, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3612 = shufflevector <16 x i32> %3610, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3613 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %3611, <8 x i32> %3612) #11
  %3614 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %3613, <16 x i16> %2720)
  %3615 = shufflevector <16 x i16> %3614, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3616 = shufflevector <16 x i16> %3614, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3617 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3615, <8 x i16> %3616) #11
  %3618 = icmp ugt <16 x i8> %b130, %3617
  %a133 = select <16 x i1> %3618, <16 x i8> %3617, <16 x i8> %b130
  %3619 = icmp ugt <16 x i8> %a133, %b129
  %3620 = select <16 x i1> %3619, <16 x i8> %a133, <16 x i8> %b129
  %3621 = add nsw i64 %3573, 1
  %3622 = mul nsw i64 %3621, %2723
  %3623 = add nsw i64 %3622, %3130
  %3624 = getelementptr inbounds i8, i8* %59, i64 %3623
  %3625 = bitcast i8* %3624 to <16 x i8>*
  store <16 x i8> %3620, <16 x i8>* %3625, align 1, !tbaa !462
  %3626 = shufflevector <8 x i32> %.lcssa16921712, <8 x i32> %.lcssa1674.us.lcssa1715, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3627 = sext <16 x i32> %3626 to <16 x i64>
  %3628 = mul nsw <16 x i64> %3627, %2711
  %3629 = ashr <16 x i64> %3628, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3630 = add nsw <16 x i64> %3629, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a142 = ashr <16 x i64> %3630, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3631 = shufflevector <16 x i64> %a142, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3632 = icmp slt <4 x i64> %3631, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3633 = shufflevector <16 x i64> %a142, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3634 = icmp slt <4 x i64> %3633, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3635 = shufflevector <16 x i64> %a142, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3636 = icmp slt <4 x i64> %3635, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3637 = shufflevector <16 x i64> %a142, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3638 = icmp slt <4 x i64> %3637, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3639 = select <4 x i1> %3632, <4 x i64> %3631, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3640 = select <4 x i1> %3634, <4 x i64> %3633, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3641 = select <4 x i1> %3636, <4 x i64> %3635, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3642 = select <4 x i1> %3638, <4 x i64> %3637, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3643 = icmp sgt <4 x i64> %3639, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3644 = icmp sgt <4 x i64> %3640, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3645 = icmp sgt <4 x i64> %3641, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3646 = icmp sgt <4 x i64> %3642, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3647 = select <4 x i1> %3643, <4 x i64> %3639, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3648 = select <4 x i1> %3644, <4 x i64> %3640, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3649 = select <4 x i1> %3645, <4 x i64> %3641, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3650 = select <4 x i1> %3646, <4 x i64> %3642, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3651 = shufflevector <4 x i64> %3647, <4 x i64> %3648, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3652 = shufflevector <4 x i64> %3649, <4 x i64> %3650, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3653 = shufflevector <8 x i64> %3651, <8 x i64> %3652, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3654 = trunc <16 x i64> %3653 to <16 x i32>
  %3655 = ashr <16 x i32> %3654, %2713
  %3656 = lshr <16 x i32> %3654, %2717
  %3657 = and <16 x i32> %3656, %2714
  %3658 = add nsw <16 x i32> %3657, %3655
  %3659 = shufflevector <16 x i32> %3658, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3660 = shufflevector <16 x i32> %3658, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3661 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %3659, <8 x i32> %3660) #11
  %3662 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %3661, <16 x i16> %2720)
  %3663 = shufflevector <16 x i16> %3662, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3664 = shufflevector <16 x i16> %3662, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3665 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3663, <8 x i16> %3664) #11
  %3666 = icmp ugt <16 x i8> %b130, %3665
  %a139 = select <16 x i1> %3666, <16 x i8> %3665, <16 x i8> %b130
  %3667 = icmp ugt <16 x i8> %a139, %b129
  %3668 = select <16 x i1> %3667, <16 x i8> %a139, <16 x i8> %b129
  %3669 = add nsw i64 %3574, %3131
  %3670 = getelementptr inbounds i8, i8* %59, i64 %3669
  %3671 = bitcast i8* %3670 to <16 x i8>*
  store <16 x i8> %3668, <16 x i8>* %3671, align 1, !tbaa !462
  %3672 = shufflevector <8 x i32> %.lcssa16961718, <8 x i32> %.lcssa1678.us.lcssa1721, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3673 = sext <16 x i32> %3672 to <16 x i64>
  %3674 = mul nsw <16 x i64> %3673, %2711
  %3675 = ashr <16 x i64> %3674, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3676 = add nsw <16 x i64> %3675, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a148 = ashr <16 x i64> %3676, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3677 = shufflevector <16 x i64> %a148, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3678 = icmp slt <4 x i64> %3677, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3679 = shufflevector <16 x i64> %a148, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3680 = icmp slt <4 x i64> %3679, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3681 = shufflevector <16 x i64> %a148, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %3682 = icmp slt <4 x i64> %3681, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3683 = shufflevector <16 x i64> %a148, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %3684 = icmp slt <4 x i64> %3683, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3685 = select <4 x i1> %3678, <4 x i64> %3677, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3686 = select <4 x i1> %3680, <4 x i64> %3679, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3687 = select <4 x i1> %3682, <4 x i64> %3681, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3688 = select <4 x i1> %3684, <4 x i64> %3683, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3689 = icmp sgt <4 x i64> %3685, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3690 = icmp sgt <4 x i64> %3686, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3691 = icmp sgt <4 x i64> %3687, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3692 = icmp sgt <4 x i64> %3688, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3693 = select <4 x i1> %3689, <4 x i64> %3685, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3694 = select <4 x i1> %3690, <4 x i64> %3686, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3695 = select <4 x i1> %3691, <4 x i64> %3687, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3696 = select <4 x i1> %3692, <4 x i64> %3688, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3697 = shufflevector <4 x i64> %3693, <4 x i64> %3694, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3698 = shufflevector <4 x i64> %3695, <4 x i64> %3696, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3699 = shufflevector <8 x i64> %3697, <8 x i64> %3698, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3700 = trunc <16 x i64> %3699 to <16 x i32>
  %3701 = ashr <16 x i32> %3700, %2713
  %3702 = lshr <16 x i32> %3700, %2717
  %3703 = and <16 x i32> %3702, %2714
  %3704 = add nsw <16 x i32> %3703, %3701
  %3705 = shufflevector <16 x i32> %3704, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %3706 = shufflevector <16 x i32> %3704, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %3707 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %3705, <8 x i32> %3706) #11
  %3708 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %3707, <16 x i16> %2720)
  %3709 = shufflevector <16 x i16> %3708, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3710 = shufflevector <16 x i16> %3708, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3711 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3709, <8 x i16> %3710) #11
  %3712 = icmp ugt <16 x i8> %b130, %3711
  %a145 = select <16 x i1> %3712, <16 x i8> %3711, <16 x i8> %b130
  %3713 = icmp ugt <16 x i8> %a145, %b129
  %3714 = select <16 x i1> %3713, <16 x i8> %a145, <16 x i8> %b129
  %3715 = add nsw i64 %3622, %3131
  %3716 = getelementptr inbounds i8, i8* %59, i64 %3715
  %3717 = bitcast i8* %3716 to <16 x i8>*
  store <16 x i8> %3714, <16 x i8>* %3717, align 1, !tbaa !462
  %3718 = add nuw nsw i32 %output.s0.x.xo377, 1
  %.not830 = icmp eq i32 %3718, %t2154254
  br i1 %.not830, label %"end for output.s0.x.xo376.loopexit", label %"for output.s0.x.xo375"

then_bb401:                                       ; preds = %next_bb232
  %t2287403 = icmp slt i32 %a187, 0
  %3719 = add nsw i32 %46, -1
  %t2288404 = mul nsw i32 %3719, %a187
  %t2289405 = icmp slt i32 %stride_x, 0
  %t2290406 = select i1 %t2287403, i32 %t2288404, i32 0
  %3720 = select i1 %t2289405, i32 %62, i32 1
  %3721 = add i32 %61, -1
  %3722 = add i32 %3721, %3720
  %t2291407 = mul nsw i32 %3722, %stride_x
  %t2292408 = icmp slt i32 %a186, 0
  %3723 = add nsw i32 %48, -1
  %t2293409 = mul nsw i32 %3723, %a186
  %t2294410 = icmp slt i32 %stride_y, 0
  %t2295411 = select i1 %t2292408, i32 %t2293409, i32 0
  %3724 = select i1 %t2294410, i32 %65, i32 1
  %3725 = add i32 %64, -1
  %3726 = add i32 %3725, %3724
  %t2296412 = mul nsw i32 %3726, %stride_y
  %3727 = icmp eq i32 %46, 3
  %3728 = icmp eq i32 %48, 3
  %t2297413 = and i1 %3727, %3728
  %a187.op798 = shl i32 %a187, 1
  %t2298414 = select i1 %t2287403, i32 %a187.op798, i32 0
  %a186.op799 = shl i32 %a186, 1
  %t2299415 = select i1 %t2292408, i32 %a186.op799, i32 0
  %t2282416 = icmp eq i32 %depth_multiplier, 1
  %3729 = add nuw nsw i32 %45, 15
  %t2262417 = ashr i32 %3729, 4
  %3730 = icmp sgt i32 %a186, 0
  %3731 = select i1 %3730, i32 %a186, i32 0
  %t2274418 = shl nuw nsw i32 %3731, 1
  %3732 = icmp sgt i32 %a187, 0
  %3733 = select i1 %3732, i32 %a187, i32 0
  %t2280419 = shl nuw nsw i32 %3733, 1
  %3734 = select i1 %t2297413, i32 %t2299415, i32 %t2295411
  %b165 = add nsw i32 %t2296412, %3734
  %3735 = select i1 %t2297413, i32 %t2298414, i32 %t2290406
  %b164 = add nsw i32 %t2291407, %3735
  %b169 = add nsw i32 %t2296412, %t2295411
  %3736 = select i1 %t2292408, i32 0, i32 %t2293409
  %3737 = add nsw i32 %65, -1
  %3738 = select i1 %t2294410, i32 0, i32 %3737
  %3739 = add nsw i32 %3738, %64
  %3740 = mul nsw i32 %3739, %stride_y
  %b168 = add nsw i32 %3740, %3736
  %b167 = add nsw i32 %t2291407, %t2290406
  %3741 = select i1 %t2287403, i32 0, i32 %t2288404
  %3742 = add nsw i32 %62, -1
  %3743 = select i1 %t2289405, i32 0, i32 %3742
  %3744 = add nsw i32 %3743, %61
  %3745 = mul nsw i32 %3744, %stride_x
  %b166 = add nsw i32 %3745, %3741
  %3746 = mul nsw i32 %55, %54
  %3747 = mul nsw i32 %58, %56
  %3748 = mul nsw i32 %53, %52
  %3749 = add i32 %3746, %3748
  %t2283421 = add i32 %3749, %3747
  %b159 = add nsw i32 %45, -16
  %3750 = icmp sgt i32 %46, 0
  %3751 = select i1 %3750, i32 %46, i32 0
  %t2502 = zext i32 %3751 to i64
  %3752 = icmp sgt i32 %48, 0
  %3753 = select i1 %3752, i32 %48, i32 0
  %t2503 = zext i32 %3753 to i64
  %3754 = shl nuw nsw i64 %t2502, 5
  %3755 = mul i64 %3754, %t2503
  %3756 = or i64 %3755, 6
  %3757 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  %3758 = bitcast [64 x i32]* %offset_c545774 to <8 x i32>*
  %3759 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 8
  %3760 = bitcast i32* %3759 to <8 x i32>*
  %3761 = sext i32 %47 to i64
  %3762 = insertelement <16 x i8> undef, i8 %filter_zero, i32 0
  %3763 = shufflevector <16 x i8> %3762, <16 x i8> undef, <16 x i32> zeroinitializer
  %3764 = zext <16 x i8> %3763 to <16 x i16>
  %3765 = bitcast i8* %42 to i32*
  %3766 = zext i8 %input_zero to i32
  %3767 = insertelement <16 x i32> undef, i32 %3766, i32 0
  %3768 = shufflevector <16 x i32> %3767, <16 x i32> undef, <16 x i32> zeroinitializer
  %3769 = icmp sgt i32 %3735, %t2290406
  %t2305451 = select i1 %3769, i32 %b167, i32 %b164
  %3770 = icmp sgt i32 %3734, %t2295411
  %t2303452 = select i1 %3770, i32 %b169, i32 %b165
  %3771 = select i1 %t2297413, i32 %t2280419, i32 %3741
  %a164 = add nsw i32 %3745, %3771
  %3772 = icmp sgt i32 %3771, %3741
  %3773 = select i1 %3772, i32 %a164, i32 %b166
  %t2306453 = sub nsw i32 %3773, %t2305451
  %3774 = select i1 %t2297413, i32 %t2274418, i32 %3736
  %a166 = add nsw i32 %3740, %3774
  %3775 = icmp sgt i32 %3774, %3736
  %3776 = select i1 %3775, i32 %a166, i32 %b168
  %t2304454 = sub nsw i32 %3776, %t2303452
  %t2308455 = sub nsw i32 %b166, %b167
  %t2307456 = sub nsw i32 %b168, %b169
  %.neg1507 = mul i32 %66, %64
  %.neg1508 = mul i32 %63, %61
  %.neg1509 = mul i32 %67, %56
  %3777 = icmp sgt i32 %57, 0
  %a171 = add nsw i32 %t2304454, 1
  %a170 = add nsw i32 %t2306453, 1
  %.inv802 = icmp slt i32 %t2306453, 0
  %3778 = select i1 %.inv802, i32 0, i32 %a170
  %t2504 = zext i32 %3778 to i64
  %.inv803 = icmp slt i32 %t2304454, 0
  %3779 = select i1 %.inv803, i32 0, i32 %a171
  %t2505 = zext i32 %3779 to i64
  %t2506 = shl nuw nsw i64 %t2504, 4
  %3780 = mul i64 %t2506, %t2505
  %3781 = or i64 %3780, 3
  %3782 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2321480 = sub i32 %b167, %t2305451
  %t2322481 = sub i32 %b169, %t2303452
  %3783 = icmp eq i32 %depth_multiplier, 0
  %t2509 = select i1 %3783, <16 x i32> <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>, <16 x i32> zeroinitializer
  %depth_multiplier.lobit = ashr i32 %depth_multiplier, 31
  %3784 = insertelement <16 x i32> undef, i32 %depth_multiplier, i32 0
  %3785 = shufflevector <16 x i32> %3784, <16 x i32> undef, <16 x i32> zeroinitializer
  %3786 = sub nsw <16 x i32> %3785, %t2509
  %3787 = xor i32 %depth_multiplier.lobit, -1
  %3788 = sub nsw i32 %3787, %depth_multiplier.lobit
  %3789 = insertelement <16 x i32> undef, i32 %3788, i32 0
  %3790 = shufflevector <16 x i32> %3789, <16 x i32> undef, <16 x i32> zeroinitializer
  %3791 = xor <16 x i32> %t2509, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %3792 = sext i32 %b167 to i64
  %3793 = sext i32 %53 to i64
  %t2330491 = sub i32 %a186.op799, %t2303452
  %t2326492 = sub nsw i32 %a187.op798, %t2305451
  %3794 = icmp sgt i32 %65, 0
  %t2348500 = sub nsw i32 %a187, %t2305451
  %3795 = sub i32 %a186, %t2303452
  %reass.add1511 = add i32 %.neg1507, %.neg1508
  %reass.add1512 = add i32 %reass.add1511, %.neg1509
  %3796 = icmp sgt i32 %62, 0
  %3797 = bitcast [16 x i32]* %sum_filter776 to <8 x i32>*
  %3798 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter776, i64 0, i64 8
  %3799 = bitcast i32* %3798 to <8 x i32>*
  %3800 = sext i32 %a187 to i64
  %3801 = sext i32 %61 to i64
  %3802 = sext i32 %stride_x to i64
  %3803 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %3804 = shufflevector <16 x i32> %3803, <16 x i32> undef, <16 x i32> zeroinitializer
  %3805 = sext <16 x i32> %3804 to <16 x i64>
  %3806 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %3807 = shufflevector <16 x i32> %3806, <16 x i32> undef, <16 x i32> zeroinitializer
  %.not807 = icmp eq i32 %output_shift, 0
  %3808 = select i1 %.not807, <16 x i32> zeroinitializer, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %3809 = add i32 %output_shift, -1
  %3810 = insertelement <16 x i32> undef, i32 %3809, i32 0
  %3811 = shufflevector <16 x i32> %3810, <16 x i32> undef, <16 x i32> zeroinitializer
  %3812 = zext i8 %output_zero to i16
  %3813 = insertelement <16 x i16> undef, i16 %3812, i32 0
  %3814 = shufflevector <16 x i16> %3813, <16 x i16> undef, <16 x i32> zeroinitializer
  %3815 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b175 = shufflevector <16 x i8> %3815, <16 x i8> undef, <16 x i32> zeroinitializer
  %3816 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b174 = shufflevector <16 x i8> %3816, <16 x i8> undef, <16 x i32> zeroinitializer
  %3817 = sext i32 %63 to i64
  %3818 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8*
  %3819 = zext i32 %46 to i64
  %3820 = sext i32 %46 to i64
  %3821 = sext i32 %49 to i64
  %3822 = zext i32 %48 to i64
  %3823 = zext i32 %t2308455 to i64
  %3824 = sext i32 %t2322481 to i64
  %3825 = sext i32 %a170 to i64
  %3826 = sext i32 %t2321480 to i64
  %3827 = sext i32 %b169 to i64
  %3828 = sext i32 %55 to i64
  %3829 = zext i32 %t2307456 to i64
  %3830 = zext i32 %62 to i64
  %3831 = sext i32 %64 to i64
  %3832 = sext i32 %stride_y to i64
  %3833 = sext i32 %t2330491 to i64
  %3834 = sext i32 %t2305451 to i64
  %3835 = sext i32 %3795 to i64
  %3836 = sext i32 %t2303452 to i64
  %3837 = zext i32 %65 to i64
  %3838 = sext i32 %56 to i64
  %3839 = sext i32 %58 to i64
  %3840 = bitcast [64 x i32]* %offset_c545774 to i8*
  %3841 = bitcast [64 x i32]* %offset_c545774 to i8*
  %3842 = bitcast [64 x i32]* %offset_c545774 to i8*
  %zext2057 = zext i32 %57 to i64
  %3843 = add nsw i64 %3819, -1
  %3844 = add nsw i64 %3819, -1
  %3845 = add nuw nsw i64 %3823, 1
  %xtraiter2393 = and i64 %3819, 3
  %3846 = icmp ult i64 %3843, 3
  %unroll_iter2396 = and i64 %3819, 4294967292
  %lcmp.mod2395.not = icmp eq i64 %xtraiter2393, 0
  %xtraiter2398 = and i64 %3819, 3
  %3847 = icmp ult i64 %3844, 3
  %unroll_iter2405 = and i64 %3819, 4294967292
  %lcmp.mod2402.not = icmp eq i64 %xtraiter2398, 0
  %3848 = or i32 %t2307456, %t2308455
  %3849 = icmp slt i32 %3848, 0
  %3850 = or i32 %t2307456, %t2308455
  %.not2225 = icmp sgt i32 %3850, -1
  %xtraiter2407 = and i64 %3845, 3
  %3851 = icmp ult i32 %t2308455, 3
  %unroll_iter2410 = and i64 %3845, 8589934588
  %lcmp.mod2409.not = icmp eq i64 %xtraiter2407, 0
  %brmerge2211.demorgan = and i1 %3752, %3750
  %xtraiter2412 = and i64 %3819, 1
  %3852 = icmp eq i32 %46, 1
  %unroll_iter2416 = and i64 %3819, 4294967294
  %lcmp.mod2415.not = icmp eq i64 %xtraiter2412, 0
  br label %"for output.s0.c.co422"

next_bb402:                                       ; preds = %next_bb232
  %3853 = icmp sgt i32 %45, 0
  br i1 %3853, label %then_bb531, label %after_bb230

"for output.s0.c.co422":                          ; preds = %then_bb401, %"end for output.s0.b.rebased459"
  %.8 = phi i8* [ %.01291, %then_bb401 ], [ %.9, %"end for output.s0.b.rebased459" ]
  %output.s0.c.co424 = phi i32 [ 0, %then_bb401 ], [ %4018, %"end for output.s0.b.rebased459" ]
  %a157 = shl nsw i32 %output.s0.c.co424, 4
  %3854 = icmp sgt i32 %b159, %a157
  %output.s0.c.c.base425 = select i1 %3854, i32 %a157, i32 %b159
  %3855 = load i64, i64* %.fca.1.gep, align 8, !tbaa !386
  %cmp.i1182 = icmp ult i64 %3855, %3756
  %3856 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !388
  br i1 %cmp.i1182, label %if.then.i1185, label %pseudostack_alloc.exit1198, !prof !389

if.then.i1185:                                    ; preds = %"for output.s0.c.co422"
  %tobool1.not.i1184 = icmp ne i8* %3856, null
  %3857 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1187 = icmp ugt i64 %3857, 16384
  %or.cond1464 = and i1 %tobool1.not.i1184, %cmp2.i1187
  br i1 %or.cond1464, label %if.then3.i1189, label %if.end.i1193

if.then3.i1189:                                   ; preds = %if.then.i1185
  call void @halide_free(i8* null, i8* nonnull %3856) #17
  %.pre2097 = load i64, i64* %.fca.2.gep, align 8, !tbaa !390
  br label %if.end.i1193

if.end.i1193:                                     ; preds = %if.then3.i1189, %if.then.i1185
  %3858 = phi i64 [ %.pre2097, %if.then3.i1189 ], [ %3857, %if.then.i1185 ]
  %add.i1191 = add i64 %3858, %3756
  store i64 %add.i1191, i64* %.fca.2.gep, align 8, !tbaa !390
  %cmp7.i1192 = icmp ugt i64 %add.i1191, 16384
  br i1 %cmp7.i1192, label %if.then8.i1195, label %if.end11.i1197

if.then8.i1195:                                   ; preds = %if.end.i1193
  %call.i1194 = call i8* @halide_malloc(i8* null, i64 %3756) #17
  br label %if.end11.i1197

if.end11.i1197:                                   ; preds = %if.then8.i1195, %if.end.i1193
  %storemerge.i1196 = phi i8* [ %call.i1194, %if.then8.i1195 ], [ null, %if.end.i1193 ]
  store i8* %storemerge.i1196, i8** %.fca.0.gep, align 8, !tbaa !388
  store i64 %3756, i64* %.fca.1.gep, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1198

pseudostack_alloc.exit1198:                       ; preds = %"for output.s0.c.co422", %if.end11.i1197
  %3859 = phi i8* [ %storemerge.i1196, %if.end11.i1197 ], [ %3856, %"for output.s0.c.co422" ]
  %3860 = bitcast i8* %3859 to i16*
  %.not800 = icmp eq i8* %3859, null
  br i1 %.not800, label %then_bb427, label %"produce filter_zeroed429", !prof !391

then_bb427:                                       ; preds = %pseudostack_alloc.exit1198
  %3861 = alloca i8*, i64 %3756, align 32
  %3862 = bitcast i8** %3861 to i16*
  store i8** %3861, i8*** %3757, align 8
  br label %"produce filter_zeroed429"

"produce filter_zeroed429":                       ; preds = %pseudostack_alloc.exit1198, %then_bb427
  %filter_zeroed428 = phi i16* [ %3862, %then_bb427 ], [ %3860, %pseudostack_alloc.exit1198 ]
  br i1 %3752, label %"for filter_zeroed.s0.y430.preheader", label %"produce sum_filter440.thread", !prof !399

"for filter_zeroed.s0.y430.preheader":            ; preds = %"produce filter_zeroed429"
  br i1 %3750, label %"for filter_zeroed.s0.y430.us.preheader", label %"for sum_filter.s1.r19$y441.preheader.thread", !prof !399

"for sum_filter.s1.r19$y441.preheader.thread":    ; preds = %"for filter_zeroed.s0.y430.preheader"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 dereferenceable(64) %3841, i8 0, i64 64, i1 false)
  br label %"consume sum_filter448"

"for filter_zeroed.s0.y430.us.preheader":         ; preds = %"for filter_zeroed.s0.y430.preheader"
  %3863 = sext i32 %output.s0.c.c.base425 to i64
  br label %"for filter_zeroed.s0.y430.us"

"for filter_zeroed.s0.y430.us":                   ; preds = %"for filter_zeroed.s0.y430.us.preheader", %"end for filter_zeroed.s0.x436.loopexit.us"
  %indvars.iv2009 = phi i64 [ 0, %"for filter_zeroed.s0.y430.us.preheader" ], [ %indvars.iv.next2010, %"end for filter_zeroed.s0.x436.loopexit.us" ]
  %3864 = mul nsw i64 %indvars.iv2009, %3820
  %3865 = mul nsw i64 %indvars.iv2009, %3821
  %3866 = add nsw i64 %3865, %3863
  br i1 %3846, label %"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x435.us"

"for filter_zeroed.s0.x435.us":                   ; preds = %"for filter_zeroed.s0.y430.us", %"for filter_zeroed.s0.x435.us"
  %indvars.iv2007 = phi i64 [ %indvars.iv.next2008.3, %"for filter_zeroed.s0.x435.us" ], [ 0, %"for filter_zeroed.s0.y430.us" ]
  %niter2397 = phi i64 [ %niter2397.nsub.3, %"for filter_zeroed.s0.x435.us" ], [ %unroll_iter2396, %"for filter_zeroed.s0.y430.us" ]
  %3867 = mul nsw i64 %indvars.iv2007, %3761
  %3868 = add nsw i64 %3867, %3866
  %3869 = getelementptr inbounds i8, i8* %43, i64 %3868
  %3870 = bitcast i8* %3869 to <16 x i8>*
  %3871 = load <16 x i8>, <16 x i8>* %3870, align 1, !tbaa !393
  %3872 = zext <16 x i8> %3871 to <16 x i16>
  %3873 = sub nsw <16 x i16> %3872, %3764
  %3874 = add nsw i64 %indvars.iv2007, %3864
  %3875 = shl nsw i64 %3874, 4
  %3876 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3875
  %3877 = bitcast i16* %3876 to <16 x i16>*
  store <16 x i16> %3873, <16 x i16>* %3877, align 32, !tbaa !396
  %indvars.iv.next2008 = or i64 %indvars.iv2007, 1
  %3878 = mul nsw i64 %indvars.iv.next2008, %3761
  %3879 = add nsw i64 %3878, %3866
  %3880 = getelementptr inbounds i8, i8* %43, i64 %3879
  %3881 = bitcast i8* %3880 to <16 x i8>*
  %3882 = load <16 x i8>, <16 x i8>* %3881, align 1, !tbaa !393
  %3883 = zext <16 x i8> %3882 to <16 x i16>
  %3884 = sub nsw <16 x i16> %3883, %3764
  %3885 = add nsw i64 %indvars.iv.next2008, %3864
  %3886 = shl nsw i64 %3885, 4
  %3887 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3886
  %3888 = bitcast i16* %3887 to <16 x i16>*
  store <16 x i16> %3884, <16 x i16>* %3888, align 32, !tbaa !396
  %indvars.iv.next2008.1 = or i64 %indvars.iv2007, 2
  %3889 = mul nsw i64 %indvars.iv.next2008.1, %3761
  %3890 = add nsw i64 %3889, %3866
  %3891 = getelementptr inbounds i8, i8* %43, i64 %3890
  %3892 = bitcast i8* %3891 to <16 x i8>*
  %3893 = load <16 x i8>, <16 x i8>* %3892, align 1, !tbaa !393
  %3894 = zext <16 x i8> %3893 to <16 x i16>
  %3895 = sub nsw <16 x i16> %3894, %3764
  %3896 = add nsw i64 %indvars.iv.next2008.1, %3864
  %3897 = shl nsw i64 %3896, 4
  %3898 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3897
  %3899 = bitcast i16* %3898 to <16 x i16>*
  store <16 x i16> %3895, <16 x i16>* %3899, align 32, !tbaa !396
  %indvars.iv.next2008.2 = or i64 %indvars.iv2007, 3
  %3900 = mul nsw i64 %indvars.iv.next2008.2, %3761
  %3901 = add nsw i64 %3900, %3866
  %3902 = getelementptr inbounds i8, i8* %43, i64 %3901
  %3903 = bitcast i8* %3902 to <16 x i8>*
  %3904 = load <16 x i8>, <16 x i8>* %3903, align 1, !tbaa !393
  %3905 = zext <16 x i8> %3904 to <16 x i16>
  %3906 = sub nsw <16 x i16> %3905, %3764
  %3907 = add nsw i64 %indvars.iv.next2008.2, %3864
  %3908 = shl nsw i64 %3907, 4
  %3909 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3908
  %3910 = bitcast i16* %3909 to <16 x i16>*
  store <16 x i16> %3906, <16 x i16>* %3910, align 32, !tbaa !396
  %indvars.iv.next2008.3 = add nuw nsw i64 %indvars.iv2007, 4
  %niter2397.nsub.3 = add i64 %niter2397, -4
  %niter2397.ncmp.3 = icmp eq i64 %niter2397.nsub.3, 0
  br i1 %niter2397.ncmp.3, label %"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x435.us"

"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x435.us", %"for filter_zeroed.s0.y430.us"
  %indvars.iv2007.unr = phi i64 [ 0, %"for filter_zeroed.s0.y430.us" ], [ %indvars.iv.next2008.3, %"for filter_zeroed.s0.x435.us" ]
  br i1 %lcmp.mod2395.not, label %"end for filter_zeroed.s0.x436.loopexit.us", label %"for filter_zeroed.s0.x435.us.epil"

"for filter_zeroed.s0.x435.us.epil":              ; preds = %"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x435.us.epil"
  %indvars.iv2007.epil = phi i64 [ %indvars.iv.next2008.epil, %"for filter_zeroed.s0.x435.us.epil" ], [ %indvars.iv2007.unr, %"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa" ]
  %epil.iter2394 = phi i64 [ %epil.iter2394.sub, %"for filter_zeroed.s0.x435.us.epil" ], [ %xtraiter2393, %"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa" ]
  %3911 = mul nsw i64 %indvars.iv2007.epil, %3761
  %3912 = add nsw i64 %3911, %3866
  %3913 = getelementptr inbounds i8, i8* %43, i64 %3912
  %3914 = bitcast i8* %3913 to <16 x i8>*
  %3915 = load <16 x i8>, <16 x i8>* %3914, align 1, !tbaa !393
  %3916 = zext <16 x i8> %3915 to <16 x i16>
  %3917 = sub nsw <16 x i16> %3916, %3764
  %3918 = add nsw i64 %indvars.iv2007.epil, %3864
  %3919 = shl nsw i64 %3918, 4
  %3920 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3919
  %3921 = bitcast i16* %3920 to <16 x i16>*
  store <16 x i16> %3917, <16 x i16>* %3921, align 32, !tbaa !396
  %indvars.iv.next2008.epil = add nuw nsw i64 %indvars.iv2007.epil, 1
  %epil.iter2394.sub = add i64 %epil.iter2394, -1
  %epil.iter2394.cmp.not = icmp eq i64 %epil.iter2394.sub, 0
  br i1 %epil.iter2394.cmp.not, label %"end for filter_zeroed.s0.x436.loopexit.us", label %"for filter_zeroed.s0.x435.us.epil", !llvm.loop !483

"end for filter_zeroed.s0.x436.loopexit.us":      ; preds = %"for filter_zeroed.s0.x435.us.epil", %"end for filter_zeroed.s0.x436.loopexit.us.unr-lcssa"
  %indvars.iv.next2010 = add nuw nsw i64 %indvars.iv2009, 1
  %.not818.us = icmp eq i64 %indvars.iv.next2010, %3822
  br i1 %.not818.us, label %"for sum_filter.s1.r19$y441.preheader", label %"for filter_zeroed.s0.y430.us"

"produce sum_filter440.thread":                   ; preds = %"produce filter_zeroed429"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 dereferenceable(64) %3840, i8 0, i64 64, i1 false)
  br label %"consume sum_filter448"

"for sum_filter.s1.r19$y441.preheader":           ; preds = %"end for filter_zeroed.s0.x436.loopexit.us"
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 dereferenceable(64) %3842, i8 0, i64 64, i1 false)
  br i1 %3750, label %"for sum_filter.s1.r19$y441.us", label %"consume sum_filter448", !prof !399

"for sum_filter.s1.r19$y441.us":                  ; preds = %"for sum_filter.s1.r19$y441.preheader", %"end for sum_filter.s1.r19$x446.loopexit.us"
  %indvars.iv2015 = phi i64 [ %indvars.iv.next2016, %"end for sum_filter.s1.r19$x446.loopexit.us" ], [ 0, %"for sum_filter.s1.r19$y441.preheader" ]
  %.lcssa1640.us1645 = phi <8 x i32> [ %.lcssa2295, %"end for sum_filter.s1.r19$x446.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y441.preheader" ]
  %3922 = phi <8 x i32> [ %3970, %"end for sum_filter.s1.r19$x446.loopexit.us" ], [ zeroinitializer, %"for sum_filter.s1.r19$y441.preheader" ]
  %3923 = mul nsw i64 %indvars.iv2015, %3820
  br i1 %3847, label %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x445.us"

"for sum_filter.s1.r19$x445.us":                  ; preds = %"for sum_filter.s1.r19$y441.us", %"for sum_filter.s1.r19$x445.us"
  %indvars.iv2013 = phi i64 [ %indvars.iv.next2014.3, %"for sum_filter.s1.r19$x445.us" ], [ 0, %"for sum_filter.s1.r19$y441.us" ]
  %3924 = phi <8 x i32> [ %3956, %"for sum_filter.s1.r19$x445.us" ], [ %.lcssa1640.us1645, %"for sum_filter.s1.r19$y441.us" ]
  %3925 = phi <8 x i32> [ %3955, %"for sum_filter.s1.r19$x445.us" ], [ %3922, %"for sum_filter.s1.r19$y441.us" ]
  %niter2406 = phi i64 [ %niter2406.nsub.3, %"for sum_filter.s1.r19$x445.us" ], [ %unroll_iter2405, %"for sum_filter.s1.r19$y441.us" ]
  %3926 = shufflevector <8 x i32> %3925, <8 x i32> %3924, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3927 = add nsw i64 %indvars.iv2013, %3923
  %3928 = shl nsw i64 %3927, 4
  %3929 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3928
  %3930 = bitcast i16* %3929 to <16 x i16>*
  %3931 = load <16 x i16>, <16 x i16>* %3930, align 32, !tbaa !396
  %3932 = sext <16 x i16> %3931 to <16 x i32>
  %3933 = add nsw <16 x i32> %3926, %3932
  %indvars.iv.next2014 = or i64 %indvars.iv2013, 1
  %3934 = add nsw i64 %indvars.iv.next2014, %3923
  %3935 = shl nsw i64 %3934, 4
  %3936 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3935
  %3937 = bitcast i16* %3936 to <16 x i16>*
  %3938 = load <16 x i16>, <16 x i16>* %3937, align 32, !tbaa !396
  %3939 = sext <16 x i16> %3938 to <16 x i32>
  %3940 = add nsw <16 x i32> %3933, %3939
  %indvars.iv.next2014.1 = or i64 %indvars.iv2013, 2
  %3941 = add nsw i64 %indvars.iv.next2014.1, %3923
  %3942 = shl nsw i64 %3941, 4
  %3943 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3942
  %3944 = bitcast i16* %3943 to <16 x i16>*
  %3945 = load <16 x i16>, <16 x i16>* %3944, align 32, !tbaa !396
  %3946 = sext <16 x i16> %3945 to <16 x i32>
  %3947 = add nsw <16 x i32> %3940, %3946
  %indvars.iv.next2014.2 = or i64 %indvars.iv2013, 3
  %3948 = add nsw i64 %indvars.iv.next2014.2, %3923
  %3949 = shl nsw i64 %3948, 4
  %3950 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3949
  %3951 = bitcast i16* %3950 to <16 x i16>*
  %3952 = load <16 x i16>, <16 x i16>* %3951, align 32, !tbaa !396
  %3953 = sext <16 x i16> %3952 to <16 x i32>
  %3954 = add nsw <16 x i32> %3947, %3953
  %3955 = shufflevector <16 x i32> %3954, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3956 = shufflevector <16 x i32> %3954, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2014.3 = add nuw nsw i64 %indvars.iv2013, 4
  %niter2406.nsub.3 = add i64 %niter2406, -4
  %niter2406.ncmp.3 = icmp eq i64 %niter2406.nsub.3, 0
  br i1 %niter2406.ncmp.3, label %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit", label %"for sum_filter.s1.r19$x445.us"

"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit": ; preds = %"for sum_filter.s1.r19$x445.us"
  %3957 = shufflevector <16 x i32> %3954, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa"

"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa": ; preds = %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit", %"for sum_filter.s1.r19$y441.us"
  %.lcssa2296.ph = phi <16 x i32> [ undef, %"for sum_filter.s1.r19$y441.us" ], [ %3954, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2295.ph = phi <8 x i32> [ undef, %"for sum_filter.s1.r19$y441.us" ], [ %3956, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv2013.unr = phi i64 [ 0, %"for sum_filter.s1.r19$y441.us" ], [ %indvars.iv.next2014.3, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2400 = phi <8 x i32> [ %.lcssa1640.us1645, %"for sum_filter.s1.r19$y441.us" ], [ %3956, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2401 = phi <8 x i32> [ %3922, %"for sum_filter.s1.r19$y441.us" ], [ %3957, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2402.not, label %"end for sum_filter.s1.r19$x446.loopexit.us", label %"for sum_filter.s1.r19$x445.us.epil"

"for sum_filter.s1.r19$x445.us.epil":             ; preds = %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x445.us.epil"
  %indvars.iv2013.epil = phi i64 [ %indvars.iv.next2014.epil, %"for sum_filter.s1.r19$x445.us.epil" ], [ %indvars.iv2013.unr, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa" ]
  %3958 = phi <8 x i32> [ %3969, %"for sum_filter.s1.r19$x445.us.epil" ], [ %.unr2400, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa" ]
  %3959 = phi <8 x i32> [ %3968, %"for sum_filter.s1.r19$x445.us.epil" ], [ %.unr2401, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa" ]
  %epil.iter2399 = phi i64 [ %epil.iter2399.sub, %"for sum_filter.s1.r19$x445.us.epil" ], [ %xtraiter2398, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa" ]
  %3960 = shufflevector <8 x i32> %3959, <8 x i32> %3958, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3961 = add nsw i64 %indvars.iv2013.epil, %3923
  %3962 = shl nsw i64 %3961, 4
  %3963 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %3962
  %3964 = bitcast i16* %3963 to <16 x i16>*
  %3965 = load <16 x i16>, <16 x i16>* %3964, align 32, !tbaa !396
  %3966 = sext <16 x i16> %3965 to <16 x i32>
  %3967 = add nsw <16 x i32> %3960, %3966
  %3968 = shufflevector <16 x i32> %3967, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3969 = shufflevector <16 x i32> %3967, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2014.epil = add nuw nsw i64 %indvars.iv2013.epil, 1
  %epil.iter2399.sub = add i64 %epil.iter2399, -1
  %epil.iter2399.cmp.not = icmp eq i64 %epil.iter2399.sub, 0
  br i1 %epil.iter2399.cmp.not, label %"end for sum_filter.s1.r19$x446.loopexit.us", label %"for sum_filter.s1.r19$x445.us.epil", !llvm.loop !484

"end for sum_filter.s1.r19$x446.loopexit.us":     ; preds = %"for sum_filter.s1.r19$x445.us.epil", %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa"
  %.lcssa2296 = phi <16 x i32> [ %.lcssa2296.ph, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa" ], [ %3967, %"for sum_filter.s1.r19$x445.us.epil" ]
  %.lcssa2295 = phi <8 x i32> [ %.lcssa2295.ph, %"end for sum_filter.s1.r19$x446.loopexit.us.unr-lcssa" ], [ %3969, %"for sum_filter.s1.r19$x445.us.epil" ]
  %3970 = shufflevector <16 x i32> %.lcssa2296, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next2016 = add nuw nsw i64 %indvars.iv2015, 1
  %.not816.us = icmp eq i64 %indvars.iv.next2016, %3822
  br i1 %.not816.us, label %"consume sum_filter448.loopexit.split.us", label %"for sum_filter.s1.r19$y441.us"

"consume sum_filter448.loopexit.split.us":        ; preds = %"end for sum_filter.s1.r19$x446.loopexit.us"
  %3971 = shufflevector <16 x i32> %.lcssa2296, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  store <8 x i32> %3971, <8 x i32>* %3758, align 32, !tbaa !421
  store <8 x i32> %.lcssa2295, <8 x i32>* %3760, align 32, !tbaa !431
  br label %"consume sum_filter448"

"consume sum_filter448":                          ; preds = %"for sum_filter.s1.r19$y441.preheader", %"for sum_filter.s1.r19$y441.preheader.thread", %"consume sum_filter448.loopexit.split.us", %"produce sum_filter440.thread"
  %3972 = phi <8 x i32> [ %.lcssa2295, %"consume sum_filter448.loopexit.split.us" ], [ zeroinitializer, %"produce sum_filter440.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y441.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y441.preheader" ]
  %3973 = phi <8 x i32> [ %3971, %"consume sum_filter448.loopexit.split.us" ], [ zeroinitializer, %"produce sum_filter440.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y441.preheader.thread" ], [ zeroinitializer, %"for sum_filter.s1.r19$y441.preheader" ]
  %3974 = sext i32 %output.s0.c.c.base425 to i64
  %3975 = getelementptr inbounds i32, i32* %3765, i64 %3974
  %3976 = bitcast i32* %3975 to <8 x i32>*
  %3977 = load <8 x i32>, <8 x i32>* %3976, align 4, !tbaa !401
  %3978 = getelementptr inbounds i32, i32* %3975, i64 8
  %3979 = bitcast i32* %3978 to <8 x i32>*
  %3980 = load <8 x i32>, <8 x i32>* %3979, align 4, !tbaa !401
  %3981 = shufflevector <8 x i32> %3977, <8 x i32> %3980, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3982 = shufflevector <8 x i32> %3973, <8 x i32> %3972, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3983 = mul nsw <16 x i32> %3982, %3768
  %3984 = sub nsw <16 x i32> %3981, %3983
  %3985 = shufflevector <16 x i32> %3984, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3986 = shufflevector <16 x i32> %3984, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br i1 %3777, label %"for output.s0.b.rebased458.preheader", label %"end for output.s0.b.rebased459", !prof !399

"for output.s0.b.rebased458.preheader":           ; preds = %"consume sum_filter448"
  %3987 = insertelement <16 x i32> undef, i32 %output.s0.c.c.base425, i32 0
  %3988 = shufflevector <16 x i32> %3987, <16 x i32> undef, <16 x i32> zeroinitializer
  %3989 = add nsw <16 x i32> %3988, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3990 = shufflevector <16 x i32> %3989, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3991 = shufflevector <16 x i32> %3989, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %.lobit = ashr <8 x i32> %3990, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %.lobit812 = ashr <8 x i32> %3991, <i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31, i32 31>
  %t2508 = shufflevector <8 x i32> %.lobit, <8 x i32> %.lobit812, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3992 = sub nsw <16 x i32> %3989, %t2508
  %3993 = and <16 x i32> %t2508, %3790
  %3994 = sub i32 %output.s0.c.c.base425, %t2283421
  %3995 = bitcast i16* %filter_zeroed428 to <16 x i16>*
  %3996 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 16
  %3997 = bitcast i16* %3996 to <16 x i16>*
  %3998 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 32
  %3999 = bitcast i16* %3998 to <16 x i16>*
  %4000 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 48
  %4001 = bitcast i16* %4000 to <16 x i16>*
  %4002 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 64
  %4003 = bitcast i16* %4002 to <16 x i16>*
  %4004 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 80
  %4005 = bitcast i16* %4004 to <16 x i16>*
  %4006 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 96
  %4007 = bitcast i16* %4006 to <16 x i16>*
  %4008 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 112
  %4009 = bitcast i16* %4008 to <16 x i16>*
  %4010 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 128
  %4011 = bitcast i16* %4010 to <16 x i16>*
  %4012 = sext i32 %3994 to i64
  br label %"for output.s0.b.rebased458"

"for output.s0.b.rebased458":                     ; preds = %"for output.s0.b.rebased458.preheader", %"end for output.s0.y.yo495"
  %indvars.iv2054 = phi i64 [ 0, %"for output.s0.b.rebased458.preheader" ], [ %indvars.iv.next2055, %"end for output.s0.y.yo495" ]
  %4013 = load i64, i64* %.fca.1.gep707, align 8, !tbaa !386
  %cmp.i1200 = icmp ult i64 %4013, %3781
  %4014 = load i8*, i8** %.fca.0.gep706, align 8, !tbaa !388
  br i1 %cmp.i1200, label %if.then.i1203, label %pseudostack_alloc.exit1216, !prof !389

if.then.i1203:                                    ; preds = %"for output.s0.b.rebased458"
  %tobool1.not.i1202 = icmp ne i8* %4014, null
  %4015 = load i64, i64* %.fca.2.gep708, align 8
  %cmp2.i1205 = icmp ugt i64 %4015, 16384
  %or.cond1465 = and i1 %tobool1.not.i1202, %cmp2.i1205
  br i1 %or.cond1465, label %if.then3.i1207, label %if.end.i1211

if.then3.i1207:                                   ; preds = %if.then.i1203
  call void @halide_free(i8* null, i8* nonnull %4014) #17
  %.pre2098 = load i64, i64* %.fca.2.gep708, align 8, !tbaa !390
  br label %if.end.i1211

if.end.i1211:                                     ; preds = %if.then3.i1207, %if.then.i1203
  %4016 = phi i64 [ %.pre2098, %if.then3.i1207 ], [ %4015, %if.then.i1203 ]
  %add.i1209 = add i64 %4016, %3781
  store i64 %add.i1209, i64* %.fca.2.gep708, align 8, !tbaa !390
  %cmp7.i1210 = icmp ugt i64 %add.i1209, 16384
  br i1 %cmp7.i1210, label %if.then8.i1213, label %if.end11.i1215

if.then8.i1213:                                   ; preds = %if.end.i1211
  %call.i1212 = call i8* @halide_malloc(i8* null, i64 %3781) #17
  br label %if.end11.i1215

if.end11.i1215:                                   ; preds = %if.then8.i1213, %if.end.i1211
  %storemerge.i1214 = phi i8* [ %call.i1212, %if.then8.i1213 ], [ null, %if.end.i1211 ]
  store i8* %storemerge.i1214, i8** %.fca.0.gep706, align 8, !tbaa !388
  store i64 %3781, i64* %.fca.1.gep707, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1216

pseudostack_alloc.exit1216:                       ; preds = %"for output.s0.b.rebased458", %if.end11.i1215
  %4017 = phi i8* [ %storemerge.i1214, %if.end11.i1215 ], [ %4014, %"for output.s0.b.rebased458" ]
  %.not804 = icmp eq i8* %4017, null
  br i1 %.not804, label %then_bb462, label %"produce resampled_input464", !prof !391

"end for output.s0.b.rebased459":                 ; preds = %"end for output.s0.y.yo495", %"consume sum_filter448"
  %.9 = phi i8* [ %.8, %"consume sum_filter448" ], [ %3818, %"end for output.s0.y.yo495" ]
  %4018 = add nuw nsw i32 %output.s0.c.co424, 1
  %.not801 = icmp eq i32 %4018, %t2262417
  br i1 %.not801, label %after_bb230.loopexit1523, label %"for output.s0.c.co422"

then_bb462:                                       ; preds = %pseudostack_alloc.exit1216
  %4019 = alloca i8*, i64 %3781, align 32
  %4020 = bitcast i8** %4019 to i8*
  store i8** %4019, i8*** %3782, align 8
  br label %"produce resampled_input464"

"produce resampled_input464":                     ; preds = %pseudostack_alloc.exit1216, %then_bb462
  %resampled_input463 = phi i8* [ %4020, %then_bb462 ], [ %4017, %pseudostack_alloc.exit1216 ]
  br i1 %t2282416, label %then_bb466, label %next_bb467

then_bb466:                                       ; preds = %"produce resampled_input464"
  %4021 = add nsw i64 %indvars.iv2054, %3838
  %4022 = mul nsw i64 %4021, %3839
  %4023 = add nsw i64 %4022, %4012
  br i1 %.not2225, label %"for resampled_input.s0.y.rebased471.us", label %"consume resampled_input490", !prof !392

"for resampled_input.s0.y.rebased471.us":         ; preds = %then_bb466, %"end for resampled_input.s0.x.rebased477.loopexit.us"
  %indvars.iv2026 = phi i64 [ %indvars.iv.next2027, %"end for resampled_input.s0.x.rebased477.loopexit.us" ], [ 0, %then_bb466 ]
  %4024 = add nsw i64 %indvars.iv2026, %3824
  %4025 = mul nsw i64 %4024, %3825
  %4026 = add nsw i64 %4025, %3826
  %4027 = add nsw i64 %indvars.iv2026, %3827
  %4028 = mul nsw i64 %4027, %3828
  %4029 = add nsw i64 %4023, %4028
  br i1 %3851, label %"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased476.us"

"for resampled_input.s0.x.rebased476.us":         ; preds = %"for resampled_input.s0.y.rebased471.us", %"for resampled_input.s0.x.rebased476.us"
  %indvars.iv2024 = phi i64 [ %indvars.iv.next2025.3, %"for resampled_input.s0.x.rebased476.us" ], [ 0, %"for resampled_input.s0.y.rebased471.us" ]
  %niter2411 = phi i64 [ %niter2411.nsub.3, %"for resampled_input.s0.x.rebased476.us" ], [ %unroll_iter2410, %"for resampled_input.s0.y.rebased471.us" ]
  %4030 = add nsw i64 %indvars.iv2024, %3792
  %4031 = mul nsw i64 %4030, %3793
  %4032 = add nsw i64 %4031, %4029
  %4033 = getelementptr inbounds i8, i8* %50, i64 %4032
  %4034 = bitcast i8* %4033 to <16 x i8>*
  %4035 = load <16 x i8>, <16 x i8>* %4034, align 1, !tbaa !415
  %4036 = add nsw i64 %indvars.iv2024, %4026
  %4037 = shl nsw i64 %4036, 4
  %4038 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4037
  %4039 = bitcast i8* %4038 to <16 x i8>*
  store <16 x i8> %4035, <16 x i8>* %4039, align 16, !tbaa !417
  %indvars.iv.next2025 = or i64 %indvars.iv2024, 1
  %4040 = add nsw i64 %indvars.iv.next2025, %3792
  %4041 = mul nsw i64 %4040, %3793
  %4042 = add nsw i64 %4041, %4029
  %4043 = getelementptr inbounds i8, i8* %50, i64 %4042
  %4044 = bitcast i8* %4043 to <16 x i8>*
  %4045 = load <16 x i8>, <16 x i8>* %4044, align 1, !tbaa !415
  %4046 = add nsw i64 %indvars.iv.next2025, %4026
  %4047 = shl nsw i64 %4046, 4
  %4048 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4047
  %4049 = bitcast i8* %4048 to <16 x i8>*
  store <16 x i8> %4045, <16 x i8>* %4049, align 16, !tbaa !417
  %indvars.iv.next2025.1 = or i64 %indvars.iv2024, 2
  %4050 = add nsw i64 %indvars.iv.next2025.1, %3792
  %4051 = mul nsw i64 %4050, %3793
  %4052 = add nsw i64 %4051, %4029
  %4053 = getelementptr inbounds i8, i8* %50, i64 %4052
  %4054 = bitcast i8* %4053 to <16 x i8>*
  %4055 = load <16 x i8>, <16 x i8>* %4054, align 1, !tbaa !415
  %4056 = add nsw i64 %indvars.iv.next2025.1, %4026
  %4057 = shl nsw i64 %4056, 4
  %4058 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4057
  %4059 = bitcast i8* %4058 to <16 x i8>*
  store <16 x i8> %4055, <16 x i8>* %4059, align 16, !tbaa !417
  %indvars.iv.next2025.2 = or i64 %indvars.iv2024, 3
  %4060 = add nsw i64 %indvars.iv.next2025.2, %3792
  %4061 = mul nsw i64 %4060, %3793
  %4062 = add nsw i64 %4061, %4029
  %4063 = getelementptr inbounds i8, i8* %50, i64 %4062
  %4064 = bitcast i8* %4063 to <16 x i8>*
  %4065 = load <16 x i8>, <16 x i8>* %4064, align 1, !tbaa !415
  %4066 = add nsw i64 %indvars.iv.next2025.2, %4026
  %4067 = shl nsw i64 %4066, 4
  %4068 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4067
  %4069 = bitcast i8* %4068 to <16 x i8>*
  store <16 x i8> %4065, <16 x i8>* %4069, align 16, !tbaa !417
  %indvars.iv.next2025.3 = add nuw nsw i64 %indvars.iv2024, 4
  %niter2411.nsub.3 = add i64 %niter2411, -4
  %niter2411.ncmp.3 = icmp eq i64 %niter2411.nsub.3, 0
  br i1 %niter2411.ncmp.3, label %"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased476.us"

"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa": ; preds = %"for resampled_input.s0.x.rebased476.us", %"for resampled_input.s0.y.rebased471.us"
  %indvars.iv2024.unr = phi i64 [ 0, %"for resampled_input.s0.y.rebased471.us" ], [ %indvars.iv.next2025.3, %"for resampled_input.s0.x.rebased476.us" ]
  br i1 %lcmp.mod2409.not, label %"end for resampled_input.s0.x.rebased477.loopexit.us", label %"for resampled_input.s0.x.rebased476.us.epil"

"for resampled_input.s0.x.rebased476.us.epil":    ; preds = %"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa", %"for resampled_input.s0.x.rebased476.us.epil"
  %indvars.iv2024.epil = phi i64 [ %indvars.iv.next2025.epil, %"for resampled_input.s0.x.rebased476.us.epil" ], [ %indvars.iv2024.unr, %"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa" ]
  %epil.iter2408 = phi i64 [ %epil.iter2408.sub, %"for resampled_input.s0.x.rebased476.us.epil" ], [ %xtraiter2407, %"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa" ]
  %4070 = add nsw i64 %indvars.iv2024.epil, %3792
  %4071 = mul nsw i64 %4070, %3793
  %4072 = add nsw i64 %4071, %4029
  %4073 = getelementptr inbounds i8, i8* %50, i64 %4072
  %4074 = bitcast i8* %4073 to <16 x i8>*
  %4075 = load <16 x i8>, <16 x i8>* %4074, align 1, !tbaa !415
  %4076 = add nsw i64 %indvars.iv2024.epil, %4026
  %4077 = shl nsw i64 %4076, 4
  %4078 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4077
  %4079 = bitcast i8* %4078 to <16 x i8>*
  store <16 x i8> %4075, <16 x i8>* %4079, align 16, !tbaa !417
  %indvars.iv.next2025.epil = add nuw nsw i64 %indvars.iv2024.epil, 1
  %epil.iter2408.sub = add i64 %epil.iter2408, -1
  %epil.iter2408.cmp.not = icmp eq i64 %epil.iter2408.sub, 0
  br i1 %epil.iter2408.cmp.not, label %"end for resampled_input.s0.x.rebased477.loopexit.us", label %"for resampled_input.s0.x.rebased476.us.epil", !llvm.loop !485

"end for resampled_input.s0.x.rebased477.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased476.us.epil", %"end for resampled_input.s0.x.rebased477.loopexit.us.unr-lcssa"
  %indvars.iv.next2027 = add nuw nsw i64 %indvars.iv2026, 1
  %.not814.us = icmp eq i64 %indvars.iv2026, %3829
  br i1 %.not814.us, label %"consume resampled_input490", label %"for resampled_input.s0.y.rebased471.us"

next_bb467:                                       ; preds = %"produce resampled_input464"
  %4080 = trunc i64 %indvars.iv2054 to i32
  %4081 = add i32 %56, %4080
  %4082 = mul i32 %4081, %58
  %t2320479 = sub i32 %4082, %t2283421
  br i1 %3849, label %"consume resampled_input490", label %"for resampled_input.s0.y.rebased482.preheader.split.us", !prof !420

"for resampled_input.s0.y.rebased482.preheader.split.us": ; preds = %next_bb467
  %4083 = sdiv <16 x i32> %3992, %3786
  %4084 = add nsw <16 x i32> %4083, %3993
  %4085 = and <16 x i32> %4084, %3791
  br label %"for resampled_input.s0.y.rebased482.us"

"for resampled_input.s0.y.rebased482.us":         ; preds = %"end for resampled_input.s0.x.rebased488.loopexit.us", %"for resampled_input.s0.y.rebased482.preheader.split.us"
  %indvars.iv2020 = phi i64 [ %indvars.iv.next2021, %"end for resampled_input.s0.x.rebased488.loopexit.us" ], [ 0, %"for resampled_input.s0.y.rebased482.preheader.split.us" ]
  %4086 = add nsw i64 %indvars.iv2020, %3824
  %4087 = mul nsw i64 %4086, %3825
  %4088 = add nsw i64 %4087, %3826
  %4089 = trunc i64 %indvars.iv2020 to i32
  %4090 = add i32 %b169, %4089
  %4091 = mul i32 %4090, %55
  %4092 = add i32 %4091, %t2320479
  br label %"for resampled_input.s0.x.rebased487.us"

"for resampled_input.s0.x.rebased487.us":         ; preds = %"for resampled_input.s0.y.rebased482.us", %"for resampled_input.s0.x.rebased487.us"
  %indvars.iv2018 = phi i64 [ 0, %"for resampled_input.s0.y.rebased482.us" ], [ %indvars.iv.next2019, %"for resampled_input.s0.x.rebased487.us" ]
  %4093 = trunc i64 %indvars.iv2018 to i32
  %4094 = add nsw i32 %b167, %4093
  %4095 = mul nsw i32 %4094, %53
  %4096 = add nsw i32 %4092, %4095
  %4097 = insertelement <16 x i32> undef, i32 %4096, i32 0
  %4098 = shufflevector <16 x i32> %4097, <16 x i32> undef, <16 x i32> zeroinitializer
  %4099 = add nsw <16 x i32> %4098, %4085
  %4100 = extractelement <16 x i32> %4099, i32 0
  %4101 = sext i32 %4100 to i64
  %4102 = getelementptr inbounds i8, i8* %50, i64 %4101
  %4103 = load i8, i8* %4102, align 1, !tbaa !415
  %4104 = insertelement <16 x i8> undef, i8 %4103, i32 0
  %4105 = extractelement <16 x i32> %4099, i32 1
  %4106 = sext i32 %4105 to i64
  %4107 = getelementptr inbounds i8, i8* %50, i64 %4106
  %4108 = load i8, i8* %4107, align 1, !tbaa !415
  %4109 = insertelement <16 x i8> %4104, i8 %4108, i32 1
  %4110 = extractelement <16 x i32> %4099, i32 2
  %4111 = sext i32 %4110 to i64
  %4112 = getelementptr inbounds i8, i8* %50, i64 %4111
  %4113 = load i8, i8* %4112, align 1, !tbaa !415
  %4114 = insertelement <16 x i8> %4109, i8 %4113, i32 2
  %4115 = extractelement <16 x i32> %4099, i32 3
  %4116 = sext i32 %4115 to i64
  %4117 = getelementptr inbounds i8, i8* %50, i64 %4116
  %4118 = load i8, i8* %4117, align 1, !tbaa !415
  %4119 = insertelement <16 x i8> %4114, i8 %4118, i32 3
  %4120 = extractelement <16 x i32> %4099, i32 4
  %4121 = sext i32 %4120 to i64
  %4122 = getelementptr inbounds i8, i8* %50, i64 %4121
  %4123 = load i8, i8* %4122, align 1, !tbaa !415
  %4124 = insertelement <16 x i8> %4119, i8 %4123, i32 4
  %4125 = extractelement <16 x i32> %4099, i32 5
  %4126 = sext i32 %4125 to i64
  %4127 = getelementptr inbounds i8, i8* %50, i64 %4126
  %4128 = load i8, i8* %4127, align 1, !tbaa !415
  %4129 = insertelement <16 x i8> %4124, i8 %4128, i32 5
  %4130 = extractelement <16 x i32> %4099, i32 6
  %4131 = sext i32 %4130 to i64
  %4132 = getelementptr inbounds i8, i8* %50, i64 %4131
  %4133 = load i8, i8* %4132, align 1, !tbaa !415
  %4134 = insertelement <16 x i8> %4129, i8 %4133, i32 6
  %4135 = extractelement <16 x i32> %4099, i32 7
  %4136 = sext i32 %4135 to i64
  %4137 = getelementptr inbounds i8, i8* %50, i64 %4136
  %4138 = load i8, i8* %4137, align 1, !tbaa !415
  %4139 = insertelement <16 x i8> %4134, i8 %4138, i32 7
  %4140 = extractelement <16 x i32> %4099, i32 8
  %4141 = sext i32 %4140 to i64
  %4142 = getelementptr inbounds i8, i8* %50, i64 %4141
  %4143 = load i8, i8* %4142, align 1, !tbaa !415
  %4144 = insertelement <16 x i8> %4139, i8 %4143, i32 8
  %4145 = extractelement <16 x i32> %4099, i32 9
  %4146 = sext i32 %4145 to i64
  %4147 = getelementptr inbounds i8, i8* %50, i64 %4146
  %4148 = load i8, i8* %4147, align 1, !tbaa !415
  %4149 = insertelement <16 x i8> %4144, i8 %4148, i32 9
  %4150 = extractelement <16 x i32> %4099, i32 10
  %4151 = sext i32 %4150 to i64
  %4152 = getelementptr inbounds i8, i8* %50, i64 %4151
  %4153 = load i8, i8* %4152, align 1, !tbaa !415
  %4154 = insertelement <16 x i8> %4149, i8 %4153, i32 10
  %4155 = extractelement <16 x i32> %4099, i32 11
  %4156 = sext i32 %4155 to i64
  %4157 = getelementptr inbounds i8, i8* %50, i64 %4156
  %4158 = load i8, i8* %4157, align 1, !tbaa !415
  %4159 = insertelement <16 x i8> %4154, i8 %4158, i32 11
  %4160 = extractelement <16 x i32> %4099, i32 12
  %4161 = sext i32 %4160 to i64
  %4162 = getelementptr inbounds i8, i8* %50, i64 %4161
  %4163 = load i8, i8* %4162, align 1, !tbaa !415
  %4164 = insertelement <16 x i8> %4159, i8 %4163, i32 12
  %4165 = extractelement <16 x i32> %4099, i32 13
  %4166 = sext i32 %4165 to i64
  %4167 = getelementptr inbounds i8, i8* %50, i64 %4166
  %4168 = load i8, i8* %4167, align 1, !tbaa !415
  %4169 = insertelement <16 x i8> %4164, i8 %4168, i32 13
  %4170 = extractelement <16 x i32> %4099, i32 14
  %4171 = sext i32 %4170 to i64
  %4172 = getelementptr inbounds i8, i8* %50, i64 %4171
  %4173 = load i8, i8* %4172, align 1, !tbaa !415
  %4174 = insertelement <16 x i8> %4169, i8 %4173, i32 14
  %4175 = extractelement <16 x i32> %4099, i32 15
  %4176 = sext i32 %4175 to i64
  %4177 = getelementptr inbounds i8, i8* %50, i64 %4176
  %4178 = load i8, i8* %4177, align 1, !tbaa !415
  %4179 = insertelement <16 x i8> %4174, i8 %4178, i32 15
  %4180 = add nsw i64 %indvars.iv2018, %4088
  %4181 = shl nsw i64 %4180, 4
  %4182 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4181
  %4183 = bitcast i8* %4182 to <16 x i8>*
  store <16 x i8> %4179, <16 x i8>* %4183, align 16, !tbaa !417
  %indvars.iv.next2019 = add nuw nsw i64 %indvars.iv2018, 1
  %.not813.us = icmp eq i64 %indvars.iv2018, %3823
  br i1 %.not813.us, label %"end for resampled_input.s0.x.rebased488.loopexit.us", label %"for resampled_input.s0.x.rebased487.us"

"end for resampled_input.s0.x.rebased488.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased487.us"
  %indvars.iv.next2021 = add nuw nsw i64 %indvars.iv2020, 1
  %.not811.us = icmp eq i64 %indvars.iv2020, %3829
  br i1 %.not811.us, label %"consume resampled_input490", label %"for resampled_input.s0.y.rebased482.us"

"consume resampled_input490":                     ; preds = %"end for resampled_input.s0.x.rebased488.loopexit.us", %"end for resampled_input.s0.x.rebased477.loopexit.us", %next_bb467, %then_bb466
  br i1 %3794, label %"for output.s0.y.yo494.preheader", label %"end for output.s0.y.yo495", !prof !399

"for output.s0.y.yo494.preheader":                ; preds = %"consume resampled_input490"
  %4184 = trunc i64 %indvars.iv2054 to i32
  %4185 = add i32 %56, %4184
  %4186 = mul i32 %4185, %67
  %t2314457 = add i32 %4186, %output.s0.c.c.base425
  br label %"for output.s0.y.yo494"

"for output.s0.y.yo494":                          ; preds = %"for output.s0.y.yo494.preheader", %"end for output.s0.x.xo515"
  %indvars.iv2037 = phi i64 [ 0, %"for output.s0.y.yo494.preheader" ], [ %indvars.iv.next2038, %"end for output.s0.x.xo515" ]
  %output.s0.y.yo496 = phi i32 [ 0, %"for output.s0.y.yo494.preheader" ], [ %4211, %"end for output.s0.x.xo515" ]
  %4187 = add nsw i64 %indvars.iv2037, %3831
  %t2345497 = add nsw i32 %output.s0.y.yo496, %64
  %4188 = mul nsw i64 %4187, %3832
  %t2346498 = mul nsw i32 %t2345497, %stride_y
  %4189 = add nsw i32 %t2330491, %t2346498
  %t2347499 = mul nsw i32 %4189, %a170
  %4190 = add nsw i32 %3795, %t2346498
  %t2349501 = mul nsw i32 %4190, %a170
  %4191 = sub nsw i64 %4188, %3836
  %t2350502 = sub nsw i32 %t2346498, %t2303452
  %t2351503 = mul nsw i32 %t2350502, %a170
  br i1 %3796, label %"for output.s0.x.xo514.preheader", label %"end for output.s0.x.xo515", !prof !399

"for output.s0.x.xo514.preheader":                ; preds = %"for output.s0.y.yo494"
  %4192 = mul nsw i64 %4191, %3825
  %4193 = add nsw i64 %4188, %3835
  %4194 = mul nsw i64 %4193, %3825
  %4195 = add nsw i64 %4188, %3833
  %4196 = mul nsw i64 %4195, %3825
  %4197 = trunc i64 %4187 to i32
  %4198 = mul i32 %66, %4197
  %t2331493 = add i32 %t2314457, %4198
  %t2344513 = sub i32 %t2331493, %reass.add1512
  %t2342512 = add nsw i32 %t2347499, %t2326492
  %t2341511 = add nsw i32 %t2347499, %t2348500
  %t2338510 = add nsw i32 %t2349501, %t2326492
  %t2337509 = add nsw i32 %t2349501, %t2348500
  %t2334508 = add nsw i32 %t2351503, %t2326492
  %t2333507 = add nsw i32 %t2351503, %t2348500
  %4199 = sub nsw i64 %4196, %3834
  %4200 = sub nsw i64 %4194, %3834
  %4201 = sub nsw i64 %4192, %3834
  %4202 = sext i32 %t2333507 to i64
  %4203 = sext i32 %t2334508 to i64
  %4204 = sext i32 %t2337509 to i64
  %4205 = sext i32 %t2338510 to i64
  %4206 = sext i32 %t2341511 to i64
  %4207 = sext i32 %t2342512 to i64
  %4208 = sext i32 %t2344513 to i64
  %4209 = trunc i64 %4191 to i32
  br label %"for output.s0.x.xo514"

"end for output.s0.y.yo495":                      ; preds = %"end for output.s0.x.xo515", %"consume resampled_input490"
  %indvars.iv.next2055 = add nuw nsw i64 %indvars.iv2054, 1
  %4210 = icmp eq i64 %indvars.iv.next2055, %zext2057
  br i1 %4210, label %"end for output.s0.b.rebased459", label %"for output.s0.b.rebased458"

"for output.s0.x.xo514":                          ; preds = %"for output.s0.x.xo514.preheader", %"consume convolved530"
  %indvars.iv2035 = phi i64 [ 0, %"for output.s0.x.xo514.preheader" ], [ %indvars.iv.next2036, %"consume convolved530" ]
  br i1 %t2297413, label %then_bb519, label %next_bb520

"end for output.s0.x.xo515.loopexit":             ; preds = %"consume convolved530"
  store <8 x i32> %.lcssa16521656, <8 x i32>* %3797, align 32, !tbaa !403
  store <8 x i32> %.lcssa1649.us.lcssa1659, <8 x i32>* %3799, align 32, !tbaa !413
  br label %"end for output.s0.x.xo515"

"end for output.s0.x.xo515":                      ; preds = %"end for output.s0.x.xo515.loopexit", %"for output.s0.y.yo494"
  %indvars.iv.next2038 = add nuw nsw i64 %indvars.iv2037, 1
  %4211 = add nuw nsw i32 %output.s0.y.yo496, 1
  %.not806 = icmp eq i64 %indvars.iv.next2038, %3837
  br i1 %.not806, label %"end for output.s0.y.yo495", label %"for output.s0.y.yo494"

then_bb519:                                       ; preds = %"for output.s0.x.xo514"
  %4212 = load <16 x i16>, <16 x i16>* %3995, align 32, !tbaa !449
  %4213 = sext <16 x i16> %4212 to <16 x i32>
  %4214 = add nsw i64 %indvars.iv2035, %3801
  %4215 = mul nsw i64 %4214, %3802
  %4216 = add nsw i64 %4215, %4201
  %4217 = shl nsw i64 %4216, 4
  %4218 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4217
  %4219 = bitcast i8* %4218 to <16 x i8>*
  %4220 = load <16 x i8>, <16 x i8>* %4219, align 16, !tbaa !417
  %4221 = zext <16 x i8> %4220 to <16 x i32>
  %4222 = mul nsw <16 x i32> %4221, %4213
  %4223 = add nsw <16 x i32> %4222, %3984
  %4224 = load <16 x i16>, <16 x i16>* %3997, align 32, !tbaa !457
  %4225 = sext <16 x i16> %4224 to <16 x i32>
  %4226 = add nsw i64 %4215, %4202
  %4227 = shl nsw i64 %4226, 4
  %4228 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4227
  %4229 = bitcast i8* %4228 to <16 x i8>*
  %4230 = load <16 x i8>, <16 x i8>* %4229, align 16, !tbaa !417
  %4231 = zext <16 x i8> %4230 to <16 x i32>
  %4232 = mul nsw <16 x i32> %4231, %4225
  %4233 = add nsw <16 x i32> %4232, %4223
  %4234 = load <16 x i16>, <16 x i16>* %3999, align 32, !tbaa !459
  %4235 = sext <16 x i16> %4234 to <16 x i32>
  %4236 = add nsw i64 %4215, %4203
  %4237 = shl nsw i64 %4236, 4
  %4238 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4237
  %4239 = bitcast i8* %4238 to <16 x i8>*
  %4240 = load <16 x i8>, <16 x i8>* %4239, align 16, !tbaa !417
  %4241 = zext <16 x i8> %4240 to <16 x i32>
  %4242 = mul nsw <16 x i32> %4241, %4235
  %4243 = add nsw <16 x i32> %4242, %4233
  %4244 = load <16 x i16>, <16 x i16>* %4001, align 32, !tbaa !396
  %4245 = sext <16 x i16> %4244 to <16 x i32>
  %4246 = add nsw i64 %4215, %4200
  %4247 = shl nsw i64 %4246, 4
  %4248 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4247
  %4249 = bitcast i8* %4248 to <16 x i8>*
  %4250 = load <16 x i8>, <16 x i8>* %4249, align 16, !tbaa !417
  %4251 = zext <16 x i8> %4250 to <16 x i32>
  %4252 = mul nsw <16 x i32> %4251, %4245
  %4253 = add nsw <16 x i32> %4252, %4243
  %4254 = load <16 x i16>, <16 x i16>* %4003, align 32, !tbaa !396
  %4255 = sext <16 x i16> %4254 to <16 x i32>
  %4256 = add nsw i64 %4215, %4204
  %4257 = shl nsw i64 %4256, 4
  %4258 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4257
  %4259 = bitcast i8* %4258 to <16 x i8>*
  %4260 = load <16 x i8>, <16 x i8>* %4259, align 16, !tbaa !417
  %4261 = zext <16 x i8> %4260 to <16 x i32>
  %4262 = mul nsw <16 x i32> %4261, %4255
  %4263 = add nsw <16 x i32> %4262, %4253
  %4264 = load <16 x i16>, <16 x i16>* %4005, align 32, !tbaa !396
  %4265 = sext <16 x i16> %4264 to <16 x i32>
  %4266 = add nsw i64 %4215, %4205
  %4267 = shl nsw i64 %4266, 4
  %4268 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4267
  %4269 = bitcast i8* %4268 to <16 x i8>*
  %4270 = load <16 x i8>, <16 x i8>* %4269, align 16, !tbaa !417
  %4271 = zext <16 x i8> %4270 to <16 x i32>
  %4272 = mul nsw <16 x i32> %4271, %4265
  %4273 = add nsw <16 x i32> %4272, %4263
  %4274 = load <16 x i16>, <16 x i16>* %4007, align 32, !tbaa !396
  %4275 = sext <16 x i16> %4274 to <16 x i32>
  %4276 = add nsw i64 %4215, %4199
  %4277 = shl nsw i64 %4276, 4
  %4278 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4277
  %4279 = bitcast i8* %4278 to <16 x i8>*
  %4280 = load <16 x i8>, <16 x i8>* %4279, align 16, !tbaa !417
  %4281 = zext <16 x i8> %4280 to <16 x i32>
  %4282 = mul nsw <16 x i32> %4281, %4275
  %4283 = add nsw <16 x i32> %4282, %4273
  %4284 = load <16 x i16>, <16 x i16>* %4009, align 32, !tbaa !396
  %4285 = sext <16 x i16> %4284 to <16 x i32>
  %4286 = add nsw i64 %4215, %4206
  %4287 = shl nsw i64 %4286, 4
  %4288 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4287
  %4289 = bitcast i8* %4288 to <16 x i8>*
  %4290 = load <16 x i8>, <16 x i8>* %4289, align 16, !tbaa !417
  %4291 = zext <16 x i8> %4290 to <16 x i32>
  %4292 = mul nsw <16 x i32> %4291, %4285
  %4293 = add nsw <16 x i32> %4292, %4283
  %4294 = load <16 x i16>, <16 x i16>* %4011, align 32, !tbaa !396
  %4295 = sext <16 x i16> %4294 to <16 x i32>
  %4296 = add nsw i64 %4215, %4207
  %4297 = shl nsw i64 %4296, 4
  %4298 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4297
  %4299 = bitcast i8* %4298 to <16 x i8>*
  %4300 = load <16 x i8>, <16 x i8>* %4299, align 16, !tbaa !417
  %4301 = zext <16 x i8> %4300 to <16 x i32>
  %4302 = mul nsw <16 x i32> %4301, %4295
  %4303 = add nsw <16 x i32> %4302, %4293
  %4304 = shufflevector <16 x i32> %4303, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4305 = shufflevector <16 x i32> %4303, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"consume convolved530"

next_bb520:                                       ; preds = %"for output.s0.x.xo514"
  %4306 = trunc i64 %indvars.iv2035 to i32
  %4307 = add nsw i32 %61, %4306
  %4308 = mul nsw i32 %4307, %stride_x
  %t2352521 = sub i32 %4308, %t2305451
  br i1 %brmerge2211.demorgan, label %"for convolved.s1.r19$y522.us", label %"consume convolved530", !prof !392

"for convolved.s1.r19$y522.us":                   ; preds = %next_bb520, %"end for convolved.s1.r19$x528.loopexit.us"
  %indvars.iv2032 = phi i64 [ %indvars.iv.next2033, %"end for convolved.s1.r19$x528.loopexit.us" ], [ 0, %next_bb520 ]
  %.lcssa1649.us1654 = phi <8 x i32> [ %.lcssa2297, %"end for convolved.s1.r19$x528.loopexit.us" ], [ %3986, %next_bb520 ]
  %4309 = phi <8 x i32> [ %4368, %"end for convolved.s1.r19$x528.loopexit.us" ], [ %3985, %next_bb520 ]
  %"convolved.s1.r19$y524.us" = phi i32 [ %4369, %"end for convolved.s1.r19$x528.loopexit.us" ], [ 0, %next_bb520 ]
  %4310 = mul nsw i64 %indvars.iv2032, %3820
  %4311 = mul nsw i32 %"convolved.s1.r19$y524.us", %a186
  %4312 = add nsw i32 %4311, %4209
  %4313 = mul nsw i32 %4312, %a170
  %t2354526.us = add nsw i32 %t2352521, %4313
  %4314 = sext i32 %t2354526.us to i64
  br i1 %3852, label %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x527.us"

"for convolved.s1.r19$x527.us":                   ; preds = %"for convolved.s1.r19$y522.us", %"for convolved.s1.r19$x527.us"
  %indvars.iv2030 = phi i64 [ %indvars.iv.next2031.1, %"for convolved.s1.r19$x527.us" ], [ 0, %"for convolved.s1.r19$y522.us" ]
  %4315 = phi <8 x i32> [ %4349, %"for convolved.s1.r19$x527.us" ], [ %.lcssa1649.us1654, %"for convolved.s1.r19$y522.us" ]
  %4316 = phi <8 x i32> [ %4348, %"for convolved.s1.r19$x527.us" ], [ %4309, %"for convolved.s1.r19$y522.us" ]
  %niter2417 = phi i64 [ %niter2417.nsub.1, %"for convolved.s1.r19$x527.us" ], [ %unroll_iter2416, %"for convolved.s1.r19$y522.us" ]
  %4317 = shufflevector <8 x i32> %4316, <8 x i32> %4315, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4318 = add nsw i64 %indvars.iv2030, %4310
  %4319 = shl nsw i64 %4318, 4
  %4320 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %4319
  %4321 = bitcast i16* %4320 to <16 x i16>*
  %4322 = load <16 x i16>, <16 x i16>* %4321, align 32, !tbaa !396
  %4323 = sext <16 x i16> %4322 to <16 x i32>
  %4324 = mul nsw i64 %indvars.iv2030, %3800
  %4325 = add nsw i64 %4324, %4314
  %4326 = shl nsw i64 %4325, 4
  %4327 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4326
  %4328 = bitcast i8* %4327 to <16 x i8>*
  %4329 = load <16 x i8>, <16 x i8>* %4328, align 16, !tbaa !417
  %4330 = zext <16 x i8> %4329 to <16 x i32>
  %4331 = mul nsw <16 x i32> %4330, %4323
  %4332 = add nsw <16 x i32> %4331, %4317
  %indvars.iv.next2031 = or i64 %indvars.iv2030, 1
  %4333 = add nsw i64 %indvars.iv.next2031, %4310
  %4334 = shl nsw i64 %4333, 4
  %4335 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %4334
  %4336 = bitcast i16* %4335 to <16 x i16>*
  %4337 = load <16 x i16>, <16 x i16>* %4336, align 32, !tbaa !396
  %4338 = sext <16 x i16> %4337 to <16 x i32>
  %4339 = mul nsw i64 %indvars.iv.next2031, %3800
  %4340 = add nsw i64 %4339, %4314
  %4341 = shl nsw i64 %4340, 4
  %4342 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4341
  %4343 = bitcast i8* %4342 to <16 x i8>*
  %4344 = load <16 x i8>, <16 x i8>* %4343, align 16, !tbaa !417
  %4345 = zext <16 x i8> %4344 to <16 x i32>
  %4346 = mul nsw <16 x i32> %4345, %4338
  %4347 = add nsw <16 x i32> %4346, %4332
  %4348 = shufflevector <16 x i32> %4347, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4349 = shufflevector <16 x i32> %4347, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next2031.1 = add nuw nsw i64 %indvars.iv2030, 2
  %niter2417.nsub.1 = add i64 %niter2417, -2
  %niter2417.ncmp.1 = icmp eq i64 %niter2417.nsub.1, 0
  br i1 %niter2417.ncmp.1, label %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit", label %"for convolved.s1.r19$x527.us"

"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit": ; preds = %"for convolved.s1.r19$x527.us"
  %4350 = shufflevector <16 x i32> %4347, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa"

"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa": ; preds = %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit", %"for convolved.s1.r19$y522.us"
  %.lcssa2298.ph = phi <16 x i32> [ undef, %"for convolved.s1.r19$y522.us" ], [ %4347, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2297.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$y522.us" ], [ %4349, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv2030.unr = phi i64 [ 0, %"for convolved.s1.r19$y522.us" ], [ %indvars.iv.next2031.1, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2413 = phi <8 x i32> [ %.lcssa1649.us1654, %"for convolved.s1.r19$y522.us" ], [ %4349, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit" ]
  %.unr2414 = phi <8 x i32> [ %4309, %"for convolved.s1.r19$y522.us" ], [ %4350, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2415.not, label %"end for convolved.s1.r19$x528.loopexit.us", label %"for convolved.s1.r19$x527.us.epil"

"for convolved.s1.r19$x527.us.epil":              ; preds = %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa"
  %4351 = shufflevector <8 x i32> %.unr2414, <8 x i32> %.unr2413, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4352 = add nsw i64 %indvars.iv2030.unr, %4310
  %4353 = shl nsw i64 %4352, 4
  %4354 = getelementptr inbounds i16, i16* %filter_zeroed428, i64 %4353
  %4355 = bitcast i16* %4354 to <16 x i16>*
  %4356 = load <16 x i16>, <16 x i16>* %4355, align 32, !tbaa !396
  %4357 = sext <16 x i16> %4356 to <16 x i32>
  %4358 = mul nsw i64 %indvars.iv2030.unr, %3800
  %4359 = add nsw i64 %4358, %4314
  %4360 = shl nsw i64 %4359, 4
  %4361 = getelementptr inbounds i8, i8* %resampled_input463, i64 %4360
  %4362 = bitcast i8* %4361 to <16 x i8>*
  %4363 = load <16 x i8>, <16 x i8>* %4362, align 16, !tbaa !417
  %4364 = zext <16 x i8> %4363 to <16 x i32>
  %4365 = mul nsw <16 x i32> %4364, %4357
  %4366 = add nsw <16 x i32> %4365, %4351
  %4367 = shufflevector <16 x i32> %4366, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"end for convolved.s1.r19$x528.loopexit.us"

"end for convolved.s1.r19$x528.loopexit.us":      ; preds = %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x527.us.epil"
  %.lcssa2298 = phi <16 x i32> [ %.lcssa2298.ph, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa" ], [ %4366, %"for convolved.s1.r19$x527.us.epil" ]
  %.lcssa2297 = phi <8 x i32> [ %.lcssa2297.ph, %"end for convolved.s1.r19$x528.loopexit.us.unr-lcssa" ], [ %4367, %"for convolved.s1.r19$x527.us.epil" ]
  %4368 = shufflevector <16 x i32> %.lcssa2298, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next2033 = add nuw nsw i64 %indvars.iv2032, 1
  %4369 = add nuw nsw i32 %"convolved.s1.r19$y524.us", 1
  %.not809.us = icmp eq i64 %indvars.iv.next2033, %3822
  br i1 %.not809.us, label %"consume convolved530.loopexit", label %"for convolved.s1.r19$y522.us"

"consume convolved530.loopexit":                  ; preds = %"end for convolved.s1.r19$x528.loopexit.us"
  %4370 = shufflevector <16 x i32> %.lcssa2298, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume convolved530"

"consume convolved530":                           ; preds = %next_bb520, %"consume convolved530.loopexit", %then_bb519
  %.lcssa1649.us.lcssa1659 = phi <8 x i32> [ %3986, %next_bb520 ], [ %4305, %then_bb519 ], [ %.lcssa2297, %"consume convolved530.loopexit" ]
  %.lcssa16521656 = phi <8 x i32> [ %3985, %next_bb520 ], [ %4304, %then_bb519 ], [ %4370, %"consume convolved530.loopexit" ]
  %4371 = shufflevector <8 x i32> %.lcssa16521656, <8 x i32> %.lcssa1649.us.lcssa1659, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4372 = sext <16 x i32> %4371 to <16 x i64>
  %4373 = mul nsw <16 x i64> %4372, %3805
  %4374 = ashr <16 x i64> %4373, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4375 = add nsw <16 x i64> %4374, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a175 = ashr <16 x i64> %4375, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4376 = shufflevector <16 x i64> %a175, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4377 = icmp slt <4 x i64> %4376, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4378 = shufflevector <16 x i64> %a175, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4379 = icmp slt <4 x i64> %4378, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4380 = shufflevector <16 x i64> %a175, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4381 = icmp slt <4 x i64> %4380, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4382 = shufflevector <16 x i64> %a175, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4383 = icmp slt <4 x i64> %4382, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4384 = select <4 x i1> %4377, <4 x i64> %4376, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4385 = select <4 x i1> %4379, <4 x i64> %4378, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4386 = select <4 x i1> %4381, <4 x i64> %4380, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4387 = select <4 x i1> %4383, <4 x i64> %4382, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4388 = icmp sgt <4 x i64> %4384, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4389 = icmp sgt <4 x i64> %4385, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4390 = icmp sgt <4 x i64> %4386, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4391 = icmp sgt <4 x i64> %4387, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4392 = select <4 x i1> %4388, <4 x i64> %4384, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4393 = select <4 x i1> %4389, <4 x i64> %4385, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4394 = select <4 x i1> %4390, <4 x i64> %4386, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4395 = select <4 x i1> %4391, <4 x i64> %4387, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4396 = shufflevector <4 x i64> %4392, <4 x i64> %4393, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4397 = shufflevector <4 x i64> %4394, <4 x i64> %4395, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4398 = shufflevector <8 x i64> %4396, <8 x i64> %4397, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4399 = trunc <16 x i64> %4398 to <16 x i32>
  %4400 = ashr <16 x i32> %4399, %3807
  %4401 = lshr <16 x i32> %4399, %3811
  %4402 = and <16 x i32> %4401, %3808
  %4403 = add nsw <16 x i32> %4402, %4400
  %4404 = shufflevector <16 x i32> %4403, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4405 = shufflevector <16 x i32> %4403, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4406 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %4404, <8 x i32> %4405) #11
  %4407 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %4406, <16 x i16> %3814)
  %4408 = shufflevector <16 x i16> %4407, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4409 = shufflevector <16 x i16> %4407, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4410 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %4408, <8 x i16> %4409) #11
  %4411 = icmp ugt <16 x i8> %b175, %4410
  %a172 = select <16 x i1> %4411, <16 x i8> %4410, <16 x i8> %b175
  %4412 = icmp ugt <16 x i8> %a172, %b174
  %4413 = select <16 x i1> %4412, <16 x i8> %a172, <16 x i8> %b174
  %4414 = add nsw i64 %indvars.iv2035, %3801
  %4415 = mul nsw i64 %4414, %3817
  %4416 = add nsw i64 %4415, %4208
  %4417 = getelementptr inbounds i8, i8* %59, i64 %4416
  %4418 = bitcast i8* %4417 to <16 x i8>*
  store <16 x i8> %4413, <16 x i8>* %4418, align 1, !tbaa !462
  %indvars.iv.next2036 = add nuw nsw i64 %indvars.iv2035, 1
  %.not808 = icmp eq i64 %indvars.iv.next2036, %3830
  br i1 %.not808, label %"end for output.s0.x.xo515.loopexit", label %"for output.s0.x.xo514"

then_bb531:                                       ; preds = %next_bb402
  %4419 = icmp eq i32 %46, 3
  %4420 = icmp eq i32 %48, 3
  %4421 = and i1 %4419, %4420
  %4422 = icmp sgt i32 %46, 0
  %4423 = select i1 %4422, i32 %46, i32 0
  %t2511 = zext i32 %4423 to i64
  %4424 = icmp sgt i32 %48, 0
  %4425 = select i1 %4424, i32 %48, i32 0
  %t2512 = zext i32 %4425 to i64
  %4426 = shl nuw nsw i64 %t2511, 5
  %4427 = mul i64 %4426, %t2512
  %4428 = or i64 %4427, 6
  %4429 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8*
  %4430 = load i64, i64* %.fca.1.gep, align 8, !tbaa !386
  %cmp.i1218 = icmp ult i64 %4430, %4428
  %4431 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !388
  br i1 %cmp.i1218, label %if.then.i1221, label %pseudostack_alloc.exit1234, !prof !389

if.then.i1221:                                    ; preds = %then_bb531
  %tobool1.not.i1220 = icmp ne i8* %4431, null
  %4432 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i1223 = icmp ugt i64 %4432, 16384
  %or.cond1466 = and i1 %tobool1.not.i1220, %cmp2.i1223
  br i1 %or.cond1466, label %if.then3.i1225, label %if.end.i1229

if.then3.i1225:                                   ; preds = %if.then.i1221
  call void @halide_free(i8* null, i8* nonnull %4431) #17
  %.pre2095 = load i64, i64* %.fca.2.gep, align 8, !tbaa !390
  br label %if.end.i1229

if.end.i1229:                                     ; preds = %if.then3.i1225, %if.then.i1221
  %4433 = phi i64 [ %.pre2095, %if.then3.i1225 ], [ %4432, %if.then.i1221 ]
  %add.i1227 = add i64 %4433, %4428
  store i64 %add.i1227, i64* %.fca.2.gep, align 8, !tbaa !390
  %cmp7.i1228 = icmp ugt i64 %add.i1227, 16384
  br i1 %cmp7.i1228, label %if.then8.i1231, label %if.end11.i1233

if.then8.i1231:                                   ; preds = %if.end.i1229
  %call.i1230 = call i8* @halide_malloc(i8* null, i64 %4428) #17
  br label %if.end11.i1233

if.end11.i1233:                                   ; preds = %if.then8.i1231, %if.end.i1229
  %storemerge.i1232 = phi i8* [ %call.i1230, %if.then8.i1231 ], [ null, %if.end.i1229 ]
  store i8* %storemerge.i1232, i8** %.fca.0.gep, align 8, !tbaa !388
  store i64 %4428, i64* %.fca.1.gep, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1234

pseudostack_alloc.exit1234:                       ; preds = %then_bb531, %if.end11.i1233
  %4434 = phi i8* [ %storemerge.i1232, %if.end11.i1233 ], [ %4431, %then_bb531 ]
  %4435 = bitcast i8* %4434 to i16*
  %.not = icmp eq i8* %4434, null
  br i1 %.not, label %then_bb534, label %"produce filter_zeroed536", !prof !391

then_bb534:                                       ; preds = %pseudostack_alloc.exit1234
  %4436 = alloca i8*, i64 %4428, align 32
  %4437 = bitcast i8** %4436 to i16*
  %4438 = bitcast %struct.halide_pseudostack_slot_t* %filter_zeroed.pseudostack_slot to i8***
  store i8** %4436, i8*** %4438, align 8
  br label %"produce filter_zeroed536"

"produce filter_zeroed536":                       ; preds = %pseudostack_alloc.exit1234, %then_bb534
  %filter_zeroed535 = phi i16* [ %4437, %then_bb534 ], [ %4435, %pseudostack_alloc.exit1234 ]
  %4439 = insertelement <16 x i32> undef, i32 %45, i32 0
  %4440 = shufflevector <16 x i32> %4439, <16 x i32> undef, <8 x i32> zeroinitializer
  br i1 %4424, label %"for filter_zeroed.s0.y537.preheader", label %"produce sum_filter548", !prof !399

"for filter_zeroed.s0.y537.preheader":            ; preds = %"produce filter_zeroed536"
  %4441 = icmp slt <8 x i32> %4440, <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>
  %4442 = icmp slt <8 x i32> %4440, <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %4443 = shufflevector <8 x i1> %4441, <8 x i1> %4442, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4444 = xor <16 x i1> %4443, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %4445 = sext i32 %47 to i64
  %4446 = insertelement <16 x i8> undef, i8 %filter_zero, i32 0
  %4447 = shufflevector <16 x i8> %4446, <16 x i8> undef, <16 x i32> zeroinitializer
  %4448 = zext <16 x i8> %4447 to <16 x i16>
  br i1 %4422, label %"for filter_zeroed.s0.y537.us.preheader", label %"produce sum_filter548", !prof !399

"for filter_zeroed.s0.y537.us.preheader":         ; preds = %"for filter_zeroed.s0.y537.preheader"
  %4449 = zext i32 %46 to i64
  %4450 = zext i32 %46 to i64
  %4451 = sext i32 %49 to i64
  %4452 = zext i32 %48 to i64
  %4453 = add nsw i64 %4449, -1
  %xtraiter2375 = and i64 %4449, 3
  %4454 = icmp ult i64 %4453, 3
  %unroll_iter2378 = and i64 %4449, 4294967292
  %lcmp.mod2377.not = icmp eq i64 %xtraiter2375, 0
  br label %"for filter_zeroed.s0.y537.us"

"for filter_zeroed.s0.y537.us":                   ; preds = %"for filter_zeroed.s0.y537.us.preheader", %"end for filter_zeroed.s0.x543.loopexit.us"
  %indvars.iv1959 = phi i64 [ 0, %"for filter_zeroed.s0.y537.us.preheader" ], [ %indvars.iv.next1960, %"end for filter_zeroed.s0.x543.loopexit.us" ]
  %4455 = mul nsw i64 %indvars.iv1959, %4450
  %4456 = mul nsw i64 %indvars.iv1959, %4451
  br i1 %4454, label %"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x542.us"

"for filter_zeroed.s0.x542.us":                   ; preds = %"for filter_zeroed.s0.y537.us", %"for filter_zeroed.s0.x542.us"
  %indvars.iv1957 = phi i64 [ %indvars.iv.next1958.3, %"for filter_zeroed.s0.x542.us" ], [ 0, %"for filter_zeroed.s0.y537.us" ]
  %niter2379 = phi i64 [ %niter2379.nsub.3, %"for filter_zeroed.s0.x542.us" ], [ %unroll_iter2378, %"for filter_zeroed.s0.y537.us" ]
  %4457 = mul nsw i64 %indvars.iv1957, %4445
  %4458 = add nsw i64 %4457, %4456
  %4459 = getelementptr inbounds i8, i8* %43, i64 %4458
  %4460 = bitcast i8* %4459 to <16 x i8>*
  %4461 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4460, i32 1, <16 x i1> %4444, <16 x i8> undef), !tbaa !393
  %4462 = zext <16 x i8> %4461 to <16 x i16>
  %4463 = sub nsw <16 x i16> %4462, %4448
  %4464 = add nuw nsw i64 %indvars.iv1957, %4455
  %4465 = shl nsw i64 %4464, 4
  %4466 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4465
  %4467 = bitcast i16* %4466 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %4463, <16 x i16>* %4467, i32 32, <16 x i1> %4444), !tbaa !396
  %indvars.iv.next1958 = or i64 %indvars.iv1957, 1
  %4468 = mul nsw i64 %indvars.iv.next1958, %4445
  %4469 = add nsw i64 %4468, %4456
  %4470 = getelementptr inbounds i8, i8* %43, i64 %4469
  %4471 = bitcast i8* %4470 to <16 x i8>*
  %4472 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4471, i32 1, <16 x i1> %4444, <16 x i8> undef), !tbaa !393
  %4473 = zext <16 x i8> %4472 to <16 x i16>
  %4474 = sub nsw <16 x i16> %4473, %4448
  %4475 = add nuw nsw i64 %indvars.iv.next1958, %4455
  %4476 = shl nsw i64 %4475, 4
  %4477 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4476
  %4478 = bitcast i16* %4477 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %4474, <16 x i16>* %4478, i32 32, <16 x i1> %4444), !tbaa !396
  %indvars.iv.next1958.1 = or i64 %indvars.iv1957, 2
  %4479 = mul nsw i64 %indvars.iv.next1958.1, %4445
  %4480 = add nsw i64 %4479, %4456
  %4481 = getelementptr inbounds i8, i8* %43, i64 %4480
  %4482 = bitcast i8* %4481 to <16 x i8>*
  %4483 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4482, i32 1, <16 x i1> %4444, <16 x i8> undef), !tbaa !393
  %4484 = zext <16 x i8> %4483 to <16 x i16>
  %4485 = sub nsw <16 x i16> %4484, %4448
  %4486 = add nuw nsw i64 %indvars.iv.next1958.1, %4455
  %4487 = shl nsw i64 %4486, 4
  %4488 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4487
  %4489 = bitcast i16* %4488 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %4485, <16 x i16>* %4489, i32 32, <16 x i1> %4444), !tbaa !396
  %indvars.iv.next1958.2 = or i64 %indvars.iv1957, 3
  %4490 = mul nsw i64 %indvars.iv.next1958.2, %4445
  %4491 = add nsw i64 %4490, %4456
  %4492 = getelementptr inbounds i8, i8* %43, i64 %4491
  %4493 = bitcast i8* %4492 to <16 x i8>*
  %4494 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4493, i32 1, <16 x i1> %4444, <16 x i8> undef), !tbaa !393
  %4495 = zext <16 x i8> %4494 to <16 x i16>
  %4496 = sub nsw <16 x i16> %4495, %4448
  %4497 = add nuw nsw i64 %indvars.iv.next1958.2, %4455
  %4498 = shl nsw i64 %4497, 4
  %4499 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4498
  %4500 = bitcast i16* %4499 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %4496, <16 x i16>* %4500, i32 32, <16 x i1> %4444), !tbaa !396
  %indvars.iv.next1958.3 = add nuw nsw i64 %indvars.iv1957, 4
  %niter2379.nsub.3 = add i64 %niter2379, -4
  %niter2379.ncmp.3 = icmp eq i64 %niter2379.nsub.3, 0
  br i1 %niter2379.ncmp.3, label %"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa", label %"for filter_zeroed.s0.x542.us"

"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa": ; preds = %"for filter_zeroed.s0.x542.us", %"for filter_zeroed.s0.y537.us"
  %indvars.iv1957.unr = phi i64 [ 0, %"for filter_zeroed.s0.y537.us" ], [ %indvars.iv.next1958.3, %"for filter_zeroed.s0.x542.us" ]
  br i1 %lcmp.mod2377.not, label %"end for filter_zeroed.s0.x543.loopexit.us", label %"for filter_zeroed.s0.x542.us.epil"

"for filter_zeroed.s0.x542.us.epil":              ; preds = %"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa", %"for filter_zeroed.s0.x542.us.epil"
  %indvars.iv1957.epil = phi i64 [ %indvars.iv.next1958.epil, %"for filter_zeroed.s0.x542.us.epil" ], [ %indvars.iv1957.unr, %"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa" ]
  %epil.iter2376 = phi i64 [ %epil.iter2376.sub, %"for filter_zeroed.s0.x542.us.epil" ], [ %xtraiter2375, %"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa" ]
  %4501 = mul nsw i64 %indvars.iv1957.epil, %4445
  %4502 = add nsw i64 %4501, %4456
  %4503 = getelementptr inbounds i8, i8* %43, i64 %4502
  %4504 = bitcast i8* %4503 to <16 x i8>*
  %4505 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4504, i32 1, <16 x i1> %4444, <16 x i8> undef), !tbaa !393
  %4506 = zext <16 x i8> %4505 to <16 x i16>
  %4507 = sub nsw <16 x i16> %4506, %4448
  %4508 = add nuw nsw i64 %indvars.iv1957.epil, %4455
  %4509 = shl nsw i64 %4508, 4
  %4510 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4509
  %4511 = bitcast i16* %4510 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %4507, <16 x i16>* %4511, i32 32, <16 x i1> %4444), !tbaa !396
  %indvars.iv.next1958.epil = add nuw nsw i64 %indvars.iv1957.epil, 1
  %epil.iter2376.sub = add i64 %epil.iter2376, -1
  %epil.iter2376.cmp.not = icmp eq i64 %epil.iter2376.sub, 0
  br i1 %epil.iter2376.cmp.not, label %"end for filter_zeroed.s0.x543.loopexit.us", label %"for filter_zeroed.s0.x542.us.epil", !llvm.loop !486

"end for filter_zeroed.s0.x543.loopexit.us":      ; preds = %"for filter_zeroed.s0.x542.us.epil", %"end for filter_zeroed.s0.x543.loopexit.us.unr-lcssa"
  %indvars.iv.next1960 = add nuw nsw i64 %indvars.iv1959, 1
  %.not796.us = icmp eq i64 %indvars.iv.next1960, %4452
  br i1 %.not796.us, label %"produce sum_filter548", label %"for filter_zeroed.s0.y537.us"

"produce sum_filter548":                          ; preds = %"end for filter_zeroed.s0.x543.loopexit.us", %"produce filter_zeroed536", %"for filter_zeroed.s0.y537.preheader"
  %4512 = icmp slt <8 x i32> %4440, <i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8>
  %4513 = icmp slt <8 x i32> %4440, <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16>
  %4514 = shufflevector <8 x i1> %4512, <8 x i1> %4513, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4515 = xor <16 x i1> %4514, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %4516 = bitcast [16 x i32]* %sum_filter776 to <8 x i32>*
  %4517 = shufflevector <16 x i1> %4515, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> zeroinitializer, <8 x i32>* nonnull %4516, i32 32, <8 x i1> %4517), !tbaa !403
  %4518 = getelementptr inbounds [16 x i32], [16 x i32]* %sum_filter776, i64 0, i64 8
  %4519 = bitcast i32* %4518 to <8 x i32>*
  %4520 = shufflevector <16 x i1> %4515, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> zeroinitializer, <8 x i32>* nonnull %4519, i32 32, <8 x i1> %4520), !tbaa !413
  %brmerge2214.demorgan = and i1 %4424, %4422
  br i1 %brmerge2214.demorgan, label %"for sum_filter.s1.r19$y549.us.preheader", label %"consume sum_filter557", !prof !392

"for sum_filter.s1.r19$y549.us.preheader":        ; preds = %"produce sum_filter548"
  %4521 = zext i32 %46 to i64
  %4522 = zext i32 %46 to i64
  %4523 = zext i32 %48 to i64
  %xtraiter2380 = and i64 %4521, 1
  %4524 = icmp eq i32 %46, 1
  %unroll_iter2382 = and i64 %4521, 4294967294
  %lcmp.mod2381.not = icmp eq i64 %xtraiter2380, 0
  br label %"for sum_filter.s1.r19$y549.us"

"for sum_filter.s1.r19$y549.us":                  ; preds = %"for sum_filter.s1.r19$y549.us.preheader", %"end for sum_filter.s1.r19$x554.loopexit.us"
  %indvars.iv1965 = phi i64 [ 0, %"for sum_filter.s1.r19$y549.us.preheader" ], [ %indvars.iv.next1966, %"end for sum_filter.s1.r19$x554.loopexit.us" ]
  %4525 = mul nsw i64 %indvars.iv1965, %4522
  br i1 %4524, label %"end for sum_filter.s1.r19$x554.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x553.us"

"for sum_filter.s1.r19$x553.us":                  ; preds = %"for sum_filter.s1.r19$y549.us", %"for sum_filter.s1.r19$x553.us"
  %indvars.iv1963 = phi i64 [ %indvars.iv.next1964.1, %"for sum_filter.s1.r19$x553.us" ], [ 0, %"for sum_filter.s1.r19$y549.us" ]
  %niter2383 = phi i64 [ %niter2383.nsub.1, %"for sum_filter.s1.r19$x553.us" ], [ %unroll_iter2382, %"for sum_filter.s1.r19$y549.us" ]
  %unmaskedload793.us = load <8 x i32>, <8 x i32>* %4516, align 32
  %4526 = select <8 x i1> %4517, <8 x i32> %unmaskedload793.us, <8 x i32> undef
  %unmaskedload794.us = load <8 x i32>, <8 x i32>* %4519, align 32
  %4527 = select <8 x i1> %4520, <8 x i32> %unmaskedload794.us, <8 x i32> undef
  %4528 = shufflevector <8 x i32> %4526, <8 x i32> %4527, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4529 = add nuw nsw i64 %indvars.iv1963, %4525
  %4530 = shl nsw i64 %4529, 4
  %4531 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4530
  %4532 = bitcast i16* %4531 to <16 x i16>*
  %4533 = call <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>* %4532, i32 32, <16 x i1> %4515, <16 x i16> undef), !tbaa !396
  %4534 = sext <16 x i16> %4533 to <16 x i32>
  %4535 = add nsw <16 x i32> %4528, %4534
  %4536 = shufflevector <16 x i32> %4535, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4536, <8 x i32>* nonnull %4516, i32 32, <8 x i1> %4517), !tbaa !403
  %4537 = shufflevector <16 x i32> %4535, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4537, <8 x i32>* nonnull %4519, i32 32, <8 x i1> %4520), !tbaa !413
  %indvars.iv.next1964 = or i64 %indvars.iv1963, 1
  %unmaskedload793.us.1 = load <8 x i32>, <8 x i32>* %4516, align 32
  %4538 = select <8 x i1> %4517, <8 x i32> %unmaskedload793.us.1, <8 x i32> undef
  %unmaskedload794.us.1 = load <8 x i32>, <8 x i32>* %4519, align 32
  %4539 = select <8 x i1> %4520, <8 x i32> %unmaskedload794.us.1, <8 x i32> undef
  %4540 = shufflevector <8 x i32> %4538, <8 x i32> %4539, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4541 = add nuw nsw i64 %indvars.iv.next1964, %4525
  %4542 = shl nsw i64 %4541, 4
  %4543 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4542
  %4544 = bitcast i16* %4543 to <16 x i16>*
  %4545 = call <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>* %4544, i32 32, <16 x i1> %4515, <16 x i16> undef), !tbaa !396
  %4546 = sext <16 x i16> %4545 to <16 x i32>
  %4547 = add nsw <16 x i32> %4540, %4546
  %4548 = shufflevector <16 x i32> %4547, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4548, <8 x i32>* nonnull %4516, i32 32, <8 x i1> %4517), !tbaa !403
  %4549 = shufflevector <16 x i32> %4547, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4549, <8 x i32>* nonnull %4519, i32 32, <8 x i1> %4520), !tbaa !413
  %indvars.iv.next1964.1 = add nuw nsw i64 %indvars.iv1963, 2
  %niter2383.nsub.1 = add i64 %niter2383, -2
  %niter2383.ncmp.1 = icmp eq i64 %niter2383.nsub.1, 0
  br i1 %niter2383.ncmp.1, label %"end for sum_filter.s1.r19$x554.loopexit.us.unr-lcssa", label %"for sum_filter.s1.r19$x553.us"

"end for sum_filter.s1.r19$x554.loopexit.us.unr-lcssa": ; preds = %"for sum_filter.s1.r19$x553.us", %"for sum_filter.s1.r19$y549.us"
  %indvars.iv1963.unr = phi i64 [ 0, %"for sum_filter.s1.r19$y549.us" ], [ %indvars.iv.next1964.1, %"for sum_filter.s1.r19$x553.us" ]
  br i1 %lcmp.mod2381.not, label %"end for sum_filter.s1.r19$x554.loopexit.us", label %"for sum_filter.s1.r19$x553.us.epil"

"for sum_filter.s1.r19$x553.us.epil":             ; preds = %"end for sum_filter.s1.r19$x554.loopexit.us.unr-lcssa"
  %unmaskedload793.us.epil = load <8 x i32>, <8 x i32>* %4516, align 32
  %4550 = select <8 x i1> %4517, <8 x i32> %unmaskedload793.us.epil, <8 x i32> undef
  %unmaskedload794.us.epil = load <8 x i32>, <8 x i32>* %4519, align 32
  %4551 = select <8 x i1> %4520, <8 x i32> %unmaskedload794.us.epil, <8 x i32> undef
  %4552 = shufflevector <8 x i32> %4550, <8 x i32> %4551, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4553 = add nuw nsw i64 %indvars.iv1963.unr, %4525
  %4554 = shl nsw i64 %4553, 4
  %4555 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %4554
  %4556 = bitcast i16* %4555 to <16 x i16>*
  %4557 = call <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>* %4556, i32 32, <16 x i1> %4515, <16 x i16> undef), !tbaa !396
  %4558 = sext <16 x i16> %4557 to <16 x i32>
  %4559 = add nsw <16 x i32> %4552, %4558
  %4560 = shufflevector <16 x i32> %4559, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4560, <8 x i32>* nonnull %4516, i32 32, <8 x i1> %4517), !tbaa !403
  %4561 = shufflevector <16 x i32> %4559, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4561, <8 x i32>* nonnull %4519, i32 32, <8 x i1> %4520), !tbaa !413
  br label %"end for sum_filter.s1.r19$x554.loopexit.us"

"end for sum_filter.s1.r19$x554.loopexit.us":     ; preds = %"end for sum_filter.s1.r19$x554.loopexit.us.unr-lcssa", %"for sum_filter.s1.r19$x553.us.epil"
  %indvars.iv.next1966 = add nuw nsw i64 %indvars.iv1965, 1
  %.not792.us = icmp eq i64 %indvars.iv.next1966, %4523
  br i1 %.not792.us, label %"consume sum_filter557", label %"for sum_filter.s1.r19$y549.us"

"consume sum_filter557":                          ; preds = %"end for sum_filter.s1.r19$x554.loopexit.us", %"produce sum_filter548"
  %4562 = bitcast i8* %42 to <8 x i32>*
  %4563 = call <8 x i32> @llvm.masked.load.v8i32.p0v8i32(<8 x i32>* %4562, i32 4, <8 x i1> %4517, <8 x i32> undef), !tbaa !468
  %4564 = getelementptr inbounds i8, i8* %42, i64 32
  %4565 = bitcast i8* %4564 to <8 x i32>*
  %4566 = call <8 x i32> @llvm.masked.load.v8i32.p0v8i32(<8 x i32>* nonnull %4565, i32 4, <8 x i1> %4520, <8 x i32> undef), !tbaa !477
  %4567 = shufflevector <8 x i32> %4563, <8 x i32> %4566, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %unmaskedload = load <8 x i32>, <8 x i32>* %4516, align 32
  %4568 = select <8 x i1> %4517, <8 x i32> %unmaskedload, <8 x i32> undef
  %unmaskedload777 = load <8 x i32>, <8 x i32>* %4519, align 32
  %4569 = select <8 x i1> %4520, <8 x i32> %unmaskedload777, <8 x i32> undef
  %4570 = shufflevector <8 x i32> %4568, <8 x i32> %4569, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4571 = zext i8 %input_zero to i32
  %4572 = insertelement <16 x i32> undef, i32 %4571, i32 0
  %4573 = shufflevector <16 x i32> %4572, <16 x i32> undef, <16 x i32> zeroinitializer
  %4574 = mul nsw <16 x i32> %4570, %4573
  %4575 = sub nsw <16 x i32> %4567, %4574
  %4576 = shufflevector <16 x i32> %4575, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4577 = bitcast [64 x i32]* %offset_c545774 to <8 x i32>*
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4576, <8 x i32>* nonnull %4577, i32 32, <8 x i1> %4517), !tbaa !421
  %4578 = shufflevector <16 x i32> %4575, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4579 = getelementptr inbounds [64 x i32], [64 x i32]* %offset_c545774, i64 0, i64 8
  %4580 = bitcast i32* %4579 to <8 x i32>*
  call void @llvm.masked.store.v8i32.p0v8i32(<8 x i32> %4578, <8 x i32>* nonnull %4580, i32 32, <8 x i1> %4520), !tbaa !431
  %t2382561 = icmp slt i32 %a187, 0
  %4581 = add nsw i32 %46, -1
  %t2383562 = mul nsw i32 %4581, %a187
  %t2384563 = icmp slt i32 %stride_x, 0
  %t2385564 = select i1 %t2382561, i32 %t2383562, i32 0
  %4582 = select i1 %t2384563, i32 %62, i32 1
  %4583 = add i32 %61, -1
  %4584 = add i32 %4583, %4582
  %t2386565 = mul nsw i32 %4584, %stride_x
  %t2387566 = icmp slt i32 %a186, 0
  %4585 = add nsw i32 %48, -1
  %t2388567 = mul nsw i32 %4585, %a186
  %t2389568 = icmp slt i32 %stride_y, 0
  %t2390569 = select i1 %t2387566, i32 %t2388567, i32 0
  %4586 = select i1 %t2389568, i32 %65, i32 1
  %4587 = add i32 %64, -1
  %4588 = add i32 %4587, %4586
  %t2391570 = mul nsw i32 %4588, %stride_y
  %a187.op = shl i32 %a187, 1
  %t2393572 = select i1 %t2382561, i32 %a187.op, i32 0
  %a186.op = shl i32 %a186, 1
  %t2394573 = select i1 %t2387566, i32 %a186.op, i32 0
  %t2375574 = icmp eq i32 %depth_multiplier, 1
  %4589 = select i1 %4421, i32 %t2394573, i32 %t2390569
  %4590 = select i1 %4421, i32 %t2393572, i32 %t2385564
  %b192 = add nsw i32 %t2391570, %t2390569
  %4591 = select i1 %t2387566, i32 0, i32 %t2388567
  %4592 = add nsw i32 %65, -1
  %4593 = select i1 %t2389568, i32 0, i32 %4592
  %4594 = add nsw i32 %4593, %64
  %4595 = mul nsw i32 %4594, %stride_y
  %b191 = add nsw i32 %4595, %4591
  %b195 = add nsw i32 %t2386565, %t2385564
  %4596 = select i1 %t2382561, i32 0, i32 %t2383562
  %4597 = add nsw i32 %62, -1
  %4598 = select i1 %t2384563, i32 0, i32 %4597
  %4599 = add nsw i32 %4598, %61
  %4600 = mul nsw i32 %4599, %stride_x
  %b194 = add nsw i32 %4600, %4596
  %4601 = mul nsw i32 %55, %54
  %4602 = mul nsw i32 %58, %56
  %4603 = mul nsw i32 %53, %52
  %4604 = add i32 %4601, %4603
  %t2376578 = add i32 %4604, %4602
  %4605 = icmp sgt i32 %57, 0
  br i1 %4605, label %"for output.s0.b.rebased579.preheader", label %after_bb230, !prof !399

"for output.s0.b.rebased579.preheader":           ; preds = %"consume sum_filter557"
  %b193 = add nsw i32 %t2386565, %4590
  %b190 = add nsw i32 %t2391570, %4589
  %4606 = icmp sgt i32 %a187, 0
  %4607 = select i1 %4606, i32 %a187, i32 0
  %t2373576 = shl nuw nsw i32 %4607, 1
  %4608 = icmp sgt i32 %a186, 0
  %4609 = select i1 %4608, i32 %a186, i32 0
  %t2367575 = shl nuw nsw i32 %4609, 1
  %4610 = icmp sgt i32 %4589, %t2390569
  %resampled_input.y.min_realized582 = select i1 %4610, i32 %b192, i32 %b190
  %4611 = select i1 %4421, i32 %t2367575, i32 %4591
  %a189 = add nsw i32 %4595, %4611
  %4612 = icmp sgt i32 %4611, %4591
  %4613 = select i1 %4612, i32 %a189, i32 %b191
  %4614 = sub nsw i32 %4613, %resampled_input.y.min_realized582
  %a197 = add nsw i32 %4614, 1
  %4615 = icmp sgt i32 %4590, %t2385564
  %resampled_input.x.min_realized583 = select i1 %4615, i32 %b195, i32 %b193
  %4616 = select i1 %4421, i32 %t2373576, i32 %4596
  %a192 = add nsw i32 %4600, %4616
  %4617 = icmp sgt i32 %4616, %4596
  %4618 = select i1 %4617, i32 %a192, i32 %b194
  %4619 = sub nsw i32 %4618, %resampled_input.x.min_realized583
  %a196 = add nsw i32 %4619, 1
  %.inv = icmp slt i32 %4619, 0
  %4620 = select i1 %.inv, i32 0, i32 %a196
  %t2513 = zext i32 %4620 to i64
  %.inv778 = icmp slt i32 %4614, 0
  %4621 = select i1 %.inv778, i32 0, i32 %a197
  %t2514 = zext i32 %4621 to i64
  %t2515 = shl nuw nsw i64 %t2513, 4
  %4622 = mul i64 %t2515, %t2514
  %4623 = or i64 %4622, 3
  %4624 = bitcast %struct.halide_pseudostack_slot_t* %resampled_input.pseudostack_slot to i8***
  %t2405605 = sub i32 %b195, %resampled_input.x.min_realized583
  %t2403606 = sub nsw i32 %b194, %b195
  %t2406607 = sub i32 %b192, %resampled_input.y.min_realized582
  %t2402608 = sub nsw i32 %b191, %b192
  %4625 = sext i32 %b195 to i64
  %4626 = sext i32 %53 to i64
  %4627 = icmp sgt i32 %45, 1
  %4628 = icmp eq i32 %depth_multiplier, 0
  %t2517 = sext i1 %4628 to i32
  %4629 = sub nsw i32 %depth_multiplier, %t2517
  %4630 = add i32 %4629, 1
  %4631 = icmp ult i32 %4630, 3
  %4632 = select i1 %4631, i32 %4629, i32 0
  %4633 = xor i32 %t2517, -1
  %4634 = and i32 %4632, %4633
  %4635 = sext i32 %4634 to i64
  %.not1468 = icmp eq i32 %45, 2
  %4636 = icmp sgt i32 %45, 3
  %.not1469 = icmp eq i32 %45, 4
  %4637 = icmp sgt i32 %45, 5
  %.not1470 = icmp eq i32 %45, 6
  %4638 = icmp sgt i32 %45, 7
  %.not1471 = icmp eq i32 %45, 8
  %4639 = icmp sgt i32 %45, 9
  %.not1472 = icmp eq i32 %45, 10
  %4640 = icmp sgt i32 %45, 11
  %.not1473 = icmp eq i32 %45, 12
  %4641 = icmp sgt i32 %45, 13
  %.not1474 = icmp eq i32 %45, 14
  %.neg1500 = mul i32 %66, %64
  %.neg1501 = mul i32 %63, %61
  %.neg1502 = mul i32 %67, %56
  %t2414667 = sub i32 %a186.op, %resampled_input.y.min_realized582
  %t2410668 = sub nsw i32 %a187.op, %resampled_input.x.min_realized583
  %4642 = icmp sgt i32 %65, 0
  %t2432675 = sub nsw i32 %a187, %resampled_input.x.min_realized583
  %4643 = sub i32 %a186, %resampled_input.y.min_realized582
  %reass.add1504 = add i32 %.neg1500, %.neg1501
  %reass.add1505 = add i32 %reass.add1504, %.neg1502
  %4644 = icmp sgt i32 %62, 0
  %4645 = sext i32 %a187 to i64
  %4646 = bitcast i16* %filter_zeroed535 to <16 x i16>*
  %4647 = sext i32 %61 to i64
  %4648 = sext i32 %stride_x to i64
  %4649 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 16
  %4650 = bitcast i16* %4649 to <16 x i16>*
  %4651 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 32
  %4652 = bitcast i16* %4651 to <16 x i16>*
  %4653 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 48
  %4654 = bitcast i16* %4653 to <16 x i16>*
  %4655 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 64
  %4656 = bitcast i16* %4655 to <16 x i16>*
  %4657 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 80
  %4658 = bitcast i16* %4657 to <16 x i16>*
  %4659 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 96
  %4660 = bitcast i16* %4659 to <16 x i16>*
  %4661 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 112
  %4662 = bitcast i16* %4661 to <16 x i16>*
  %4663 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 128
  %4664 = bitcast i16* %4663 to <16 x i16>*
  %4665 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %4666 = shufflevector <16 x i32> %4665, <16 x i32> undef, <16 x i32> zeroinitializer
  %4667 = sext <16 x i32> %4666 to <16 x i64>
  %4668 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %4669 = shufflevector <16 x i32> %4668, <16 x i32> undef, <16 x i32> zeroinitializer
  %.not784 = icmp eq i32 %output_shift, 0
  %4670 = select i1 %.not784, <16 x i32> zeroinitializer, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4671 = add i32 %output_shift, -1
  %4672 = insertelement <16 x i32> undef, i32 %4671, i32 0
  %4673 = shufflevector <16 x i32> %4672, <16 x i32> undef, <16 x i32> zeroinitializer
  %4674 = zext i8 %output_zero to i16
  %4675 = insertelement <16 x i16> undef, i16 %4674, i32 0
  %4676 = shufflevector <16 x i16> %4675, <16 x i16> undef, <16 x i32> zeroinitializer
  %4677 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b201 = shufflevector <16 x i8> %4677, <16 x i8> undef, <16 x i32> zeroinitializer
  %4678 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b200 = shufflevector <16 x i8> %4678, <16 x i8> undef, <16 x i32> zeroinitializer
  %4679 = sext i32 %63 to i64
  %4680 = zext i32 %t2403606 to i64
  %4681 = sext i32 %t2406607 to i64
  %4682 = sext i32 %a196 to i64
  %4683 = sext i32 %t2405605 to i64
  %4684 = sext i32 %b192 to i64
  %4685 = sext i32 %55 to i64
  %4686 = zext i32 %t2402608 to i64
  %4687 = zext i32 %46 to i64
  %4688 = sext i32 %46 to i64
  %4689 = zext i32 %48 to i64
  %4690 = zext i32 %62 to i64
  %4691 = sext i32 %64 to i64
  %4692 = sext i32 %stride_y to i64
  %4693 = sext i32 %t2414667 to i64
  %4694 = sext i32 %resampled_input.x.min_realized583 to i64
  %4695 = sext i32 %4643 to i64
  %4696 = sext i32 %resampled_input.y.min_realized582 to i64
  %4697 = zext i32 %65 to i64
  %4698 = zext i32 %56 to i64
  %zext2006 = zext i32 %57 to i64
  %4699 = add nuw nsw i64 %4680, 1
  %4700 = or i32 %t2402608, %t2403606
  %4701 = icmp slt i32 %4700, 0
  %.not2224 = icmp sgt i32 %4700, -1
  %xtraiter2384 = and i64 %4699, 3
  %4702 = icmp ult i32 %t2403606, 3
  %unroll_iter2387 = and i64 %4699, 8589934588
  %lcmp.mod2386.not = icmp eq i64 %xtraiter2384, 0
  %brmerge2223.demorgan = and i1 %4424, %4422
  %xtraiter2389 = and i64 %4687, 1
  %4703 = icmp eq i32 %46, 1
  %unroll_iter2391 = and i64 %4687, 4294967294
  %lcmp.mod2390.not = icmp eq i64 %xtraiter2389, 0
  br label %"for output.s0.b.rebased579"

"for output.s0.b.rebased579":                     ; preds = %"for output.s0.b.rebased579.preheader", %"end for output.s0.y.yo670"
  %indvars.iv2004 = phi i64 [ 0, %"for output.s0.b.rebased579.preheader" ], [ %indvars.iv.next2005, %"end for output.s0.y.yo670" ]
  %4704 = load i64, i64* %.fca.1.gep707, align 8, !tbaa !386
  %cmp.i1236 = icmp ult i64 %4704, %4623
  %4705 = load i8*, i8** %.fca.0.gep706, align 8, !tbaa !388
  br i1 %cmp.i1236, label %if.then.i1239, label %pseudostack_alloc.exit1252, !prof !389

if.then.i1239:                                    ; preds = %"for output.s0.b.rebased579"
  %tobool1.not.i1238 = icmp ne i8* %4705, null
  %4706 = load i64, i64* %.fca.2.gep708, align 8
  %cmp2.i1241 = icmp ugt i64 %4706, 16384
  %or.cond1467 = and i1 %tobool1.not.i1238, %cmp2.i1241
  br i1 %or.cond1467, label %if.then3.i1243, label %if.end.i1247

if.then3.i1243:                                   ; preds = %if.then.i1239
  call void @halide_free(i8* null, i8* nonnull %4705) #17
  %.pre2096 = load i64, i64* %.fca.2.gep708, align 8, !tbaa !390
  br label %if.end.i1247

if.end.i1247:                                     ; preds = %if.then3.i1243, %if.then.i1239
  %4707 = phi i64 [ %.pre2096, %if.then3.i1243 ], [ %4706, %if.then.i1239 ]
  %add.i1245 = add i64 %4707, %4623
  store i64 %add.i1245, i64* %.fca.2.gep708, align 8, !tbaa !390
  %cmp7.i1246 = icmp ugt i64 %add.i1245, 16384
  br i1 %cmp7.i1246, label %if.then8.i1249, label %if.end11.i1251

if.then8.i1249:                                   ; preds = %if.end.i1247
  %call.i1248 = call i8* @halide_malloc(i8* null, i64 %4623) #17
  br label %if.end11.i1251

if.end11.i1251:                                   ; preds = %if.then8.i1249, %if.end.i1247
  %storemerge.i1250 = phi i8* [ %call.i1248, %if.then8.i1249 ], [ null, %if.end.i1247 ]
  store i8* %storemerge.i1250, i8** %.fca.0.gep706, align 8, !tbaa !388
  store i64 %4623, i64* %.fca.1.gep707, align 8, !tbaa !386
  br label %pseudostack_alloc.exit1252

pseudostack_alloc.exit1252:                       ; preds = %"for output.s0.b.rebased579", %if.end11.i1251
  %4708 = phi i8* [ %storemerge.i1250, %if.end11.i1251 ], [ %4705, %"for output.s0.b.rebased579" ]
  %.not779 = icmp eq i8* %4708, null
  br i1 %.not779, label %then_bb585, label %"produce resampled_input587", !prof !391

then_bb585:                                       ; preds = %pseudostack_alloc.exit1252
  %4709 = alloca i8*, i64 %4623, align 32
  %4710 = bitcast i8** %4709 to i8*
  store i8** %4709, i8*** %4624, align 8
  br label %"produce resampled_input587"

"produce resampled_input587":                     ; preds = %pseudostack_alloc.exit1252, %then_bb585
  %resampled_input586 = phi i8* [ %4710, %then_bb585 ], [ %4708, %pseudostack_alloc.exit1252 ]
  %4711 = add nuw i64 %indvars.iv2004, %4698
  br i1 %t2375574, label %then_bb589, label %next_bb590

then_bb589:                                       ; preds = %"produce resampled_input587"
  br i1 %.not2224, label %"for resampled_input.s0.y.rebased596.us.preheader", label %"consume resampled_input665", !prof !392

"for resampled_input.s0.y.rebased596.us.preheader": ; preds = %then_bb589
  %4712 = trunc i64 %4711 to i32
  %4713 = mul i32 %58, %4712
  %t2397591 = sub i32 %4713, %t2376578
  %4714 = sext i32 %t2397591 to i64
  br label %"for resampled_input.s0.y.rebased596.us"

"for resampled_input.s0.y.rebased596.us":         ; preds = %"for resampled_input.s0.y.rebased596.us.preheader", %"end for resampled_input.s0.x.rebased602.loopexit.us"
  %indvars.iv1976 = phi i64 [ 0, %"for resampled_input.s0.y.rebased596.us.preheader" ], [ %indvars.iv.next1977, %"end for resampled_input.s0.x.rebased602.loopexit.us" ]
  %4715 = add nsw i64 %indvars.iv1976, %4681
  %4716 = mul nsw i64 %4715, %4682
  %4717 = add nsw i64 %4716, %4683
  %4718 = add nsw i64 %indvars.iv1976, %4684
  %4719 = mul nsw i64 %4718, %4685
  %4720 = add nsw i64 %4719, %4714
  br i1 %4702, label %"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased601.us"

"for resampled_input.s0.x.rebased601.us":         ; preds = %"for resampled_input.s0.y.rebased596.us", %"for resampled_input.s0.x.rebased601.us"
  %indvars.iv1974 = phi i64 [ %indvars.iv.next1975.3, %"for resampled_input.s0.x.rebased601.us" ], [ 0, %"for resampled_input.s0.y.rebased596.us" ]
  %niter2388 = phi i64 [ %niter2388.nsub.3, %"for resampled_input.s0.x.rebased601.us" ], [ %unroll_iter2387, %"for resampled_input.s0.y.rebased596.us" ]
  %4721 = add nsw i64 %indvars.iv1974, %4625
  %4722 = mul nsw i64 %4721, %4626
  %4723 = add nsw i64 %4722, %4720
  %4724 = getelementptr inbounds i8, i8* %50, i64 %4723
  %4725 = bitcast i8* %4724 to <16 x i8>*
  %4726 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4725, i32 1, <16 x i1> %4515, <16 x i8> undef), !tbaa !415
  %4727 = add nsw i64 %indvars.iv1974, %4717
  %4728 = shl nsw i64 %4727, 4
  %4729 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4728
  %4730 = bitcast i8* %4729 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %4726, <16 x i8>* %4730, i32 16, <16 x i1> %4515), !tbaa !417
  %indvars.iv.next1975 = or i64 %indvars.iv1974, 1
  %4731 = add nsw i64 %indvars.iv.next1975, %4625
  %4732 = mul nsw i64 %4731, %4626
  %4733 = add nsw i64 %4732, %4720
  %4734 = getelementptr inbounds i8, i8* %50, i64 %4733
  %4735 = bitcast i8* %4734 to <16 x i8>*
  %4736 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4735, i32 1, <16 x i1> %4515, <16 x i8> undef), !tbaa !415
  %4737 = add nsw i64 %indvars.iv.next1975, %4717
  %4738 = shl nsw i64 %4737, 4
  %4739 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4738
  %4740 = bitcast i8* %4739 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %4736, <16 x i8>* %4740, i32 16, <16 x i1> %4515), !tbaa !417
  %indvars.iv.next1975.1 = or i64 %indvars.iv1974, 2
  %4741 = add nsw i64 %indvars.iv.next1975.1, %4625
  %4742 = mul nsw i64 %4741, %4626
  %4743 = add nsw i64 %4742, %4720
  %4744 = getelementptr inbounds i8, i8* %50, i64 %4743
  %4745 = bitcast i8* %4744 to <16 x i8>*
  %4746 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4745, i32 1, <16 x i1> %4515, <16 x i8> undef), !tbaa !415
  %4747 = add nsw i64 %indvars.iv.next1975.1, %4717
  %4748 = shl nsw i64 %4747, 4
  %4749 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4748
  %4750 = bitcast i8* %4749 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %4746, <16 x i8>* %4750, i32 16, <16 x i1> %4515), !tbaa !417
  %indvars.iv.next1975.2 = or i64 %indvars.iv1974, 3
  %4751 = add nsw i64 %indvars.iv.next1975.2, %4625
  %4752 = mul nsw i64 %4751, %4626
  %4753 = add nsw i64 %4752, %4720
  %4754 = getelementptr inbounds i8, i8* %50, i64 %4753
  %4755 = bitcast i8* %4754 to <16 x i8>*
  %4756 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4755, i32 1, <16 x i1> %4515, <16 x i8> undef), !tbaa !415
  %4757 = add nsw i64 %indvars.iv.next1975.2, %4717
  %4758 = shl nsw i64 %4757, 4
  %4759 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4758
  %4760 = bitcast i8* %4759 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %4756, <16 x i8>* %4760, i32 16, <16 x i1> %4515), !tbaa !417
  %indvars.iv.next1975.3 = add nuw nsw i64 %indvars.iv1974, 4
  %niter2388.nsub.3 = add i64 %niter2388, -4
  %niter2388.ncmp.3 = icmp eq i64 %niter2388.nsub.3, 0
  br i1 %niter2388.ncmp.3, label %"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa", label %"for resampled_input.s0.x.rebased601.us"

"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa": ; preds = %"for resampled_input.s0.x.rebased601.us", %"for resampled_input.s0.y.rebased596.us"
  %indvars.iv1974.unr = phi i64 [ 0, %"for resampled_input.s0.y.rebased596.us" ], [ %indvars.iv.next1975.3, %"for resampled_input.s0.x.rebased601.us" ]
  br i1 %lcmp.mod2386.not, label %"end for resampled_input.s0.x.rebased602.loopexit.us", label %"for resampled_input.s0.x.rebased601.us.epil"

"for resampled_input.s0.x.rebased601.us.epil":    ; preds = %"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa", %"for resampled_input.s0.x.rebased601.us.epil"
  %indvars.iv1974.epil = phi i64 [ %indvars.iv.next1975.epil, %"for resampled_input.s0.x.rebased601.us.epil" ], [ %indvars.iv1974.unr, %"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa" ]
  %epil.iter2385 = phi i64 [ %epil.iter2385.sub, %"for resampled_input.s0.x.rebased601.us.epil" ], [ %xtraiter2384, %"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa" ]
  %4761 = add nsw i64 %indvars.iv1974.epil, %4625
  %4762 = mul nsw i64 %4761, %4626
  %4763 = add nsw i64 %4762, %4720
  %4764 = getelementptr inbounds i8, i8* %50, i64 %4763
  %4765 = bitcast i8* %4764 to <16 x i8>*
  %4766 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4765, i32 1, <16 x i1> %4515, <16 x i8> undef), !tbaa !415
  %4767 = add nsw i64 %indvars.iv1974.epil, %4717
  %4768 = shl nsw i64 %4767, 4
  %4769 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4768
  %4770 = bitcast i8* %4769 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %4766, <16 x i8>* %4770, i32 16, <16 x i1> %4515), !tbaa !417
  %indvars.iv.next1975.epil = add nuw nsw i64 %indvars.iv1974.epil, 1
  %epil.iter2385.sub = add i64 %epil.iter2385, -1
  %epil.iter2385.cmp.not = icmp eq i64 %epil.iter2385.sub, 0
  br i1 %epil.iter2385.cmp.not, label %"end for resampled_input.s0.x.rebased602.loopexit.us", label %"for resampled_input.s0.x.rebased601.us.epil", !llvm.loop !487

"end for resampled_input.s0.x.rebased602.loopexit.us": ; preds = %"for resampled_input.s0.x.rebased601.us.epil", %"end for resampled_input.s0.x.rebased602.loopexit.us.unr-lcssa"
  %indvars.iv.next1977 = add nuw nsw i64 %indvars.iv1976, 1
  %.not790.us = icmp eq i64 %indvars.iv1976, %4686
  br i1 %.not790.us, label %"consume resampled_input665", label %"for resampled_input.s0.y.rebased596.us"

next_bb590:                                       ; preds = %"produce resampled_input587"
  br i1 %4701, label %"consume resampled_input665", label %"for resampled_input.s0.y.rebased609.us.preheader", !prof !420

"for resampled_input.s0.y.rebased609.us.preheader": ; preds = %next_bb590
  %4771 = trunc i64 %4711 to i32
  %4772 = mul i32 %58, %4771
  %t2404604 = sub i32 %4772, %t2376578
  %4773 = sext i32 %t2404604 to i64
  br label %"for resampled_input.s0.y.rebased609.us"

"for resampled_input.s0.y.rebased609.us":         ; preds = %"for resampled_input.s0.y.rebased609.us.preheader", %"end for resampled_input.s0.x.rebased615.loopexit.us"
  %indvars.iv1970 = phi i64 [ 0, %"for resampled_input.s0.y.rebased609.us.preheader" ], [ %indvars.iv.next1971, %"end for resampled_input.s0.x.rebased615.loopexit.us" ]
  %4774 = add nsw i64 %indvars.iv1970, %4681
  %4775 = mul nsw i64 %4774, %4682
  %4776 = add nsw i64 %4775, %4683
  %4777 = add nsw i64 %indvars.iv1970, %4684
  %4778 = mul nsw i64 %4777, %4685
  %4779 = add nsw i64 %4778, %4773
  br label %"for resampled_input.s0.x.rebased614.us"

"for resampled_input.s0.x.rebased614.us":         ; preds = %"for resampled_input.s0.y.rebased609.us", %after_bb664.us
  %indvars.iv1968 = phi i64 [ 0, %"for resampled_input.s0.y.rebased609.us" ], [ %indvars.iv.next1969, %after_bb664.us ]
  %4780 = add nsw i64 %indvars.iv1968, %4625
  %4781 = mul nsw i64 %4780, %4626
  %4782 = add nsw i64 %4781, %4779
  %4783 = getelementptr inbounds i8, i8* %50, i64 %4782
  %4784 = load i8, i8* %4783, align 1, !tbaa !415
  br i1 %4627, label %after_bb622.us, label %after_bb664.us

after_bb622.us:                                   ; preds = %"for resampled_input.s0.x.rebased614.us"
  %4785 = add nsw i64 %4782, %4635
  %4786 = getelementptr inbounds i8, i8* %50, i64 %4785
  %4787 = load i8, i8* %4786, align 1, !tbaa !415
  br i1 %.not1468, label %after_bb664.us, label %after_bb625.us

after_bb625.us:                                   ; preds = %after_bb622.us
  %4788 = sdiv i32 2, %4629
  %4789 = and i32 %4788, %4633
  %4790 = sext i32 %4789 to i64
  %4791 = add nsw i64 %4782, %4790
  %4792 = getelementptr inbounds i8, i8* %50, i64 %4791
  %4793 = load i8, i8* %4792, align 1, !tbaa !415
  br i1 %4636, label %after_bb628.us, label %after_bb664.us

after_bb628.us:                                   ; preds = %after_bb625.us
  %4794 = sdiv i32 3, %4629
  %4795 = and i32 %4794, %4633
  %4796 = sext i32 %4795 to i64
  %4797 = add nsw i64 %4782, %4796
  %4798 = getelementptr inbounds i8, i8* %50, i64 %4797
  %4799 = load i8, i8* %4798, align 1, !tbaa !415
  br i1 %.not1469, label %after_bb664.us, label %after_bb631.us

after_bb631.us:                                   ; preds = %after_bb628.us
  %4800 = sdiv i32 4, %4629
  %4801 = and i32 %4800, %4633
  %4802 = sext i32 %4801 to i64
  %4803 = add nsw i64 %4782, %4802
  %4804 = getelementptr inbounds i8, i8* %50, i64 %4803
  %4805 = load i8, i8* %4804, align 1, !tbaa !415
  br i1 %4637, label %after_bb634.us, label %after_bb664.us

after_bb634.us:                                   ; preds = %after_bb631.us
  %4806 = sdiv i32 5, %4629
  %4807 = and i32 %4806, %4633
  %4808 = sext i32 %4807 to i64
  %4809 = add nsw i64 %4782, %4808
  %4810 = getelementptr inbounds i8, i8* %50, i64 %4809
  %4811 = load i8, i8* %4810, align 1, !tbaa !415
  br i1 %.not1470, label %after_bb664.us, label %after_bb637.us

after_bb637.us:                                   ; preds = %after_bb634.us
  %4812 = sdiv i32 6, %4629
  %4813 = and i32 %4812, %4633
  %4814 = sext i32 %4813 to i64
  %4815 = add nsw i64 %4782, %4814
  %4816 = getelementptr inbounds i8, i8* %50, i64 %4815
  %4817 = load i8, i8* %4816, align 1, !tbaa !415
  br i1 %4638, label %after_bb640.us, label %after_bb664.us

after_bb640.us:                                   ; preds = %after_bb637.us
  %4818 = sdiv i32 7, %4629
  %4819 = and i32 %4818, %4633
  %4820 = sext i32 %4819 to i64
  %4821 = add nsw i64 %4782, %4820
  %4822 = getelementptr inbounds i8, i8* %50, i64 %4821
  %4823 = load i8, i8* %4822, align 1, !tbaa !415
  br i1 %.not1471, label %after_bb664.us, label %after_bb643.us

after_bb643.us:                                   ; preds = %after_bb640.us
  %4824 = sdiv i32 8, %4629
  %4825 = and i32 %4824, %4633
  %4826 = sext i32 %4825 to i64
  %4827 = add nsw i64 %4782, %4826
  %4828 = getelementptr inbounds i8, i8* %50, i64 %4827
  %4829 = load i8, i8* %4828, align 1, !tbaa !415
  br i1 %4639, label %after_bb646.us, label %after_bb664.us

after_bb646.us:                                   ; preds = %after_bb643.us
  %4830 = sdiv i32 9, %4629
  %4831 = and i32 %4830, %4633
  %4832 = sext i32 %4831 to i64
  %4833 = add nsw i64 %4782, %4832
  %4834 = getelementptr inbounds i8, i8* %50, i64 %4833
  %4835 = load i8, i8* %4834, align 1, !tbaa !415
  br i1 %.not1472, label %after_bb664.us, label %after_bb649.us

after_bb649.us:                                   ; preds = %after_bb646.us
  %4836 = sdiv i32 10, %4629
  %4837 = and i32 %4836, %4633
  %4838 = sext i32 %4837 to i64
  %4839 = add nsw i64 %4782, %4838
  %4840 = getelementptr inbounds i8, i8* %50, i64 %4839
  %4841 = load i8, i8* %4840, align 1, !tbaa !415
  br i1 %4640, label %after_bb652.us, label %after_bb664.us

after_bb652.us:                                   ; preds = %after_bb649.us
  %4842 = sdiv i32 11, %4629
  %4843 = and i32 %4842, %4633
  %4844 = sext i32 %4843 to i64
  %4845 = add nsw i64 %4782, %4844
  %4846 = getelementptr inbounds i8, i8* %50, i64 %4845
  %4847 = load i8, i8* %4846, align 1, !tbaa !415
  br i1 %.not1473, label %after_bb664.us, label %after_bb655.us

after_bb655.us:                                   ; preds = %after_bb652.us
  %4848 = sdiv i32 12, %4629
  %4849 = and i32 %4848, %4633
  %4850 = sext i32 %4849 to i64
  %4851 = add nsw i64 %4782, %4850
  %4852 = getelementptr inbounds i8, i8* %50, i64 %4851
  %4853 = load i8, i8* %4852, align 1, !tbaa !415
  br i1 %4641, label %after_bb658.us, label %after_bb664.us

after_bb658.us:                                   ; preds = %after_bb655.us
  %4854 = sdiv i32 13, %4629
  %4855 = and i32 %4854, %4633
  %4856 = sext i32 %4855 to i64
  %4857 = add nsw i64 %4782, %4856
  %4858 = getelementptr inbounds i8, i8* %50, i64 %4857
  %4859 = load i8, i8* %4858, align 1, !tbaa !415
  br i1 %.not1474, label %after_bb664.us, label %true_bb659.us

true_bb659.us:                                    ; preds = %after_bb658.us
  %4860 = sdiv i32 14, %4629
  %4861 = and i32 %4860, %4633
  %4862 = sext i32 %4861 to i64
  %4863 = add nsw i64 %4782, %4862
  %4864 = getelementptr inbounds i8, i8* %50, i64 %4863
  %4865 = load i8, i8* %4864, align 1, !tbaa !415
  br label %after_bb664.us

after_bb664.us:                                   ; preds = %true_bb659.us, %after_bb658.us, %after_bb655.us, %after_bb652.us, %after_bb649.us, %after_bb646.us, %after_bb643.us, %after_bb640.us, %after_bb637.us, %after_bb634.us, %after_bb631.us, %after_bb628.us, %after_bb625.us, %after_bb622.us, %"for resampled_input.s0.x.rebased614.us"
  %4866 = phi i8 [ %4859, %true_bb659.us ], [ %4859, %after_bb658.us ], [ 0, %after_bb655.us ], [ 0, %after_bb652.us ], [ 0, %after_bb649.us ], [ 0, %after_bb646.us ], [ 0, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4867 = phi i8 [ %4847, %true_bb659.us ], [ %4847, %after_bb658.us ], [ %4847, %after_bb655.us ], [ %4847, %after_bb652.us ], [ 0, %after_bb649.us ], [ 0, %after_bb646.us ], [ 0, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4868 = phi i8 [ %4835, %true_bb659.us ], [ %4835, %after_bb658.us ], [ %4835, %after_bb655.us ], [ %4835, %after_bb652.us ], [ %4835, %after_bb649.us ], [ %4835, %after_bb646.us ], [ 0, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4869 = phi i8 [ %4823, %true_bb659.us ], [ %4823, %after_bb658.us ], [ %4823, %after_bb655.us ], [ %4823, %after_bb652.us ], [ %4823, %after_bb649.us ], [ %4823, %after_bb646.us ], [ %4823, %after_bb643.us ], [ %4823, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4870 = phi i8 [ %4811, %true_bb659.us ], [ %4811, %after_bb658.us ], [ %4811, %after_bb655.us ], [ %4811, %after_bb652.us ], [ %4811, %after_bb649.us ], [ %4811, %after_bb646.us ], [ %4811, %after_bb643.us ], [ %4811, %after_bb640.us ], [ %4811, %after_bb637.us ], [ %4811, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4871 = phi i8 [ %4799, %true_bb659.us ], [ %4799, %after_bb658.us ], [ %4799, %after_bb655.us ], [ %4799, %after_bb652.us ], [ %4799, %after_bb649.us ], [ %4799, %after_bb646.us ], [ %4799, %after_bb643.us ], [ %4799, %after_bb640.us ], [ %4799, %after_bb637.us ], [ %4799, %after_bb634.us ], [ %4799, %after_bb631.us ], [ %4799, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4872 = phi i8 [ %4787, %true_bb659.us ], [ %4787, %after_bb658.us ], [ %4787, %after_bb655.us ], [ %4787, %after_bb652.us ], [ %4787, %after_bb649.us ], [ %4787, %after_bb646.us ], [ %4787, %after_bb643.us ], [ %4787, %after_bb640.us ], [ %4787, %after_bb637.us ], [ %4787, %after_bb634.us ], [ %4787, %after_bb631.us ], [ %4787, %after_bb628.us ], [ %4787, %after_bb625.us ], [ %4787, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4873 = phi i8 [ %4793, %true_bb659.us ], [ %4793, %after_bb658.us ], [ %4793, %after_bb655.us ], [ %4793, %after_bb652.us ], [ %4793, %after_bb649.us ], [ %4793, %after_bb646.us ], [ %4793, %after_bb643.us ], [ %4793, %after_bb640.us ], [ %4793, %after_bb637.us ], [ %4793, %after_bb634.us ], [ %4793, %after_bb631.us ], [ %4793, %after_bb628.us ], [ %4793, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4874 = phi i8 [ %4805, %true_bb659.us ], [ %4805, %after_bb658.us ], [ %4805, %after_bb655.us ], [ %4805, %after_bb652.us ], [ %4805, %after_bb649.us ], [ %4805, %after_bb646.us ], [ %4805, %after_bb643.us ], [ %4805, %after_bb640.us ], [ %4805, %after_bb637.us ], [ %4805, %after_bb634.us ], [ %4805, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4875 = phi i8 [ %4817, %true_bb659.us ], [ %4817, %after_bb658.us ], [ %4817, %after_bb655.us ], [ %4817, %after_bb652.us ], [ %4817, %after_bb649.us ], [ %4817, %after_bb646.us ], [ %4817, %after_bb643.us ], [ %4817, %after_bb640.us ], [ %4817, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4876 = phi i8 [ %4829, %true_bb659.us ], [ %4829, %after_bb658.us ], [ %4829, %after_bb655.us ], [ %4829, %after_bb652.us ], [ %4829, %after_bb649.us ], [ %4829, %after_bb646.us ], [ %4829, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4877 = phi i8 [ %4841, %true_bb659.us ], [ %4841, %after_bb658.us ], [ %4841, %after_bb655.us ], [ %4841, %after_bb652.us ], [ %4841, %after_bb649.us ], [ 0, %after_bb646.us ], [ 0, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4878 = phi i8 [ %4853, %true_bb659.us ], [ %4853, %after_bb658.us ], [ %4853, %after_bb655.us ], [ 0, %after_bb652.us ], [ 0, %after_bb649.us ], [ 0, %after_bb646.us ], [ 0, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4879 = phi i8 [ %4865, %true_bb659.us ], [ 0, %after_bb658.us ], [ 0, %after_bb655.us ], [ 0, %after_bb652.us ], [ 0, %after_bb649.us ], [ 0, %after_bb646.us ], [ 0, %after_bb643.us ], [ 0, %after_bb640.us ], [ 0, %after_bb637.us ], [ 0, %after_bb634.us ], [ 0, %after_bb631.us ], [ 0, %after_bb628.us ], [ 0, %after_bb625.us ], [ 0, %after_bb622.us ], [ 0, %"for resampled_input.s0.x.rebased614.us" ]
  %4880 = insertelement <16 x i8> <i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 poison, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, i8 %4784, i32 0
  %4881 = insertelement <16 x i8> %4880, i8 %4872, i32 1
  %4882 = insertelement <16 x i8> %4881, i8 %4873, i32 2
  %4883 = insertelement <16 x i8> %4882, i8 %4871, i32 3
  %4884 = insertelement <16 x i8> %4883, i8 %4874, i32 4
  %4885 = insertelement <16 x i8> %4884, i8 %4870, i32 5
  %4886 = insertelement <16 x i8> %4885, i8 %4875, i32 6
  %4887 = insertelement <16 x i8> %4886, i8 %4869, i32 7
  %4888 = insertelement <16 x i8> %4887, i8 %4876, i32 8
  %4889 = insertelement <16 x i8> %4888, i8 %4868, i32 9
  %4890 = insertelement <16 x i8> %4889, i8 %4877, i32 10
  %4891 = insertelement <16 x i8> %4890, i8 %4867, i32 11
  %4892 = insertelement <16 x i8> %4891, i8 %4878, i32 12
  %4893 = insertelement <16 x i8> %4892, i8 %4866, i32 13
  %4894 = insertelement <16 x i8> %4893, i8 %4879, i32 14
  %4895 = add nsw i64 %indvars.iv1968, %4776
  %4896 = shl nsw i64 %4895, 4
  %4897 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4896
  %4898 = bitcast i8* %4897 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %4894, <16 x i8>* %4898, i32 16, <16 x i1> %4515), !tbaa !417
  %indvars.iv.next1969 = add nuw nsw i64 %indvars.iv1968, 1
  %.not789.us = icmp eq i64 %indvars.iv1968, %4680
  br i1 %.not789.us, label %"end for resampled_input.s0.x.rebased615.loopexit.us", label %"for resampled_input.s0.x.rebased614.us"

"end for resampled_input.s0.x.rebased615.loopexit.us": ; preds = %after_bb664.us
  %indvars.iv.next1971 = add nuw nsw i64 %indvars.iv1970, 1
  %.not788.us = icmp eq i64 %indvars.iv1970, %4686
  br i1 %.not788.us, label %"consume resampled_input665", label %"for resampled_input.s0.y.rebased609.us"

"consume resampled_input665":                     ; preds = %"end for resampled_input.s0.x.rebased615.loopexit.us", %"end for resampled_input.s0.x.rebased602.loopexit.us", %next_bb590, %then_bb589
  br i1 %4642, label %"for output.s0.y.yo669.preheader", label %"end for output.s0.y.yo670", !prof !399

"for output.s0.y.yo669.preheader":                ; preds = %"consume resampled_input665"
  %4899 = load <8 x i32>, <8 x i32>* %4577, align 32
  %4900 = load <8 x i32>, <8 x i32>* %4580, align 32
  %4901 = shufflevector <8 x i32> %4899, <8 x i32> %4900, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4902 = trunc i64 %4711 to i32
  %4903 = mul i32 %67, %4902
  br label %"for output.s0.y.yo669"

"for output.s0.y.yo669":                          ; preds = %"for output.s0.y.yo669.preheader", %"end for output.s0.x.xo690"
  %indvars.iv1987 = phi i64 [ 0, %"for output.s0.y.yo669.preheader" ], [ %indvars.iv.next1988, %"end for output.s0.x.xo690" ]
  %output.s0.y.yo671 = phi i32 [ 0, %"for output.s0.y.yo669.preheader" ], [ %4928, %"end for output.s0.x.xo690" ]
  %4904 = add nsw i64 %indvars.iv1987, %4691
  %t2429672 = add nsw i32 %output.s0.y.yo671, %64
  %4905 = mul nsw i64 %4904, %4692
  %t2430673 = mul nsw i32 %t2429672, %stride_y
  %4906 = add nsw i32 %t2414667, %t2430673
  %t2431674 = mul nsw i32 %4906, %a196
  %4907 = add nsw i32 %4643, %t2430673
  %t2433676 = mul nsw i32 %4907, %a196
  %4908 = sub nsw i64 %4905, %4696
  %t2434677 = sub nsw i32 %t2430673, %resampled_input.y.min_realized582
  %t2435678 = mul nsw i32 %t2434677, %a196
  br i1 %4644, label %"for output.s0.x.xo689.preheader", label %"end for output.s0.x.xo690", !prof !399

"for output.s0.x.xo689.preheader":                ; preds = %"for output.s0.y.yo669"
  %4909 = mul nsw i64 %4908, %4682
  %4910 = add nsw i64 %4905, %4695
  %4911 = mul nsw i64 %4910, %4682
  %4912 = add nsw i64 %4905, %4693
  %4913 = mul nsw i64 %4912, %4682
  %4914 = trunc i64 %4904 to i32
  %4915 = mul i32 %66, %4914
  %t2415666 = add i32 %4915, %4903
  %t2428688 = sub i32 %t2415666, %reass.add1505
  %t2426687 = add nsw i32 %t2431674, %t2410668
  %t2425686 = add nsw i32 %t2431674, %t2432675
  %t2422685 = add nsw i32 %t2433676, %t2410668
  %t2421684 = add nsw i32 %t2433676, %t2432675
  %t2418683 = add nsw i32 %t2435678, %t2410668
  %t2417682 = add nsw i32 %t2435678, %t2432675
  %4916 = sub nsw i64 %4913, %4694
  %4917 = sub nsw i64 %4911, %4694
  %4918 = sub nsw i64 %4909, %4694
  %4919 = sext i32 %t2417682 to i64
  %4920 = sext i32 %t2418683 to i64
  %4921 = sext i32 %t2421684 to i64
  %4922 = sext i32 %t2422685 to i64
  %4923 = sext i32 %t2425686 to i64
  %4924 = sext i32 %t2426687 to i64
  %4925 = sext i32 %t2428688 to i64
  %4926 = trunc i64 %4908 to i32
  br label %"for output.s0.x.xo689"

"end for output.s0.y.yo670":                      ; preds = %"end for output.s0.x.xo690", %"consume resampled_input665"
  %indvars.iv.next2005 = add nuw nsw i64 %indvars.iv2004, 1
  %4927 = icmp eq i64 %indvars.iv.next2005, %zext2006
  br i1 %4927, label %if.then.i1139.loopexit, label %"for output.s0.b.rebased579"

"for output.s0.x.xo689":                          ; preds = %"for output.s0.x.xo689.preheader", %"consume convolved705"
  %indvars.iv1985 = phi i64 [ 0, %"for output.s0.x.xo689.preheader" ], [ %indvars.iv.next1986, %"consume convolved705" ]
  br i1 %4421, label %then_bb694, label %next_bb695

"end for output.s0.x.xo690":                      ; preds = %"consume convolved705", %"for output.s0.y.yo669"
  %indvars.iv.next1988 = add nuw nsw i64 %indvars.iv1987, 1
  %4928 = add nuw nsw i32 %output.s0.y.yo671, 1
  %.not781 = icmp eq i64 %indvars.iv.next1988, %4697
  br i1 %.not781, label %"end for output.s0.y.yo670", label %"for output.s0.y.yo669"

then_bb694:                                       ; preds = %"for output.s0.x.xo689"
  %4929 = load <16 x i16>, <16 x i16>* %4646, align 32, !tbaa !449
  %4930 = sext <16 x i16> %4929 to <16 x i32>
  %4931 = add nsw i64 %indvars.iv1985, %4647
  %4932 = mul nsw i64 %4931, %4648
  %4933 = add nsw i64 %4932, %4918
  %4934 = shl nsw i64 %4933, 4
  %4935 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4934
  %4936 = bitcast i8* %4935 to <16 x i8>*
  %4937 = load <16 x i8>, <16 x i8>* %4936, align 16, !tbaa !417
  %4938 = zext <16 x i8> %4937 to <16 x i32>
  %4939 = mul nsw <16 x i32> %4938, %4930
  %4940 = add nsw <16 x i32> %4939, %4901
  %4941 = load <16 x i16>, <16 x i16>* %4650, align 32, !tbaa !457
  %4942 = sext <16 x i16> %4941 to <16 x i32>
  %4943 = add nsw i64 %4932, %4919
  %4944 = shl nsw i64 %4943, 4
  %4945 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4944
  %4946 = bitcast i8* %4945 to <16 x i8>*
  %4947 = load <16 x i8>, <16 x i8>* %4946, align 16, !tbaa !417
  %4948 = zext <16 x i8> %4947 to <16 x i32>
  %4949 = mul nsw <16 x i32> %4948, %4942
  %4950 = add nsw <16 x i32> %4940, %4949
  %4951 = load <16 x i16>, <16 x i16>* %4652, align 32, !tbaa !459
  %4952 = sext <16 x i16> %4951 to <16 x i32>
  %4953 = add nsw i64 %4932, %4920
  %4954 = shl nsw i64 %4953, 4
  %4955 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4954
  %4956 = bitcast i8* %4955 to <16 x i8>*
  %4957 = load <16 x i8>, <16 x i8>* %4956, align 16, !tbaa !417
  %4958 = zext <16 x i8> %4957 to <16 x i32>
  %4959 = mul nsw <16 x i32> %4958, %4952
  %4960 = add nsw <16 x i32> %4950, %4959
  %4961 = load <16 x i16>, <16 x i16>* %4654, align 32, !tbaa !396
  %4962 = sext <16 x i16> %4961 to <16 x i32>
  %4963 = add nsw i64 %4932, %4917
  %4964 = shl nsw i64 %4963, 4
  %4965 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4964
  %4966 = bitcast i8* %4965 to <16 x i8>*
  %4967 = load <16 x i8>, <16 x i8>* %4966, align 16, !tbaa !417
  %4968 = zext <16 x i8> %4967 to <16 x i32>
  %4969 = mul nsw <16 x i32> %4968, %4962
  %4970 = add nsw <16 x i32> %4960, %4969
  %4971 = load <16 x i16>, <16 x i16>* %4656, align 32, !tbaa !396
  %4972 = sext <16 x i16> %4971 to <16 x i32>
  %4973 = add nsw i64 %4932, %4921
  %4974 = shl nsw i64 %4973, 4
  %4975 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4974
  %4976 = bitcast i8* %4975 to <16 x i8>*
  %4977 = load <16 x i8>, <16 x i8>* %4976, align 16, !tbaa !417
  %4978 = zext <16 x i8> %4977 to <16 x i32>
  %4979 = mul nsw <16 x i32> %4978, %4972
  %4980 = add nsw <16 x i32> %4970, %4979
  %4981 = load <16 x i16>, <16 x i16>* %4658, align 32, !tbaa !396
  %4982 = sext <16 x i16> %4981 to <16 x i32>
  %4983 = add nsw i64 %4932, %4922
  %4984 = shl nsw i64 %4983, 4
  %4985 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4984
  %4986 = bitcast i8* %4985 to <16 x i8>*
  %4987 = load <16 x i8>, <16 x i8>* %4986, align 16, !tbaa !417
  %4988 = zext <16 x i8> %4987 to <16 x i32>
  %4989 = mul nsw <16 x i32> %4988, %4982
  %4990 = add nsw <16 x i32> %4980, %4989
  %4991 = load <16 x i16>, <16 x i16>* %4660, align 32, !tbaa !396
  %4992 = sext <16 x i16> %4991 to <16 x i32>
  %4993 = add nsw i64 %4932, %4916
  %4994 = shl nsw i64 %4993, 4
  %4995 = getelementptr inbounds i8, i8* %resampled_input586, i64 %4994
  %4996 = bitcast i8* %4995 to <16 x i8>*
  %4997 = load <16 x i8>, <16 x i8>* %4996, align 16, !tbaa !417
  %4998 = zext <16 x i8> %4997 to <16 x i32>
  %4999 = mul nsw <16 x i32> %4998, %4992
  %5000 = add nsw <16 x i32> %4990, %4999
  %5001 = load <16 x i16>, <16 x i16>* %4662, align 32, !tbaa !396
  %5002 = sext <16 x i16> %5001 to <16 x i32>
  %5003 = add nsw i64 %4932, %4923
  %5004 = shl nsw i64 %5003, 4
  %5005 = getelementptr inbounds i8, i8* %resampled_input586, i64 %5004
  %5006 = bitcast i8* %5005 to <16 x i8>*
  %5007 = load <16 x i8>, <16 x i8>* %5006, align 16, !tbaa !417
  %5008 = zext <16 x i8> %5007 to <16 x i32>
  %5009 = mul nsw <16 x i32> %5008, %5002
  %5010 = add nsw <16 x i32> %5000, %5009
  %5011 = load <16 x i16>, <16 x i16>* %4664, align 32, !tbaa !396
  %5012 = sext <16 x i16> %5011 to <16 x i32>
  %5013 = add nsw i64 %4932, %4924
  %5014 = shl nsw i64 %5013, 4
  %5015 = getelementptr inbounds i8, i8* %resampled_input586, i64 %5014
  %5016 = bitcast i8* %5015 to <16 x i8>*
  %5017 = load <16 x i8>, <16 x i8>* %5016, align 16, !tbaa !417
  %5018 = zext <16 x i8> %5017 to <16 x i32>
  %5019 = mul nsw <16 x i32> %5018, %5012
  %5020 = add nsw <16 x i32> %5010, %5019
  %5021 = shufflevector <16 x i32> %5020, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5022 = shufflevector <16 x i32> %5020, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"consume convolved705"

next_bb695:                                       ; preds = %"for output.s0.x.xo689"
  %5023 = trunc i64 %indvars.iv1985 to i32
  %5024 = add nsw i32 %61, %5023
  %5025 = mul nsw i32 %5024, %stride_x
  %t2436696 = sub i32 %5025, %resampled_input.x.min_realized583
  br i1 %brmerge2223.demorgan, label %"for convolved.s1.r19$y697.us", label %"consume convolved705", !prof !392

"for convolved.s1.r19$y697.us":                   ; preds = %next_bb695, %"end for convolved.s1.r19$x703.loopexit.us"
  %indvars.iv1982 = phi i64 [ %indvars.iv.next1983, %"end for convolved.s1.r19$x703.loopexit.us" ], [ 0, %next_bb695 ]
  %convolved775.sroa.40.12.us = phi <8 x i32> [ %.lcssa2300, %"end for convolved.s1.r19$x703.loopexit.us" ], [ %4900, %next_bb695 ]
  %convolved775.sroa.0.12.us = phi <8 x i32> [ %5082, %"end for convolved.s1.r19$x703.loopexit.us" ], [ %4899, %next_bb695 ]
  %"convolved.s1.r19$y699.us" = phi i32 [ %5083, %"end for convolved.s1.r19$x703.loopexit.us" ], [ 0, %next_bb695 ]
  %5026 = mul nsw i64 %indvars.iv1982, %4688
  %5027 = mul nsw i32 %"convolved.s1.r19$y699.us", %a186
  %5028 = add nsw i32 %5027, %4926
  %5029 = mul nsw i32 %5028, %a196
  %t2438701.us = add nsw i32 %t2436696, %5029
  %5030 = sext i32 %t2438701.us to i64
  br i1 %4703, label %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa", label %"for convolved.s1.r19$x702.us"

"for convolved.s1.r19$x702.us":                   ; preds = %"for convolved.s1.r19$y697.us", %"for convolved.s1.r19$x702.us"
  %indvars.iv1980 = phi i64 [ %indvars.iv.next1981.1, %"for convolved.s1.r19$x702.us" ], [ 0, %"for convolved.s1.r19$y697.us" ]
  %convolved775.sroa.40.13.us = phi <8 x i32> [ %5063, %"for convolved.s1.r19$x702.us" ], [ %convolved775.sroa.40.12.us, %"for convolved.s1.r19$y697.us" ]
  %convolved775.sroa.0.13.us = phi <8 x i32> [ %5062, %"for convolved.s1.r19$x702.us" ], [ %convolved775.sroa.0.12.us, %"for convolved.s1.r19$y697.us" ]
  %niter2392 = phi i64 [ %niter2392.nsub.1, %"for convolved.s1.r19$x702.us" ], [ %unroll_iter2391, %"for convolved.s1.r19$y697.us" ]
  %5031 = shufflevector <8 x i32> %convolved775.sroa.0.13.us, <8 x i32> %convolved775.sroa.40.13.us, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5032 = add nsw i64 %indvars.iv1980, %5026
  %5033 = shl nsw i64 %5032, 4
  %5034 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %5033
  %5035 = bitcast i16* %5034 to <16 x i16>*
  %5036 = load <16 x i16>, <16 x i16>* %5035, align 32, !tbaa !396
  %5037 = sext <16 x i16> %5036 to <16 x i32>
  %5038 = mul nsw i64 %indvars.iv1980, %4645
  %5039 = add nsw i64 %5038, %5030
  %5040 = shl nsw i64 %5039, 4
  %5041 = getelementptr inbounds i8, i8* %resampled_input586, i64 %5040
  %5042 = bitcast i8* %5041 to <16 x i8>*
  %5043 = load <16 x i8>, <16 x i8>* %5042, align 16, !tbaa !417
  %5044 = zext <16 x i8> %5043 to <16 x i32>
  %5045 = mul nsw <16 x i32> %5044, %5037
  %5046 = add nsw <16 x i32> %5045, %5031
  %indvars.iv.next1981 = or i64 %indvars.iv1980, 1
  %5047 = add nsw i64 %indvars.iv.next1981, %5026
  %5048 = shl nsw i64 %5047, 4
  %5049 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %5048
  %5050 = bitcast i16* %5049 to <16 x i16>*
  %5051 = load <16 x i16>, <16 x i16>* %5050, align 32, !tbaa !396
  %5052 = sext <16 x i16> %5051 to <16 x i32>
  %5053 = mul nsw i64 %indvars.iv.next1981, %4645
  %5054 = add nsw i64 %5053, %5030
  %5055 = shl nsw i64 %5054, 4
  %5056 = getelementptr inbounds i8, i8* %resampled_input586, i64 %5055
  %5057 = bitcast i8* %5056 to <16 x i8>*
  %5058 = load <16 x i8>, <16 x i8>* %5057, align 16, !tbaa !417
  %5059 = zext <16 x i8> %5058 to <16 x i32>
  %5060 = mul nsw <16 x i32> %5059, %5052
  %5061 = add nsw <16 x i32> %5060, %5046
  %5062 = shufflevector <16 x i32> %5061, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5063 = shufflevector <16 x i32> %5061, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %indvars.iv.next1981.1 = add nuw nsw i64 %indvars.iv1980, 2
  %niter2392.nsub.1 = add i64 %niter2392, -2
  %niter2392.ncmp.1 = icmp eq i64 %niter2392.nsub.1, 0
  br i1 %niter2392.ncmp.1, label %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit", label %"for convolved.s1.r19$x702.us"

"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit": ; preds = %"for convolved.s1.r19$x702.us"
  %5064 = shufflevector <16 x i32> %5061, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa"

"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa": ; preds = %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit", %"for convolved.s1.r19$y697.us"
  %.lcssa2301.ph = phi <16 x i32> [ undef, %"for convolved.s1.r19$y697.us" ], [ %5061, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit" ]
  %.lcssa2300.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$y697.us" ], [ %5063, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit" ]
  %indvars.iv1980.unr = phi i64 [ 0, %"for convolved.s1.r19$y697.us" ], [ %indvars.iv.next1981.1, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.40.13.us.unr = phi <8 x i32> [ %convolved775.sroa.40.12.us, %"for convolved.s1.r19$y697.us" ], [ %5063, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit" ]
  %convolved775.sroa.0.13.us.unr = phi <8 x i32> [ %convolved775.sroa.0.12.us, %"for convolved.s1.r19$y697.us" ], [ %5064, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa.loopexit" ]
  br i1 %lcmp.mod2390.not, label %"end for convolved.s1.r19$x703.loopexit.us", label %"for convolved.s1.r19$x702.us.epil"

"for convolved.s1.r19$x702.us.epil":              ; preds = %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa"
  %5065 = shufflevector <8 x i32> %convolved775.sroa.0.13.us.unr, <8 x i32> %convolved775.sroa.40.13.us.unr, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5066 = add nsw i64 %indvars.iv1980.unr, %5026
  %5067 = shl nsw i64 %5066, 4
  %5068 = getelementptr inbounds i16, i16* %filter_zeroed535, i64 %5067
  %5069 = bitcast i16* %5068 to <16 x i16>*
  %5070 = load <16 x i16>, <16 x i16>* %5069, align 32, !tbaa !396
  %5071 = sext <16 x i16> %5070 to <16 x i32>
  %5072 = mul nsw i64 %indvars.iv1980.unr, %4645
  %5073 = add nsw i64 %5072, %5030
  %5074 = shl nsw i64 %5073, 4
  %5075 = getelementptr inbounds i8, i8* %resampled_input586, i64 %5074
  %5076 = bitcast i8* %5075 to <16 x i8>*
  %5077 = load <16 x i8>, <16 x i8>* %5076, align 16, !tbaa !417
  %5078 = zext <16 x i8> %5077 to <16 x i32>
  %5079 = mul nsw <16 x i32> %5078, %5071
  %5080 = add nsw <16 x i32> %5079, %5065
  %5081 = shufflevector <16 x i32> %5080, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  br label %"end for convolved.s1.r19$x703.loopexit.us"

"end for convolved.s1.r19$x703.loopexit.us":      ; preds = %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa", %"for convolved.s1.r19$x702.us.epil"
  %.lcssa2301 = phi <16 x i32> [ %.lcssa2301.ph, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa" ], [ %5080, %"for convolved.s1.r19$x702.us.epil" ]
  %.lcssa2300 = phi <8 x i32> [ %.lcssa2300.ph, %"end for convolved.s1.r19$x703.loopexit.us.unr-lcssa" ], [ %5081, %"for convolved.s1.r19$x702.us.epil" ]
  %5082 = shufflevector <16 x i32> %.lcssa2301, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %indvars.iv.next1983 = add nuw nsw i64 %indvars.iv1982, 1
  %5083 = add nuw nsw i32 %"convolved.s1.r19$y699.us", 1
  %.not786.us = icmp eq i64 %indvars.iv.next1983, %4689
  br i1 %.not786.us, label %"consume convolved705.loopexit", label %"for convolved.s1.r19$y697.us"

"consume convolved705.loopexit":                  ; preds = %"end for convolved.s1.r19$x703.loopexit.us"
  %5084 = shufflevector <16 x i32> %.lcssa2301, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  br label %"consume convolved705"

"consume convolved705":                           ; preds = %next_bb695, %"consume convolved705.loopexit", %then_bb694
  %convolved775.sroa.40.15 = phi <8 x i32> [ %5022, %then_bb694 ], [ %4900, %next_bb695 ], [ %.lcssa2300, %"consume convolved705.loopexit" ]
  %convolved775.sroa.0.15 = phi <8 x i32> [ %5021, %then_bb694 ], [ %4899, %next_bb695 ], [ %5084, %"consume convolved705.loopexit" ]
  %5085 = select <8 x i1> %4517, <8 x i32> %convolved775.sroa.0.15, <8 x i32> undef
  %5086 = select <8 x i1> %4520, <8 x i32> %convolved775.sroa.40.15, <8 x i32> undef
  %5087 = shufflevector <8 x i32> %5085, <8 x i32> %5086, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5088 = sext <16 x i32> %5087 to <16 x i64>
  %5089 = mul nsw <16 x i64> %5088, %4667
  %5090 = ashr <16 x i64> %5089, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5091 = add nsw <16 x i64> %5090, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a201 = ashr <16 x i64> %5091, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5092 = shufflevector <16 x i64> %a201, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5093 = icmp slt <4 x i64> %5092, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5094 = shufflevector <16 x i64> %a201, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5095 = icmp slt <4 x i64> %5094, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5096 = shufflevector <16 x i64> %a201, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %5097 = icmp slt <4 x i64> %5096, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5098 = shufflevector <16 x i64> %a201, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %5099 = icmp slt <4 x i64> %5098, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5100 = select <4 x i1> %5093, <4 x i64> %5092, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5101 = select <4 x i1> %5095, <4 x i64> %5094, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5102 = select <4 x i1> %5097, <4 x i64> %5096, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5103 = select <4 x i1> %5099, <4 x i64> %5098, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5104 = icmp sgt <4 x i64> %5100, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5105 = icmp sgt <4 x i64> %5101, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5106 = icmp sgt <4 x i64> %5102, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5107 = icmp sgt <4 x i64> %5103, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5108 = select <4 x i1> %5104, <4 x i64> %5100, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5109 = select <4 x i1> %5105, <4 x i64> %5101, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5110 = select <4 x i1> %5106, <4 x i64> %5102, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5111 = select <4 x i1> %5107, <4 x i64> %5103, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5112 = shufflevector <4 x i64> %5108, <4 x i64> %5109, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5113 = shufflevector <4 x i64> %5110, <4 x i64> %5111, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5114 = shufflevector <8 x i64> %5112, <8 x i64> %5113, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5115 = trunc <16 x i64> %5114 to <16 x i32>
  %5116 = ashr <16 x i32> %5115, %4669
  %5117 = lshr <16 x i32> %5115, %4673
  %5118 = and <16 x i32> %5117, %4670
  %5119 = add nsw <16 x i32> %5118, %5116
  %5120 = shufflevector <16 x i32> %5119, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %5121 = shufflevector <16 x i32> %5119, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %5122 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %5120, <8 x i32> %5121) #11
  %5123 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %5122, <16 x i16> %4676)
  %5124 = shufflevector <16 x i16> %5123, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5125 = shufflevector <16 x i16> %5123, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5126 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %5124, <8 x i16> %5125) #11
  %5127 = icmp ugt <16 x i8> %b201, %5126
  %a198 = select <16 x i1> %5127, <16 x i8> %5126, <16 x i8> %b201
  %5128 = icmp ugt <16 x i8> %a198, %b200
  %5129 = select <16 x i1> %5128, <16 x i8> %a198, <16 x i8> %b200
  %5130 = add nsw i64 %indvars.iv1985, %4647
  %5131 = mul nsw i64 %5130, %4679
  %5132 = add nsw i64 %5131, %4925
  %5133 = getelementptr inbounds i8, i8* %59, i64 %5132
  %5134 = bitcast i8* %5133 to <16 x i8>*
  call void @llvm.masked.store.v16i8.p0v16i8(<16 x i8> %5129, <16 x i8>* %5134, i32 1, <16 x i1> %4515), !tbaa !462
  %indvars.iv.next1986 = add nuw nsw i64 %indvars.iv1985, 1
  %.not785 = icmp eq i64 %indvars.iv.next1986, %4690
  br i1 %.not785, label %"end for output.s0.x.xo690", label %"for output.s0.x.xo689"
}

; Function Attrs: nounwind
define i32 @depthwise_conv_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i64 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 8
  %9 = getelementptr i8*, i8** %0, i64 3
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr i8*, i8** %0, i64 4
  %13 = bitcast i8** %12 to %struct.halide_buffer_t**
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %13, align 8
  %15 = getelementptr i8*, i8** %0, i64 5
  %16 = bitcast i8** %15 to i32**
  %17 = load i32*, i32** %16, align 8
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr i8*, i8** %0, i64 6
  %20 = bitcast i8** %19 to i32**
  %21 = load i32*, i32** %20, align 8
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr i8*, i8** %0, i64 7
  %24 = bitcast i8** %23 to i32**
  %25 = load i32*, i32** %24, align 8
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr i8*, i8** %0, i64 8
  %28 = bitcast i8** %27 to i32**
  %29 = load i32*, i32** %28, align 8
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr i8*, i8** %0, i64 9
  %32 = bitcast i8** %31 to i32**
  %33 = load i32*, i32** %32, align 8
  %34 = load i32, i32* %33, align 4
  %35 = getelementptr i8*, i8** %0, i64 10
  %36 = bitcast i8** %35 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr i8*, i8** %0, i64 11
  %40 = bitcast i8** %39 to i32**
  %41 = load i32*, i32** %40, align 8
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr i8*, i8** %0, i64 12
  %44 = load i8*, i8** %43, align 8
  %45 = load i8, i8* %44, align 1
  %46 = getelementptr i8*, i8** %0, i64 13
  %47 = load i8*, i8** %46, align 8
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr i8*, i8** %0, i64 14
  %50 = load i8*, i8** %49, align 8
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr i8*, i8** %0, i64 15
  %53 = bitcast i8** %52 to %struct.halide_buffer_t**
  %54 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %53, align 8
  %55 = tail call i32 @depthwise_conv(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 %11, %struct.halide_buffer_t* %14, i32 %18, i32 %22, i32 %26, i32 %30, i32 %34, i32 %38, i32 %42, i8 %45, i8 %48, i8 %51, %struct.halide_buffer_t* %54) #19
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @depthwise_conv_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @depthwise_conv_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>*, i32 immarg, <16 x i1>, <16 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v16i16.p0v16i16(<16 x i16>, <16 x i16>*, i32 immarg, <16 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v8i32.p0v8i32(<8 x i32>, <8 x i32>*, i32 immarg, <8 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <8 x i32> @llvm.masked.load.v8i32.p0v8i32(<8 x i32>*, i32 immarg, <8 x i1>, <8 x i32>) #13

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <16 x i16> @llvm.masked.load.v16i16.p0v16i16(<16 x i16>*, i32 immarg, <16 x i1>, <16 x i16>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v16i8.p0v16i8(<16 x i8>, <16 x i8>*, i32 immarg, <16 x i1>) #5

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #14

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #15

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #16

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { argmemonly nofree nosync nounwind readonly willreturn }
attributes #14 = { nofree nosync nounwind willreturn writeonly }
attributes #15 = { nofree nosync nounwind readonly willreturn }
attributes #16 = { nofree nosync nounwind readnone willreturn }
attributes #17 = { nobuiltin nounwind "no-builtins" }
attributes #18 = { nobuiltin "no-builtins" }
attributes #19 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!387, !19, i64 8}
!387 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!388 = !{!387, !11, i64 0}
!389 = !{!"branch_weights", i32 1, i32 2000}
!390 = !{!387, !19, i64 16}
!391 = !{!"branch_weights", i32 0, i32 1073741824}
!392 = !{!"branch_weights", i32 -2147483648, i32 0}
!393 = !{!394, !394, i64 0}
!394 = !{!"filter", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"filter_zeroed", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!"branch_weights", i32 1073741824, i32 0}
!400 = distinct !{!400, !186}
!401 = !{!402, !402, i64 0}
!402 = !{!"bias", !395, i64 0}
!403 = !{!404, !404, i64 0}
!404 = !{!"offset_c.width8.base0", !405, i64 0}
!405 = !{!"offset_c.width16.base0", !406, i64 0}
!406 = !{!"offset_c.width32.base0", !407, i64 0}
!407 = !{!"offset_c.width64.base0", !408, i64 0}
!408 = !{!"offset_c.width128.base0", !409, i64 0}
!409 = !{!"offset_c.width256.base0", !410, i64 0}
!410 = !{!"offset_c.width512.base0", !411, i64 0}
!411 = !{!"offset_c.width1024.base0", !412, i64 0}
!412 = !{!"offset_c", !395, i64 0}
!413 = !{!414, !414, i64 0}
!414 = !{!"offset_c.width8.base8", !405, i64 0}
!415 = !{!416, !416, i64 0}
!416 = !{!"input", !395, i64 0}
!417 = !{!418, !418, i64 0}
!418 = !{!"resampled_input", !395, i64 0}
!419 = distinct !{!419, !186}
!420 = !{!"branch_weights", i32 0, i32 -2147483648}
!421 = !{!422, !422, i64 0}
!422 = !{!"convolved.width8.base0", !423, i64 0}
!423 = !{!"convolved.width16.base0", !424, i64 0}
!424 = !{!"convolved.width32.base0", !425, i64 0}
!425 = !{!"convolved.width64.base0", !426, i64 0}
!426 = !{!"convolved.width128.base0", !427, i64 0}
!427 = !{!"convolved.width256.base0", !428, i64 0}
!428 = !{!"convolved.width512.base0", !429, i64 0}
!429 = !{!"convolved.width1024.base0", !430, i64 0}
!430 = !{!"convolved", !395, i64 0}
!431 = !{!432, !432, i64 0}
!432 = !{!"convolved.width8.base8", !423, i64 0}
!433 = !{!434, !434, i64 0}
!434 = !{!"convolved.width8.base16", !435, i64 0}
!435 = !{!"convolved.width16.base16", !424, i64 0}
!436 = !{!437, !437, i64 0}
!437 = !{!"convolved.width8.base24", !435, i64 0}
!438 = !{!439, !439, i64 0}
!439 = !{!"convolved.width8.base32", !440, i64 0}
!440 = !{!"convolved.width16.base32", !441, i64 0}
!441 = !{!"convolved.width32.base32", !425, i64 0}
!442 = !{!443, !443, i64 0}
!443 = !{!"convolved.width8.base40", !440, i64 0}
!444 = !{!445, !445, i64 0}
!445 = !{!"convolved.width8.base48", !446, i64 0}
!446 = !{!"convolved.width16.base48", !441, i64 0}
!447 = !{!448, !448, i64 0}
!448 = !{!"convolved.width8.base56", !446, i64 0}
!449 = !{!450, !450, i64 0}
!450 = !{!"filter_zeroed.width16.base0", !451, i64 0}
!451 = !{!"filter_zeroed.width32.base0", !452, i64 0}
!452 = !{!"filter_zeroed.width64.base0", !453, i64 0}
!453 = !{!"filter_zeroed.width128.base0", !454, i64 0}
!454 = !{!"filter_zeroed.width256.base0", !455, i64 0}
!455 = !{!"filter_zeroed.width512.base0", !456, i64 0}
!456 = !{!"filter_zeroed.width1024.base0", !397, i64 0}
!457 = !{!458, !458, i64 0}
!458 = !{!"filter_zeroed.width16.base16", !451, i64 0}
!459 = !{!460, !460, i64 0}
!460 = !{!"filter_zeroed.width16.base32", !461, i64 0}
!461 = !{!"filter_zeroed.width32.base32", !452, i64 0}
!462 = !{!463, !463, i64 0}
!463 = !{!"output", !395, i64 0}
!464 = distinct !{!464, !186}
!465 = distinct !{!465, !186}
!466 = distinct !{!466, !186}
!467 = distinct !{!467, !186}
!468 = !{!469, !469, i64 0}
!469 = !{!"bias.width8.base0", !470, i64 0}
!470 = !{!"bias.width16.base0", !471, i64 0}
!471 = !{!"bias.width32.base0", !472, i64 0}
!472 = !{!"bias.width64.base0", !473, i64 0}
!473 = !{!"bias.width128.base0", !474, i64 0}
!474 = !{!"bias.width256.base0", !475, i64 0}
!475 = !{!"bias.width512.base0", !476, i64 0}
!476 = !{!"bias.width1024.base0", !402, i64 0}
!477 = !{!478, !478, i64 0}
!478 = !{!"bias.width8.base8", !470, i64 0}
!479 = distinct !{!479, !186}
!480 = distinct !{!480, !186}
!481 = distinct !{!481, !186}
!482 = distinct !{!482, !186}
!483 = distinct !{!483, !186}
!484 = distinct !{!484, !186}
!485 = distinct !{!485, !186}
!486 = distinct !{!486, !186}
!487 = distinct !{!487, !186}
