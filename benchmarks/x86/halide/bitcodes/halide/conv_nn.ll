; ModuleID = 'conv_nn'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant i64 0
@1 = private constant [8 x i64*] [i64* @0, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str = private constant [6 x i8] c"input\00", align 32
@str.200 = private constant [11 x i8] c"input_zero\00", align 32
@2 = private constant i64 0
@3 = private constant i64 2
@4 = private constant i64 0
@5 = private constant i64 8
@6 = private constant i64 0
@7 = private constant i64 0
@8 = private constant i64 0
@9 = private constant i64 0
@10 = private constant [12 x i64*] [i64* @2, i64* @3, i64* @4, i64* @5, i64* @6, i64* null, i64* @7, i64* null, i64* @8, i64* null, i64* @9, i64* null]
@str.201 = private constant [7 x i8] c"filter\00", align 32
@str.202 = private constant [12 x i8] c"filter_zero\00", align 32
@11 = private constant i64 0
@12 = private constant [2 x i64*] [i64* @11, i64* null]
@str.203 = private constant [5 x i8] c"bias\00", align 32
@str.204 = private constant [9 x i8] c"stride_x\00", align 32
@str.205 = private constant [9 x i8] c"stride_y\00", align 32
@str.206 = private constant [11 x i8] c"dilation_x\00", align 32
@str.207 = private constant [11 x i8] c"dilation_y\00", align 32
@str.208 = private constant [18 x i8] c"output_multiplier\00", align 32
@str.209 = private constant [13 x i8] c"output_shift\00", align 32
@str.210 = private constant [12 x i8] c"output_zero\00", align 32
@str.211 = private constant [11 x i8] c"output_min\00", align 32
@str.212 = private constant [11 x i8] c"output_max\00", align 32
@13 = private constant i64 0
@14 = private constant [8 x i64*] [i64* @13, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null, i64* null]
@str.213 = private constant [7 x i8] c"output\00", align 32
@15 = private constant [15 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @1, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.200, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.201, i32 0, i32 0), i32 1, i32 6, %struct.halide_type_t { i8 0, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([12 x i64*], [12 x i64*]* @10, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.202, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.203, i32 0, i32 0), i32 1, i32 1, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([2 x i64*], [2 x i64*]* @12, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.204, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.205, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.206, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.207, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str.208, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.209, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 0, i8 32, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.210, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.211, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.212, i32 0, i32 0), i32 0, i32 0, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** null }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.213, i32 0, i32 0), i32 2, i32 4, %struct.halide_type_t { i8 1, i8 8, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([8 x i64*], [8 x i64*]* @14, i32 0, i32 0) }]
@str.214 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.215 = private constant [8 x i8] c"conv_nn\00", align 32
@conv_nn_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 15, %struct.halide_filter_argument_t* getelementptr inbounds ([15 x %struct.halide_filter_argument_t], [15 x %struct.halide_filter_argument_t]* @15, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.214, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.215, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #17
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #17
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak noalias i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #17
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #17
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #17
  call void @halide_print(i8* %user_context, i8* nonnull %0) #17
  call void @abort() #17
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #17
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #17
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #17
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #17
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #17
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #17
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #17
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #18
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #18
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #17
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #17
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #18
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #18
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #18
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #18
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #17
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #17
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  tail call void @halide_thread_yield() #17
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  tail call void @halide_thread_yield() #17
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #17
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #18
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #18
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #18
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #18
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #17
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #17
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #17
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #17
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #17
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #17
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #17
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #17
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #17
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #17
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #17
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #17
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #17
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #17
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #17
  call void @abort() #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #17
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #17
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #17
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #18
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #17
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #17
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #17
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #17
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #18
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #17
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #18
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #17
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #17
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #18
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #17
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #17
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #18
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #17
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #17
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #17
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #17
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #17
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #17
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #17
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #17
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #17
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #17
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #17
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #17
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #18
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #18
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #18
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #17
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #17
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #17
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #17
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #17
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #17
  tail call void @halide_free(i8* %user_context, i8* %array) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #18
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #18
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #17
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #18
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #18
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #17
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #17
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #17
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #17
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #17
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #18
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #17
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #17
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #17
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #17
  tail call void @abort() #17
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #17
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #17
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #17
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #17
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #17
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #17
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #17
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #17
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #17
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #17
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #17
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #17
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #17
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #17
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #17
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #17
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #17
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #17
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #17
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #17
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #17
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #17
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #17
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #17
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #17
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #17
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #17
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #17
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #17
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #17
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #17
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #17
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #17
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #17
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #17
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #17
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #17
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #17
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #17
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #17
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #17
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #17
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #17
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #17
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #17
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #17
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #17
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #17
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #17
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #17
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #17
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #17
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #17
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #17
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #17
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #17
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #17
  tail call void @halide_set_trace_file(i32 %call5) #18
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #17
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #18
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #17
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #17
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #17
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #17
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #17
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #17
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #17
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #17
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #17
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #18
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #18
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #17
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #17
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #17
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #18
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #17
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #17
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #17
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #17
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #17
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #17
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #17
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #17
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #17
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #17
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #17
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #17
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #17
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #18
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #17
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #17
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #17
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #18
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #17
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #18
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #18
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #17
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #17
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %cmp130.not = icmp eq i64 %4, 1
  br i1 %cmp130.not, label %for.cond23.preheader, label %for.body.for.body_crit_edge.preheader, !llvm.loop !258

for.body.for.body_crit_edge.preheader:            ; preds = %for.body.preheader
  %arrayidx2 = getelementptr inbounds i8, i8* %cache_key, i64 1
  %6 = load i8, i8* %arrayidx2, align 1, !tbaa !14
  %arrayidx213 = getelementptr inbounds i8, i8* %add.ptr18, i64 1
  store i8 %6, i8* %arrayidx213, align 1, !tbaa !14
  %7 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp4 = icmp ugt i64 %7, 2
  br i1 %cmp4, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, %for.body.for.body_crit_edge.preheader, %for.body.preheader, %if.end
  %8 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %8, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge: ; preds = %for.body.for.body_crit_edge.preheader, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge
  %inc5 = phi i64 [ %inc, %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge ], [ 2, %for.body.for.body_crit_edge.preheader ]
  %.pre.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc5
  %9 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre.pre, i64 %inc5
  store i8 %9, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc5, 1
  %10 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %10
  br i1 %cmp, label %for.body.for.body_crit_edge.for.body.for.body_crit_edge_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %11 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %11, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 %indvars.iv121
  %14 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %15 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %14, i8* nonnull align 4 dereferenceable(16) %15, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %16 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %17 = sext i32 %16 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %17
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %19 = zext i32 %18 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %19
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %20 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %21 = load i8*, i8** %20, align 8, !tbaa !10
  %22 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %22, i64 %indvars.iv119
  %23 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %23, i8* nonnull align 8 dereferenceable(56) %21, i64 56, i1 false), !tbaa.struct !263
  %24 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %25 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %26 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %25, %26
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %24, i64 %idx.ext
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %25, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %28 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %28, i64 0, i32 6
  %29 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %30 = load i8*, i8** %29, align 8, !tbaa !176
  %31 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %31, i8* nonnull align 4 dereferenceable(16) %30, i64 16, i1 false), !tbaa.struct !177
  %32 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %32, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %33 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %33, i64 0, i32 6
  %34 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %34, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %35 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %36 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %35, i8* nonnull align 4 dereferenceable(16) %36, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %37 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %38 = sext i32 %37 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %38
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %39 = xor i1 %tobool.not, true
  ret i1 %39
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #18
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #17
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #18
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #18
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #18
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #18
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #18
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #18
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #17
  tail call void @abort() #17
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #18
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #17
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #18
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #18
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #18
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #18
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #18
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #18
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #18
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #18
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #18
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #17
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #18
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #18
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #17
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #18
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #18
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #17
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #17
  tail call void @abort() #17
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #17
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #18
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #17
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #18
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #18
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #17
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #18
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #18
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #18
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #18
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #18
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #18
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #18
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #18
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #18
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #18
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #18
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #18
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #18
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #18
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #18
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #18
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #18
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #18
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #18
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #18
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #18
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #18
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #18
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #18
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #18
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #18
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #18
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #18
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #18
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #18
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #18
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #18
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #18
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #18
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #18
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #18
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #18
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #18
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #17
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #17
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #17
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #18
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #17
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #18
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #17
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #17
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #17
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #18
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #17
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #18
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #18
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #17
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #17
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #17
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #17
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #17
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #18
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #17
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #18
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #17
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #18
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #18
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #18
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #18
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #18
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #18
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #17
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #18
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #17
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #17
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #17
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #17
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #17
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #17
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #17
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #17
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #17
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #17
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #17
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #17
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #18
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #17
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #17
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #17
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #17
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #17
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #17
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #17
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #17
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #17
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #17
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #17
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #17
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #17
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #17
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #17
  %call.i = call i8* @malloc(i64 1024) #17
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #17
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #17
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #17
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #17
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #17
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #17
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #17
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #17
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #17
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #17
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #17
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #17
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #17
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #17
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #17
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #17
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #17
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #17
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #17
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #17
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #17
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #17
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #17
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #17
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #17
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #17
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #17
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #17
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #17
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #17
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #17
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #17
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #17
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #17
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #17
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #17
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #17
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #17
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #17
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #17
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #17
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #17
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #17
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #17
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #17
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #17
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #17
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #17
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #17
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #17
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #17
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #17
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #17
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #17
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #17
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #17
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #17
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #17
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #17
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #17
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #17
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #17
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #17
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #17
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #17
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #17
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #17
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #17
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #17
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #17
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #17
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #17
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #17
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #17
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #17
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #17
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #17
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #17
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #17
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #17
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #17
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #17
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #17
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #17
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #17
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #17
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #17
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #17
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #17
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #17
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #17
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #17
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #17
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #17
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #17
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #17
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #17
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #18
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #18
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #17
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #17
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #17
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #17
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #17
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #17
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #17
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #17
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #17
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #17
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #17
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #17
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #17
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #17
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #17
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #17
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #17
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #17
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #17
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #17
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #17
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #17
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #17
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #17
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #17
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #17
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #17
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #17
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #17
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #17
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #17
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #17
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #17
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #17
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #17
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #17
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #17
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #17
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #17
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #17
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #17
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #17
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #17
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #17
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #17
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #18
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #17
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #18
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #17
  call void @halide_sleep_ms(i8* null, i32 %call422) #17
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #17
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #18
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #17
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #17
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #17
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #17
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #18
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #17
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #17
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #17
  tail call void @abort() #17
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #17
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #18
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #18
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #8

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #8

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32>, <8 x i32>) #8

; Function Attrs: nounwind readnone
declare <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16>, <16 x i16>) #8

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #17
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #17
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #17
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #17
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #17
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #17
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #9 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16>, <16 x i16>) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #7

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #8

; Function Attrs: nounwind
define i32 @conv_nn(%struct.halide_buffer_t* noalias readonly %input.buffer, i8 %input_zero, %struct.halide_buffer_t* noalias readonly %filter.buffer, i8 %filter_zero, %struct.halide_buffer_t* noalias nocapture readonly %bias.buffer, i32 %stride_x, i32 %stride_y, i32 %dilation_x, i32 %dilation_y, i32 %output_multiplier, i32 %output_shift, i8 %output_zero, i8 %output_min, i8 %output_max, %struct.halide_buffer_t* noalias readonly %output.buffer) local_unnamed_addr #10 {
if.end.i:
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i64 0, i32 2
  %0 = bitcast i8** %host.i to i32**
  %1 = load i32*, i32** %0, align 8, !tbaa !172
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %bias.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %3 = load i32, i32* %extent.i, align 4, !tbaa !178
  %host.i2228 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i64 0, i32 2
  %4 = load i8*, i8** %host.i2228, align 8, !tbaa !172
  %dim.i2229 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %filter.buffer, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2229, align 8, !tbaa !176
  %extent.i2244 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 2, i32 1
  %6 = load i32, i32* %extent.i2244, align 4, !tbaa !178
  %stride.i2250 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 3, i32 2
  %7 = load i32, i32* %stride.i2250, align 4, !tbaa !182
  %extent.i2254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 4, i32 1
  %8 = load i32, i32* %extent.i2254, align 4, !tbaa !178
  %stride.i2256 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 4, i32 2
  %9 = load i32, i32* %stride.i2256, align 4, !tbaa !182
  %extent.i2260 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 5, i32 1
  %10 = load i32, i32* %extent.i2260, align 4, !tbaa !178
  %stride.i2262 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 5, i32 2
  %11 = load i32, i32* %stride.i2262, align 4, !tbaa !182
  %host.i2263 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %12 = load i8*, i8** %host.i2263, align 8, !tbaa !172
  %dim.i2264 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %13 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2264, align 8, !tbaa !176
  %extent.i2267 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 0, i32 1
  %14 = load i32, i32* %extent.i2267, align 4, !tbaa !178
  %min.i2271 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 1, i32 0
  %15 = load i32, i32* %min.i2271, align 4, !tbaa !181
  %stride.i2273 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 1, i32 2
  %16 = load i32, i32* %stride.i2273, align 4, !tbaa !182
  %min.i2275 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 2, i32 0
  %17 = load i32, i32* %min.i2275, align 4, !tbaa !181
  %stride.i2277 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 2, i32 2
  %18 = load i32, i32* %stride.i2277, align 4, !tbaa !182
  %min.i2279 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 3, i32 0
  %19 = load i32, i32* %min.i2279, align 4, !tbaa !181
  %extent.i2281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 3, i32 1
  %20 = load i32, i32* %extent.i2281, align 4, !tbaa !178
  %stride.i2283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %13, i64 3, i32 2
  %21 = load i32, i32* %stride.i2283, align 4, !tbaa !182
  %host.i2284 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 2
  %22 = load i8*, i8** %host.i2284, align 8, !tbaa !172
  %dim.i2285 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %output.buffer, i64 0, i32 6
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2285, align 8, !tbaa !176
  %min.i2292 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 1, i32 0
  %24 = load i32, i32* %min.i2292, align 4, !tbaa !181
  %extent.i2294 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 1, i32 1
  %25 = load i32, i32* %extent.i2294, align 4, !tbaa !178
  %stride.i2296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 1, i32 2
  %26 = load i32, i32* %stride.i2296, align 4, !tbaa !182
  %min.i2298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 2, i32 0
  %27 = load i32, i32* %min.i2298, align 4, !tbaa !181
  %extent.i2300 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 2, i32 1
  %28 = load i32, i32* %extent.i2300, align 4, !tbaa !178
  %stride.i2302 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 2, i32 2
  %29 = load i32, i32* %stride.i2302, align 4, !tbaa !182
  %stride.i2308 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 3, i32 2
  %30 = load i32, i32* %stride.i2308, align 4, !tbaa !182
  %31 = and i32 %3, 31
  %t4458 = icmp eq i32 %31, 0
  %32 = icmp slt i32 %3, 8
  %t4459 = select i1 %32, i32 %3, i32 8
  %33 = icmp sgt i32 %25, 1
  %34 = and i1 %t4458, %33
  %35 = add nsw i32 %3, -1
  %36 = or i32 %35, 31
  %37 = icmp sgt i32 %25, 3
  %38 = and i32 %3, 15
  %39 = icmp eq i32 %38, 0
  %40 = and i1 %39, %37
  %41 = or i32 %35, 15
  %42 = icmp sgt i32 %25, 7
  %43 = and i32 %3, 7
  %44 = icmp eq i32 %43, 0
  %45 = and i1 %44, %42
  %46 = ashr i32 %35, 3
  %47 = or i32 %35, 7
  %48 = icmp sgt i32 %25, 0
  %49 = and i1 %t4458, %48
  %50 = add nsw i32 %t4459, -1
  %a2 = ashr i32 %50, 3
  %51 = icmp slt i32 %46, 3
  %52 = select i1 %51, i32 %46, i32 3
  %53 = and i32 %a2, -4
  %b4 = add nsw i32 %53, %52
  %54 = icmp sgt i32 %b4, %a2
  %55 = select i1 %54, i32 %a2, i32 %b4
  %56 = add nsw i32 %55, %46
  %57 = shl nsw i32 %56, 3
  %58 = or i32 %57, 7
  %59 = select i1 %49, i32 %36, i32 %58
  %60 = select i1 %45, i32 %47, i32 %59
  %61 = select i1 %40, i32 %41, i32 %60
  %62 = select i1 %34, i32 %36, i32 %61
  %a1 = add nsw i32 %62, 1
  %.not = icmp slt i32 %62, %3
  %a5 = select i1 %.not, i32 %3, i32 %a1
  %63 = icmp sgt i32 %a5, 0
  %64 = select i1 %63, i32 %a5, i32 0
  %t4466 = zext i32 %64 to i64
  %65 = shl nuw nsw i64 %t4466, 2
  %66 = add nuw nsw i64 %65, 12
  %cmp7.i = icmp ugt i32 %64, 4093
  br i1 %cmp7.i, label %pseudostack_alloc.exit, label %then_bb

pseudostack_alloc.exit:                           ; preds = %if.end.i
  %call.i = tail call i8* @halide_malloc(i8* null, i64 %66) #17
  %67 = bitcast i8* %call.i to i32*
  %.not1915 = icmp eq i8* %call.i, null
  br i1 %.not1915, label %then_bb, label %"produce bias_im_global_wrapper$0", !prof !386

then_bb:                                          ; preds = %if.end.i, %pseudostack_alloc.exit
  %68 = alloca i8*, i64 %66, align 32
  %69 = bitcast i8** %68 to i32*
  %70 = bitcast i8** %68 to i8*
  br label %"produce bias_im_global_wrapper$0"

"produce bias_im_global_wrapper$0":               ; preds = %pseudostack_alloc.exit, %then_bb
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0" = phi i8* [ %70, %then_bb ], [ %call.i, %pseudostack_alloc.exit ]
  %"bias_im_global_wrapper$0" = phi i32* [ %69, %then_bb ], [ %67, %pseudostack_alloc.exit ]
  %71 = icmp sgt i32 %3, 0
  br i1 %71, label %"for bias_im_global_wrapper$0.s0._0.preheader", label %"consume bias_im_global_wrapper$0", !prof !387

"for bias_im_global_wrapper$0.s0._0.preheader":   ; preds = %"produce bias_im_global_wrapper$0"
  %72 = zext i32 %3 to i64
  %min.iters.check = icmp ult i32 %3, 32
  br i1 %min.iters.check, label %"for bias_im_global_wrapper$0.s0._0.preheader5780", label %vector.ph

vector.ph:                                        ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader"
  %n.vec = and i64 %72, 4294967264
  %73 = add nsw i64 %n.vec, -32
  %74 = lshr exact i64 %73, 5
  %75 = add nuw nsw i64 %74, 1
  %xtraiter = and i64 %75, 3
  %76 = icmp ult i64 %73, 96
  br i1 %76, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %75, 1152921504606846972
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %index = phi i64 [ 0, %vector.ph.new ], [ %index.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %77 = getelementptr inbounds i32, i32* %1, i64 %index
  %78 = bitcast i32* %77 to <8 x i32>*
  %wide.load = load <8 x i32>, <8 x i32>* %78, align 4, !tbaa !388
  %79 = getelementptr inbounds i32, i32* %77, i64 8
  %80 = bitcast i32* %79 to <8 x i32>*
  %wide.load5216 = load <8 x i32>, <8 x i32>* %80, align 4, !tbaa !388
  %81 = getelementptr inbounds i32, i32* %77, i64 16
  %82 = bitcast i32* %81 to <8 x i32>*
  %wide.load5217 = load <8 x i32>, <8 x i32>* %82, align 4, !tbaa !388
  %83 = getelementptr inbounds i32, i32* %77, i64 24
  %84 = bitcast i32* %83 to <8 x i32>*
  %wide.load5218 = load <8 x i32>, <8 x i32>* %84, align 4, !tbaa !388
  %85 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %index
  %86 = bitcast i32* %85 to <8 x i32>*
  store <8 x i32> %wide.load, <8 x i32>* %86, align 4, !tbaa !391
  %87 = getelementptr inbounds i32, i32* %85, i64 8
  %88 = bitcast i32* %87 to <8 x i32>*
  store <8 x i32> %wide.load5216, <8 x i32>* %88, align 4, !tbaa !391
  %89 = getelementptr inbounds i32, i32* %85, i64 16
  %90 = bitcast i32* %89 to <8 x i32>*
  store <8 x i32> %wide.load5217, <8 x i32>* %90, align 4, !tbaa !391
  %91 = getelementptr inbounds i32, i32* %85, i64 24
  %92 = bitcast i32* %91 to <8 x i32>*
  store <8 x i32> %wide.load5218, <8 x i32>* %92, align 4, !tbaa !391
  %index.next = or i64 %index, 32
  %93 = getelementptr inbounds i32, i32* %1, i64 %index.next
  %94 = bitcast i32* %93 to <8 x i32>*
  %wide.load.1 = load <8 x i32>, <8 x i32>* %94, align 4, !tbaa !388
  %95 = getelementptr inbounds i32, i32* %93, i64 8
  %96 = bitcast i32* %95 to <8 x i32>*
  %wide.load5216.1 = load <8 x i32>, <8 x i32>* %96, align 4, !tbaa !388
  %97 = getelementptr inbounds i32, i32* %93, i64 16
  %98 = bitcast i32* %97 to <8 x i32>*
  %wide.load5217.1 = load <8 x i32>, <8 x i32>* %98, align 4, !tbaa !388
  %99 = getelementptr inbounds i32, i32* %93, i64 24
  %100 = bitcast i32* %99 to <8 x i32>*
  %wide.load5218.1 = load <8 x i32>, <8 x i32>* %100, align 4, !tbaa !388
  %101 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %index.next
  %102 = bitcast i32* %101 to <8 x i32>*
  store <8 x i32> %wide.load.1, <8 x i32>* %102, align 4, !tbaa !391
  %103 = getelementptr inbounds i32, i32* %101, i64 8
  %104 = bitcast i32* %103 to <8 x i32>*
  store <8 x i32> %wide.load5216.1, <8 x i32>* %104, align 4, !tbaa !391
  %105 = getelementptr inbounds i32, i32* %101, i64 16
  %106 = bitcast i32* %105 to <8 x i32>*
  store <8 x i32> %wide.load5217.1, <8 x i32>* %106, align 4, !tbaa !391
  %107 = getelementptr inbounds i32, i32* %101, i64 24
  %108 = bitcast i32* %107 to <8 x i32>*
  store <8 x i32> %wide.load5218.1, <8 x i32>* %108, align 4, !tbaa !391
  %index.next.1 = or i64 %index, 64
  %109 = getelementptr inbounds i32, i32* %1, i64 %index.next.1
  %110 = bitcast i32* %109 to <8 x i32>*
  %wide.load.2 = load <8 x i32>, <8 x i32>* %110, align 4, !tbaa !388
  %111 = getelementptr inbounds i32, i32* %109, i64 8
  %112 = bitcast i32* %111 to <8 x i32>*
  %wide.load5216.2 = load <8 x i32>, <8 x i32>* %112, align 4, !tbaa !388
  %113 = getelementptr inbounds i32, i32* %109, i64 16
  %114 = bitcast i32* %113 to <8 x i32>*
  %wide.load5217.2 = load <8 x i32>, <8 x i32>* %114, align 4, !tbaa !388
  %115 = getelementptr inbounds i32, i32* %109, i64 24
  %116 = bitcast i32* %115 to <8 x i32>*
  %wide.load5218.2 = load <8 x i32>, <8 x i32>* %116, align 4, !tbaa !388
  %117 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %index.next.1
  %118 = bitcast i32* %117 to <8 x i32>*
  store <8 x i32> %wide.load.2, <8 x i32>* %118, align 4, !tbaa !391
  %119 = getelementptr inbounds i32, i32* %117, i64 8
  %120 = bitcast i32* %119 to <8 x i32>*
  store <8 x i32> %wide.load5216.2, <8 x i32>* %120, align 4, !tbaa !391
  %121 = getelementptr inbounds i32, i32* %117, i64 16
  %122 = bitcast i32* %121 to <8 x i32>*
  store <8 x i32> %wide.load5217.2, <8 x i32>* %122, align 4, !tbaa !391
  %123 = getelementptr inbounds i32, i32* %117, i64 24
  %124 = bitcast i32* %123 to <8 x i32>*
  store <8 x i32> %wide.load5218.2, <8 x i32>* %124, align 4, !tbaa !391
  %index.next.2 = or i64 %index, 96
  %125 = getelementptr inbounds i32, i32* %1, i64 %index.next.2
  %126 = bitcast i32* %125 to <8 x i32>*
  %wide.load.3 = load <8 x i32>, <8 x i32>* %126, align 4, !tbaa !388
  %127 = getelementptr inbounds i32, i32* %125, i64 8
  %128 = bitcast i32* %127 to <8 x i32>*
  %wide.load5216.3 = load <8 x i32>, <8 x i32>* %128, align 4, !tbaa !388
  %129 = getelementptr inbounds i32, i32* %125, i64 16
  %130 = bitcast i32* %129 to <8 x i32>*
  %wide.load5217.3 = load <8 x i32>, <8 x i32>* %130, align 4, !tbaa !388
  %131 = getelementptr inbounds i32, i32* %125, i64 24
  %132 = bitcast i32* %131 to <8 x i32>*
  %wide.load5218.3 = load <8 x i32>, <8 x i32>* %132, align 4, !tbaa !388
  %133 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %index.next.2
  %134 = bitcast i32* %133 to <8 x i32>*
  store <8 x i32> %wide.load.3, <8 x i32>* %134, align 4, !tbaa !391
  %135 = getelementptr inbounds i32, i32* %133, i64 8
  %136 = bitcast i32* %135 to <8 x i32>*
  store <8 x i32> %wide.load5216.3, <8 x i32>* %136, align 4, !tbaa !391
  %137 = getelementptr inbounds i32, i32* %133, i64 16
  %138 = bitcast i32* %137 to <8 x i32>*
  store <8 x i32> %wide.load5217.3, <8 x i32>* %138, align 4, !tbaa !391
  %139 = getelementptr inbounds i32, i32* %133, i64 24
  %140 = bitcast i32* %139 to <8 x i32>*
  store <8 x i32> %wide.load5218.3, <8 x i32>* %140, align 4, !tbaa !391
  %index.next.3 = add i64 %index, 128
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !393

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %index.unr = phi i64 [ 0, %vector.ph ], [ %index.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %index.epil = phi i64 [ %index.next.epil, %vector.body.epil ], [ %index.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %141 = getelementptr inbounds i32, i32* %1, i64 %index.epil
  %142 = bitcast i32* %141 to <8 x i32>*
  %wide.load.epil = load <8 x i32>, <8 x i32>* %142, align 4, !tbaa !388
  %143 = getelementptr inbounds i32, i32* %141, i64 8
  %144 = bitcast i32* %143 to <8 x i32>*
  %wide.load5216.epil = load <8 x i32>, <8 x i32>* %144, align 4, !tbaa !388
  %145 = getelementptr inbounds i32, i32* %141, i64 16
  %146 = bitcast i32* %145 to <8 x i32>*
  %wide.load5217.epil = load <8 x i32>, <8 x i32>* %146, align 4, !tbaa !388
  %147 = getelementptr inbounds i32, i32* %141, i64 24
  %148 = bitcast i32* %147 to <8 x i32>*
  %wide.load5218.epil = load <8 x i32>, <8 x i32>* %148, align 4, !tbaa !388
  %149 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %index.epil
  %150 = bitcast i32* %149 to <8 x i32>*
  store <8 x i32> %wide.load.epil, <8 x i32>* %150, align 4, !tbaa !391
  %151 = getelementptr inbounds i32, i32* %149, i64 8
  %152 = bitcast i32* %151 to <8 x i32>*
  store <8 x i32> %wide.load5216.epil, <8 x i32>* %152, align 4, !tbaa !391
  %153 = getelementptr inbounds i32, i32* %149, i64 16
  %154 = bitcast i32* %153 to <8 x i32>*
  store <8 x i32> %wide.load5217.epil, <8 x i32>* %154, align 4, !tbaa !391
  %155 = getelementptr inbounds i32, i32* %149, i64 24
  %156 = bitcast i32* %155 to <8 x i32>*
  store <8 x i32> %wide.load5218.epil, <8 x i32>* %156, align 4, !tbaa !391
  %index.next.epil = add i64 %index.epil, 32
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !394

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %n.vec, %72
  br i1 %cmp.n, label %"consume bias_im_global_wrapper$0", label %"for bias_im_global_wrapper$0.s0._0.preheader5780"

"for bias_im_global_wrapper$0.s0._0.preheader5780": ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader", %middle.block
  %indvars.iv.ph = phi i64 [ 0, %"for bias_im_global_wrapper$0.s0._0.preheader" ], [ %n.vec, %middle.block ]
  br label %"for bias_im_global_wrapper$0.s0._0"

"for bias_im_global_wrapper$0.s0._0":             ; preds = %"for bias_im_global_wrapper$0.s0._0.preheader5780", %"for bias_im_global_wrapper$0.s0._0"
  %indvars.iv = phi i64 [ %indvars.iv.next, %"for bias_im_global_wrapper$0.s0._0" ], [ %indvars.iv.ph, %"for bias_im_global_wrapper$0.s0._0.preheader5780" ]
  %157 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %158 = load i32, i32* %157, align 4, !tbaa !388
  %159 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %indvars.iv
  store i32 %158, i32* %159, align 4, !tbaa !391
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2222 = icmp eq i64 %indvars.iv.next, %72
  br i1 %.not2222, label %"consume bias_im_global_wrapper$0", label %"for bias_im_global_wrapper$0.s0._0", !llvm.loop !395

"consume bias_im_global_wrapper$0":               ; preds = %"for bias_im_global_wrapper$0.s0._0", %middle.block, %"produce bias_im_global_wrapper$0"
  %t3702 = mul nsw i32 %18, %17
  %t3703 = mul nsw i32 %21, %19
  %t3704 = icmp slt i32 %dilation_x, 0
  %160 = add nsw i32 %8, -1
  %t3705 = mul nsw i32 %160, %dilation_x
  %t3706 = icmp slt i32 %stride_x, 0
  br i1 %34, label %then_bb2, label %next_bb

after_bb1:                                        ; preds = %"end for output.s0.y.rebased369.loopexit.us", %"end for output.s0.y.rebased268.loopexit.us", %"end for output.s0.y.rebased164", %"end for output.s0.y.rebased60", %"end for output.s0.y.rebased", %"for output.s0.b.rebased365.preheader", %"for output.s0.b.rebased264.preheader", %next_bb263, %then_bb262, %then_bb158, %then_bb54, %then_bb2
  %convolved1914.sroa.0.0 = phi <8 x i32> [ undef, %then_bb2 ], [ undef, %then_bb54 ], [ undef, %then_bb158 ], [ undef, %then_bb262 ], [ undef, %next_bb263 ], [ undef, %"for output.s0.b.rebased264.preheader" ], [ undef, %"for output.s0.b.rebased365.preheader" ], [ %convolved1914.sroa.0.3, %"end for output.s0.y.rebased" ], [ %convolved1914.sroa.0.15, %"end for output.s0.y.rebased60" ], [ %convolved1914.sroa.0.27, %"end for output.s0.y.rebased164" ], [ %convolved1914.sroa.0.42.us, %"end for output.s0.y.rebased268.loopexit.us" ], [ %convolved1914.sroa.0.53.us, %"end for output.s0.y.rebased369.loopexit.us" ]
  %161 = load i32*, i32** %0, align 8, !tbaa !172
  %162 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %extent.i2313 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %162, i64 0, i32 1
  %163 = load i32, i32* %extent.i2313, align 4, !tbaa !178
  %164 = load i8*, i8** %host.i2228, align 8, !tbaa !172
  %165 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2229, align 8, !tbaa !176
  %extent.i2332 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %165, i64 2, i32 1
  %166 = load i32, i32* %extent.i2332, align 4, !tbaa !178
  %stride.i2338 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %165, i64 3, i32 2
  %167 = load i32, i32* %stride.i2338, align 4, !tbaa !182
  %extent.i2342 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %165, i64 4, i32 1
  %168 = load i32, i32* %extent.i2342, align 4, !tbaa !178
  %stride.i2344 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %165, i64 4, i32 2
  %169 = load i32, i32* %stride.i2344, align 4, !tbaa !182
  %extent.i2348 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %165, i64 5, i32 1
  %170 = load i32, i32* %extent.i2348, align 4, !tbaa !178
  %stride.i2350 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %165, i64 5, i32 2
  %171 = load i32, i32* %stride.i2350, align 4, !tbaa !182
  %172 = load i8*, i8** %host.i2263, align 8, !tbaa !172
  %173 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2264, align 8, !tbaa !176
  %extent.i2355 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 0, i32 1
  %174 = load i32, i32* %extent.i2355, align 4, !tbaa !178
  %min.i2359 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 0
  %175 = load i32, i32* %min.i2359, align 4, !tbaa !181
  %stride.i2361 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 1, i32 2
  %176 = load i32, i32* %stride.i2361, align 4, !tbaa !182
  %min.i2363 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 2, i32 0
  %177 = load i32, i32* %min.i2363, align 4, !tbaa !181
  %stride.i2365 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 2, i32 2
  %178 = load i32, i32* %stride.i2365, align 4, !tbaa !182
  %min.i2367 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 3, i32 0
  %179 = load i32, i32* %min.i2367, align 4, !tbaa !181
  %extent.i2369 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 3, i32 1
  %180 = load i32, i32* %extent.i2369, align 4, !tbaa !178
  %stride.i2371 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %173, i64 3, i32 2
  %181 = load i32, i32* %stride.i2371, align 4, !tbaa !182
  %182 = load i8*, i8** %host.i2284, align 8, !tbaa !172
  %183 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2285, align 8, !tbaa !176
  %min.i2380 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 1, i32 0
  %184 = load i32, i32* %min.i2380, align 4, !tbaa !181
  %extent.i2382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 1, i32 1
  %185 = load i32, i32* %extent.i2382, align 4, !tbaa !178
  %stride.i2384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 1, i32 2
  %186 = load i32, i32* %stride.i2384, align 4, !tbaa !182
  %min.i2386 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 2, i32 0
  %187 = load i32, i32* %min.i2386, align 4, !tbaa !181
  %extent.i2388 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 2, i32 1
  %188 = load i32, i32* %extent.i2388, align 4, !tbaa !178
  %stride.i2390 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 2, i32 2
  %189 = load i32, i32* %stride.i2390, align 4, !tbaa !182
  %stride.i2396 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %183, i64 3, i32 2
  %190 = load i32, i32* %stride.i2396, align 4, !tbaa !182
  %191 = and i32 %163, 31
  %t4458537 = icmp eq i32 %191, 0
  %192 = icmp slt i32 %163, 8
  %t4459538 = select i1 %192, i32 %163, i32 8
  %193 = icmp sgt i32 %185, 1
  %194 = and i1 %t4458537, %193
  %195 = add nsw i32 %163, -1
  %196 = or i32 %195, 31
  %197 = icmp sgt i32 %185, 3
  %198 = and i32 %163, 15
  %199 = icmp eq i32 %198, 0
  %200 = and i1 %199, %197
  %201 = or i32 %195, 15
  %202 = icmp sgt i32 %185, 7
  %203 = and i32 %163, 7
  %204 = icmp eq i32 %203, 0
  %205 = and i1 %204, %202
  %206 = ashr i32 %195, 3
  %207 = or i32 %195, 7
  %208 = icmp sgt i32 %185, 0
  %209 = and i1 %t4458537, %208
  %210 = add nsw i32 %t4459538, -1
  %a240 = ashr i32 %210, 3
  %211 = icmp slt i32 %206, 3
  %212 = select i1 %211, i32 %206, i32 3
  %213 = and i32 %a240, -4
  %b242 = add nsw i32 %213, %212
  %214 = icmp sgt i32 %b242, %a240
  %215 = select i1 %214, i32 %a240, i32 %b242
  %216 = add nsw i32 %215, %206
  %217 = shl nsw i32 %216, 3
  %218 = or i32 %217, 7
  %219 = select i1 %209, i32 %196, i32 %218
  %220 = select i1 %205, i32 %207, i32 %219
  %221 = select i1 %200, i32 %201, i32 %220
  %222 = select i1 %194, i32 %196, i32 %221
  %a239 = add nsw i32 %222, 1
  %.not1916 = icmp slt i32 %222, %163
  %a243 = select i1 %.not1916, i32 %163, i32 %a239
  %223 = icmp sgt i32 %a243, 0
  %224 = select i1 %223, i32 %a243, i32 0
  %t4574 = zext i32 %224 to i64
  %225 = shl nuw nsw i64 %t4574, 2
  %226 = add nuw nsw i64 %225, 12
  %cmp.i2398 = icmp ult i64 %65, %225
  br i1 %cmp.i2398, label %if.then.i2401, label %pseudostack_alloc.exit2414, !prof !396

if.then.i2401:                                    ; preds = %after_bb1
  %tobool1.not.i2400 = icmp ne i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", null
  %cmp2.i2403 = icmp ugt i32 %64, 4093
  %or.cond2647 = and i1 %tobool1.not.i2400, %cmp2.i2403
  br i1 %or.cond2647, label %if.then3.i2405, label %if.end.i2409

if.then3.i2405:                                   ; preds = %if.then.i2401
  call void @halide_free(i8* null, i8* nonnull %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0") #17
  br label %if.end.i2409

if.end.i2409:                                     ; preds = %if.then3.i2405, %if.then.i2401
  %add.i2407 = add nuw nsw i64 %66, %226
  %cmp7.i2408 = icmp ugt i64 %add.i2407, 16384
  br i1 %cmp7.i2408, label %if.then8.i2411, label %then_bb540

if.then8.i2411:                                   ; preds = %if.end.i2409
  %call.i2410 = call i8* @halide_malloc(i8* null, i64 %226) #17
  br label %pseudostack_alloc.exit2414

pseudostack_alloc.exit2414:                       ; preds = %if.then8.i2411, %after_bb1
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.0" = phi i64 [ %66, %after_bb1 ], [ %add.i2407, %if.then8.i2411 ]
  %227 = phi i8* [ %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.0", %after_bb1 ], [ %call.i2410, %if.then8.i2411 ]
  %228 = bitcast i8* %227 to i32*
  %.not1917 = icmp eq i8* %227, null
  br i1 %.not1917, label %then_bb540, label %"produce bias_im_global_wrapper$0542", !prof !386

then_bb2:                                         ; preds = %"consume bias_im_global_wrapper$0"
  %t3707 = add nsw i32 %6, 1
  %a6 = ashr i32 %t3707, 2
  %229 = icmp sgt i32 %6, 2
  %t3708 = select i1 %229, i32 %a6, i32 0
  %a7 = ashr i32 %t3707, 3
  %230 = icmp sgt i32 %6, 6
  %t3709 = select i1 %230, i32 %a7, i32 0
  %231 = add nsw i32 %10, -1
  %t3710 = mul nsw i32 %231, %dilation_y
  %a13 = ashr i32 %t3707, 1
  %232 = icmp eq i32 %14, 4
  %233 = icmp eq i32 %16, 4
  %t3712 = and i1 %232, %233
  %t3713 = add nsw i32 %6, -1
  %t3714 = ashr i32 %t3713, 1
  %234 = shl nsw i32 %t3714, 2
  %b10 = or i32 %234, 3
  %t3716 = icmp slt i32 %dilation_y, 0
  %t3677 = select i1 %t3716, i32 %t3710, i32 0
  %235 = icmp slt i32 %14, 16
  %236 = icmp slt i32 %14, 8
  %237 = icmp slt i32 %14, 4
  %238 = icmp slt i32 %a13, 1
  %239 = select i1 %238, i32 %a13, i32 1
  %240 = add nsw i32 %239, %t3714
  %241 = select i1 %237, i32 %a13, i32 %240
  %242 = icmp slt i32 %a13, 2
  %243 = select i1 %242, i32 %a13, i32 2
  %244 = and i32 %t3714, -2
  %245 = add nsw i32 %243, %244
  %246 = select i1 %236, i32 %241, i32 %245
  %247 = icmp slt i32 %a13, 4
  %248 = select i1 %247, i32 %a13, i32 4
  %249 = and i32 %t3714, -4
  %250 = add nsw i32 %248, %249
  %a9 = select i1 %235, i32 %246, i32 %250
  %251 = icmp sgt i32 %a13, %a9
  %252 = select i1 %251, i32 %a9, i32 %a13
  %253 = shl nsw i32 %252, 2
  %254 = add nsw i32 %253, -1
  %a8 = select i1 %t3712, i32 %b10, i32 %254
  %255 = icmp sgt i32 %a8, %b10
  %a25 = select i1 %255, i32 %a8, i32 %b10
  %256 = icmp sgt i32 %6, 0
  %257 = add nuw nsw i32 %25, 1
  %t3699 = ashr i32 %257, 1
  %258 = add nsw i32 %6, 7
  %259 = ashr i32 %258, 3
  %t3692 = sub nsw i32 %259, %t3709
  %260 = add nsw i32 %6, 3
  %261 = ashr i32 %260, 2
  %t3696 = sub nsw i32 %261, %t3708
  %262 = select i1 %t3704, i32 %t3705, i32 0
  %263 = select i1 %t3706, i32 %25, i32 1
  %264 = add i32 %24, -1
  %265 = add i32 %264, %263
  %266 = mul nsw i32 %265, %stride_x
  %b20 = add nsw i32 %266, %262
  %267 = icmp sgt i32 %20, 0
  br i1 %267, label %"for output.s0.b.rebased.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased.preheader":              ; preds = %then_bb2
  %t3700 = ashr i32 %3, 5
  %t3698 = select i1 %256, i32 %a13, i32 0
  %t3676 = select i1 %t3716, i32 0, i32 %t3710
  %268 = mul nsw i32 %16, %15
  %269 = add nsw i32 %25, -1
  %270 = select i1 %t3706, i32 0, i32 %269
  %271 = add nsw i32 %270, %24
  %272 = mul nsw i32 %271, %stride_x
  %273 = select i1 %t3704, i32 0, i32 %t3705
  %b18 = add nsw i32 %272, %273
  %a17 = sub i32 %b18, %b20
  %a19 = ashr i32 %a17, 3
  %274 = add nsw i32 %a17, 1
  %a14 = ashr i32 %274, 3
  %275 = icmp sgt i32 %a17, 6
  %t3735 = select i1 %275, i32 %a14, i32 0
  %.neg2723 = mul i32 %29, %27
  %.neg2724 = mul i32 %26, %24
  %.neg2725 = mul i32 %30, %19
  %276 = add i32 %t3702, %268
  %277 = add i32 %276, %t3703
  %.neg2729 = mul i32 %15, -4
  %278 = icmp sgt i32 %a19, -1
  %279 = select i1 %278, i32 %a19, i32 -1
  %280 = sub nsw i32 %279, %t3735
  %281 = icmp sgt i32 %28, 0
  %282 = icmp sgt i32 %a25, -1
  %t4467 = select i1 %282, i32 %a25, i32 -1
  %283 = icmp sgt i32 %a17, -1
  %284 = select i1 %283, i32 %274, i32 0
  %t4468 = zext i32 %284 to i64
  %285 = add nsw i32 %t4467, 1
  %286 = zext i32 %285 to i64
  %t4469 = shl nuw nsw i64 %286, 1
  %t4471 = mul i64 %t4469, %t4468
  %287 = add nsw i32 %a25, 1
  %t3773 = shl nsw i32 %a13, 2
  %288 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %289 = shufflevector <16 x i8> %288, <16 x i8> undef, <16 x i32> zeroinitializer
  %290 = zext <16 x i8> %289 to <16 x i16>
  %291 = icmp sgt i32 %t3692, 0
  %292 = insertelement <16 x i32> undef, i32 %t3773, i32 0
  %293 = shufflevector <16 x i32> %292, <16 x i32> undef, <8 x i32> zeroinitializer
  %294 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %295 = shufflevector <8 x i8> %294, <8 x i8> undef, <8 x i32> zeroinitializer
  %296 = zext <8 x i8> %295 to <8 x i16>
  %297 = icmp sgt i32 %t3696, 0
  %298 = insertelement <8 x i32> undef, i32 %t3773, i32 0
  %299 = shufflevector <8 x i32> %298, <8 x i32> undef, <8 x i32> zeroinitializer
  %300 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %301 = shufflevector <4 x i8> %300, <4 x i8> undef, <4 x i32> zeroinitializer
  %302 = zext <4 x i8> %301 to <4 x i16>
  %303 = zext i8 %input_zero to i16
  %t3739 = mul nsw i32 %274, %287
  %.neg2730 = sub i32 %.neg2729, %t3702
  %t3688.neg = sub i32 %.neg2730, %t3703
  %304 = shl i32 %287, 1
  %305 = mul nsw i32 %a25, 7
  %306 = mul nsw i32 %a25, 6
  %307 = mul nsw i32 %a25, 5
  %308 = shl nsw i32 %a25, 2
  %309 = mul nsw i32 %a25, 3
  %310 = shl nsw i32 %a25, 1
  %311 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %312 = shufflevector <32 x i8> %311, <32 x i8> undef, <32 x i32> zeroinitializer
  %313 = zext <32 x i8> %312 to <32 x i16>
  %314 = icmp sgt i32 %280, -1
  %reass.add2739 = add i32 %.neg2723, %.neg2724
  %reass.add2740 = add i32 %reass.add2739, %.neg2725
  %b32 = add nsw i32 %25, -2
  %315 = icmp sgt i32 %3, 31
  %316 = icmp sgt i32 %10, 0
  %317 = icmp sgt i32 %8, 0
  %318 = bitcast i8* %4 to i16*
  %319 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %320 = shufflevector <32 x i32> %319, <32 x i32> undef, <32 x i32> zeroinitializer
  %321 = sext <32 x i32> %320 to <32 x i64>
  %322 = insertelement <32 x i32> undef, i32 %output_shift, i32 0
  %323 = shufflevector <32 x i32> %322, <32 x i32> undef, <8 x i32> zeroinitializer
  %324 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %323, i1 false) #11
  %325 = shufflevector <8 x i32> %324, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4475 = shufflevector <16 x i32> %325, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %326 = icmp slt <8 x i32> %323, zeroinitializer
  %327 = shufflevector <8 x i1> %326, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %328 = shufflevector <16 x i1> %327, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %329 = xor <32 x i1> %328, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %330 = shufflevector <32 x i1> %329, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %331 = shufflevector <32 x i1> %329, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %332 = shufflevector <32 x i1> %329, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %333 = shufflevector <32 x i1> %329, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %334 = icmp sgt i32 %output_shift, 0
  %335 = select i1 %334, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %336 = add nsw i32 %output_shift, -1
  %337 = insertelement <32 x i32> undef, i32 %336, i32 0
  %338 = shufflevector <32 x i32> %337, <32 x i32> undef, <8 x i32> zeroinitializer
  %339 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %338, i1 false) #11
  %340 = shufflevector <8 x i32> %339, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4477 = shufflevector <16 x i32> %340, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %341 = icmp slt <8 x i32> %338, zeroinitializer
  %342 = shufflevector <8 x i1> %341, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %343 = shufflevector <16 x i1> %342, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %344 = xor <32 x i1> %343, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %345 = shufflevector <32 x i1> %344, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %346 = shufflevector <32 x i1> %344, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %347 = shufflevector <32 x i1> %344, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %348 = shufflevector <32 x i1> %344, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %349 = zext i8 %output_zero to i16
  %350 = insertelement <32 x i16> undef, i16 %349, i32 0
  %351 = shufflevector <32 x i16> %350, <32 x i16> undef, <16 x i32> zeroinitializer
  %352 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %b34 = shufflevector <32 x i8> %352, <32 x i8> undef, <32 x i32> zeroinitializer
  %353 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %b33 = shufflevector <32 x i8> %353, <32 x i8> undef, <32 x i32> zeroinitializer
  %354 = zext i32 %t3709 to i64
  %355 = sext i32 %b20 to i64
  %356 = sext i32 %16 to i64
  %357 = zext i32 %a17 to i64
  %358 = sext i32 %t3709 to i64
  %359 = zext i32 %t3692 to i64
  %360 = sext i32 %18 to i64
  %361 = zext i32 %t3708 to i64
  %362 = sext i32 %t3708 to i64
  %363 = zext i32 %t3696 to i64
  %364 = zext i32 %t3698 to i64
  %365 = zext i32 %t3773 to i64
  %366 = zext i32 %a13 to i64
  %367 = zext i32 %t3735 to i64
  %368 = sext i32 %287 to i64
  %369 = zext i32 %280 to i64
  %370 = sext i32 %t3739 to i64
  %371 = sext i32 %9 to i64
  %372 = sext i32 %dilation_x to i64
  %373 = zext i32 %8 to i64
  %374 = sext i32 %11 to i64
  %375 = zext i32 %10 to i64
  %376 = sext i32 %7 to i64
  %377 = zext i32 %t3700 to i64
  %378 = sub i32 %t3676, %t3677
  %379 = sext i32 %27 to i64
  %380 = sext i32 %stride_y to i64
  %381 = sext i32 %t3677 to i64
  %382 = zext i32 %19 to i64
  %zext4343 = zext i32 %20 to i64
  %zext4338 = zext i32 %28 to i64
  %a27 = add nsw i32 %378, 1
  %383 = icmp sgt i32 %378, -1
  %384 = select i1 %383, i32 %a27, i32 0
  %t4470 = zext i32 %384 to i64
  %385 = mul i64 %t4471, %t4470
  %386 = add i64 %385, 6
  %387 = zext i32 %378 to i64
  %388 = zext i32 %378 to i64
  %389 = zext i32 %378 to i64
  %390 = zext i32 %378 to i64
  %391 = zext i32 %378 to i64
  %392 = add nsw i64 %354, -1
  %393 = add nsw i64 %354, -1
  %394 = add nsw i64 %361, -1
  %395 = add nsw i64 %361, -1
  %396 = add nsw i64 %364, -1
  %397 = and i64 %365, 4294967232
  %398 = add nsw i64 %397, -64
  %399 = lshr exact i64 %398, 6
  %400 = add nuw nsw i64 %399, 1
  %401 = add nsw i64 %366, -1
  %402 = or i32 %378, %a17
  %403 = icmp slt i32 %402, 0
  %xtraiter5925 = and i64 %354, 3
  %404 = icmp ult i64 %392, 3
  %unroll_iter5928 = and i64 %354, 4294967292
  %lcmp.mod5927.not = icmp eq i64 %xtraiter5925, 0
  %xtraiter5930 = and i64 %354, 3
  %405 = icmp ult i64 %393, 3
  %unroll_iter5933 = and i64 %354, 4294967292
  %lcmp.mod5932.not = icmp eq i64 %xtraiter5930, 0
  %xtraiter5935 = and i64 %361, 3
  %406 = icmp ult i64 %394, 3
  %unroll_iter5938 = and i64 %361, 4294967292
  %lcmp.mod5937.not = icmp eq i64 %xtraiter5935, 0
  %xtraiter5940 = and i64 %361, 3
  %407 = icmp ult i64 %395, 3
  %unroll_iter5943 = and i64 %361, 4294967292
  %lcmp.mod5942.not = icmp eq i64 %xtraiter5940, 0
  %brmerge4984.demorgan = and i1 %283, %256
  %xtraiter5945 = and i64 %364, 3
  %408 = icmp ult i64 %396, 3
  %unroll_iter5948 = and i64 %364, 4294967292
  %lcmp.mod5947.not = icmp eq i64 %xtraiter5945, 0
  %brmerge4987.demorgan = and i1 %283, %256
  %min.iters.check5382 = icmp ult i32 %t3773, 8
  %min.iters.check5385 = icmp ult i32 %t3773, 64
  %n.vec5389 = and i64 %365, 4294967232
  %broadcast.splatinsert5397 = insertelement <16 x i16> poison, i16 %303, i32 0
  %broadcast.splat5398 = shufflevector <16 x i16> %broadcast.splatinsert5397, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5399 = insertelement <16 x i16> poison, i16 %303, i32 0
  %broadcast.splat5400 = shufflevector <16 x i16> %broadcast.splatinsert5399, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5401 = insertelement <16 x i16> poison, i16 %303, i32 0
  %broadcast.splat5402 = shufflevector <16 x i16> %broadcast.splatinsert5401, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5403 = insertelement <16 x i16> poison, i16 %303, i32 0
  %broadcast.splat5404 = shufflevector <16 x i16> %broadcast.splatinsert5403, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter5950 = and i64 %400, 1
  %409 = icmp eq i64 %398, 0
  %unroll_iter5952 = and i64 %400, 576460752303423486
  %lcmp.mod5951.not = icmp eq i64 %xtraiter5950, 0
  %cmp.n5392 = icmp eq i64 %n.vec5389, %365
  %n.vec.remaining5410 = and i64 %365, 56
  %min.epilog.iters.check5411 = icmp eq i64 %n.vec.remaining5410, 0
  %n.vec5414 = and i64 %365, 4294967288
  %broadcast.splatinsert5420 = insertelement <8 x i16> poison, i16 %303, i32 0
  %broadcast.splat5421 = shufflevector <8 x i16> %broadcast.splatinsert5420, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5418 = icmp eq i64 %n.vec5414, %365
  %xtraiter5954 = and i64 %366, 3
  %410 = icmp ult i64 %401, 3
  %unroll_iter5957 = and i64 %366, 4294967292
  %lcmp.mod5956.not = icmp eq i64 %xtraiter5954, 0
  br label %"for output.s0.b.rebased"

next_bb:                                          ; preds = %"consume bias_im_global_wrapper$0"
  br i1 %40, label %then_bb54, label %next_bb55

"for output.s0.b.rebased":                        ; preds = %"for output.s0.b.rebased.preheader", %"end for output.s0.y.rebased"
  %indvars.iv4339 = phi i64 [ 0, %"for output.s0.b.rebased.preheader" ], [ %indvars.iv.next4340, %"end for output.s0.y.rebased" ]
  %convolved1914.sroa.0.1 = phi <8 x i32> [ undef, %"for output.s0.b.rebased.preheader" ], [ %convolved1914.sroa.0.3, %"end for output.s0.y.rebased" ]
  %411 = add nuw i64 %indvars.iv4339, %382
  %412 = trunc i64 %411 to i32
  %413 = mul i32 %21, %412
  br i1 %281, label %"for output.s0.y.rebased.preheader", label %"end for output.s0.y.rebased", !prof !387

"for output.s0.y.rebased.preheader":              ; preds = %"for output.s0.b.rebased"
  %t3730 = sub i32 %413, %277
  %t3721 = add i32 %t3688.neg, %413
  %414 = sext i32 %t3730 to i64
  %415 = trunc i64 %411 to i32
  %416 = mul i32 %30, %415
  br label %"for output.s0.y.rebased"

"for output.s0.y.rebased":                        ; preds = %"for output.s0.y.rebased.preheader", %call_destructor.exit
  %indvars.iv4334 = phi i64 [ 0, %"for output.s0.y.rebased.preheader" ], [ %indvars.iv.next4335, %call_destructor.exit ]
  %convolved1914.sroa.0.2 = phi <8 x i32> [ %convolved1914.sroa.0.1, %"for output.s0.y.rebased.preheader" ], [ %convolved1914.sroa.0.5, %call_destructor.exit ]
  %417 = add nsw i64 %indvars.iv4334, %379
  %418 = mul nsw i64 %417, %380
  %419 = add nsw i64 %418, %381
  %420 = call i8* @halide_malloc(i8* null, i64 %386)
  %input_wrapper = bitcast i8* %420 to i16*
  br i1 %t3712, label %then_bb4, label %next_bb5

"end for output.s0.y.rebased":                    ; preds = %call_destructor.exit, %"for output.s0.b.rebased"
  %convolved1914.sroa.0.3 = phi <8 x i32> [ %convolved1914.sroa.0.1, %"for output.s0.b.rebased" ], [ %convolved1914.sroa.0.5, %call_destructor.exit ]
  %indvars.iv.next4340 = add nuw nsw i64 %indvars.iv4339, 1
  %421 = icmp eq i64 %indvars.iv.next4340, %zext4343
  br i1 %421, label %after_bb1, label %"for output.s0.b.rebased"

then_bb4:                                         ; preds = %"for output.s0.y.rebased"
  br i1 %383, label %"for input_wrapper.s0.y.rebased", label %"consume input_wrapper", !prof !387

next_bb5:                                         ; preds = %"for output.s0.y.rebased"
  br i1 %235, label %next_bb10, label %then_bb9

"for input_wrapper.s0.y.rebased":                 ; preds = %then_bb4, %"end for input_wrapper.s0.x.x.rebased"
  %indvars.iv4316 = phi i64 [ %indvars.iv.next4317, %"end for input_wrapper.s0.x.x.rebased" ], [ 0, %then_bb4 ]
  %422 = mul nsw i64 %indvars.iv4316, %370
  %423 = add nsw i64 %indvars.iv4316, %419
  %424 = trunc i64 %423 to i32
  %425 = mul i32 %18, %424
  %t3748 = add i32 %t3721, %425
  br i1 %275, label %"for input_wrapper.s0.x.x.preheader", label %"end for input_wrapper.s0.x.x", !prof !387

"for input_wrapper.s0.x.x.preheader":             ; preds = %"for input_wrapper.s0.y.rebased"
  %426 = sext i32 %t3748 to i64
  br i1 %256, label %"for input_wrapper.s0.x.x.us.preheader", label %"end for input_wrapper.s0.x.x.rebased", !prof !387

"for input_wrapper.s0.x.x.us.preheader":          ; preds = %"for input_wrapper.s0.x.x.preheader"
  %427 = trunc i64 %422 to i32
  br label %"for input_wrapper.s0.x.x.us"

"for input_wrapper.s0.x.x.us":                    ; preds = %"for input_wrapper.s0.x.x.us.preheader", %"end for input_wrapper.s0.c.c.loopexit.us"
  %indvars.iv4306 = phi i64 [ 0, %"for input_wrapper.s0.x.x.us.preheader" ], [ %indvars.iv.next4307, %"end for input_wrapper.s0.c.c.loopexit.us" ]
  %428 = trunc i64 %indvars.iv4306 to i32
  %t3755.us = mul i32 %304, %428
  %429 = shl nsw i64 %indvars.iv4306, 3
  %430 = add nsw i64 %429, %355
  br label %"for input_wrapper.s0.c.c.us"

"for input_wrapper.s0.c.c.us":                    ; preds = %"for input_wrapper.s0.x.x.us", %"for input_wrapper.s0.c.c.us"
  %indvars.iv4303 = phi i64 [ 0, %"for input_wrapper.s0.x.x.us" ], [ %indvars.iv.next4304, %"for input_wrapper.s0.c.c.us" ]
  %431 = add nsw i64 %indvars.iv4303, %430
  %432 = shl nsw i64 %431, 2
  %433 = add nsw i64 %432, %426
  %434 = getelementptr inbounds i8, i8* %12, i64 %433
  %435 = bitcast i8* %434 to <32 x i8>*
  %436 = load <32 x i8>, <32 x i8>* %435, align 4, !tbaa !397
  %437 = zext <32 x i8> %436 to <32 x i16>
  %438 = sub nsw <32 x i16> %437, %313
  %439 = trunc i64 %indvars.iv4303 to i32
  %440 = add i32 %t3755.us, %439
  %441 = shl nsw i32 %440, 2
  %442 = add i32 %441, %427
  %443 = insertelement <4 x i32> undef, i32 %442, i32 0
  %444 = shufflevector <4 x i32> %443, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %445 = add <4 x i32> %444, <i32 poison, i32 1, i32 2, i32 3>
  %446 = add i32 %442, 1
  %447 = add i32 %446, %a25
  %448 = insertelement <4 x i32> undef, i32 %447, i32 0
  %449 = shufflevector <4 x i32> %448, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %450 = add <4 x i32> %449, <i32 poison, i32 1, i32 2, i32 3>
  %451 = add i32 %442, 2
  %452 = add i32 %451, %310
  %453 = insertelement <4 x i32> undef, i32 %452, i32 0
  %454 = shufflevector <4 x i32> %453, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %455 = add <4 x i32> %454, <i32 poison, i32 1, i32 2, i32 3>
  %456 = add i32 %442, 3
  %457 = add i32 %456, %309
  %458 = insertelement <4 x i32> undef, i32 %457, i32 0
  %459 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %460 = add <4 x i32> %459, <i32 poison, i32 1, i32 2, i32 3>
  %461 = add i32 %442, 4
  %462 = add i32 %461, %308
  %463 = insertelement <4 x i32> undef, i32 %462, i32 0
  %464 = shufflevector <4 x i32> %463, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %465 = add <4 x i32> %464, <i32 poison, i32 1, i32 2, i32 3>
  %466 = add i32 %442, 5
  %467 = add i32 %466, %307
  %468 = insertelement <4 x i32> undef, i32 %467, i32 0
  %469 = shufflevector <4 x i32> %468, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %470 = add <4 x i32> %469, <i32 poison, i32 1, i32 2, i32 3>
  %471 = add i32 %442, 6
  %472 = add i32 %471, %306
  %473 = insertelement <4 x i32> undef, i32 %472, i32 0
  %474 = shufflevector <4 x i32> %473, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %475 = add <4 x i32> %474, <i32 poison, i32 1, i32 2, i32 3>
  %476 = add i32 %442, 7
  %477 = add i32 %476, %305
  %478 = insertelement <4 x i32> undef, i32 %477, i32 0
  %479 = shufflevector <4 x i32> %478, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %480 = add <4 x i32> %479, <i32 poison, i32 1, i32 2, i32 3>
  %481 = extractelement <32 x i16> %438, i32 0
  %482 = sext i32 %442 to i64
  %483 = getelementptr inbounds i16, i16* %input_wrapper, i64 %482
  store i16 %481, i16* %483, align 2, !tbaa !399
  %484 = extractelement <4 x i32> %445, i32 1
  %485 = extractelement <32 x i16> %438, i32 1
  %486 = sext i32 %484 to i64
  %487 = getelementptr inbounds i16, i16* %input_wrapper, i64 %486
  store i16 %485, i16* %487, align 2, !tbaa !399
  %488 = extractelement <4 x i32> %445, i32 2
  %489 = extractelement <32 x i16> %438, i32 2
  %490 = sext i32 %488 to i64
  %491 = getelementptr inbounds i16, i16* %input_wrapper, i64 %490
  store i16 %489, i16* %491, align 2, !tbaa !399
  %492 = extractelement <4 x i32> %445, i32 3
  %493 = extractelement <32 x i16> %438, i32 3
  %494 = sext i32 %492 to i64
  %495 = getelementptr inbounds i16, i16* %input_wrapper, i64 %494
  store i16 %493, i16* %495, align 2, !tbaa !399
  %496 = extractelement <32 x i16> %438, i32 4
  %497 = sext i32 %447 to i64
  %498 = getelementptr inbounds i16, i16* %input_wrapper, i64 %497
  store i16 %496, i16* %498, align 2, !tbaa !399
  %499 = extractelement <4 x i32> %450, i32 1
  %500 = extractelement <32 x i16> %438, i32 5
  %501 = sext i32 %499 to i64
  %502 = getelementptr inbounds i16, i16* %input_wrapper, i64 %501
  store i16 %500, i16* %502, align 2, !tbaa !399
  %503 = extractelement <4 x i32> %450, i32 2
  %504 = extractelement <32 x i16> %438, i32 6
  %505 = sext i32 %503 to i64
  %506 = getelementptr inbounds i16, i16* %input_wrapper, i64 %505
  store i16 %504, i16* %506, align 2, !tbaa !399
  %507 = extractelement <4 x i32> %450, i32 3
  %508 = extractelement <32 x i16> %438, i32 7
  %509 = sext i32 %507 to i64
  %510 = getelementptr inbounds i16, i16* %input_wrapper, i64 %509
  store i16 %508, i16* %510, align 2, !tbaa !399
  %511 = extractelement <32 x i16> %438, i32 8
  %512 = sext i32 %452 to i64
  %513 = getelementptr inbounds i16, i16* %input_wrapper, i64 %512
  store i16 %511, i16* %513, align 2, !tbaa !399
  %514 = extractelement <4 x i32> %455, i32 1
  %515 = extractelement <32 x i16> %438, i32 9
  %516 = sext i32 %514 to i64
  %517 = getelementptr inbounds i16, i16* %input_wrapper, i64 %516
  store i16 %515, i16* %517, align 2, !tbaa !399
  %518 = extractelement <4 x i32> %455, i32 2
  %519 = extractelement <32 x i16> %438, i32 10
  %520 = sext i32 %518 to i64
  %521 = getelementptr inbounds i16, i16* %input_wrapper, i64 %520
  store i16 %519, i16* %521, align 2, !tbaa !399
  %522 = extractelement <4 x i32> %455, i32 3
  %523 = extractelement <32 x i16> %438, i32 11
  %524 = sext i32 %522 to i64
  %525 = getelementptr inbounds i16, i16* %input_wrapper, i64 %524
  store i16 %523, i16* %525, align 2, !tbaa !399
  %526 = extractelement <32 x i16> %438, i32 12
  %527 = sext i32 %457 to i64
  %528 = getelementptr inbounds i16, i16* %input_wrapper, i64 %527
  store i16 %526, i16* %528, align 2, !tbaa !399
  %529 = extractelement <4 x i32> %460, i32 1
  %530 = extractelement <32 x i16> %438, i32 13
  %531 = sext i32 %529 to i64
  %532 = getelementptr inbounds i16, i16* %input_wrapper, i64 %531
  store i16 %530, i16* %532, align 2, !tbaa !399
  %533 = extractelement <4 x i32> %460, i32 2
  %534 = extractelement <32 x i16> %438, i32 14
  %535 = sext i32 %533 to i64
  %536 = getelementptr inbounds i16, i16* %input_wrapper, i64 %535
  store i16 %534, i16* %536, align 2, !tbaa !399
  %537 = extractelement <4 x i32> %460, i32 3
  %538 = extractelement <32 x i16> %438, i32 15
  %539 = sext i32 %537 to i64
  %540 = getelementptr inbounds i16, i16* %input_wrapper, i64 %539
  store i16 %538, i16* %540, align 2, !tbaa !399
  %541 = extractelement <32 x i16> %438, i32 16
  %542 = sext i32 %462 to i64
  %543 = getelementptr inbounds i16, i16* %input_wrapper, i64 %542
  store i16 %541, i16* %543, align 2, !tbaa !399
  %544 = extractelement <4 x i32> %465, i32 1
  %545 = extractelement <32 x i16> %438, i32 17
  %546 = sext i32 %544 to i64
  %547 = getelementptr inbounds i16, i16* %input_wrapper, i64 %546
  store i16 %545, i16* %547, align 2, !tbaa !399
  %548 = extractelement <4 x i32> %465, i32 2
  %549 = extractelement <32 x i16> %438, i32 18
  %550 = sext i32 %548 to i64
  %551 = getelementptr inbounds i16, i16* %input_wrapper, i64 %550
  store i16 %549, i16* %551, align 2, !tbaa !399
  %552 = extractelement <4 x i32> %465, i32 3
  %553 = extractelement <32 x i16> %438, i32 19
  %554 = sext i32 %552 to i64
  %555 = getelementptr inbounds i16, i16* %input_wrapper, i64 %554
  store i16 %553, i16* %555, align 2, !tbaa !399
  %556 = extractelement <32 x i16> %438, i32 20
  %557 = sext i32 %467 to i64
  %558 = getelementptr inbounds i16, i16* %input_wrapper, i64 %557
  store i16 %556, i16* %558, align 2, !tbaa !399
  %559 = extractelement <4 x i32> %470, i32 1
  %560 = extractelement <32 x i16> %438, i32 21
  %561 = sext i32 %559 to i64
  %562 = getelementptr inbounds i16, i16* %input_wrapper, i64 %561
  store i16 %560, i16* %562, align 2, !tbaa !399
  %563 = extractelement <4 x i32> %470, i32 2
  %564 = extractelement <32 x i16> %438, i32 22
  %565 = sext i32 %563 to i64
  %566 = getelementptr inbounds i16, i16* %input_wrapper, i64 %565
  store i16 %564, i16* %566, align 2, !tbaa !399
  %567 = extractelement <4 x i32> %470, i32 3
  %568 = extractelement <32 x i16> %438, i32 23
  %569 = sext i32 %567 to i64
  %570 = getelementptr inbounds i16, i16* %input_wrapper, i64 %569
  store i16 %568, i16* %570, align 2, !tbaa !399
  %571 = extractelement <32 x i16> %438, i32 24
  %572 = sext i32 %472 to i64
  %573 = getelementptr inbounds i16, i16* %input_wrapper, i64 %572
  store i16 %571, i16* %573, align 2, !tbaa !399
  %574 = extractelement <4 x i32> %475, i32 1
  %575 = extractelement <32 x i16> %438, i32 25
  %576 = sext i32 %574 to i64
  %577 = getelementptr inbounds i16, i16* %input_wrapper, i64 %576
  store i16 %575, i16* %577, align 2, !tbaa !399
  %578 = extractelement <4 x i32> %475, i32 2
  %579 = extractelement <32 x i16> %438, i32 26
  %580 = sext i32 %578 to i64
  %581 = getelementptr inbounds i16, i16* %input_wrapper, i64 %580
  store i16 %579, i16* %581, align 2, !tbaa !399
  %582 = extractelement <4 x i32> %475, i32 3
  %583 = extractelement <32 x i16> %438, i32 27
  %584 = sext i32 %582 to i64
  %585 = getelementptr inbounds i16, i16* %input_wrapper, i64 %584
  store i16 %583, i16* %585, align 2, !tbaa !399
  %586 = extractelement <32 x i16> %438, i32 28
  %587 = sext i32 %477 to i64
  %588 = getelementptr inbounds i16, i16* %input_wrapper, i64 %587
  store i16 %586, i16* %588, align 2, !tbaa !399
  %589 = extractelement <4 x i32> %480, i32 1
  %590 = extractelement <32 x i16> %438, i32 29
  %591 = sext i32 %589 to i64
  %592 = getelementptr inbounds i16, i16* %input_wrapper, i64 %591
  store i16 %590, i16* %592, align 2, !tbaa !399
  %593 = extractelement <4 x i32> %480, i32 2
  %594 = extractelement <32 x i16> %438, i32 30
  %595 = sext i32 %593 to i64
  %596 = getelementptr inbounds i16, i16* %input_wrapper, i64 %595
  store i16 %594, i16* %596, align 2, !tbaa !399
  %597 = extractelement <4 x i32> %480, i32 3
  %598 = extractelement <32 x i16> %438, i32 31
  %599 = sext i32 %597 to i64
  %600 = getelementptr inbounds i16, i16* %input_wrapper, i64 %599
  store i16 %598, i16* %600, align 2, !tbaa !399
  %indvars.iv.next4304 = add nuw nsw i64 %indvars.iv4303, 1
  %.not2221.us = icmp eq i64 %indvars.iv.next4304, %366
  br i1 %.not2221.us, label %"end for input_wrapper.s0.c.c.loopexit.us", label %"for input_wrapper.s0.c.c.us"

"end for input_wrapper.s0.c.c.loopexit.us":       ; preds = %"for input_wrapper.s0.c.c.us"
  %indvars.iv.next4307 = add nuw nsw i64 %indvars.iv4306, 1
  %.not2220.us = icmp eq i64 %indvars.iv.next4307, %367
  br i1 %.not2220.us, label %"end for input_wrapper.s0.x.x", label %"for input_wrapper.s0.x.x.us"

"end for input_wrapper.s0.x.x":                   ; preds = %"end for input_wrapper.s0.c.c.loopexit.us", %"for input_wrapper.s0.y.rebased"
  br i1 %314, label %"for input_wrapper.s0.x.x.rebased.preheader", label %"end for input_wrapper.s0.x.x.rebased", !prof !387

"for input_wrapper.s0.x.x.rebased.preheader":     ; preds = %"end for input_wrapper.s0.x.x"
  %601 = sext i32 %t3748 to i64
  br i1 %256, label %"for input_wrapper.s0.x.x.rebased.us", label %"end for input_wrapper.s0.x.x.rebased", !prof !387

"for input_wrapper.s0.x.x.rebased.us":            ; preds = %"for input_wrapper.s0.x.x.rebased.preheader", %"end for input_wrapper.s0.x.v21.us"
  %indvars.iv4314 = phi i64 [ %indvars.iv.next4315, %"end for input_wrapper.s0.x.v21.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased.preheader" ]
  %602 = trunc i64 %indvars.iv4314 to i32
  %603 = add i32 %t3735, %602
  %604 = shl nsw i32 %603, 3
  %a29.us = sub nsw i32 %a17, %604
  %605 = icmp slt i32 %a29.us, 7
  %t3766.us = select i1 %605, i32 %a29.us, i32 7
  %606 = icmp sgt i32 %t3766.us, -1
  br i1 %606, label %"for input_wrapper.s0.x.v21.us.us.preheader", label %"end for input_wrapper.s0.x.v21.us", !prof !387

"for input_wrapper.s0.x.v21.us.us.preheader":     ; preds = %"for input_wrapper.s0.x.x.rebased.us"
  %607 = sext i32 %604 to i64
  %608 = zext i32 %t3766.us to i64
  br label %"for input_wrapper.s0.x.v21.us.us"

"end for input_wrapper.s0.x.v21.us":              ; preds = %"end for input_wrapper.s0.c.c7.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased.us"
  %indvars.iv.next4315 = add nuw nsw i64 %indvars.iv4314, 1
  %.not2217.us = icmp eq i64 %indvars.iv4314, %369
  br i1 %.not2217.us, label %"end for input_wrapper.s0.x.x.rebased", label %"for input_wrapper.s0.x.x.rebased.us"

"for input_wrapper.s0.x.v21.us.us":               ; preds = %"for input_wrapper.s0.x.v21.us.us.preheader", %"end for input_wrapper.s0.c.c7.loopexit.us.us"
  %indvars.iv4311 = phi i64 [ 0, %"for input_wrapper.s0.x.v21.us.us.preheader" ], [ %indvars.iv.next4312, %"end for input_wrapper.s0.c.c7.loopexit.us.us" ]
  %609 = add nsw i64 %indvars.iv4311, %607
  %610 = mul nsw i64 %609, %368
  %611 = add nsw i64 %610, %422
  %612 = trunc i64 %609 to i32
  %t3768.us.us = add i32 %b20, %612
  %613 = sext i32 %t3768.us.us to i64
  br i1 %410, label %"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c6.us.us"

"for input_wrapper.s0.c.c6.us.us":                ; preds = %"for input_wrapper.s0.x.v21.us.us", %"for input_wrapper.s0.c.c6.us.us"
  %indvars.iv4309 = phi i64 [ %indvars.iv.next4310.3, %"for input_wrapper.s0.c.c6.us.us" ], [ 0, %"for input_wrapper.s0.x.v21.us.us" ]
  %niter5958 = phi i64 [ %niter5958.nsub.3, %"for input_wrapper.s0.c.c6.us.us" ], [ %unroll_iter5957, %"for input_wrapper.s0.x.v21.us.us" ]
  %614 = add nsw i64 %indvars.iv4309, %613
  %615 = shl nsw i64 %614, 2
  %616 = add nsw i64 %615, %601
  %617 = getelementptr inbounds i8, i8* %12, i64 %616
  %618 = bitcast i8* %617 to <4 x i8>*
  %619 = load <4 x i8>, <4 x i8>* %618, align 4, !tbaa !397
  %620 = zext <4 x i8> %619 to <4 x i16>
  %621 = sub nsw <4 x i16> %620, %302
  %622 = shl nuw nsw i64 %indvars.iv4309, 2
  %623 = add nsw i64 %622, %611
  %624 = getelementptr inbounds i16, i16* %input_wrapper, i64 %623
  %625 = bitcast i16* %624 to <4 x i16>*
  store <4 x i16> %621, <4 x i16>* %625, align 8, !tbaa !399
  %indvars.iv.next4310 = or i64 %indvars.iv4309, 1
  %626 = add nsw i64 %indvars.iv.next4310, %613
  %627 = shl nsw i64 %626, 2
  %628 = add nsw i64 %627, %601
  %629 = getelementptr inbounds i8, i8* %12, i64 %628
  %630 = bitcast i8* %629 to <4 x i8>*
  %631 = load <4 x i8>, <4 x i8>* %630, align 4, !tbaa !397
  %632 = zext <4 x i8> %631 to <4 x i16>
  %633 = sub nsw <4 x i16> %632, %302
  %634 = shl nuw nsw i64 %indvars.iv.next4310, 2
  %635 = add nsw i64 %634, %611
  %636 = getelementptr inbounds i16, i16* %input_wrapper, i64 %635
  %637 = bitcast i16* %636 to <4 x i16>*
  store <4 x i16> %633, <4 x i16>* %637, align 8, !tbaa !399
  %indvars.iv.next4310.1 = or i64 %indvars.iv4309, 2
  %638 = add nsw i64 %indvars.iv.next4310.1, %613
  %639 = shl nsw i64 %638, 2
  %640 = add nsw i64 %639, %601
  %641 = getelementptr inbounds i8, i8* %12, i64 %640
  %642 = bitcast i8* %641 to <4 x i8>*
  %643 = load <4 x i8>, <4 x i8>* %642, align 4, !tbaa !397
  %644 = zext <4 x i8> %643 to <4 x i16>
  %645 = sub nsw <4 x i16> %644, %302
  %646 = shl nuw nsw i64 %indvars.iv.next4310.1, 2
  %647 = add nsw i64 %646, %611
  %648 = getelementptr inbounds i16, i16* %input_wrapper, i64 %647
  %649 = bitcast i16* %648 to <4 x i16>*
  store <4 x i16> %645, <4 x i16>* %649, align 8, !tbaa !399
  %indvars.iv.next4310.2 = or i64 %indvars.iv4309, 3
  %650 = add nsw i64 %indvars.iv.next4310.2, %613
  %651 = shl nsw i64 %650, 2
  %652 = add nsw i64 %651, %601
  %653 = getelementptr inbounds i8, i8* %12, i64 %652
  %654 = bitcast i8* %653 to <4 x i8>*
  %655 = load <4 x i8>, <4 x i8>* %654, align 4, !tbaa !397
  %656 = zext <4 x i8> %655 to <4 x i16>
  %657 = sub nsw <4 x i16> %656, %302
  %658 = shl nuw nsw i64 %indvars.iv.next4310.2, 2
  %659 = add nsw i64 %658, %611
  %660 = getelementptr inbounds i16, i16* %input_wrapper, i64 %659
  %661 = bitcast i16* %660 to <4 x i16>*
  store <4 x i16> %657, <4 x i16>* %661, align 8, !tbaa !399
  %indvars.iv.next4310.3 = add nuw nsw i64 %indvars.iv4309, 4
  %niter5958.nsub.3 = add i64 %niter5958, -4
  %niter5958.ncmp.3 = icmp eq i64 %niter5958.nsub.3, 0
  br i1 %niter5958.ncmp.3, label %"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c6.us.us"

"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c6.us.us", %"for input_wrapper.s0.x.v21.us.us"
  %indvars.iv4309.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v21.us.us" ], [ %indvars.iv.next4310.3, %"for input_wrapper.s0.c.c6.us.us" ]
  br i1 %lcmp.mod5956.not, label %"end for input_wrapper.s0.c.c7.loopexit.us.us", label %"for input_wrapper.s0.c.c6.us.us.epil"

"for input_wrapper.s0.c.c6.us.us.epil":           ; preds = %"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c6.us.us.epil"
  %indvars.iv4309.epil = phi i64 [ %indvars.iv.next4310.epil, %"for input_wrapper.s0.c.c6.us.us.epil" ], [ %indvars.iv4309.unr, %"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa" ]
  %epil.iter5955 = phi i64 [ %epil.iter5955.sub, %"for input_wrapper.s0.c.c6.us.us.epil" ], [ %xtraiter5954, %"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa" ]
  %662 = add nsw i64 %indvars.iv4309.epil, %613
  %663 = shl nsw i64 %662, 2
  %664 = add nsw i64 %663, %601
  %665 = getelementptr inbounds i8, i8* %12, i64 %664
  %666 = bitcast i8* %665 to <4 x i8>*
  %667 = load <4 x i8>, <4 x i8>* %666, align 4, !tbaa !397
  %668 = zext <4 x i8> %667 to <4 x i16>
  %669 = sub nsw <4 x i16> %668, %302
  %670 = shl nuw nsw i64 %indvars.iv4309.epil, 2
  %671 = add nsw i64 %670, %611
  %672 = getelementptr inbounds i16, i16* %input_wrapper, i64 %671
  %673 = bitcast i16* %672 to <4 x i16>*
  store <4 x i16> %669, <4 x i16>* %673, align 8, !tbaa !399
  %indvars.iv.next4310.epil = add nuw nsw i64 %indvars.iv4309.epil, 1
  %epil.iter5955.sub = add i64 %epil.iter5955, -1
  %epil.iter5955.cmp.not = icmp eq i64 %epil.iter5955.sub, 0
  br i1 %epil.iter5955.cmp.not, label %"end for input_wrapper.s0.c.c7.loopexit.us.us", label %"for input_wrapper.s0.c.c6.us.us.epil", !llvm.loop !401

"end for input_wrapper.s0.c.c7.loopexit.us.us":   ; preds = %"for input_wrapper.s0.c.c6.us.us.epil", %"end for input_wrapper.s0.c.c7.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4312 = add nuw nsw i64 %indvars.iv4311, 1
  %.not2218.us.us = icmp eq i64 %indvars.iv4311, %608
  br i1 %.not2218.us.us, label %"end for input_wrapper.s0.x.v21.us", label %"for input_wrapper.s0.x.v21.us.us"

"end for input_wrapper.s0.x.x.rebased":           ; preds = %"end for input_wrapper.s0.x.v21.us", %"for input_wrapper.s0.x.x.preheader", %"for input_wrapper.s0.x.x.rebased.preheader", %"end for input_wrapper.s0.x.x"
  %indvars.iv.next4317 = add nuw nsw i64 %indvars.iv4316, 1
  %.not2216 = icmp eq i64 %indvars.iv4316, %391
  br i1 %.not2216, label %"consume input_wrapper", label %"for input_wrapper.s0.y.rebased"

then_bb9:                                         ; preds = %next_bb5
  br i1 %403, label %"consume input_wrapper", label %"for input_wrapper.s0.y.rebased11.us", !prof !402

"for input_wrapper.s0.y.rebased11.us":            ; preds = %then_bb9, %"end for input_wrapper.s0.x.rebased.loopexit.us"
  %indvars.iv4269 = phi i64 [ %indvars.iv.next4270, %"end for input_wrapper.s0.x.rebased.loopexit.us" ], [ 0, %then_bb9 ]
  %674 = trunc i64 %indvars.iv4269 to i32
  %t3775.us = mul i32 %274, %674
  %675 = add nsw i64 %indvars.iv4269, %419
  %676 = mul nsw i64 %675, %360
  %677 = add nsw i64 %676, %414
  br i1 %291, label %"for input_wrapper.s0.x.rebased.us.us", label %"for input_wrapper.s0.x.rebased.preheader.split.us3278", !prof !387

"for input_wrapper.s0.x.rebased.preheader.split.us3278": ; preds = %"for input_wrapper.s0.y.rebased11.us"
  br i1 %230, label %"for input_wrapper.s0.x.rebased.us3262.us", label %"end for input_wrapper.s0.x.rebased.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c15.loopexit.us3273.us", %"end for input_wrapper.s0.c.c.rebased.loopexit.us.us", %"for input_wrapper.s0.x.rebased.preheader.split.us3278"
  %indvars.iv.next4270 = add nuw nsw i64 %indvars.iv4269, 1
  %.not2211.us = icmp eq i64 %indvars.iv4269, %387
  br i1 %.not2211.us, label %"consume input_wrapper", label %"for input_wrapper.s0.y.rebased11.us"

"for input_wrapper.s0.x.rebased.us.us":           ; preds = %"for input_wrapper.s0.y.rebased11.us", %"end for input_wrapper.s0.c.c.rebased.loopexit.us.us"
  %indvars.iv4266 = phi i64 [ %indvars.iv.next4267, %"end for input_wrapper.s0.c.c.rebased.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased11.us" ]
  %678 = trunc i64 %indvars.iv4266 to i32
  %reass.add2731.us.us = add i32 %t3775.us, %678
  %reass.mul2732.us.us = mul i32 %reass.add2731.us.us, %287
  %679 = add nsw i64 %indvars.iv4266, %355
  %680 = mul nsw i64 %679, %356
  %681 = add nsw i64 %677, %680
  %682 = sext i32 %reass.mul2732.us.us to i64
  br i1 %230, label %"for input_wrapper.s0.c.c14.us.us.preheader", label %"end for input_wrapper.s0.c.c15.us.us", !prof !387

"for input_wrapper.s0.c.c14.us.us.preheader":     ; preds = %"for input_wrapper.s0.x.rebased.us.us"
  br i1 %405, label %"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c14.us.us"

"for input_wrapper.s0.c.c14.us.us":               ; preds = %"for input_wrapper.s0.c.c14.us.us.preheader", %"for input_wrapper.s0.c.c14.us.us"
  %indvars.iv4262 = phi i64 [ %indvars.iv.next4263.3, %"for input_wrapper.s0.c.c14.us.us" ], [ 0, %"for input_wrapper.s0.c.c14.us.us.preheader" ]
  %niter5934 = phi i64 [ %niter5934.nsub.3, %"for input_wrapper.s0.c.c14.us.us" ], [ %unroll_iter5933, %"for input_wrapper.s0.c.c14.us.us.preheader" ]
  %683 = shl nuw nsw i64 %indvars.iv4262, 4
  %684 = add nsw i64 %683, %681
  %685 = getelementptr inbounds i8, i8* %12, i64 %684
  %686 = bitcast i8* %685 to <16 x i8>*
  %687 = load <16 x i8>, <16 x i8>* %686, align 4, !tbaa !397
  %688 = zext <16 x i8> %687 to <16 x i16>
  %689 = sub nsw <16 x i16> %688, %290
  %690 = add nsw i64 %683, %682
  %691 = getelementptr inbounds i16, i16* %input_wrapper, i64 %690
  %692 = bitcast i16* %691 to <16 x i16>*
  store <16 x i16> %689, <16 x i16>* %692, align 8, !tbaa !399
  %indvars.iv.next4263 = shl i64 %indvars.iv4262, 4
  %693 = or i64 %indvars.iv.next4263, 16
  %694 = add nsw i64 %693, %681
  %695 = getelementptr inbounds i8, i8* %12, i64 %694
  %696 = bitcast i8* %695 to <16 x i8>*
  %697 = load <16 x i8>, <16 x i8>* %696, align 4, !tbaa !397
  %698 = zext <16 x i8> %697 to <16 x i16>
  %699 = sub nsw <16 x i16> %698, %290
  %700 = add nsw i64 %693, %682
  %701 = getelementptr inbounds i16, i16* %input_wrapper, i64 %700
  %702 = bitcast i16* %701 to <16 x i16>*
  store <16 x i16> %699, <16 x i16>* %702, align 8, !tbaa !399
  %indvars.iv.next4263.1 = shl i64 %indvars.iv4262, 4
  %703 = or i64 %indvars.iv.next4263.1, 32
  %704 = add nsw i64 %703, %681
  %705 = getelementptr inbounds i8, i8* %12, i64 %704
  %706 = bitcast i8* %705 to <16 x i8>*
  %707 = load <16 x i8>, <16 x i8>* %706, align 4, !tbaa !397
  %708 = zext <16 x i8> %707 to <16 x i16>
  %709 = sub nsw <16 x i16> %708, %290
  %710 = add nsw i64 %703, %682
  %711 = getelementptr inbounds i16, i16* %input_wrapper, i64 %710
  %712 = bitcast i16* %711 to <16 x i16>*
  store <16 x i16> %709, <16 x i16>* %712, align 8, !tbaa !399
  %indvars.iv.next4263.2 = shl i64 %indvars.iv4262, 4
  %713 = or i64 %indvars.iv.next4263.2, 48
  %714 = add nsw i64 %713, %681
  %715 = getelementptr inbounds i8, i8* %12, i64 %714
  %716 = bitcast i8* %715 to <16 x i8>*
  %717 = load <16 x i8>, <16 x i8>* %716, align 4, !tbaa !397
  %718 = zext <16 x i8> %717 to <16 x i16>
  %719 = sub nsw <16 x i16> %718, %290
  %720 = add nsw i64 %713, %682
  %721 = getelementptr inbounds i16, i16* %input_wrapper, i64 %720
  %722 = bitcast i16* %721 to <16 x i16>*
  store <16 x i16> %719, <16 x i16>* %722, align 8, !tbaa !399
  %indvars.iv.next4263.3 = add nuw nsw i64 %indvars.iv4262, 4
  %niter5934.nsub.3 = add i64 %niter5934, -4
  %niter5934.ncmp.3 = icmp eq i64 %niter5934.nsub.3, 0
  br i1 %niter5934.ncmp.3, label %"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c14.us.us"

"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c14.us.us", %"for input_wrapper.s0.c.c14.us.us.preheader"
  %indvars.iv4262.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c14.us.us.preheader" ], [ %indvars.iv.next4263.3, %"for input_wrapper.s0.c.c14.us.us" ]
  br i1 %lcmp.mod5932.not, label %"end for input_wrapper.s0.c.c15.us.us", label %"for input_wrapper.s0.c.c14.us.us.epil"

"for input_wrapper.s0.c.c14.us.us.epil":          ; preds = %"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c14.us.us.epil"
  %indvars.iv4262.epil = phi i64 [ %indvars.iv.next4263.epil, %"for input_wrapper.s0.c.c14.us.us.epil" ], [ %indvars.iv4262.unr, %"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa" ]
  %epil.iter5931 = phi i64 [ %epil.iter5931.sub, %"for input_wrapper.s0.c.c14.us.us.epil" ], [ %xtraiter5930, %"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa" ]
  %723 = shl nuw nsw i64 %indvars.iv4262.epil, 4
  %724 = add nsw i64 %723, %681
  %725 = getelementptr inbounds i8, i8* %12, i64 %724
  %726 = bitcast i8* %725 to <16 x i8>*
  %727 = load <16 x i8>, <16 x i8>* %726, align 4, !tbaa !397
  %728 = zext <16 x i8> %727 to <16 x i16>
  %729 = sub nsw <16 x i16> %728, %290
  %730 = add nsw i64 %723, %682
  %731 = getelementptr inbounds i16, i16* %input_wrapper, i64 %730
  %732 = bitcast i16* %731 to <16 x i16>*
  store <16 x i16> %729, <16 x i16>* %732, align 8, !tbaa !399
  %indvars.iv.next4263.epil = add nuw nsw i64 %indvars.iv4262.epil, 1
  %epil.iter5931.sub = add i64 %epil.iter5931, -1
  %epil.iter5931.cmp.not = icmp eq i64 %epil.iter5931.sub, 0
  br i1 %epil.iter5931.cmp.not, label %"end for input_wrapper.s0.c.c15.us.us", label %"for input_wrapper.s0.c.c14.us.us.epil", !llvm.loop !403

"end for input_wrapper.s0.c.c15.us.us":           ; preds = %"end for input_wrapper.s0.c.c15.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c14.us.us.epil", %"for input_wrapper.s0.x.rebased.us.us"
  br label %"for input_wrapper.s0.c.c.rebased.us.us"

"for input_wrapper.s0.c.c.rebased.us.us":         ; preds = %after_bb17.us.us, %"end for input_wrapper.s0.c.c15.us.us"
  %indvars.iv4264 = phi i64 [ %indvars.iv.next4265, %after_bb17.us.us ], [ 0, %"end for input_wrapper.s0.c.c15.us.us" ]
  %733 = add nsw i64 %indvars.iv4264, %358
  %734 = trunc i64 %733 to i32
  %735 = shl nsw i32 %734, 4
  %736 = add nsw i32 %735, 16
  %.not2213.us.us = icmp sgt i32 %736, %t3773
  br i1 %.not2213.us.us, label %next_bb19.us.us, label %then_bb18.us.us

then_bb18.us.us:                                  ; preds = %"for input_wrapper.s0.c.c.rebased.us.us"
  %737 = shl nsw i64 %733, 4
  %738 = add nsw i64 %737, %681
  %739 = getelementptr inbounds i8, i8* %12, i64 %738
  %740 = bitcast i8* %739 to <16 x i8>*
  %741 = load <16 x i8>, <16 x i8>* %740, align 4, !tbaa !397
  %742 = zext <16 x i8> %741 to <16 x i16>
  %743 = sub nsw <16 x i16> %742, %290
  %744 = add nsw i64 %737, %682
  %745 = getelementptr inbounds i16, i16* %input_wrapper, i64 %744
  %746 = bitcast i16* %745 to <16 x i16>*
  store <16 x i16> %743, <16 x i16>* %746, align 8, !tbaa !399
  br label %after_bb17.us.us

next_bb19.us.us:                                  ; preds = %"for input_wrapper.s0.c.c.rebased.us.us"
  %747 = or i32 %735, 1
  %748 = insertelement <16 x i32> undef, i32 %747, i32 0
  %749 = shufflevector <16 x i32> %748, <16 x i32> undef, <16 x i32> zeroinitializer
  %750 = add nsw <16 x i32> %749, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %751 = shufflevector <16 x i32> %750, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %752 = icmp sgt <8 x i32> %751, %293
  %753 = shufflevector <16 x i32> %750, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %754 = icmp sgt <8 x i32> %753, %293
  %755 = shufflevector <8 x i1> %752, <8 x i1> %754, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %756 = xor <16 x i1> %755, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %757 = shl nsw i64 %733, 4
  %758 = add nsw i64 %757, %681
  %759 = getelementptr inbounds i8, i8* %12, i64 %758
  %760 = bitcast i8* %759 to <16 x i8>*
  %761 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %760, i32 4, <16 x i1> %756, <16 x i8> undef), !tbaa !397
  %762 = zext <16 x i8> %761 to <16 x i16>
  %763 = sub nsw <16 x i16> %762, %290
  %764 = add nsw i64 %757, %682
  %765 = getelementptr inbounds i16, i16* %input_wrapper, i64 %764
  %766 = bitcast i16* %765 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %763, <16 x i16>* %766, i32 8, <16 x i1> %756), !tbaa !399
  br label %after_bb17.us.us

after_bb17.us.us:                                 ; preds = %next_bb19.us.us, %then_bb18.us.us
  %indvars.iv.next4265 = add nuw nsw i64 %indvars.iv4264, 1
  %.not2214.us.us = icmp eq i64 %indvars.iv.next4265, %359
  br i1 %.not2214.us.us, label %"end for input_wrapper.s0.c.c.rebased.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased.us.us"

"end for input_wrapper.s0.c.c.rebased.loopexit.us.us": ; preds = %after_bb17.us.us
  %indvars.iv.next4267 = add nuw nsw i64 %indvars.iv4266, 1
  %.not2212.us.us = icmp eq i64 %indvars.iv4266, %357
  br i1 %.not2212.us.us, label %"end for input_wrapper.s0.x.rebased.loopexit.us", label %"for input_wrapper.s0.x.rebased.us.us"

"for input_wrapper.s0.x.rebased.us3262.us":       ; preds = %"for input_wrapper.s0.x.rebased.preheader.split.us3278", %"end for input_wrapper.s0.c.c15.loopexit.us3273.us"
  %indvars.iv4259 = phi i64 [ %indvars.iv.next4260, %"end for input_wrapper.s0.c.c15.loopexit.us3273.us" ], [ 0, %"for input_wrapper.s0.x.rebased.preheader.split.us3278" ]
  %767 = trunc i64 %indvars.iv4259 to i32
  %reass.add2731.us3264.us = add i32 %t3775.us, %767
  %reass.mul2732.us3265.us = mul i32 %reass.add2731.us3264.us, %287
  %768 = add nsw i64 %indvars.iv4259, %355
  %769 = mul nsw i64 %768, %356
  %770 = add nsw i64 %677, %769
  %771 = sext i32 %reass.mul2732.us3265.us to i64
  br i1 %404, label %"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa", label %"for input_wrapper.s0.c.c14.us3267.us"

"for input_wrapper.s0.c.c14.us3267.us":           ; preds = %"for input_wrapper.s0.x.rebased.us3262.us", %"for input_wrapper.s0.c.c14.us3267.us"
  %indvars.iv4257 = phi i64 [ %indvars.iv.next4258.3, %"for input_wrapper.s0.c.c14.us3267.us" ], [ 0, %"for input_wrapper.s0.x.rebased.us3262.us" ]
  %niter5929 = phi i64 [ %niter5929.nsub.3, %"for input_wrapper.s0.c.c14.us3267.us" ], [ %unroll_iter5928, %"for input_wrapper.s0.x.rebased.us3262.us" ]
  %772 = shl nuw nsw i64 %indvars.iv4257, 4
  %773 = add nsw i64 %772, %770
  %774 = getelementptr inbounds i8, i8* %12, i64 %773
  %775 = bitcast i8* %774 to <16 x i8>*
  %776 = load <16 x i8>, <16 x i8>* %775, align 4, !tbaa !397
  %777 = zext <16 x i8> %776 to <16 x i16>
  %778 = sub nsw <16 x i16> %777, %290
  %779 = add nsw i64 %772, %771
  %780 = getelementptr inbounds i16, i16* %input_wrapper, i64 %779
  %781 = bitcast i16* %780 to <16 x i16>*
  store <16 x i16> %778, <16 x i16>* %781, align 8, !tbaa !399
  %indvars.iv.next4258 = shl i64 %indvars.iv4257, 4
  %782 = or i64 %indvars.iv.next4258, 16
  %783 = add nsw i64 %782, %770
  %784 = getelementptr inbounds i8, i8* %12, i64 %783
  %785 = bitcast i8* %784 to <16 x i8>*
  %786 = load <16 x i8>, <16 x i8>* %785, align 4, !tbaa !397
  %787 = zext <16 x i8> %786 to <16 x i16>
  %788 = sub nsw <16 x i16> %787, %290
  %789 = add nsw i64 %782, %771
  %790 = getelementptr inbounds i16, i16* %input_wrapper, i64 %789
  %791 = bitcast i16* %790 to <16 x i16>*
  store <16 x i16> %788, <16 x i16>* %791, align 8, !tbaa !399
  %indvars.iv.next4258.1 = shl i64 %indvars.iv4257, 4
  %792 = or i64 %indvars.iv.next4258.1, 32
  %793 = add nsw i64 %792, %770
  %794 = getelementptr inbounds i8, i8* %12, i64 %793
  %795 = bitcast i8* %794 to <16 x i8>*
  %796 = load <16 x i8>, <16 x i8>* %795, align 4, !tbaa !397
  %797 = zext <16 x i8> %796 to <16 x i16>
  %798 = sub nsw <16 x i16> %797, %290
  %799 = add nsw i64 %792, %771
  %800 = getelementptr inbounds i16, i16* %input_wrapper, i64 %799
  %801 = bitcast i16* %800 to <16 x i16>*
  store <16 x i16> %798, <16 x i16>* %801, align 8, !tbaa !399
  %indvars.iv.next4258.2 = shl i64 %indvars.iv4257, 4
  %802 = or i64 %indvars.iv.next4258.2, 48
  %803 = add nsw i64 %802, %770
  %804 = getelementptr inbounds i8, i8* %12, i64 %803
  %805 = bitcast i8* %804 to <16 x i8>*
  %806 = load <16 x i8>, <16 x i8>* %805, align 4, !tbaa !397
  %807 = zext <16 x i8> %806 to <16 x i16>
  %808 = sub nsw <16 x i16> %807, %290
  %809 = add nsw i64 %802, %771
  %810 = getelementptr inbounds i16, i16* %input_wrapper, i64 %809
  %811 = bitcast i16* %810 to <16 x i16>*
  store <16 x i16> %808, <16 x i16>* %811, align 8, !tbaa !399
  %indvars.iv.next4258.3 = add nuw nsw i64 %indvars.iv4257, 4
  %niter5929.nsub.3 = add i64 %niter5929, -4
  %niter5929.ncmp.3 = icmp eq i64 %niter5929.nsub.3, 0
  br i1 %niter5929.ncmp.3, label %"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa", label %"for input_wrapper.s0.c.c14.us3267.us"

"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c14.us3267.us", %"for input_wrapper.s0.x.rebased.us3262.us"
  %indvars.iv4257.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased.us3262.us" ], [ %indvars.iv.next4258.3, %"for input_wrapper.s0.c.c14.us3267.us" ]
  br i1 %lcmp.mod5927.not, label %"end for input_wrapper.s0.c.c15.loopexit.us3273.us", label %"for input_wrapper.s0.c.c14.us3267.us.epil"

"for input_wrapper.s0.c.c14.us3267.us.epil":      ; preds = %"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa", %"for input_wrapper.s0.c.c14.us3267.us.epil"
  %indvars.iv4257.epil = phi i64 [ %indvars.iv.next4258.epil, %"for input_wrapper.s0.c.c14.us3267.us.epil" ], [ %indvars.iv4257.unr, %"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa" ]
  %epil.iter5926 = phi i64 [ %epil.iter5926.sub, %"for input_wrapper.s0.c.c14.us3267.us.epil" ], [ %xtraiter5925, %"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa" ]
  %812 = shl nuw nsw i64 %indvars.iv4257.epil, 4
  %813 = add nsw i64 %812, %770
  %814 = getelementptr inbounds i8, i8* %12, i64 %813
  %815 = bitcast i8* %814 to <16 x i8>*
  %816 = load <16 x i8>, <16 x i8>* %815, align 4, !tbaa !397
  %817 = zext <16 x i8> %816 to <16 x i16>
  %818 = sub nsw <16 x i16> %817, %290
  %819 = add nsw i64 %812, %771
  %820 = getelementptr inbounds i16, i16* %input_wrapper, i64 %819
  %821 = bitcast i16* %820 to <16 x i16>*
  store <16 x i16> %818, <16 x i16>* %821, align 8, !tbaa !399
  %indvars.iv.next4258.epil = add nuw nsw i64 %indvars.iv4257.epil, 1
  %epil.iter5926.sub = add i64 %epil.iter5926, -1
  %epil.iter5926.cmp.not = icmp eq i64 %epil.iter5926.sub, 0
  br i1 %epil.iter5926.cmp.not, label %"end for input_wrapper.s0.c.c15.loopexit.us3273.us", label %"for input_wrapper.s0.c.c14.us3267.us.epil", !llvm.loop !404

"end for input_wrapper.s0.c.c15.loopexit.us3273.us": ; preds = %"for input_wrapper.s0.c.c14.us3267.us.epil", %"end for input_wrapper.s0.c.c15.loopexit.us3273.us.unr-lcssa"
  %indvars.iv.next4260 = add nuw nsw i64 %indvars.iv4259, 1
  %.not2212.us3271.us = icmp eq i64 %indvars.iv4259, %357
  br i1 %.not2212.us3271.us, label %"end for input_wrapper.s0.x.rebased.loopexit.us", label %"for input_wrapper.s0.x.rebased.us3262.us"

next_bb10:                                        ; preds = %next_bb5
  br i1 %236, label %next_bb21, label %then_bb20

then_bb20:                                        ; preds = %next_bb10
  br i1 %383, label %"for input_wrapper.s0.y.rebased22", label %"consume input_wrapper", !prof !387

next_bb21:                                        ; preds = %next_bb10
  br i1 %237, label %next_bb38, label %then_bb37

"for input_wrapper.s0.y.rebased22":               ; preds = %then_bb20, %"end for input_wrapper.s0.x.rebased26"
  %indvars.iv4284 = phi i64 [ %indvars.iv.next4285, %"end for input_wrapper.s0.x.rebased26" ], [ 0, %then_bb20 ]
  %822 = trunc i64 %indvars.iv4284 to i32
  %t3784 = mul i32 %274, %822
  %823 = add nsw i64 %indvars.iv4284, %419
  %824 = mul nsw i64 %823, %360
  %825 = add nsw i64 %824, %414
  br i1 %283, label %"for input_wrapper.s0.x.rebased25.preheader", label %"end for input_wrapper.s0.x.rebased26", !prof !387

"for input_wrapper.s0.x.rebased25.preheader":     ; preds = %"for input_wrapper.s0.y.rebased22"
  br i1 %297, label %"for input_wrapper.s0.x.rebased25.us", label %"for input_wrapper.s0.x.rebased25.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased25.us":            ; preds = %"for input_wrapper.s0.x.rebased25.preheader", %"end for input_wrapper.s0.c.c.rebased32.loopexit.us"
  %indvars.iv4281 = phi i64 [ %indvars.iv.next4282, %"end for input_wrapper.s0.c.c.rebased32.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased25.preheader" ]
  %826 = trunc i64 %indvars.iv4281 to i32
  %reass.add2733.us = add i32 %t3784, %826
  %reass.mul2734.us = mul i32 %reass.add2733.us, %287
  %827 = add nsw i64 %indvars.iv4281, %355
  %828 = mul nsw i64 %827, %356
  %829 = add nsw i64 %825, %828
  %830 = sext i32 %reass.mul2734.us to i64
  br i1 %229, label %"for input_wrapper.s0.c.c28.us.preheader", label %"end for input_wrapper.s0.c.c29.us", !prof !387

"for input_wrapper.s0.c.c28.us.preheader":        ; preds = %"for input_wrapper.s0.x.rebased25.us"
  br i1 %407, label %"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c28.us"

"for input_wrapper.s0.c.c28.us":                  ; preds = %"for input_wrapper.s0.c.c28.us.preheader", %"for input_wrapper.s0.c.c28.us"
  %indvars.iv4277 = phi i64 [ %indvars.iv.next4278.3, %"for input_wrapper.s0.c.c28.us" ], [ 0, %"for input_wrapper.s0.c.c28.us.preheader" ]
  %niter5944 = phi i64 [ %niter5944.nsub.3, %"for input_wrapper.s0.c.c28.us" ], [ %unroll_iter5943, %"for input_wrapper.s0.c.c28.us.preheader" ]
  %831 = shl nuw nsw i64 %indvars.iv4277, 3
  %832 = add nsw i64 %831, %829
  %833 = getelementptr inbounds i8, i8* %12, i64 %832
  %834 = bitcast i8* %833 to <8 x i8>*
  %835 = load <8 x i8>, <8 x i8>* %834, align 4, !tbaa !397
  %836 = zext <8 x i8> %835 to <8 x i16>
  %837 = sub nsw <8 x i16> %836, %296
  %838 = add nsw i64 %831, %830
  %839 = getelementptr inbounds i16, i16* %input_wrapper, i64 %838
  %840 = bitcast i16* %839 to <8 x i16>*
  store <8 x i16> %837, <8 x i16>* %840, align 8, !tbaa !399
  %indvars.iv.next4278 = shl i64 %indvars.iv4277, 3
  %841 = or i64 %indvars.iv.next4278, 8
  %842 = add nsw i64 %841, %829
  %843 = getelementptr inbounds i8, i8* %12, i64 %842
  %844 = bitcast i8* %843 to <8 x i8>*
  %845 = load <8 x i8>, <8 x i8>* %844, align 4, !tbaa !397
  %846 = zext <8 x i8> %845 to <8 x i16>
  %847 = sub nsw <8 x i16> %846, %296
  %848 = add nsw i64 %841, %830
  %849 = getelementptr inbounds i16, i16* %input_wrapper, i64 %848
  %850 = bitcast i16* %849 to <8 x i16>*
  store <8 x i16> %847, <8 x i16>* %850, align 8, !tbaa !399
  %indvars.iv.next4278.1 = shl i64 %indvars.iv4277, 3
  %851 = or i64 %indvars.iv.next4278.1, 16
  %852 = add nsw i64 %851, %829
  %853 = getelementptr inbounds i8, i8* %12, i64 %852
  %854 = bitcast i8* %853 to <8 x i8>*
  %855 = load <8 x i8>, <8 x i8>* %854, align 4, !tbaa !397
  %856 = zext <8 x i8> %855 to <8 x i16>
  %857 = sub nsw <8 x i16> %856, %296
  %858 = add nsw i64 %851, %830
  %859 = getelementptr inbounds i16, i16* %input_wrapper, i64 %858
  %860 = bitcast i16* %859 to <8 x i16>*
  store <8 x i16> %857, <8 x i16>* %860, align 8, !tbaa !399
  %indvars.iv.next4278.2 = shl i64 %indvars.iv4277, 3
  %861 = or i64 %indvars.iv.next4278.2, 24
  %862 = add nsw i64 %861, %829
  %863 = getelementptr inbounds i8, i8* %12, i64 %862
  %864 = bitcast i8* %863 to <8 x i8>*
  %865 = load <8 x i8>, <8 x i8>* %864, align 4, !tbaa !397
  %866 = zext <8 x i8> %865 to <8 x i16>
  %867 = sub nsw <8 x i16> %866, %296
  %868 = add nsw i64 %861, %830
  %869 = getelementptr inbounds i16, i16* %input_wrapper, i64 %868
  %870 = bitcast i16* %869 to <8 x i16>*
  store <8 x i16> %867, <8 x i16>* %870, align 8, !tbaa !399
  %indvars.iv.next4278.3 = add nuw nsw i64 %indvars.iv4277, 4
  %niter5944.nsub.3 = add i64 %niter5944, -4
  %niter5944.ncmp.3 = icmp eq i64 %niter5944.nsub.3, 0
  br i1 %niter5944.ncmp.3, label %"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c28.us"

"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c28.us", %"for input_wrapper.s0.c.c28.us.preheader"
  %indvars.iv4277.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c28.us.preheader" ], [ %indvars.iv.next4278.3, %"for input_wrapper.s0.c.c28.us" ]
  br i1 %lcmp.mod5942.not, label %"end for input_wrapper.s0.c.c29.us", label %"for input_wrapper.s0.c.c28.us.epil"

"for input_wrapper.s0.c.c28.us.epil":             ; preds = %"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c28.us.epil"
  %indvars.iv4277.epil = phi i64 [ %indvars.iv.next4278.epil, %"for input_wrapper.s0.c.c28.us.epil" ], [ %indvars.iv4277.unr, %"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa" ]
  %epil.iter5941 = phi i64 [ %epil.iter5941.sub, %"for input_wrapper.s0.c.c28.us.epil" ], [ %xtraiter5940, %"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa" ]
  %871 = shl nuw nsw i64 %indvars.iv4277.epil, 3
  %872 = add nsw i64 %871, %829
  %873 = getelementptr inbounds i8, i8* %12, i64 %872
  %874 = bitcast i8* %873 to <8 x i8>*
  %875 = load <8 x i8>, <8 x i8>* %874, align 4, !tbaa !397
  %876 = zext <8 x i8> %875 to <8 x i16>
  %877 = sub nsw <8 x i16> %876, %296
  %878 = add nsw i64 %871, %830
  %879 = getelementptr inbounds i16, i16* %input_wrapper, i64 %878
  %880 = bitcast i16* %879 to <8 x i16>*
  store <8 x i16> %877, <8 x i16>* %880, align 8, !tbaa !399
  %indvars.iv.next4278.epil = add nuw nsw i64 %indvars.iv4277.epil, 1
  %epil.iter5941.sub = add i64 %epil.iter5941, -1
  %epil.iter5941.cmp.not = icmp eq i64 %epil.iter5941.sub, 0
  br i1 %epil.iter5941.cmp.not, label %"end for input_wrapper.s0.c.c29.us", label %"for input_wrapper.s0.c.c28.us.epil", !llvm.loop !405

"end for input_wrapper.s0.c.c29.us":              ; preds = %"end for input_wrapper.s0.c.c29.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c28.us.epil", %"for input_wrapper.s0.x.rebased25.us"
  br label %"for input_wrapper.s0.c.c.rebased31.us"

"for input_wrapper.s0.c.c.rebased31.us":          ; preds = %"end for input_wrapper.s0.c.c29.us", %after_bb34.us
  %indvars.iv4279 = phi i64 [ 0, %"end for input_wrapper.s0.c.c29.us" ], [ %indvars.iv.next4280, %after_bb34.us ]
  %881 = add nsw i64 %indvars.iv4279, %362
  %882 = trunc i64 %881 to i32
  %883 = shl nsw i32 %882, 3
  %884 = add nsw i32 %883, 8
  %.not2208.us = icmp sgt i32 %884, %t3773
  br i1 %.not2208.us, label %next_bb36.us, label %then_bb35.us

then_bb35.us:                                     ; preds = %"for input_wrapper.s0.c.c.rebased31.us"
  %885 = shl nsw i64 %881, 3
  %886 = add nsw i64 %885, %829
  %887 = getelementptr inbounds i8, i8* %12, i64 %886
  %888 = bitcast i8* %887 to <8 x i8>*
  %889 = load <8 x i8>, <8 x i8>* %888, align 4, !tbaa !397
  %890 = zext <8 x i8> %889 to <8 x i16>
  %891 = sub nsw <8 x i16> %890, %296
  %892 = add nsw i64 %885, %830
  %893 = getelementptr inbounds i16, i16* %input_wrapper, i64 %892
  %894 = bitcast i16* %893 to <8 x i16>*
  store <8 x i16> %891, <8 x i16>* %894, align 8, !tbaa !399
  br label %after_bb34.us

next_bb36.us:                                     ; preds = %"for input_wrapper.s0.c.c.rebased31.us"
  %895 = or i32 %883, 1
  %896 = insertelement <8 x i32> undef, i32 %895, i32 0
  %897 = shufflevector <8 x i32> %896, <8 x i32> undef, <8 x i32> zeroinitializer
  %898 = add nsw <8 x i32> %897, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %899 = icmp sle <8 x i32> %898, %299
  %900 = shl nsw i64 %881, 3
  %901 = add nsw i64 %900, %829
  %902 = getelementptr inbounds i8, i8* %12, i64 %901
  %903 = bitcast i8* %902 to <8 x i8>*
  %904 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %903, i32 4, <8 x i1> %899, <8 x i8> undef), !tbaa !397
  %905 = zext <8 x i8> %904 to <8 x i16>
  %906 = sub nsw <8 x i16> %905, %296
  %907 = add nsw i64 %900, %830
  %908 = getelementptr inbounds i16, i16* %input_wrapper, i64 %907
  %909 = bitcast i16* %908 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %906, <8 x i16>* %909, i32 8, <8 x i1> %899), !tbaa !399
  br label %after_bb34.us

after_bb34.us:                                    ; preds = %next_bb36.us, %then_bb35.us
  %indvars.iv.next4280 = add nuw nsw i64 %indvars.iv4279, 1
  %.not2209.us = icmp eq i64 %indvars.iv.next4280, %363
  br i1 %.not2209.us, label %"end for input_wrapper.s0.c.c.rebased32.loopexit.us", label %"for input_wrapper.s0.c.c.rebased31.us"

"end for input_wrapper.s0.c.c.rebased32.loopexit.us": ; preds = %after_bb34.us
  %indvars.iv.next4282 = add nuw nsw i64 %indvars.iv4281, 1
  %.not2207.us = icmp eq i64 %indvars.iv4281, %357
  br i1 %.not2207.us, label %"end for input_wrapper.s0.x.rebased26", label %"for input_wrapper.s0.x.rebased25.us"

"for input_wrapper.s0.x.rebased25.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased25.preheader"
  br i1 %229, label %"for input_wrapper.s0.x.rebased25.us3281", label %"end for input_wrapper.s0.x.rebased26", !prof !387

"for input_wrapper.s0.x.rebased25.us3281":        ; preds = %"for input_wrapper.s0.x.rebased25.preheader.split", %"end for input_wrapper.s0.c.c29.loopexit.us3292"
  %indvars.iv4274 = phi i64 [ %indvars.iv.next4275, %"end for input_wrapper.s0.c.c29.loopexit.us3292" ], [ 0, %"for input_wrapper.s0.x.rebased25.preheader.split" ]
  %910 = trunc i64 %indvars.iv4274 to i32
  %reass.add2733.us3283 = add i32 %t3784, %910
  %reass.mul2734.us3284 = mul i32 %reass.add2733.us3283, %287
  %911 = add nsw i64 %indvars.iv4274, %355
  %912 = mul nsw i64 %911, %356
  %913 = add nsw i64 %825, %912
  %914 = sext i32 %reass.mul2734.us3284 to i64
  br i1 %406, label %"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa", label %"for input_wrapper.s0.c.c28.us3286"

"for input_wrapper.s0.c.c28.us3286":              ; preds = %"for input_wrapper.s0.x.rebased25.us3281", %"for input_wrapper.s0.c.c28.us3286"
  %indvars.iv4272 = phi i64 [ %indvars.iv.next4273.3, %"for input_wrapper.s0.c.c28.us3286" ], [ 0, %"for input_wrapper.s0.x.rebased25.us3281" ]
  %niter5939 = phi i64 [ %niter5939.nsub.3, %"for input_wrapper.s0.c.c28.us3286" ], [ %unroll_iter5938, %"for input_wrapper.s0.x.rebased25.us3281" ]
  %915 = shl nuw nsw i64 %indvars.iv4272, 3
  %916 = add nsw i64 %915, %913
  %917 = getelementptr inbounds i8, i8* %12, i64 %916
  %918 = bitcast i8* %917 to <8 x i8>*
  %919 = load <8 x i8>, <8 x i8>* %918, align 4, !tbaa !397
  %920 = zext <8 x i8> %919 to <8 x i16>
  %921 = sub nsw <8 x i16> %920, %296
  %922 = add nsw i64 %915, %914
  %923 = getelementptr inbounds i16, i16* %input_wrapper, i64 %922
  %924 = bitcast i16* %923 to <8 x i16>*
  store <8 x i16> %921, <8 x i16>* %924, align 8, !tbaa !399
  %indvars.iv.next4273 = shl i64 %indvars.iv4272, 3
  %925 = or i64 %indvars.iv.next4273, 8
  %926 = add nsw i64 %925, %913
  %927 = getelementptr inbounds i8, i8* %12, i64 %926
  %928 = bitcast i8* %927 to <8 x i8>*
  %929 = load <8 x i8>, <8 x i8>* %928, align 4, !tbaa !397
  %930 = zext <8 x i8> %929 to <8 x i16>
  %931 = sub nsw <8 x i16> %930, %296
  %932 = add nsw i64 %925, %914
  %933 = getelementptr inbounds i16, i16* %input_wrapper, i64 %932
  %934 = bitcast i16* %933 to <8 x i16>*
  store <8 x i16> %931, <8 x i16>* %934, align 8, !tbaa !399
  %indvars.iv.next4273.1 = shl i64 %indvars.iv4272, 3
  %935 = or i64 %indvars.iv.next4273.1, 16
  %936 = add nsw i64 %935, %913
  %937 = getelementptr inbounds i8, i8* %12, i64 %936
  %938 = bitcast i8* %937 to <8 x i8>*
  %939 = load <8 x i8>, <8 x i8>* %938, align 4, !tbaa !397
  %940 = zext <8 x i8> %939 to <8 x i16>
  %941 = sub nsw <8 x i16> %940, %296
  %942 = add nsw i64 %935, %914
  %943 = getelementptr inbounds i16, i16* %input_wrapper, i64 %942
  %944 = bitcast i16* %943 to <8 x i16>*
  store <8 x i16> %941, <8 x i16>* %944, align 8, !tbaa !399
  %indvars.iv.next4273.2 = shl i64 %indvars.iv4272, 3
  %945 = or i64 %indvars.iv.next4273.2, 24
  %946 = add nsw i64 %945, %913
  %947 = getelementptr inbounds i8, i8* %12, i64 %946
  %948 = bitcast i8* %947 to <8 x i8>*
  %949 = load <8 x i8>, <8 x i8>* %948, align 4, !tbaa !397
  %950 = zext <8 x i8> %949 to <8 x i16>
  %951 = sub nsw <8 x i16> %950, %296
  %952 = add nsw i64 %945, %914
  %953 = getelementptr inbounds i16, i16* %input_wrapper, i64 %952
  %954 = bitcast i16* %953 to <8 x i16>*
  store <8 x i16> %951, <8 x i16>* %954, align 8, !tbaa !399
  %indvars.iv.next4273.3 = add nuw nsw i64 %indvars.iv4272, 4
  %niter5939.nsub.3 = add i64 %niter5939, -4
  %niter5939.ncmp.3 = icmp eq i64 %niter5939.nsub.3, 0
  br i1 %niter5939.ncmp.3, label %"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa", label %"for input_wrapper.s0.c.c28.us3286"

"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c28.us3286", %"for input_wrapper.s0.x.rebased25.us3281"
  %indvars.iv4272.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased25.us3281" ], [ %indvars.iv.next4273.3, %"for input_wrapper.s0.c.c28.us3286" ]
  br i1 %lcmp.mod5937.not, label %"end for input_wrapper.s0.c.c29.loopexit.us3292", label %"for input_wrapper.s0.c.c28.us3286.epil"

"for input_wrapper.s0.c.c28.us3286.epil":         ; preds = %"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa", %"for input_wrapper.s0.c.c28.us3286.epil"
  %indvars.iv4272.epil = phi i64 [ %indvars.iv.next4273.epil, %"for input_wrapper.s0.c.c28.us3286.epil" ], [ %indvars.iv4272.unr, %"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa" ]
  %epil.iter5936 = phi i64 [ %epil.iter5936.sub, %"for input_wrapper.s0.c.c28.us3286.epil" ], [ %xtraiter5935, %"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa" ]
  %955 = shl nuw nsw i64 %indvars.iv4272.epil, 3
  %956 = add nsw i64 %955, %913
  %957 = getelementptr inbounds i8, i8* %12, i64 %956
  %958 = bitcast i8* %957 to <8 x i8>*
  %959 = load <8 x i8>, <8 x i8>* %958, align 4, !tbaa !397
  %960 = zext <8 x i8> %959 to <8 x i16>
  %961 = sub nsw <8 x i16> %960, %296
  %962 = add nsw i64 %955, %914
  %963 = getelementptr inbounds i16, i16* %input_wrapper, i64 %962
  %964 = bitcast i16* %963 to <8 x i16>*
  store <8 x i16> %961, <8 x i16>* %964, align 8, !tbaa !399
  %indvars.iv.next4273.epil = add nuw nsw i64 %indvars.iv4272.epil, 1
  %epil.iter5936.sub = add i64 %epil.iter5936, -1
  %epil.iter5936.cmp.not = icmp eq i64 %epil.iter5936.sub, 0
  br i1 %epil.iter5936.cmp.not, label %"end for input_wrapper.s0.c.c29.loopexit.us3292", label %"for input_wrapper.s0.c.c28.us3286.epil", !llvm.loop !406

"end for input_wrapper.s0.c.c29.loopexit.us3292": ; preds = %"for input_wrapper.s0.c.c28.us3286.epil", %"end for input_wrapper.s0.c.c29.loopexit.us3292.unr-lcssa"
  %indvars.iv.next4275 = add nuw nsw i64 %indvars.iv4274, 1
  %.not2207.us3290 = icmp eq i64 %indvars.iv4274, %357
  br i1 %.not2207.us3290, label %"end for input_wrapper.s0.x.rebased26", label %"for input_wrapper.s0.x.rebased25.us3281"

"end for input_wrapper.s0.x.rebased26":           ; preds = %"end for input_wrapper.s0.c.c29.loopexit.us3292", %"end for input_wrapper.s0.c.c.rebased32.loopexit.us", %"for input_wrapper.s0.x.rebased25.preheader.split", %"for input_wrapper.s0.y.rebased22"
  %indvars.iv.next4285 = add nuw nsw i64 %indvars.iv4284, 1
  %.not2206 = icmp eq i64 %indvars.iv4284, %388
  br i1 %.not2206, label %"consume input_wrapper", label %"for input_wrapper.s0.y.rebased22"

then_bb37:                                        ; preds = %next_bb21
  br i1 %383, label %"for input_wrapper.s0.y.rebased39", label %"consume input_wrapper", !prof !387

next_bb38:                                        ; preds = %next_bb21
  br i1 %383, label %"for input_wrapper.s0.y.rebased48", label %"consume input_wrapper", !prof !387

"for input_wrapper.s0.y.rebased39":               ; preds = %then_bb37, %"end for input_wrapper.s0.x.rebased43"
  %indvars.iv4292 = phi i64 [ %indvars.iv.next4293, %"end for input_wrapper.s0.x.rebased43" ], [ 0, %then_bb37 ]
  %965 = trunc i64 %indvars.iv4292 to i32
  %t3792 = mul i32 %274, %965
  %966 = add nsw i64 %indvars.iv4292, %419
  %967 = mul nsw i64 %966, %360
  %968 = add nsw i64 %967, %414
  br i1 %brmerge4984.demorgan, label %"for input_wrapper.s0.x.rebased42.us", label %"end for input_wrapper.s0.x.rebased43", !prof !407

"for input_wrapper.s0.x.rebased42.us":            ; preds = %"for input_wrapper.s0.y.rebased39", %"end for input_wrapper.s0.c.c46.loopexit.us"
  %indvars.iv4289 = phi i64 [ %indvars.iv.next4290, %"end for input_wrapper.s0.c.c46.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased39" ]
  %969 = trunc i64 %indvars.iv4289 to i32
  %reass.add2735.us = add i32 %t3792, %969
  %reass.mul2736.us = mul i32 %reass.add2735.us, %287
  %970 = add nsw i64 %indvars.iv4289, %355
  %971 = mul nsw i64 %970, %356
  %972 = add nsw i64 %968, %971
  %973 = sext i32 %reass.mul2736.us to i64
  br i1 %408, label %"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c45.us"

"for input_wrapper.s0.c.c45.us":                  ; preds = %"for input_wrapper.s0.x.rebased42.us", %"for input_wrapper.s0.c.c45.us"
  %indvars.iv4287 = phi i64 [ %indvars.iv.next4288.3, %"for input_wrapper.s0.c.c45.us" ], [ 0, %"for input_wrapper.s0.x.rebased42.us" ]
  %niter5949 = phi i64 [ %niter5949.nsub.3, %"for input_wrapper.s0.c.c45.us" ], [ %unroll_iter5948, %"for input_wrapper.s0.x.rebased42.us" ]
  %974 = shl nuw nsw i64 %indvars.iv4287, 2
  %975 = add nsw i64 %974, %972
  %976 = getelementptr inbounds i8, i8* %12, i64 %975
  %977 = bitcast i8* %976 to <4 x i8>*
  %978 = load <4 x i8>, <4 x i8>* %977, align 4, !tbaa !397
  %979 = zext <4 x i8> %978 to <4 x i16>
  %980 = sub nsw <4 x i16> %979, %302
  %981 = add nsw i64 %974, %973
  %982 = getelementptr inbounds i16, i16* %input_wrapper, i64 %981
  %983 = bitcast i16* %982 to <4 x i16>*
  store <4 x i16> %980, <4 x i16>* %983, align 8, !tbaa !399
  %indvars.iv.next4288 = shl i64 %indvars.iv4287, 2
  %984 = or i64 %indvars.iv.next4288, 4
  %985 = add nsw i64 %984, %972
  %986 = getelementptr inbounds i8, i8* %12, i64 %985
  %987 = bitcast i8* %986 to <4 x i8>*
  %988 = load <4 x i8>, <4 x i8>* %987, align 4, !tbaa !397
  %989 = zext <4 x i8> %988 to <4 x i16>
  %990 = sub nsw <4 x i16> %989, %302
  %991 = add nsw i64 %984, %973
  %992 = getelementptr inbounds i16, i16* %input_wrapper, i64 %991
  %993 = bitcast i16* %992 to <4 x i16>*
  store <4 x i16> %990, <4 x i16>* %993, align 8, !tbaa !399
  %indvars.iv.next4288.1 = shl i64 %indvars.iv4287, 2
  %994 = or i64 %indvars.iv.next4288.1, 8
  %995 = add nsw i64 %994, %972
  %996 = getelementptr inbounds i8, i8* %12, i64 %995
  %997 = bitcast i8* %996 to <4 x i8>*
  %998 = load <4 x i8>, <4 x i8>* %997, align 4, !tbaa !397
  %999 = zext <4 x i8> %998 to <4 x i16>
  %1000 = sub nsw <4 x i16> %999, %302
  %1001 = add nsw i64 %994, %973
  %1002 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1001
  %1003 = bitcast i16* %1002 to <4 x i16>*
  store <4 x i16> %1000, <4 x i16>* %1003, align 8, !tbaa !399
  %indvars.iv.next4288.2 = shl i64 %indvars.iv4287, 2
  %1004 = or i64 %indvars.iv.next4288.2, 12
  %1005 = add nsw i64 %1004, %972
  %1006 = getelementptr inbounds i8, i8* %12, i64 %1005
  %1007 = bitcast i8* %1006 to <4 x i8>*
  %1008 = load <4 x i8>, <4 x i8>* %1007, align 4, !tbaa !397
  %1009 = zext <4 x i8> %1008 to <4 x i16>
  %1010 = sub nsw <4 x i16> %1009, %302
  %1011 = add nsw i64 %1004, %973
  %1012 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1011
  %1013 = bitcast i16* %1012 to <4 x i16>*
  store <4 x i16> %1010, <4 x i16>* %1013, align 8, !tbaa !399
  %indvars.iv.next4288.3 = add nuw nsw i64 %indvars.iv4287, 4
  %niter5949.nsub.3 = add i64 %niter5949, -4
  %niter5949.ncmp.3 = icmp eq i64 %niter5949.nsub.3, 0
  br i1 %niter5949.ncmp.3, label %"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c45.us"

"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c45.us", %"for input_wrapper.s0.x.rebased42.us"
  %indvars.iv4287.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased42.us" ], [ %indvars.iv.next4288.3, %"for input_wrapper.s0.c.c45.us" ]
  br i1 %lcmp.mod5947.not, label %"end for input_wrapper.s0.c.c46.loopexit.us", label %"for input_wrapper.s0.c.c45.us.epil"

"for input_wrapper.s0.c.c45.us.epil":             ; preds = %"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c45.us.epil"
  %indvars.iv4287.epil = phi i64 [ %indvars.iv.next4288.epil, %"for input_wrapper.s0.c.c45.us.epil" ], [ %indvars.iv4287.unr, %"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa" ]
  %epil.iter5946 = phi i64 [ %epil.iter5946.sub, %"for input_wrapper.s0.c.c45.us.epil" ], [ %xtraiter5945, %"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa" ]
  %1014 = shl nuw nsw i64 %indvars.iv4287.epil, 2
  %1015 = add nsw i64 %1014, %972
  %1016 = getelementptr inbounds i8, i8* %12, i64 %1015
  %1017 = bitcast i8* %1016 to <4 x i8>*
  %1018 = load <4 x i8>, <4 x i8>* %1017, align 4, !tbaa !397
  %1019 = zext <4 x i8> %1018 to <4 x i16>
  %1020 = sub nsw <4 x i16> %1019, %302
  %1021 = add nsw i64 %1014, %973
  %1022 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1021
  %1023 = bitcast i16* %1022 to <4 x i16>*
  store <4 x i16> %1020, <4 x i16>* %1023, align 8, !tbaa !399
  %indvars.iv.next4288.epil = add nuw nsw i64 %indvars.iv4287.epil, 1
  %epil.iter5946.sub = add i64 %epil.iter5946, -1
  %epil.iter5946.cmp.not = icmp eq i64 %epil.iter5946.sub, 0
  br i1 %epil.iter5946.cmp.not, label %"end for input_wrapper.s0.c.c46.loopexit.us", label %"for input_wrapper.s0.c.c45.us.epil", !llvm.loop !408

"end for input_wrapper.s0.c.c46.loopexit.us":     ; preds = %"for input_wrapper.s0.c.c45.us.epil", %"end for input_wrapper.s0.c.c46.loopexit.us.unr-lcssa"
  %indvars.iv.next4290 = add nuw nsw i64 %indvars.iv4289, 1
  %.not2204.us = icmp eq i64 %indvars.iv4289, %357
  br i1 %.not2204.us, label %"end for input_wrapper.s0.x.rebased43", label %"for input_wrapper.s0.x.rebased42.us"

"end for input_wrapper.s0.x.rebased43":           ; preds = %"end for input_wrapper.s0.c.c46.loopexit.us", %"for input_wrapper.s0.y.rebased39"
  %indvars.iv.next4293 = add nuw nsw i64 %indvars.iv4292, 1
  %.not2203 = icmp eq i64 %indvars.iv4292, %389
  br i1 %.not2203, label %"consume input_wrapper", label %"for input_wrapper.s0.y.rebased39"

"for input_wrapper.s0.y.rebased48":               ; preds = %next_bb38, %"end for input_wrapper.s0.x.rebased52"
  %indvars.iv4300 = phi i64 [ %indvars.iv.next4301, %"end for input_wrapper.s0.x.rebased52" ], [ 0, %next_bb38 ]
  %1024 = trunc i64 %indvars.iv4300 to i32
  %t3799 = mul i32 %274, %1024
  %1025 = add nsw i64 %indvars.iv4300, %419
  %1026 = mul nsw i64 %1025, %360
  %1027 = add nsw i64 %1026, %414
  br i1 %brmerge4987.demorgan, label %iter.check5384, label %"end for input_wrapper.s0.x.rebased52", !prof !407

iter.check5384:                                   ; preds = %"for input_wrapper.s0.y.rebased48", %"end for input_wrapper.s0.c.loopexit.us"
  %indvars.iv4297 = phi i64 [ %indvars.iv.next4298, %"end for input_wrapper.s0.c.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased48" ]
  %1028 = trunc i64 %indvars.iv4297 to i32
  %reass.add2737.us = add i32 %t3799, %1028
  %reass.mul2738.us = mul i32 %reass.add2737.us, %287
  %1029 = add nsw i64 %indvars.iv4297, %355
  %1030 = mul nsw i64 %1029, %356
  %1031 = add nsw i64 %1027, %1030
  %1032 = sext i32 %reass.mul2738.us to i64
  br i1 %min.iters.check5382, label %"for input_wrapper.s0.c.us.preheader", label %vector.main.loop.iter.check5386

vector.main.loop.iter.check5386:                  ; preds = %iter.check5384
  br i1 %min.iters.check5385, label %vec.epilog.ph5409, label %vector.ph5387

vector.ph5387:                                    ; preds = %vector.main.loop.iter.check5386
  br i1 %409, label %middle.block5379.unr-lcssa, label %vector.body5381

vector.body5381:                                  ; preds = %vector.ph5387, %vector.body5381
  %index5390 = phi i64 [ %index.next5391.1, %vector.body5381 ], [ 0, %vector.ph5387 ]
  %niter5953 = phi i64 [ %niter5953.nsub.1, %vector.body5381 ], [ %unroll_iter5952, %vector.ph5387 ]
  %1033 = add nsw i64 %index5390, %1031
  %1034 = getelementptr inbounds i8, i8* %12, i64 %1033
  %1035 = bitcast i8* %1034 to <16 x i8>*
  %wide.load5393 = load <16 x i8>, <16 x i8>* %1035, align 1, !tbaa !397
  %1036 = getelementptr inbounds i8, i8* %1034, i64 16
  %1037 = bitcast i8* %1036 to <16 x i8>*
  %wide.load5394 = load <16 x i8>, <16 x i8>* %1037, align 1, !tbaa !397
  %1038 = getelementptr inbounds i8, i8* %1034, i64 32
  %1039 = bitcast i8* %1038 to <16 x i8>*
  %wide.load5395 = load <16 x i8>, <16 x i8>* %1039, align 1, !tbaa !397
  %1040 = getelementptr inbounds i8, i8* %1034, i64 48
  %1041 = bitcast i8* %1040 to <16 x i8>*
  %wide.load5396 = load <16 x i8>, <16 x i8>* %1041, align 1, !tbaa !397
  %1042 = zext <16 x i8> %wide.load5393 to <16 x i16>
  %1043 = zext <16 x i8> %wide.load5394 to <16 x i16>
  %1044 = zext <16 x i8> %wide.load5395 to <16 x i16>
  %1045 = zext <16 x i8> %wide.load5396 to <16 x i16>
  %1046 = sub nsw <16 x i16> %1042, %broadcast.splat5398
  %1047 = sub nsw <16 x i16> %1043, %broadcast.splat5400
  %1048 = sub nsw <16 x i16> %1044, %broadcast.splat5402
  %1049 = sub nsw <16 x i16> %1045, %broadcast.splat5404
  %1050 = add nsw i64 %index5390, %1032
  %1051 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1050
  %1052 = bitcast i16* %1051 to <16 x i16>*
  store <16 x i16> %1046, <16 x i16>* %1052, align 2, !tbaa !399
  %1053 = getelementptr inbounds i16, i16* %1051, i64 16
  %1054 = bitcast i16* %1053 to <16 x i16>*
  store <16 x i16> %1047, <16 x i16>* %1054, align 2, !tbaa !399
  %1055 = getelementptr inbounds i16, i16* %1051, i64 32
  %1056 = bitcast i16* %1055 to <16 x i16>*
  store <16 x i16> %1048, <16 x i16>* %1056, align 2, !tbaa !399
  %1057 = getelementptr inbounds i16, i16* %1051, i64 48
  %1058 = bitcast i16* %1057 to <16 x i16>*
  store <16 x i16> %1049, <16 x i16>* %1058, align 2, !tbaa !399
  %index.next5391 = or i64 %index5390, 64
  %1059 = add nsw i64 %index.next5391, %1031
  %1060 = getelementptr inbounds i8, i8* %12, i64 %1059
  %1061 = bitcast i8* %1060 to <16 x i8>*
  %wide.load5393.1 = load <16 x i8>, <16 x i8>* %1061, align 1, !tbaa !397
  %1062 = getelementptr inbounds i8, i8* %1060, i64 16
  %1063 = bitcast i8* %1062 to <16 x i8>*
  %wide.load5394.1 = load <16 x i8>, <16 x i8>* %1063, align 1, !tbaa !397
  %1064 = getelementptr inbounds i8, i8* %1060, i64 32
  %1065 = bitcast i8* %1064 to <16 x i8>*
  %wide.load5395.1 = load <16 x i8>, <16 x i8>* %1065, align 1, !tbaa !397
  %1066 = getelementptr inbounds i8, i8* %1060, i64 48
  %1067 = bitcast i8* %1066 to <16 x i8>*
  %wide.load5396.1 = load <16 x i8>, <16 x i8>* %1067, align 1, !tbaa !397
  %1068 = zext <16 x i8> %wide.load5393.1 to <16 x i16>
  %1069 = zext <16 x i8> %wide.load5394.1 to <16 x i16>
  %1070 = zext <16 x i8> %wide.load5395.1 to <16 x i16>
  %1071 = zext <16 x i8> %wide.load5396.1 to <16 x i16>
  %1072 = sub nsw <16 x i16> %1068, %broadcast.splat5398
  %1073 = sub nsw <16 x i16> %1069, %broadcast.splat5400
  %1074 = sub nsw <16 x i16> %1070, %broadcast.splat5402
  %1075 = sub nsw <16 x i16> %1071, %broadcast.splat5404
  %1076 = add nsw i64 %index.next5391, %1032
  %1077 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1076
  %1078 = bitcast i16* %1077 to <16 x i16>*
  store <16 x i16> %1072, <16 x i16>* %1078, align 2, !tbaa !399
  %1079 = getelementptr inbounds i16, i16* %1077, i64 16
  %1080 = bitcast i16* %1079 to <16 x i16>*
  store <16 x i16> %1073, <16 x i16>* %1080, align 2, !tbaa !399
  %1081 = getelementptr inbounds i16, i16* %1077, i64 32
  %1082 = bitcast i16* %1081 to <16 x i16>*
  store <16 x i16> %1074, <16 x i16>* %1082, align 2, !tbaa !399
  %1083 = getelementptr inbounds i16, i16* %1077, i64 48
  %1084 = bitcast i16* %1083 to <16 x i16>*
  store <16 x i16> %1075, <16 x i16>* %1084, align 2, !tbaa !399
  %index.next5391.1 = add i64 %index5390, 128
  %niter5953.nsub.1 = add i64 %niter5953, -2
  %niter5953.ncmp.1 = icmp eq i64 %niter5953.nsub.1, 0
  br i1 %niter5953.ncmp.1, label %middle.block5379.unr-lcssa, label %vector.body5381, !llvm.loop !409

middle.block5379.unr-lcssa:                       ; preds = %vector.body5381, %vector.ph5387
  %index5390.unr = phi i64 [ 0, %vector.ph5387 ], [ %index.next5391.1, %vector.body5381 ]
  br i1 %lcmp.mod5951.not, label %middle.block5379, label %vector.body5381.epil

vector.body5381.epil:                             ; preds = %middle.block5379.unr-lcssa
  %1085 = add nsw i64 %index5390.unr, %1031
  %1086 = getelementptr inbounds i8, i8* %12, i64 %1085
  %1087 = bitcast i8* %1086 to <16 x i8>*
  %wide.load5393.epil = load <16 x i8>, <16 x i8>* %1087, align 1, !tbaa !397
  %1088 = getelementptr inbounds i8, i8* %1086, i64 16
  %1089 = bitcast i8* %1088 to <16 x i8>*
  %wide.load5394.epil = load <16 x i8>, <16 x i8>* %1089, align 1, !tbaa !397
  %1090 = getelementptr inbounds i8, i8* %1086, i64 32
  %1091 = bitcast i8* %1090 to <16 x i8>*
  %wide.load5395.epil = load <16 x i8>, <16 x i8>* %1091, align 1, !tbaa !397
  %1092 = getelementptr inbounds i8, i8* %1086, i64 48
  %1093 = bitcast i8* %1092 to <16 x i8>*
  %wide.load5396.epil = load <16 x i8>, <16 x i8>* %1093, align 1, !tbaa !397
  %1094 = zext <16 x i8> %wide.load5393.epil to <16 x i16>
  %1095 = zext <16 x i8> %wide.load5394.epil to <16 x i16>
  %1096 = zext <16 x i8> %wide.load5395.epil to <16 x i16>
  %1097 = zext <16 x i8> %wide.load5396.epil to <16 x i16>
  %1098 = sub nsw <16 x i16> %1094, %broadcast.splat5398
  %1099 = sub nsw <16 x i16> %1095, %broadcast.splat5400
  %1100 = sub nsw <16 x i16> %1096, %broadcast.splat5402
  %1101 = sub nsw <16 x i16> %1097, %broadcast.splat5404
  %1102 = add nsw i64 %index5390.unr, %1032
  %1103 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1102
  %1104 = bitcast i16* %1103 to <16 x i16>*
  store <16 x i16> %1098, <16 x i16>* %1104, align 2, !tbaa !399
  %1105 = getelementptr inbounds i16, i16* %1103, i64 16
  %1106 = bitcast i16* %1105 to <16 x i16>*
  store <16 x i16> %1099, <16 x i16>* %1106, align 2, !tbaa !399
  %1107 = getelementptr inbounds i16, i16* %1103, i64 32
  %1108 = bitcast i16* %1107 to <16 x i16>*
  store <16 x i16> %1100, <16 x i16>* %1108, align 2, !tbaa !399
  %1109 = getelementptr inbounds i16, i16* %1103, i64 48
  %1110 = bitcast i16* %1109 to <16 x i16>*
  store <16 x i16> %1101, <16 x i16>* %1110, align 2, !tbaa !399
  br label %middle.block5379

middle.block5379:                                 ; preds = %middle.block5379.unr-lcssa, %vector.body5381.epil
  br i1 %cmp.n5392, label %"end for input_wrapper.s0.c.loopexit.us", label %vec.epilog.iter.check5408

vec.epilog.iter.check5408:                        ; preds = %middle.block5379
  br i1 %min.epilog.iters.check5411, label %"for input_wrapper.s0.c.us.preheader", label %vec.epilog.ph5409

vec.epilog.ph5409:                                ; preds = %vector.main.loop.iter.check5386, %vec.epilog.iter.check5408
  %vec.epilog.resume.val5412 = phi i64 [ %n.vec5389, %vec.epilog.iter.check5408 ], [ 0, %vector.main.loop.iter.check5386 ]
  br label %vec.epilog.vector.body5407

vec.epilog.vector.body5407:                       ; preds = %vec.epilog.vector.body5407, %vec.epilog.ph5409
  %index5415 = phi i64 [ %vec.epilog.resume.val5412, %vec.epilog.ph5409 ], [ %index.next5416, %vec.epilog.vector.body5407 ]
  %1111 = add nsw i64 %index5415, %1031
  %1112 = getelementptr inbounds i8, i8* %12, i64 %1111
  %1113 = bitcast i8* %1112 to <8 x i8>*
  %wide.load5419 = load <8 x i8>, <8 x i8>* %1113, align 1, !tbaa !397
  %1114 = zext <8 x i8> %wide.load5419 to <8 x i16>
  %1115 = sub nsw <8 x i16> %1114, %broadcast.splat5421
  %1116 = add nsw i64 %index5415, %1032
  %1117 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1116
  %1118 = bitcast i16* %1117 to <8 x i16>*
  store <8 x i16> %1115, <8 x i16>* %1118, align 2, !tbaa !399
  %index.next5416 = add i64 %index5415, 8
  %1119 = icmp eq i64 %index.next5416, %n.vec5414
  br i1 %1119, label %vec.epilog.middle.block5405, label %vec.epilog.vector.body5407, !llvm.loop !410

vec.epilog.middle.block5405:                      ; preds = %vec.epilog.vector.body5407
  br i1 %cmp.n5418, label %"end for input_wrapper.s0.c.loopexit.us", label %"for input_wrapper.s0.c.us.preheader"

"for input_wrapper.s0.c.us.preheader":            ; preds = %iter.check5384, %vec.epilog.iter.check5408, %vec.epilog.middle.block5405
  %indvars.iv4295.ph = phi i64 [ 0, %iter.check5384 ], [ %n.vec5389, %vec.epilog.iter.check5408 ], [ %n.vec5414, %vec.epilog.middle.block5405 ]
  br label %"for input_wrapper.s0.c.us"

"for input_wrapper.s0.c.us":                      ; preds = %"for input_wrapper.s0.c.us.preheader", %"for input_wrapper.s0.c.us"
  %indvars.iv4295 = phi i64 [ %indvars.iv.next4296, %"for input_wrapper.s0.c.us" ], [ %indvars.iv4295.ph, %"for input_wrapper.s0.c.us.preheader" ]
  %1120 = add nsw i64 %indvars.iv4295, %1031
  %1121 = getelementptr inbounds i8, i8* %12, i64 %1120
  %1122 = load i8, i8* %1121, align 1, !tbaa !397
  %1123 = zext i8 %1122 to i16
  %1124 = sub nsw i16 %1123, %303
  %1125 = add nsw i64 %indvars.iv4295, %1032
  %1126 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1125
  store i16 %1124, i16* %1126, align 2, !tbaa !399
  %indvars.iv.next4296 = add nuw nsw i64 %indvars.iv4295, 1
  %.not2202.us = icmp eq i64 %indvars.iv.next4296, %365
  br i1 %.not2202.us, label %"end for input_wrapper.s0.c.loopexit.us", label %"for input_wrapper.s0.c.us", !llvm.loop !411

"end for input_wrapper.s0.c.loopexit.us":         ; preds = %"for input_wrapper.s0.c.us", %vec.epilog.middle.block5405, %middle.block5379
  %indvars.iv.next4298 = add nuw nsw i64 %indvars.iv4297, 1
  %.not2201.us = icmp eq i64 %indvars.iv4297, %357
  br i1 %.not2201.us, label %"end for input_wrapper.s0.x.rebased52", label %iter.check5384

"end for input_wrapper.s0.x.rebased52":           ; preds = %"end for input_wrapper.s0.c.loopexit.us", %"for input_wrapper.s0.y.rebased48"
  %indvars.iv.next4301 = add nuw nsw i64 %indvars.iv4300, 1
  %.not2200 = icmp eq i64 %indvars.iv4300, %390
  br i1 %.not2200, label %"consume input_wrapper", label %"for input_wrapper.s0.y.rebased48"

"consume input_wrapper":                          ; preds = %"end for input_wrapper.s0.x.rebased.loopexit.us", %"end for input_wrapper.s0.x.rebased26", %"end for input_wrapper.s0.x.rebased43", %"end for input_wrapper.s0.x.rebased52", %"end for input_wrapper.s0.x.x.rebased", %then_bb9, %next_bb38, %then_bb37, %then_bb20, %then_bb4
  %1127 = trunc i64 %417 to i32
  %1128 = mul i32 %29, %1127
  %t3732 = add i32 %1128, %416
  %t3804 = sub i32 %t3732, %reass.add2740
  br i1 %48, label %"for output.s0.x.xo", label %"end for output.s0.x.xo", !prof !387

"for output.s0.x.xo":                             ; preds = %"consume input_wrapper", %"end for output.s0.c.co"
  %convolved1914.sroa.0.4 = phi <8 x i32> [ %convolved1914.sroa.0.6, %"end for output.s0.c.co" ], [ %convolved1914.sroa.0.2, %"consume input_wrapper" ]
  %output.s0.x.xo = phi i32 [ %1263, %"end for output.s0.c.co" ], [ 0, %"consume input_wrapper" ]
  %a30 = shl nuw nsw i32 %output.s0.x.xo, 1
  %1129 = icmp sgt i32 %b32, %a30
  %output.s0.x.x.base.s = select i1 %1129, i32 %a30, i32 %b32
  %t3810 = add nsw i32 %output.s0.x.x.base.s, %24
  %t3811 = add nsw i32 %t3810, 1
  br i1 %315, label %"for output.s0.c.co.preheader", label %"end for output.s0.c.co", !prof !387

"for output.s0.c.co.preheader":                   ; preds = %"for output.s0.x.xo"
  %1130 = mul nsw i32 %t3810, %stride_x
  %t3806 = sub i32 %1130, %b20
  %1131 = mul nsw i32 %t3811, %stride_x
  %t3807 = sub i32 %1131, %b20
  %1132 = mul nsw i32 %t3810, %26
  %t3808 = add nsw i32 %1132, %t3804
  %1133 = mul nsw i32 %t3811, %26
  %t3809 = add nsw i32 %1133, %t3804
  %1134 = sext i32 %t3808 to i64
  %1135 = sext i32 %t3809 to i64
  %1136 = sext i32 %t3807 to i64
  %1137 = sext i32 %t3806 to i64
  br label %"for output.s0.c.co"

"end for output.s0.x.xo":                         ; preds = %"end for output.s0.c.co", %"consume input_wrapper"
  %convolved1914.sroa.0.5 = phi <8 x i32> [ %convolved1914.sroa.0.2, %"consume input_wrapper" ], [ %convolved1914.sroa.0.6, %"end for output.s0.c.co" ]
  %tobool.not.i.not = icmp eq i8* %420, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2415

if.then.i2415:                                    ; preds = %"end for output.s0.x.xo"
  call void @halide_free(i8* null, i8* nonnull %420) #17
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for output.s0.x.xo", %if.then.i2415
  %indvars.iv.next4335 = add nuw nsw i64 %indvars.iv4334, 1
  %1138 = icmp eq i64 %indvars.iv.next4335, %zext4338
  br i1 %1138, label %"end for output.s0.y.rebased", label %"for output.s0.y.rebased"

"for output.s0.c.co":                             ; preds = %"for output.s0.c.co.preheader", %"consume convolved"
  %indvars.iv4331 = phi i64 [ 0, %"for output.s0.c.co.preheader" ], [ %indvars.iv.next4332, %"consume convolved" ]
  %1139 = shl nuw nsw i64 %indvars.iv4331, 5
  %1140 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %1139
  %1141 = bitcast i32* %1140 to <8 x i32>*
  %1142 = load <8 x i32>, <8 x i32>* %1141, align 32, !tbaa !391
  %1143 = getelementptr inbounds i32, i32* %1140, i64 8
  %1144 = bitcast i32* %1143 to <8 x i32>*
  %1145 = load <8 x i32>, <8 x i32>* %1144, align 32, !tbaa !391
  %1146 = getelementptr inbounds i32, i32* %1140, i64 16
  %1147 = bitcast i32* %1146 to <8 x i32>*
  %1148 = load <8 x i32>, <8 x i32>* %1147, align 32, !tbaa !391
  %1149 = getelementptr inbounds i32, i32* %1140, i64 24
  %1150 = bitcast i32* %1149 to <8 x i32>*
  %1151 = load <8 x i32>, <8 x i32>* %1150, align 32, !tbaa !391
  %1152 = trunc i64 %indvars.iv4331 to i32
  %t3816 = shl nsw i32 %1152, 2
  %1153 = or i32 %t3816, 3
  %t3815 = mul nsw i32 %1153, %7
  %1154 = or i32 %t3816, 2
  %t3814 = mul nsw i32 %1154, %7
  %1155 = or i32 %t3816, 1
  %t3813 = mul nsw i32 %1155, %7
  br i1 %316, label %"for convolved.s1.r19$y.preheader", label %"consume convolved", !prof !387

"for convolved.s1.r19$y.preheader":               ; preds = %"for output.s0.c.co"
  %1156 = mul nsw i64 %indvars.iv4331, %376
  br i1 %317, label %"for convolved.s1.r19$y.preheader.split.us", label %"consume convolved", !prof !387

"for convolved.s1.r19$y.preheader.split.us":      ; preds = %"for convolved.s1.r19$y.preheader"
  br i1 %256, label %"for convolved.s1.r19$y.us.us", label %"consume convolved", !prof !387

"for convolved.s1.r19$y.us.us":                   ; preds = %"for convolved.s1.r19$y.preheader.split.us", %"end for convolved.s1.r19$x.loopexit.split.us.us.us"
  %indvars.iv4328 = phi i64 [ %indvars.iv.next4329, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.272.0.us.us = phi <8 x i32> [ %1262, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1151, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.242.0.us.us = phi <8 x i32> [ %1258, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1148, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.212.0.us.us = phi <8 x i32> [ %1254, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1145, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.182.0.us.us = phi <8 x i32> [ %1250, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1142, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.142.0.us.us = phi <8 x i32> [ %1235, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1151, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.102.0.us.us = phi <8 x i32> [ %1224, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1148, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.62.0.us.us = phi <8 x i32> [ %1213, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1145, %"for convolved.s1.r19$y.preheader.split.us" ]
  %convolved1914.sroa.0.7.us.us = phi <8 x i32> [ %1201, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ], [ %1142, %"for convolved.s1.r19$y.preheader.split.us" ]
  %1157 = mul nsw i64 %indvars.iv4328, %374
  %1158 = trunc i64 %indvars.iv4328 to i32
  %1159 = mul i32 %1158, %dilation_y
  %1160 = sub i32 %1159, %t3677
  %t3817.us.us = mul nsw i32 %t3739, %1160
  %1161 = sext i32 %t3817.us.us to i64
  %1162 = trunc i64 %1157 to i32
  br label %"for convolved.s1.r19$x.us.us.us"

"for convolved.s1.r19$x.us.us.us":                ; preds = %"end for convolved.s1.r19$z.r115.loopexit.us.us.us", %"for convolved.s1.r19$y.us.us"
  %indvars.iv4321 = phi i64 [ %indvars.iv.next4322, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.272.1.us.us.us = phi <8 x i32> [ %1262, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.272.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.242.1.us.us.us = phi <8 x i32> [ %1258, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.242.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.212.1.us.us.us = phi <8 x i32> [ %1254, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.212.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.182.1.us.us.us = phi <8 x i32> [ %1250, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.182.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.142.1.us.us.us = phi <8 x i32> [ %1235, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.142.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.102.1.us.us.us = phi <8 x i32> [ %1224, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.102.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.62.1.us.us.us = phi <8 x i32> [ %1213, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.62.0.us.us, %"for convolved.s1.r19$y.us.us" ]
  %convolved1914.sroa.0.8.us.us.us = phi <8 x i32> [ %1201, %"end for convolved.s1.r19$z.r115.loopexit.us.us.us" ], [ %convolved1914.sroa.0.7.us.us, %"for convolved.s1.r19$y.us.us" ]
  %1163 = mul nsw i64 %indvars.iv4321, %371
  %1164 = mul nsw i64 %indvars.iv4321, %372
  %1165 = add nsw i64 %1164, %1136
  %1166 = mul nsw i64 %1165, %368
  %1167 = add nsw i64 %1166, %1161
  %1168 = add nsw i64 %1164, %1137
  %1169 = mul nsw i64 %1168, %368
  %1170 = add nsw i64 %1169, %1161
  %1171 = add nsw i64 %1163, %1157
  %1172 = trunc i64 %1163 to i32
  %t3821.us.us.us = add i32 %1172, %1162
  %t3827.us.us.us = add i32 %t3821.us.us.us, %t3815
  %t3826.us.us.us = add i32 %t3821.us.us.us, %t3814
  %t3825.us.us.us = add i32 %t3821.us.us.us, %t3813
  %1173 = sext i32 %t3825.us.us.us to i64
  %1174 = sext i32 %t3826.us.us.us to i64
  %1175 = sext i32 %t3827.us.us.us to i64
  br label %"for convolved.s1.r19$z.r115.us.us.us"

"for convolved.s1.r19$z.r115.us.us.us":           ; preds = %"for convolved.s1.r19$z.r115.us.us.us", %"for convolved.s1.r19$x.us.us.us"
  %indvars.iv4319 = phi i64 [ %indvars.iv.next4320, %"for convolved.s1.r19$z.r115.us.us.us" ], [ 0, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.272.3.us.us.us = phi <8 x i32> [ %1262, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.272.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.242.3.us.us.us = phi <8 x i32> [ %1258, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.242.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.212.3.us.us.us = phi <8 x i32> [ %1254, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.212.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.182.3.us.us.us = phi <8 x i32> [ %1250, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.182.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.142.3.us.us.us = phi <8 x i32> [ %1235, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.142.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.102.3.us.us.us = phi <8 x i32> [ %1224, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.102.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.62.3.us.us.us = phi <8 x i32> [ %1213, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.62.1.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %convolved1914.sroa.0.10.us.us.us = phi <8 x i32> [ %1201, %"for convolved.s1.r19$z.r115.us.us.us" ], [ %convolved1914.sroa.0.8.us.us.us, %"for convolved.s1.r19$x.us.us.us" ]
  %1176 = shl nuw nsw i64 %indvars.iv4319, 2
  %1177 = add nsw i64 %1176, %1170
  %1178 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1177
  %1179 = bitcast i16* %1178 to <1 x i32>*
  %1180 = load <1 x i32>, <1 x i32>* %1179, align 8, !tbaa !399
  %1181 = shufflevector <1 x i32> %1180, <1 x i32> undef, <8 x i32> zeroinitializer
  %1182 = bitcast <8 x i32> %1181 to <16 x i16>
  %1183 = shl nuw nsw i64 %indvars.iv4319, 3
  %1184 = add nsw i64 %1183, %1156
  %1185 = shl nsw i64 %1184, 2
  %1186 = add nsw i64 %1185, %1171
  %1187 = getelementptr inbounds i16, i16* %318, i64 %1186
  %1188 = bitcast i16* %1187 to <16 x i16>*
  %1189 = load <16 x i16>, <16 x i16>* %1188, align 32, !tbaa !412
  %1190 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1182, <16 x i16> %1189)
  %1191 = add <8 x i32> %1190, %convolved1914.sroa.0.10.us.us.us
  %1192 = getelementptr inbounds i16, i16* %1178, i64 2
  %1193 = bitcast i16* %1192 to <1 x i32>*
  %1194 = load <1 x i32>, <1 x i32>* %1193, align 4, !tbaa !399
  %1195 = shufflevector <1 x i32> %1194, <1 x i32> undef, <8 x i32> zeroinitializer
  %1196 = bitcast <8 x i32> %1195 to <16 x i16>
  %1197 = getelementptr inbounds i16, i16* %1187, i64 16
  %1198 = bitcast i16* %1197 to <16 x i16>*
  %1199 = load <16 x i16>, <16 x i16>* %1198, align 32, !tbaa !412
  %1200 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1196, <16 x i16> %1199)
  %1201 = add <8 x i32> %1191, %1200
  %1202 = shl nuw nsw i64 %indvars.iv4319, 5
  %1203 = add nsw i64 %1202, %1173
  %1204 = getelementptr inbounds i16, i16* %318, i64 %1203
  %1205 = bitcast i16* %1204 to <16 x i16>*
  %1206 = load <16 x i16>, <16 x i16>* %1205, align 32, !tbaa !412
  %1207 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1182, <16 x i16> %1206)
  %1208 = add <8 x i32> %1207, %convolved1914.sroa.62.3.us.us.us
  %1209 = getelementptr inbounds i16, i16* %1204, i64 16
  %1210 = bitcast i16* %1209 to <16 x i16>*
  %1211 = load <16 x i16>, <16 x i16>* %1210, align 32, !tbaa !412
  %1212 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1196, <16 x i16> %1211)
  %1213 = add <8 x i32> %1208, %1212
  %1214 = add nsw i64 %1202, %1174
  %1215 = getelementptr inbounds i16, i16* %318, i64 %1214
  %1216 = bitcast i16* %1215 to <16 x i16>*
  %1217 = load <16 x i16>, <16 x i16>* %1216, align 32, !tbaa !412
  %1218 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1182, <16 x i16> %1217)
  %1219 = add <8 x i32> %1218, %convolved1914.sroa.102.3.us.us.us
  %1220 = getelementptr inbounds i16, i16* %1215, i64 16
  %1221 = bitcast i16* %1220 to <16 x i16>*
  %1222 = load <16 x i16>, <16 x i16>* %1221, align 32, !tbaa !412
  %1223 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1196, <16 x i16> %1222)
  %1224 = add <8 x i32> %1219, %1223
  %1225 = add nsw i64 %1202, %1175
  %1226 = getelementptr inbounds i16, i16* %318, i64 %1225
  %1227 = bitcast i16* %1226 to <16 x i16>*
  %1228 = load <16 x i16>, <16 x i16>* %1227, align 32, !tbaa !412
  %1229 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1182, <16 x i16> %1228)
  %1230 = add <8 x i32> %1229, %convolved1914.sroa.142.3.us.us.us
  %1231 = getelementptr inbounds i16, i16* %1226, i64 16
  %1232 = bitcast i16* %1231 to <16 x i16>*
  %1233 = load <16 x i16>, <16 x i16>* %1232, align 32, !tbaa !412
  %1234 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1196, <16 x i16> %1233)
  %1235 = add <8 x i32> %1230, %1234
  %1236 = add nsw i64 %1176, %1167
  %1237 = getelementptr inbounds i16, i16* %input_wrapper, i64 %1236
  %1238 = bitcast i16* %1237 to <1 x i32>*
  %1239 = load <1 x i32>, <1 x i32>* %1238, align 8, !tbaa !399
  %1240 = shufflevector <1 x i32> %1239, <1 x i32> undef, <8 x i32> zeroinitializer
  %1241 = bitcast <8 x i32> %1240 to <16 x i16>
  %1242 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1241, <16 x i16> %1189)
  %1243 = add <8 x i32> %1242, %convolved1914.sroa.182.3.us.us.us
  %1244 = getelementptr inbounds i16, i16* %1237, i64 2
  %1245 = bitcast i16* %1244 to <1 x i32>*
  %1246 = load <1 x i32>, <1 x i32>* %1245, align 4, !tbaa !399
  %1247 = shufflevector <1 x i32> %1246, <1 x i32> undef, <8 x i32> zeroinitializer
  %1248 = bitcast <8 x i32> %1247 to <16 x i16>
  %1249 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1248, <16 x i16> %1199)
  %1250 = add <8 x i32> %1243, %1249
  %1251 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1241, <16 x i16> %1206)
  %1252 = add <8 x i32> %1251, %convolved1914.sroa.212.3.us.us.us
  %1253 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1248, <16 x i16> %1211)
  %1254 = add <8 x i32> %1252, %1253
  %1255 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1241, <16 x i16> %1217)
  %1256 = add <8 x i32> %1255, %convolved1914.sroa.242.3.us.us.us
  %1257 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1248, <16 x i16> %1222)
  %1258 = add <8 x i32> %1256, %1257
  %1259 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1241, <16 x i16> %1228)
  %1260 = add <8 x i32> %1259, %convolved1914.sroa.272.3.us.us.us
  %1261 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %1248, <16 x i16> %1233)
  %1262 = add <8 x i32> %1260, %1261
  %indvars.iv.next4320 = add nuw nsw i64 %indvars.iv4319, 1
  %.not2199.us.us.us = icmp eq i64 %indvars.iv.next4320, %366
  br i1 %.not2199.us.us.us, label %"end for convolved.s1.r19$z.r115.loopexit.us.us.us", label %"for convolved.s1.r19$z.r115.us.us.us"

"end for convolved.s1.r19$z.r115.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r115.us.us.us"
  %indvars.iv.next4322 = add nuw nsw i64 %indvars.iv4321, 1
  %.not2198.us.us.us = icmp eq i64 %indvars.iv.next4322, %373
  br i1 %.not2198.us.us.us, label %"end for convolved.s1.r19$x.loopexit.split.us.us.us", label %"for convolved.s1.r19$x.us.us.us"

"end for convolved.s1.r19$x.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115.loopexit.us.us.us"
  %indvars.iv.next4329 = add nuw nsw i64 %indvars.iv4328, 1
  %.not2197.us.us = icmp eq i64 %indvars.iv.next4329, %375
  br i1 %.not2197.us.us, label %"consume convolved", label %"for convolved.s1.r19$y.us.us"

"end for output.s0.c.co":                         ; preds = %"consume convolved", %"for output.s0.x.xo"
  %convolved1914.sroa.0.6 = phi <8 x i32> [ %convolved1914.sroa.0.4, %"for output.s0.x.xo" ], [ %convolved1914.sroa.0.12, %"consume convolved" ]
  %1263 = add nuw nsw i32 %output.s0.x.xo, 1
  %.not2195 = icmp eq i32 %1263, %t3699
  br i1 %.not2195, label %"end for output.s0.x.xo", label %"for output.s0.x.xo"

"consume convolved":                              ; preds = %"end for convolved.s1.r19$x.loopexit.split.us.us.us", %"for convolved.s1.r19$y.preheader.split.us", %"for convolved.s1.r19$y.preheader", %"for output.s0.c.co"
  %convolved1914.sroa.272.5 = phi <8 x i32> [ %1151, %"for output.s0.c.co" ], [ %1151, %"for convolved.s1.r19$y.preheader" ], [ %1151, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1262, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.242.5 = phi <8 x i32> [ %1148, %"for output.s0.c.co" ], [ %1148, %"for convolved.s1.r19$y.preheader" ], [ %1148, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1258, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.212.5 = phi <8 x i32> [ %1145, %"for output.s0.c.co" ], [ %1145, %"for convolved.s1.r19$y.preheader" ], [ %1145, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1254, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.182.5 = phi <8 x i32> [ %1142, %"for output.s0.c.co" ], [ %1142, %"for convolved.s1.r19$y.preheader" ], [ %1142, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1250, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.142.5 = phi <8 x i32> [ %1151, %"for output.s0.c.co" ], [ %1151, %"for convolved.s1.r19$y.preheader" ], [ %1151, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1235, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.5 = phi <8 x i32> [ %1148, %"for output.s0.c.co" ], [ %1148, %"for convolved.s1.r19$y.preheader" ], [ %1148, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1224, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.5 = phi <8 x i32> [ %1145, %"for output.s0.c.co" ], [ %1145, %"for convolved.s1.r19$y.preheader" ], [ %1145, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1213, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.12 = phi <8 x i32> [ %1142, %"for output.s0.c.co" ], [ %1142, %"for convolved.s1.r19$y.preheader" ], [ %1142, %"for convolved.s1.r19$y.preheader.split.us" ], [ %1201, %"end for convolved.s1.r19$x.loopexit.split.us.us.us" ]
  %1264 = shufflevector <8 x i32> %convolved1914.sroa.0.12, <8 x i32> %convolved1914.sroa.62.5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1265 = shufflevector <8 x i32> %convolved1914.sroa.102.5, <8 x i32> %convolved1914.sroa.142.5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1266 = shufflevector <16 x i32> %1264, <16 x i32> %1265, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1267 = sext <32 x i32> %1266 to <32 x i64>
  %1268 = mul nsw <32 x i64> %1267, %321
  %1269 = ashr <32 x i64> %1268, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1270 = add nsw <32 x i64> %1269, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a34 = ashr <32 x i64> %1270, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1271 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1272 = icmp slt <4 x i64> %1271, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1273 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1274 = icmp slt <4 x i64> %1273, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1275 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1276 = icmp slt <4 x i64> %1275, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1277 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1278 = icmp slt <4 x i64> %1277, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1279 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1280 = icmp slt <4 x i64> %1279, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1281 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1282 = icmp slt <4 x i64> %1281, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1283 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1284 = icmp slt <4 x i64> %1283, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1285 = shufflevector <32 x i64> %a34, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1286 = icmp slt <4 x i64> %1285, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1287 = shufflevector <4 x i1> %1286, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1288 = shufflevector <8 x i1> %1287, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1289 = shufflevector <16 x i1> %1288, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1290 = select <4 x i1> %1272, <4 x i64> %1271, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1291 = select <4 x i1> %1274, <4 x i64> %1273, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1292 = select <4 x i1> %1276, <4 x i64> %1275, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1293 = select <4 x i1> %1278, <4 x i64> %1277, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1294 = select <4 x i1> %1280, <4 x i64> %1279, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1295 = select <4 x i1> %1282, <4 x i64> %1281, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1296 = select <4 x i1> %1284, <4 x i64> %1283, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1297 = shufflevector <32 x i1> %1289, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1298 = select <4 x i1> %1297, <4 x i64> %1285, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1299 = shufflevector <4 x i64> %1298, <4 x i64> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1300 = shufflevector <8 x i64> %1299, <8 x i64> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %a33 = shufflevector <16 x i64> %1300, <16 x i64> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1301 = icmp sgt <4 x i64> %1290, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1302 = icmp sgt <4 x i64> %1291, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1303 = icmp sgt <4 x i64> %1292, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1304 = icmp sgt <4 x i64> %1293, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1305 = icmp sgt <4 x i64> %1294, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1306 = icmp sgt <4 x i64> %1295, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1307 = icmp sgt <4 x i64> %1296, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1308 = shufflevector <32 x i64> %a33, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1309 = icmp sgt <4 x i64> %1308, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1310 = shufflevector <4 x i1> %1309, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1311 = shufflevector <8 x i1> %1310, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1312 = shufflevector <16 x i1> %1311, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1313 = select <4 x i1> %1301, <4 x i64> %1290, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1314 = select <4 x i1> %1302, <4 x i64> %1291, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1315 = select <4 x i1> %1303, <4 x i64> %1292, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1316 = select <4 x i1> %1304, <4 x i64> %1293, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1317 = select <4 x i1> %1305, <4 x i64> %1294, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1318 = select <4 x i1> %1306, <4 x i64> %1295, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1319 = select <4 x i1> %1307, <4 x i64> %1296, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1320 = shufflevector <32 x i1> %1312, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1321 = select <4 x i1> %1320, <4 x i64> %1308, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1322 = shufflevector <4 x i64> %1313, <4 x i64> %1314, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1323 = shufflevector <4 x i64> %1315, <4 x i64> %1316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1324 = shufflevector <4 x i64> %1317, <4 x i64> %1318, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1325 = shufflevector <4 x i64> %1319, <4 x i64> %1321, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1326 = shufflevector <8 x i64> %1322, <8 x i64> %1323, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1327 = shufflevector <8 x i64> %1324, <8 x i64> %1325, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1328 = shufflevector <16 x i64> %1326, <16 x i64> %1327, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t4474 = trunc <32 x i64> %1328 to <32 x i32>
  %1329 = ashr <32 x i32> %t4474, %t4475
  %1330 = shl <32 x i32> %t4474, %t4475
  %1331 = shufflevector <32 x i32> %1329, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1332 = shufflevector <32 x i32> %1330, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1333 = select <8 x i1> %330, <8 x i32> %1331, <8 x i32> %1332
  %1334 = shufflevector <32 x i32> %1329, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1335 = shufflevector <32 x i32> %1330, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1336 = select <8 x i1> %331, <8 x i32> %1334, <8 x i32> %1335
  %1337 = shufflevector <32 x i32> %1329, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1338 = shufflevector <32 x i32> %1330, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1339 = select <8 x i1> %332, <8 x i32> %1337, <8 x i32> %1338
  %1340 = shufflevector <32 x i32> %1329, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1341 = shufflevector <32 x i32> %1330, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1342 = select <8 x i1> %333, <8 x i32> %1340, <8 x i32> %1341
  %1343 = shufflevector <8 x i32> %1333, <8 x i32> %1336, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1344 = shufflevector <8 x i32> %1339, <8 x i32> %1342, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1345 = shufflevector <16 x i32> %1343, <16 x i32> %1344, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1346 = ashr <32 x i32> %t4474, %t4477
  %1347 = shl <32 x i32> %t4474, %t4477
  %1348 = shufflevector <32 x i32> %1346, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1349 = shufflevector <32 x i32> %1347, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1350 = select <8 x i1> %345, <8 x i32> %1348, <8 x i32> %1349
  %1351 = shufflevector <32 x i32> %1346, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1352 = shufflevector <32 x i32> %1347, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1353 = select <8 x i1> %346, <8 x i32> %1351, <8 x i32> %1352
  %1354 = shufflevector <32 x i32> %1346, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1355 = shufflevector <32 x i32> %1347, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1356 = select <8 x i1> %347, <8 x i32> %1354, <8 x i32> %1355
  %1357 = shufflevector <32 x i32> %1346, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1358 = shufflevector <32 x i32> %1347, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1359 = select <8 x i1> %348, <8 x i32> %1357, <8 x i32> %1358
  %1360 = shufflevector <8 x i32> %1350, <8 x i32> %1353, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1361 = shufflevector <8 x i32> %1356, <8 x i32> %1359, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1362 = shufflevector <16 x i32> %1360, <16 x i32> %1361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1363 = and <32 x i32> %1362, %335
  %1364 = add nsw <32 x i32> %1363, %1345
  %1365 = shufflevector <32 x i32> %1364, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1366 = shufflevector <32 x i32> %1364, <32 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1367 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1365, <8 x i32> %1366) #11
  %1368 = shufflevector <32 x i32> %1364, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1369 = shufflevector <16 x i32> %1368, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1370 = shufflevector <16 x i32> %1368, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1371 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1369, <8 x i32> %1370) #11
  %1372 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1367, <16 x i16> %351)
  %1373 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1371, <16 x i16> %351)
  %1374 = shufflevector <16 x i16> %1372, <16 x i16> %1373, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1375 = shufflevector <16 x i16> %1372, <16 x i16> %1373, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1376 = call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1374, <16 x i16> %1375) #11
  %1377 = icmp ugt <32 x i8> %b34, %1376
  %a31 = select <32 x i1> %1377, <32 x i8> %1376, <32 x i8> %b34
  %1378 = icmp ugt <32 x i8> %a31, %b33
  %1379 = select <32 x i1> %1378, <32 x i8> %a31, <32 x i8> %b33
  %1380 = add nsw i64 %1139, %1134
  %1381 = getelementptr inbounds i8, i8* %22, i64 %1380
  %1382 = bitcast i8* %1381 to <32 x i8>*
  store <32 x i8> %1379, <32 x i8>* %1382, align 1, !tbaa !414
  %1383 = shufflevector <8 x i32> %convolved1914.sroa.182.5, <8 x i32> %convolved1914.sroa.212.5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1384 = shufflevector <8 x i32> %convolved1914.sroa.242.5, <8 x i32> %convolved1914.sroa.272.5, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1385 = shufflevector <16 x i32> %1383, <16 x i32> %1384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1386 = sext <32 x i32> %1385 to <32 x i64>
  %1387 = mul nsw <32 x i64> %1386, %321
  %1388 = ashr <32 x i64> %1387, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %1389 = add nsw <32 x i64> %1388, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a40 = ashr <32 x i64> %1389, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %1390 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %1391 = icmp slt <4 x i64> %1390, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1392 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %1393 = icmp slt <4 x i64> %1392, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1394 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %1395 = icmp slt <4 x i64> %1394, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1396 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %1397 = icmp slt <4 x i64> %1396, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1398 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %1399 = icmp slt <4 x i64> %1398, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1400 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %1401 = icmp slt <4 x i64> %1400, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1402 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %1403 = icmp slt <4 x i64> %1402, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1404 = shufflevector <32 x i64> %a40, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1405 = icmp slt <4 x i64> %1404, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1406 = shufflevector <4 x i1> %1405, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1407 = shufflevector <8 x i1> %1406, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1408 = shufflevector <16 x i1> %1407, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1409 = select <4 x i1> %1391, <4 x i64> %1390, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1410 = select <4 x i1> %1393, <4 x i64> %1392, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1411 = select <4 x i1> %1395, <4 x i64> %1394, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1412 = select <4 x i1> %1397, <4 x i64> %1396, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1413 = select <4 x i1> %1399, <4 x i64> %1398, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1414 = select <4 x i1> %1401, <4 x i64> %1400, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1415 = select <4 x i1> %1403, <4 x i64> %1402, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1416 = shufflevector <32 x i1> %1408, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1417 = select <4 x i1> %1416, <4 x i64> %1404, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %1418 = shufflevector <4 x i64> %1417, <4 x i64> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1419 = shufflevector <8 x i64> %1418, <8 x i64> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %a39 = shufflevector <16 x i64> %1419, <16 x i64> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1420 = icmp sgt <4 x i64> %1409, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1421 = icmp sgt <4 x i64> %1410, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1422 = icmp sgt <4 x i64> %1411, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1423 = icmp sgt <4 x i64> %1412, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1424 = icmp sgt <4 x i64> %1413, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1425 = icmp sgt <4 x i64> %1414, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1426 = icmp sgt <4 x i64> %1415, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1427 = shufflevector <32 x i64> %a39, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1428 = icmp sgt <4 x i64> %1427, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1429 = shufflevector <4 x i1> %1428, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %1430 = shufflevector <8 x i1> %1429, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %1431 = shufflevector <16 x i1> %1430, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %1432 = select <4 x i1> %1420, <4 x i64> %1409, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1433 = select <4 x i1> %1421, <4 x i64> %1410, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1434 = select <4 x i1> %1422, <4 x i64> %1411, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1435 = select <4 x i1> %1423, <4 x i64> %1412, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1436 = select <4 x i1> %1424, <4 x i64> %1413, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1437 = select <4 x i1> %1425, <4 x i64> %1414, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1438 = select <4 x i1> %1426, <4 x i64> %1415, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1439 = shufflevector <32 x i1> %1431, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %1440 = select <4 x i1> %1439, <4 x i64> %1427, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %1441 = shufflevector <4 x i64> %1432, <4 x i64> %1433, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1442 = shufflevector <4 x i64> %1434, <4 x i64> %1435, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1443 = shufflevector <4 x i64> %1436, <4 x i64> %1437, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1444 = shufflevector <4 x i64> %1438, <4 x i64> %1440, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1445 = shufflevector <8 x i64> %1441, <8 x i64> %1442, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1446 = shufflevector <8 x i64> %1443, <8 x i64> %1444, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1447 = shufflevector <16 x i64> %1445, <16 x i64> %1446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t4478 = trunc <32 x i64> %1447 to <32 x i32>
  %1448 = ashr <32 x i32> %t4478, %t4475
  %1449 = shl <32 x i32> %t4478, %t4475
  %1450 = shufflevector <32 x i32> %1448, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1451 = shufflevector <32 x i32> %1449, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1452 = select <8 x i1> %330, <8 x i32> %1450, <8 x i32> %1451
  %1453 = shufflevector <32 x i32> %1448, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1454 = shufflevector <32 x i32> %1449, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1455 = select <8 x i1> %331, <8 x i32> %1453, <8 x i32> %1454
  %1456 = shufflevector <32 x i32> %1448, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1457 = shufflevector <32 x i32> %1449, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1458 = select <8 x i1> %332, <8 x i32> %1456, <8 x i32> %1457
  %1459 = shufflevector <32 x i32> %1448, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1460 = shufflevector <32 x i32> %1449, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1461 = select <8 x i1> %333, <8 x i32> %1459, <8 x i32> %1460
  %1462 = shufflevector <8 x i32> %1452, <8 x i32> %1455, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1463 = shufflevector <8 x i32> %1458, <8 x i32> %1461, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1464 = shufflevector <16 x i32> %1462, <16 x i32> %1463, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1465 = ashr <32 x i32> %t4478, %t4477
  %1466 = shl <32 x i32> %t4478, %t4477
  %1467 = shufflevector <32 x i32> %1465, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1468 = shufflevector <32 x i32> %1466, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1469 = select <8 x i1> %345, <8 x i32> %1467, <8 x i32> %1468
  %1470 = shufflevector <32 x i32> %1465, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1471 = shufflevector <32 x i32> %1466, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1472 = select <8 x i1> %346, <8 x i32> %1470, <8 x i32> %1471
  %1473 = shufflevector <32 x i32> %1465, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1474 = shufflevector <32 x i32> %1466, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1475 = select <8 x i1> %347, <8 x i32> %1473, <8 x i32> %1474
  %1476 = shufflevector <32 x i32> %1465, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1477 = shufflevector <32 x i32> %1466, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1478 = select <8 x i1> %348, <8 x i32> %1476, <8 x i32> %1477
  %1479 = shufflevector <8 x i32> %1469, <8 x i32> %1472, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1480 = shufflevector <8 x i32> %1475, <8 x i32> %1478, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1481 = shufflevector <16 x i32> %1479, <16 x i32> %1480, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1482 = and <32 x i32> %1481, %335
  %1483 = add nsw <32 x i32> %1482, %1464
  %1484 = shufflevector <32 x i32> %1483, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1485 = shufflevector <32 x i32> %1483, <32 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1486 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1484, <8 x i32> %1485) #11
  %1487 = shufflevector <32 x i32> %1483, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1488 = shufflevector <16 x i32> %1487, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %1489 = shufflevector <16 x i32> %1487, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %1490 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %1488, <8 x i32> %1489) #11
  %1491 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1486, <16 x i16> %351)
  %1492 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %1490, <16 x i16> %351)
  %1493 = shufflevector <16 x i16> %1491, <16 x i16> %1492, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1494 = shufflevector <16 x i16> %1491, <16 x i16> %1492, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1495 = call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %1493, <16 x i16> %1494) #11
  %1496 = icmp ugt <32 x i8> %b34, %1495
  %a37 = select <32 x i1> %1496, <32 x i8> %1495, <32 x i8> %b34
  %1497 = icmp ugt <32 x i8> %a37, %b33
  %1498 = select <32 x i1> %1497, <32 x i8> %a37, <32 x i8> %b33
  %1499 = add nsw i64 %1139, %1135
  %1500 = getelementptr inbounds i8, i8* %22, i64 %1499
  %1501 = bitcast i8* %1500 to <32 x i8>*
  store <32 x i8> %1498, <32 x i8>* %1501, align 1, !tbaa !414
  %indvars.iv.next4332 = add nuw nsw i64 %indvars.iv4331, 1
  %.not2196 = icmp eq i64 %indvars.iv.next4332, %377
  br i1 %.not2196, label %"end for output.s0.c.co", label %"for output.s0.c.co"

then_bb54:                                        ; preds = %next_bb
  %t3863 = add nsw i32 %6, 1
  %a43 = ashr i32 %t3863, 2
  %1502 = icmp sgt i32 %6, 2
  %t3864 = select i1 %1502, i32 %a43, i32 0
  %a44 = ashr i32 %t3863, 3
  %1503 = icmp sgt i32 %6, 6
  %t3865 = select i1 %1503, i32 %a44, i32 0
  %1504 = add nsw i32 %10, -1
  %t3866 = mul nsw i32 %1504, %dilation_y
  %a50 = ashr i32 %t3863, 1
  %1505 = icmp eq i32 %14, 4
  %1506 = icmp eq i32 %16, 4
  %t3868 = and i1 %1505, %1506
  %t3869 = add nsw i32 %6, -1
  %t3870 = ashr i32 %t3869, 1
  %1507 = shl nsw i32 %t3870, 2
  %b47 = or i32 %1507, 3
  %t3872 = icmp slt i32 %dilation_y, 0
  %t3833 = select i1 %t3872, i32 %t3866, i32 0
  %1508 = icmp slt i32 %14, 16
  %1509 = icmp slt i32 %14, 8
  %1510 = icmp slt i32 %14, 4
  %1511 = icmp slt i32 %a50, 1
  %1512 = select i1 %1511, i32 %a50, i32 1
  %1513 = add nsw i32 %1512, %t3870
  %1514 = select i1 %1510, i32 %a50, i32 %1513
  %1515 = icmp slt i32 %a50, 2
  %1516 = select i1 %1515, i32 %a50, i32 2
  %1517 = and i32 %t3870, -2
  %1518 = add nsw i32 %1516, %1517
  %1519 = select i1 %1509, i32 %1514, i32 %1518
  %1520 = icmp slt i32 %a50, 4
  %1521 = select i1 %1520, i32 %a50, i32 4
  %1522 = and i32 %t3870, -4
  %1523 = add nsw i32 %1521, %1522
  %a46 = select i1 %1508, i32 %1519, i32 %1523
  %1524 = icmp sgt i32 %a50, %a46
  %1525 = select i1 %1524, i32 %a46, i32 %a50
  %1526 = shl nsw i32 %1525, 2
  %1527 = add nsw i32 %1526, -1
  %a45 = select i1 %t3868, i32 %b47, i32 %1527
  %1528 = icmp sgt i32 %a45, %b47
  %a62 = select i1 %1528, i32 %a45, i32 %b47
  %1529 = icmp sgt i32 %6, 0
  %1530 = add nuw nsw i32 %25, 3
  %t3855 = ashr i32 %1530, 2
  %1531 = add nsw i32 %6, 7
  %1532 = ashr i32 %1531, 3
  %t3848 = sub nsw i32 %1532, %t3865
  %1533 = add nsw i32 %6, 3
  %1534 = ashr i32 %1533, 2
  %t3852 = sub nsw i32 %1534, %t3864
  %1535 = select i1 %t3704, i32 %t3705, i32 0
  %1536 = select i1 %t3706, i32 %25, i32 1
  %1537 = add i32 %24, -1
  %1538 = add i32 %1537, %1536
  %1539 = mul nsw i32 %1538, %stride_x
  %b57 = add nsw i32 %1539, %1535
  %1540 = icmp sgt i32 %20, 0
  br i1 %1540, label %"for output.s0.b.rebased56.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased56.preheader":            ; preds = %then_bb54
  %t3856 = ashr i32 %3, 4
  %t3854 = select i1 %1529, i32 %a50, i32 0
  %t3832 = select i1 %t3872, i32 0, i32 %t3866
  %1541 = mul nsw i32 %16, %15
  %1542 = add nsw i32 %25, -1
  %1543 = select i1 %t3706, i32 0, i32 %1542
  %1544 = add nsw i32 %1543, %24
  %1545 = mul nsw i32 %1544, %stride_x
  %1546 = select i1 %t3704, i32 0, i32 %t3705
  %b55 = add nsw i32 %1545, %1546
  %a54 = sub i32 %b55, %b57
  %a56 = ashr i32 %a54, 3
  %1547 = add nsw i32 %a54, 1
  %a51 = ashr i32 %1547, 3
  %1548 = icmp sgt i32 %a54, 6
  %t3891 = select i1 %1548, i32 %a51, i32 0
  %.neg2704 = mul i32 %29, %27
  %.neg2705 = mul i32 %26, %24
  %.neg2706 = mul i32 %30, %19
  %1549 = add i32 %t3702, %1541
  %1550 = add i32 %1549, %t3703
  %.neg2710 = mul i32 %15, -4
  %1551 = icmp sgt i32 %a56, -1
  %1552 = select i1 %1551, i32 %a56, i32 -1
  %1553 = sub nsw i32 %1552, %t3891
  %1554 = icmp sgt i32 %28, 0
  %1555 = icmp sgt i32 %a62, -1
  %t4482 = select i1 %1555, i32 %a62, i32 -1
  %1556 = icmp sgt i32 %a54, -1
  %1557 = select i1 %1556, i32 %1547, i32 0
  %t4483 = zext i32 %1557 to i64
  %1558 = add nsw i32 %t4482, 1
  %1559 = zext i32 %1558 to i64
  %t4484 = shl nuw nsw i64 %1559, 1
  %t4486 = mul i64 %t4484, %t4483
  %1560 = add nsw i32 %a62, 1
  %t3929 = shl nsw i32 %a50, 2
  %1561 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %1562 = shufflevector <16 x i8> %1561, <16 x i8> undef, <16 x i32> zeroinitializer
  %1563 = zext <16 x i8> %1562 to <16 x i16>
  %1564 = icmp sgt i32 %t3848, 0
  %1565 = insertelement <16 x i32> undef, i32 %t3929, i32 0
  %1566 = shufflevector <16 x i32> %1565, <16 x i32> undef, <8 x i32> zeroinitializer
  %1567 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %1568 = shufflevector <8 x i8> %1567, <8 x i8> undef, <8 x i32> zeroinitializer
  %1569 = zext <8 x i8> %1568 to <8 x i16>
  %1570 = icmp sgt i32 %t3852, 0
  %1571 = insertelement <8 x i32> undef, i32 %t3929, i32 0
  %1572 = shufflevector <8 x i32> %1571, <8 x i32> undef, <8 x i32> zeroinitializer
  %1573 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %1574 = shufflevector <4 x i8> %1573, <4 x i8> undef, <4 x i32> zeroinitializer
  %1575 = zext <4 x i8> %1574 to <4 x i16>
  %1576 = zext i8 %input_zero to i16
  %t3895 = mul nsw i32 %1547, %1560
  %.neg2711 = sub i32 %.neg2710, %t3702
  %t3844.neg = sub i32 %.neg2711, %t3703
  %1577 = shl i32 %1560, 1
  %1578 = mul nsw i32 %a62, 7
  %1579 = mul nsw i32 %a62, 6
  %1580 = mul nsw i32 %a62, 5
  %1581 = shl nsw i32 %a62, 2
  %1582 = mul nsw i32 %a62, 3
  %1583 = shl nsw i32 %a62, 1
  %1584 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %1585 = shufflevector <32 x i8> %1584, <32 x i8> undef, <32 x i32> zeroinitializer
  %1586 = zext <32 x i8> %1585 to <32 x i16>
  %1587 = icmp sgt i32 %1553, -1
  %reass.add2720 = add i32 %.neg2704, %.neg2705
  %reass.add2721 = add i32 %reass.add2720, %.neg2706
  %b69 = add nsw i32 %25, -4
  %1588 = icmp sgt i32 %3, 15
  %1589 = icmp sgt i32 %10, 0
  %1590 = icmp sgt i32 %8, 0
  %1591 = bitcast i8* %4 to i16*
  %1592 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %1593 = shufflevector <16 x i32> %1592, <16 x i32> undef, <16 x i32> zeroinitializer
  %1594 = sext <16 x i32> %1593 to <16 x i64>
  %1595 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %1596 = shufflevector <16 x i32> %1595, <16 x i32> undef, <8 x i32> zeroinitializer
  %1597 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %1596, i1 false) #11
  %t4490 = shufflevector <8 x i32> %1597, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1598 = icmp slt <8 x i32> %1596, zeroinitializer
  %1599 = shufflevector <8 x i1> %1598, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1600 = xor <16 x i1> %1599, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %1601 = shufflevector <16 x i1> %1600, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1602 = shufflevector <16 x i1> %1600, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1603 = icmp sgt i32 %output_shift, 0
  %1604 = select i1 %1603, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <16 x i32> zeroinitializer
  %1605 = add nsw i32 %output_shift, -1
  %1606 = insertelement <16 x i32> undef, i32 %1605, i32 0
  %1607 = shufflevector <16 x i32> %1606, <16 x i32> undef, <8 x i32> zeroinitializer
  %1608 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %1607, i1 false) #11
  %t4492 = shufflevector <8 x i32> %1608, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1609 = icmp slt <8 x i32> %1607, zeroinitializer
  %1610 = shufflevector <8 x i1> %1609, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1611 = xor <16 x i1> %1610, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %1612 = shufflevector <16 x i1> %1611, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1613 = shufflevector <16 x i1> %1611, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1614 = zext i8 %output_zero to i16
  %1615 = insertelement <16 x i16> undef, i16 %1614, i32 0
  %1616 = shufflevector <16 x i16> %1615, <16 x i16> undef, <16 x i32> zeroinitializer
  %1617 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b71 = shufflevector <16 x i8> %1617, <16 x i8> undef, <16 x i32> zeroinitializer
  %1618 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b70 = shufflevector <16 x i8> %1618, <16 x i8> undef, <16 x i32> zeroinitializer
  %1619 = zext i32 %t3865 to i64
  %1620 = sext i32 %b57 to i64
  %1621 = sext i32 %16 to i64
  %1622 = zext i32 %a54 to i64
  %1623 = sext i32 %t3865 to i64
  %1624 = zext i32 %t3848 to i64
  %1625 = sext i32 %18 to i64
  %1626 = zext i32 %t3864 to i64
  %1627 = sext i32 %t3864 to i64
  %1628 = zext i32 %t3852 to i64
  %1629 = zext i32 %t3854 to i64
  %1630 = zext i32 %t3929 to i64
  %1631 = zext i32 %a50 to i64
  %1632 = zext i32 %t3891 to i64
  %1633 = sext i32 %1560 to i64
  %1634 = zext i32 %1553 to i64
  %1635 = sext i32 %t3895 to i64
  %1636 = sext i32 %9 to i64
  %1637 = sext i32 %dilation_x to i64
  %1638 = zext i32 %8 to i64
  %1639 = sext i32 %11 to i64
  %1640 = zext i32 %10 to i64
  %1641 = sext i32 %7 to i64
  %1642 = zext i32 %t3856 to i64
  %1643 = sub i32 %t3832, %t3833
  %1644 = sext i32 %27 to i64
  %1645 = sext i32 %stride_y to i64
  %1646 = sext i32 %t3833 to i64
  %1647 = zext i32 %19 to i64
  %zext4256 = zext i32 %20 to i64
  %zext4251 = zext i32 %28 to i64
  %a64 = add nsw i32 %1643, 1
  %1648 = icmp sgt i32 %1643, -1
  %1649 = select i1 %1648, i32 %a64, i32 0
  %t4485 = zext i32 %1649 to i64
  %1650 = mul i64 %t4486, %t4485
  %1651 = add i64 %1650, 6
  %1652 = zext i32 %1643 to i64
  %1653 = zext i32 %1643 to i64
  %1654 = zext i32 %1643 to i64
  %1655 = zext i32 %1643 to i64
  %1656 = zext i32 %1643 to i64
  %1657 = add nsw i64 %1619, -1
  %1658 = add nsw i64 %1619, -1
  %1659 = add nsw i64 %1626, -1
  %1660 = add nsw i64 %1626, -1
  %1661 = add nsw i64 %1629, -1
  %1662 = and i64 %1630, 4294967232
  %1663 = add nsw i64 %1662, -64
  %1664 = lshr exact i64 %1663, 6
  %1665 = add nuw nsw i64 %1664, 1
  %1666 = add nsw i64 %1631, -1
  %1667 = or i32 %1643, %a54
  %1668 = icmp slt i32 %1667, 0
  %xtraiter5891 = and i64 %1619, 3
  %1669 = icmp ult i64 %1657, 3
  %unroll_iter5894 = and i64 %1619, 4294967292
  %lcmp.mod5893.not = icmp eq i64 %xtraiter5891, 0
  %xtraiter5896 = and i64 %1619, 3
  %1670 = icmp ult i64 %1658, 3
  %unroll_iter5899 = and i64 %1619, 4294967292
  %lcmp.mod5898.not = icmp eq i64 %xtraiter5896, 0
  %xtraiter5901 = and i64 %1626, 3
  %1671 = icmp ult i64 %1659, 3
  %unroll_iter5904 = and i64 %1626, 4294967292
  %lcmp.mod5903.not = icmp eq i64 %xtraiter5901, 0
  %xtraiter5906 = and i64 %1626, 3
  %1672 = icmp ult i64 %1660, 3
  %unroll_iter5909 = and i64 %1626, 4294967292
  %lcmp.mod5908.not = icmp eq i64 %xtraiter5906, 0
  %brmerge4993.demorgan = and i1 %1556, %1529
  %xtraiter5911 = and i64 %1629, 3
  %1673 = icmp ult i64 %1661, 3
  %unroll_iter5914 = and i64 %1629, 4294967292
  %lcmp.mod5913.not = icmp eq i64 %xtraiter5911, 0
  %brmerge4996.demorgan = and i1 %1556, %1529
  %min.iters.check5339 = icmp ult i32 %t3929, 8
  %min.iters.check5342 = icmp ult i32 %t3929, 64
  %n.vec5346 = and i64 %1630, 4294967232
  %broadcast.splatinsert5354 = insertelement <16 x i16> poison, i16 %1576, i32 0
  %broadcast.splat5355 = shufflevector <16 x i16> %broadcast.splatinsert5354, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5356 = insertelement <16 x i16> poison, i16 %1576, i32 0
  %broadcast.splat5357 = shufflevector <16 x i16> %broadcast.splatinsert5356, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5358 = insertelement <16 x i16> poison, i16 %1576, i32 0
  %broadcast.splat5359 = shufflevector <16 x i16> %broadcast.splatinsert5358, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5360 = insertelement <16 x i16> poison, i16 %1576, i32 0
  %broadcast.splat5361 = shufflevector <16 x i16> %broadcast.splatinsert5360, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter5916 = and i64 %1665, 1
  %1674 = icmp eq i64 %1663, 0
  %unroll_iter5918 = and i64 %1665, 576460752303423486
  %lcmp.mod5917.not = icmp eq i64 %xtraiter5916, 0
  %cmp.n5349 = icmp eq i64 %n.vec5346, %1630
  %n.vec.remaining5367 = and i64 %1630, 56
  %min.epilog.iters.check5368 = icmp eq i64 %n.vec.remaining5367, 0
  %n.vec5371 = and i64 %1630, 4294967288
  %broadcast.splatinsert5377 = insertelement <8 x i16> poison, i16 %1576, i32 0
  %broadcast.splat5378 = shufflevector <8 x i16> %broadcast.splatinsert5377, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5375 = icmp eq i64 %n.vec5371, %1630
  %xtraiter5920 = and i64 %1631, 3
  %1675 = icmp ult i64 %1666, 3
  %unroll_iter5923 = and i64 %1631, 4294967292
  %lcmp.mod5922.not = icmp eq i64 %xtraiter5920, 0
  %1676 = insertelement <4 x i32> poison, i32 %stride_x, i32 0
  %1677 = shufflevector <4 x i32> %1676, <4 x i32> undef, <4 x i32> zeroinitializer
  %1678 = insertelement <4 x i32> poison, i32 %b57, i32 0
  %1679 = shufflevector <4 x i32> %1678, <4 x i32> undef, <4 x i32> zeroinitializer
  %1680 = insertelement <4 x i64> poison, i64 %1633, i32 0
  %1681 = shufflevector <4 x i64> %1680, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %"for output.s0.b.rebased56"

next_bb55:                                        ; preds = %next_bb
  br i1 %45, label %then_bb158, label %next_bb159

"for output.s0.b.rebased56":                      ; preds = %"for output.s0.b.rebased56.preheader", %"end for output.s0.y.rebased60"
  %indvars.iv4252 = phi i64 [ 0, %"for output.s0.b.rebased56.preheader" ], [ %indvars.iv.next4253, %"end for output.s0.y.rebased60" ]
  %convolved1914.sroa.0.13 = phi <8 x i32> [ undef, %"for output.s0.b.rebased56.preheader" ], [ %convolved1914.sroa.0.15, %"end for output.s0.y.rebased60" ]
  %1682 = add nuw i64 %indvars.iv4252, %1647
  %1683 = trunc i64 %1682 to i32
  %1684 = mul i32 %21, %1683
  br i1 %1554, label %"for output.s0.y.rebased59.preheader", label %"end for output.s0.y.rebased60", !prof !387

"for output.s0.y.rebased59.preheader":            ; preds = %"for output.s0.b.rebased56"
  %t3886 = sub i32 %1684, %1550
  %t3877 = add i32 %t3844.neg, %1684
  %1685 = sext i32 %t3886 to i64
  %1686 = trunc i64 %1682 to i32
  %1687 = mul i32 %30, %1686
  br label %"for output.s0.y.rebased59"

"for output.s0.y.rebased59":                      ; preds = %"for output.s0.y.rebased59.preheader", %call_destructor.exit2420
  %indvars.iv4247 = phi i64 [ 0, %"for output.s0.y.rebased59.preheader" ], [ %indvars.iv.next4248, %call_destructor.exit2420 ]
  %convolved1914.sroa.0.14 = phi <8 x i32> [ %convolved1914.sroa.0.13, %"for output.s0.y.rebased59.preheader" ], [ %convolved1914.sroa.0.17, %call_destructor.exit2420 ]
  %1688 = add nsw i64 %indvars.iv4247, %1644
  %1689 = mul nsw i64 %1688, %1645
  %1690 = add nsw i64 %1689, %1646
  %1691 = call i8* @halide_malloc(i8* null, i64 %1651)
  %input_wrapper62 = bitcast i8* %1691 to i16*
  br i1 %t3868, label %then_bb65, label %next_bb66

"end for output.s0.y.rebased60":                  ; preds = %call_destructor.exit2420, %"for output.s0.b.rebased56"
  %convolved1914.sroa.0.15 = phi <8 x i32> [ %convolved1914.sroa.0.13, %"for output.s0.b.rebased56" ], [ %convolved1914.sroa.0.17, %call_destructor.exit2420 ]
  %indvars.iv.next4253 = add nuw nsw i64 %indvars.iv4252, 1
  %1692 = icmp eq i64 %indvars.iv.next4253, %zext4256
  br i1 %1692, label %after_bb1, label %"for output.s0.b.rebased56"

then_bb65:                                        ; preds = %"for output.s0.y.rebased59"
  br i1 %1648, label %"for input_wrapper.s0.y.rebased67", label %"consume input_wrapper139", !prof !387

next_bb66:                                        ; preds = %"for output.s0.y.rebased59"
  br i1 %1508, label %next_bb86, label %then_bb85

"for input_wrapper.s0.y.rebased67":               ; preds = %then_bb65, %"end for input_wrapper.s0.x.x.rebased77"
  %indvars.iv4227 = phi i64 [ %indvars.iv.next4228, %"end for input_wrapper.s0.x.x.rebased77" ], [ 0, %then_bb65 ]
  %1693 = mul nsw i64 %indvars.iv4227, %1635
  %1694 = add nsw i64 %indvars.iv4227, %1690
  %1695 = trunc i64 %1694 to i32
  %1696 = mul i32 %18, %1695
  %t3904 = add i32 %t3877, %1696
  br i1 %1548, label %"for input_wrapper.s0.x.x70.preheader", label %"end for input_wrapper.s0.x.x71", !prof !387

"for input_wrapper.s0.x.x70.preheader":           ; preds = %"for input_wrapper.s0.y.rebased67"
  %1697 = sext i32 %t3904 to i64
  br i1 %1529, label %"for input_wrapper.s0.x.x70.us.preheader", label %"end for input_wrapper.s0.x.x.rebased77", !prof !387

"for input_wrapper.s0.x.x70.us.preheader":        ; preds = %"for input_wrapper.s0.x.x70.preheader"
  %1698 = trunc i64 %1693 to i32
  br label %"for input_wrapper.s0.x.x70.us"

"for input_wrapper.s0.x.x70.us":                  ; preds = %"for input_wrapper.s0.x.x70.us.preheader", %"end for input_wrapper.s0.c.c74.loopexit.us"
  %indvars.iv4217 = phi i64 [ 0, %"for input_wrapper.s0.x.x70.us.preheader" ], [ %indvars.iv.next4218, %"end for input_wrapper.s0.c.c74.loopexit.us" ]
  %1699 = trunc i64 %indvars.iv4217 to i32
  %t3911.us = mul i32 %1577, %1699
  %1700 = shl nsw i64 %indvars.iv4217, 3
  %1701 = add nsw i64 %1700, %1620
  br label %"for input_wrapper.s0.c.c73.us"

"for input_wrapper.s0.c.c73.us":                  ; preds = %"for input_wrapper.s0.x.x70.us", %"for input_wrapper.s0.c.c73.us"
  %indvars.iv4214 = phi i64 [ 0, %"for input_wrapper.s0.x.x70.us" ], [ %indvars.iv.next4215, %"for input_wrapper.s0.c.c73.us" ]
  %1702 = add nsw i64 %indvars.iv4214, %1701
  %1703 = shl nsw i64 %1702, 2
  %1704 = add nsw i64 %1703, %1697
  %1705 = getelementptr inbounds i8, i8* %12, i64 %1704
  %1706 = bitcast i8* %1705 to <32 x i8>*
  %1707 = load <32 x i8>, <32 x i8>* %1706, align 4, !tbaa !397
  %1708 = zext <32 x i8> %1707 to <32 x i16>
  %1709 = sub nsw <32 x i16> %1708, %1586
  %1710 = trunc i64 %indvars.iv4214 to i32
  %1711 = add i32 %t3911.us, %1710
  %1712 = shl nsw i32 %1711, 2
  %1713 = add i32 %1712, %1698
  %1714 = insertelement <4 x i32> undef, i32 %1713, i32 0
  %1715 = shufflevector <4 x i32> %1714, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1716 = add <4 x i32> %1715, <i32 poison, i32 1, i32 2, i32 3>
  %1717 = add i32 %1713, 1
  %1718 = add i32 %1717, %a62
  %1719 = insertelement <4 x i32> undef, i32 %1718, i32 0
  %1720 = shufflevector <4 x i32> %1719, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1721 = add <4 x i32> %1720, <i32 poison, i32 1, i32 2, i32 3>
  %1722 = add i32 %1713, 2
  %1723 = add i32 %1722, %1583
  %1724 = insertelement <4 x i32> undef, i32 %1723, i32 0
  %1725 = shufflevector <4 x i32> %1724, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1726 = add <4 x i32> %1725, <i32 poison, i32 1, i32 2, i32 3>
  %1727 = add i32 %1713, 3
  %1728 = add i32 %1727, %1582
  %1729 = insertelement <4 x i32> undef, i32 %1728, i32 0
  %1730 = shufflevector <4 x i32> %1729, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1731 = add <4 x i32> %1730, <i32 poison, i32 1, i32 2, i32 3>
  %1732 = add i32 %1713, 4
  %1733 = add i32 %1732, %1581
  %1734 = insertelement <4 x i32> undef, i32 %1733, i32 0
  %1735 = shufflevector <4 x i32> %1734, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1736 = add <4 x i32> %1735, <i32 poison, i32 1, i32 2, i32 3>
  %1737 = add i32 %1713, 5
  %1738 = add i32 %1737, %1580
  %1739 = insertelement <4 x i32> undef, i32 %1738, i32 0
  %1740 = shufflevector <4 x i32> %1739, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1741 = add <4 x i32> %1740, <i32 poison, i32 1, i32 2, i32 3>
  %1742 = add i32 %1713, 6
  %1743 = add i32 %1742, %1579
  %1744 = insertelement <4 x i32> undef, i32 %1743, i32 0
  %1745 = shufflevector <4 x i32> %1744, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1746 = add <4 x i32> %1745, <i32 poison, i32 1, i32 2, i32 3>
  %1747 = add i32 %1713, 7
  %1748 = add i32 %1747, %1578
  %1749 = insertelement <4 x i32> undef, i32 %1748, i32 0
  %1750 = shufflevector <4 x i32> %1749, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %1751 = add <4 x i32> %1750, <i32 poison, i32 1, i32 2, i32 3>
  %1752 = extractelement <32 x i16> %1709, i32 0
  %1753 = sext i32 %1713 to i64
  %1754 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1753
  store i16 %1752, i16* %1754, align 2, !tbaa !399
  %1755 = extractelement <4 x i32> %1716, i32 1
  %1756 = extractelement <32 x i16> %1709, i32 1
  %1757 = sext i32 %1755 to i64
  %1758 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1757
  store i16 %1756, i16* %1758, align 2, !tbaa !399
  %1759 = extractelement <4 x i32> %1716, i32 2
  %1760 = extractelement <32 x i16> %1709, i32 2
  %1761 = sext i32 %1759 to i64
  %1762 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1761
  store i16 %1760, i16* %1762, align 2, !tbaa !399
  %1763 = extractelement <4 x i32> %1716, i32 3
  %1764 = extractelement <32 x i16> %1709, i32 3
  %1765 = sext i32 %1763 to i64
  %1766 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1765
  store i16 %1764, i16* %1766, align 2, !tbaa !399
  %1767 = extractelement <32 x i16> %1709, i32 4
  %1768 = sext i32 %1718 to i64
  %1769 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1768
  store i16 %1767, i16* %1769, align 2, !tbaa !399
  %1770 = extractelement <4 x i32> %1721, i32 1
  %1771 = extractelement <32 x i16> %1709, i32 5
  %1772 = sext i32 %1770 to i64
  %1773 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1772
  store i16 %1771, i16* %1773, align 2, !tbaa !399
  %1774 = extractelement <4 x i32> %1721, i32 2
  %1775 = extractelement <32 x i16> %1709, i32 6
  %1776 = sext i32 %1774 to i64
  %1777 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1776
  store i16 %1775, i16* %1777, align 2, !tbaa !399
  %1778 = extractelement <4 x i32> %1721, i32 3
  %1779 = extractelement <32 x i16> %1709, i32 7
  %1780 = sext i32 %1778 to i64
  %1781 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1780
  store i16 %1779, i16* %1781, align 2, !tbaa !399
  %1782 = extractelement <32 x i16> %1709, i32 8
  %1783 = sext i32 %1723 to i64
  %1784 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1783
  store i16 %1782, i16* %1784, align 2, !tbaa !399
  %1785 = extractelement <4 x i32> %1726, i32 1
  %1786 = extractelement <32 x i16> %1709, i32 9
  %1787 = sext i32 %1785 to i64
  %1788 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1787
  store i16 %1786, i16* %1788, align 2, !tbaa !399
  %1789 = extractelement <4 x i32> %1726, i32 2
  %1790 = extractelement <32 x i16> %1709, i32 10
  %1791 = sext i32 %1789 to i64
  %1792 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1791
  store i16 %1790, i16* %1792, align 2, !tbaa !399
  %1793 = extractelement <4 x i32> %1726, i32 3
  %1794 = extractelement <32 x i16> %1709, i32 11
  %1795 = sext i32 %1793 to i64
  %1796 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1795
  store i16 %1794, i16* %1796, align 2, !tbaa !399
  %1797 = extractelement <32 x i16> %1709, i32 12
  %1798 = sext i32 %1728 to i64
  %1799 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1798
  store i16 %1797, i16* %1799, align 2, !tbaa !399
  %1800 = extractelement <4 x i32> %1731, i32 1
  %1801 = extractelement <32 x i16> %1709, i32 13
  %1802 = sext i32 %1800 to i64
  %1803 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1802
  store i16 %1801, i16* %1803, align 2, !tbaa !399
  %1804 = extractelement <4 x i32> %1731, i32 2
  %1805 = extractelement <32 x i16> %1709, i32 14
  %1806 = sext i32 %1804 to i64
  %1807 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1806
  store i16 %1805, i16* %1807, align 2, !tbaa !399
  %1808 = extractelement <4 x i32> %1731, i32 3
  %1809 = extractelement <32 x i16> %1709, i32 15
  %1810 = sext i32 %1808 to i64
  %1811 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1810
  store i16 %1809, i16* %1811, align 2, !tbaa !399
  %1812 = extractelement <32 x i16> %1709, i32 16
  %1813 = sext i32 %1733 to i64
  %1814 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1813
  store i16 %1812, i16* %1814, align 2, !tbaa !399
  %1815 = extractelement <4 x i32> %1736, i32 1
  %1816 = extractelement <32 x i16> %1709, i32 17
  %1817 = sext i32 %1815 to i64
  %1818 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1817
  store i16 %1816, i16* %1818, align 2, !tbaa !399
  %1819 = extractelement <4 x i32> %1736, i32 2
  %1820 = extractelement <32 x i16> %1709, i32 18
  %1821 = sext i32 %1819 to i64
  %1822 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1821
  store i16 %1820, i16* %1822, align 2, !tbaa !399
  %1823 = extractelement <4 x i32> %1736, i32 3
  %1824 = extractelement <32 x i16> %1709, i32 19
  %1825 = sext i32 %1823 to i64
  %1826 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1825
  store i16 %1824, i16* %1826, align 2, !tbaa !399
  %1827 = extractelement <32 x i16> %1709, i32 20
  %1828 = sext i32 %1738 to i64
  %1829 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1828
  store i16 %1827, i16* %1829, align 2, !tbaa !399
  %1830 = extractelement <4 x i32> %1741, i32 1
  %1831 = extractelement <32 x i16> %1709, i32 21
  %1832 = sext i32 %1830 to i64
  %1833 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1832
  store i16 %1831, i16* %1833, align 2, !tbaa !399
  %1834 = extractelement <4 x i32> %1741, i32 2
  %1835 = extractelement <32 x i16> %1709, i32 22
  %1836 = sext i32 %1834 to i64
  %1837 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1836
  store i16 %1835, i16* %1837, align 2, !tbaa !399
  %1838 = extractelement <4 x i32> %1741, i32 3
  %1839 = extractelement <32 x i16> %1709, i32 23
  %1840 = sext i32 %1838 to i64
  %1841 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1840
  store i16 %1839, i16* %1841, align 2, !tbaa !399
  %1842 = extractelement <32 x i16> %1709, i32 24
  %1843 = sext i32 %1743 to i64
  %1844 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1843
  store i16 %1842, i16* %1844, align 2, !tbaa !399
  %1845 = extractelement <4 x i32> %1746, i32 1
  %1846 = extractelement <32 x i16> %1709, i32 25
  %1847 = sext i32 %1845 to i64
  %1848 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1847
  store i16 %1846, i16* %1848, align 2, !tbaa !399
  %1849 = extractelement <4 x i32> %1746, i32 2
  %1850 = extractelement <32 x i16> %1709, i32 26
  %1851 = sext i32 %1849 to i64
  %1852 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1851
  store i16 %1850, i16* %1852, align 2, !tbaa !399
  %1853 = extractelement <4 x i32> %1746, i32 3
  %1854 = extractelement <32 x i16> %1709, i32 27
  %1855 = sext i32 %1853 to i64
  %1856 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1855
  store i16 %1854, i16* %1856, align 2, !tbaa !399
  %1857 = extractelement <32 x i16> %1709, i32 28
  %1858 = sext i32 %1748 to i64
  %1859 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1858
  store i16 %1857, i16* %1859, align 2, !tbaa !399
  %1860 = extractelement <4 x i32> %1751, i32 1
  %1861 = extractelement <32 x i16> %1709, i32 29
  %1862 = sext i32 %1860 to i64
  %1863 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1862
  store i16 %1861, i16* %1863, align 2, !tbaa !399
  %1864 = extractelement <4 x i32> %1751, i32 2
  %1865 = extractelement <32 x i16> %1709, i32 30
  %1866 = sext i32 %1864 to i64
  %1867 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1866
  store i16 %1865, i16* %1867, align 2, !tbaa !399
  %1868 = extractelement <4 x i32> %1751, i32 3
  %1869 = extractelement <32 x i16> %1709, i32 31
  %1870 = sext i32 %1868 to i64
  %1871 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1870
  store i16 %1869, i16* %1871, align 2, !tbaa !399
  %indvars.iv.next4215 = add nuw nsw i64 %indvars.iv4214, 1
  %.not2192.us = icmp eq i64 %indvars.iv.next4215, %1631
  br i1 %.not2192.us, label %"end for input_wrapper.s0.c.c74.loopexit.us", label %"for input_wrapper.s0.c.c73.us"

"end for input_wrapper.s0.c.c74.loopexit.us":     ; preds = %"for input_wrapper.s0.c.c73.us"
  %indvars.iv.next4218 = add nuw nsw i64 %indvars.iv4217, 1
  %.not2191.us = icmp eq i64 %indvars.iv.next4218, %1632
  br i1 %.not2191.us, label %"end for input_wrapper.s0.x.x71", label %"for input_wrapper.s0.x.x70.us"

"end for input_wrapper.s0.x.x71":                 ; preds = %"end for input_wrapper.s0.c.c74.loopexit.us", %"for input_wrapper.s0.y.rebased67"
  br i1 %1587, label %"for input_wrapper.s0.x.x.rebased76.preheader", label %"end for input_wrapper.s0.x.x.rebased77", !prof !387

"for input_wrapper.s0.x.x.rebased76.preheader":   ; preds = %"end for input_wrapper.s0.x.x71"
  %1872 = sext i32 %t3904 to i64
  br i1 %1529, label %"for input_wrapper.s0.x.x.rebased76.us", label %"end for input_wrapper.s0.x.x.rebased77", !prof !387

"for input_wrapper.s0.x.x.rebased76.us":          ; preds = %"for input_wrapper.s0.x.x.rebased76.preheader", %"end for input_wrapper.s0.x.v2180.us"
  %indvars.iv4225 = phi i64 [ %indvars.iv.next4226, %"end for input_wrapper.s0.x.v2180.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased76.preheader" ]
  %1873 = trunc i64 %indvars.iv4225 to i32
  %1874 = add i32 %t3891, %1873
  %1875 = shl nsw i32 %1874, 3
  %a66.us = sub nsw i32 %a54, %1875
  %1876 = icmp slt i32 %a66.us, 7
  %t3922.us = select i1 %1876, i32 %a66.us, i32 7
  %1877 = icmp sgt i32 %t3922.us, -1
  br i1 %1877, label %"for input_wrapper.s0.x.v2179.us.us.preheader", label %"end for input_wrapper.s0.x.v2180.us", !prof !387

"for input_wrapper.s0.x.v2179.us.us.preheader":   ; preds = %"for input_wrapper.s0.x.x.rebased76.us"
  %1878 = sext i32 %1875 to i64
  %1879 = zext i32 %t3922.us to i64
  br label %"for input_wrapper.s0.x.v2179.us.us"

"end for input_wrapper.s0.x.v2180.us":            ; preds = %"end for input_wrapper.s0.c.c83.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased76.us"
  %indvars.iv.next4226 = add nuw nsw i64 %indvars.iv4225, 1
  %.not2188.us = icmp eq i64 %indvars.iv4225, %1634
  br i1 %.not2188.us, label %"end for input_wrapper.s0.x.x.rebased77", label %"for input_wrapper.s0.x.x.rebased76.us"

"for input_wrapper.s0.x.v2179.us.us":             ; preds = %"for input_wrapper.s0.x.v2179.us.us.preheader", %"end for input_wrapper.s0.c.c83.loopexit.us.us"
  %indvars.iv4222 = phi i64 [ 0, %"for input_wrapper.s0.x.v2179.us.us.preheader" ], [ %indvars.iv.next4223, %"end for input_wrapper.s0.c.c83.loopexit.us.us" ]
  %1880 = add nsw i64 %indvars.iv4222, %1878
  %1881 = mul nsw i64 %1880, %1633
  %1882 = add nsw i64 %1881, %1693
  %1883 = trunc i64 %1880 to i32
  %t3924.us.us = add i32 %b57, %1883
  %1884 = sext i32 %t3924.us.us to i64
  br i1 %1675, label %"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c82.us.us"

"for input_wrapper.s0.c.c82.us.us":               ; preds = %"for input_wrapper.s0.x.v2179.us.us", %"for input_wrapper.s0.c.c82.us.us"
  %indvars.iv4220 = phi i64 [ %indvars.iv.next4221.3, %"for input_wrapper.s0.c.c82.us.us" ], [ 0, %"for input_wrapper.s0.x.v2179.us.us" ]
  %niter5924 = phi i64 [ %niter5924.nsub.3, %"for input_wrapper.s0.c.c82.us.us" ], [ %unroll_iter5923, %"for input_wrapper.s0.x.v2179.us.us" ]
  %1885 = add nsw i64 %indvars.iv4220, %1884
  %1886 = shl nsw i64 %1885, 2
  %1887 = add nsw i64 %1886, %1872
  %1888 = getelementptr inbounds i8, i8* %12, i64 %1887
  %1889 = bitcast i8* %1888 to <4 x i8>*
  %1890 = load <4 x i8>, <4 x i8>* %1889, align 4, !tbaa !397
  %1891 = zext <4 x i8> %1890 to <4 x i16>
  %1892 = sub nsw <4 x i16> %1891, %1575
  %1893 = shl nuw nsw i64 %indvars.iv4220, 2
  %1894 = add nsw i64 %1893, %1882
  %1895 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1894
  %1896 = bitcast i16* %1895 to <4 x i16>*
  store <4 x i16> %1892, <4 x i16>* %1896, align 8, !tbaa !399
  %indvars.iv.next4221 = or i64 %indvars.iv4220, 1
  %1897 = add nsw i64 %indvars.iv.next4221, %1884
  %1898 = shl nsw i64 %1897, 2
  %1899 = add nsw i64 %1898, %1872
  %1900 = getelementptr inbounds i8, i8* %12, i64 %1899
  %1901 = bitcast i8* %1900 to <4 x i8>*
  %1902 = load <4 x i8>, <4 x i8>* %1901, align 4, !tbaa !397
  %1903 = zext <4 x i8> %1902 to <4 x i16>
  %1904 = sub nsw <4 x i16> %1903, %1575
  %1905 = shl nuw nsw i64 %indvars.iv.next4221, 2
  %1906 = add nsw i64 %1905, %1882
  %1907 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1906
  %1908 = bitcast i16* %1907 to <4 x i16>*
  store <4 x i16> %1904, <4 x i16>* %1908, align 8, !tbaa !399
  %indvars.iv.next4221.1 = or i64 %indvars.iv4220, 2
  %1909 = add nsw i64 %indvars.iv.next4221.1, %1884
  %1910 = shl nsw i64 %1909, 2
  %1911 = add nsw i64 %1910, %1872
  %1912 = getelementptr inbounds i8, i8* %12, i64 %1911
  %1913 = bitcast i8* %1912 to <4 x i8>*
  %1914 = load <4 x i8>, <4 x i8>* %1913, align 4, !tbaa !397
  %1915 = zext <4 x i8> %1914 to <4 x i16>
  %1916 = sub nsw <4 x i16> %1915, %1575
  %1917 = shl nuw nsw i64 %indvars.iv.next4221.1, 2
  %1918 = add nsw i64 %1917, %1882
  %1919 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1918
  %1920 = bitcast i16* %1919 to <4 x i16>*
  store <4 x i16> %1916, <4 x i16>* %1920, align 8, !tbaa !399
  %indvars.iv.next4221.2 = or i64 %indvars.iv4220, 3
  %1921 = add nsw i64 %indvars.iv.next4221.2, %1884
  %1922 = shl nsw i64 %1921, 2
  %1923 = add nsw i64 %1922, %1872
  %1924 = getelementptr inbounds i8, i8* %12, i64 %1923
  %1925 = bitcast i8* %1924 to <4 x i8>*
  %1926 = load <4 x i8>, <4 x i8>* %1925, align 4, !tbaa !397
  %1927 = zext <4 x i8> %1926 to <4 x i16>
  %1928 = sub nsw <4 x i16> %1927, %1575
  %1929 = shl nuw nsw i64 %indvars.iv.next4221.2, 2
  %1930 = add nsw i64 %1929, %1882
  %1931 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1930
  %1932 = bitcast i16* %1931 to <4 x i16>*
  store <4 x i16> %1928, <4 x i16>* %1932, align 8, !tbaa !399
  %indvars.iv.next4221.3 = add nuw nsw i64 %indvars.iv4220, 4
  %niter5924.nsub.3 = add i64 %niter5924, -4
  %niter5924.ncmp.3 = icmp eq i64 %niter5924.nsub.3, 0
  br i1 %niter5924.ncmp.3, label %"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c82.us.us"

"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c82.us.us", %"for input_wrapper.s0.x.v2179.us.us"
  %indvars.iv4220.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v2179.us.us" ], [ %indvars.iv.next4221.3, %"for input_wrapper.s0.c.c82.us.us" ]
  br i1 %lcmp.mod5922.not, label %"end for input_wrapper.s0.c.c83.loopexit.us.us", label %"for input_wrapper.s0.c.c82.us.us.epil"

"for input_wrapper.s0.c.c82.us.us.epil":          ; preds = %"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c82.us.us.epil"
  %indvars.iv4220.epil = phi i64 [ %indvars.iv.next4221.epil, %"for input_wrapper.s0.c.c82.us.us.epil" ], [ %indvars.iv4220.unr, %"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa" ]
  %epil.iter5921 = phi i64 [ %epil.iter5921.sub, %"for input_wrapper.s0.c.c82.us.us.epil" ], [ %xtraiter5920, %"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa" ]
  %1933 = add nsw i64 %indvars.iv4220.epil, %1884
  %1934 = shl nsw i64 %1933, 2
  %1935 = add nsw i64 %1934, %1872
  %1936 = getelementptr inbounds i8, i8* %12, i64 %1935
  %1937 = bitcast i8* %1936 to <4 x i8>*
  %1938 = load <4 x i8>, <4 x i8>* %1937, align 4, !tbaa !397
  %1939 = zext <4 x i8> %1938 to <4 x i16>
  %1940 = sub nsw <4 x i16> %1939, %1575
  %1941 = shl nuw nsw i64 %indvars.iv4220.epil, 2
  %1942 = add nsw i64 %1941, %1882
  %1943 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1942
  %1944 = bitcast i16* %1943 to <4 x i16>*
  store <4 x i16> %1940, <4 x i16>* %1944, align 8, !tbaa !399
  %indvars.iv.next4221.epil = add nuw nsw i64 %indvars.iv4220.epil, 1
  %epil.iter5921.sub = add i64 %epil.iter5921, -1
  %epil.iter5921.cmp.not = icmp eq i64 %epil.iter5921.sub, 0
  br i1 %epil.iter5921.cmp.not, label %"end for input_wrapper.s0.c.c83.loopexit.us.us", label %"for input_wrapper.s0.c.c82.us.us.epil", !llvm.loop !416

"end for input_wrapper.s0.c.c83.loopexit.us.us":  ; preds = %"for input_wrapper.s0.c.c82.us.us.epil", %"end for input_wrapper.s0.c.c83.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4223 = add nuw nsw i64 %indvars.iv4222, 1
  %.not2189.us.us = icmp eq i64 %indvars.iv4222, %1879
  br i1 %.not2189.us.us, label %"end for input_wrapper.s0.x.v2180.us", label %"for input_wrapper.s0.x.v2179.us.us"

"end for input_wrapper.s0.x.x.rebased77":         ; preds = %"end for input_wrapper.s0.x.v2180.us", %"for input_wrapper.s0.x.x70.preheader", %"for input_wrapper.s0.x.x.rebased76.preheader", %"end for input_wrapper.s0.x.x71"
  %indvars.iv.next4228 = add nuw nsw i64 %indvars.iv4227, 1
  %.not2187 = icmp eq i64 %indvars.iv4227, %1656
  br i1 %.not2187, label %"consume input_wrapper139", label %"for input_wrapper.s0.y.rebased67"

then_bb85:                                        ; preds = %next_bb66
  br i1 %1668, label %"consume input_wrapper139", label %"for input_wrapper.s0.y.rebased87.us", !prof !402

"for input_wrapper.s0.y.rebased87.us":            ; preds = %then_bb85, %"end for input_wrapper.s0.x.rebased91.loopexit.us"
  %indvars.iv4180 = phi i64 [ %indvars.iv.next4181, %"end for input_wrapper.s0.x.rebased91.loopexit.us" ], [ 0, %then_bb85 ]
  %1945 = trunc i64 %indvars.iv4180 to i32
  %t3931.us = mul i32 %1547, %1945
  %1946 = add nsw i64 %indvars.iv4180, %1690
  %1947 = mul nsw i64 %1946, %1625
  %1948 = add nsw i64 %1947, %1685
  br i1 %1564, label %"for input_wrapper.s0.x.rebased90.us.us", label %"for input_wrapper.s0.x.rebased90.preheader.split.us3218", !prof !387

"for input_wrapper.s0.x.rebased90.preheader.split.us3218": ; preds = %"for input_wrapper.s0.y.rebased87.us"
  br i1 %1503, label %"for input_wrapper.s0.x.rebased90.us3202.us", label %"end for input_wrapper.s0.x.rebased91.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased91.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c94.loopexit.us3213.us", %"end for input_wrapper.s0.c.c.rebased97.loopexit.us.us", %"for input_wrapper.s0.x.rebased90.preheader.split.us3218"
  %indvars.iv.next4181 = add nuw nsw i64 %indvars.iv4180, 1
  %.not2182.us = icmp eq i64 %indvars.iv4180, %1652
  br i1 %.not2182.us, label %"consume input_wrapper139", label %"for input_wrapper.s0.y.rebased87.us"

"for input_wrapper.s0.x.rebased90.us.us":         ; preds = %"for input_wrapper.s0.y.rebased87.us", %"end for input_wrapper.s0.c.c.rebased97.loopexit.us.us"
  %indvars.iv4177 = phi i64 [ %indvars.iv.next4178, %"end for input_wrapper.s0.c.c.rebased97.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased87.us" ]
  %1949 = trunc i64 %indvars.iv4177 to i32
  %reass.add2712.us.us = add i32 %t3931.us, %1949
  %reass.mul2713.us.us = mul i32 %reass.add2712.us.us, %1560
  %1950 = add nsw i64 %indvars.iv4177, %1620
  %1951 = mul nsw i64 %1950, %1621
  %1952 = add nsw i64 %1948, %1951
  %1953 = sext i32 %reass.mul2713.us.us to i64
  br i1 %1503, label %"for input_wrapper.s0.c.c93.us.us.preheader", label %"end for input_wrapper.s0.c.c94.us.us", !prof !387

"for input_wrapper.s0.c.c93.us.us.preheader":     ; preds = %"for input_wrapper.s0.x.rebased90.us.us"
  br i1 %1670, label %"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c93.us.us"

"for input_wrapper.s0.c.c93.us.us":               ; preds = %"for input_wrapper.s0.c.c93.us.us.preheader", %"for input_wrapper.s0.c.c93.us.us"
  %indvars.iv4173 = phi i64 [ %indvars.iv.next4174.3, %"for input_wrapper.s0.c.c93.us.us" ], [ 0, %"for input_wrapper.s0.c.c93.us.us.preheader" ]
  %niter5900 = phi i64 [ %niter5900.nsub.3, %"for input_wrapper.s0.c.c93.us.us" ], [ %unroll_iter5899, %"for input_wrapper.s0.c.c93.us.us.preheader" ]
  %1954 = shl nuw nsw i64 %indvars.iv4173, 4
  %1955 = add nsw i64 %1954, %1952
  %1956 = getelementptr inbounds i8, i8* %12, i64 %1955
  %1957 = bitcast i8* %1956 to <16 x i8>*
  %1958 = load <16 x i8>, <16 x i8>* %1957, align 4, !tbaa !397
  %1959 = zext <16 x i8> %1958 to <16 x i16>
  %1960 = sub nsw <16 x i16> %1959, %1563
  %1961 = add nsw i64 %1954, %1953
  %1962 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1961
  %1963 = bitcast i16* %1962 to <16 x i16>*
  store <16 x i16> %1960, <16 x i16>* %1963, align 8, !tbaa !399
  %indvars.iv.next4174 = shl i64 %indvars.iv4173, 4
  %1964 = or i64 %indvars.iv.next4174, 16
  %1965 = add nsw i64 %1964, %1952
  %1966 = getelementptr inbounds i8, i8* %12, i64 %1965
  %1967 = bitcast i8* %1966 to <16 x i8>*
  %1968 = load <16 x i8>, <16 x i8>* %1967, align 4, !tbaa !397
  %1969 = zext <16 x i8> %1968 to <16 x i16>
  %1970 = sub nsw <16 x i16> %1969, %1563
  %1971 = add nsw i64 %1964, %1953
  %1972 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1971
  %1973 = bitcast i16* %1972 to <16 x i16>*
  store <16 x i16> %1970, <16 x i16>* %1973, align 8, !tbaa !399
  %indvars.iv.next4174.1 = shl i64 %indvars.iv4173, 4
  %1974 = or i64 %indvars.iv.next4174.1, 32
  %1975 = add nsw i64 %1974, %1952
  %1976 = getelementptr inbounds i8, i8* %12, i64 %1975
  %1977 = bitcast i8* %1976 to <16 x i8>*
  %1978 = load <16 x i8>, <16 x i8>* %1977, align 4, !tbaa !397
  %1979 = zext <16 x i8> %1978 to <16 x i16>
  %1980 = sub nsw <16 x i16> %1979, %1563
  %1981 = add nsw i64 %1974, %1953
  %1982 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1981
  %1983 = bitcast i16* %1982 to <16 x i16>*
  store <16 x i16> %1980, <16 x i16>* %1983, align 8, !tbaa !399
  %indvars.iv.next4174.2 = shl i64 %indvars.iv4173, 4
  %1984 = or i64 %indvars.iv.next4174.2, 48
  %1985 = add nsw i64 %1984, %1952
  %1986 = getelementptr inbounds i8, i8* %12, i64 %1985
  %1987 = bitcast i8* %1986 to <16 x i8>*
  %1988 = load <16 x i8>, <16 x i8>* %1987, align 4, !tbaa !397
  %1989 = zext <16 x i8> %1988 to <16 x i16>
  %1990 = sub nsw <16 x i16> %1989, %1563
  %1991 = add nsw i64 %1984, %1953
  %1992 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %1991
  %1993 = bitcast i16* %1992 to <16 x i16>*
  store <16 x i16> %1990, <16 x i16>* %1993, align 8, !tbaa !399
  %indvars.iv.next4174.3 = add nuw nsw i64 %indvars.iv4173, 4
  %niter5900.nsub.3 = add i64 %niter5900, -4
  %niter5900.ncmp.3 = icmp eq i64 %niter5900.nsub.3, 0
  br i1 %niter5900.ncmp.3, label %"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c93.us.us"

"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c93.us.us", %"for input_wrapper.s0.c.c93.us.us.preheader"
  %indvars.iv4173.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c93.us.us.preheader" ], [ %indvars.iv.next4174.3, %"for input_wrapper.s0.c.c93.us.us" ]
  br i1 %lcmp.mod5898.not, label %"end for input_wrapper.s0.c.c94.us.us", label %"for input_wrapper.s0.c.c93.us.us.epil"

"for input_wrapper.s0.c.c93.us.us.epil":          ; preds = %"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c93.us.us.epil"
  %indvars.iv4173.epil = phi i64 [ %indvars.iv.next4174.epil, %"for input_wrapper.s0.c.c93.us.us.epil" ], [ %indvars.iv4173.unr, %"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa" ]
  %epil.iter5897 = phi i64 [ %epil.iter5897.sub, %"for input_wrapper.s0.c.c93.us.us.epil" ], [ %xtraiter5896, %"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa" ]
  %1994 = shl nuw nsw i64 %indvars.iv4173.epil, 4
  %1995 = add nsw i64 %1994, %1952
  %1996 = getelementptr inbounds i8, i8* %12, i64 %1995
  %1997 = bitcast i8* %1996 to <16 x i8>*
  %1998 = load <16 x i8>, <16 x i8>* %1997, align 4, !tbaa !397
  %1999 = zext <16 x i8> %1998 to <16 x i16>
  %2000 = sub nsw <16 x i16> %1999, %1563
  %2001 = add nsw i64 %1994, %1953
  %2002 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2001
  %2003 = bitcast i16* %2002 to <16 x i16>*
  store <16 x i16> %2000, <16 x i16>* %2003, align 8, !tbaa !399
  %indvars.iv.next4174.epil = add nuw nsw i64 %indvars.iv4173.epil, 1
  %epil.iter5897.sub = add i64 %epil.iter5897, -1
  %epil.iter5897.cmp.not = icmp eq i64 %epil.iter5897.sub, 0
  br i1 %epil.iter5897.cmp.not, label %"end for input_wrapper.s0.c.c94.us.us", label %"for input_wrapper.s0.c.c93.us.us.epil", !llvm.loop !417

"end for input_wrapper.s0.c.c94.us.us":           ; preds = %"end for input_wrapper.s0.c.c94.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c93.us.us.epil", %"for input_wrapper.s0.x.rebased90.us.us"
  br label %"for input_wrapper.s0.c.c.rebased96.us.us"

"for input_wrapper.s0.c.c.rebased96.us.us":       ; preds = %after_bb99.us.us, %"end for input_wrapper.s0.c.c94.us.us"
  %indvars.iv4175 = phi i64 [ %indvars.iv.next4176, %after_bb99.us.us ], [ 0, %"end for input_wrapper.s0.c.c94.us.us" ]
  %2004 = add nsw i64 %indvars.iv4175, %1623
  %2005 = trunc i64 %2004 to i32
  %2006 = shl nsw i32 %2005, 4
  %2007 = add nsw i32 %2006, 16
  %.not2184.us.us = icmp sgt i32 %2007, %t3929
  br i1 %.not2184.us.us, label %next_bb101.us.us, label %then_bb100.us.us

then_bb100.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased96.us.us"
  %2008 = shl nsw i64 %2004, 4
  %2009 = add nsw i64 %2008, %1952
  %2010 = getelementptr inbounds i8, i8* %12, i64 %2009
  %2011 = bitcast i8* %2010 to <16 x i8>*
  %2012 = load <16 x i8>, <16 x i8>* %2011, align 4, !tbaa !397
  %2013 = zext <16 x i8> %2012 to <16 x i16>
  %2014 = sub nsw <16 x i16> %2013, %1563
  %2015 = add nsw i64 %2008, %1953
  %2016 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2015
  %2017 = bitcast i16* %2016 to <16 x i16>*
  store <16 x i16> %2014, <16 x i16>* %2017, align 8, !tbaa !399
  br label %after_bb99.us.us

next_bb101.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased96.us.us"
  %2018 = or i32 %2006, 1
  %2019 = insertelement <16 x i32> undef, i32 %2018, i32 0
  %2020 = shufflevector <16 x i32> %2019, <16 x i32> undef, <16 x i32> zeroinitializer
  %2021 = add nsw <16 x i32> %2020, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2022 = shufflevector <16 x i32> %2021, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2023 = icmp sgt <8 x i32> %2022, %1566
  %2024 = shufflevector <16 x i32> %2021, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2025 = icmp sgt <8 x i32> %2024, %1566
  %2026 = shufflevector <8 x i1> %2023, <8 x i1> %2025, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2027 = xor <16 x i1> %2026, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %2028 = shl nsw i64 %2004, 4
  %2029 = add nsw i64 %2028, %1952
  %2030 = getelementptr inbounds i8, i8* %12, i64 %2029
  %2031 = bitcast i8* %2030 to <16 x i8>*
  %2032 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %2031, i32 4, <16 x i1> %2027, <16 x i8> undef), !tbaa !397
  %2033 = zext <16 x i8> %2032 to <16 x i16>
  %2034 = sub nsw <16 x i16> %2033, %1563
  %2035 = add nsw i64 %2028, %1953
  %2036 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2035
  %2037 = bitcast i16* %2036 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %2034, <16 x i16>* %2037, i32 8, <16 x i1> %2027), !tbaa !399
  br label %after_bb99.us.us

after_bb99.us.us:                                 ; preds = %next_bb101.us.us, %then_bb100.us.us
  %indvars.iv.next4176 = add nuw nsw i64 %indvars.iv4175, 1
  %.not2185.us.us = icmp eq i64 %indvars.iv.next4176, %1624
  br i1 %.not2185.us.us, label %"end for input_wrapper.s0.c.c.rebased97.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased96.us.us"

"end for input_wrapper.s0.c.c.rebased97.loopexit.us.us": ; preds = %after_bb99.us.us
  %indvars.iv.next4178 = add nuw nsw i64 %indvars.iv4177, 1
  %.not2183.us.us = icmp eq i64 %indvars.iv4177, %1622
  br i1 %.not2183.us.us, label %"end for input_wrapper.s0.x.rebased91.loopexit.us", label %"for input_wrapper.s0.x.rebased90.us.us"

"for input_wrapper.s0.x.rebased90.us3202.us":     ; preds = %"for input_wrapper.s0.x.rebased90.preheader.split.us3218", %"end for input_wrapper.s0.c.c94.loopexit.us3213.us"
  %indvars.iv4170 = phi i64 [ %indvars.iv.next4171, %"end for input_wrapper.s0.c.c94.loopexit.us3213.us" ], [ 0, %"for input_wrapper.s0.x.rebased90.preheader.split.us3218" ]
  %2038 = trunc i64 %indvars.iv4170 to i32
  %reass.add2712.us3204.us = add i32 %t3931.us, %2038
  %reass.mul2713.us3205.us = mul i32 %reass.add2712.us3204.us, %1560
  %2039 = add nsw i64 %indvars.iv4170, %1620
  %2040 = mul nsw i64 %2039, %1621
  %2041 = add nsw i64 %1948, %2040
  %2042 = sext i32 %reass.mul2713.us3205.us to i64
  br i1 %1669, label %"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa", label %"for input_wrapper.s0.c.c93.us3207.us"

"for input_wrapper.s0.c.c93.us3207.us":           ; preds = %"for input_wrapper.s0.x.rebased90.us3202.us", %"for input_wrapper.s0.c.c93.us3207.us"
  %indvars.iv4168 = phi i64 [ %indvars.iv.next4169.3, %"for input_wrapper.s0.c.c93.us3207.us" ], [ 0, %"for input_wrapper.s0.x.rebased90.us3202.us" ]
  %niter5895 = phi i64 [ %niter5895.nsub.3, %"for input_wrapper.s0.c.c93.us3207.us" ], [ %unroll_iter5894, %"for input_wrapper.s0.x.rebased90.us3202.us" ]
  %2043 = shl nuw nsw i64 %indvars.iv4168, 4
  %2044 = add nsw i64 %2043, %2041
  %2045 = getelementptr inbounds i8, i8* %12, i64 %2044
  %2046 = bitcast i8* %2045 to <16 x i8>*
  %2047 = load <16 x i8>, <16 x i8>* %2046, align 4, !tbaa !397
  %2048 = zext <16 x i8> %2047 to <16 x i16>
  %2049 = sub nsw <16 x i16> %2048, %1563
  %2050 = add nsw i64 %2043, %2042
  %2051 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2050
  %2052 = bitcast i16* %2051 to <16 x i16>*
  store <16 x i16> %2049, <16 x i16>* %2052, align 8, !tbaa !399
  %indvars.iv.next4169 = shl i64 %indvars.iv4168, 4
  %2053 = or i64 %indvars.iv.next4169, 16
  %2054 = add nsw i64 %2053, %2041
  %2055 = getelementptr inbounds i8, i8* %12, i64 %2054
  %2056 = bitcast i8* %2055 to <16 x i8>*
  %2057 = load <16 x i8>, <16 x i8>* %2056, align 4, !tbaa !397
  %2058 = zext <16 x i8> %2057 to <16 x i16>
  %2059 = sub nsw <16 x i16> %2058, %1563
  %2060 = add nsw i64 %2053, %2042
  %2061 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2060
  %2062 = bitcast i16* %2061 to <16 x i16>*
  store <16 x i16> %2059, <16 x i16>* %2062, align 8, !tbaa !399
  %indvars.iv.next4169.1 = shl i64 %indvars.iv4168, 4
  %2063 = or i64 %indvars.iv.next4169.1, 32
  %2064 = add nsw i64 %2063, %2041
  %2065 = getelementptr inbounds i8, i8* %12, i64 %2064
  %2066 = bitcast i8* %2065 to <16 x i8>*
  %2067 = load <16 x i8>, <16 x i8>* %2066, align 4, !tbaa !397
  %2068 = zext <16 x i8> %2067 to <16 x i16>
  %2069 = sub nsw <16 x i16> %2068, %1563
  %2070 = add nsw i64 %2063, %2042
  %2071 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2070
  %2072 = bitcast i16* %2071 to <16 x i16>*
  store <16 x i16> %2069, <16 x i16>* %2072, align 8, !tbaa !399
  %indvars.iv.next4169.2 = shl i64 %indvars.iv4168, 4
  %2073 = or i64 %indvars.iv.next4169.2, 48
  %2074 = add nsw i64 %2073, %2041
  %2075 = getelementptr inbounds i8, i8* %12, i64 %2074
  %2076 = bitcast i8* %2075 to <16 x i8>*
  %2077 = load <16 x i8>, <16 x i8>* %2076, align 4, !tbaa !397
  %2078 = zext <16 x i8> %2077 to <16 x i16>
  %2079 = sub nsw <16 x i16> %2078, %1563
  %2080 = add nsw i64 %2073, %2042
  %2081 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2080
  %2082 = bitcast i16* %2081 to <16 x i16>*
  store <16 x i16> %2079, <16 x i16>* %2082, align 8, !tbaa !399
  %indvars.iv.next4169.3 = add nuw nsw i64 %indvars.iv4168, 4
  %niter5895.nsub.3 = add i64 %niter5895, -4
  %niter5895.ncmp.3 = icmp eq i64 %niter5895.nsub.3, 0
  br i1 %niter5895.ncmp.3, label %"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa", label %"for input_wrapper.s0.c.c93.us3207.us"

"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c93.us3207.us", %"for input_wrapper.s0.x.rebased90.us3202.us"
  %indvars.iv4168.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased90.us3202.us" ], [ %indvars.iv.next4169.3, %"for input_wrapper.s0.c.c93.us3207.us" ]
  br i1 %lcmp.mod5893.not, label %"end for input_wrapper.s0.c.c94.loopexit.us3213.us", label %"for input_wrapper.s0.c.c93.us3207.us.epil"

"for input_wrapper.s0.c.c93.us3207.us.epil":      ; preds = %"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa", %"for input_wrapper.s0.c.c93.us3207.us.epil"
  %indvars.iv4168.epil = phi i64 [ %indvars.iv.next4169.epil, %"for input_wrapper.s0.c.c93.us3207.us.epil" ], [ %indvars.iv4168.unr, %"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa" ]
  %epil.iter5892 = phi i64 [ %epil.iter5892.sub, %"for input_wrapper.s0.c.c93.us3207.us.epil" ], [ %xtraiter5891, %"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa" ]
  %2083 = shl nuw nsw i64 %indvars.iv4168.epil, 4
  %2084 = add nsw i64 %2083, %2041
  %2085 = getelementptr inbounds i8, i8* %12, i64 %2084
  %2086 = bitcast i8* %2085 to <16 x i8>*
  %2087 = load <16 x i8>, <16 x i8>* %2086, align 4, !tbaa !397
  %2088 = zext <16 x i8> %2087 to <16 x i16>
  %2089 = sub nsw <16 x i16> %2088, %1563
  %2090 = add nsw i64 %2083, %2042
  %2091 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2090
  %2092 = bitcast i16* %2091 to <16 x i16>*
  store <16 x i16> %2089, <16 x i16>* %2092, align 8, !tbaa !399
  %indvars.iv.next4169.epil = add nuw nsw i64 %indvars.iv4168.epil, 1
  %epil.iter5892.sub = add i64 %epil.iter5892, -1
  %epil.iter5892.cmp.not = icmp eq i64 %epil.iter5892.sub, 0
  br i1 %epil.iter5892.cmp.not, label %"end for input_wrapper.s0.c.c94.loopexit.us3213.us", label %"for input_wrapper.s0.c.c93.us3207.us.epil", !llvm.loop !418

"end for input_wrapper.s0.c.c94.loopexit.us3213.us": ; preds = %"for input_wrapper.s0.c.c93.us3207.us.epil", %"end for input_wrapper.s0.c.c94.loopexit.us3213.us.unr-lcssa"
  %indvars.iv.next4171 = add nuw nsw i64 %indvars.iv4170, 1
  %.not2183.us3211.us = icmp eq i64 %indvars.iv4170, %1622
  br i1 %.not2183.us3211.us, label %"end for input_wrapper.s0.x.rebased91.loopexit.us", label %"for input_wrapper.s0.x.rebased90.us3202.us"

next_bb86:                                        ; preds = %next_bb66
  br i1 %1509, label %next_bb103, label %then_bb102

then_bb102:                                       ; preds = %next_bb86
  br i1 %1648, label %"for input_wrapper.s0.y.rebased104", label %"consume input_wrapper139", !prof !387

next_bb103:                                       ; preds = %next_bb86
  br i1 %1510, label %next_bb120, label %then_bb119

"for input_wrapper.s0.y.rebased104":              ; preds = %then_bb102, %"end for input_wrapper.s0.x.rebased108"
  %indvars.iv4195 = phi i64 [ %indvars.iv.next4196, %"end for input_wrapper.s0.x.rebased108" ], [ 0, %then_bb102 ]
  %2093 = trunc i64 %indvars.iv4195 to i32
  %t3940 = mul i32 %1547, %2093
  %2094 = add nsw i64 %indvars.iv4195, %1690
  %2095 = mul nsw i64 %2094, %1625
  %2096 = add nsw i64 %2095, %1685
  br i1 %1556, label %"for input_wrapper.s0.x.rebased107.preheader", label %"end for input_wrapper.s0.x.rebased108", !prof !387

"for input_wrapper.s0.x.rebased107.preheader":    ; preds = %"for input_wrapper.s0.y.rebased104"
  br i1 %1570, label %"for input_wrapper.s0.x.rebased107.us", label %"for input_wrapper.s0.x.rebased107.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased107.us":           ; preds = %"for input_wrapper.s0.x.rebased107.preheader", %"end for input_wrapper.s0.c.c.rebased114.loopexit.us"
  %indvars.iv4192 = phi i64 [ %indvars.iv.next4193, %"end for input_wrapper.s0.c.c.rebased114.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased107.preheader" ]
  %2097 = trunc i64 %indvars.iv4192 to i32
  %reass.add2714.us = add i32 %t3940, %2097
  %reass.mul2715.us = mul i32 %reass.add2714.us, %1560
  %2098 = add nsw i64 %indvars.iv4192, %1620
  %2099 = mul nsw i64 %2098, %1621
  %2100 = add nsw i64 %2096, %2099
  %2101 = sext i32 %reass.mul2715.us to i64
  br i1 %1502, label %"for input_wrapper.s0.c.c110.us.preheader", label %"end for input_wrapper.s0.c.c111.us", !prof !387

"for input_wrapper.s0.c.c110.us.preheader":       ; preds = %"for input_wrapper.s0.x.rebased107.us"
  br i1 %1672, label %"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c110.us"

"for input_wrapper.s0.c.c110.us":                 ; preds = %"for input_wrapper.s0.c.c110.us.preheader", %"for input_wrapper.s0.c.c110.us"
  %indvars.iv4188 = phi i64 [ %indvars.iv.next4189.3, %"for input_wrapper.s0.c.c110.us" ], [ 0, %"for input_wrapper.s0.c.c110.us.preheader" ]
  %niter5910 = phi i64 [ %niter5910.nsub.3, %"for input_wrapper.s0.c.c110.us" ], [ %unroll_iter5909, %"for input_wrapper.s0.c.c110.us.preheader" ]
  %2102 = shl nuw nsw i64 %indvars.iv4188, 3
  %2103 = add nsw i64 %2102, %2100
  %2104 = getelementptr inbounds i8, i8* %12, i64 %2103
  %2105 = bitcast i8* %2104 to <8 x i8>*
  %2106 = load <8 x i8>, <8 x i8>* %2105, align 4, !tbaa !397
  %2107 = zext <8 x i8> %2106 to <8 x i16>
  %2108 = sub nsw <8 x i16> %2107, %1569
  %2109 = add nsw i64 %2102, %2101
  %2110 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2109
  %2111 = bitcast i16* %2110 to <8 x i16>*
  store <8 x i16> %2108, <8 x i16>* %2111, align 8, !tbaa !399
  %indvars.iv.next4189 = shl i64 %indvars.iv4188, 3
  %2112 = or i64 %indvars.iv.next4189, 8
  %2113 = add nsw i64 %2112, %2100
  %2114 = getelementptr inbounds i8, i8* %12, i64 %2113
  %2115 = bitcast i8* %2114 to <8 x i8>*
  %2116 = load <8 x i8>, <8 x i8>* %2115, align 4, !tbaa !397
  %2117 = zext <8 x i8> %2116 to <8 x i16>
  %2118 = sub nsw <8 x i16> %2117, %1569
  %2119 = add nsw i64 %2112, %2101
  %2120 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2119
  %2121 = bitcast i16* %2120 to <8 x i16>*
  store <8 x i16> %2118, <8 x i16>* %2121, align 8, !tbaa !399
  %indvars.iv.next4189.1 = shl i64 %indvars.iv4188, 3
  %2122 = or i64 %indvars.iv.next4189.1, 16
  %2123 = add nsw i64 %2122, %2100
  %2124 = getelementptr inbounds i8, i8* %12, i64 %2123
  %2125 = bitcast i8* %2124 to <8 x i8>*
  %2126 = load <8 x i8>, <8 x i8>* %2125, align 4, !tbaa !397
  %2127 = zext <8 x i8> %2126 to <8 x i16>
  %2128 = sub nsw <8 x i16> %2127, %1569
  %2129 = add nsw i64 %2122, %2101
  %2130 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2129
  %2131 = bitcast i16* %2130 to <8 x i16>*
  store <8 x i16> %2128, <8 x i16>* %2131, align 8, !tbaa !399
  %indvars.iv.next4189.2 = shl i64 %indvars.iv4188, 3
  %2132 = or i64 %indvars.iv.next4189.2, 24
  %2133 = add nsw i64 %2132, %2100
  %2134 = getelementptr inbounds i8, i8* %12, i64 %2133
  %2135 = bitcast i8* %2134 to <8 x i8>*
  %2136 = load <8 x i8>, <8 x i8>* %2135, align 4, !tbaa !397
  %2137 = zext <8 x i8> %2136 to <8 x i16>
  %2138 = sub nsw <8 x i16> %2137, %1569
  %2139 = add nsw i64 %2132, %2101
  %2140 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2139
  %2141 = bitcast i16* %2140 to <8 x i16>*
  store <8 x i16> %2138, <8 x i16>* %2141, align 8, !tbaa !399
  %indvars.iv.next4189.3 = add nuw nsw i64 %indvars.iv4188, 4
  %niter5910.nsub.3 = add i64 %niter5910, -4
  %niter5910.ncmp.3 = icmp eq i64 %niter5910.nsub.3, 0
  br i1 %niter5910.ncmp.3, label %"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c110.us"

"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c110.us", %"for input_wrapper.s0.c.c110.us.preheader"
  %indvars.iv4188.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c110.us.preheader" ], [ %indvars.iv.next4189.3, %"for input_wrapper.s0.c.c110.us" ]
  br i1 %lcmp.mod5908.not, label %"end for input_wrapper.s0.c.c111.us", label %"for input_wrapper.s0.c.c110.us.epil"

"for input_wrapper.s0.c.c110.us.epil":            ; preds = %"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c110.us.epil"
  %indvars.iv4188.epil = phi i64 [ %indvars.iv.next4189.epil, %"for input_wrapper.s0.c.c110.us.epil" ], [ %indvars.iv4188.unr, %"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa" ]
  %epil.iter5907 = phi i64 [ %epil.iter5907.sub, %"for input_wrapper.s0.c.c110.us.epil" ], [ %xtraiter5906, %"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa" ]
  %2142 = shl nuw nsw i64 %indvars.iv4188.epil, 3
  %2143 = add nsw i64 %2142, %2100
  %2144 = getelementptr inbounds i8, i8* %12, i64 %2143
  %2145 = bitcast i8* %2144 to <8 x i8>*
  %2146 = load <8 x i8>, <8 x i8>* %2145, align 4, !tbaa !397
  %2147 = zext <8 x i8> %2146 to <8 x i16>
  %2148 = sub nsw <8 x i16> %2147, %1569
  %2149 = add nsw i64 %2142, %2101
  %2150 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2149
  %2151 = bitcast i16* %2150 to <8 x i16>*
  store <8 x i16> %2148, <8 x i16>* %2151, align 8, !tbaa !399
  %indvars.iv.next4189.epil = add nuw nsw i64 %indvars.iv4188.epil, 1
  %epil.iter5907.sub = add i64 %epil.iter5907, -1
  %epil.iter5907.cmp.not = icmp eq i64 %epil.iter5907.sub, 0
  br i1 %epil.iter5907.cmp.not, label %"end for input_wrapper.s0.c.c111.us", label %"for input_wrapper.s0.c.c110.us.epil", !llvm.loop !419

"end for input_wrapper.s0.c.c111.us":             ; preds = %"end for input_wrapper.s0.c.c111.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c110.us.epil", %"for input_wrapper.s0.x.rebased107.us"
  br label %"for input_wrapper.s0.c.c.rebased113.us"

"for input_wrapper.s0.c.c.rebased113.us":         ; preds = %"end for input_wrapper.s0.c.c111.us", %after_bb116.us
  %indvars.iv4190 = phi i64 [ 0, %"end for input_wrapper.s0.c.c111.us" ], [ %indvars.iv.next4191, %after_bb116.us ]
  %2152 = add nsw i64 %indvars.iv4190, %1627
  %2153 = trunc i64 %2152 to i32
  %2154 = shl nsw i32 %2153, 3
  %2155 = add nsw i32 %2154, 8
  %.not2179.us = icmp sgt i32 %2155, %t3929
  br i1 %.not2179.us, label %next_bb118.us, label %then_bb117.us

then_bb117.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased113.us"
  %2156 = shl nsw i64 %2152, 3
  %2157 = add nsw i64 %2156, %2100
  %2158 = getelementptr inbounds i8, i8* %12, i64 %2157
  %2159 = bitcast i8* %2158 to <8 x i8>*
  %2160 = load <8 x i8>, <8 x i8>* %2159, align 4, !tbaa !397
  %2161 = zext <8 x i8> %2160 to <8 x i16>
  %2162 = sub nsw <8 x i16> %2161, %1569
  %2163 = add nsw i64 %2156, %2101
  %2164 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2163
  %2165 = bitcast i16* %2164 to <8 x i16>*
  store <8 x i16> %2162, <8 x i16>* %2165, align 8, !tbaa !399
  br label %after_bb116.us

next_bb118.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased113.us"
  %2166 = or i32 %2154, 1
  %2167 = insertelement <8 x i32> undef, i32 %2166, i32 0
  %2168 = shufflevector <8 x i32> %2167, <8 x i32> undef, <8 x i32> zeroinitializer
  %2169 = add nsw <8 x i32> %2168, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2170 = icmp sle <8 x i32> %2169, %1572
  %2171 = shl nsw i64 %2152, 3
  %2172 = add nsw i64 %2171, %2100
  %2173 = getelementptr inbounds i8, i8* %12, i64 %2172
  %2174 = bitcast i8* %2173 to <8 x i8>*
  %2175 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %2174, i32 4, <8 x i1> %2170, <8 x i8> undef), !tbaa !397
  %2176 = zext <8 x i8> %2175 to <8 x i16>
  %2177 = sub nsw <8 x i16> %2176, %1569
  %2178 = add nsw i64 %2171, %2101
  %2179 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2178
  %2180 = bitcast i16* %2179 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %2177, <8 x i16>* %2180, i32 8, <8 x i1> %2170), !tbaa !399
  br label %after_bb116.us

after_bb116.us:                                   ; preds = %next_bb118.us, %then_bb117.us
  %indvars.iv.next4191 = add nuw nsw i64 %indvars.iv4190, 1
  %.not2180.us = icmp eq i64 %indvars.iv.next4191, %1628
  br i1 %.not2180.us, label %"end for input_wrapper.s0.c.c.rebased114.loopexit.us", label %"for input_wrapper.s0.c.c.rebased113.us"

"end for input_wrapper.s0.c.c.rebased114.loopexit.us": ; preds = %after_bb116.us
  %indvars.iv.next4193 = add nuw nsw i64 %indvars.iv4192, 1
  %.not2178.us = icmp eq i64 %indvars.iv4192, %1622
  br i1 %.not2178.us, label %"end for input_wrapper.s0.x.rebased108", label %"for input_wrapper.s0.x.rebased107.us"

"for input_wrapper.s0.x.rebased107.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased107.preheader"
  br i1 %1502, label %"for input_wrapper.s0.x.rebased107.us3221", label %"end for input_wrapper.s0.x.rebased108", !prof !387

"for input_wrapper.s0.x.rebased107.us3221":       ; preds = %"for input_wrapper.s0.x.rebased107.preheader.split", %"end for input_wrapper.s0.c.c111.loopexit.us3232"
  %indvars.iv4185 = phi i64 [ %indvars.iv.next4186, %"end for input_wrapper.s0.c.c111.loopexit.us3232" ], [ 0, %"for input_wrapper.s0.x.rebased107.preheader.split" ]
  %2181 = trunc i64 %indvars.iv4185 to i32
  %reass.add2714.us3223 = add i32 %t3940, %2181
  %reass.mul2715.us3224 = mul i32 %reass.add2714.us3223, %1560
  %2182 = add nsw i64 %indvars.iv4185, %1620
  %2183 = mul nsw i64 %2182, %1621
  %2184 = add nsw i64 %2096, %2183
  %2185 = sext i32 %reass.mul2715.us3224 to i64
  br i1 %1671, label %"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa", label %"for input_wrapper.s0.c.c110.us3226"

"for input_wrapper.s0.c.c110.us3226":             ; preds = %"for input_wrapper.s0.x.rebased107.us3221", %"for input_wrapper.s0.c.c110.us3226"
  %indvars.iv4183 = phi i64 [ %indvars.iv.next4184.3, %"for input_wrapper.s0.c.c110.us3226" ], [ 0, %"for input_wrapper.s0.x.rebased107.us3221" ]
  %niter5905 = phi i64 [ %niter5905.nsub.3, %"for input_wrapper.s0.c.c110.us3226" ], [ %unroll_iter5904, %"for input_wrapper.s0.x.rebased107.us3221" ]
  %2186 = shl nuw nsw i64 %indvars.iv4183, 3
  %2187 = add nsw i64 %2186, %2184
  %2188 = getelementptr inbounds i8, i8* %12, i64 %2187
  %2189 = bitcast i8* %2188 to <8 x i8>*
  %2190 = load <8 x i8>, <8 x i8>* %2189, align 4, !tbaa !397
  %2191 = zext <8 x i8> %2190 to <8 x i16>
  %2192 = sub nsw <8 x i16> %2191, %1569
  %2193 = add nsw i64 %2186, %2185
  %2194 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2193
  %2195 = bitcast i16* %2194 to <8 x i16>*
  store <8 x i16> %2192, <8 x i16>* %2195, align 8, !tbaa !399
  %indvars.iv.next4184 = shl i64 %indvars.iv4183, 3
  %2196 = or i64 %indvars.iv.next4184, 8
  %2197 = add nsw i64 %2196, %2184
  %2198 = getelementptr inbounds i8, i8* %12, i64 %2197
  %2199 = bitcast i8* %2198 to <8 x i8>*
  %2200 = load <8 x i8>, <8 x i8>* %2199, align 4, !tbaa !397
  %2201 = zext <8 x i8> %2200 to <8 x i16>
  %2202 = sub nsw <8 x i16> %2201, %1569
  %2203 = add nsw i64 %2196, %2185
  %2204 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2203
  %2205 = bitcast i16* %2204 to <8 x i16>*
  store <8 x i16> %2202, <8 x i16>* %2205, align 8, !tbaa !399
  %indvars.iv.next4184.1 = shl i64 %indvars.iv4183, 3
  %2206 = or i64 %indvars.iv.next4184.1, 16
  %2207 = add nsw i64 %2206, %2184
  %2208 = getelementptr inbounds i8, i8* %12, i64 %2207
  %2209 = bitcast i8* %2208 to <8 x i8>*
  %2210 = load <8 x i8>, <8 x i8>* %2209, align 4, !tbaa !397
  %2211 = zext <8 x i8> %2210 to <8 x i16>
  %2212 = sub nsw <8 x i16> %2211, %1569
  %2213 = add nsw i64 %2206, %2185
  %2214 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2213
  %2215 = bitcast i16* %2214 to <8 x i16>*
  store <8 x i16> %2212, <8 x i16>* %2215, align 8, !tbaa !399
  %indvars.iv.next4184.2 = shl i64 %indvars.iv4183, 3
  %2216 = or i64 %indvars.iv.next4184.2, 24
  %2217 = add nsw i64 %2216, %2184
  %2218 = getelementptr inbounds i8, i8* %12, i64 %2217
  %2219 = bitcast i8* %2218 to <8 x i8>*
  %2220 = load <8 x i8>, <8 x i8>* %2219, align 4, !tbaa !397
  %2221 = zext <8 x i8> %2220 to <8 x i16>
  %2222 = sub nsw <8 x i16> %2221, %1569
  %2223 = add nsw i64 %2216, %2185
  %2224 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2223
  %2225 = bitcast i16* %2224 to <8 x i16>*
  store <8 x i16> %2222, <8 x i16>* %2225, align 8, !tbaa !399
  %indvars.iv.next4184.3 = add nuw nsw i64 %indvars.iv4183, 4
  %niter5905.nsub.3 = add i64 %niter5905, -4
  %niter5905.ncmp.3 = icmp eq i64 %niter5905.nsub.3, 0
  br i1 %niter5905.ncmp.3, label %"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa", label %"for input_wrapper.s0.c.c110.us3226"

"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c110.us3226", %"for input_wrapper.s0.x.rebased107.us3221"
  %indvars.iv4183.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased107.us3221" ], [ %indvars.iv.next4184.3, %"for input_wrapper.s0.c.c110.us3226" ]
  br i1 %lcmp.mod5903.not, label %"end for input_wrapper.s0.c.c111.loopexit.us3232", label %"for input_wrapper.s0.c.c110.us3226.epil"

"for input_wrapper.s0.c.c110.us3226.epil":        ; preds = %"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa", %"for input_wrapper.s0.c.c110.us3226.epil"
  %indvars.iv4183.epil = phi i64 [ %indvars.iv.next4184.epil, %"for input_wrapper.s0.c.c110.us3226.epil" ], [ %indvars.iv4183.unr, %"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa" ]
  %epil.iter5902 = phi i64 [ %epil.iter5902.sub, %"for input_wrapper.s0.c.c110.us3226.epil" ], [ %xtraiter5901, %"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa" ]
  %2226 = shl nuw nsw i64 %indvars.iv4183.epil, 3
  %2227 = add nsw i64 %2226, %2184
  %2228 = getelementptr inbounds i8, i8* %12, i64 %2227
  %2229 = bitcast i8* %2228 to <8 x i8>*
  %2230 = load <8 x i8>, <8 x i8>* %2229, align 4, !tbaa !397
  %2231 = zext <8 x i8> %2230 to <8 x i16>
  %2232 = sub nsw <8 x i16> %2231, %1569
  %2233 = add nsw i64 %2226, %2185
  %2234 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2233
  %2235 = bitcast i16* %2234 to <8 x i16>*
  store <8 x i16> %2232, <8 x i16>* %2235, align 8, !tbaa !399
  %indvars.iv.next4184.epil = add nuw nsw i64 %indvars.iv4183.epil, 1
  %epil.iter5902.sub = add i64 %epil.iter5902, -1
  %epil.iter5902.cmp.not = icmp eq i64 %epil.iter5902.sub, 0
  br i1 %epil.iter5902.cmp.not, label %"end for input_wrapper.s0.c.c111.loopexit.us3232", label %"for input_wrapper.s0.c.c110.us3226.epil", !llvm.loop !420

"end for input_wrapper.s0.c.c111.loopexit.us3232": ; preds = %"for input_wrapper.s0.c.c110.us3226.epil", %"end for input_wrapper.s0.c.c111.loopexit.us3232.unr-lcssa"
  %indvars.iv.next4186 = add nuw nsw i64 %indvars.iv4185, 1
  %.not2178.us3230 = icmp eq i64 %indvars.iv4185, %1622
  br i1 %.not2178.us3230, label %"end for input_wrapper.s0.x.rebased108", label %"for input_wrapper.s0.x.rebased107.us3221"

"end for input_wrapper.s0.x.rebased108":          ; preds = %"end for input_wrapper.s0.c.c111.loopexit.us3232", %"end for input_wrapper.s0.c.c.rebased114.loopexit.us", %"for input_wrapper.s0.x.rebased107.preheader.split", %"for input_wrapper.s0.y.rebased104"
  %indvars.iv.next4196 = add nuw nsw i64 %indvars.iv4195, 1
  %.not2177 = icmp eq i64 %indvars.iv4195, %1653
  br i1 %.not2177, label %"consume input_wrapper139", label %"for input_wrapper.s0.y.rebased104"

then_bb119:                                       ; preds = %next_bb103
  br i1 %1648, label %"for input_wrapper.s0.y.rebased121", label %"consume input_wrapper139", !prof !387

next_bb120:                                       ; preds = %next_bb103
  br i1 %1648, label %"for input_wrapper.s0.y.rebased130", label %"consume input_wrapper139", !prof !387

"for input_wrapper.s0.y.rebased121":              ; preds = %then_bb119, %"end for input_wrapper.s0.x.rebased125"
  %indvars.iv4203 = phi i64 [ %indvars.iv.next4204, %"end for input_wrapper.s0.x.rebased125" ], [ 0, %then_bb119 ]
  %2236 = trunc i64 %indvars.iv4203 to i32
  %t3948 = mul i32 %1547, %2236
  %2237 = add nsw i64 %indvars.iv4203, %1690
  %2238 = mul nsw i64 %2237, %1625
  %2239 = add nsw i64 %2238, %1685
  br i1 %brmerge4993.demorgan, label %"for input_wrapper.s0.x.rebased124.us", label %"end for input_wrapper.s0.x.rebased125", !prof !407

"for input_wrapper.s0.x.rebased124.us":           ; preds = %"for input_wrapper.s0.y.rebased121", %"end for input_wrapper.s0.c.c128.loopexit.us"
  %indvars.iv4200 = phi i64 [ %indvars.iv.next4201, %"end for input_wrapper.s0.c.c128.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased121" ]
  %2240 = trunc i64 %indvars.iv4200 to i32
  %reass.add2716.us = add i32 %t3948, %2240
  %reass.mul2717.us = mul i32 %reass.add2716.us, %1560
  %2241 = add nsw i64 %indvars.iv4200, %1620
  %2242 = mul nsw i64 %2241, %1621
  %2243 = add nsw i64 %2239, %2242
  %2244 = sext i32 %reass.mul2717.us to i64
  br i1 %1673, label %"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c127.us"

"for input_wrapper.s0.c.c127.us":                 ; preds = %"for input_wrapper.s0.x.rebased124.us", %"for input_wrapper.s0.c.c127.us"
  %indvars.iv4198 = phi i64 [ %indvars.iv.next4199.3, %"for input_wrapper.s0.c.c127.us" ], [ 0, %"for input_wrapper.s0.x.rebased124.us" ]
  %niter5915 = phi i64 [ %niter5915.nsub.3, %"for input_wrapper.s0.c.c127.us" ], [ %unroll_iter5914, %"for input_wrapper.s0.x.rebased124.us" ]
  %2245 = shl nuw nsw i64 %indvars.iv4198, 2
  %2246 = add nsw i64 %2245, %2243
  %2247 = getelementptr inbounds i8, i8* %12, i64 %2246
  %2248 = bitcast i8* %2247 to <4 x i8>*
  %2249 = load <4 x i8>, <4 x i8>* %2248, align 4, !tbaa !397
  %2250 = zext <4 x i8> %2249 to <4 x i16>
  %2251 = sub nsw <4 x i16> %2250, %1575
  %2252 = add nsw i64 %2245, %2244
  %2253 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2252
  %2254 = bitcast i16* %2253 to <4 x i16>*
  store <4 x i16> %2251, <4 x i16>* %2254, align 8, !tbaa !399
  %indvars.iv.next4199 = shl i64 %indvars.iv4198, 2
  %2255 = or i64 %indvars.iv.next4199, 4
  %2256 = add nsw i64 %2255, %2243
  %2257 = getelementptr inbounds i8, i8* %12, i64 %2256
  %2258 = bitcast i8* %2257 to <4 x i8>*
  %2259 = load <4 x i8>, <4 x i8>* %2258, align 4, !tbaa !397
  %2260 = zext <4 x i8> %2259 to <4 x i16>
  %2261 = sub nsw <4 x i16> %2260, %1575
  %2262 = add nsw i64 %2255, %2244
  %2263 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2262
  %2264 = bitcast i16* %2263 to <4 x i16>*
  store <4 x i16> %2261, <4 x i16>* %2264, align 8, !tbaa !399
  %indvars.iv.next4199.1 = shl i64 %indvars.iv4198, 2
  %2265 = or i64 %indvars.iv.next4199.1, 8
  %2266 = add nsw i64 %2265, %2243
  %2267 = getelementptr inbounds i8, i8* %12, i64 %2266
  %2268 = bitcast i8* %2267 to <4 x i8>*
  %2269 = load <4 x i8>, <4 x i8>* %2268, align 4, !tbaa !397
  %2270 = zext <4 x i8> %2269 to <4 x i16>
  %2271 = sub nsw <4 x i16> %2270, %1575
  %2272 = add nsw i64 %2265, %2244
  %2273 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2272
  %2274 = bitcast i16* %2273 to <4 x i16>*
  store <4 x i16> %2271, <4 x i16>* %2274, align 8, !tbaa !399
  %indvars.iv.next4199.2 = shl i64 %indvars.iv4198, 2
  %2275 = or i64 %indvars.iv.next4199.2, 12
  %2276 = add nsw i64 %2275, %2243
  %2277 = getelementptr inbounds i8, i8* %12, i64 %2276
  %2278 = bitcast i8* %2277 to <4 x i8>*
  %2279 = load <4 x i8>, <4 x i8>* %2278, align 4, !tbaa !397
  %2280 = zext <4 x i8> %2279 to <4 x i16>
  %2281 = sub nsw <4 x i16> %2280, %1575
  %2282 = add nsw i64 %2275, %2244
  %2283 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2282
  %2284 = bitcast i16* %2283 to <4 x i16>*
  store <4 x i16> %2281, <4 x i16>* %2284, align 8, !tbaa !399
  %indvars.iv.next4199.3 = add nuw nsw i64 %indvars.iv4198, 4
  %niter5915.nsub.3 = add i64 %niter5915, -4
  %niter5915.ncmp.3 = icmp eq i64 %niter5915.nsub.3, 0
  br i1 %niter5915.ncmp.3, label %"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c127.us"

"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c127.us", %"for input_wrapper.s0.x.rebased124.us"
  %indvars.iv4198.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased124.us" ], [ %indvars.iv.next4199.3, %"for input_wrapper.s0.c.c127.us" ]
  br i1 %lcmp.mod5913.not, label %"end for input_wrapper.s0.c.c128.loopexit.us", label %"for input_wrapper.s0.c.c127.us.epil"

"for input_wrapper.s0.c.c127.us.epil":            ; preds = %"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c127.us.epil"
  %indvars.iv4198.epil = phi i64 [ %indvars.iv.next4199.epil, %"for input_wrapper.s0.c.c127.us.epil" ], [ %indvars.iv4198.unr, %"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa" ]
  %epil.iter5912 = phi i64 [ %epil.iter5912.sub, %"for input_wrapper.s0.c.c127.us.epil" ], [ %xtraiter5911, %"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa" ]
  %2285 = shl nuw nsw i64 %indvars.iv4198.epil, 2
  %2286 = add nsw i64 %2285, %2243
  %2287 = getelementptr inbounds i8, i8* %12, i64 %2286
  %2288 = bitcast i8* %2287 to <4 x i8>*
  %2289 = load <4 x i8>, <4 x i8>* %2288, align 4, !tbaa !397
  %2290 = zext <4 x i8> %2289 to <4 x i16>
  %2291 = sub nsw <4 x i16> %2290, %1575
  %2292 = add nsw i64 %2285, %2244
  %2293 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2292
  %2294 = bitcast i16* %2293 to <4 x i16>*
  store <4 x i16> %2291, <4 x i16>* %2294, align 8, !tbaa !399
  %indvars.iv.next4199.epil = add nuw nsw i64 %indvars.iv4198.epil, 1
  %epil.iter5912.sub = add i64 %epil.iter5912, -1
  %epil.iter5912.cmp.not = icmp eq i64 %epil.iter5912.sub, 0
  br i1 %epil.iter5912.cmp.not, label %"end for input_wrapper.s0.c.c128.loopexit.us", label %"for input_wrapper.s0.c.c127.us.epil", !llvm.loop !421

"end for input_wrapper.s0.c.c128.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c127.us.epil", %"end for input_wrapper.s0.c.c128.loopexit.us.unr-lcssa"
  %indvars.iv.next4201 = add nuw nsw i64 %indvars.iv4200, 1
  %.not2175.us = icmp eq i64 %indvars.iv4200, %1622
  br i1 %.not2175.us, label %"end for input_wrapper.s0.x.rebased125", label %"for input_wrapper.s0.x.rebased124.us"

"end for input_wrapper.s0.x.rebased125":          ; preds = %"end for input_wrapper.s0.c.c128.loopexit.us", %"for input_wrapper.s0.y.rebased121"
  %indvars.iv.next4204 = add nuw nsw i64 %indvars.iv4203, 1
  %.not2174 = icmp eq i64 %indvars.iv4203, %1654
  br i1 %.not2174, label %"consume input_wrapper139", label %"for input_wrapper.s0.y.rebased121"

"for input_wrapper.s0.y.rebased130":              ; preds = %next_bb120, %"end for input_wrapper.s0.x.rebased134"
  %indvars.iv4211 = phi i64 [ %indvars.iv.next4212, %"end for input_wrapper.s0.x.rebased134" ], [ 0, %next_bb120 ]
  %2295 = trunc i64 %indvars.iv4211 to i32
  %t3955 = mul i32 %1547, %2295
  %2296 = add nsw i64 %indvars.iv4211, %1690
  %2297 = mul nsw i64 %2296, %1625
  %2298 = add nsw i64 %2297, %1685
  br i1 %brmerge4996.demorgan, label %iter.check5341, label %"end for input_wrapper.s0.x.rebased134", !prof !407

iter.check5341:                                   ; preds = %"for input_wrapper.s0.y.rebased130", %"end for input_wrapper.s0.c137.loopexit.us"
  %indvars.iv4208 = phi i64 [ %indvars.iv.next4209, %"end for input_wrapper.s0.c137.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased130" ]
  %2299 = trunc i64 %indvars.iv4208 to i32
  %reass.add2718.us = add i32 %t3955, %2299
  %reass.mul2719.us = mul i32 %reass.add2718.us, %1560
  %2300 = add nsw i64 %indvars.iv4208, %1620
  %2301 = mul nsw i64 %2300, %1621
  %2302 = add nsw i64 %2298, %2301
  %2303 = sext i32 %reass.mul2719.us to i64
  br i1 %min.iters.check5339, label %"for input_wrapper.s0.c136.us.preheader", label %vector.main.loop.iter.check5343

vector.main.loop.iter.check5343:                  ; preds = %iter.check5341
  br i1 %min.iters.check5342, label %vec.epilog.ph5366, label %vector.ph5344

vector.ph5344:                                    ; preds = %vector.main.loop.iter.check5343
  br i1 %1674, label %middle.block5336.unr-lcssa, label %vector.body5338

vector.body5338:                                  ; preds = %vector.ph5344, %vector.body5338
  %index5347 = phi i64 [ %index.next5348.1, %vector.body5338 ], [ 0, %vector.ph5344 ]
  %niter5919 = phi i64 [ %niter5919.nsub.1, %vector.body5338 ], [ %unroll_iter5918, %vector.ph5344 ]
  %2304 = add nsw i64 %index5347, %2302
  %2305 = getelementptr inbounds i8, i8* %12, i64 %2304
  %2306 = bitcast i8* %2305 to <16 x i8>*
  %wide.load5350 = load <16 x i8>, <16 x i8>* %2306, align 1, !tbaa !397
  %2307 = getelementptr inbounds i8, i8* %2305, i64 16
  %2308 = bitcast i8* %2307 to <16 x i8>*
  %wide.load5351 = load <16 x i8>, <16 x i8>* %2308, align 1, !tbaa !397
  %2309 = getelementptr inbounds i8, i8* %2305, i64 32
  %2310 = bitcast i8* %2309 to <16 x i8>*
  %wide.load5352 = load <16 x i8>, <16 x i8>* %2310, align 1, !tbaa !397
  %2311 = getelementptr inbounds i8, i8* %2305, i64 48
  %2312 = bitcast i8* %2311 to <16 x i8>*
  %wide.load5353 = load <16 x i8>, <16 x i8>* %2312, align 1, !tbaa !397
  %2313 = zext <16 x i8> %wide.load5350 to <16 x i16>
  %2314 = zext <16 x i8> %wide.load5351 to <16 x i16>
  %2315 = zext <16 x i8> %wide.load5352 to <16 x i16>
  %2316 = zext <16 x i8> %wide.load5353 to <16 x i16>
  %2317 = sub nsw <16 x i16> %2313, %broadcast.splat5355
  %2318 = sub nsw <16 x i16> %2314, %broadcast.splat5357
  %2319 = sub nsw <16 x i16> %2315, %broadcast.splat5359
  %2320 = sub nsw <16 x i16> %2316, %broadcast.splat5361
  %2321 = add nsw i64 %index5347, %2303
  %2322 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2321
  %2323 = bitcast i16* %2322 to <16 x i16>*
  store <16 x i16> %2317, <16 x i16>* %2323, align 2, !tbaa !399
  %2324 = getelementptr inbounds i16, i16* %2322, i64 16
  %2325 = bitcast i16* %2324 to <16 x i16>*
  store <16 x i16> %2318, <16 x i16>* %2325, align 2, !tbaa !399
  %2326 = getelementptr inbounds i16, i16* %2322, i64 32
  %2327 = bitcast i16* %2326 to <16 x i16>*
  store <16 x i16> %2319, <16 x i16>* %2327, align 2, !tbaa !399
  %2328 = getelementptr inbounds i16, i16* %2322, i64 48
  %2329 = bitcast i16* %2328 to <16 x i16>*
  store <16 x i16> %2320, <16 x i16>* %2329, align 2, !tbaa !399
  %index.next5348 = or i64 %index5347, 64
  %2330 = add nsw i64 %index.next5348, %2302
  %2331 = getelementptr inbounds i8, i8* %12, i64 %2330
  %2332 = bitcast i8* %2331 to <16 x i8>*
  %wide.load5350.1 = load <16 x i8>, <16 x i8>* %2332, align 1, !tbaa !397
  %2333 = getelementptr inbounds i8, i8* %2331, i64 16
  %2334 = bitcast i8* %2333 to <16 x i8>*
  %wide.load5351.1 = load <16 x i8>, <16 x i8>* %2334, align 1, !tbaa !397
  %2335 = getelementptr inbounds i8, i8* %2331, i64 32
  %2336 = bitcast i8* %2335 to <16 x i8>*
  %wide.load5352.1 = load <16 x i8>, <16 x i8>* %2336, align 1, !tbaa !397
  %2337 = getelementptr inbounds i8, i8* %2331, i64 48
  %2338 = bitcast i8* %2337 to <16 x i8>*
  %wide.load5353.1 = load <16 x i8>, <16 x i8>* %2338, align 1, !tbaa !397
  %2339 = zext <16 x i8> %wide.load5350.1 to <16 x i16>
  %2340 = zext <16 x i8> %wide.load5351.1 to <16 x i16>
  %2341 = zext <16 x i8> %wide.load5352.1 to <16 x i16>
  %2342 = zext <16 x i8> %wide.load5353.1 to <16 x i16>
  %2343 = sub nsw <16 x i16> %2339, %broadcast.splat5355
  %2344 = sub nsw <16 x i16> %2340, %broadcast.splat5357
  %2345 = sub nsw <16 x i16> %2341, %broadcast.splat5359
  %2346 = sub nsw <16 x i16> %2342, %broadcast.splat5361
  %2347 = add nsw i64 %index.next5348, %2303
  %2348 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2347
  %2349 = bitcast i16* %2348 to <16 x i16>*
  store <16 x i16> %2343, <16 x i16>* %2349, align 2, !tbaa !399
  %2350 = getelementptr inbounds i16, i16* %2348, i64 16
  %2351 = bitcast i16* %2350 to <16 x i16>*
  store <16 x i16> %2344, <16 x i16>* %2351, align 2, !tbaa !399
  %2352 = getelementptr inbounds i16, i16* %2348, i64 32
  %2353 = bitcast i16* %2352 to <16 x i16>*
  store <16 x i16> %2345, <16 x i16>* %2353, align 2, !tbaa !399
  %2354 = getelementptr inbounds i16, i16* %2348, i64 48
  %2355 = bitcast i16* %2354 to <16 x i16>*
  store <16 x i16> %2346, <16 x i16>* %2355, align 2, !tbaa !399
  %index.next5348.1 = add i64 %index5347, 128
  %niter5919.nsub.1 = add i64 %niter5919, -2
  %niter5919.ncmp.1 = icmp eq i64 %niter5919.nsub.1, 0
  br i1 %niter5919.ncmp.1, label %middle.block5336.unr-lcssa, label %vector.body5338, !llvm.loop !422

middle.block5336.unr-lcssa:                       ; preds = %vector.body5338, %vector.ph5344
  %index5347.unr = phi i64 [ 0, %vector.ph5344 ], [ %index.next5348.1, %vector.body5338 ]
  br i1 %lcmp.mod5917.not, label %middle.block5336, label %vector.body5338.epil

vector.body5338.epil:                             ; preds = %middle.block5336.unr-lcssa
  %2356 = add nsw i64 %index5347.unr, %2302
  %2357 = getelementptr inbounds i8, i8* %12, i64 %2356
  %2358 = bitcast i8* %2357 to <16 x i8>*
  %wide.load5350.epil = load <16 x i8>, <16 x i8>* %2358, align 1, !tbaa !397
  %2359 = getelementptr inbounds i8, i8* %2357, i64 16
  %2360 = bitcast i8* %2359 to <16 x i8>*
  %wide.load5351.epil = load <16 x i8>, <16 x i8>* %2360, align 1, !tbaa !397
  %2361 = getelementptr inbounds i8, i8* %2357, i64 32
  %2362 = bitcast i8* %2361 to <16 x i8>*
  %wide.load5352.epil = load <16 x i8>, <16 x i8>* %2362, align 1, !tbaa !397
  %2363 = getelementptr inbounds i8, i8* %2357, i64 48
  %2364 = bitcast i8* %2363 to <16 x i8>*
  %wide.load5353.epil = load <16 x i8>, <16 x i8>* %2364, align 1, !tbaa !397
  %2365 = zext <16 x i8> %wide.load5350.epil to <16 x i16>
  %2366 = zext <16 x i8> %wide.load5351.epil to <16 x i16>
  %2367 = zext <16 x i8> %wide.load5352.epil to <16 x i16>
  %2368 = zext <16 x i8> %wide.load5353.epil to <16 x i16>
  %2369 = sub nsw <16 x i16> %2365, %broadcast.splat5355
  %2370 = sub nsw <16 x i16> %2366, %broadcast.splat5357
  %2371 = sub nsw <16 x i16> %2367, %broadcast.splat5359
  %2372 = sub nsw <16 x i16> %2368, %broadcast.splat5361
  %2373 = add nsw i64 %index5347.unr, %2303
  %2374 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2373
  %2375 = bitcast i16* %2374 to <16 x i16>*
  store <16 x i16> %2369, <16 x i16>* %2375, align 2, !tbaa !399
  %2376 = getelementptr inbounds i16, i16* %2374, i64 16
  %2377 = bitcast i16* %2376 to <16 x i16>*
  store <16 x i16> %2370, <16 x i16>* %2377, align 2, !tbaa !399
  %2378 = getelementptr inbounds i16, i16* %2374, i64 32
  %2379 = bitcast i16* %2378 to <16 x i16>*
  store <16 x i16> %2371, <16 x i16>* %2379, align 2, !tbaa !399
  %2380 = getelementptr inbounds i16, i16* %2374, i64 48
  %2381 = bitcast i16* %2380 to <16 x i16>*
  store <16 x i16> %2372, <16 x i16>* %2381, align 2, !tbaa !399
  br label %middle.block5336

middle.block5336:                                 ; preds = %middle.block5336.unr-lcssa, %vector.body5338.epil
  br i1 %cmp.n5349, label %"end for input_wrapper.s0.c137.loopexit.us", label %vec.epilog.iter.check5365

vec.epilog.iter.check5365:                        ; preds = %middle.block5336
  br i1 %min.epilog.iters.check5368, label %"for input_wrapper.s0.c136.us.preheader", label %vec.epilog.ph5366

vec.epilog.ph5366:                                ; preds = %vector.main.loop.iter.check5343, %vec.epilog.iter.check5365
  %vec.epilog.resume.val5369 = phi i64 [ %n.vec5346, %vec.epilog.iter.check5365 ], [ 0, %vector.main.loop.iter.check5343 ]
  br label %vec.epilog.vector.body5364

vec.epilog.vector.body5364:                       ; preds = %vec.epilog.vector.body5364, %vec.epilog.ph5366
  %index5372 = phi i64 [ %vec.epilog.resume.val5369, %vec.epilog.ph5366 ], [ %index.next5373, %vec.epilog.vector.body5364 ]
  %2382 = add nsw i64 %index5372, %2302
  %2383 = getelementptr inbounds i8, i8* %12, i64 %2382
  %2384 = bitcast i8* %2383 to <8 x i8>*
  %wide.load5376 = load <8 x i8>, <8 x i8>* %2384, align 1, !tbaa !397
  %2385 = zext <8 x i8> %wide.load5376 to <8 x i16>
  %2386 = sub nsw <8 x i16> %2385, %broadcast.splat5378
  %2387 = add nsw i64 %index5372, %2303
  %2388 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2387
  %2389 = bitcast i16* %2388 to <8 x i16>*
  store <8 x i16> %2386, <8 x i16>* %2389, align 2, !tbaa !399
  %index.next5373 = add i64 %index5372, 8
  %2390 = icmp eq i64 %index.next5373, %n.vec5371
  br i1 %2390, label %vec.epilog.middle.block5362, label %vec.epilog.vector.body5364, !llvm.loop !423

vec.epilog.middle.block5362:                      ; preds = %vec.epilog.vector.body5364
  br i1 %cmp.n5375, label %"end for input_wrapper.s0.c137.loopexit.us", label %"for input_wrapper.s0.c136.us.preheader"

"for input_wrapper.s0.c136.us.preheader":         ; preds = %iter.check5341, %vec.epilog.iter.check5365, %vec.epilog.middle.block5362
  %indvars.iv4206.ph = phi i64 [ 0, %iter.check5341 ], [ %n.vec5346, %vec.epilog.iter.check5365 ], [ %n.vec5371, %vec.epilog.middle.block5362 ]
  br label %"for input_wrapper.s0.c136.us"

"for input_wrapper.s0.c136.us":                   ; preds = %"for input_wrapper.s0.c136.us.preheader", %"for input_wrapper.s0.c136.us"
  %indvars.iv4206 = phi i64 [ %indvars.iv.next4207, %"for input_wrapper.s0.c136.us" ], [ %indvars.iv4206.ph, %"for input_wrapper.s0.c136.us.preheader" ]
  %2391 = add nsw i64 %indvars.iv4206, %2302
  %2392 = getelementptr inbounds i8, i8* %12, i64 %2391
  %2393 = load i8, i8* %2392, align 1, !tbaa !397
  %2394 = zext i8 %2393 to i16
  %2395 = sub nsw i16 %2394, %1576
  %2396 = add nsw i64 %indvars.iv4206, %2303
  %2397 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2396
  store i16 %2395, i16* %2397, align 2, !tbaa !399
  %indvars.iv.next4207 = add nuw nsw i64 %indvars.iv4206, 1
  %.not2173.us = icmp eq i64 %indvars.iv.next4207, %1630
  br i1 %.not2173.us, label %"end for input_wrapper.s0.c137.loopexit.us", label %"for input_wrapper.s0.c136.us", !llvm.loop !424

"end for input_wrapper.s0.c137.loopexit.us":      ; preds = %"for input_wrapper.s0.c136.us", %vec.epilog.middle.block5362, %middle.block5336
  %indvars.iv.next4209 = add nuw nsw i64 %indvars.iv4208, 1
  %.not2172.us = icmp eq i64 %indvars.iv4208, %1622
  br i1 %.not2172.us, label %"end for input_wrapper.s0.x.rebased134", label %iter.check5341

"end for input_wrapper.s0.x.rebased134":          ; preds = %"end for input_wrapper.s0.c137.loopexit.us", %"for input_wrapper.s0.y.rebased130"
  %indvars.iv.next4212 = add nuw nsw i64 %indvars.iv4211, 1
  %.not2171 = icmp eq i64 %indvars.iv4211, %1655
  br i1 %.not2171, label %"consume input_wrapper139", label %"for input_wrapper.s0.y.rebased130"

"consume input_wrapper139":                       ; preds = %"end for input_wrapper.s0.x.rebased91.loopexit.us", %"end for input_wrapper.s0.x.rebased108", %"end for input_wrapper.s0.x.rebased125", %"end for input_wrapper.s0.x.rebased134", %"end for input_wrapper.s0.x.x.rebased77", %then_bb85, %next_bb120, %then_bb119, %then_bb102, %then_bb65
  %2398 = trunc i64 %1688 to i32
  %2399 = mul i32 %29, %2398
  %t3888 = add i32 %2399, %1687
  %t3960 = sub i32 %t3888, %reass.add2721
  br i1 %48, label %"for output.s0.x.xo140", label %"end for output.s0.x.xo141", !prof !387

"for output.s0.x.xo140":                          ; preds = %"consume input_wrapper139", %"end for output.s0.c.co145"
  %convolved1914.sroa.0.16 = phi <8 x i32> [ %convolved1914.sroa.0.18, %"end for output.s0.c.co145" ], [ %convolved1914.sroa.0.14, %"consume input_wrapper139" ]
  %output.s0.x.xo142 = phi i32 [ %2542, %"end for output.s0.c.co145" ], [ 0, %"consume input_wrapper139" ]
  %a67 = shl nsw i32 %output.s0.x.xo142, 2
  %2400 = icmp sgt i32 %b69, %a67
  %output.s0.x.x.base.s143 = select i1 %2400, i32 %a67, i32 %b69
  %t3970 = add nsw i32 %output.s0.x.x.base.s143, %24
  %t3971 = add nsw i32 %t3970, 1
  %t3972 = add nsw i32 %t3970, 2
  %t3973 = add nsw i32 %t3970, 3
  br i1 %1588, label %"for output.s0.c.co144.preheader", label %"end for output.s0.c.co145", !prof !387

"for output.s0.c.co144.preheader":                ; preds = %"for output.s0.x.xo140"
  %2401 = insertelement <4 x i32> poison, i32 %t3970, i32 0
  %2402 = insertelement <4 x i32> %2401, i32 %t3971, i32 1
  %2403 = insertelement <4 x i32> %2402, i32 %t3972, i32 2
  %2404 = insertelement <4 x i32> %2403, i32 %t3973, i32 3
  %2405 = mul nsw <4 x i32> %2404, %1677
  %2406 = sub <4 x i32> %2405, %1679
  %2407 = mul nsw i32 %t3970, %26
  %t3966 = add nsw i32 %2407, %t3960
  %2408 = mul nsw i32 %t3971, %26
  %t3967 = add nsw i32 %2408, %t3960
  %2409 = mul nsw i32 %t3972, %26
  %t3968 = add nsw i32 %2409, %t3960
  %2410 = mul nsw i32 %t3973, %26
  %t3969 = add nsw i32 %2410, %t3960
  %2411 = sext i32 %t3966 to i64
  %2412 = sext i32 %t3967 to i64
  %2413 = sext i32 %t3968 to i64
  %2414 = sext i32 %t3969 to i64
  %2415 = sext <4 x i32> %2406 to <4 x i64>
  br label %"for output.s0.c.co144"

"end for output.s0.x.xo141":                      ; preds = %"end for output.s0.c.co145", %"consume input_wrapper139"
  %convolved1914.sroa.0.17 = phi <8 x i32> [ %convolved1914.sroa.0.14, %"consume input_wrapper139" ], [ %convolved1914.sroa.0.18, %"end for output.s0.c.co145" ]
  %tobool.not.i2417.not = icmp eq i8* %1691, null
  br i1 %tobool.not.i2417.not, label %call_destructor.exit2420, label %if.then.i2418

if.then.i2418:                                    ; preds = %"end for output.s0.x.xo141"
  call void @halide_free(i8* null, i8* nonnull %1691) #17
  br label %call_destructor.exit2420

call_destructor.exit2420:                         ; preds = %"end for output.s0.x.xo141", %if.then.i2418
  %indvars.iv.next4248 = add nuw nsw i64 %indvars.iv4247, 1
  %2416 = icmp eq i64 %indvars.iv.next4248, %zext4251
  br i1 %2416, label %"end for output.s0.y.rebased60", label %"for output.s0.y.rebased59"

"for output.s0.c.co144":                          ; preds = %"for output.s0.c.co144.preheader", %"consume convolved157"
  %indvars.iv4244 = phi i64 [ 0, %"for output.s0.c.co144.preheader" ], [ %indvars.iv.next4245, %"consume convolved157" ]
  %2417 = shl nuw nsw i64 %indvars.iv4244, 4
  %2418 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %2417
  %2419 = bitcast i32* %2418 to <8 x i32>*
  %2420 = load <8 x i32>, <8 x i32>* %2419, align 32, !tbaa !391
  %2421 = getelementptr inbounds i32, i32* %2418, i64 8
  %2422 = bitcast i32* %2421 to <8 x i32>*
  %2423 = load <8 x i32>, <8 x i32>* %2422, align 32, !tbaa !391
  %indvars.iv4244.tr = trunc i64 %indvars.iv4244 to i32
  %2424 = shl i32 %indvars.iv4244.tr, 1
  %2425 = or i32 %2424, 1
  %t3975 = mul nsw i32 %2425, %7
  br i1 %1589, label %"for convolved.s1.r19$y148.preheader", label %"consume convolved157", !prof !387

"for convolved.s1.r19$y148.preheader":            ; preds = %"for output.s0.c.co144"
  %2426 = mul nsw i64 %indvars.iv4244, %1641
  br i1 %1590, label %"for convolved.s1.r19$y148.preheader.split.us", label %"consume convolved157", !prof !387

"for convolved.s1.r19$y148.preheader.split.us":   ; preds = %"for convolved.s1.r19$y148.preheader"
  br i1 %1529, label %"for convolved.s1.r19$y148.us.us", label %"consume convolved157", !prof !387

"for convolved.s1.r19$y148.us.us":                ; preds = %"for convolved.s1.r19$y148.preheader.split.us", %"end for convolved.s1.r19$x152.loopexit.split.us.us.us"
  %indvars.iv4241 = phi i64 [ %indvars.iv.next4242, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.272.6.us.us = phi <8 x i32> [ %2541, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.242.6.us.us = phi <8 x i32> [ %2537, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.212.6.us.us = phi <8 x i32> [ %2522, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.182.6.us.us = phi <8 x i32> [ %2518, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.142.6.us.us = phi <8 x i32> [ %2503, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.102.6.us.us = phi <8 x i32> [ %2499, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.62.6.us.us = phi <8 x i32> [ %2484, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %convolved1914.sroa.0.19.us.us = phi <8 x i32> [ %2472, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ]
  %2427 = mul nsw i64 %indvars.iv4241, %1639
  %2428 = trunc i64 %indvars.iv4241 to i32
  %2429 = mul i32 %2428, %dilation_y
  %2430 = sub i32 %2429, %t3833
  %t3976.us.us = mul nsw i32 %t3895, %2430
  %2431 = sext i32 %t3976.us.us to i64
  %2432 = trunc i64 %2427 to i32
  %2433 = insertelement <4 x i64> poison, i64 %2431, i32 0
  br label %"for convolved.s1.r19$x151.us.us.us"

"for convolved.s1.r19$x151.us.us.us":             ; preds = %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us", %"for convolved.s1.r19$y148.us.us"
  %indvars.iv4232 = phi i64 [ %indvars.iv.next4233, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.272.7.us.us.us = phi <8 x i32> [ %2541, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.272.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.242.7.us.us.us = phi <8 x i32> [ %2537, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.242.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.212.7.us.us.us = phi <8 x i32> [ %2522, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.212.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.182.7.us.us.us = phi <8 x i32> [ %2518, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.182.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.142.7.us.us.us = phi <8 x i32> [ %2503, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.142.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.102.7.us.us.us = phi <8 x i32> [ %2499, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.102.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.62.7.us.us.us = phi <8 x i32> [ %2484, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.62.6.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %convolved1914.sroa.0.20.us.us.us = phi <8 x i32> [ %2472, %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us" ], [ %convolved1914.sroa.0.19.us.us, %"for convolved.s1.r19$y148.us.us" ]
  %2434 = mul nsw i64 %indvars.iv4232, %1636
  %2435 = mul nsw i64 %indvars.iv4232, %1637
  %2436 = insertelement <4 x i64> poison, i64 %2435, i32 0
  %2437 = shufflevector <4 x i64> %2436, <4 x i64> undef, <4 x i32> zeroinitializer
  %2438 = add nsw <4 x i64> %2437, %2415
  %2439 = mul nsw <4 x i64> %2438, %1681
  %2440 = add nsw i64 %2434, %2427
  %2441 = trunc i64 %2434 to i32
  %t3978.us.us.us = add i32 %2441, %2432
  %t3982.us.us.us = add i32 %t3978.us.us.us, %t3975
  %2442 = sext i32 %t3982.us.us.us to i64
  br label %"for convolved.s1.r19$z.r115154.us.us.us"

"for convolved.s1.r19$z.r115154.us.us.us":        ; preds = %"for convolved.s1.r19$z.r115154.us.us.us", %"for convolved.s1.r19$x151.us.us.us"
  %indvars.iv4230 = phi i64 [ %indvars.iv.next4231, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ 0, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.272.9.us.us.us = phi <8 x i32> [ %2541, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.272.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.242.9.us.us.us = phi <8 x i32> [ %2537, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.242.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.212.9.us.us.us = phi <8 x i32> [ %2522, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.212.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.182.9.us.us.us = phi <8 x i32> [ %2518, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.182.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.142.9.us.us.us = phi <8 x i32> [ %2503, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.142.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.102.9.us.us.us = phi <8 x i32> [ %2499, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.102.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.62.9.us.us.us = phi <8 x i32> [ %2484, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.62.7.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %convolved1914.sroa.0.22.us.us.us = phi <8 x i32> [ %2472, %"for convolved.s1.r19$z.r115154.us.us.us" ], [ %convolved1914.sroa.0.20.us.us.us, %"for convolved.s1.r19$x151.us.us.us" ]
  %2443 = shl nuw nsw i64 %indvars.iv4230, 2
  %2444 = insertelement <4 x i64> poison, i64 %2443, i32 0
  %2445 = add <4 x i64> %2444, %2433
  %2446 = shufflevector <4 x i64> %2445, <4 x i64> poison, <4 x i32> zeroinitializer
  %2447 = add <4 x i64> %2446, %2439
  %2448 = extractelement <4 x i64> %2447, i32 0
  %2449 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2448
  %2450 = bitcast i16* %2449 to <1 x i32>*
  %2451 = load <1 x i32>, <1 x i32>* %2450, align 8, !tbaa !399
  %2452 = shufflevector <1 x i32> %2451, <1 x i32> undef, <8 x i32> zeroinitializer
  %2453 = bitcast <8 x i32> %2452 to <16 x i16>
  %2454 = shl nuw nsw i64 %indvars.iv4230, 4
  %2455 = add nsw i64 %2454, %2426
  %2456 = shl nsw i64 %2455, 1
  %2457 = add nsw i64 %2456, %2440
  %2458 = getelementptr inbounds i16, i16* %1591, i64 %2457
  %2459 = bitcast i16* %2458 to <16 x i16>*
  %2460 = load <16 x i16>, <16 x i16>* %2459, align 32, !tbaa !412
  %2461 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2453, <16 x i16> %2460)
  %2462 = add <8 x i32> %2461, %convolved1914.sroa.0.22.us.us.us
  %2463 = getelementptr inbounds i16, i16* %2449, i64 2
  %2464 = bitcast i16* %2463 to <1 x i32>*
  %2465 = load <1 x i32>, <1 x i32>* %2464, align 4, !tbaa !399
  %2466 = shufflevector <1 x i32> %2465, <1 x i32> undef, <8 x i32> zeroinitializer
  %2467 = bitcast <8 x i32> %2466 to <16 x i16>
  %2468 = getelementptr inbounds i16, i16* %2458, i64 16
  %2469 = bitcast i16* %2468 to <16 x i16>*
  %2470 = load <16 x i16>, <16 x i16>* %2469, align 32, !tbaa !412
  %2471 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2467, <16 x i16> %2470)
  %2472 = add <8 x i32> %2462, %2471
  %2473 = shl nuw nsw i64 %indvars.iv4230, 5
  %2474 = add nsw i64 %2473, %2442
  %2475 = getelementptr inbounds i16, i16* %1591, i64 %2474
  %2476 = bitcast i16* %2475 to <16 x i16>*
  %2477 = load <16 x i16>, <16 x i16>* %2476, align 32, !tbaa !412
  %2478 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2453, <16 x i16> %2477)
  %2479 = add <8 x i32> %2478, %convolved1914.sroa.62.9.us.us.us
  %2480 = getelementptr inbounds i16, i16* %2475, i64 16
  %2481 = bitcast i16* %2480 to <16 x i16>*
  %2482 = load <16 x i16>, <16 x i16>* %2481, align 32, !tbaa !412
  %2483 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2467, <16 x i16> %2482)
  %2484 = add <8 x i32> %2479, %2483
  %2485 = extractelement <4 x i64> %2447, i32 1
  %2486 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2485
  %2487 = bitcast i16* %2486 to <1 x i32>*
  %2488 = load <1 x i32>, <1 x i32>* %2487, align 8, !tbaa !399
  %2489 = shufflevector <1 x i32> %2488, <1 x i32> undef, <8 x i32> zeroinitializer
  %2490 = bitcast <8 x i32> %2489 to <16 x i16>
  %2491 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2490, <16 x i16> %2460)
  %2492 = add <8 x i32> %2491, %convolved1914.sroa.102.9.us.us.us
  %2493 = getelementptr inbounds i16, i16* %2486, i64 2
  %2494 = bitcast i16* %2493 to <1 x i32>*
  %2495 = load <1 x i32>, <1 x i32>* %2494, align 4, !tbaa !399
  %2496 = shufflevector <1 x i32> %2495, <1 x i32> undef, <8 x i32> zeroinitializer
  %2497 = bitcast <8 x i32> %2496 to <16 x i16>
  %2498 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2497, <16 x i16> %2470)
  %2499 = add <8 x i32> %2492, %2498
  %2500 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2490, <16 x i16> %2477)
  %2501 = add <8 x i32> %2500, %convolved1914.sroa.142.9.us.us.us
  %2502 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2497, <16 x i16> %2482)
  %2503 = add <8 x i32> %2501, %2502
  %2504 = extractelement <4 x i64> %2447, i32 2
  %2505 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2504
  %2506 = bitcast i16* %2505 to <1 x i32>*
  %2507 = load <1 x i32>, <1 x i32>* %2506, align 8, !tbaa !399
  %2508 = shufflevector <1 x i32> %2507, <1 x i32> undef, <8 x i32> zeroinitializer
  %2509 = bitcast <8 x i32> %2508 to <16 x i16>
  %2510 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2509, <16 x i16> %2460)
  %2511 = add <8 x i32> %2510, %convolved1914.sroa.182.9.us.us.us
  %2512 = getelementptr inbounds i16, i16* %2505, i64 2
  %2513 = bitcast i16* %2512 to <1 x i32>*
  %2514 = load <1 x i32>, <1 x i32>* %2513, align 4, !tbaa !399
  %2515 = shufflevector <1 x i32> %2514, <1 x i32> undef, <8 x i32> zeroinitializer
  %2516 = bitcast <8 x i32> %2515 to <16 x i16>
  %2517 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2516, <16 x i16> %2470)
  %2518 = add <8 x i32> %2511, %2517
  %2519 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2509, <16 x i16> %2477)
  %2520 = add <8 x i32> %2519, %convolved1914.sroa.212.9.us.us.us
  %2521 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2516, <16 x i16> %2482)
  %2522 = add <8 x i32> %2520, %2521
  %2523 = extractelement <4 x i64> %2447, i32 3
  %2524 = getelementptr inbounds i16, i16* %input_wrapper62, i64 %2523
  %2525 = bitcast i16* %2524 to <1 x i32>*
  %2526 = load <1 x i32>, <1 x i32>* %2525, align 8, !tbaa !399
  %2527 = shufflevector <1 x i32> %2526, <1 x i32> undef, <8 x i32> zeroinitializer
  %2528 = bitcast <8 x i32> %2527 to <16 x i16>
  %2529 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2528, <16 x i16> %2460)
  %2530 = add <8 x i32> %2529, %convolved1914.sroa.242.9.us.us.us
  %2531 = getelementptr inbounds i16, i16* %2524, i64 2
  %2532 = bitcast i16* %2531 to <1 x i32>*
  %2533 = load <1 x i32>, <1 x i32>* %2532, align 4, !tbaa !399
  %2534 = shufflevector <1 x i32> %2533, <1 x i32> undef, <8 x i32> zeroinitializer
  %2535 = bitcast <8 x i32> %2534 to <16 x i16>
  %2536 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2535, <16 x i16> %2470)
  %2537 = add <8 x i32> %2530, %2536
  %2538 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2528, <16 x i16> %2477)
  %2539 = add <8 x i32> %2538, %convolved1914.sroa.272.9.us.us.us
  %2540 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %2535, <16 x i16> %2482)
  %2541 = add <8 x i32> %2539, %2540
  %indvars.iv.next4231 = add nuw nsw i64 %indvars.iv4230, 1
  %.not2170.us.us.us = icmp eq i64 %indvars.iv.next4231, %1631
  br i1 %.not2170.us.us.us, label %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us", label %"for convolved.s1.r19$z.r115154.us.us.us"

"end for convolved.s1.r19$z.r115155.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r115154.us.us.us"
  %indvars.iv.next4233 = add nuw nsw i64 %indvars.iv4232, 1
  %.not2169.us.us.us = icmp eq i64 %indvars.iv.next4233, %1638
  br i1 %.not2169.us.us.us, label %"end for convolved.s1.r19$x152.loopexit.split.us.us.us", label %"for convolved.s1.r19$x151.us.us.us"

"end for convolved.s1.r19$x152.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115155.loopexit.us.us.us"
  %indvars.iv.next4242 = add nuw nsw i64 %indvars.iv4241, 1
  %.not2168.us.us = icmp eq i64 %indvars.iv.next4242, %1640
  br i1 %.not2168.us.us, label %"consume convolved157", label %"for convolved.s1.r19$y148.us.us"

"end for output.s0.c.co145":                      ; preds = %"consume convolved157", %"for output.s0.x.xo140"
  %convolved1914.sroa.0.18 = phi <8 x i32> [ %convolved1914.sroa.0.16, %"for output.s0.x.xo140" ], [ %convolved1914.sroa.0.24, %"consume convolved157" ]
  %2542 = add nuw nsw i32 %output.s0.x.xo142, 1
  %.not2166 = icmp eq i32 %2542, %t3855
  br i1 %.not2166, label %"end for output.s0.x.xo141", label %"for output.s0.x.xo140"

"consume convolved157":                           ; preds = %"end for convolved.s1.r19$x152.loopexit.split.us.us.us", %"for convolved.s1.r19$y148.preheader.split.us", %"for convolved.s1.r19$y148.preheader", %"for output.s0.c.co144"
  %convolved1914.sroa.272.11 = phi <8 x i32> [ %2423, %"for output.s0.c.co144" ], [ %2423, %"for convolved.s1.r19$y148.preheader" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2541, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.242.11 = phi <8 x i32> [ %2420, %"for output.s0.c.co144" ], [ %2420, %"for convolved.s1.r19$y148.preheader" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2537, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.212.11 = phi <8 x i32> [ %2423, %"for output.s0.c.co144" ], [ %2423, %"for convolved.s1.r19$y148.preheader" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2522, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.182.11 = phi <8 x i32> [ %2420, %"for output.s0.c.co144" ], [ %2420, %"for convolved.s1.r19$y148.preheader" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2518, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.142.11 = phi <8 x i32> [ %2423, %"for output.s0.c.co144" ], [ %2423, %"for convolved.s1.r19$y148.preheader" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2503, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.11 = phi <8 x i32> [ %2420, %"for output.s0.c.co144" ], [ %2420, %"for convolved.s1.r19$y148.preheader" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2499, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.11 = phi <8 x i32> [ %2423, %"for output.s0.c.co144" ], [ %2423, %"for convolved.s1.r19$y148.preheader" ], [ %2423, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2484, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.24 = phi <8 x i32> [ %2420, %"for output.s0.c.co144" ], [ %2420, %"for convolved.s1.r19$y148.preheader" ], [ %2420, %"for convolved.s1.r19$y148.preheader.split.us" ], [ %2472, %"end for convolved.s1.r19$x152.loopexit.split.us.us.us" ]
  %2543 = shufflevector <8 x i32> %convolved1914.sroa.0.24, <8 x i32> %convolved1914.sroa.62.11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2544 = sext <16 x i32> %2543 to <16 x i64>
  %2545 = mul nsw <16 x i64> %2544, %1594
  %2546 = ashr <16 x i64> %2545, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2547 = add nsw <16 x i64> %2546, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a71 = ashr <16 x i64> %2547, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2548 = shufflevector <16 x i64> %a71, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2549 = icmp slt <4 x i64> %2548, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2550 = shufflevector <16 x i64> %a71, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2551 = icmp slt <4 x i64> %2550, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2552 = shufflevector <16 x i64> %a71, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2553 = icmp slt <4 x i64> %2552, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2554 = shufflevector <16 x i64> %a71, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2555 = icmp slt <4 x i64> %2554, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2556 = select <4 x i1> %2549, <4 x i64> %2548, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2557 = select <4 x i1> %2551, <4 x i64> %2550, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2558 = select <4 x i1> %2553, <4 x i64> %2552, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2559 = select <4 x i1> %2555, <4 x i64> %2554, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2560 = icmp sgt <4 x i64> %2556, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2561 = icmp sgt <4 x i64> %2557, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2562 = icmp sgt <4 x i64> %2558, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2563 = icmp sgt <4 x i64> %2559, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2564 = select <4 x i1> %2560, <4 x i64> %2556, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2565 = select <4 x i1> %2561, <4 x i64> %2557, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2566 = select <4 x i1> %2562, <4 x i64> %2558, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2567 = select <4 x i1> %2563, <4 x i64> %2559, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2568 = shufflevector <4 x i64> %2564, <4 x i64> %2565, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2569 = shufflevector <4 x i64> %2566, <4 x i64> %2567, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2570 = shufflevector <8 x i64> %2568, <8 x i64> %2569, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4489 = trunc <16 x i64> %2570 to <16 x i32>
  %2571 = ashr <16 x i32> %t4489, %t4490
  %2572 = shl <16 x i32> %t4489, %t4490
  %2573 = shufflevector <16 x i32> %2571, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2574 = shufflevector <16 x i32> %2572, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2575 = select <8 x i1> %1601, <8 x i32> %2573, <8 x i32> %2574
  %2576 = shufflevector <16 x i32> %2571, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2577 = shufflevector <16 x i32> %2572, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2578 = select <8 x i1> %1602, <8 x i32> %2576, <8 x i32> %2577
  %2579 = shufflevector <8 x i32> %2575, <8 x i32> %2578, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2580 = ashr <16 x i32> %t4489, %t4492
  %2581 = shl <16 x i32> %t4489, %t4492
  %2582 = shufflevector <16 x i32> %2580, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2583 = shufflevector <16 x i32> %2581, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2584 = select <8 x i1> %1612, <8 x i32> %2582, <8 x i32> %2583
  %2585 = shufflevector <16 x i32> %2580, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2586 = shufflevector <16 x i32> %2581, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2587 = select <8 x i1> %1613, <8 x i32> %2585, <8 x i32> %2586
  %2588 = shufflevector <8 x i32> %2584, <8 x i32> %2587, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2589 = and <16 x i32> %2588, %1604
  %2590 = add nsw <16 x i32> %2589, %2579
  %2591 = shufflevector <16 x i32> %2590, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2592 = shufflevector <16 x i32> %2590, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2593 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %2591, <8 x i32> %2592) #11
  %2594 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %2593, <16 x i16> %1616)
  %2595 = shufflevector <16 x i16> %2594, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2596 = shufflevector <16 x i16> %2594, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2597 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2595, <8 x i16> %2596) #11
  %2598 = icmp ugt <16 x i8> %b71, %2597
  %a68 = select <16 x i1> %2598, <16 x i8> %2597, <16 x i8> %b71
  %2599 = icmp ugt <16 x i8> %a68, %b70
  %2600 = select <16 x i1> %2599, <16 x i8> %a68, <16 x i8> %b70
  %2601 = add nsw i64 %2417, %2411
  %2602 = getelementptr inbounds i8, i8* %22, i64 %2601
  %2603 = bitcast i8* %2602 to <16 x i8>*
  store <16 x i8> %2600, <16 x i8>* %2603, align 1, !tbaa !414
  %2604 = shufflevector <8 x i32> %convolved1914.sroa.102.11, <8 x i32> %convolved1914.sroa.142.11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2605 = sext <16 x i32> %2604 to <16 x i64>
  %2606 = mul nsw <16 x i64> %2605, %1594
  %2607 = ashr <16 x i64> %2606, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2608 = add nsw <16 x i64> %2607, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a77 = ashr <16 x i64> %2608, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2609 = shufflevector <16 x i64> %a77, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2610 = icmp slt <4 x i64> %2609, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2611 = shufflevector <16 x i64> %a77, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2612 = icmp slt <4 x i64> %2611, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2613 = shufflevector <16 x i64> %a77, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2614 = icmp slt <4 x i64> %2613, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2615 = shufflevector <16 x i64> %a77, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2616 = icmp slt <4 x i64> %2615, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2617 = select <4 x i1> %2610, <4 x i64> %2609, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2618 = select <4 x i1> %2612, <4 x i64> %2611, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2619 = select <4 x i1> %2614, <4 x i64> %2613, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2620 = select <4 x i1> %2616, <4 x i64> %2615, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2621 = icmp sgt <4 x i64> %2617, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2622 = icmp sgt <4 x i64> %2618, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2623 = icmp sgt <4 x i64> %2619, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2624 = icmp sgt <4 x i64> %2620, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2625 = select <4 x i1> %2621, <4 x i64> %2617, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2626 = select <4 x i1> %2622, <4 x i64> %2618, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2627 = select <4 x i1> %2623, <4 x i64> %2619, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2628 = select <4 x i1> %2624, <4 x i64> %2620, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2629 = shufflevector <4 x i64> %2625, <4 x i64> %2626, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2630 = shufflevector <4 x i64> %2627, <4 x i64> %2628, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2631 = shufflevector <8 x i64> %2629, <8 x i64> %2630, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4493 = trunc <16 x i64> %2631 to <16 x i32>
  %2632 = ashr <16 x i32> %t4493, %t4490
  %2633 = shl <16 x i32> %t4493, %t4490
  %2634 = shufflevector <16 x i32> %2632, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2635 = shufflevector <16 x i32> %2633, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2636 = select <8 x i1> %1601, <8 x i32> %2634, <8 x i32> %2635
  %2637 = shufflevector <16 x i32> %2632, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2638 = shufflevector <16 x i32> %2633, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2639 = select <8 x i1> %1602, <8 x i32> %2637, <8 x i32> %2638
  %2640 = shufflevector <8 x i32> %2636, <8 x i32> %2639, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2641 = ashr <16 x i32> %t4493, %t4492
  %2642 = shl <16 x i32> %t4493, %t4492
  %2643 = shufflevector <16 x i32> %2641, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2644 = shufflevector <16 x i32> %2642, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2645 = select <8 x i1> %1612, <8 x i32> %2643, <8 x i32> %2644
  %2646 = shufflevector <16 x i32> %2641, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2647 = shufflevector <16 x i32> %2642, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2648 = select <8 x i1> %1613, <8 x i32> %2646, <8 x i32> %2647
  %2649 = shufflevector <8 x i32> %2645, <8 x i32> %2648, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2650 = and <16 x i32> %2649, %1604
  %2651 = add nsw <16 x i32> %2650, %2640
  %2652 = shufflevector <16 x i32> %2651, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2653 = shufflevector <16 x i32> %2651, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2654 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %2652, <8 x i32> %2653) #11
  %2655 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %2654, <16 x i16> %1616)
  %2656 = shufflevector <16 x i16> %2655, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2657 = shufflevector <16 x i16> %2655, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2658 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2656, <8 x i16> %2657) #11
  %2659 = icmp ugt <16 x i8> %b71, %2658
  %a74 = select <16 x i1> %2659, <16 x i8> %2658, <16 x i8> %b71
  %2660 = icmp ugt <16 x i8> %a74, %b70
  %2661 = select <16 x i1> %2660, <16 x i8> %a74, <16 x i8> %b70
  %2662 = add nsw i64 %2417, %2412
  %2663 = getelementptr inbounds i8, i8* %22, i64 %2662
  %2664 = bitcast i8* %2663 to <16 x i8>*
  store <16 x i8> %2661, <16 x i8>* %2664, align 1, !tbaa !414
  %2665 = shufflevector <8 x i32> %convolved1914.sroa.182.11, <8 x i32> %convolved1914.sroa.212.11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2666 = sext <16 x i32> %2665 to <16 x i64>
  %2667 = mul nsw <16 x i64> %2666, %1594
  %2668 = ashr <16 x i64> %2667, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2669 = add nsw <16 x i64> %2668, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a83 = ashr <16 x i64> %2669, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2670 = shufflevector <16 x i64> %a83, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2671 = icmp slt <4 x i64> %2670, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2672 = shufflevector <16 x i64> %a83, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2673 = icmp slt <4 x i64> %2672, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2674 = shufflevector <16 x i64> %a83, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2675 = icmp slt <4 x i64> %2674, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2676 = shufflevector <16 x i64> %a83, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2677 = icmp slt <4 x i64> %2676, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2678 = select <4 x i1> %2671, <4 x i64> %2670, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2679 = select <4 x i1> %2673, <4 x i64> %2672, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2680 = select <4 x i1> %2675, <4 x i64> %2674, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2681 = select <4 x i1> %2677, <4 x i64> %2676, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2682 = icmp sgt <4 x i64> %2678, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2683 = icmp sgt <4 x i64> %2679, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2684 = icmp sgt <4 x i64> %2680, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2685 = icmp sgt <4 x i64> %2681, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2686 = select <4 x i1> %2682, <4 x i64> %2678, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2687 = select <4 x i1> %2683, <4 x i64> %2679, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2688 = select <4 x i1> %2684, <4 x i64> %2680, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2689 = select <4 x i1> %2685, <4 x i64> %2681, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2690 = shufflevector <4 x i64> %2686, <4 x i64> %2687, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2691 = shufflevector <4 x i64> %2688, <4 x i64> %2689, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2692 = shufflevector <8 x i64> %2690, <8 x i64> %2691, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4497 = trunc <16 x i64> %2692 to <16 x i32>
  %2693 = ashr <16 x i32> %t4497, %t4490
  %2694 = shl <16 x i32> %t4497, %t4490
  %2695 = shufflevector <16 x i32> %2693, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2696 = shufflevector <16 x i32> %2694, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2697 = select <8 x i1> %1601, <8 x i32> %2695, <8 x i32> %2696
  %2698 = shufflevector <16 x i32> %2693, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2699 = shufflevector <16 x i32> %2694, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2700 = select <8 x i1> %1602, <8 x i32> %2698, <8 x i32> %2699
  %2701 = shufflevector <8 x i32> %2697, <8 x i32> %2700, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2702 = ashr <16 x i32> %t4497, %t4492
  %2703 = shl <16 x i32> %t4497, %t4492
  %2704 = shufflevector <16 x i32> %2702, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2705 = shufflevector <16 x i32> %2703, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2706 = select <8 x i1> %1612, <8 x i32> %2704, <8 x i32> %2705
  %2707 = shufflevector <16 x i32> %2702, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2708 = shufflevector <16 x i32> %2703, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2709 = select <8 x i1> %1613, <8 x i32> %2707, <8 x i32> %2708
  %2710 = shufflevector <8 x i32> %2706, <8 x i32> %2709, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2711 = and <16 x i32> %2710, %1604
  %2712 = add nsw <16 x i32> %2711, %2701
  %2713 = shufflevector <16 x i32> %2712, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2714 = shufflevector <16 x i32> %2712, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2715 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %2713, <8 x i32> %2714) #11
  %2716 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %2715, <16 x i16> %1616)
  %2717 = shufflevector <16 x i16> %2716, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2718 = shufflevector <16 x i16> %2716, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2719 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2717, <8 x i16> %2718) #11
  %2720 = icmp ugt <16 x i8> %b71, %2719
  %a80 = select <16 x i1> %2720, <16 x i8> %2719, <16 x i8> %b71
  %2721 = icmp ugt <16 x i8> %a80, %b70
  %2722 = select <16 x i1> %2721, <16 x i8> %a80, <16 x i8> %b70
  %2723 = add nsw i64 %2417, %2413
  %2724 = getelementptr inbounds i8, i8* %22, i64 %2723
  %2725 = bitcast i8* %2724 to <16 x i8>*
  store <16 x i8> %2722, <16 x i8>* %2725, align 1, !tbaa !414
  %2726 = shufflevector <8 x i32> %convolved1914.sroa.242.11, <8 x i32> %convolved1914.sroa.272.11, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2727 = sext <16 x i32> %2726 to <16 x i64>
  %2728 = mul nsw <16 x i64> %2727, %1594
  %2729 = ashr <16 x i64> %2728, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %2730 = add nsw <16 x i64> %2729, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a89 = ashr <16 x i64> %2730, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %2731 = shufflevector <16 x i64> %a89, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %2732 = icmp slt <4 x i64> %2731, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2733 = shufflevector <16 x i64> %a89, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %2734 = icmp slt <4 x i64> %2733, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2735 = shufflevector <16 x i64> %a89, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %2736 = icmp slt <4 x i64> %2735, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2737 = shufflevector <16 x i64> %a89, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %2738 = icmp slt <4 x i64> %2737, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2739 = select <4 x i1> %2732, <4 x i64> %2731, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2740 = select <4 x i1> %2734, <4 x i64> %2733, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2741 = select <4 x i1> %2736, <4 x i64> %2735, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2742 = select <4 x i1> %2738, <4 x i64> %2737, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %2743 = icmp sgt <4 x i64> %2739, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2744 = icmp sgt <4 x i64> %2740, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2745 = icmp sgt <4 x i64> %2741, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2746 = icmp sgt <4 x i64> %2742, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2747 = select <4 x i1> %2743, <4 x i64> %2739, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2748 = select <4 x i1> %2744, <4 x i64> %2740, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2749 = select <4 x i1> %2745, <4 x i64> %2741, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2750 = select <4 x i1> %2746, <4 x i64> %2742, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %2751 = shufflevector <4 x i64> %2747, <4 x i64> %2748, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2752 = shufflevector <4 x i64> %2749, <4 x i64> %2750, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2753 = shufflevector <8 x i64> %2751, <8 x i64> %2752, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4501 = trunc <16 x i64> %2753 to <16 x i32>
  %2754 = ashr <16 x i32> %t4501, %t4490
  %2755 = shl <16 x i32> %t4501, %t4490
  %2756 = shufflevector <16 x i32> %2754, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2757 = shufflevector <16 x i32> %2755, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2758 = select <8 x i1> %1601, <8 x i32> %2756, <8 x i32> %2757
  %2759 = shufflevector <16 x i32> %2754, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2760 = shufflevector <16 x i32> %2755, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2761 = select <8 x i1> %1602, <8 x i32> %2759, <8 x i32> %2760
  %2762 = shufflevector <8 x i32> %2758, <8 x i32> %2761, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2763 = ashr <16 x i32> %t4501, %t4492
  %2764 = shl <16 x i32> %t4501, %t4492
  %2765 = shufflevector <16 x i32> %2763, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2766 = shufflevector <16 x i32> %2764, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2767 = select <8 x i1> %1612, <8 x i32> %2765, <8 x i32> %2766
  %2768 = shufflevector <16 x i32> %2763, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2769 = shufflevector <16 x i32> %2764, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2770 = select <8 x i1> %1613, <8 x i32> %2768, <8 x i32> %2769
  %2771 = shufflevector <8 x i32> %2767, <8 x i32> %2770, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2772 = and <16 x i32> %2771, %1604
  %2773 = add nsw <16 x i32> %2772, %2762
  %2774 = shufflevector <16 x i32> %2773, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %2775 = shufflevector <16 x i32> %2773, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %2776 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %2774, <8 x i32> %2775) #11
  %2777 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %2776, <16 x i16> %1616)
  %2778 = shufflevector <16 x i16> %2777, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2779 = shufflevector <16 x i16> %2777, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2780 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %2778, <8 x i16> %2779) #11
  %2781 = icmp ugt <16 x i8> %b71, %2780
  %a86 = select <16 x i1> %2781, <16 x i8> %2780, <16 x i8> %b71
  %2782 = icmp ugt <16 x i8> %a86, %b70
  %2783 = select <16 x i1> %2782, <16 x i8> %a86, <16 x i8> %b70
  %2784 = add nsw i64 %2417, %2414
  %2785 = getelementptr inbounds i8, i8* %22, i64 %2784
  %2786 = bitcast i8* %2785 to <16 x i8>*
  store <16 x i8> %2783, <16 x i8>* %2786, align 1, !tbaa !414
  %indvars.iv.next4245 = add nuw nsw i64 %indvars.iv4244, 1
  %.not2167 = icmp eq i64 %indvars.iv.next4245, %1642
  br i1 %.not2167, label %"end for output.s0.c.co145", label %"for output.s0.c.co144"

then_bb158:                                       ; preds = %next_bb55
  %t4020 = add nsw i32 %6, 1
  %a92 = ashr i32 %t4020, 2
  %2787 = icmp sgt i32 %6, 2
  %t4021 = select i1 %2787, i32 %a92, i32 0
  %a93 = ashr i32 %t4020, 3
  %2788 = icmp sgt i32 %6, 6
  %t4022 = select i1 %2788, i32 %a93, i32 0
  %2789 = add nsw i32 %10, -1
  %t4023 = mul nsw i32 %2789, %dilation_y
  %a99 = ashr i32 %t4020, 1
  %2790 = icmp eq i32 %14, 4
  %2791 = icmp eq i32 %16, 4
  %t4025 = and i1 %2790, %2791
  %t4026 = add nsw i32 %6, -1
  %t4027 = ashr i32 %t4026, 1
  %2792 = shl nsw i32 %t4027, 2
  %b96 = or i32 %2792, 3
  %t4029 = icmp slt i32 %dilation_y, 0
  %t3990 = select i1 %t4029, i32 %t4023, i32 0
  %2793 = icmp slt i32 %14, 16
  %2794 = icmp slt i32 %14, 8
  %2795 = icmp slt i32 %14, 4
  %2796 = icmp slt i32 %a99, 1
  %2797 = select i1 %2796, i32 %a99, i32 1
  %2798 = add nsw i32 %2797, %t4027
  %2799 = select i1 %2795, i32 %a99, i32 %2798
  %2800 = icmp slt i32 %a99, 2
  %2801 = select i1 %2800, i32 %a99, i32 2
  %2802 = and i32 %t4027, -2
  %2803 = add nsw i32 %2801, %2802
  %2804 = select i1 %2794, i32 %2799, i32 %2803
  %2805 = icmp slt i32 %a99, 4
  %2806 = select i1 %2805, i32 %a99, i32 4
  %2807 = and i32 %t4027, -4
  %2808 = add nsw i32 %2806, %2807
  %a95 = select i1 %2793, i32 %2804, i32 %2808
  %2809 = icmp sgt i32 %a99, %a95
  %2810 = select i1 %2809, i32 %a95, i32 %a99
  %2811 = shl nsw i32 %2810, 2
  %2812 = add nsw i32 %2811, -1
  %a94 = select i1 %t4025, i32 %b96, i32 %2812
  %2813 = icmp sgt i32 %a94, %b96
  %a111 = select i1 %2813, i32 %a94, i32 %b96
  %2814 = icmp sgt i32 %6, 0
  %2815 = add nuw nsw i32 %25, 7
  %t4012 = ashr i32 %2815, 3
  %2816 = add nsw i32 %6, 7
  %2817 = ashr i32 %2816, 3
  %t4005 = sub nsw i32 %2817, %t4022
  %2818 = add nsw i32 %6, 3
  %2819 = ashr i32 %2818, 2
  %t4009 = sub nsw i32 %2819, %t4021
  %2820 = select i1 %t3704, i32 %t3705, i32 0
  %2821 = select i1 %t3706, i32 %25, i32 1
  %2822 = add i32 %24, -1
  %2823 = add i32 %2822, %2821
  %2824 = mul nsw i32 %2823, %stride_x
  %b106 = add nsw i32 %2824, %2820
  %2825 = icmp sgt i32 %20, 0
  br i1 %2825, label %"for output.s0.b.rebased160.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased160.preheader":           ; preds = %then_bb158
  %t4013 = ashr i32 %3, 3
  %t4011 = select i1 %2814, i32 %a99, i32 0
  %t3989 = select i1 %t4029, i32 0, i32 %t4023
  %2826 = mul nsw i32 %16, %15
  %2827 = add nsw i32 %25, -1
  %2828 = select i1 %t3706, i32 0, i32 %2827
  %2829 = add nsw i32 %2828, %24
  %2830 = mul nsw i32 %2829, %stride_x
  %2831 = select i1 %t3704, i32 0, i32 %t3705
  %b104 = add nsw i32 %2830, %2831
  %a103 = sub i32 %b104, %b106
  %a105 = ashr i32 %a103, 3
  %2832 = add nsw i32 %a103, 1
  %a100 = ashr i32 %2832, 3
  %2833 = icmp sgt i32 %a103, 6
  %t4048 = select i1 %2833, i32 %a100, i32 0
  %.neg2685 = mul i32 %29, %27
  %.neg2686 = mul i32 %26, %24
  %.neg2687 = mul i32 %30, %19
  %2834 = add i32 %t3702, %2826
  %2835 = add i32 %2834, %t3703
  %.neg2691 = mul i32 %15, -4
  %2836 = icmp sgt i32 %a105, -1
  %2837 = select i1 %2836, i32 %a105, i32 -1
  %2838 = sub nsw i32 %2837, %t4048
  %2839 = icmp sgt i32 %28, 0
  %2840 = icmp sgt i32 %a111, -1
  %t4505 = select i1 %2840, i32 %a111, i32 -1
  %2841 = icmp sgt i32 %a103, -1
  %2842 = select i1 %2841, i32 %2832, i32 0
  %t4506 = zext i32 %2842 to i64
  %2843 = add nsw i32 %t4505, 1
  %2844 = zext i32 %2843 to i64
  %t4507 = shl nuw nsw i64 %2844, 1
  %t4509 = mul i64 %t4507, %t4506
  %2845 = add nsw i32 %a111, 1
  %t4086 = shl nsw i32 %a99, 2
  %2846 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %2847 = shufflevector <16 x i8> %2846, <16 x i8> undef, <16 x i32> zeroinitializer
  %2848 = zext <16 x i8> %2847 to <16 x i16>
  %2849 = icmp sgt i32 %t4005, 0
  %2850 = insertelement <16 x i32> undef, i32 %t4086, i32 0
  %2851 = shufflevector <16 x i32> %2850, <16 x i32> undef, <8 x i32> zeroinitializer
  %2852 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %2853 = shufflevector <8 x i8> %2852, <8 x i8> undef, <8 x i32> zeroinitializer
  %2854 = zext <8 x i8> %2853 to <8 x i16>
  %2855 = icmp sgt i32 %t4009, 0
  %2856 = insertelement <8 x i32> undef, i32 %t4086, i32 0
  %2857 = shufflevector <8 x i32> %2856, <8 x i32> undef, <8 x i32> zeroinitializer
  %2858 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %2859 = shufflevector <4 x i8> %2858, <4 x i8> undef, <4 x i32> zeroinitializer
  %2860 = zext <4 x i8> %2859 to <4 x i16>
  %2861 = zext i8 %input_zero to i16
  %t4052 = mul nsw i32 %2832, %2845
  %.neg2692 = sub i32 %.neg2691, %t3702
  %t4001.neg = sub i32 %.neg2692, %t3703
  %2862 = shl i32 %2845, 1
  %2863 = mul nsw i32 %a111, 7
  %2864 = mul nsw i32 %a111, 6
  %2865 = mul nsw i32 %a111, 5
  %2866 = shl nsw i32 %a111, 2
  %2867 = mul nsw i32 %a111, 3
  %2868 = shl nsw i32 %a111, 1
  %2869 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %2870 = shufflevector <32 x i8> %2869, <32 x i8> undef, <32 x i32> zeroinitializer
  %2871 = zext <32 x i8> %2870 to <32 x i16>
  %2872 = icmp sgt i32 %2838, -1
  %reass.add2701 = add i32 %.neg2685, %.neg2686
  %reass.add2702 = add i32 %reass.add2701, %.neg2687
  %b118 = add nsw i32 %25, -8
  %2873 = icmp sgt i32 %3, 7
  %2874 = icmp sgt i32 %10, 0
  %2875 = icmp sgt i32 %8, 0
  %2876 = bitcast i8* %4 to i16*
  %2877 = insertelement <8 x i32> undef, i32 %output_multiplier, i32 0
  %2878 = shufflevector <8 x i32> %2877, <8 x i32> undef, <8 x i32> zeroinitializer
  %2879 = sext <8 x i32> %2878 to <8 x i64>
  %2880 = insertelement <8 x i32> undef, i32 %output_shift, i32 0
  %2881 = shufflevector <8 x i32> %2880, <8 x i32> undef, <8 x i32> zeroinitializer
  %2882 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2881, i1 false) #11
  %2883 = icmp sgt <8 x i32> %2881, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %2884 = icmp sgt i32 %output_shift, 0
  %2885 = select i1 %2884, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32> zeroinitializer
  %2886 = add nsw i32 %output_shift, -1
  %2887 = insertelement <8 x i32> undef, i32 %2886, i32 0
  %2888 = shufflevector <8 x i32> %2887, <8 x i32> undef, <8 x i32> zeroinitializer
  %2889 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %2888, i1 false) #11
  %2890 = icmp sgt <8 x i32> %2888, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %2891 = zext i8 %output_zero to i16
  %2892 = insertelement <8 x i16> undef, i16 %2891, i32 0
  %2893 = shufflevector <8 x i16> %2892, <8 x i16> undef, <8 x i32> zeroinitializer
  %2894 = insertelement <8 x i8> undef, i8 %output_max, i32 0
  %2895 = shufflevector <8 x i8> %2894, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2896 = insertelement <8 x i8> undef, i8 %output_min, i32 0
  %2897 = shufflevector <8 x i8> %2896, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %2898 = zext i32 %t4022 to i64
  %2899 = sext i32 %b106 to i64
  %2900 = sext i32 %16 to i64
  %2901 = zext i32 %a103 to i64
  %2902 = sext i32 %t4022 to i64
  %2903 = zext i32 %t4005 to i64
  %2904 = sext i32 %18 to i64
  %2905 = zext i32 %t4021 to i64
  %2906 = sext i32 %t4021 to i64
  %2907 = zext i32 %t4009 to i64
  %2908 = zext i32 %t4011 to i64
  %2909 = zext i32 %t4086 to i64
  %2910 = zext i32 %a99 to i64
  %2911 = zext i32 %t4048 to i64
  %2912 = sext i32 %2845 to i64
  %2913 = zext i32 %2838 to i64
  %2914 = sext i32 %t4052 to i64
  %2915 = sext i32 %dilation_x to i64
  %2916 = sext i32 %9 to i64
  %2917 = zext i32 %8 to i64
  %2918 = sext i32 %11 to i64
  %2919 = zext i32 %10 to i64
  %2920 = sext i32 %7 to i64
  %2921 = zext i32 %t4013 to i64
  %2922 = sub i32 %t3989, %t3990
  %2923 = sext i32 %27 to i64
  %2924 = sext i32 %stride_y to i64
  %2925 = sext i32 %t3990 to i64
  %2926 = zext i32 %19 to i64
  %zext4167 = zext i32 %20 to i64
  %zext4162 = zext i32 %28 to i64
  %a113 = add nsw i32 %2922, 1
  %2927 = icmp sgt i32 %2922, -1
  %2928 = select i1 %2927, i32 %a113, i32 0
  %t4508 = zext i32 %2928 to i64
  %2929 = mul i64 %t4509, %t4508
  %2930 = add i64 %2929, 6
  %2931 = zext i32 %2922 to i64
  %2932 = zext i32 %2922 to i64
  %2933 = zext i32 %2922 to i64
  %2934 = zext i32 %2922 to i64
  %2935 = zext i32 %2922 to i64
  %2936 = add nsw i64 %2898, -1
  %2937 = add nsw i64 %2898, -1
  %2938 = add nsw i64 %2905, -1
  %2939 = add nsw i64 %2905, -1
  %2940 = add nsw i64 %2908, -1
  %2941 = and i64 %2909, 4294967232
  %2942 = add nsw i64 %2941, -64
  %2943 = lshr exact i64 %2942, 6
  %2944 = add nuw nsw i64 %2943, 1
  %2945 = add nsw i64 %2910, -1
  %2946 = or i32 %2922, %a103
  %2947 = icmp slt i32 %2946, 0
  %xtraiter5857 = and i64 %2898, 3
  %2948 = icmp ult i64 %2936, 3
  %unroll_iter5860 = and i64 %2898, 4294967292
  %lcmp.mod5859.not = icmp eq i64 %xtraiter5857, 0
  %xtraiter5862 = and i64 %2898, 3
  %2949 = icmp ult i64 %2937, 3
  %unroll_iter5865 = and i64 %2898, 4294967292
  %lcmp.mod5864.not = icmp eq i64 %xtraiter5862, 0
  %xtraiter5867 = and i64 %2905, 3
  %2950 = icmp ult i64 %2938, 3
  %unroll_iter5870 = and i64 %2905, 4294967292
  %lcmp.mod5869.not = icmp eq i64 %xtraiter5867, 0
  %xtraiter5872 = and i64 %2905, 3
  %2951 = icmp ult i64 %2939, 3
  %unroll_iter5875 = and i64 %2905, 4294967292
  %lcmp.mod5874.not = icmp eq i64 %xtraiter5872, 0
  %brmerge5002.demorgan = and i1 %2841, %2814
  %xtraiter5877 = and i64 %2908, 3
  %2952 = icmp ult i64 %2940, 3
  %unroll_iter5880 = and i64 %2908, 4294967292
  %lcmp.mod5879.not = icmp eq i64 %xtraiter5877, 0
  %brmerge5005.demorgan = and i1 %2841, %2814
  %min.iters.check5296 = icmp ult i32 %t4086, 8
  %min.iters.check5299 = icmp ult i32 %t4086, 64
  %n.vec5303 = and i64 %2909, 4294967232
  %broadcast.splatinsert5311 = insertelement <16 x i16> poison, i16 %2861, i32 0
  %broadcast.splat5312 = shufflevector <16 x i16> %broadcast.splatinsert5311, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5313 = insertelement <16 x i16> poison, i16 %2861, i32 0
  %broadcast.splat5314 = shufflevector <16 x i16> %broadcast.splatinsert5313, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5315 = insertelement <16 x i16> poison, i16 %2861, i32 0
  %broadcast.splat5316 = shufflevector <16 x i16> %broadcast.splatinsert5315, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5317 = insertelement <16 x i16> poison, i16 %2861, i32 0
  %broadcast.splat5318 = shufflevector <16 x i16> %broadcast.splatinsert5317, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter5882 = and i64 %2944, 1
  %2953 = icmp eq i64 %2942, 0
  %unroll_iter5884 = and i64 %2944, 576460752303423486
  %lcmp.mod5883.not = icmp eq i64 %xtraiter5882, 0
  %cmp.n5306 = icmp eq i64 %n.vec5303, %2909
  %n.vec.remaining5324 = and i64 %2909, 56
  %min.epilog.iters.check5325 = icmp eq i64 %n.vec.remaining5324, 0
  %n.vec5328 = and i64 %2909, 4294967288
  %broadcast.splatinsert5334 = insertelement <8 x i16> poison, i16 %2861, i32 0
  %broadcast.splat5335 = shufflevector <8 x i16> %broadcast.splatinsert5334, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5332 = icmp eq i64 %n.vec5328, %2909
  %xtraiter5886 = and i64 %2910, 3
  %2954 = icmp ult i64 %2945, 3
  %unroll_iter5889 = and i64 %2910, 4294967292
  %lcmp.mod5888.not = icmp eq i64 %xtraiter5886, 0
  %2955 = insertelement <8 x i32> poison, i32 %stride_x, i32 0
  %2956 = shufflevector <8 x i32> %2955, <8 x i32> undef, <8 x i32> zeroinitializer
  %2957 = insertelement <8 x i32> poison, i32 %b106, i32 0
  %2958 = shufflevector <8 x i32> %2957, <8 x i32> undef, <8 x i32> zeroinitializer
  %2959 = insertelement <8 x i32> poison, i32 %26, i32 0
  %2960 = shufflevector <8 x i32> %2959, <8 x i32> undef, <8 x i32> zeroinitializer
  %2961 = insertelement <8 x i64> poison, i64 %2912, i32 0
  %2962 = shufflevector <8 x i64> %2961, <8 x i64> undef, <8 x i32> zeroinitializer
  br label %"for output.s0.b.rebased160"

next_bb159:                                       ; preds = %next_bb55
  br i1 %49, label %then_bb262, label %next_bb263

"for output.s0.b.rebased160":                     ; preds = %"for output.s0.b.rebased160.preheader", %"end for output.s0.y.rebased164"
  %indvars.iv4163 = phi i64 [ 0, %"for output.s0.b.rebased160.preheader" ], [ %indvars.iv.next4164, %"end for output.s0.y.rebased164" ]
  %convolved1914.sroa.0.25 = phi <8 x i32> [ undef, %"for output.s0.b.rebased160.preheader" ], [ %convolved1914.sroa.0.27, %"end for output.s0.y.rebased164" ]
  %2963 = add nuw i64 %indvars.iv4163, %2926
  %2964 = trunc i64 %2963 to i32
  %2965 = mul i32 %21, %2964
  br i1 %2839, label %"for output.s0.y.rebased163.preheader", label %"end for output.s0.y.rebased164", !prof !387

"for output.s0.y.rebased163.preheader":           ; preds = %"for output.s0.b.rebased160"
  %t4043 = sub i32 %2965, %2835
  %t4034 = add i32 %t4001.neg, %2965
  %2966 = sext i32 %t4043 to i64
  %2967 = trunc i64 %2963 to i32
  %2968 = mul i32 %30, %2967
  br label %"for output.s0.y.rebased163"

"for output.s0.y.rebased163":                     ; preds = %"for output.s0.y.rebased163.preheader", %call_destructor.exit2424
  %indvars.iv4158 = phi i64 [ 0, %"for output.s0.y.rebased163.preheader" ], [ %indvars.iv.next4159, %call_destructor.exit2424 ]
  %convolved1914.sroa.0.26 = phi <8 x i32> [ %convolved1914.sroa.0.25, %"for output.s0.y.rebased163.preheader" ], [ %convolved1914.sroa.0.29, %call_destructor.exit2424 ]
  %2969 = add nsw i64 %indvars.iv4158, %2923
  %2970 = mul nsw i64 %2969, %2924
  %2971 = add nsw i64 %2970, %2925
  %2972 = call i8* @halide_malloc(i8* null, i64 %2930)
  %input_wrapper166 = bitcast i8* %2972 to i16*
  br i1 %t4025, label %then_bb169, label %next_bb170

"end for output.s0.y.rebased164":                 ; preds = %call_destructor.exit2424, %"for output.s0.b.rebased160"
  %convolved1914.sroa.0.27 = phi <8 x i32> [ %convolved1914.sroa.0.25, %"for output.s0.b.rebased160" ], [ %convolved1914.sroa.0.29, %call_destructor.exit2424 ]
  %indvars.iv.next4164 = add nuw nsw i64 %indvars.iv4163, 1
  %2973 = icmp eq i64 %indvars.iv.next4164, %zext4167
  br i1 %2973, label %after_bb1, label %"for output.s0.b.rebased160"

then_bb169:                                       ; preds = %"for output.s0.y.rebased163"
  br i1 %2927, label %"for input_wrapper.s0.y.rebased171", label %"consume input_wrapper243", !prof !387

next_bb170:                                       ; preds = %"for output.s0.y.rebased163"
  br i1 %2793, label %next_bb190, label %then_bb189

"for input_wrapper.s0.y.rebased171":              ; preds = %then_bb169, %"end for input_wrapper.s0.x.x.rebased181"
  %indvars.iv4135 = phi i64 [ %indvars.iv.next4136, %"end for input_wrapper.s0.x.x.rebased181" ], [ 0, %then_bb169 ]
  %2974 = mul nsw i64 %indvars.iv4135, %2914
  %2975 = add nsw i64 %indvars.iv4135, %2971
  %2976 = trunc i64 %2975 to i32
  %2977 = mul i32 %18, %2976
  %t4061 = add i32 %t4034, %2977
  br i1 %2833, label %"for input_wrapper.s0.x.x174.preheader", label %"end for input_wrapper.s0.x.x175", !prof !387

"for input_wrapper.s0.x.x174.preheader":          ; preds = %"for input_wrapper.s0.y.rebased171"
  %2978 = sext i32 %t4061 to i64
  br i1 %2814, label %"for input_wrapper.s0.x.x174.us.preheader", label %"end for input_wrapper.s0.x.x.rebased181", !prof !387

"for input_wrapper.s0.x.x174.us.preheader":       ; preds = %"for input_wrapper.s0.x.x174.preheader"
  %2979 = trunc i64 %2974 to i32
  br label %"for input_wrapper.s0.x.x174.us"

"for input_wrapper.s0.x.x174.us":                 ; preds = %"for input_wrapper.s0.x.x174.us.preheader", %"end for input_wrapper.s0.c.c178.loopexit.us"
  %indvars.iv4125 = phi i64 [ 0, %"for input_wrapper.s0.x.x174.us.preheader" ], [ %indvars.iv.next4126, %"end for input_wrapper.s0.c.c178.loopexit.us" ]
  %2980 = trunc i64 %indvars.iv4125 to i32
  %t4068.us = mul i32 %2862, %2980
  %2981 = shl nsw i64 %indvars.iv4125, 3
  %2982 = add nsw i64 %2981, %2899
  br label %"for input_wrapper.s0.c.c177.us"

"for input_wrapper.s0.c.c177.us":                 ; preds = %"for input_wrapper.s0.x.x174.us", %"for input_wrapper.s0.c.c177.us"
  %indvars.iv4122 = phi i64 [ 0, %"for input_wrapper.s0.x.x174.us" ], [ %indvars.iv.next4123, %"for input_wrapper.s0.c.c177.us" ]
  %2983 = add nsw i64 %indvars.iv4122, %2982
  %2984 = shl nsw i64 %2983, 2
  %2985 = add nsw i64 %2984, %2978
  %2986 = getelementptr inbounds i8, i8* %12, i64 %2985
  %2987 = bitcast i8* %2986 to <32 x i8>*
  %2988 = load <32 x i8>, <32 x i8>* %2987, align 4, !tbaa !397
  %2989 = zext <32 x i8> %2988 to <32 x i16>
  %2990 = sub nsw <32 x i16> %2989, %2871
  %2991 = trunc i64 %indvars.iv4122 to i32
  %2992 = add i32 %t4068.us, %2991
  %2993 = shl nsw i32 %2992, 2
  %2994 = add i32 %2993, %2979
  %2995 = insertelement <4 x i32> undef, i32 %2994, i32 0
  %2996 = shufflevector <4 x i32> %2995, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %2997 = add <4 x i32> %2996, <i32 poison, i32 1, i32 2, i32 3>
  %2998 = add i32 %2994, 1
  %2999 = add i32 %2998, %a111
  %3000 = insertelement <4 x i32> undef, i32 %2999, i32 0
  %3001 = shufflevector <4 x i32> %3000, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3002 = add <4 x i32> %3001, <i32 poison, i32 1, i32 2, i32 3>
  %3003 = add i32 %2994, 2
  %3004 = add i32 %3003, %2868
  %3005 = insertelement <4 x i32> undef, i32 %3004, i32 0
  %3006 = shufflevector <4 x i32> %3005, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3007 = add <4 x i32> %3006, <i32 poison, i32 1, i32 2, i32 3>
  %3008 = add i32 %2994, 3
  %3009 = add i32 %3008, %2867
  %3010 = insertelement <4 x i32> undef, i32 %3009, i32 0
  %3011 = shufflevector <4 x i32> %3010, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3012 = add <4 x i32> %3011, <i32 poison, i32 1, i32 2, i32 3>
  %3013 = add i32 %2994, 4
  %3014 = add i32 %3013, %2866
  %3015 = insertelement <4 x i32> undef, i32 %3014, i32 0
  %3016 = shufflevector <4 x i32> %3015, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3017 = add <4 x i32> %3016, <i32 poison, i32 1, i32 2, i32 3>
  %3018 = add i32 %2994, 5
  %3019 = add i32 %3018, %2865
  %3020 = insertelement <4 x i32> undef, i32 %3019, i32 0
  %3021 = shufflevector <4 x i32> %3020, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3022 = add <4 x i32> %3021, <i32 poison, i32 1, i32 2, i32 3>
  %3023 = add i32 %2994, 6
  %3024 = add i32 %3023, %2864
  %3025 = insertelement <4 x i32> undef, i32 %3024, i32 0
  %3026 = shufflevector <4 x i32> %3025, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3027 = add <4 x i32> %3026, <i32 poison, i32 1, i32 2, i32 3>
  %3028 = add i32 %2994, 7
  %3029 = add i32 %3028, %2863
  %3030 = insertelement <4 x i32> undef, i32 %3029, i32 0
  %3031 = shufflevector <4 x i32> %3030, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %3032 = add <4 x i32> %3031, <i32 poison, i32 1, i32 2, i32 3>
  %3033 = extractelement <32 x i16> %2990, i32 0
  %3034 = sext i32 %2994 to i64
  %3035 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3034
  store i16 %3033, i16* %3035, align 2, !tbaa !399
  %3036 = extractelement <4 x i32> %2997, i32 1
  %3037 = extractelement <32 x i16> %2990, i32 1
  %3038 = sext i32 %3036 to i64
  %3039 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3038
  store i16 %3037, i16* %3039, align 2, !tbaa !399
  %3040 = extractelement <4 x i32> %2997, i32 2
  %3041 = extractelement <32 x i16> %2990, i32 2
  %3042 = sext i32 %3040 to i64
  %3043 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3042
  store i16 %3041, i16* %3043, align 2, !tbaa !399
  %3044 = extractelement <4 x i32> %2997, i32 3
  %3045 = extractelement <32 x i16> %2990, i32 3
  %3046 = sext i32 %3044 to i64
  %3047 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3046
  store i16 %3045, i16* %3047, align 2, !tbaa !399
  %3048 = extractelement <32 x i16> %2990, i32 4
  %3049 = sext i32 %2999 to i64
  %3050 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3049
  store i16 %3048, i16* %3050, align 2, !tbaa !399
  %3051 = extractelement <4 x i32> %3002, i32 1
  %3052 = extractelement <32 x i16> %2990, i32 5
  %3053 = sext i32 %3051 to i64
  %3054 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3053
  store i16 %3052, i16* %3054, align 2, !tbaa !399
  %3055 = extractelement <4 x i32> %3002, i32 2
  %3056 = extractelement <32 x i16> %2990, i32 6
  %3057 = sext i32 %3055 to i64
  %3058 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3057
  store i16 %3056, i16* %3058, align 2, !tbaa !399
  %3059 = extractelement <4 x i32> %3002, i32 3
  %3060 = extractelement <32 x i16> %2990, i32 7
  %3061 = sext i32 %3059 to i64
  %3062 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3061
  store i16 %3060, i16* %3062, align 2, !tbaa !399
  %3063 = extractelement <32 x i16> %2990, i32 8
  %3064 = sext i32 %3004 to i64
  %3065 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3064
  store i16 %3063, i16* %3065, align 2, !tbaa !399
  %3066 = extractelement <4 x i32> %3007, i32 1
  %3067 = extractelement <32 x i16> %2990, i32 9
  %3068 = sext i32 %3066 to i64
  %3069 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3068
  store i16 %3067, i16* %3069, align 2, !tbaa !399
  %3070 = extractelement <4 x i32> %3007, i32 2
  %3071 = extractelement <32 x i16> %2990, i32 10
  %3072 = sext i32 %3070 to i64
  %3073 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3072
  store i16 %3071, i16* %3073, align 2, !tbaa !399
  %3074 = extractelement <4 x i32> %3007, i32 3
  %3075 = extractelement <32 x i16> %2990, i32 11
  %3076 = sext i32 %3074 to i64
  %3077 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3076
  store i16 %3075, i16* %3077, align 2, !tbaa !399
  %3078 = extractelement <32 x i16> %2990, i32 12
  %3079 = sext i32 %3009 to i64
  %3080 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3079
  store i16 %3078, i16* %3080, align 2, !tbaa !399
  %3081 = extractelement <4 x i32> %3012, i32 1
  %3082 = extractelement <32 x i16> %2990, i32 13
  %3083 = sext i32 %3081 to i64
  %3084 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3083
  store i16 %3082, i16* %3084, align 2, !tbaa !399
  %3085 = extractelement <4 x i32> %3012, i32 2
  %3086 = extractelement <32 x i16> %2990, i32 14
  %3087 = sext i32 %3085 to i64
  %3088 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3087
  store i16 %3086, i16* %3088, align 2, !tbaa !399
  %3089 = extractelement <4 x i32> %3012, i32 3
  %3090 = extractelement <32 x i16> %2990, i32 15
  %3091 = sext i32 %3089 to i64
  %3092 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3091
  store i16 %3090, i16* %3092, align 2, !tbaa !399
  %3093 = extractelement <32 x i16> %2990, i32 16
  %3094 = sext i32 %3014 to i64
  %3095 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3094
  store i16 %3093, i16* %3095, align 2, !tbaa !399
  %3096 = extractelement <4 x i32> %3017, i32 1
  %3097 = extractelement <32 x i16> %2990, i32 17
  %3098 = sext i32 %3096 to i64
  %3099 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3098
  store i16 %3097, i16* %3099, align 2, !tbaa !399
  %3100 = extractelement <4 x i32> %3017, i32 2
  %3101 = extractelement <32 x i16> %2990, i32 18
  %3102 = sext i32 %3100 to i64
  %3103 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3102
  store i16 %3101, i16* %3103, align 2, !tbaa !399
  %3104 = extractelement <4 x i32> %3017, i32 3
  %3105 = extractelement <32 x i16> %2990, i32 19
  %3106 = sext i32 %3104 to i64
  %3107 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3106
  store i16 %3105, i16* %3107, align 2, !tbaa !399
  %3108 = extractelement <32 x i16> %2990, i32 20
  %3109 = sext i32 %3019 to i64
  %3110 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3109
  store i16 %3108, i16* %3110, align 2, !tbaa !399
  %3111 = extractelement <4 x i32> %3022, i32 1
  %3112 = extractelement <32 x i16> %2990, i32 21
  %3113 = sext i32 %3111 to i64
  %3114 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3113
  store i16 %3112, i16* %3114, align 2, !tbaa !399
  %3115 = extractelement <4 x i32> %3022, i32 2
  %3116 = extractelement <32 x i16> %2990, i32 22
  %3117 = sext i32 %3115 to i64
  %3118 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3117
  store i16 %3116, i16* %3118, align 2, !tbaa !399
  %3119 = extractelement <4 x i32> %3022, i32 3
  %3120 = extractelement <32 x i16> %2990, i32 23
  %3121 = sext i32 %3119 to i64
  %3122 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3121
  store i16 %3120, i16* %3122, align 2, !tbaa !399
  %3123 = extractelement <32 x i16> %2990, i32 24
  %3124 = sext i32 %3024 to i64
  %3125 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3124
  store i16 %3123, i16* %3125, align 2, !tbaa !399
  %3126 = extractelement <4 x i32> %3027, i32 1
  %3127 = extractelement <32 x i16> %2990, i32 25
  %3128 = sext i32 %3126 to i64
  %3129 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3128
  store i16 %3127, i16* %3129, align 2, !tbaa !399
  %3130 = extractelement <4 x i32> %3027, i32 2
  %3131 = extractelement <32 x i16> %2990, i32 26
  %3132 = sext i32 %3130 to i64
  %3133 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3132
  store i16 %3131, i16* %3133, align 2, !tbaa !399
  %3134 = extractelement <4 x i32> %3027, i32 3
  %3135 = extractelement <32 x i16> %2990, i32 27
  %3136 = sext i32 %3134 to i64
  %3137 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3136
  store i16 %3135, i16* %3137, align 2, !tbaa !399
  %3138 = extractelement <32 x i16> %2990, i32 28
  %3139 = sext i32 %3029 to i64
  %3140 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3139
  store i16 %3138, i16* %3140, align 2, !tbaa !399
  %3141 = extractelement <4 x i32> %3032, i32 1
  %3142 = extractelement <32 x i16> %2990, i32 29
  %3143 = sext i32 %3141 to i64
  %3144 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3143
  store i16 %3142, i16* %3144, align 2, !tbaa !399
  %3145 = extractelement <4 x i32> %3032, i32 2
  %3146 = extractelement <32 x i16> %2990, i32 30
  %3147 = sext i32 %3145 to i64
  %3148 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3147
  store i16 %3146, i16* %3148, align 2, !tbaa !399
  %3149 = extractelement <4 x i32> %3032, i32 3
  %3150 = extractelement <32 x i16> %2990, i32 31
  %3151 = sext i32 %3149 to i64
  %3152 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3151
  store i16 %3150, i16* %3152, align 2, !tbaa !399
  %indvars.iv.next4123 = add nuw nsw i64 %indvars.iv4122, 1
  %.not2163.us = icmp eq i64 %indvars.iv.next4123, %2910
  br i1 %.not2163.us, label %"end for input_wrapper.s0.c.c178.loopexit.us", label %"for input_wrapper.s0.c.c177.us"

"end for input_wrapper.s0.c.c178.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c177.us"
  %indvars.iv.next4126 = add nuw nsw i64 %indvars.iv4125, 1
  %.not2162.us = icmp eq i64 %indvars.iv.next4126, %2911
  br i1 %.not2162.us, label %"end for input_wrapper.s0.x.x175", label %"for input_wrapper.s0.x.x174.us"

"end for input_wrapper.s0.x.x175":                ; preds = %"end for input_wrapper.s0.c.c178.loopexit.us", %"for input_wrapper.s0.y.rebased171"
  br i1 %2872, label %"for input_wrapper.s0.x.x.rebased180.preheader", label %"end for input_wrapper.s0.x.x.rebased181", !prof !387

"for input_wrapper.s0.x.x.rebased180.preheader":  ; preds = %"end for input_wrapper.s0.x.x175"
  %3153 = sext i32 %t4061 to i64
  br i1 %2814, label %"for input_wrapper.s0.x.x.rebased180.us", label %"end for input_wrapper.s0.x.x.rebased181", !prof !387

"for input_wrapper.s0.x.x.rebased180.us":         ; preds = %"for input_wrapper.s0.x.x.rebased180.preheader", %"end for input_wrapper.s0.x.v21184.us"
  %indvars.iv4133 = phi i64 [ %indvars.iv.next4134, %"end for input_wrapper.s0.x.v21184.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased180.preheader" ]
  %3154 = trunc i64 %indvars.iv4133 to i32
  %3155 = add i32 %t4048, %3154
  %3156 = shl nsw i32 %3155, 3
  %a115.us = sub nsw i32 %a103, %3156
  %3157 = icmp slt i32 %a115.us, 7
  %t4079.us = select i1 %3157, i32 %a115.us, i32 7
  %3158 = icmp sgt i32 %t4079.us, -1
  br i1 %3158, label %"for input_wrapper.s0.x.v21183.us.us.preheader", label %"end for input_wrapper.s0.x.v21184.us", !prof !387

"for input_wrapper.s0.x.v21183.us.us.preheader":  ; preds = %"for input_wrapper.s0.x.x.rebased180.us"
  %3159 = sext i32 %3156 to i64
  %3160 = zext i32 %t4079.us to i64
  br label %"for input_wrapper.s0.x.v21183.us.us"

"end for input_wrapper.s0.x.v21184.us":           ; preds = %"end for input_wrapper.s0.c.c187.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased180.us"
  %indvars.iv.next4134 = add nuw nsw i64 %indvars.iv4133, 1
  %.not2159.us = icmp eq i64 %indvars.iv4133, %2913
  br i1 %.not2159.us, label %"end for input_wrapper.s0.x.x.rebased181", label %"for input_wrapper.s0.x.x.rebased180.us"

"for input_wrapper.s0.x.v21183.us.us":            ; preds = %"for input_wrapper.s0.x.v21183.us.us.preheader", %"end for input_wrapper.s0.c.c187.loopexit.us.us"
  %indvars.iv4130 = phi i64 [ 0, %"for input_wrapper.s0.x.v21183.us.us.preheader" ], [ %indvars.iv.next4131, %"end for input_wrapper.s0.c.c187.loopexit.us.us" ]
  %3161 = add nsw i64 %indvars.iv4130, %3159
  %3162 = mul nsw i64 %3161, %2912
  %3163 = add nsw i64 %3162, %2974
  %3164 = trunc i64 %3161 to i32
  %t4081.us.us = add i32 %b106, %3164
  %3165 = sext i32 %t4081.us.us to i64
  br i1 %2954, label %"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c186.us.us"

"for input_wrapper.s0.c.c186.us.us":              ; preds = %"for input_wrapper.s0.x.v21183.us.us", %"for input_wrapper.s0.c.c186.us.us"
  %indvars.iv4128 = phi i64 [ %indvars.iv.next4129.3, %"for input_wrapper.s0.c.c186.us.us" ], [ 0, %"for input_wrapper.s0.x.v21183.us.us" ]
  %niter5890 = phi i64 [ %niter5890.nsub.3, %"for input_wrapper.s0.c.c186.us.us" ], [ %unroll_iter5889, %"for input_wrapper.s0.x.v21183.us.us" ]
  %3166 = add nsw i64 %indvars.iv4128, %3165
  %3167 = shl nsw i64 %3166, 2
  %3168 = add nsw i64 %3167, %3153
  %3169 = getelementptr inbounds i8, i8* %12, i64 %3168
  %3170 = bitcast i8* %3169 to <4 x i8>*
  %3171 = load <4 x i8>, <4 x i8>* %3170, align 4, !tbaa !397
  %3172 = zext <4 x i8> %3171 to <4 x i16>
  %3173 = sub nsw <4 x i16> %3172, %2860
  %3174 = shl nuw nsw i64 %indvars.iv4128, 2
  %3175 = add nsw i64 %3174, %3163
  %3176 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3175
  %3177 = bitcast i16* %3176 to <4 x i16>*
  store <4 x i16> %3173, <4 x i16>* %3177, align 8, !tbaa !399
  %indvars.iv.next4129 = or i64 %indvars.iv4128, 1
  %3178 = add nsw i64 %indvars.iv.next4129, %3165
  %3179 = shl nsw i64 %3178, 2
  %3180 = add nsw i64 %3179, %3153
  %3181 = getelementptr inbounds i8, i8* %12, i64 %3180
  %3182 = bitcast i8* %3181 to <4 x i8>*
  %3183 = load <4 x i8>, <4 x i8>* %3182, align 4, !tbaa !397
  %3184 = zext <4 x i8> %3183 to <4 x i16>
  %3185 = sub nsw <4 x i16> %3184, %2860
  %3186 = shl nuw nsw i64 %indvars.iv.next4129, 2
  %3187 = add nsw i64 %3186, %3163
  %3188 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3187
  %3189 = bitcast i16* %3188 to <4 x i16>*
  store <4 x i16> %3185, <4 x i16>* %3189, align 8, !tbaa !399
  %indvars.iv.next4129.1 = or i64 %indvars.iv4128, 2
  %3190 = add nsw i64 %indvars.iv.next4129.1, %3165
  %3191 = shl nsw i64 %3190, 2
  %3192 = add nsw i64 %3191, %3153
  %3193 = getelementptr inbounds i8, i8* %12, i64 %3192
  %3194 = bitcast i8* %3193 to <4 x i8>*
  %3195 = load <4 x i8>, <4 x i8>* %3194, align 4, !tbaa !397
  %3196 = zext <4 x i8> %3195 to <4 x i16>
  %3197 = sub nsw <4 x i16> %3196, %2860
  %3198 = shl nuw nsw i64 %indvars.iv.next4129.1, 2
  %3199 = add nsw i64 %3198, %3163
  %3200 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3199
  %3201 = bitcast i16* %3200 to <4 x i16>*
  store <4 x i16> %3197, <4 x i16>* %3201, align 8, !tbaa !399
  %indvars.iv.next4129.2 = or i64 %indvars.iv4128, 3
  %3202 = add nsw i64 %indvars.iv.next4129.2, %3165
  %3203 = shl nsw i64 %3202, 2
  %3204 = add nsw i64 %3203, %3153
  %3205 = getelementptr inbounds i8, i8* %12, i64 %3204
  %3206 = bitcast i8* %3205 to <4 x i8>*
  %3207 = load <4 x i8>, <4 x i8>* %3206, align 4, !tbaa !397
  %3208 = zext <4 x i8> %3207 to <4 x i16>
  %3209 = sub nsw <4 x i16> %3208, %2860
  %3210 = shl nuw nsw i64 %indvars.iv.next4129.2, 2
  %3211 = add nsw i64 %3210, %3163
  %3212 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3211
  %3213 = bitcast i16* %3212 to <4 x i16>*
  store <4 x i16> %3209, <4 x i16>* %3213, align 8, !tbaa !399
  %indvars.iv.next4129.3 = add nuw nsw i64 %indvars.iv4128, 4
  %niter5890.nsub.3 = add i64 %niter5890, -4
  %niter5890.ncmp.3 = icmp eq i64 %niter5890.nsub.3, 0
  br i1 %niter5890.ncmp.3, label %"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c186.us.us"

"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c186.us.us", %"for input_wrapper.s0.x.v21183.us.us"
  %indvars.iv4128.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v21183.us.us" ], [ %indvars.iv.next4129.3, %"for input_wrapper.s0.c.c186.us.us" ]
  br i1 %lcmp.mod5888.not, label %"end for input_wrapper.s0.c.c187.loopexit.us.us", label %"for input_wrapper.s0.c.c186.us.us.epil"

"for input_wrapper.s0.c.c186.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c186.us.us.epil"
  %indvars.iv4128.epil = phi i64 [ %indvars.iv.next4129.epil, %"for input_wrapper.s0.c.c186.us.us.epil" ], [ %indvars.iv4128.unr, %"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa" ]
  %epil.iter5887 = phi i64 [ %epil.iter5887.sub, %"for input_wrapper.s0.c.c186.us.us.epil" ], [ %xtraiter5886, %"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa" ]
  %3214 = add nsw i64 %indvars.iv4128.epil, %3165
  %3215 = shl nsw i64 %3214, 2
  %3216 = add nsw i64 %3215, %3153
  %3217 = getelementptr inbounds i8, i8* %12, i64 %3216
  %3218 = bitcast i8* %3217 to <4 x i8>*
  %3219 = load <4 x i8>, <4 x i8>* %3218, align 4, !tbaa !397
  %3220 = zext <4 x i8> %3219 to <4 x i16>
  %3221 = sub nsw <4 x i16> %3220, %2860
  %3222 = shl nuw nsw i64 %indvars.iv4128.epil, 2
  %3223 = add nsw i64 %3222, %3163
  %3224 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3223
  %3225 = bitcast i16* %3224 to <4 x i16>*
  store <4 x i16> %3221, <4 x i16>* %3225, align 8, !tbaa !399
  %indvars.iv.next4129.epil = add nuw nsw i64 %indvars.iv4128.epil, 1
  %epil.iter5887.sub = add i64 %epil.iter5887, -1
  %epil.iter5887.cmp.not = icmp eq i64 %epil.iter5887.sub, 0
  br i1 %epil.iter5887.cmp.not, label %"end for input_wrapper.s0.c.c187.loopexit.us.us", label %"for input_wrapper.s0.c.c186.us.us.epil", !llvm.loop !425

"end for input_wrapper.s0.c.c187.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c186.us.us.epil", %"end for input_wrapper.s0.c.c187.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4131 = add nuw nsw i64 %indvars.iv4130, 1
  %.not2160.us.us = icmp eq i64 %indvars.iv4130, %3160
  br i1 %.not2160.us.us, label %"end for input_wrapper.s0.x.v21184.us", label %"for input_wrapper.s0.x.v21183.us.us"

"end for input_wrapper.s0.x.x.rebased181":        ; preds = %"end for input_wrapper.s0.x.v21184.us", %"for input_wrapper.s0.x.x174.preheader", %"for input_wrapper.s0.x.x.rebased180.preheader", %"end for input_wrapper.s0.x.x175"
  %indvars.iv.next4136 = add nuw nsw i64 %indvars.iv4135, 1
  %.not2158 = icmp eq i64 %indvars.iv4135, %2935
  br i1 %.not2158, label %"consume input_wrapper243", label %"for input_wrapper.s0.y.rebased171"

then_bb189:                                       ; preds = %next_bb170
  br i1 %2947, label %"consume input_wrapper243", label %"for input_wrapper.s0.y.rebased191.us", !prof !402

"for input_wrapper.s0.y.rebased191.us":           ; preds = %then_bb189, %"end for input_wrapper.s0.x.rebased195.loopexit.us"
  %indvars.iv4088 = phi i64 [ %indvars.iv.next4089, %"end for input_wrapper.s0.x.rebased195.loopexit.us" ], [ 0, %then_bb189 ]
  %3226 = trunc i64 %indvars.iv4088 to i32
  %t4088.us = mul i32 %2832, %3226
  %3227 = add nsw i64 %indvars.iv4088, %2971
  %3228 = mul nsw i64 %3227, %2904
  %3229 = add nsw i64 %3228, %2966
  br i1 %2849, label %"for input_wrapper.s0.x.rebased194.us.us", label %"for input_wrapper.s0.x.rebased194.preheader.split.us3159", !prof !387

"for input_wrapper.s0.x.rebased194.preheader.split.us3159": ; preds = %"for input_wrapper.s0.y.rebased191.us"
  br i1 %2788, label %"for input_wrapper.s0.x.rebased194.us3143.us", label %"end for input_wrapper.s0.x.rebased195.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased195.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c198.loopexit.us3154.us", %"end for input_wrapper.s0.c.c.rebased201.loopexit.us.us", %"for input_wrapper.s0.x.rebased194.preheader.split.us3159"
  %indvars.iv.next4089 = add nuw nsw i64 %indvars.iv4088, 1
  %.not2153.us = icmp eq i64 %indvars.iv4088, %2931
  br i1 %.not2153.us, label %"consume input_wrapper243", label %"for input_wrapper.s0.y.rebased191.us"

"for input_wrapper.s0.x.rebased194.us.us":        ; preds = %"for input_wrapper.s0.y.rebased191.us", %"end for input_wrapper.s0.c.c.rebased201.loopexit.us.us"
  %indvars.iv4085 = phi i64 [ %indvars.iv.next4086, %"end for input_wrapper.s0.c.c.rebased201.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased191.us" ]
  %3230 = trunc i64 %indvars.iv4085 to i32
  %reass.add2693.us.us = add i32 %t4088.us, %3230
  %reass.mul2694.us.us = mul i32 %reass.add2693.us.us, %2845
  %3231 = add nsw i64 %indvars.iv4085, %2899
  %3232 = mul nsw i64 %3231, %2900
  %3233 = add nsw i64 %3229, %3232
  %3234 = sext i32 %reass.mul2694.us.us to i64
  br i1 %2788, label %"for input_wrapper.s0.c.c197.us.us.preheader", label %"end for input_wrapper.s0.c.c198.us.us", !prof !387

"for input_wrapper.s0.c.c197.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.rebased194.us.us"
  br i1 %2949, label %"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c197.us.us"

"for input_wrapper.s0.c.c197.us.us":              ; preds = %"for input_wrapper.s0.c.c197.us.us.preheader", %"for input_wrapper.s0.c.c197.us.us"
  %indvars.iv4081 = phi i64 [ %indvars.iv.next4082.3, %"for input_wrapper.s0.c.c197.us.us" ], [ 0, %"for input_wrapper.s0.c.c197.us.us.preheader" ]
  %niter5866 = phi i64 [ %niter5866.nsub.3, %"for input_wrapper.s0.c.c197.us.us" ], [ %unroll_iter5865, %"for input_wrapper.s0.c.c197.us.us.preheader" ]
  %3235 = shl nuw nsw i64 %indvars.iv4081, 4
  %3236 = add nsw i64 %3235, %3233
  %3237 = getelementptr inbounds i8, i8* %12, i64 %3236
  %3238 = bitcast i8* %3237 to <16 x i8>*
  %3239 = load <16 x i8>, <16 x i8>* %3238, align 4, !tbaa !397
  %3240 = zext <16 x i8> %3239 to <16 x i16>
  %3241 = sub nsw <16 x i16> %3240, %2848
  %3242 = add nsw i64 %3235, %3234
  %3243 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3242
  %3244 = bitcast i16* %3243 to <16 x i16>*
  store <16 x i16> %3241, <16 x i16>* %3244, align 8, !tbaa !399
  %indvars.iv.next4082 = shl i64 %indvars.iv4081, 4
  %3245 = or i64 %indvars.iv.next4082, 16
  %3246 = add nsw i64 %3245, %3233
  %3247 = getelementptr inbounds i8, i8* %12, i64 %3246
  %3248 = bitcast i8* %3247 to <16 x i8>*
  %3249 = load <16 x i8>, <16 x i8>* %3248, align 4, !tbaa !397
  %3250 = zext <16 x i8> %3249 to <16 x i16>
  %3251 = sub nsw <16 x i16> %3250, %2848
  %3252 = add nsw i64 %3245, %3234
  %3253 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3252
  %3254 = bitcast i16* %3253 to <16 x i16>*
  store <16 x i16> %3251, <16 x i16>* %3254, align 8, !tbaa !399
  %indvars.iv.next4082.1 = shl i64 %indvars.iv4081, 4
  %3255 = or i64 %indvars.iv.next4082.1, 32
  %3256 = add nsw i64 %3255, %3233
  %3257 = getelementptr inbounds i8, i8* %12, i64 %3256
  %3258 = bitcast i8* %3257 to <16 x i8>*
  %3259 = load <16 x i8>, <16 x i8>* %3258, align 4, !tbaa !397
  %3260 = zext <16 x i8> %3259 to <16 x i16>
  %3261 = sub nsw <16 x i16> %3260, %2848
  %3262 = add nsw i64 %3255, %3234
  %3263 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3262
  %3264 = bitcast i16* %3263 to <16 x i16>*
  store <16 x i16> %3261, <16 x i16>* %3264, align 8, !tbaa !399
  %indvars.iv.next4082.2 = shl i64 %indvars.iv4081, 4
  %3265 = or i64 %indvars.iv.next4082.2, 48
  %3266 = add nsw i64 %3265, %3233
  %3267 = getelementptr inbounds i8, i8* %12, i64 %3266
  %3268 = bitcast i8* %3267 to <16 x i8>*
  %3269 = load <16 x i8>, <16 x i8>* %3268, align 4, !tbaa !397
  %3270 = zext <16 x i8> %3269 to <16 x i16>
  %3271 = sub nsw <16 x i16> %3270, %2848
  %3272 = add nsw i64 %3265, %3234
  %3273 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3272
  %3274 = bitcast i16* %3273 to <16 x i16>*
  store <16 x i16> %3271, <16 x i16>* %3274, align 8, !tbaa !399
  %indvars.iv.next4082.3 = add nuw nsw i64 %indvars.iv4081, 4
  %niter5866.nsub.3 = add i64 %niter5866, -4
  %niter5866.ncmp.3 = icmp eq i64 %niter5866.nsub.3, 0
  br i1 %niter5866.ncmp.3, label %"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c197.us.us"

"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c197.us.us", %"for input_wrapper.s0.c.c197.us.us.preheader"
  %indvars.iv4081.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c197.us.us.preheader" ], [ %indvars.iv.next4082.3, %"for input_wrapper.s0.c.c197.us.us" ]
  br i1 %lcmp.mod5864.not, label %"end for input_wrapper.s0.c.c198.us.us", label %"for input_wrapper.s0.c.c197.us.us.epil"

"for input_wrapper.s0.c.c197.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c197.us.us.epil"
  %indvars.iv4081.epil = phi i64 [ %indvars.iv.next4082.epil, %"for input_wrapper.s0.c.c197.us.us.epil" ], [ %indvars.iv4081.unr, %"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa" ]
  %epil.iter5863 = phi i64 [ %epil.iter5863.sub, %"for input_wrapper.s0.c.c197.us.us.epil" ], [ %xtraiter5862, %"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa" ]
  %3275 = shl nuw nsw i64 %indvars.iv4081.epil, 4
  %3276 = add nsw i64 %3275, %3233
  %3277 = getelementptr inbounds i8, i8* %12, i64 %3276
  %3278 = bitcast i8* %3277 to <16 x i8>*
  %3279 = load <16 x i8>, <16 x i8>* %3278, align 4, !tbaa !397
  %3280 = zext <16 x i8> %3279 to <16 x i16>
  %3281 = sub nsw <16 x i16> %3280, %2848
  %3282 = add nsw i64 %3275, %3234
  %3283 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3282
  %3284 = bitcast i16* %3283 to <16 x i16>*
  store <16 x i16> %3281, <16 x i16>* %3284, align 8, !tbaa !399
  %indvars.iv.next4082.epil = add nuw nsw i64 %indvars.iv4081.epil, 1
  %epil.iter5863.sub = add i64 %epil.iter5863, -1
  %epil.iter5863.cmp.not = icmp eq i64 %epil.iter5863.sub, 0
  br i1 %epil.iter5863.cmp.not, label %"end for input_wrapper.s0.c.c198.us.us", label %"for input_wrapper.s0.c.c197.us.us.epil", !llvm.loop !426

"end for input_wrapper.s0.c.c198.us.us":          ; preds = %"end for input_wrapper.s0.c.c198.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c197.us.us.epil", %"for input_wrapper.s0.x.rebased194.us.us"
  br label %"for input_wrapper.s0.c.c.rebased200.us.us"

"for input_wrapper.s0.c.c.rebased200.us.us":      ; preds = %after_bb203.us.us, %"end for input_wrapper.s0.c.c198.us.us"
  %indvars.iv4083 = phi i64 [ %indvars.iv.next4084, %after_bb203.us.us ], [ 0, %"end for input_wrapper.s0.c.c198.us.us" ]
  %3285 = add nsw i64 %indvars.iv4083, %2902
  %3286 = trunc i64 %3285 to i32
  %3287 = shl nsw i32 %3286, 4
  %3288 = add nsw i32 %3287, 16
  %.not2155.us.us = icmp sgt i32 %3288, %t4086
  br i1 %.not2155.us.us, label %next_bb205.us.us, label %then_bb204.us.us

then_bb204.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased200.us.us"
  %3289 = shl nsw i64 %3285, 4
  %3290 = add nsw i64 %3289, %3233
  %3291 = getelementptr inbounds i8, i8* %12, i64 %3290
  %3292 = bitcast i8* %3291 to <16 x i8>*
  %3293 = load <16 x i8>, <16 x i8>* %3292, align 4, !tbaa !397
  %3294 = zext <16 x i8> %3293 to <16 x i16>
  %3295 = sub nsw <16 x i16> %3294, %2848
  %3296 = add nsw i64 %3289, %3234
  %3297 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3296
  %3298 = bitcast i16* %3297 to <16 x i16>*
  store <16 x i16> %3295, <16 x i16>* %3298, align 8, !tbaa !399
  br label %after_bb203.us.us

next_bb205.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased200.us.us"
  %3299 = or i32 %3287, 1
  %3300 = insertelement <16 x i32> undef, i32 %3299, i32 0
  %3301 = shufflevector <16 x i32> %3300, <16 x i32> undef, <16 x i32> zeroinitializer
  %3302 = add nsw <16 x i32> %3301, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3303 = shufflevector <16 x i32> %3302, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3304 = icmp sgt <8 x i32> %3303, %2851
  %3305 = shufflevector <16 x i32> %3302, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3306 = icmp sgt <8 x i32> %3305, %2851
  %3307 = shufflevector <8 x i1> %3304, <8 x i1> %3306, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3308 = xor <16 x i1> %3307, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %3309 = shl nsw i64 %3285, 4
  %3310 = add nsw i64 %3309, %3233
  %3311 = getelementptr inbounds i8, i8* %12, i64 %3310
  %3312 = bitcast i8* %3311 to <16 x i8>*
  %3313 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %3312, i32 4, <16 x i1> %3308, <16 x i8> undef), !tbaa !397
  %3314 = zext <16 x i8> %3313 to <16 x i16>
  %3315 = sub nsw <16 x i16> %3314, %2848
  %3316 = add nsw i64 %3309, %3234
  %3317 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3316
  %3318 = bitcast i16* %3317 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %3315, <16 x i16>* %3318, i32 8, <16 x i1> %3308), !tbaa !399
  br label %after_bb203.us.us

after_bb203.us.us:                                ; preds = %next_bb205.us.us, %then_bb204.us.us
  %indvars.iv.next4084 = add nuw nsw i64 %indvars.iv4083, 1
  %.not2156.us.us = icmp eq i64 %indvars.iv.next4084, %2903
  br i1 %.not2156.us.us, label %"end for input_wrapper.s0.c.c.rebased201.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased200.us.us"

"end for input_wrapper.s0.c.c.rebased201.loopexit.us.us": ; preds = %after_bb203.us.us
  %indvars.iv.next4086 = add nuw nsw i64 %indvars.iv4085, 1
  %.not2154.us.us = icmp eq i64 %indvars.iv4085, %2901
  br i1 %.not2154.us.us, label %"end for input_wrapper.s0.x.rebased195.loopexit.us", label %"for input_wrapper.s0.x.rebased194.us.us"

"for input_wrapper.s0.x.rebased194.us3143.us":    ; preds = %"for input_wrapper.s0.x.rebased194.preheader.split.us3159", %"end for input_wrapper.s0.c.c198.loopexit.us3154.us"
  %indvars.iv4078 = phi i64 [ %indvars.iv.next4079, %"end for input_wrapper.s0.c.c198.loopexit.us3154.us" ], [ 0, %"for input_wrapper.s0.x.rebased194.preheader.split.us3159" ]
  %3319 = trunc i64 %indvars.iv4078 to i32
  %reass.add2693.us3145.us = add i32 %t4088.us, %3319
  %reass.mul2694.us3146.us = mul i32 %reass.add2693.us3145.us, %2845
  %3320 = add nsw i64 %indvars.iv4078, %2899
  %3321 = mul nsw i64 %3320, %2900
  %3322 = add nsw i64 %3229, %3321
  %3323 = sext i32 %reass.mul2694.us3146.us to i64
  br i1 %2948, label %"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa", label %"for input_wrapper.s0.c.c197.us3148.us"

"for input_wrapper.s0.c.c197.us3148.us":          ; preds = %"for input_wrapper.s0.x.rebased194.us3143.us", %"for input_wrapper.s0.c.c197.us3148.us"
  %indvars.iv4076 = phi i64 [ %indvars.iv.next4077.3, %"for input_wrapper.s0.c.c197.us3148.us" ], [ 0, %"for input_wrapper.s0.x.rebased194.us3143.us" ]
  %niter5861 = phi i64 [ %niter5861.nsub.3, %"for input_wrapper.s0.c.c197.us3148.us" ], [ %unroll_iter5860, %"for input_wrapper.s0.x.rebased194.us3143.us" ]
  %3324 = shl nuw nsw i64 %indvars.iv4076, 4
  %3325 = add nsw i64 %3324, %3322
  %3326 = getelementptr inbounds i8, i8* %12, i64 %3325
  %3327 = bitcast i8* %3326 to <16 x i8>*
  %3328 = load <16 x i8>, <16 x i8>* %3327, align 4, !tbaa !397
  %3329 = zext <16 x i8> %3328 to <16 x i16>
  %3330 = sub nsw <16 x i16> %3329, %2848
  %3331 = add nsw i64 %3324, %3323
  %3332 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3331
  %3333 = bitcast i16* %3332 to <16 x i16>*
  store <16 x i16> %3330, <16 x i16>* %3333, align 8, !tbaa !399
  %indvars.iv.next4077 = shl i64 %indvars.iv4076, 4
  %3334 = or i64 %indvars.iv.next4077, 16
  %3335 = add nsw i64 %3334, %3322
  %3336 = getelementptr inbounds i8, i8* %12, i64 %3335
  %3337 = bitcast i8* %3336 to <16 x i8>*
  %3338 = load <16 x i8>, <16 x i8>* %3337, align 4, !tbaa !397
  %3339 = zext <16 x i8> %3338 to <16 x i16>
  %3340 = sub nsw <16 x i16> %3339, %2848
  %3341 = add nsw i64 %3334, %3323
  %3342 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3341
  %3343 = bitcast i16* %3342 to <16 x i16>*
  store <16 x i16> %3340, <16 x i16>* %3343, align 8, !tbaa !399
  %indvars.iv.next4077.1 = shl i64 %indvars.iv4076, 4
  %3344 = or i64 %indvars.iv.next4077.1, 32
  %3345 = add nsw i64 %3344, %3322
  %3346 = getelementptr inbounds i8, i8* %12, i64 %3345
  %3347 = bitcast i8* %3346 to <16 x i8>*
  %3348 = load <16 x i8>, <16 x i8>* %3347, align 4, !tbaa !397
  %3349 = zext <16 x i8> %3348 to <16 x i16>
  %3350 = sub nsw <16 x i16> %3349, %2848
  %3351 = add nsw i64 %3344, %3323
  %3352 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3351
  %3353 = bitcast i16* %3352 to <16 x i16>*
  store <16 x i16> %3350, <16 x i16>* %3353, align 8, !tbaa !399
  %indvars.iv.next4077.2 = shl i64 %indvars.iv4076, 4
  %3354 = or i64 %indvars.iv.next4077.2, 48
  %3355 = add nsw i64 %3354, %3322
  %3356 = getelementptr inbounds i8, i8* %12, i64 %3355
  %3357 = bitcast i8* %3356 to <16 x i8>*
  %3358 = load <16 x i8>, <16 x i8>* %3357, align 4, !tbaa !397
  %3359 = zext <16 x i8> %3358 to <16 x i16>
  %3360 = sub nsw <16 x i16> %3359, %2848
  %3361 = add nsw i64 %3354, %3323
  %3362 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3361
  %3363 = bitcast i16* %3362 to <16 x i16>*
  store <16 x i16> %3360, <16 x i16>* %3363, align 8, !tbaa !399
  %indvars.iv.next4077.3 = add nuw nsw i64 %indvars.iv4076, 4
  %niter5861.nsub.3 = add i64 %niter5861, -4
  %niter5861.ncmp.3 = icmp eq i64 %niter5861.nsub.3, 0
  br i1 %niter5861.ncmp.3, label %"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa", label %"for input_wrapper.s0.c.c197.us3148.us"

"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c197.us3148.us", %"for input_wrapper.s0.x.rebased194.us3143.us"
  %indvars.iv4076.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased194.us3143.us" ], [ %indvars.iv.next4077.3, %"for input_wrapper.s0.c.c197.us3148.us" ]
  br i1 %lcmp.mod5859.not, label %"end for input_wrapper.s0.c.c198.loopexit.us3154.us", label %"for input_wrapper.s0.c.c197.us3148.us.epil"

"for input_wrapper.s0.c.c197.us3148.us.epil":     ; preds = %"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa", %"for input_wrapper.s0.c.c197.us3148.us.epil"
  %indvars.iv4076.epil = phi i64 [ %indvars.iv.next4077.epil, %"for input_wrapper.s0.c.c197.us3148.us.epil" ], [ %indvars.iv4076.unr, %"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa" ]
  %epil.iter5858 = phi i64 [ %epil.iter5858.sub, %"for input_wrapper.s0.c.c197.us3148.us.epil" ], [ %xtraiter5857, %"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa" ]
  %3364 = shl nuw nsw i64 %indvars.iv4076.epil, 4
  %3365 = add nsw i64 %3364, %3322
  %3366 = getelementptr inbounds i8, i8* %12, i64 %3365
  %3367 = bitcast i8* %3366 to <16 x i8>*
  %3368 = load <16 x i8>, <16 x i8>* %3367, align 4, !tbaa !397
  %3369 = zext <16 x i8> %3368 to <16 x i16>
  %3370 = sub nsw <16 x i16> %3369, %2848
  %3371 = add nsw i64 %3364, %3323
  %3372 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3371
  %3373 = bitcast i16* %3372 to <16 x i16>*
  store <16 x i16> %3370, <16 x i16>* %3373, align 8, !tbaa !399
  %indvars.iv.next4077.epil = add nuw nsw i64 %indvars.iv4076.epil, 1
  %epil.iter5858.sub = add i64 %epil.iter5858, -1
  %epil.iter5858.cmp.not = icmp eq i64 %epil.iter5858.sub, 0
  br i1 %epil.iter5858.cmp.not, label %"end for input_wrapper.s0.c.c198.loopexit.us3154.us", label %"for input_wrapper.s0.c.c197.us3148.us.epil", !llvm.loop !427

"end for input_wrapper.s0.c.c198.loopexit.us3154.us": ; preds = %"for input_wrapper.s0.c.c197.us3148.us.epil", %"end for input_wrapper.s0.c.c198.loopexit.us3154.us.unr-lcssa"
  %indvars.iv.next4079 = add nuw nsw i64 %indvars.iv4078, 1
  %.not2154.us3152.us = icmp eq i64 %indvars.iv4078, %2901
  br i1 %.not2154.us3152.us, label %"end for input_wrapper.s0.x.rebased195.loopexit.us", label %"for input_wrapper.s0.x.rebased194.us3143.us"

next_bb190:                                       ; preds = %next_bb170
  br i1 %2794, label %next_bb207, label %then_bb206

then_bb206:                                       ; preds = %next_bb190
  br i1 %2927, label %"for input_wrapper.s0.y.rebased208", label %"consume input_wrapper243", !prof !387

next_bb207:                                       ; preds = %next_bb190
  br i1 %2795, label %next_bb224, label %then_bb223

"for input_wrapper.s0.y.rebased208":              ; preds = %then_bb206, %"end for input_wrapper.s0.x.rebased212"
  %indvars.iv4103 = phi i64 [ %indvars.iv.next4104, %"end for input_wrapper.s0.x.rebased212" ], [ 0, %then_bb206 ]
  %3374 = trunc i64 %indvars.iv4103 to i32
  %t4097 = mul i32 %2832, %3374
  %3375 = add nsw i64 %indvars.iv4103, %2971
  %3376 = mul nsw i64 %3375, %2904
  %3377 = add nsw i64 %3376, %2966
  br i1 %2841, label %"for input_wrapper.s0.x.rebased211.preheader", label %"end for input_wrapper.s0.x.rebased212", !prof !387

"for input_wrapper.s0.x.rebased211.preheader":    ; preds = %"for input_wrapper.s0.y.rebased208"
  br i1 %2855, label %"for input_wrapper.s0.x.rebased211.us", label %"for input_wrapper.s0.x.rebased211.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased211.us":           ; preds = %"for input_wrapper.s0.x.rebased211.preheader", %"end for input_wrapper.s0.c.c.rebased218.loopexit.us"
  %indvars.iv4100 = phi i64 [ %indvars.iv.next4101, %"end for input_wrapper.s0.c.c.rebased218.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased211.preheader" ]
  %3378 = trunc i64 %indvars.iv4100 to i32
  %reass.add2695.us = add i32 %t4097, %3378
  %reass.mul2696.us = mul i32 %reass.add2695.us, %2845
  %3379 = add nsw i64 %indvars.iv4100, %2899
  %3380 = mul nsw i64 %3379, %2900
  %3381 = add nsw i64 %3377, %3380
  %3382 = sext i32 %reass.mul2696.us to i64
  br i1 %2787, label %"for input_wrapper.s0.c.c214.us.preheader", label %"end for input_wrapper.s0.c.c215.us", !prof !387

"for input_wrapper.s0.c.c214.us.preheader":       ; preds = %"for input_wrapper.s0.x.rebased211.us"
  br i1 %2951, label %"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c214.us"

"for input_wrapper.s0.c.c214.us":                 ; preds = %"for input_wrapper.s0.c.c214.us.preheader", %"for input_wrapper.s0.c.c214.us"
  %indvars.iv4096 = phi i64 [ %indvars.iv.next4097.3, %"for input_wrapper.s0.c.c214.us" ], [ 0, %"for input_wrapper.s0.c.c214.us.preheader" ]
  %niter5876 = phi i64 [ %niter5876.nsub.3, %"for input_wrapper.s0.c.c214.us" ], [ %unroll_iter5875, %"for input_wrapper.s0.c.c214.us.preheader" ]
  %3383 = shl nuw nsw i64 %indvars.iv4096, 3
  %3384 = add nsw i64 %3383, %3381
  %3385 = getelementptr inbounds i8, i8* %12, i64 %3384
  %3386 = bitcast i8* %3385 to <8 x i8>*
  %3387 = load <8 x i8>, <8 x i8>* %3386, align 4, !tbaa !397
  %3388 = zext <8 x i8> %3387 to <8 x i16>
  %3389 = sub nsw <8 x i16> %3388, %2854
  %3390 = add nsw i64 %3383, %3382
  %3391 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3390
  %3392 = bitcast i16* %3391 to <8 x i16>*
  store <8 x i16> %3389, <8 x i16>* %3392, align 8, !tbaa !399
  %indvars.iv.next4097 = shl i64 %indvars.iv4096, 3
  %3393 = or i64 %indvars.iv.next4097, 8
  %3394 = add nsw i64 %3393, %3381
  %3395 = getelementptr inbounds i8, i8* %12, i64 %3394
  %3396 = bitcast i8* %3395 to <8 x i8>*
  %3397 = load <8 x i8>, <8 x i8>* %3396, align 4, !tbaa !397
  %3398 = zext <8 x i8> %3397 to <8 x i16>
  %3399 = sub nsw <8 x i16> %3398, %2854
  %3400 = add nsw i64 %3393, %3382
  %3401 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3400
  %3402 = bitcast i16* %3401 to <8 x i16>*
  store <8 x i16> %3399, <8 x i16>* %3402, align 8, !tbaa !399
  %indvars.iv.next4097.1 = shl i64 %indvars.iv4096, 3
  %3403 = or i64 %indvars.iv.next4097.1, 16
  %3404 = add nsw i64 %3403, %3381
  %3405 = getelementptr inbounds i8, i8* %12, i64 %3404
  %3406 = bitcast i8* %3405 to <8 x i8>*
  %3407 = load <8 x i8>, <8 x i8>* %3406, align 4, !tbaa !397
  %3408 = zext <8 x i8> %3407 to <8 x i16>
  %3409 = sub nsw <8 x i16> %3408, %2854
  %3410 = add nsw i64 %3403, %3382
  %3411 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3410
  %3412 = bitcast i16* %3411 to <8 x i16>*
  store <8 x i16> %3409, <8 x i16>* %3412, align 8, !tbaa !399
  %indvars.iv.next4097.2 = shl i64 %indvars.iv4096, 3
  %3413 = or i64 %indvars.iv.next4097.2, 24
  %3414 = add nsw i64 %3413, %3381
  %3415 = getelementptr inbounds i8, i8* %12, i64 %3414
  %3416 = bitcast i8* %3415 to <8 x i8>*
  %3417 = load <8 x i8>, <8 x i8>* %3416, align 4, !tbaa !397
  %3418 = zext <8 x i8> %3417 to <8 x i16>
  %3419 = sub nsw <8 x i16> %3418, %2854
  %3420 = add nsw i64 %3413, %3382
  %3421 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3420
  %3422 = bitcast i16* %3421 to <8 x i16>*
  store <8 x i16> %3419, <8 x i16>* %3422, align 8, !tbaa !399
  %indvars.iv.next4097.3 = add nuw nsw i64 %indvars.iv4096, 4
  %niter5876.nsub.3 = add i64 %niter5876, -4
  %niter5876.ncmp.3 = icmp eq i64 %niter5876.nsub.3, 0
  br i1 %niter5876.ncmp.3, label %"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c214.us"

"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c214.us", %"for input_wrapper.s0.c.c214.us.preheader"
  %indvars.iv4096.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c214.us.preheader" ], [ %indvars.iv.next4097.3, %"for input_wrapper.s0.c.c214.us" ]
  br i1 %lcmp.mod5874.not, label %"end for input_wrapper.s0.c.c215.us", label %"for input_wrapper.s0.c.c214.us.epil"

"for input_wrapper.s0.c.c214.us.epil":            ; preds = %"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c214.us.epil"
  %indvars.iv4096.epil = phi i64 [ %indvars.iv.next4097.epil, %"for input_wrapper.s0.c.c214.us.epil" ], [ %indvars.iv4096.unr, %"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa" ]
  %epil.iter5873 = phi i64 [ %epil.iter5873.sub, %"for input_wrapper.s0.c.c214.us.epil" ], [ %xtraiter5872, %"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa" ]
  %3423 = shl nuw nsw i64 %indvars.iv4096.epil, 3
  %3424 = add nsw i64 %3423, %3381
  %3425 = getelementptr inbounds i8, i8* %12, i64 %3424
  %3426 = bitcast i8* %3425 to <8 x i8>*
  %3427 = load <8 x i8>, <8 x i8>* %3426, align 4, !tbaa !397
  %3428 = zext <8 x i8> %3427 to <8 x i16>
  %3429 = sub nsw <8 x i16> %3428, %2854
  %3430 = add nsw i64 %3423, %3382
  %3431 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3430
  %3432 = bitcast i16* %3431 to <8 x i16>*
  store <8 x i16> %3429, <8 x i16>* %3432, align 8, !tbaa !399
  %indvars.iv.next4097.epil = add nuw nsw i64 %indvars.iv4096.epil, 1
  %epil.iter5873.sub = add i64 %epil.iter5873, -1
  %epil.iter5873.cmp.not = icmp eq i64 %epil.iter5873.sub, 0
  br i1 %epil.iter5873.cmp.not, label %"end for input_wrapper.s0.c.c215.us", label %"for input_wrapper.s0.c.c214.us.epil", !llvm.loop !428

"end for input_wrapper.s0.c.c215.us":             ; preds = %"end for input_wrapper.s0.c.c215.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c214.us.epil", %"for input_wrapper.s0.x.rebased211.us"
  br label %"for input_wrapper.s0.c.c.rebased217.us"

"for input_wrapper.s0.c.c.rebased217.us":         ; preds = %"end for input_wrapper.s0.c.c215.us", %after_bb220.us
  %indvars.iv4098 = phi i64 [ 0, %"end for input_wrapper.s0.c.c215.us" ], [ %indvars.iv.next4099, %after_bb220.us ]
  %3433 = add nsw i64 %indvars.iv4098, %2906
  %3434 = trunc i64 %3433 to i32
  %3435 = shl nsw i32 %3434, 3
  %3436 = add nsw i32 %3435, 8
  %.not2150.us = icmp sgt i32 %3436, %t4086
  br i1 %.not2150.us, label %next_bb222.us, label %then_bb221.us

then_bb221.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased217.us"
  %3437 = shl nsw i64 %3433, 3
  %3438 = add nsw i64 %3437, %3381
  %3439 = getelementptr inbounds i8, i8* %12, i64 %3438
  %3440 = bitcast i8* %3439 to <8 x i8>*
  %3441 = load <8 x i8>, <8 x i8>* %3440, align 4, !tbaa !397
  %3442 = zext <8 x i8> %3441 to <8 x i16>
  %3443 = sub nsw <8 x i16> %3442, %2854
  %3444 = add nsw i64 %3437, %3382
  %3445 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3444
  %3446 = bitcast i16* %3445 to <8 x i16>*
  store <8 x i16> %3443, <8 x i16>* %3446, align 8, !tbaa !399
  br label %after_bb220.us

next_bb222.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased217.us"
  %3447 = or i32 %3435, 1
  %3448 = insertelement <8 x i32> undef, i32 %3447, i32 0
  %3449 = shufflevector <8 x i32> %3448, <8 x i32> undef, <8 x i32> zeroinitializer
  %3450 = add nsw <8 x i32> %3449, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3451 = icmp sle <8 x i32> %3450, %2857
  %3452 = shl nsw i64 %3433, 3
  %3453 = add nsw i64 %3452, %3381
  %3454 = getelementptr inbounds i8, i8* %12, i64 %3453
  %3455 = bitcast i8* %3454 to <8 x i8>*
  %3456 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %3455, i32 4, <8 x i1> %3451, <8 x i8> undef), !tbaa !397
  %3457 = zext <8 x i8> %3456 to <8 x i16>
  %3458 = sub nsw <8 x i16> %3457, %2854
  %3459 = add nsw i64 %3452, %3382
  %3460 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3459
  %3461 = bitcast i16* %3460 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %3458, <8 x i16>* %3461, i32 8, <8 x i1> %3451), !tbaa !399
  br label %after_bb220.us

after_bb220.us:                                   ; preds = %next_bb222.us, %then_bb221.us
  %indvars.iv.next4099 = add nuw nsw i64 %indvars.iv4098, 1
  %.not2151.us = icmp eq i64 %indvars.iv.next4099, %2907
  br i1 %.not2151.us, label %"end for input_wrapper.s0.c.c.rebased218.loopexit.us", label %"for input_wrapper.s0.c.c.rebased217.us"

"end for input_wrapper.s0.c.c.rebased218.loopexit.us": ; preds = %after_bb220.us
  %indvars.iv.next4101 = add nuw nsw i64 %indvars.iv4100, 1
  %.not2149.us = icmp eq i64 %indvars.iv4100, %2901
  br i1 %.not2149.us, label %"end for input_wrapper.s0.x.rebased212", label %"for input_wrapper.s0.x.rebased211.us"

"for input_wrapper.s0.x.rebased211.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased211.preheader"
  br i1 %2787, label %"for input_wrapper.s0.x.rebased211.us3162", label %"end for input_wrapper.s0.x.rebased212", !prof !387

"for input_wrapper.s0.x.rebased211.us3162":       ; preds = %"for input_wrapper.s0.x.rebased211.preheader.split", %"end for input_wrapper.s0.c.c215.loopexit.us3173"
  %indvars.iv4093 = phi i64 [ %indvars.iv.next4094, %"end for input_wrapper.s0.c.c215.loopexit.us3173" ], [ 0, %"for input_wrapper.s0.x.rebased211.preheader.split" ]
  %3462 = trunc i64 %indvars.iv4093 to i32
  %reass.add2695.us3164 = add i32 %t4097, %3462
  %reass.mul2696.us3165 = mul i32 %reass.add2695.us3164, %2845
  %3463 = add nsw i64 %indvars.iv4093, %2899
  %3464 = mul nsw i64 %3463, %2900
  %3465 = add nsw i64 %3377, %3464
  %3466 = sext i32 %reass.mul2696.us3165 to i64
  br i1 %2950, label %"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa", label %"for input_wrapper.s0.c.c214.us3167"

"for input_wrapper.s0.c.c214.us3167":             ; preds = %"for input_wrapper.s0.x.rebased211.us3162", %"for input_wrapper.s0.c.c214.us3167"
  %indvars.iv4091 = phi i64 [ %indvars.iv.next4092.3, %"for input_wrapper.s0.c.c214.us3167" ], [ 0, %"for input_wrapper.s0.x.rebased211.us3162" ]
  %niter5871 = phi i64 [ %niter5871.nsub.3, %"for input_wrapper.s0.c.c214.us3167" ], [ %unroll_iter5870, %"for input_wrapper.s0.x.rebased211.us3162" ]
  %3467 = shl nuw nsw i64 %indvars.iv4091, 3
  %3468 = add nsw i64 %3467, %3465
  %3469 = getelementptr inbounds i8, i8* %12, i64 %3468
  %3470 = bitcast i8* %3469 to <8 x i8>*
  %3471 = load <8 x i8>, <8 x i8>* %3470, align 4, !tbaa !397
  %3472 = zext <8 x i8> %3471 to <8 x i16>
  %3473 = sub nsw <8 x i16> %3472, %2854
  %3474 = add nsw i64 %3467, %3466
  %3475 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3474
  %3476 = bitcast i16* %3475 to <8 x i16>*
  store <8 x i16> %3473, <8 x i16>* %3476, align 8, !tbaa !399
  %indvars.iv.next4092 = shl i64 %indvars.iv4091, 3
  %3477 = or i64 %indvars.iv.next4092, 8
  %3478 = add nsw i64 %3477, %3465
  %3479 = getelementptr inbounds i8, i8* %12, i64 %3478
  %3480 = bitcast i8* %3479 to <8 x i8>*
  %3481 = load <8 x i8>, <8 x i8>* %3480, align 4, !tbaa !397
  %3482 = zext <8 x i8> %3481 to <8 x i16>
  %3483 = sub nsw <8 x i16> %3482, %2854
  %3484 = add nsw i64 %3477, %3466
  %3485 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3484
  %3486 = bitcast i16* %3485 to <8 x i16>*
  store <8 x i16> %3483, <8 x i16>* %3486, align 8, !tbaa !399
  %indvars.iv.next4092.1 = shl i64 %indvars.iv4091, 3
  %3487 = or i64 %indvars.iv.next4092.1, 16
  %3488 = add nsw i64 %3487, %3465
  %3489 = getelementptr inbounds i8, i8* %12, i64 %3488
  %3490 = bitcast i8* %3489 to <8 x i8>*
  %3491 = load <8 x i8>, <8 x i8>* %3490, align 4, !tbaa !397
  %3492 = zext <8 x i8> %3491 to <8 x i16>
  %3493 = sub nsw <8 x i16> %3492, %2854
  %3494 = add nsw i64 %3487, %3466
  %3495 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3494
  %3496 = bitcast i16* %3495 to <8 x i16>*
  store <8 x i16> %3493, <8 x i16>* %3496, align 8, !tbaa !399
  %indvars.iv.next4092.2 = shl i64 %indvars.iv4091, 3
  %3497 = or i64 %indvars.iv.next4092.2, 24
  %3498 = add nsw i64 %3497, %3465
  %3499 = getelementptr inbounds i8, i8* %12, i64 %3498
  %3500 = bitcast i8* %3499 to <8 x i8>*
  %3501 = load <8 x i8>, <8 x i8>* %3500, align 4, !tbaa !397
  %3502 = zext <8 x i8> %3501 to <8 x i16>
  %3503 = sub nsw <8 x i16> %3502, %2854
  %3504 = add nsw i64 %3497, %3466
  %3505 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3504
  %3506 = bitcast i16* %3505 to <8 x i16>*
  store <8 x i16> %3503, <8 x i16>* %3506, align 8, !tbaa !399
  %indvars.iv.next4092.3 = add nuw nsw i64 %indvars.iv4091, 4
  %niter5871.nsub.3 = add i64 %niter5871, -4
  %niter5871.ncmp.3 = icmp eq i64 %niter5871.nsub.3, 0
  br i1 %niter5871.ncmp.3, label %"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa", label %"for input_wrapper.s0.c.c214.us3167"

"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c214.us3167", %"for input_wrapper.s0.x.rebased211.us3162"
  %indvars.iv4091.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased211.us3162" ], [ %indvars.iv.next4092.3, %"for input_wrapper.s0.c.c214.us3167" ]
  br i1 %lcmp.mod5869.not, label %"end for input_wrapper.s0.c.c215.loopexit.us3173", label %"for input_wrapper.s0.c.c214.us3167.epil"

"for input_wrapper.s0.c.c214.us3167.epil":        ; preds = %"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa", %"for input_wrapper.s0.c.c214.us3167.epil"
  %indvars.iv4091.epil = phi i64 [ %indvars.iv.next4092.epil, %"for input_wrapper.s0.c.c214.us3167.epil" ], [ %indvars.iv4091.unr, %"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa" ]
  %epil.iter5868 = phi i64 [ %epil.iter5868.sub, %"for input_wrapper.s0.c.c214.us3167.epil" ], [ %xtraiter5867, %"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa" ]
  %3507 = shl nuw nsw i64 %indvars.iv4091.epil, 3
  %3508 = add nsw i64 %3507, %3465
  %3509 = getelementptr inbounds i8, i8* %12, i64 %3508
  %3510 = bitcast i8* %3509 to <8 x i8>*
  %3511 = load <8 x i8>, <8 x i8>* %3510, align 4, !tbaa !397
  %3512 = zext <8 x i8> %3511 to <8 x i16>
  %3513 = sub nsw <8 x i16> %3512, %2854
  %3514 = add nsw i64 %3507, %3466
  %3515 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3514
  %3516 = bitcast i16* %3515 to <8 x i16>*
  store <8 x i16> %3513, <8 x i16>* %3516, align 8, !tbaa !399
  %indvars.iv.next4092.epil = add nuw nsw i64 %indvars.iv4091.epil, 1
  %epil.iter5868.sub = add i64 %epil.iter5868, -1
  %epil.iter5868.cmp.not = icmp eq i64 %epil.iter5868.sub, 0
  br i1 %epil.iter5868.cmp.not, label %"end for input_wrapper.s0.c.c215.loopexit.us3173", label %"for input_wrapper.s0.c.c214.us3167.epil", !llvm.loop !429

"end for input_wrapper.s0.c.c215.loopexit.us3173": ; preds = %"for input_wrapper.s0.c.c214.us3167.epil", %"end for input_wrapper.s0.c.c215.loopexit.us3173.unr-lcssa"
  %indvars.iv.next4094 = add nuw nsw i64 %indvars.iv4093, 1
  %.not2149.us3171 = icmp eq i64 %indvars.iv4093, %2901
  br i1 %.not2149.us3171, label %"end for input_wrapper.s0.x.rebased212", label %"for input_wrapper.s0.x.rebased211.us3162"

"end for input_wrapper.s0.x.rebased212":          ; preds = %"end for input_wrapper.s0.c.c215.loopexit.us3173", %"end for input_wrapper.s0.c.c.rebased218.loopexit.us", %"for input_wrapper.s0.x.rebased211.preheader.split", %"for input_wrapper.s0.y.rebased208"
  %indvars.iv.next4104 = add nuw nsw i64 %indvars.iv4103, 1
  %.not2148 = icmp eq i64 %indvars.iv4103, %2932
  br i1 %.not2148, label %"consume input_wrapper243", label %"for input_wrapper.s0.y.rebased208"

then_bb223:                                       ; preds = %next_bb207
  br i1 %2927, label %"for input_wrapper.s0.y.rebased225", label %"consume input_wrapper243", !prof !387

next_bb224:                                       ; preds = %next_bb207
  br i1 %2927, label %"for input_wrapper.s0.y.rebased234", label %"consume input_wrapper243", !prof !387

"for input_wrapper.s0.y.rebased225":              ; preds = %then_bb223, %"end for input_wrapper.s0.x.rebased229"
  %indvars.iv4111 = phi i64 [ %indvars.iv.next4112, %"end for input_wrapper.s0.x.rebased229" ], [ 0, %then_bb223 ]
  %3517 = trunc i64 %indvars.iv4111 to i32
  %t4105 = mul i32 %2832, %3517
  %3518 = add nsw i64 %indvars.iv4111, %2971
  %3519 = mul nsw i64 %3518, %2904
  %3520 = add nsw i64 %3519, %2966
  br i1 %brmerge5002.demorgan, label %"for input_wrapper.s0.x.rebased228.us", label %"end for input_wrapper.s0.x.rebased229", !prof !407

"for input_wrapper.s0.x.rebased228.us":           ; preds = %"for input_wrapper.s0.y.rebased225", %"end for input_wrapper.s0.c.c232.loopexit.us"
  %indvars.iv4108 = phi i64 [ %indvars.iv.next4109, %"end for input_wrapper.s0.c.c232.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased225" ]
  %3521 = trunc i64 %indvars.iv4108 to i32
  %reass.add2697.us = add i32 %t4105, %3521
  %reass.mul2698.us = mul i32 %reass.add2697.us, %2845
  %3522 = add nsw i64 %indvars.iv4108, %2899
  %3523 = mul nsw i64 %3522, %2900
  %3524 = add nsw i64 %3520, %3523
  %3525 = sext i32 %reass.mul2698.us to i64
  br i1 %2952, label %"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c231.us"

"for input_wrapper.s0.c.c231.us":                 ; preds = %"for input_wrapper.s0.x.rebased228.us", %"for input_wrapper.s0.c.c231.us"
  %indvars.iv4106 = phi i64 [ %indvars.iv.next4107.3, %"for input_wrapper.s0.c.c231.us" ], [ 0, %"for input_wrapper.s0.x.rebased228.us" ]
  %niter5881 = phi i64 [ %niter5881.nsub.3, %"for input_wrapper.s0.c.c231.us" ], [ %unroll_iter5880, %"for input_wrapper.s0.x.rebased228.us" ]
  %3526 = shl nuw nsw i64 %indvars.iv4106, 2
  %3527 = add nsw i64 %3526, %3524
  %3528 = getelementptr inbounds i8, i8* %12, i64 %3527
  %3529 = bitcast i8* %3528 to <4 x i8>*
  %3530 = load <4 x i8>, <4 x i8>* %3529, align 4, !tbaa !397
  %3531 = zext <4 x i8> %3530 to <4 x i16>
  %3532 = sub nsw <4 x i16> %3531, %2860
  %3533 = add nsw i64 %3526, %3525
  %3534 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3533
  %3535 = bitcast i16* %3534 to <4 x i16>*
  store <4 x i16> %3532, <4 x i16>* %3535, align 8, !tbaa !399
  %indvars.iv.next4107 = shl i64 %indvars.iv4106, 2
  %3536 = or i64 %indvars.iv.next4107, 4
  %3537 = add nsw i64 %3536, %3524
  %3538 = getelementptr inbounds i8, i8* %12, i64 %3537
  %3539 = bitcast i8* %3538 to <4 x i8>*
  %3540 = load <4 x i8>, <4 x i8>* %3539, align 4, !tbaa !397
  %3541 = zext <4 x i8> %3540 to <4 x i16>
  %3542 = sub nsw <4 x i16> %3541, %2860
  %3543 = add nsw i64 %3536, %3525
  %3544 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3543
  %3545 = bitcast i16* %3544 to <4 x i16>*
  store <4 x i16> %3542, <4 x i16>* %3545, align 8, !tbaa !399
  %indvars.iv.next4107.1 = shl i64 %indvars.iv4106, 2
  %3546 = or i64 %indvars.iv.next4107.1, 8
  %3547 = add nsw i64 %3546, %3524
  %3548 = getelementptr inbounds i8, i8* %12, i64 %3547
  %3549 = bitcast i8* %3548 to <4 x i8>*
  %3550 = load <4 x i8>, <4 x i8>* %3549, align 4, !tbaa !397
  %3551 = zext <4 x i8> %3550 to <4 x i16>
  %3552 = sub nsw <4 x i16> %3551, %2860
  %3553 = add nsw i64 %3546, %3525
  %3554 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3553
  %3555 = bitcast i16* %3554 to <4 x i16>*
  store <4 x i16> %3552, <4 x i16>* %3555, align 8, !tbaa !399
  %indvars.iv.next4107.2 = shl i64 %indvars.iv4106, 2
  %3556 = or i64 %indvars.iv.next4107.2, 12
  %3557 = add nsw i64 %3556, %3524
  %3558 = getelementptr inbounds i8, i8* %12, i64 %3557
  %3559 = bitcast i8* %3558 to <4 x i8>*
  %3560 = load <4 x i8>, <4 x i8>* %3559, align 4, !tbaa !397
  %3561 = zext <4 x i8> %3560 to <4 x i16>
  %3562 = sub nsw <4 x i16> %3561, %2860
  %3563 = add nsw i64 %3556, %3525
  %3564 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3563
  %3565 = bitcast i16* %3564 to <4 x i16>*
  store <4 x i16> %3562, <4 x i16>* %3565, align 8, !tbaa !399
  %indvars.iv.next4107.3 = add nuw nsw i64 %indvars.iv4106, 4
  %niter5881.nsub.3 = add i64 %niter5881, -4
  %niter5881.ncmp.3 = icmp eq i64 %niter5881.nsub.3, 0
  br i1 %niter5881.ncmp.3, label %"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c231.us"

"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c231.us", %"for input_wrapper.s0.x.rebased228.us"
  %indvars.iv4106.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased228.us" ], [ %indvars.iv.next4107.3, %"for input_wrapper.s0.c.c231.us" ]
  br i1 %lcmp.mod5879.not, label %"end for input_wrapper.s0.c.c232.loopexit.us", label %"for input_wrapper.s0.c.c231.us.epil"

"for input_wrapper.s0.c.c231.us.epil":            ; preds = %"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c231.us.epil"
  %indvars.iv4106.epil = phi i64 [ %indvars.iv.next4107.epil, %"for input_wrapper.s0.c.c231.us.epil" ], [ %indvars.iv4106.unr, %"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa" ]
  %epil.iter5878 = phi i64 [ %epil.iter5878.sub, %"for input_wrapper.s0.c.c231.us.epil" ], [ %xtraiter5877, %"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa" ]
  %3566 = shl nuw nsw i64 %indvars.iv4106.epil, 2
  %3567 = add nsw i64 %3566, %3524
  %3568 = getelementptr inbounds i8, i8* %12, i64 %3567
  %3569 = bitcast i8* %3568 to <4 x i8>*
  %3570 = load <4 x i8>, <4 x i8>* %3569, align 4, !tbaa !397
  %3571 = zext <4 x i8> %3570 to <4 x i16>
  %3572 = sub nsw <4 x i16> %3571, %2860
  %3573 = add nsw i64 %3566, %3525
  %3574 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3573
  %3575 = bitcast i16* %3574 to <4 x i16>*
  store <4 x i16> %3572, <4 x i16>* %3575, align 8, !tbaa !399
  %indvars.iv.next4107.epil = add nuw nsw i64 %indvars.iv4106.epil, 1
  %epil.iter5878.sub = add i64 %epil.iter5878, -1
  %epil.iter5878.cmp.not = icmp eq i64 %epil.iter5878.sub, 0
  br i1 %epil.iter5878.cmp.not, label %"end for input_wrapper.s0.c.c232.loopexit.us", label %"for input_wrapper.s0.c.c231.us.epil", !llvm.loop !430

"end for input_wrapper.s0.c.c232.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c231.us.epil", %"end for input_wrapper.s0.c.c232.loopexit.us.unr-lcssa"
  %indvars.iv.next4109 = add nuw nsw i64 %indvars.iv4108, 1
  %.not2146.us = icmp eq i64 %indvars.iv4108, %2901
  br i1 %.not2146.us, label %"end for input_wrapper.s0.x.rebased229", label %"for input_wrapper.s0.x.rebased228.us"

"end for input_wrapper.s0.x.rebased229":          ; preds = %"end for input_wrapper.s0.c.c232.loopexit.us", %"for input_wrapper.s0.y.rebased225"
  %indvars.iv.next4112 = add nuw nsw i64 %indvars.iv4111, 1
  %.not2145 = icmp eq i64 %indvars.iv4111, %2933
  br i1 %.not2145, label %"consume input_wrapper243", label %"for input_wrapper.s0.y.rebased225"

"for input_wrapper.s0.y.rebased234":              ; preds = %next_bb224, %"end for input_wrapper.s0.x.rebased238"
  %indvars.iv4119 = phi i64 [ %indvars.iv.next4120, %"end for input_wrapper.s0.x.rebased238" ], [ 0, %next_bb224 ]
  %3576 = trunc i64 %indvars.iv4119 to i32
  %t4112 = mul i32 %2832, %3576
  %3577 = add nsw i64 %indvars.iv4119, %2971
  %3578 = mul nsw i64 %3577, %2904
  %3579 = add nsw i64 %3578, %2966
  br i1 %brmerge5005.demorgan, label %iter.check5298, label %"end for input_wrapper.s0.x.rebased238", !prof !407

iter.check5298:                                   ; preds = %"for input_wrapper.s0.y.rebased234", %"end for input_wrapper.s0.c241.loopexit.us"
  %indvars.iv4116 = phi i64 [ %indvars.iv.next4117, %"end for input_wrapper.s0.c241.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased234" ]
  %3580 = trunc i64 %indvars.iv4116 to i32
  %reass.add2699.us = add i32 %t4112, %3580
  %reass.mul2700.us = mul i32 %reass.add2699.us, %2845
  %3581 = add nsw i64 %indvars.iv4116, %2899
  %3582 = mul nsw i64 %3581, %2900
  %3583 = add nsw i64 %3579, %3582
  %3584 = sext i32 %reass.mul2700.us to i64
  br i1 %min.iters.check5296, label %"for input_wrapper.s0.c240.us.preheader", label %vector.main.loop.iter.check5300

vector.main.loop.iter.check5300:                  ; preds = %iter.check5298
  br i1 %min.iters.check5299, label %vec.epilog.ph5323, label %vector.ph5301

vector.ph5301:                                    ; preds = %vector.main.loop.iter.check5300
  br i1 %2953, label %middle.block5293.unr-lcssa, label %vector.body5295

vector.body5295:                                  ; preds = %vector.ph5301, %vector.body5295
  %index5304 = phi i64 [ %index.next5305.1, %vector.body5295 ], [ 0, %vector.ph5301 ]
  %niter5885 = phi i64 [ %niter5885.nsub.1, %vector.body5295 ], [ %unroll_iter5884, %vector.ph5301 ]
  %3585 = add nsw i64 %index5304, %3583
  %3586 = getelementptr inbounds i8, i8* %12, i64 %3585
  %3587 = bitcast i8* %3586 to <16 x i8>*
  %wide.load5307 = load <16 x i8>, <16 x i8>* %3587, align 1, !tbaa !397
  %3588 = getelementptr inbounds i8, i8* %3586, i64 16
  %3589 = bitcast i8* %3588 to <16 x i8>*
  %wide.load5308 = load <16 x i8>, <16 x i8>* %3589, align 1, !tbaa !397
  %3590 = getelementptr inbounds i8, i8* %3586, i64 32
  %3591 = bitcast i8* %3590 to <16 x i8>*
  %wide.load5309 = load <16 x i8>, <16 x i8>* %3591, align 1, !tbaa !397
  %3592 = getelementptr inbounds i8, i8* %3586, i64 48
  %3593 = bitcast i8* %3592 to <16 x i8>*
  %wide.load5310 = load <16 x i8>, <16 x i8>* %3593, align 1, !tbaa !397
  %3594 = zext <16 x i8> %wide.load5307 to <16 x i16>
  %3595 = zext <16 x i8> %wide.load5308 to <16 x i16>
  %3596 = zext <16 x i8> %wide.load5309 to <16 x i16>
  %3597 = zext <16 x i8> %wide.load5310 to <16 x i16>
  %3598 = sub nsw <16 x i16> %3594, %broadcast.splat5312
  %3599 = sub nsw <16 x i16> %3595, %broadcast.splat5314
  %3600 = sub nsw <16 x i16> %3596, %broadcast.splat5316
  %3601 = sub nsw <16 x i16> %3597, %broadcast.splat5318
  %3602 = add nsw i64 %index5304, %3584
  %3603 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3602
  %3604 = bitcast i16* %3603 to <16 x i16>*
  store <16 x i16> %3598, <16 x i16>* %3604, align 2, !tbaa !399
  %3605 = getelementptr inbounds i16, i16* %3603, i64 16
  %3606 = bitcast i16* %3605 to <16 x i16>*
  store <16 x i16> %3599, <16 x i16>* %3606, align 2, !tbaa !399
  %3607 = getelementptr inbounds i16, i16* %3603, i64 32
  %3608 = bitcast i16* %3607 to <16 x i16>*
  store <16 x i16> %3600, <16 x i16>* %3608, align 2, !tbaa !399
  %3609 = getelementptr inbounds i16, i16* %3603, i64 48
  %3610 = bitcast i16* %3609 to <16 x i16>*
  store <16 x i16> %3601, <16 x i16>* %3610, align 2, !tbaa !399
  %index.next5305 = or i64 %index5304, 64
  %3611 = add nsw i64 %index.next5305, %3583
  %3612 = getelementptr inbounds i8, i8* %12, i64 %3611
  %3613 = bitcast i8* %3612 to <16 x i8>*
  %wide.load5307.1 = load <16 x i8>, <16 x i8>* %3613, align 1, !tbaa !397
  %3614 = getelementptr inbounds i8, i8* %3612, i64 16
  %3615 = bitcast i8* %3614 to <16 x i8>*
  %wide.load5308.1 = load <16 x i8>, <16 x i8>* %3615, align 1, !tbaa !397
  %3616 = getelementptr inbounds i8, i8* %3612, i64 32
  %3617 = bitcast i8* %3616 to <16 x i8>*
  %wide.load5309.1 = load <16 x i8>, <16 x i8>* %3617, align 1, !tbaa !397
  %3618 = getelementptr inbounds i8, i8* %3612, i64 48
  %3619 = bitcast i8* %3618 to <16 x i8>*
  %wide.load5310.1 = load <16 x i8>, <16 x i8>* %3619, align 1, !tbaa !397
  %3620 = zext <16 x i8> %wide.load5307.1 to <16 x i16>
  %3621 = zext <16 x i8> %wide.load5308.1 to <16 x i16>
  %3622 = zext <16 x i8> %wide.load5309.1 to <16 x i16>
  %3623 = zext <16 x i8> %wide.load5310.1 to <16 x i16>
  %3624 = sub nsw <16 x i16> %3620, %broadcast.splat5312
  %3625 = sub nsw <16 x i16> %3621, %broadcast.splat5314
  %3626 = sub nsw <16 x i16> %3622, %broadcast.splat5316
  %3627 = sub nsw <16 x i16> %3623, %broadcast.splat5318
  %3628 = add nsw i64 %index.next5305, %3584
  %3629 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3628
  %3630 = bitcast i16* %3629 to <16 x i16>*
  store <16 x i16> %3624, <16 x i16>* %3630, align 2, !tbaa !399
  %3631 = getelementptr inbounds i16, i16* %3629, i64 16
  %3632 = bitcast i16* %3631 to <16 x i16>*
  store <16 x i16> %3625, <16 x i16>* %3632, align 2, !tbaa !399
  %3633 = getelementptr inbounds i16, i16* %3629, i64 32
  %3634 = bitcast i16* %3633 to <16 x i16>*
  store <16 x i16> %3626, <16 x i16>* %3634, align 2, !tbaa !399
  %3635 = getelementptr inbounds i16, i16* %3629, i64 48
  %3636 = bitcast i16* %3635 to <16 x i16>*
  store <16 x i16> %3627, <16 x i16>* %3636, align 2, !tbaa !399
  %index.next5305.1 = add i64 %index5304, 128
  %niter5885.nsub.1 = add i64 %niter5885, -2
  %niter5885.ncmp.1 = icmp eq i64 %niter5885.nsub.1, 0
  br i1 %niter5885.ncmp.1, label %middle.block5293.unr-lcssa, label %vector.body5295, !llvm.loop !431

middle.block5293.unr-lcssa:                       ; preds = %vector.body5295, %vector.ph5301
  %index5304.unr = phi i64 [ 0, %vector.ph5301 ], [ %index.next5305.1, %vector.body5295 ]
  br i1 %lcmp.mod5883.not, label %middle.block5293, label %vector.body5295.epil

vector.body5295.epil:                             ; preds = %middle.block5293.unr-lcssa
  %3637 = add nsw i64 %index5304.unr, %3583
  %3638 = getelementptr inbounds i8, i8* %12, i64 %3637
  %3639 = bitcast i8* %3638 to <16 x i8>*
  %wide.load5307.epil = load <16 x i8>, <16 x i8>* %3639, align 1, !tbaa !397
  %3640 = getelementptr inbounds i8, i8* %3638, i64 16
  %3641 = bitcast i8* %3640 to <16 x i8>*
  %wide.load5308.epil = load <16 x i8>, <16 x i8>* %3641, align 1, !tbaa !397
  %3642 = getelementptr inbounds i8, i8* %3638, i64 32
  %3643 = bitcast i8* %3642 to <16 x i8>*
  %wide.load5309.epil = load <16 x i8>, <16 x i8>* %3643, align 1, !tbaa !397
  %3644 = getelementptr inbounds i8, i8* %3638, i64 48
  %3645 = bitcast i8* %3644 to <16 x i8>*
  %wide.load5310.epil = load <16 x i8>, <16 x i8>* %3645, align 1, !tbaa !397
  %3646 = zext <16 x i8> %wide.load5307.epil to <16 x i16>
  %3647 = zext <16 x i8> %wide.load5308.epil to <16 x i16>
  %3648 = zext <16 x i8> %wide.load5309.epil to <16 x i16>
  %3649 = zext <16 x i8> %wide.load5310.epil to <16 x i16>
  %3650 = sub nsw <16 x i16> %3646, %broadcast.splat5312
  %3651 = sub nsw <16 x i16> %3647, %broadcast.splat5314
  %3652 = sub nsw <16 x i16> %3648, %broadcast.splat5316
  %3653 = sub nsw <16 x i16> %3649, %broadcast.splat5318
  %3654 = add nsw i64 %index5304.unr, %3584
  %3655 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3654
  %3656 = bitcast i16* %3655 to <16 x i16>*
  store <16 x i16> %3650, <16 x i16>* %3656, align 2, !tbaa !399
  %3657 = getelementptr inbounds i16, i16* %3655, i64 16
  %3658 = bitcast i16* %3657 to <16 x i16>*
  store <16 x i16> %3651, <16 x i16>* %3658, align 2, !tbaa !399
  %3659 = getelementptr inbounds i16, i16* %3655, i64 32
  %3660 = bitcast i16* %3659 to <16 x i16>*
  store <16 x i16> %3652, <16 x i16>* %3660, align 2, !tbaa !399
  %3661 = getelementptr inbounds i16, i16* %3655, i64 48
  %3662 = bitcast i16* %3661 to <16 x i16>*
  store <16 x i16> %3653, <16 x i16>* %3662, align 2, !tbaa !399
  br label %middle.block5293

middle.block5293:                                 ; preds = %middle.block5293.unr-lcssa, %vector.body5295.epil
  br i1 %cmp.n5306, label %"end for input_wrapper.s0.c241.loopexit.us", label %vec.epilog.iter.check5322

vec.epilog.iter.check5322:                        ; preds = %middle.block5293
  br i1 %min.epilog.iters.check5325, label %"for input_wrapper.s0.c240.us.preheader", label %vec.epilog.ph5323

vec.epilog.ph5323:                                ; preds = %vector.main.loop.iter.check5300, %vec.epilog.iter.check5322
  %vec.epilog.resume.val5326 = phi i64 [ %n.vec5303, %vec.epilog.iter.check5322 ], [ 0, %vector.main.loop.iter.check5300 ]
  br label %vec.epilog.vector.body5321

vec.epilog.vector.body5321:                       ; preds = %vec.epilog.vector.body5321, %vec.epilog.ph5323
  %index5329 = phi i64 [ %vec.epilog.resume.val5326, %vec.epilog.ph5323 ], [ %index.next5330, %vec.epilog.vector.body5321 ]
  %3663 = add nsw i64 %index5329, %3583
  %3664 = getelementptr inbounds i8, i8* %12, i64 %3663
  %3665 = bitcast i8* %3664 to <8 x i8>*
  %wide.load5333 = load <8 x i8>, <8 x i8>* %3665, align 1, !tbaa !397
  %3666 = zext <8 x i8> %wide.load5333 to <8 x i16>
  %3667 = sub nsw <8 x i16> %3666, %broadcast.splat5335
  %3668 = add nsw i64 %index5329, %3584
  %3669 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3668
  %3670 = bitcast i16* %3669 to <8 x i16>*
  store <8 x i16> %3667, <8 x i16>* %3670, align 2, !tbaa !399
  %index.next5330 = add i64 %index5329, 8
  %3671 = icmp eq i64 %index.next5330, %n.vec5328
  br i1 %3671, label %vec.epilog.middle.block5319, label %vec.epilog.vector.body5321, !llvm.loop !432

vec.epilog.middle.block5319:                      ; preds = %vec.epilog.vector.body5321
  br i1 %cmp.n5332, label %"end for input_wrapper.s0.c241.loopexit.us", label %"for input_wrapper.s0.c240.us.preheader"

"for input_wrapper.s0.c240.us.preheader":         ; preds = %iter.check5298, %vec.epilog.iter.check5322, %vec.epilog.middle.block5319
  %indvars.iv4114.ph = phi i64 [ 0, %iter.check5298 ], [ %n.vec5303, %vec.epilog.iter.check5322 ], [ %n.vec5328, %vec.epilog.middle.block5319 ]
  br label %"for input_wrapper.s0.c240.us"

"for input_wrapper.s0.c240.us":                   ; preds = %"for input_wrapper.s0.c240.us.preheader", %"for input_wrapper.s0.c240.us"
  %indvars.iv4114 = phi i64 [ %indvars.iv.next4115, %"for input_wrapper.s0.c240.us" ], [ %indvars.iv4114.ph, %"for input_wrapper.s0.c240.us.preheader" ]
  %3672 = add nsw i64 %indvars.iv4114, %3583
  %3673 = getelementptr inbounds i8, i8* %12, i64 %3672
  %3674 = load i8, i8* %3673, align 1, !tbaa !397
  %3675 = zext i8 %3674 to i16
  %3676 = sub nsw i16 %3675, %2861
  %3677 = add nsw i64 %indvars.iv4114, %3584
  %3678 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3677
  store i16 %3676, i16* %3678, align 2, !tbaa !399
  %indvars.iv.next4115 = add nuw nsw i64 %indvars.iv4114, 1
  %.not2144.us = icmp eq i64 %indvars.iv.next4115, %2909
  br i1 %.not2144.us, label %"end for input_wrapper.s0.c241.loopexit.us", label %"for input_wrapper.s0.c240.us", !llvm.loop !433

"end for input_wrapper.s0.c241.loopexit.us":      ; preds = %"for input_wrapper.s0.c240.us", %vec.epilog.middle.block5319, %middle.block5293
  %indvars.iv.next4117 = add nuw nsw i64 %indvars.iv4116, 1
  %.not2143.us = icmp eq i64 %indvars.iv4116, %2901
  br i1 %.not2143.us, label %"end for input_wrapper.s0.x.rebased238", label %iter.check5298

"end for input_wrapper.s0.x.rebased238":          ; preds = %"end for input_wrapper.s0.c241.loopexit.us", %"for input_wrapper.s0.y.rebased234"
  %indvars.iv.next4120 = add nuw nsw i64 %indvars.iv4119, 1
  %.not2142 = icmp eq i64 %indvars.iv4119, %2934
  br i1 %.not2142, label %"consume input_wrapper243", label %"for input_wrapper.s0.y.rebased234"

"consume input_wrapper243":                       ; preds = %"end for input_wrapper.s0.x.rebased195.loopexit.us", %"end for input_wrapper.s0.x.rebased212", %"end for input_wrapper.s0.x.rebased229", %"end for input_wrapper.s0.x.rebased238", %"end for input_wrapper.s0.x.x.rebased181", %then_bb189, %next_bb224, %then_bb223, %then_bb206, %then_bb169
  %3679 = trunc i64 %2969 to i32
  %3680 = mul i32 %29, %3679
  %t4045 = add i32 %3680, %2968
  %t4117 = sub i32 %t4045, %reass.add2702
  br i1 %48, label %"for output.s0.x.xo244.preheader", label %"end for output.s0.x.xo245", !prof !387

"for output.s0.x.xo244.preheader":                ; preds = %"consume input_wrapper243"
  %3681 = insertelement <8 x i32> poison, i32 %t4117, i32 0
  %3682 = shufflevector <8 x i32> %3681, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %"for output.s0.x.xo244"

"for output.s0.x.xo244":                          ; preds = %"for output.s0.x.xo244.preheader", %"end for output.s0.c.co249"
  %convolved1914.sroa.0.28 = phi <8 x i32> [ %convolved1914.sroa.0.30, %"end for output.s0.c.co249" ], [ %convolved1914.sroa.0.26, %"for output.s0.x.xo244.preheader" ]
  %output.s0.x.xo246 = phi i32 [ %3858, %"end for output.s0.c.co249" ], [ 0, %"for output.s0.x.xo244.preheader" ]
  %a116 = shl nsw i32 %output.s0.x.xo246, 3
  %3683 = icmp sgt i32 %b118, %a116
  %output.s0.x.x.base.s247 = select i1 %3683, i32 %a116, i32 %b118
  %t4135 = add nsw i32 %output.s0.x.x.base.s247, %24
  %3684 = insertelement <4 x i32> poison, i32 %t4135, i32 0
  %3685 = shufflevector <4 x i32> %3684, <4 x i32> undef, <4 x i32> zeroinitializer
  %3686 = add nsw <4 x i32> %3685, <i32 1, i32 2, i32 3, i32 4>
  br i1 %2873, label %"for output.s0.c.co248.preheader", label %"end for output.s0.c.co249", !prof !387

"for output.s0.c.co248.preheader":                ; preds = %"for output.s0.x.xo244"
  %t4142 = add nsw i32 %t4135, 7
  %t4141 = add nsw i32 %t4135, 6
  %t4140 = add nsw i32 %t4135, 5
  %3687 = insertelement <8 x i32> poison, i32 %t4135, i32 0
  %3688 = extractelement <4 x i32> %3686, i32 0
  %3689 = insertelement <8 x i32> %3687, i32 %3688, i32 1
  %3690 = extractelement <4 x i32> %3686, i32 1
  %3691 = insertelement <8 x i32> %3689, i32 %3690, i32 2
  %3692 = extractelement <4 x i32> %3686, i32 2
  %3693 = insertelement <8 x i32> %3691, i32 %3692, i32 3
  %3694 = extractelement <4 x i32> %3686, i32 3
  %3695 = insertelement <8 x i32> %3693, i32 %3694, i32 4
  %3696 = insertelement <8 x i32> %3695, i32 %t4140, i32 5
  %3697 = insertelement <8 x i32> %3696, i32 %t4141, i32 6
  %3698 = insertelement <8 x i32> %3697, i32 %t4142, i32 7
  %3699 = mul nsw <8 x i32> %3698, %2956
  %3700 = sub <8 x i32> %3699, %2958
  %3701 = mul nsw <8 x i32> %3698, %2960
  %3702 = add nsw <8 x i32> %3701, %3682
  %3703 = sext <8 x i32> %3702 to <8 x i64>
  %3704 = sext <8 x i32> %3700 to <8 x i64>
  br label %"for output.s0.c.co248"

"end for output.s0.x.xo245":                      ; preds = %"end for output.s0.c.co249", %"consume input_wrapper243"
  %convolved1914.sroa.0.29 = phi <8 x i32> [ %convolved1914.sroa.0.26, %"consume input_wrapper243" ], [ %convolved1914.sroa.0.30, %"end for output.s0.c.co249" ]
  %tobool.not.i2421.not = icmp eq i8* %2972, null
  br i1 %tobool.not.i2421.not, label %call_destructor.exit2424, label %if.then.i2422

if.then.i2422:                                    ; preds = %"end for output.s0.x.xo245"
  call void @halide_free(i8* null, i8* nonnull %2972) #17
  br label %call_destructor.exit2424

call_destructor.exit2424:                         ; preds = %"end for output.s0.x.xo245", %if.then.i2422
  %indvars.iv.next4159 = add nuw nsw i64 %indvars.iv4158, 1
  %3705 = icmp eq i64 %indvars.iv.next4159, %zext4162
  br i1 %3705, label %"end for output.s0.y.rebased164", label %"for output.s0.y.rebased163"

"for output.s0.c.co248":                          ; preds = %"for output.s0.c.co248.preheader", %"consume convolved261"
  %indvars.iv4155 = phi i64 [ 0, %"for output.s0.c.co248.preheader" ], [ %indvars.iv.next4156, %"consume convolved261" ]
  %3706 = shl nuw nsw i64 %indvars.iv4155, 3
  %3707 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %3706
  %3708 = bitcast i32* %3707 to <8 x i32>*
  %3709 = load <8 x i32>, <8 x i32>* %3708, align 32, !tbaa !391
  %3710 = mul nsw i64 %indvars.iv4155, %2920
  br i1 %2874, label %"for convolved.s1.r19$y252.preheader", label %"consume convolved261", !prof !387

"for convolved.s1.r19$y252.preheader":            ; preds = %"for output.s0.c.co248"
  br i1 %2875, label %"for convolved.s1.r19$y252.preheader.split.us", label %"consume convolved261", !prof !387

"for convolved.s1.r19$y252.preheader.split.us":   ; preds = %"for convolved.s1.r19$y252.preheader"
  br i1 %2814, label %"for convolved.s1.r19$y252.us.us", label %"consume convolved261", !prof !387

"for convolved.s1.r19$y252.us.us":                ; preds = %"for convolved.s1.r19$y252.preheader.split.us", %"end for convolved.s1.r19$x256.loopexit.split.us.us.us"
  %indvars.iv4152 = phi i64 [ %indvars.iv.next4153, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.272.12.us.us = phi <8 x i32> [ %3857, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.242.12.us.us = phi <8 x i32> [ %3842, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.212.12.us.us = phi <8 x i32> [ %3827, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.182.12.us.us = phi <8 x i32> [ %3812, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.142.12.us.us = phi <8 x i32> [ %3797, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.102.12.us.us = phi <8 x i32> [ %3782, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.62.12.us.us = phi <8 x i32> [ %3767, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %convolved1914.sroa.0.31.us.us = phi <8 x i32> [ %3752, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ]
  %3711 = trunc i64 %indvars.iv4152 to i32
  %3712 = mul i32 %3711, %dilation_y
  %3713 = sub i32 %3712, %t3990
  %t4144.us.us = mul nsw i32 %t4052, %3713
  %3714 = mul nsw i64 %indvars.iv4152, %2918
  %3715 = add nsw i64 %3714, %3710
  %3716 = sext i32 %t4144.us.us to i64
  %3717 = insertelement <8 x i64> poison, i64 %3716, i32 0
  br label %"for convolved.s1.r19$x255.us.us.us"

"for convolved.s1.r19$x255.us.us.us":             ; preds = %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us", %"for convolved.s1.r19$y252.us.us"
  %indvars.iv4140 = phi i64 [ %indvars.iv.next4141, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.272.13.us.us.us = phi <8 x i32> [ %3857, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.272.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.242.13.us.us.us = phi <8 x i32> [ %3842, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.242.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.212.13.us.us.us = phi <8 x i32> [ %3827, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.212.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.182.13.us.us.us = phi <8 x i32> [ %3812, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.182.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.142.13.us.us.us = phi <8 x i32> [ %3797, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.142.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.102.13.us.us.us = phi <8 x i32> [ %3782, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.102.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.62.13.us.us.us = phi <8 x i32> [ %3767, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.62.12.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %convolved1914.sroa.0.32.us.us.us = phi <8 x i32> [ %3752, %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us" ], [ %convolved1914.sroa.0.31.us.us, %"for convolved.s1.r19$y252.us.us" ]
  %3718 = mul nsw i64 %indvars.iv4140, %2915
  %3719 = insertelement <8 x i64> poison, i64 %3718, i32 0
  %3720 = shufflevector <8 x i64> %3719, <8 x i64> undef, <8 x i32> zeroinitializer
  %3721 = add nsw <8 x i64> %3720, %3704
  %3722 = mul nsw <8 x i64> %3721, %2962
  %3723 = mul nsw i64 %indvars.iv4140, %2916
  %3724 = add nsw i64 %3715, %3723
  br label %"for convolved.s1.r19$z.r115258.us.us.us"

"for convolved.s1.r19$z.r115258.us.us.us":        ; preds = %"for convolved.s1.r19$z.r115258.us.us.us", %"for convolved.s1.r19$x255.us.us.us"
  %indvars.iv4138 = phi i64 [ %indvars.iv.next4139, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ 0, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.272.15.us.us.us = phi <8 x i32> [ %3857, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.272.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.242.15.us.us.us = phi <8 x i32> [ %3842, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.242.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.212.15.us.us.us = phi <8 x i32> [ %3827, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.212.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.182.15.us.us.us = phi <8 x i32> [ %3812, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.182.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.142.15.us.us.us = phi <8 x i32> [ %3797, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.142.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.102.15.us.us.us = phi <8 x i32> [ %3782, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.102.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.62.15.us.us.us = phi <8 x i32> [ %3767, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.62.13.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %convolved1914.sroa.0.34.us.us.us = phi <8 x i32> [ %3752, %"for convolved.s1.r19$z.r115258.us.us.us" ], [ %convolved1914.sroa.0.32.us.us.us, %"for convolved.s1.r19$x255.us.us.us" ]
  %3725 = shl nuw nsw i64 %indvars.iv4138, 2
  %3726 = insertelement <8 x i64> poison, i64 %3725, i32 0
  %3727 = add <8 x i64> %3726, %3717
  %3728 = shufflevector <8 x i64> %3727, <8 x i64> poison, <8 x i32> zeroinitializer
  %3729 = add <8 x i64> %3728, %3722
  %3730 = extractelement <8 x i64> %3729, i32 0
  %3731 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3730
  %3732 = bitcast i16* %3731 to <1 x i32>*
  %3733 = load <1 x i32>, <1 x i32>* %3732, align 8, !tbaa !399
  %3734 = shufflevector <1 x i32> %3733, <1 x i32> undef, <8 x i32> zeroinitializer
  %3735 = bitcast <8 x i32> %3734 to <16 x i16>
  %3736 = shl nuw nsw i64 %indvars.iv4138, 5
  %3737 = add nsw i64 %3736, %3724
  %3738 = getelementptr inbounds i16, i16* %2876, i64 %3737
  %3739 = bitcast i16* %3738 to <16 x i16>*
  %3740 = load <16 x i16>, <16 x i16>* %3739, align 32, !tbaa !412
  %3741 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3735, <16 x i16> %3740)
  %3742 = add <8 x i32> %3741, %convolved1914.sroa.0.34.us.us.us
  %3743 = getelementptr inbounds i16, i16* %3731, i64 2
  %3744 = bitcast i16* %3743 to <1 x i32>*
  %3745 = load <1 x i32>, <1 x i32>* %3744, align 4, !tbaa !399
  %3746 = shufflevector <1 x i32> %3745, <1 x i32> undef, <8 x i32> zeroinitializer
  %3747 = bitcast <8 x i32> %3746 to <16 x i16>
  %3748 = getelementptr inbounds i16, i16* %3738, i64 16
  %3749 = bitcast i16* %3748 to <16 x i16>*
  %3750 = load <16 x i16>, <16 x i16>* %3749, align 32, !tbaa !412
  %3751 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3747, <16 x i16> %3750)
  %3752 = add <8 x i32> %3742, %3751
  %3753 = extractelement <8 x i64> %3729, i32 1
  %3754 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3753
  %3755 = bitcast i16* %3754 to <1 x i32>*
  %3756 = load <1 x i32>, <1 x i32>* %3755, align 8, !tbaa !399
  %3757 = shufflevector <1 x i32> %3756, <1 x i32> undef, <8 x i32> zeroinitializer
  %3758 = bitcast <8 x i32> %3757 to <16 x i16>
  %3759 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3758, <16 x i16> %3740)
  %3760 = add <8 x i32> %3759, %convolved1914.sroa.62.15.us.us.us
  %3761 = getelementptr inbounds i16, i16* %3754, i64 2
  %3762 = bitcast i16* %3761 to <1 x i32>*
  %3763 = load <1 x i32>, <1 x i32>* %3762, align 4, !tbaa !399
  %3764 = shufflevector <1 x i32> %3763, <1 x i32> undef, <8 x i32> zeroinitializer
  %3765 = bitcast <8 x i32> %3764 to <16 x i16>
  %3766 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3765, <16 x i16> %3750)
  %3767 = add <8 x i32> %3760, %3766
  %3768 = extractelement <8 x i64> %3729, i32 2
  %3769 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3768
  %3770 = bitcast i16* %3769 to <1 x i32>*
  %3771 = load <1 x i32>, <1 x i32>* %3770, align 8, !tbaa !399
  %3772 = shufflevector <1 x i32> %3771, <1 x i32> undef, <8 x i32> zeroinitializer
  %3773 = bitcast <8 x i32> %3772 to <16 x i16>
  %3774 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3773, <16 x i16> %3740)
  %3775 = add <8 x i32> %3774, %convolved1914.sroa.102.15.us.us.us
  %3776 = getelementptr inbounds i16, i16* %3769, i64 2
  %3777 = bitcast i16* %3776 to <1 x i32>*
  %3778 = load <1 x i32>, <1 x i32>* %3777, align 4, !tbaa !399
  %3779 = shufflevector <1 x i32> %3778, <1 x i32> undef, <8 x i32> zeroinitializer
  %3780 = bitcast <8 x i32> %3779 to <16 x i16>
  %3781 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3780, <16 x i16> %3750)
  %3782 = add <8 x i32> %3775, %3781
  %3783 = extractelement <8 x i64> %3729, i32 3
  %3784 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3783
  %3785 = bitcast i16* %3784 to <1 x i32>*
  %3786 = load <1 x i32>, <1 x i32>* %3785, align 8, !tbaa !399
  %3787 = shufflevector <1 x i32> %3786, <1 x i32> undef, <8 x i32> zeroinitializer
  %3788 = bitcast <8 x i32> %3787 to <16 x i16>
  %3789 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3788, <16 x i16> %3740)
  %3790 = add <8 x i32> %3789, %convolved1914.sroa.142.15.us.us.us
  %3791 = getelementptr inbounds i16, i16* %3784, i64 2
  %3792 = bitcast i16* %3791 to <1 x i32>*
  %3793 = load <1 x i32>, <1 x i32>* %3792, align 4, !tbaa !399
  %3794 = shufflevector <1 x i32> %3793, <1 x i32> undef, <8 x i32> zeroinitializer
  %3795 = bitcast <8 x i32> %3794 to <16 x i16>
  %3796 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3795, <16 x i16> %3750)
  %3797 = add <8 x i32> %3790, %3796
  %3798 = extractelement <8 x i64> %3729, i32 4
  %3799 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3798
  %3800 = bitcast i16* %3799 to <1 x i32>*
  %3801 = load <1 x i32>, <1 x i32>* %3800, align 8, !tbaa !399
  %3802 = shufflevector <1 x i32> %3801, <1 x i32> undef, <8 x i32> zeroinitializer
  %3803 = bitcast <8 x i32> %3802 to <16 x i16>
  %3804 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3803, <16 x i16> %3740)
  %3805 = add <8 x i32> %3804, %convolved1914.sroa.182.15.us.us.us
  %3806 = getelementptr inbounds i16, i16* %3799, i64 2
  %3807 = bitcast i16* %3806 to <1 x i32>*
  %3808 = load <1 x i32>, <1 x i32>* %3807, align 4, !tbaa !399
  %3809 = shufflevector <1 x i32> %3808, <1 x i32> undef, <8 x i32> zeroinitializer
  %3810 = bitcast <8 x i32> %3809 to <16 x i16>
  %3811 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3810, <16 x i16> %3750)
  %3812 = add <8 x i32> %3805, %3811
  %3813 = extractelement <8 x i64> %3729, i32 5
  %3814 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3813
  %3815 = bitcast i16* %3814 to <1 x i32>*
  %3816 = load <1 x i32>, <1 x i32>* %3815, align 8, !tbaa !399
  %3817 = shufflevector <1 x i32> %3816, <1 x i32> undef, <8 x i32> zeroinitializer
  %3818 = bitcast <8 x i32> %3817 to <16 x i16>
  %3819 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3818, <16 x i16> %3740)
  %3820 = add <8 x i32> %3819, %convolved1914.sroa.212.15.us.us.us
  %3821 = getelementptr inbounds i16, i16* %3814, i64 2
  %3822 = bitcast i16* %3821 to <1 x i32>*
  %3823 = load <1 x i32>, <1 x i32>* %3822, align 4, !tbaa !399
  %3824 = shufflevector <1 x i32> %3823, <1 x i32> undef, <8 x i32> zeroinitializer
  %3825 = bitcast <8 x i32> %3824 to <16 x i16>
  %3826 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3825, <16 x i16> %3750)
  %3827 = add <8 x i32> %3820, %3826
  %3828 = extractelement <8 x i64> %3729, i32 6
  %3829 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3828
  %3830 = bitcast i16* %3829 to <1 x i32>*
  %3831 = load <1 x i32>, <1 x i32>* %3830, align 8, !tbaa !399
  %3832 = shufflevector <1 x i32> %3831, <1 x i32> undef, <8 x i32> zeroinitializer
  %3833 = bitcast <8 x i32> %3832 to <16 x i16>
  %3834 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3833, <16 x i16> %3740)
  %3835 = add <8 x i32> %3834, %convolved1914.sroa.242.15.us.us.us
  %3836 = getelementptr inbounds i16, i16* %3829, i64 2
  %3837 = bitcast i16* %3836 to <1 x i32>*
  %3838 = load <1 x i32>, <1 x i32>* %3837, align 4, !tbaa !399
  %3839 = shufflevector <1 x i32> %3838, <1 x i32> undef, <8 x i32> zeroinitializer
  %3840 = bitcast <8 x i32> %3839 to <16 x i16>
  %3841 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3840, <16 x i16> %3750)
  %3842 = add <8 x i32> %3835, %3841
  %3843 = extractelement <8 x i64> %3729, i32 7
  %3844 = getelementptr inbounds i16, i16* %input_wrapper166, i64 %3843
  %3845 = bitcast i16* %3844 to <1 x i32>*
  %3846 = load <1 x i32>, <1 x i32>* %3845, align 8, !tbaa !399
  %3847 = shufflevector <1 x i32> %3846, <1 x i32> undef, <8 x i32> zeroinitializer
  %3848 = bitcast <8 x i32> %3847 to <16 x i16>
  %3849 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3848, <16 x i16> %3740)
  %3850 = add <8 x i32> %3849, %convolved1914.sroa.272.15.us.us.us
  %3851 = getelementptr inbounds i16, i16* %3844, i64 2
  %3852 = bitcast i16* %3851 to <1 x i32>*
  %3853 = load <1 x i32>, <1 x i32>* %3852, align 4, !tbaa !399
  %3854 = shufflevector <1 x i32> %3853, <1 x i32> undef, <8 x i32> zeroinitializer
  %3855 = bitcast <8 x i32> %3854 to <16 x i16>
  %3856 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %3855, <16 x i16> %3750)
  %3857 = add <8 x i32> %3850, %3856
  %indvars.iv.next4139 = add nuw nsw i64 %indvars.iv4138, 1
  %.not2141.us.us.us = icmp eq i64 %indvars.iv.next4139, %2910
  br i1 %.not2141.us.us.us, label %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us", label %"for convolved.s1.r19$z.r115258.us.us.us"

"end for convolved.s1.r19$z.r115259.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r115258.us.us.us"
  %indvars.iv.next4141 = add nuw nsw i64 %indvars.iv4140, 1
  %.not2140.us.us.us = icmp eq i64 %indvars.iv.next4141, %2917
  br i1 %.not2140.us.us.us, label %"end for convolved.s1.r19$x256.loopexit.split.us.us.us", label %"for convolved.s1.r19$x255.us.us.us"

"end for convolved.s1.r19$x256.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115259.loopexit.us.us.us"
  %indvars.iv.next4153 = add nuw nsw i64 %indvars.iv4152, 1
  %.not2139.us.us = icmp eq i64 %indvars.iv.next4153, %2919
  br i1 %.not2139.us.us, label %"consume convolved261", label %"for convolved.s1.r19$y252.us.us"

"end for output.s0.c.co249":                      ; preds = %"consume convolved261", %"for output.s0.x.xo244"
  %convolved1914.sroa.0.30 = phi <8 x i32> [ %convolved1914.sroa.0.28, %"for output.s0.x.xo244" ], [ %convolved1914.sroa.0.36, %"consume convolved261" ]
  %3858 = add nuw nsw i32 %output.s0.x.xo246, 1
  %.not2137 = icmp eq i32 %3858, %t4012
  br i1 %.not2137, label %"end for output.s0.x.xo245", label %"for output.s0.x.xo244"

"consume convolved261":                           ; preds = %"end for convolved.s1.r19$x256.loopexit.split.us.us.us", %"for convolved.s1.r19$y252.preheader.split.us", %"for convolved.s1.r19$y252.preheader", %"for output.s0.c.co248"
  %convolved1914.sroa.272.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3857, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.242.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3842, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.212.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3827, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.182.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3812, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.142.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3797, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3782, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.17 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3767, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.36 = phi <8 x i32> [ %3709, %"for output.s0.c.co248" ], [ %3709, %"for convolved.s1.r19$y252.preheader" ], [ %3709, %"for convolved.s1.r19$y252.preheader.split.us" ], [ %3752, %"end for convolved.s1.r19$x256.loopexit.split.us.us.us" ]
  %3859 = sext <8 x i32> %convolved1914.sroa.0.36 to <8 x i64>
  %3860 = mul nsw <8 x i64> %3859, %2879
  %3861 = ashr <8 x i64> %3860, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3862 = add nsw <8 x i64> %3861, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a120 = ashr <8 x i64> %3862, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3863 = shufflevector <8 x i64> %a120, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3864 = icmp slt <4 x i64> %3863, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3865 = shufflevector <8 x i64> %a120, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3866 = icmp slt <4 x i64> %3865, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3867 = select <4 x i1> %3864, <4 x i64> %3863, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3868 = select <4 x i1> %3866, <4 x i64> %3865, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3869 = icmp sgt <4 x i64> %3867, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3870 = icmp sgt <4 x i64> %3868, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3871 = select <4 x i1> %3869, <4 x i64> %3867, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3872 = select <4 x i1> %3870, <4 x i64> %3868, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3873 = shufflevector <4 x i64> %3871, <4 x i64> %3872, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4512 = trunc <8 x i64> %3873 to <8 x i32>
  %3874 = ashr <8 x i32> %t4512, %2882
  %3875 = shl <8 x i32> %t4512, %2882
  %3876 = select <8 x i1> %2883, <8 x i32> %3874, <8 x i32> %3875
  %3877 = lshr <8 x i32> %t4512, %2889
  %3878 = shl <8 x i32> %t4512, %2889
  %3879 = select <8 x i1> %2890, <8 x i32> %3877, <8 x i32> %3878
  %3880 = and <8 x i32> %3879, %2885
  %3881 = add nsw <8 x i32> %3880, %3876
  %3882 = shufflevector <8 x i32> %3881, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3883 = shufflevector <8 x i32> %3881, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3884 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %3882, <4 x i32> %3883) #11
  %3885 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %3884, <8 x i16> %2893)
  %3886 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3885, <8 x i16> undef) #11
  %3887 = shufflevector <16 x i8> %3886, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3888 = icmp ugt <16 x i8> %2895, %3887
  %3889 = select <16 x i1> %3888, <16 x i8> %3887, <16 x i8> %2895
  %3890 = shufflevector <16 x i8> %3889, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3891 = icmp ugt <16 x i8> %3890, %2897
  %3892 = select <16 x i1> %3891, <16 x i8> %3890, <16 x i8> %2897
  %3893 = shufflevector <16 x i8> %3892, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3894 = insertelement <8 x i64> poison, i64 %3706, i32 0
  %3895 = shufflevector <8 x i64> %3894, <8 x i64> undef, <8 x i32> zeroinitializer
  %3896 = add nsw <8 x i64> %3895, %3703
  %3897 = extractelement <8 x i64> %3896, i32 0
  %3898 = getelementptr inbounds i8, i8* %22, i64 %3897
  %3899 = bitcast i8* %3898 to <8 x i8>*
  store <8 x i8> %3893, <8 x i8>* %3899, align 1, !tbaa !414
  %3900 = sext <8 x i32> %convolved1914.sroa.62.17 to <8 x i64>
  %3901 = mul nsw <8 x i64> %3900, %2879
  %3902 = ashr <8 x i64> %3901, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3903 = add nsw <8 x i64> %3902, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a126 = ashr <8 x i64> %3903, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3904 = shufflevector <8 x i64> %a126, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3905 = icmp slt <4 x i64> %3904, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3906 = shufflevector <8 x i64> %a126, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3907 = icmp slt <4 x i64> %3906, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3908 = select <4 x i1> %3905, <4 x i64> %3904, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3909 = select <4 x i1> %3907, <4 x i64> %3906, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3910 = icmp sgt <4 x i64> %3908, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3911 = icmp sgt <4 x i64> %3909, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3912 = select <4 x i1> %3910, <4 x i64> %3908, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3913 = select <4 x i1> %3911, <4 x i64> %3909, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3914 = shufflevector <4 x i64> %3912, <4 x i64> %3913, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4516 = trunc <8 x i64> %3914 to <8 x i32>
  %3915 = ashr <8 x i32> %t4516, %2882
  %3916 = shl <8 x i32> %t4516, %2882
  %3917 = select <8 x i1> %2883, <8 x i32> %3915, <8 x i32> %3916
  %3918 = lshr <8 x i32> %t4516, %2889
  %3919 = shl <8 x i32> %t4516, %2889
  %3920 = select <8 x i1> %2890, <8 x i32> %3918, <8 x i32> %3919
  %3921 = and <8 x i32> %3920, %2885
  %3922 = add nsw <8 x i32> %3921, %3917
  %3923 = shufflevector <8 x i32> %3922, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3924 = shufflevector <8 x i32> %3922, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3925 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %3923, <4 x i32> %3924) #11
  %3926 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %3925, <8 x i16> %2893)
  %3927 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3926, <8 x i16> undef) #11
  %3928 = shufflevector <16 x i8> %3927, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3929 = icmp ugt <16 x i8> %2895, %3928
  %3930 = select <16 x i1> %3929, <16 x i8> %3928, <16 x i8> %2895
  %3931 = shufflevector <16 x i8> %3930, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3932 = icmp ugt <16 x i8> %3931, %2897
  %3933 = select <16 x i1> %3932, <16 x i8> %3931, <16 x i8> %2897
  %3934 = shufflevector <16 x i8> %3933, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3935 = extractelement <8 x i64> %3896, i32 1
  %3936 = getelementptr inbounds i8, i8* %22, i64 %3935
  %3937 = bitcast i8* %3936 to <8 x i8>*
  store <8 x i8> %3934, <8 x i8>* %3937, align 1, !tbaa !414
  %3938 = sext <8 x i32> %convolved1914.sroa.102.17 to <8 x i64>
  %3939 = mul nsw <8 x i64> %3938, %2879
  %3940 = ashr <8 x i64> %3939, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3941 = add nsw <8 x i64> %3940, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a132 = ashr <8 x i64> %3941, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3942 = shufflevector <8 x i64> %a132, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3943 = icmp slt <4 x i64> %3942, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3944 = shufflevector <8 x i64> %a132, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3945 = icmp slt <4 x i64> %3944, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3946 = select <4 x i1> %3943, <4 x i64> %3942, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3947 = select <4 x i1> %3945, <4 x i64> %3944, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3948 = icmp sgt <4 x i64> %3946, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3949 = icmp sgt <4 x i64> %3947, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3950 = select <4 x i1> %3948, <4 x i64> %3946, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3951 = select <4 x i1> %3949, <4 x i64> %3947, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3952 = shufflevector <4 x i64> %3950, <4 x i64> %3951, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4520 = trunc <8 x i64> %3952 to <8 x i32>
  %3953 = ashr <8 x i32> %t4520, %2882
  %3954 = shl <8 x i32> %t4520, %2882
  %3955 = select <8 x i1> %2883, <8 x i32> %3953, <8 x i32> %3954
  %3956 = lshr <8 x i32> %t4520, %2889
  %3957 = shl <8 x i32> %t4520, %2889
  %3958 = select <8 x i1> %2890, <8 x i32> %3956, <8 x i32> %3957
  %3959 = and <8 x i32> %3958, %2885
  %3960 = add nsw <8 x i32> %3959, %3955
  %3961 = shufflevector <8 x i32> %3960, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3962 = shufflevector <8 x i32> %3960, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3963 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %3961, <4 x i32> %3962) #11
  %3964 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %3963, <8 x i16> %2893)
  %3965 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %3964, <8 x i16> undef) #11
  %3966 = shufflevector <16 x i8> %3965, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3967 = icmp ugt <16 x i8> %2895, %3966
  %3968 = select <16 x i1> %3967, <16 x i8> %3966, <16 x i8> %2895
  %3969 = shufflevector <16 x i8> %3968, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %3970 = icmp ugt <16 x i8> %3969, %2897
  %3971 = select <16 x i1> %3970, <16 x i8> %3969, <16 x i8> %2897
  %3972 = shufflevector <16 x i8> %3971, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3973 = extractelement <8 x i64> %3896, i32 2
  %3974 = getelementptr inbounds i8, i8* %22, i64 %3973
  %3975 = bitcast i8* %3974 to <8 x i8>*
  store <8 x i8> %3972, <8 x i8>* %3975, align 1, !tbaa !414
  %3976 = sext <8 x i32> %convolved1914.sroa.142.17 to <8 x i64>
  %3977 = mul nsw <8 x i64> %3976, %2879
  %3978 = ashr <8 x i64> %3977, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %3979 = add nsw <8 x i64> %3978, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a138 = ashr <8 x i64> %3979, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %3980 = shufflevector <8 x i64> %a138, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %3981 = icmp slt <4 x i64> %3980, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3982 = shufflevector <8 x i64> %a138, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %3983 = icmp slt <4 x i64> %3982, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3984 = select <4 x i1> %3981, <4 x i64> %3980, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3985 = select <4 x i1> %3983, <4 x i64> %3982, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %3986 = icmp sgt <4 x i64> %3984, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3987 = icmp sgt <4 x i64> %3985, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3988 = select <4 x i1> %3986, <4 x i64> %3984, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3989 = select <4 x i1> %3987, <4 x i64> %3985, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %3990 = shufflevector <4 x i64> %3988, <4 x i64> %3989, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4524 = trunc <8 x i64> %3990 to <8 x i32>
  %3991 = ashr <8 x i32> %t4524, %2882
  %3992 = shl <8 x i32> %t4524, %2882
  %3993 = select <8 x i1> %2883, <8 x i32> %3991, <8 x i32> %3992
  %3994 = lshr <8 x i32> %t4524, %2889
  %3995 = shl <8 x i32> %t4524, %2889
  %3996 = select <8 x i1> %2890, <8 x i32> %3994, <8 x i32> %3995
  %3997 = and <8 x i32> %3996, %2885
  %3998 = add nsw <8 x i32> %3997, %3993
  %3999 = shufflevector <8 x i32> %3998, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4000 = shufflevector <8 x i32> %3998, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4001 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %3999, <4 x i32> %4000) #11
  %4002 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %4001, <8 x i16> %2893)
  %4003 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %4002, <8 x i16> undef) #11
  %4004 = shufflevector <16 x i8> %4003, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4005 = icmp ugt <16 x i8> %2895, %4004
  %4006 = select <16 x i1> %4005, <16 x i8> %4004, <16 x i8> %2895
  %4007 = shufflevector <16 x i8> %4006, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4008 = icmp ugt <16 x i8> %4007, %2897
  %4009 = select <16 x i1> %4008, <16 x i8> %4007, <16 x i8> %2897
  %4010 = shufflevector <16 x i8> %4009, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4011 = extractelement <8 x i64> %3896, i32 3
  %4012 = getelementptr inbounds i8, i8* %22, i64 %4011
  %4013 = bitcast i8* %4012 to <8 x i8>*
  store <8 x i8> %4010, <8 x i8>* %4013, align 1, !tbaa !414
  %4014 = sext <8 x i32> %convolved1914.sroa.182.17 to <8 x i64>
  %4015 = mul nsw <8 x i64> %4014, %2879
  %4016 = ashr <8 x i64> %4015, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4017 = add nsw <8 x i64> %4016, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a144 = ashr <8 x i64> %4017, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4018 = shufflevector <8 x i64> %a144, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4019 = icmp slt <4 x i64> %4018, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4020 = shufflevector <8 x i64> %a144, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4021 = icmp slt <4 x i64> %4020, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4022 = select <4 x i1> %4019, <4 x i64> %4018, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4023 = select <4 x i1> %4021, <4 x i64> %4020, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4024 = icmp sgt <4 x i64> %4022, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4025 = icmp sgt <4 x i64> %4023, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4026 = select <4 x i1> %4024, <4 x i64> %4022, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4027 = select <4 x i1> %4025, <4 x i64> %4023, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4028 = shufflevector <4 x i64> %4026, <4 x i64> %4027, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4528 = trunc <8 x i64> %4028 to <8 x i32>
  %4029 = ashr <8 x i32> %t4528, %2882
  %4030 = shl <8 x i32> %t4528, %2882
  %4031 = select <8 x i1> %2883, <8 x i32> %4029, <8 x i32> %4030
  %4032 = lshr <8 x i32> %t4528, %2889
  %4033 = shl <8 x i32> %t4528, %2889
  %4034 = select <8 x i1> %2890, <8 x i32> %4032, <8 x i32> %4033
  %4035 = and <8 x i32> %4034, %2885
  %4036 = add nsw <8 x i32> %4035, %4031
  %4037 = shufflevector <8 x i32> %4036, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4038 = shufflevector <8 x i32> %4036, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4039 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %4037, <4 x i32> %4038) #11
  %4040 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %4039, <8 x i16> %2893)
  %4041 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %4040, <8 x i16> undef) #11
  %4042 = shufflevector <16 x i8> %4041, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4043 = icmp ugt <16 x i8> %2895, %4042
  %4044 = select <16 x i1> %4043, <16 x i8> %4042, <16 x i8> %2895
  %4045 = shufflevector <16 x i8> %4044, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4046 = icmp ugt <16 x i8> %4045, %2897
  %4047 = select <16 x i1> %4046, <16 x i8> %4045, <16 x i8> %2897
  %4048 = shufflevector <16 x i8> %4047, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4049 = extractelement <8 x i64> %3896, i32 4
  %4050 = getelementptr inbounds i8, i8* %22, i64 %4049
  %4051 = bitcast i8* %4050 to <8 x i8>*
  store <8 x i8> %4048, <8 x i8>* %4051, align 1, !tbaa !414
  %4052 = sext <8 x i32> %convolved1914.sroa.212.17 to <8 x i64>
  %4053 = mul nsw <8 x i64> %4052, %2879
  %4054 = ashr <8 x i64> %4053, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4055 = add nsw <8 x i64> %4054, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a150 = ashr <8 x i64> %4055, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4056 = shufflevector <8 x i64> %a150, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4057 = icmp slt <4 x i64> %4056, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4058 = shufflevector <8 x i64> %a150, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4059 = icmp slt <4 x i64> %4058, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4060 = select <4 x i1> %4057, <4 x i64> %4056, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4061 = select <4 x i1> %4059, <4 x i64> %4058, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4062 = icmp sgt <4 x i64> %4060, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4063 = icmp sgt <4 x i64> %4061, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4064 = select <4 x i1> %4062, <4 x i64> %4060, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4065 = select <4 x i1> %4063, <4 x i64> %4061, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4066 = shufflevector <4 x i64> %4064, <4 x i64> %4065, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4532 = trunc <8 x i64> %4066 to <8 x i32>
  %4067 = ashr <8 x i32> %t4532, %2882
  %4068 = shl <8 x i32> %t4532, %2882
  %4069 = select <8 x i1> %2883, <8 x i32> %4067, <8 x i32> %4068
  %4070 = lshr <8 x i32> %t4532, %2889
  %4071 = shl <8 x i32> %t4532, %2889
  %4072 = select <8 x i1> %2890, <8 x i32> %4070, <8 x i32> %4071
  %4073 = and <8 x i32> %4072, %2885
  %4074 = add nsw <8 x i32> %4073, %4069
  %4075 = shufflevector <8 x i32> %4074, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4076 = shufflevector <8 x i32> %4074, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4077 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %4075, <4 x i32> %4076) #11
  %4078 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %4077, <8 x i16> %2893)
  %4079 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %4078, <8 x i16> undef) #11
  %4080 = shufflevector <16 x i8> %4079, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4081 = icmp ugt <16 x i8> %2895, %4080
  %4082 = select <16 x i1> %4081, <16 x i8> %4080, <16 x i8> %2895
  %4083 = shufflevector <16 x i8> %4082, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4084 = icmp ugt <16 x i8> %4083, %2897
  %4085 = select <16 x i1> %4084, <16 x i8> %4083, <16 x i8> %2897
  %4086 = shufflevector <16 x i8> %4085, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4087 = extractelement <8 x i64> %3896, i32 5
  %4088 = getelementptr inbounds i8, i8* %22, i64 %4087
  %4089 = bitcast i8* %4088 to <8 x i8>*
  store <8 x i8> %4086, <8 x i8>* %4089, align 1, !tbaa !414
  %4090 = sext <8 x i32> %convolved1914.sroa.242.17 to <8 x i64>
  %4091 = mul nsw <8 x i64> %4090, %2879
  %4092 = ashr <8 x i64> %4091, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4093 = add nsw <8 x i64> %4092, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a156 = ashr <8 x i64> %4093, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4094 = shufflevector <8 x i64> %a156, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4095 = icmp slt <4 x i64> %4094, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4096 = shufflevector <8 x i64> %a156, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4097 = icmp slt <4 x i64> %4096, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4098 = select <4 x i1> %4095, <4 x i64> %4094, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4099 = select <4 x i1> %4097, <4 x i64> %4096, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4100 = icmp sgt <4 x i64> %4098, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4101 = icmp sgt <4 x i64> %4099, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4102 = select <4 x i1> %4100, <4 x i64> %4098, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4103 = select <4 x i1> %4101, <4 x i64> %4099, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4104 = shufflevector <4 x i64> %4102, <4 x i64> %4103, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4536 = trunc <8 x i64> %4104 to <8 x i32>
  %4105 = ashr <8 x i32> %t4536, %2882
  %4106 = shl <8 x i32> %t4536, %2882
  %4107 = select <8 x i1> %2883, <8 x i32> %4105, <8 x i32> %4106
  %4108 = lshr <8 x i32> %t4536, %2889
  %4109 = shl <8 x i32> %t4536, %2889
  %4110 = select <8 x i1> %2890, <8 x i32> %4108, <8 x i32> %4109
  %4111 = and <8 x i32> %4110, %2885
  %4112 = add nsw <8 x i32> %4111, %4107
  %4113 = shufflevector <8 x i32> %4112, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4114 = shufflevector <8 x i32> %4112, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4115 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %4113, <4 x i32> %4114) #11
  %4116 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %4115, <8 x i16> %2893)
  %4117 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %4116, <8 x i16> undef) #11
  %4118 = shufflevector <16 x i8> %4117, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4119 = icmp ugt <16 x i8> %2895, %4118
  %4120 = select <16 x i1> %4119, <16 x i8> %4118, <16 x i8> %2895
  %4121 = shufflevector <16 x i8> %4120, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4122 = icmp ugt <16 x i8> %4121, %2897
  %4123 = select <16 x i1> %4122, <16 x i8> %4121, <16 x i8> %2897
  %4124 = shufflevector <16 x i8> %4123, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4125 = extractelement <8 x i64> %3896, i32 6
  %4126 = getelementptr inbounds i8, i8* %22, i64 %4125
  %4127 = bitcast i8* %4126 to <8 x i8>*
  store <8 x i8> %4124, <8 x i8>* %4127, align 1, !tbaa !414
  %4128 = sext <8 x i32> %convolved1914.sroa.272.17 to <8 x i64>
  %4129 = mul nsw <8 x i64> %4128, %2879
  %4130 = ashr <8 x i64> %4129, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4131 = add nsw <8 x i64> %4130, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a162 = ashr <8 x i64> %4131, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4132 = shufflevector <8 x i64> %a162, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4133 = icmp slt <4 x i64> %4132, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4134 = shufflevector <8 x i64> %a162, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4135 = icmp slt <4 x i64> %4134, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4136 = select <4 x i1> %4133, <4 x i64> %4132, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4137 = select <4 x i1> %4135, <4 x i64> %4134, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4138 = icmp sgt <4 x i64> %4136, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4139 = icmp sgt <4 x i64> %4137, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4140 = select <4 x i1> %4138, <4 x i64> %4136, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4141 = select <4 x i1> %4139, <4 x i64> %4137, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4142 = shufflevector <4 x i64> %4140, <4 x i64> %4141, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4540 = trunc <8 x i64> %4142 to <8 x i32>
  %4143 = ashr <8 x i32> %t4540, %2882
  %4144 = shl <8 x i32> %t4540, %2882
  %4145 = select <8 x i1> %2883, <8 x i32> %4143, <8 x i32> %4144
  %4146 = lshr <8 x i32> %t4540, %2889
  %4147 = shl <8 x i32> %t4540, %2889
  %4148 = select <8 x i1> %2890, <8 x i32> %4146, <8 x i32> %4147
  %4149 = and <8 x i32> %4148, %2885
  %4150 = add nsw <8 x i32> %4149, %4145
  %4151 = shufflevector <8 x i32> %4150, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4152 = shufflevector <8 x i32> %4150, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4153 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %4151, <4 x i32> %4152) #11
  %4154 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %4153, <8 x i16> %2893)
  %4155 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %4154, <8 x i16> undef) #11
  %4156 = shufflevector <16 x i8> %4155, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4157 = icmp ugt <16 x i8> %2895, %4156
  %4158 = select <16 x i1> %4157, <16 x i8> %4156, <16 x i8> %2895
  %4159 = shufflevector <16 x i8> %4158, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %4160 = icmp ugt <16 x i8> %4159, %2897
  %4161 = select <16 x i1> %4160, <16 x i8> %4159, <16 x i8> %2897
  %4162 = shufflevector <16 x i8> %4161, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4163 = extractelement <8 x i64> %3896, i32 7
  %4164 = getelementptr inbounds i8, i8* %22, i64 %4163
  %4165 = bitcast i8* %4164 to <8 x i8>*
  store <8 x i8> %4162, <8 x i8>* %4165, align 1, !tbaa !414
  %indvars.iv.next4156 = add nuw nsw i64 %indvars.iv4155, 1
  %.not2138 = icmp eq i64 %indvars.iv.next4156, %2921
  br i1 %.not2138, label %"end for output.s0.c.co249", label %"for output.s0.c.co248"

then_bb262:                                       ; preds = %next_bb159
  %t4187 = add nsw i32 %6, 1
  %a165 = ashr i32 %t4187, 2
  %4166 = icmp sgt i32 %6, 2
  %t4188 = select i1 %4166, i32 %a165, i32 0
  %a166 = ashr i32 %t4187, 3
  %4167 = icmp sgt i32 %6, 6
  %t4189 = select i1 %4167, i32 %a166, i32 0
  %4168 = add nsw i32 %10, -1
  %t4190 = mul nsw i32 %4168, %dilation_y
  %a172 = ashr i32 %t4187, 1
  %4169 = icmp eq i32 %14, 4
  %4170 = icmp eq i32 %16, 4
  %t4192 = and i1 %4169, %4170
  %t4193 = add nsw i32 %6, -1
  %t4194 = ashr i32 %t4193, 1
  %4171 = shl nsw i32 %t4194, 2
  %b169 = or i32 %4171, 3
  %t4196 = icmp slt i32 %dilation_y, 0
  %t4158 = select i1 %t4196, i32 %t4190, i32 0
  %t4157 = select i1 %t4196, i32 0, i32 %t4190
  %4172 = icmp slt i32 %14, 16
  %4173 = icmp slt i32 %14, 8
  %4174 = icmp slt i32 %14, 4
  %4175 = icmp slt i32 %a172, 1
  %4176 = select i1 %4175, i32 %a172, i32 1
  %4177 = add nsw i32 %4176, %t4194
  %4178 = select i1 %4174, i32 %a172, i32 %4177
  %4179 = icmp slt i32 %a172, 2
  %4180 = select i1 %4179, i32 %a172, i32 2
  %4181 = and i32 %t4194, -2
  %4182 = add nsw i32 %4180, %4181
  %4183 = select i1 %4173, i32 %4178, i32 %4182
  %4184 = icmp slt i32 %a172, 4
  %4185 = select i1 %4184, i32 %a172, i32 4
  %4186 = and i32 %t4194, -4
  %4187 = add nsw i32 %4185, %4186
  %a168 = select i1 %4172, i32 %4183, i32 %4187
  %4188 = icmp sgt i32 %a172, %a168
  %4189 = select i1 %4188, i32 %a168, i32 %a172
  %4190 = shl nsw i32 %4189, 2
  %4191 = add nsw i32 %4190, -1
  %a167 = select i1 %t4192, i32 %b169, i32 %4191
  %4192 = icmp sgt i32 %a167, %b169
  %a184 = select i1 %4192, i32 %a167, i32 %b169
  %4193 = icmp sgt i32 %6, 0
  %t4179 = select i1 %4193, i32 %a172, i32 0
  %t4180 = ashr i32 %3, 5
  %4194 = add nsw i32 %6, 7
  %4195 = ashr i32 %4194, 3
  %t4173 = sub nsw i32 %4195, %t4189
  %4196 = add nsw i32 %6, 3
  %4197 = ashr i32 %4196, 2
  %t4177 = sub nsw i32 %4197, %t4188
  %4198 = select i1 %t3704, i32 %t3705, i32 0
  %4199 = select i1 %t3706, i32 %25, i32 1
  %4200 = add i32 %24, -1
  %4201 = add i32 %4200, %4199
  %4202 = mul nsw i32 %4201, %stride_x
  %b179 = add nsw i32 %4202, %4198
  %4203 = icmp sgt i32 %20, 0
  br i1 %4203, label %"for output.s0.b.rebased264.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased264.preheader":           ; preds = %then_bb262
  %4204 = mul nsw i32 %16, %15
  %4205 = add nsw i32 %25, -1
  %4206 = select i1 %t3706, i32 0, i32 %4205
  %4207 = add nsw i32 %4206, %24
  %4208 = mul nsw i32 %4207, %stride_x
  %4209 = select i1 %t3704, i32 0, i32 %t3705
  %b177 = add nsw i32 %4208, %4209
  %a176 = sub i32 %b177, %b179
  %a178 = ashr i32 %a176, 3
  %4210 = add nsw i32 %a176, 1
  %a173 = ashr i32 %4210, 3
  %4211 = icmp sgt i32 %a176, 6
  %t4215 = select i1 %4211, i32 %a173, i32 0
  %.neg2664 = mul i32 %29, %27
  %.neg2665 = mul i32 %26, %24
  %.neg2666 = mul i32 %30, %19
  %4212 = add i32 %t3702, %4204
  %4213 = add i32 %4212, %t3703
  %.neg2670 = mul i32 %15, -4
  %4214 = icmp sgt i32 %a178, -1
  %4215 = select i1 %4214, i32 %a178, i32 -1
  %4216 = sub nsw i32 %4215, %t4215
  %4217 = icmp sgt i32 %28, 0
  %4218 = icmp sgt i32 %a176, -1
  %4219 = add nsw i32 %a184, 1
  %t4253 = shl nsw i32 %a172, 2
  %4220 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %4221 = shufflevector <16 x i8> %4220, <16 x i8> undef, <16 x i32> zeroinitializer
  %4222 = zext <16 x i8> %4221 to <16 x i16>
  %4223 = icmp sgt i32 %t4173, 0
  %4224 = insertelement <16 x i32> undef, i32 %t4253, i32 0
  %4225 = shufflevector <16 x i32> %4224, <16 x i32> undef, <8 x i32> zeroinitializer
  %4226 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %4227 = shufflevector <8 x i8> %4226, <8 x i8> undef, <8 x i32> zeroinitializer
  %4228 = zext <8 x i8> %4227 to <8 x i16>
  %4229 = icmp sgt i32 %t4177, 0
  %4230 = insertelement <8 x i32> undef, i32 %t4253, i32 0
  %4231 = shufflevector <8 x i32> %4230, <8 x i32> undef, <8 x i32> zeroinitializer
  %4232 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %4233 = shufflevector <4 x i8> %4232, <4 x i8> undef, <4 x i32> zeroinitializer
  %4234 = zext <4 x i8> %4233 to <4 x i16>
  %4235 = zext i8 %input_zero to i16
  %.neg2671 = sub i32 %.neg2670, %t3702
  %t4169.neg = sub i32 %.neg2671, %t3703
  %4236 = shl i32 %4219, 1
  %4237 = mul nsw i32 %a184, 7
  %4238 = mul nsw i32 %a184, 6
  %4239 = mul nsw i32 %a184, 5
  %4240 = shl nsw i32 %a184, 2
  %4241 = mul nsw i32 %a184, 3
  %4242 = shl nsw i32 %a184, 1
  %4243 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %4244 = shufflevector <32 x i8> %4243, <32 x i8> undef, <32 x i32> zeroinitializer
  %4245 = zext <32 x i8> %4244 to <32 x i16>
  %4246 = icmp sgt i32 %4216, -1
  %reass.add2680 = add i32 %.neg2664, %.neg2665
  %reass.add2681 = add i32 %reass.add2680, %.neg2666
  %4247 = icmp sgt i32 %3, 31
  %4248 = icmp sgt i32 %10, 0
  %4249 = icmp sgt i32 %8, 0
  %4250 = bitcast i8* %4 to i16*
  %4251 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %4252 = shufflevector <32 x i32> %4251, <32 x i32> undef, <32 x i32> zeroinitializer
  %4253 = sext <32 x i32> %4252 to <32 x i64>
  %4254 = insertelement <32 x i32> undef, i32 %output_shift, i32 0
  %4255 = shufflevector <32 x i32> %4254, <32 x i32> undef, <8 x i32> zeroinitializer
  %4256 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %4255, i1 false) #11
  %4257 = shufflevector <8 x i32> %4256, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4552 = shufflevector <16 x i32> %4257, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4258 = icmp slt <8 x i32> %4255, zeroinitializer
  %4259 = shufflevector <8 x i1> %4258, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4260 = shufflevector <16 x i1> %4259, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4261 = xor <32 x i1> %4260, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %4262 = shufflevector <32 x i1> %4261, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4263 = shufflevector <32 x i1> %4261, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4264 = shufflevector <32 x i1> %4261, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4265 = shufflevector <32 x i1> %4261, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4266 = icmp sgt i32 %output_shift, 0
  %4267 = select i1 %4266, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %4268 = add nsw i32 %output_shift, -1
  %4269 = insertelement <32 x i32> undef, i32 %4268, i32 0
  %4270 = shufflevector <32 x i32> %4269, <32 x i32> undef, <8 x i32> zeroinitializer
  %4271 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %4270, i1 false) #11
  %4272 = shufflevector <8 x i32> %4271, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4554 = shufflevector <16 x i32> %4272, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4273 = icmp slt <8 x i32> %4270, zeroinitializer
  %4274 = shufflevector <8 x i1> %4273, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4275 = shufflevector <16 x i1> %4274, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4276 = xor <32 x i1> %4275, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %4277 = shufflevector <32 x i1> %4276, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4278 = shufflevector <32 x i1> %4276, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4279 = shufflevector <32 x i1> %4276, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4280 = shufflevector <32 x i1> %4276, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4281 = zext i8 %output_zero to i16
  %4282 = insertelement <32 x i16> undef, i16 %4281, i32 0
  %4283 = shufflevector <32 x i16> %4282, <32 x i16> undef, <16 x i32> zeroinitializer
  %4284 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %b192 = shufflevector <32 x i8> %4284, <32 x i8> undef, <32 x i32> zeroinitializer
  %4285 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %b191 = shufflevector <32 x i8> %4285, <32 x i8> undef, <32 x i32> zeroinitializer
  br i1 %4217, label %"for output.s0.b.rebased264.us.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased264.us.preheader":        ; preds = %"for output.s0.b.rebased264.preheader"
  %4286 = icmp sgt i32 %a184, -1
  %t4544 = select i1 %4286, i32 %a184, i32 -1
  %4287 = add nsw i32 %t4544, 1
  %4288 = zext i32 %4287 to i64
  %t4546 = shl nuw nsw i64 %4288, 1
  %4289 = select i1 %4218, i32 %4210, i32 0
  %t4545 = zext i32 %4289 to i64
  %t4548 = mul i64 %t4546, %t4545
  %t4219 = mul nsw i32 %4210, %4219
  %4290 = zext i32 %t4189 to i64
  %4291 = sext i32 %b179 to i64
  %4292 = sext i32 %16 to i64
  %4293 = zext i32 %a176 to i64
  %4294 = sext i32 %t4189 to i64
  %4295 = zext i32 %t4173 to i64
  %4296 = sext i32 %18 to i64
  %4297 = zext i32 %t4188 to i64
  %4298 = sext i32 %t4188 to i64
  %4299 = zext i32 %t4177 to i64
  %4300 = zext i32 %t4179 to i64
  %4301 = zext i32 %t4253 to i64
  %4302 = zext i32 %a172 to i64
  %4303 = zext i32 %t4215 to i64
  %4304 = sext i32 %4219 to i64
  %4305 = zext i32 %4216 to i64
  %4306 = sext i32 %t4219 to i64
  %4307 = sext i32 %9 to i64
  %4308 = zext i32 %8 to i64
  %4309 = sext i32 %11 to i64
  %4310 = zext i32 %10 to i64
  %4311 = zext i32 %t4180 to i64
  %4312 = zext i32 %24 to i64
  %4313 = zext i32 %25 to i64
  %4314 = sub i32 %t4157, %t4158
  %4315 = sext i32 %27 to i64
  %4316 = sext i32 %stride_y to i64
  %4317 = sext i32 %t4158 to i64
  %4318 = zext i32 %19 to i64
  %zext4075 = zext i32 %20 to i64
  %zext4070 = zext i32 %28 to i64
  %a186.us = add nsw i32 %4314, 1
  %4319 = icmp sgt i32 %4314, -1
  %4320 = select i1 %4319, i32 %a186.us, i32 0
  %t4547.us = zext i32 %4320 to i64
  %4321 = mul i64 %t4548, %t4547.us
  %4322 = add i64 %4321, 6
  %4323 = zext i32 %4314 to i64
  %4324 = zext i32 %4314 to i64
  %4325 = zext i32 %4314 to i64
  %4326 = zext i32 %4314 to i64
  %4327 = zext i32 %4314 to i64
  %4328 = add nsw i64 %4290, -1
  %4329 = add nsw i64 %4290, -1
  %4330 = add nsw i64 %4297, -1
  %4331 = add nsw i64 %4297, -1
  %4332 = add nsw i64 %4300, -1
  %4333 = and i64 %4301, 4294967232
  %4334 = add nsw i64 %4333, -64
  %4335 = lshr exact i64 %4334, 6
  %4336 = add nuw nsw i64 %4335, 1
  %4337 = add nsw i64 %4302, -1
  %4338 = or i32 %4314, %a176
  %4339 = icmp slt i32 %4338, 0
  %xtraiter5823 = and i64 %4290, 3
  %4340 = icmp ult i64 %4328, 3
  %unroll_iter5826 = and i64 %4290, 4294967292
  %lcmp.mod5825.not = icmp eq i64 %xtraiter5823, 0
  %xtraiter5828 = and i64 %4290, 3
  %4341 = icmp ult i64 %4329, 3
  %unroll_iter5831 = and i64 %4290, 4294967292
  %lcmp.mod5830.not = icmp eq i64 %xtraiter5828, 0
  %xtraiter5833 = and i64 %4297, 3
  %4342 = icmp ult i64 %4330, 3
  %unroll_iter5836 = and i64 %4297, 4294967292
  %lcmp.mod5835.not = icmp eq i64 %xtraiter5833, 0
  %xtraiter5838 = and i64 %4297, 3
  %4343 = icmp ult i64 %4331, 3
  %unroll_iter5841 = and i64 %4297, 4294967292
  %lcmp.mod5840.not = icmp eq i64 %xtraiter5838, 0
  %brmerge5011.demorgan = and i1 %4218, %4193
  %xtraiter5843 = and i64 %4300, 3
  %4344 = icmp ult i64 %4332, 3
  %unroll_iter5846 = and i64 %4300, 4294967292
  %lcmp.mod5845.not = icmp eq i64 %xtraiter5843, 0
  %brmerge5008.demorgan = and i1 %4218, %4193
  %min.iters.check5253 = icmp ult i32 %t4253, 8
  %min.iters.check5256 = icmp ult i32 %t4253, 64
  %n.vec5260 = and i64 %4301, 4294967232
  %broadcast.splatinsert5268 = insertelement <16 x i16> poison, i16 %4235, i32 0
  %broadcast.splat5269 = shufflevector <16 x i16> %broadcast.splatinsert5268, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5270 = insertelement <16 x i16> poison, i16 %4235, i32 0
  %broadcast.splat5271 = shufflevector <16 x i16> %broadcast.splatinsert5270, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5272 = insertelement <16 x i16> poison, i16 %4235, i32 0
  %broadcast.splat5273 = shufflevector <16 x i16> %broadcast.splatinsert5272, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5274 = insertelement <16 x i16> poison, i16 %4235, i32 0
  %broadcast.splat5275 = shufflevector <16 x i16> %broadcast.splatinsert5274, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter5848 = and i64 %4336, 1
  %4345 = icmp eq i64 %4334, 0
  %unroll_iter5850 = and i64 %4336, 576460752303423486
  %lcmp.mod5849.not = icmp eq i64 %xtraiter5848, 0
  %cmp.n5263 = icmp eq i64 %n.vec5260, %4301
  %n.vec.remaining5281 = and i64 %4301, 56
  %min.epilog.iters.check5282 = icmp eq i64 %n.vec.remaining5281, 0
  %n.vec5285 = and i64 %4301, 4294967288
  %broadcast.splatinsert5291 = insertelement <8 x i16> poison, i16 %4235, i32 0
  %broadcast.splat5292 = shufflevector <8 x i16> %broadcast.splatinsert5291, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5289 = icmp eq i64 %n.vec5285, %4301
  %xtraiter5852 = and i64 %4302, 3
  %4346 = icmp ult i64 %4337, 3
  %unroll_iter5855 = and i64 %4302, 4294967292
  %lcmp.mod5854.not = icmp eq i64 %xtraiter5852, 0
  br label %"for output.s0.b.rebased264.us"

"for output.s0.b.rebased264.us":                  ; preds = %"for output.s0.b.rebased264.us.preheader", %"end for output.s0.y.rebased268.loopexit.us"
  %indvars.iv4071 = phi i64 [ 0, %"for output.s0.b.rebased264.us.preheader" ], [ %indvars.iv.next4072, %"end for output.s0.y.rebased268.loopexit.us" ]
  %convolved1914.sroa.0.37.us = phi <8 x i32> [ undef, %"for output.s0.b.rebased264.us.preheader" ], [ %convolved1914.sroa.0.42.us, %"end for output.s0.y.rebased268.loopexit.us" ]
  %4347 = add nuw i64 %indvars.iv4071, %4318
  %4348 = trunc i64 %4347 to i32
  %4349 = mul i32 %21, %4348
  %t4210.us = sub i32 %4349, %4213
  %t4201.us = add i32 %t4169.neg, %4349
  %4350 = sext i32 %t4210.us to i64
  %4351 = trunc i64 %4347 to i32
  %4352 = mul i32 %30, %4351
  br label %"for output.s0.y.rebased267.us"

"for output.s0.y.rebased267.us":                  ; preds = %"for output.s0.b.rebased264.us", %call_destructor.exit2428.us
  %indvars.iv4066 = phi i64 [ 0, %"for output.s0.b.rebased264.us" ], [ %indvars.iv.next4067, %call_destructor.exit2428.us ]
  %convolved1914.sroa.0.38.us = phi <8 x i32> [ %convolved1914.sroa.0.37.us, %"for output.s0.b.rebased264.us" ], [ %convolved1914.sroa.0.42.us, %call_destructor.exit2428.us ]
  %4353 = add nsw i64 %indvars.iv4066, %4315
  %4354 = mul nsw i64 %4353, %4316
  %4355 = add nsw i64 %4354, %4317
  %4356 = call i8* @halide_malloc(i8* null, i64 %4322)
  %input_wrapper270.us = bitcast i8* %4356 to i16*
  br i1 %t4192, label %then_bb273.us, label %next_bb274.us

next_bb274.us:                                    ; preds = %"for output.s0.y.rebased267.us"
  br i1 %4172, label %next_bb294.us, label %then_bb293.us

then_bb293.us:                                    ; preds = %next_bb274.us
  br i1 %4339, label %"consume input_wrapper347.us", label %"for input_wrapper.s0.y.rebased295.us.us", !prof !402

next_bb294.us:                                    ; preds = %next_bb274.us
  br i1 %4173, label %next_bb311.us, label %then_bb310.us

then_bb310.us:                                    ; preds = %next_bb294.us
  br i1 %4319, label %"for input_wrapper.s0.y.rebased312.us", label %"consume input_wrapper347.us", !prof !387

"for input_wrapper.s0.y.rebased312.us":           ; preds = %then_bb310.us, %"end for input_wrapper.s0.x.rebased316.us"
  %indvars.iv4014 = phi i64 [ %indvars.iv.next4015, %"end for input_wrapper.s0.x.rebased316.us" ], [ 0, %then_bb310.us ]
  %4357 = trunc i64 %indvars.iv4014 to i32
  %t4264.us = mul i32 %4210, %4357
  %4358 = add nsw i64 %indvars.iv4014, %4355
  %4359 = mul nsw i64 %4358, %4296
  %4360 = add nsw i64 %4359, %4350
  br i1 %4218, label %"for input_wrapper.s0.x.rebased315.preheader.us", label %"end for input_wrapper.s0.x.rebased316.us", !prof !387

"end for input_wrapper.s0.x.rebased316.us":       ; preds = %"end for input_wrapper.s0.c.c319.loopexit.us3078.us", %"end for input_wrapper.s0.c.c.rebased322.loopexit.us.us", %"for input_wrapper.s0.x.rebased315.preheader.split.us3128", %"for input_wrapper.s0.y.rebased312.us"
  %indvars.iv.next4015 = add nuw nsw i64 %indvars.iv4014, 1
  %.not2119.us = icmp eq i64 %indvars.iv4014, %4324
  br i1 %.not2119.us, label %"consume input_wrapper347.us", label %"for input_wrapper.s0.y.rebased312.us"

next_bb311.us:                                    ; preds = %next_bb294.us
  br i1 %4174, label %next_bb328.us, label %then_bb327.us

then_bb327.us:                                    ; preds = %next_bb311.us
  br i1 %4319, label %"for input_wrapper.s0.y.rebased329.us", label %"consume input_wrapper347.us", !prof !387

"for input_wrapper.s0.y.rebased329.us":           ; preds = %then_bb327.us, %"end for input_wrapper.s0.x.rebased333.us"
  %indvars.iv4022 = phi i64 [ %indvars.iv.next4023, %"end for input_wrapper.s0.x.rebased333.us" ], [ 0, %then_bb327.us ]
  %4361 = trunc i64 %indvars.iv4022 to i32
  %t4272.us = mul i32 %4210, %4361
  %4362 = add nsw i64 %indvars.iv4022, %4355
  %4363 = mul nsw i64 %4362, %4296
  %4364 = add nsw i64 %4363, %4350
  br i1 %brmerge5011.demorgan, label %"for input_wrapper.s0.x.rebased332.us.us", label %"end for input_wrapper.s0.x.rebased333.us", !prof !407

"end for input_wrapper.s0.x.rebased333.us":       ; preds = %"end for input_wrapper.s0.c.c336.loopexit.us.us", %"for input_wrapper.s0.y.rebased329.us"
  %indvars.iv.next4023 = add nuw nsw i64 %indvars.iv4022, 1
  %.not2116.us = icmp eq i64 %indvars.iv4022, %4325
  br i1 %.not2116.us, label %"consume input_wrapper347.us", label %"for input_wrapper.s0.y.rebased329.us"

next_bb328.us:                                    ; preds = %next_bb311.us
  br i1 %4319, label %"for input_wrapper.s0.y.rebased338.us", label %"consume input_wrapper347.us", !prof !387

"for input_wrapper.s0.y.rebased338.us":           ; preds = %next_bb328.us, %"end for input_wrapper.s0.x.rebased342.us"
  %indvars.iv4030 = phi i64 [ %indvars.iv.next4031, %"end for input_wrapper.s0.x.rebased342.us" ], [ 0, %next_bb328.us ]
  %4365 = trunc i64 %indvars.iv4030 to i32
  %t4279.us = mul i32 %4210, %4365
  %4366 = add nsw i64 %indvars.iv4030, %4355
  %4367 = mul nsw i64 %4366, %4296
  %4368 = add nsw i64 %4367, %4350
  br i1 %brmerge5008.demorgan, label %iter.check5255, label %"end for input_wrapper.s0.x.rebased342.us", !prof !407

"end for input_wrapper.s0.x.rebased342.us":       ; preds = %"end for input_wrapper.s0.c345.loopexit.us.us", %"for input_wrapper.s0.y.rebased338.us"
  %indvars.iv.next4031 = add nuw nsw i64 %indvars.iv4030, 1
  %.not2113.us = icmp eq i64 %indvars.iv4030, %4326
  br i1 %.not2113.us, label %"consume input_wrapper347.us", label %"for input_wrapper.s0.y.rebased338.us"

then_bb273.us:                                    ; preds = %"for output.s0.y.rebased267.us"
  br i1 %4319, label %"for input_wrapper.s0.y.rebased275.us", label %"consume input_wrapper347.us", !prof !387

"for input_wrapper.s0.y.rebased275.us":           ; preds = %then_bb273.us, %"end for input_wrapper.s0.x.x.rebased285.us"
  %indvars.iv4046 = phi i64 [ %indvars.iv.next4047, %"end for input_wrapper.s0.x.x.rebased285.us" ], [ 0, %then_bb273.us ]
  %4369 = mul nsw i64 %indvars.iv4046, %4306
  %4370 = add nsw i64 %indvars.iv4046, %4355
  %4371 = trunc i64 %4370 to i32
  %4372 = mul i32 %18, %4371
  %t4228.us = add i32 %t4201.us, %4372
  br i1 %4211, label %"for input_wrapper.s0.x.x278.preheader.us", label %"end for input_wrapper.s0.x.x279.us", !prof !387

"end for input_wrapper.s0.x.x279.us":             ; preds = %"end for input_wrapper.s0.c.c282.loopexit.us.us", %"for input_wrapper.s0.y.rebased275.us"
  br i1 %4246, label %"for input_wrapper.s0.x.x.rebased284.preheader.us", label %"end for input_wrapper.s0.x.x.rebased285.us", !prof !387

"end for input_wrapper.s0.x.x.rebased285.us":     ; preds = %"end for input_wrapper.s0.x.v21288.us.us", %"for input_wrapper.s0.x.x278.preheader.us", %"for input_wrapper.s0.x.x.rebased284.preheader.us", %"end for input_wrapper.s0.x.x279.us"
  %indvars.iv.next4047 = add nuw nsw i64 %indvars.iv4046, 1
  %.not2129.us = icmp eq i64 %indvars.iv4046, %4327
  br i1 %.not2129.us, label %"consume input_wrapper347.us", label %"for input_wrapper.s0.y.rebased275.us"

"consume input_wrapper347.us":                    ; preds = %"end for input_wrapper.s0.x.rebased299.loopexit.us.us", %"end for input_wrapper.s0.x.rebased316.us", %"end for input_wrapper.s0.x.rebased333.us", %"end for input_wrapper.s0.x.rebased342.us", %"end for input_wrapper.s0.x.x.rebased285.us", %then_bb293.us, %then_bb273.us, %next_bb328.us, %then_bb327.us, %then_bb310.us
  %4373 = trunc i64 %4353 to i32
  %4374 = mul i32 %29, %4373
  %t4212.us = add i32 %4374, %4352
  br label %"for output.s0.x.xo348.us"

"for output.s0.x.xo348.us":                       ; preds = %"end for output.s0.c.co352.us", %"consume input_wrapper347.us"
  %indvars.iv4063 = phi i64 [ %indvars.iv.next4064, %"end for output.s0.c.co352.us" ], [ 0, %"consume input_wrapper347.us" ]
  %convolved1914.sroa.0.40.us = phi <8 x i32> [ %convolved1914.sroa.0.42.us, %"end for output.s0.c.co352.us" ], [ %convolved1914.sroa.0.38.us, %"consume input_wrapper347.us" ]
  %4375 = add nuw i64 %indvars.iv4063, %4312
  %4376 = trunc i64 %4375 to i32
  %4377 = mul i32 %4376, %stride_x
  %t4286.us = sub i32 %4377, %b179
  br i1 %4247, label %"for output.s0.c.co351.preheader.us", label %"end for output.s0.c.co352.us", !prof !387

"for output.s0.c.co351.us":                       ; preds = %"for output.s0.c.co351.preheader.us", %"consume convolved364.us"
  %indvars.iv4061 = phi i64 [ 0, %"for output.s0.c.co351.preheader.us" ], [ %indvars.iv.next4062, %"consume convolved364.us" ]
  %4378 = shl nuw nsw i64 %indvars.iv4061, 5
  %4379 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %4378
  %4380 = bitcast i32* %4379 to <8 x i32>*
  %4381 = load <8 x i32>, <8 x i32>* %4380, align 32, !tbaa !391
  %4382 = getelementptr inbounds i32, i32* %4379, i64 8
  %4383 = bitcast i32* %4382 to <8 x i32>*
  %4384 = load <8 x i32>, <8 x i32>* %4383, align 32, !tbaa !391
  %4385 = getelementptr inbounds i32, i32* %4379, i64 16
  %4386 = bitcast i32* %4385 to <8 x i32>*
  %4387 = load <8 x i32>, <8 x i32>* %4386, align 32, !tbaa !391
  %4388 = getelementptr inbounds i32, i32* %4379, i64 24
  %4389 = bitcast i32* %4388 to <8 x i32>*
  %4390 = load <8 x i32>, <8 x i32>* %4389, align 32, !tbaa !391
  %4391 = trunc i64 %indvars.iv4061 to i32
  %t4293.us = shl nsw i32 %4391, 2
  %4392 = or i32 %t4293.us, 3
  %t4292.us = mul nsw i32 %4392, %7
  %4393 = or i32 %t4293.us, 2
  %t4291.us = mul nsw i32 %4393, %7
  %4394 = or i32 %t4293.us, 1
  %t4290.us = mul nsw i32 %4394, %7
  br i1 %4248, label %"for convolved.s1.r19$y355.preheader.us", label %"consume convolved364.us", !prof !387

"consume convolved364.us":                        ; preds = %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us", %"for convolved.s1.r19$y355.preheader.split.us.us", %"for convolved.s1.r19$y355.preheader.us", %"for output.s0.c.co351.us"
  %convolved1914.sroa.142.23.us = phi <8 x i32> [ %4390, %"for output.s0.c.co351.us" ], [ %4390, %"for convolved.s1.r19$y355.preheader.us" ], [ %4390, %"for convolved.s1.r19$y355.preheader.split.us.us" ], [ %5282, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ]
  %convolved1914.sroa.102.23.us = phi <8 x i32> [ %4387, %"for output.s0.c.co351.us" ], [ %4387, %"for convolved.s1.r19$y355.preheader.us" ], [ %4387, %"for convolved.s1.r19$y355.preheader.split.us.us" ], [ %5271, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ]
  %convolved1914.sroa.62.23.us = phi <8 x i32> [ %4384, %"for output.s0.c.co351.us" ], [ %4384, %"for convolved.s1.r19$y355.preheader.us" ], [ %4384, %"for convolved.s1.r19$y355.preheader.split.us.us" ], [ %5260, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ]
  %convolved1914.sroa.0.48.us = phi <8 x i32> [ %4381, %"for output.s0.c.co351.us" ], [ %4381, %"for convolved.s1.r19$y355.preheader.us" ], [ %4381, %"for convolved.s1.r19$y355.preheader.split.us.us" ], [ %5248, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ]
  %4395 = shufflevector <8 x i32> %convolved1914.sroa.0.48.us, <8 x i32> %convolved1914.sroa.62.23.us, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4396 = shufflevector <8 x i32> %convolved1914.sroa.102.23.us, <8 x i32> %convolved1914.sroa.142.23.us, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4397 = shufflevector <16 x i32> %4395, <16 x i32> %4396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4398 = sext <32 x i32> %4397 to <32 x i64>
  %4399 = mul nsw <32 x i64> %4398, %4253
  %4400 = ashr <32 x i64> %4399, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %4401 = add nsw <32 x i64> %4400, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a192.us = ashr <32 x i64> %4401, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %4402 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %4403 = icmp slt <4 x i64> %4402, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4404 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %4405 = icmp slt <4 x i64> %4404, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4406 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %4407 = icmp slt <4 x i64> %4406, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4408 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %4409 = icmp slt <4 x i64> %4408, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4410 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %4411 = icmp slt <4 x i64> %4410, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4412 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %4413 = icmp slt <4 x i64> %4412, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4414 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %4415 = icmp slt <4 x i64> %4414, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4416 = shufflevector <32 x i64> %a192.us, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4417 = icmp slt <4 x i64> %4416, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4418 = shufflevector <4 x i1> %4417, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4419 = shufflevector <8 x i1> %4418, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4420 = shufflevector <16 x i1> %4419, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4421 = select <4 x i1> %4403, <4 x i64> %4402, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4422 = select <4 x i1> %4405, <4 x i64> %4404, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4423 = select <4 x i1> %4407, <4 x i64> %4406, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4424 = select <4 x i1> %4409, <4 x i64> %4408, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4425 = select <4 x i1> %4411, <4 x i64> %4410, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4426 = select <4 x i1> %4413, <4 x i64> %4412, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4427 = select <4 x i1> %4415, <4 x i64> %4414, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4428 = shufflevector <32 x i1> %4420, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4429 = select <4 x i1> %4428, <4 x i64> %4416, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %4430 = shufflevector <4 x i64> %4429, <4 x i64> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4431 = shufflevector <8 x i64> %4430, <8 x i64> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %a191.us = shufflevector <16 x i64> %4431, <16 x i64> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4432 = icmp sgt <4 x i64> %4421, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4433 = icmp sgt <4 x i64> %4422, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4434 = icmp sgt <4 x i64> %4423, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4435 = icmp sgt <4 x i64> %4424, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4436 = icmp sgt <4 x i64> %4425, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4437 = icmp sgt <4 x i64> %4426, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4438 = icmp sgt <4 x i64> %4427, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4439 = shufflevector <32 x i64> %a191.us, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4440 = icmp sgt <4 x i64> %4439, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4441 = shufflevector <4 x i1> %4440, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %4442 = shufflevector <8 x i1> %4441, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %4443 = shufflevector <16 x i1> %4442, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %4444 = select <4 x i1> %4432, <4 x i64> %4421, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4445 = select <4 x i1> %4433, <4 x i64> %4422, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4446 = select <4 x i1> %4434, <4 x i64> %4423, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4447 = select <4 x i1> %4435, <4 x i64> %4424, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4448 = select <4 x i1> %4436, <4 x i64> %4425, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4449 = select <4 x i1> %4437, <4 x i64> %4426, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4450 = select <4 x i1> %4438, <4 x i64> %4427, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4451 = shufflevector <32 x i1> %4443, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %4452 = select <4 x i1> %4451, <4 x i64> %4439, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %4453 = shufflevector <4 x i64> %4444, <4 x i64> %4445, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4454 = shufflevector <4 x i64> %4446, <4 x i64> %4447, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4455 = shufflevector <4 x i64> %4448, <4 x i64> %4449, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4456 = shufflevector <4 x i64> %4450, <4 x i64> %4452, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4457 = shufflevector <8 x i64> %4453, <8 x i64> %4454, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4458 = shufflevector <8 x i64> %4455, <8 x i64> %4456, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4459 = shufflevector <16 x i64> %4457, <16 x i64> %4458, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t4551.us = trunc <32 x i64> %4459 to <32 x i32>
  %4460 = ashr <32 x i32> %t4551.us, %t4552
  %4461 = shl <32 x i32> %t4551.us, %t4552
  %4462 = shufflevector <32 x i32> %4460, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4463 = shufflevector <32 x i32> %4461, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4464 = select <8 x i1> %4262, <8 x i32> %4462, <8 x i32> %4463
  %4465 = shufflevector <32 x i32> %4460, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4466 = shufflevector <32 x i32> %4461, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4467 = select <8 x i1> %4263, <8 x i32> %4465, <8 x i32> %4466
  %4468 = shufflevector <32 x i32> %4460, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4469 = shufflevector <32 x i32> %4461, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4470 = select <8 x i1> %4264, <8 x i32> %4468, <8 x i32> %4469
  %4471 = shufflevector <32 x i32> %4460, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4472 = shufflevector <32 x i32> %4461, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4473 = select <8 x i1> %4265, <8 x i32> %4471, <8 x i32> %4472
  %4474 = shufflevector <8 x i32> %4464, <8 x i32> %4467, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4475 = shufflevector <8 x i32> %4470, <8 x i32> %4473, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4476 = shufflevector <16 x i32> %4474, <16 x i32> %4475, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4477 = ashr <32 x i32> %t4551.us, %t4554
  %4478 = shl <32 x i32> %t4551.us, %t4554
  %4479 = shufflevector <32 x i32> %4477, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4480 = shufflevector <32 x i32> %4478, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4481 = select <8 x i1> %4277, <8 x i32> %4479, <8 x i32> %4480
  %4482 = shufflevector <32 x i32> %4477, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4483 = shufflevector <32 x i32> %4478, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4484 = select <8 x i1> %4278, <8 x i32> %4482, <8 x i32> %4483
  %4485 = shufflevector <32 x i32> %4477, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4486 = shufflevector <32 x i32> %4478, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4487 = select <8 x i1> %4279, <8 x i32> %4485, <8 x i32> %4486
  %4488 = shufflevector <32 x i32> %4477, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4489 = shufflevector <32 x i32> %4478, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4490 = select <8 x i1> %4280, <8 x i32> %4488, <8 x i32> %4489
  %4491 = shufflevector <8 x i32> %4481, <8 x i32> %4484, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4492 = shufflevector <8 x i32> %4487, <8 x i32> %4490, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4493 = shufflevector <16 x i32> %4491, <16 x i32> %4492, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4494 = and <32 x i32> %4493, %4267
  %4495 = add nsw <32 x i32> %4494, %4476
  %4496 = shufflevector <32 x i32> %4495, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4497 = shufflevector <32 x i32> %4495, <32 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4498 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %4496, <8 x i32> %4497) #11
  %4499 = shufflevector <32 x i32> %4495, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4500 = shufflevector <16 x i32> %4499, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %4501 = shufflevector <16 x i32> %4499, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %4502 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %4500, <8 x i32> %4501) #11
  %4503 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %4498, <16 x i16> %4283)
  %4504 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %4502, <16 x i16> %4283)
  %4505 = shufflevector <16 x i16> %4503, <16 x i16> %4504, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %4506 = shufflevector <16 x i16> %4503, <16 x i16> %4504, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4507 = call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %4505, <16 x i16> %4506) #11
  %4508 = icmp ugt <32 x i8> %b192, %4507
  %a189.us = select <32 x i1> %4508, <32 x i8> %4507, <32 x i8> %b192
  %4509 = icmp ugt <32 x i8> %a189.us, %b191
  %4510 = select <32 x i1> %4509, <32 x i8> %a189.us, <32 x i8> %b191
  %4511 = add nsw i64 %4378, %4518
  %4512 = getelementptr inbounds i8, i8* %22, i64 %4511
  %4513 = bitcast i8* %4512 to <32 x i8>*
  store <32 x i8> %4510, <32 x i8>* %4513, align 1, !tbaa !414
  %indvars.iv.next4062 = add nuw nsw i64 %indvars.iv4061, 1
  %.not2109.us = icmp eq i64 %indvars.iv.next4062, %4311
  br i1 %.not2109.us, label %"end for output.s0.c.co352.us", label %"for output.s0.c.co351.us"

"end for output.s0.c.co352.us":                   ; preds = %"consume convolved364.us", %"for output.s0.x.xo348.us"
  %convolved1914.sroa.0.42.us = phi <8 x i32> [ %convolved1914.sroa.0.40.us, %"for output.s0.x.xo348.us" ], [ %convolved1914.sroa.0.48.us, %"consume convolved364.us" ]
  %indvars.iv.next4064 = add nuw nsw i64 %indvars.iv4063, 1
  %.not2108.us = icmp eq i64 %indvars.iv.next4064, %4313
  br i1 %.not2108.us, label %"end for output.s0.x.xo349.us", label %"for output.s0.x.xo348.us"

"end for output.s0.x.xo349.us":                   ; preds = %"end for output.s0.c.co352.us"
  %tobool.not.i2425.not.us = icmp eq i8* %4356, null
  br i1 %tobool.not.i2425.not.us, label %call_destructor.exit2428.us, label %if.then.i2426.us

if.then.i2426.us:                                 ; preds = %"end for output.s0.x.xo349.us"
  call void @halide_free(i8* null, i8* nonnull %4356) #17
  br label %call_destructor.exit2428.us

call_destructor.exit2428.us:                      ; preds = %if.then.i2426.us, %"end for output.s0.x.xo349.us"
  %indvars.iv.next4067 = add nuw nsw i64 %indvars.iv4066, 1
  %4514 = icmp eq i64 %indvars.iv.next4067, %zext4070
  br i1 %4514, label %"end for output.s0.y.rebased268.loopexit.us", label %"for output.s0.y.rebased267.us"

"for convolved.s1.r19$y355.preheader.us":         ; preds = %"for output.s0.c.co351.us"
  %t4289.us = mul nsw i32 %7, %4391
  %4515 = sext i32 %t4289.us to i64
  br i1 %4249, label %"for convolved.s1.r19$y355.preheader.split.us.us", label %"consume convolved364.us", !prof !387

"for output.s0.c.co351.preheader.us":             ; preds = %"for output.s0.x.xo348.us"
  %4516 = trunc i64 %4375 to i32
  %4517 = mul i32 %26, %4516
  %t4284.us = add i32 %t4212.us, %4517
  %t4287.us = sub i32 %t4284.us, %reass.add2681
  %4518 = sext i32 %t4287.us to i64
  br label %"for output.s0.c.co351.us"

"for input_wrapper.s0.x.x.rebased284.preheader.us": ; preds = %"end for input_wrapper.s0.x.x279.us"
  %4519 = sext i32 %t4228.us to i64
  br i1 %4193, label %"for input_wrapper.s0.x.x.rebased284.us.us", label %"end for input_wrapper.s0.x.x.rebased285.us", !prof !387

"for input_wrapper.s0.x.x278.preheader.us":       ; preds = %"for input_wrapper.s0.y.rebased275.us"
  %4520 = sext i32 %t4228.us to i64
  br i1 %4193, label %"for input_wrapper.s0.x.x278.us.us.preheader", label %"end for input_wrapper.s0.x.x.rebased285.us", !prof !387

"for input_wrapper.s0.x.x278.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.x278.preheader.us"
  %4521 = trunc i64 %4369 to i32
  br label %"for input_wrapper.s0.x.x278.us.us"

"for input_wrapper.s0.x.rebased315.preheader.us": ; preds = %"for input_wrapper.s0.y.rebased312.us"
  br i1 %4229, label %"for input_wrapper.s0.x.rebased315.us.us", label %"for input_wrapper.s0.x.rebased315.preheader.split.us3128", !prof !387

"end for output.s0.y.rebased268.loopexit.us":     ; preds = %call_destructor.exit2428.us
  %indvars.iv.next4072 = add nuw nsw i64 %indvars.iv4071, 1
  %4522 = icmp eq i64 %indvars.iv.next4072, %zext4075
  br i1 %4522, label %after_bb1, label %"for output.s0.b.rebased264.us"

"for input_wrapper.s0.y.rebased295.us.us":        ; preds = %then_bb293.us, %"end for input_wrapper.s0.x.rebased299.loopexit.us.us"
  %indvars.iv3999 = phi i64 [ %indvars.iv.next4000, %"end for input_wrapper.s0.x.rebased299.loopexit.us.us" ], [ 0, %then_bb293.us ]
  %4523 = trunc i64 %indvars.iv3999 to i32
  %t4255.us.us = mul i32 %4210, %4523
  %4524 = add nsw i64 %indvars.iv3999, %4355
  %4525 = mul nsw i64 %4524, %4296
  %4526 = add nsw i64 %4525, %4350
  br i1 %4223, label %"for input_wrapper.s0.x.rebased298.us.us.us", label %"for input_wrapper.s0.x.rebased298.preheader.split.us3064.us", !prof !387

"for input_wrapper.s0.x.rebased298.preheader.split.us3064.us": ; preds = %"for input_wrapper.s0.y.rebased295.us.us"
  br i1 %4167, label %"for input_wrapper.s0.x.rebased298.us3048.us.us", label %"end for input_wrapper.s0.x.rebased299.loopexit.us.us", !prof !387

"end for input_wrapper.s0.x.rebased299.loopexit.us.us": ; preds = %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us", %"end for input_wrapper.s0.c.c.rebased305.loopexit.us.us.us", %"for input_wrapper.s0.x.rebased298.preheader.split.us3064.us"
  %indvars.iv.next4000 = add nuw nsw i64 %indvars.iv3999, 1
  %.not2124.us.us = icmp eq i64 %indvars.iv3999, %4323
  br i1 %.not2124.us.us, label %"consume input_wrapper347.us", label %"for input_wrapper.s0.y.rebased295.us.us"

"for input_wrapper.s0.x.rebased298.us.us.us":     ; preds = %"for input_wrapper.s0.y.rebased295.us.us", %"end for input_wrapper.s0.c.c.rebased305.loopexit.us.us.us"
  %indvars.iv3996 = phi i64 [ %indvars.iv.next3997, %"end for input_wrapper.s0.c.c.rebased305.loopexit.us.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased295.us.us" ]
  %4527 = trunc i64 %indvars.iv3996 to i32
  %reass.add2672.us.us.us = add i32 %t4255.us.us, %4527
  %reass.mul2673.us.us.us = mul i32 %reass.add2672.us.us.us, %4219
  %4528 = add nsw i64 %indvars.iv3996, %4291
  %4529 = mul nsw i64 %4528, %4292
  %4530 = add nsw i64 %4526, %4529
  %4531 = sext i32 %reass.mul2673.us.us.us to i64
  br i1 %4167, label %"for input_wrapper.s0.c.c301.us.us.us.preheader", label %"end for input_wrapper.s0.c.c302.us.us.us", !prof !387

"for input_wrapper.s0.c.c301.us.us.us.preheader": ; preds = %"for input_wrapper.s0.x.rebased298.us.us.us"
  br i1 %4341, label %"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c301.us.us.us"

"for input_wrapper.s0.c.c301.us.us.us":           ; preds = %"for input_wrapper.s0.c.c301.us.us.us.preheader", %"for input_wrapper.s0.c.c301.us.us.us"
  %indvars.iv3992 = phi i64 [ %indvars.iv.next3993.3, %"for input_wrapper.s0.c.c301.us.us.us" ], [ 0, %"for input_wrapper.s0.c.c301.us.us.us.preheader" ]
  %niter5832 = phi i64 [ %niter5832.nsub.3, %"for input_wrapper.s0.c.c301.us.us.us" ], [ %unroll_iter5831, %"for input_wrapper.s0.c.c301.us.us.us.preheader" ]
  %4532 = shl nuw nsw i64 %indvars.iv3992, 4
  %4533 = add nsw i64 %4532, %4530
  %4534 = getelementptr inbounds i8, i8* %12, i64 %4533
  %4535 = bitcast i8* %4534 to <16 x i8>*
  %4536 = load <16 x i8>, <16 x i8>* %4535, align 4, !tbaa !397
  %4537 = zext <16 x i8> %4536 to <16 x i16>
  %4538 = sub nsw <16 x i16> %4537, %4222
  %4539 = add nsw i64 %4532, %4531
  %4540 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4539
  %4541 = bitcast i16* %4540 to <16 x i16>*
  store <16 x i16> %4538, <16 x i16>* %4541, align 8, !tbaa !399
  %indvars.iv.next3993 = shl i64 %indvars.iv3992, 4
  %4542 = or i64 %indvars.iv.next3993, 16
  %4543 = add nsw i64 %4542, %4530
  %4544 = getelementptr inbounds i8, i8* %12, i64 %4543
  %4545 = bitcast i8* %4544 to <16 x i8>*
  %4546 = load <16 x i8>, <16 x i8>* %4545, align 4, !tbaa !397
  %4547 = zext <16 x i8> %4546 to <16 x i16>
  %4548 = sub nsw <16 x i16> %4547, %4222
  %4549 = add nsw i64 %4542, %4531
  %4550 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4549
  %4551 = bitcast i16* %4550 to <16 x i16>*
  store <16 x i16> %4548, <16 x i16>* %4551, align 8, !tbaa !399
  %indvars.iv.next3993.1 = shl i64 %indvars.iv3992, 4
  %4552 = or i64 %indvars.iv.next3993.1, 32
  %4553 = add nsw i64 %4552, %4530
  %4554 = getelementptr inbounds i8, i8* %12, i64 %4553
  %4555 = bitcast i8* %4554 to <16 x i8>*
  %4556 = load <16 x i8>, <16 x i8>* %4555, align 4, !tbaa !397
  %4557 = zext <16 x i8> %4556 to <16 x i16>
  %4558 = sub nsw <16 x i16> %4557, %4222
  %4559 = add nsw i64 %4552, %4531
  %4560 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4559
  %4561 = bitcast i16* %4560 to <16 x i16>*
  store <16 x i16> %4558, <16 x i16>* %4561, align 8, !tbaa !399
  %indvars.iv.next3993.2 = shl i64 %indvars.iv3992, 4
  %4562 = or i64 %indvars.iv.next3993.2, 48
  %4563 = add nsw i64 %4562, %4530
  %4564 = getelementptr inbounds i8, i8* %12, i64 %4563
  %4565 = bitcast i8* %4564 to <16 x i8>*
  %4566 = load <16 x i8>, <16 x i8>* %4565, align 4, !tbaa !397
  %4567 = zext <16 x i8> %4566 to <16 x i16>
  %4568 = sub nsw <16 x i16> %4567, %4222
  %4569 = add nsw i64 %4562, %4531
  %4570 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4569
  %4571 = bitcast i16* %4570 to <16 x i16>*
  store <16 x i16> %4568, <16 x i16>* %4571, align 8, !tbaa !399
  %indvars.iv.next3993.3 = add nuw nsw i64 %indvars.iv3992, 4
  %niter5832.nsub.3 = add i64 %niter5832, -4
  %niter5832.ncmp.3 = icmp eq i64 %niter5832.nsub.3, 0
  br i1 %niter5832.ncmp.3, label %"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c301.us.us.us"

"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c301.us.us.us", %"for input_wrapper.s0.c.c301.us.us.us.preheader"
  %indvars.iv3992.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c301.us.us.us.preheader" ], [ %indvars.iv.next3993.3, %"for input_wrapper.s0.c.c301.us.us.us" ]
  br i1 %lcmp.mod5830.not, label %"end for input_wrapper.s0.c.c302.us.us.us", label %"for input_wrapper.s0.c.c301.us.us.us.epil"

"for input_wrapper.s0.c.c301.us.us.us.epil":      ; preds = %"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c301.us.us.us.epil"
  %indvars.iv3992.epil = phi i64 [ %indvars.iv.next3993.epil, %"for input_wrapper.s0.c.c301.us.us.us.epil" ], [ %indvars.iv3992.unr, %"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa" ]
  %epil.iter5829 = phi i64 [ %epil.iter5829.sub, %"for input_wrapper.s0.c.c301.us.us.us.epil" ], [ %xtraiter5828, %"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa" ]
  %4572 = shl nuw nsw i64 %indvars.iv3992.epil, 4
  %4573 = add nsw i64 %4572, %4530
  %4574 = getelementptr inbounds i8, i8* %12, i64 %4573
  %4575 = bitcast i8* %4574 to <16 x i8>*
  %4576 = load <16 x i8>, <16 x i8>* %4575, align 4, !tbaa !397
  %4577 = zext <16 x i8> %4576 to <16 x i16>
  %4578 = sub nsw <16 x i16> %4577, %4222
  %4579 = add nsw i64 %4572, %4531
  %4580 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4579
  %4581 = bitcast i16* %4580 to <16 x i16>*
  store <16 x i16> %4578, <16 x i16>* %4581, align 8, !tbaa !399
  %indvars.iv.next3993.epil = add nuw nsw i64 %indvars.iv3992.epil, 1
  %epil.iter5829.sub = add i64 %epil.iter5829, -1
  %epil.iter5829.cmp.not = icmp eq i64 %epil.iter5829.sub, 0
  br i1 %epil.iter5829.cmp.not, label %"end for input_wrapper.s0.c.c302.us.us.us", label %"for input_wrapper.s0.c.c301.us.us.us.epil", !llvm.loop !434

"end for input_wrapper.s0.c.c302.us.us.us":       ; preds = %"end for input_wrapper.s0.c.c302.us.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c301.us.us.us.epil", %"for input_wrapper.s0.x.rebased298.us.us.us"
  br label %"for input_wrapper.s0.c.c.rebased304.us.us.us"

"for input_wrapper.s0.c.c.rebased304.us.us.us":   ; preds = %after_bb307.us.us.us, %"end for input_wrapper.s0.c.c302.us.us.us"
  %indvars.iv3994 = phi i64 [ %indvars.iv.next3995, %after_bb307.us.us.us ], [ 0, %"end for input_wrapper.s0.c.c302.us.us.us" ]
  %4582 = add nsw i64 %indvars.iv3994, %4294
  %4583 = trunc i64 %4582 to i32
  %4584 = shl nsw i32 %4583, 4
  %4585 = add nsw i32 %4584, 16
  %.not2126.us.us.us = icmp sgt i32 %4585, %t4253
  br i1 %.not2126.us.us.us, label %next_bb309.us.us.us, label %then_bb308.us.us.us

then_bb308.us.us.us:                              ; preds = %"for input_wrapper.s0.c.c.rebased304.us.us.us"
  %4586 = shl nsw i64 %4582, 4
  %4587 = add nsw i64 %4586, %4530
  %4588 = getelementptr inbounds i8, i8* %12, i64 %4587
  %4589 = bitcast i8* %4588 to <16 x i8>*
  %4590 = load <16 x i8>, <16 x i8>* %4589, align 4, !tbaa !397
  %4591 = zext <16 x i8> %4590 to <16 x i16>
  %4592 = sub nsw <16 x i16> %4591, %4222
  %4593 = add nsw i64 %4586, %4531
  %4594 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4593
  %4595 = bitcast i16* %4594 to <16 x i16>*
  store <16 x i16> %4592, <16 x i16>* %4595, align 8, !tbaa !399
  br label %after_bb307.us.us.us

next_bb309.us.us.us:                              ; preds = %"for input_wrapper.s0.c.c.rebased304.us.us.us"
  %4596 = or i32 %4584, 1
  %4597 = insertelement <16 x i32> undef, i32 %4596, i32 0
  %4598 = shufflevector <16 x i32> %4597, <16 x i32> undef, <16 x i32> zeroinitializer
  %4599 = add nsw <16 x i32> %4598, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4600 = shufflevector <16 x i32> %4599, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4601 = icmp sgt <8 x i32> %4600, %4225
  %4602 = shufflevector <16 x i32> %4599, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4603 = icmp sgt <8 x i32> %4602, %4225
  %4604 = shufflevector <8 x i1> %4601, <8 x i1> %4603, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4605 = xor <16 x i1> %4604, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %4606 = shl nsw i64 %4582, 4
  %4607 = add nsw i64 %4606, %4530
  %4608 = getelementptr inbounds i8, i8* %12, i64 %4607
  %4609 = bitcast i8* %4608 to <16 x i8>*
  %4610 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %4609, i32 4, <16 x i1> %4605, <16 x i8> undef), !tbaa !397
  %4611 = zext <16 x i8> %4610 to <16 x i16>
  %4612 = sub nsw <16 x i16> %4611, %4222
  %4613 = add nsw i64 %4606, %4531
  %4614 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4613
  %4615 = bitcast i16* %4614 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %4612, <16 x i16>* %4615, i32 8, <16 x i1> %4605), !tbaa !399
  br label %after_bb307.us.us.us

after_bb307.us.us.us:                             ; preds = %next_bb309.us.us.us, %then_bb308.us.us.us
  %indvars.iv.next3995 = add nuw nsw i64 %indvars.iv3994, 1
  %.not2127.us.us.us = icmp eq i64 %indvars.iv.next3995, %4295
  br i1 %.not2127.us.us.us, label %"end for input_wrapper.s0.c.c.rebased305.loopexit.us.us.us", label %"for input_wrapper.s0.c.c.rebased304.us.us.us"

"end for input_wrapper.s0.c.c.rebased305.loopexit.us.us.us": ; preds = %after_bb307.us.us.us
  %indvars.iv.next3997 = add nuw nsw i64 %indvars.iv3996, 1
  %.not2125.us.us.us = icmp eq i64 %indvars.iv3996, %4293
  br i1 %.not2125.us.us.us, label %"end for input_wrapper.s0.x.rebased299.loopexit.us.us", label %"for input_wrapper.s0.x.rebased298.us.us.us"

"for input_wrapper.s0.x.rebased298.us3048.us.us": ; preds = %"for input_wrapper.s0.x.rebased298.preheader.split.us3064.us", %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us"
  %indvars.iv3989 = phi i64 [ %indvars.iv.next3990, %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased298.preheader.split.us3064.us" ]
  %4616 = trunc i64 %indvars.iv3989 to i32
  %reass.add2672.us3050.us.us = add i32 %t4255.us.us, %4616
  %reass.mul2673.us3051.us.us = mul i32 %reass.add2672.us3050.us.us, %4219
  %4617 = add nsw i64 %indvars.iv3989, %4291
  %4618 = mul nsw i64 %4617, %4292
  %4619 = add nsw i64 %4526, %4618
  %4620 = sext i32 %reass.mul2673.us3051.us.us to i64
  br i1 %4340, label %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c301.us3053.us.us"

"for input_wrapper.s0.c.c301.us3053.us.us":       ; preds = %"for input_wrapper.s0.x.rebased298.us3048.us.us", %"for input_wrapper.s0.c.c301.us3053.us.us"
  %indvars.iv3987 = phi i64 [ %indvars.iv.next3988.3, %"for input_wrapper.s0.c.c301.us3053.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased298.us3048.us.us" ]
  %niter5827 = phi i64 [ %niter5827.nsub.3, %"for input_wrapper.s0.c.c301.us3053.us.us" ], [ %unroll_iter5826, %"for input_wrapper.s0.x.rebased298.us3048.us.us" ]
  %4621 = shl nuw nsw i64 %indvars.iv3987, 4
  %4622 = add nsw i64 %4621, %4619
  %4623 = getelementptr inbounds i8, i8* %12, i64 %4622
  %4624 = bitcast i8* %4623 to <16 x i8>*
  %4625 = load <16 x i8>, <16 x i8>* %4624, align 4, !tbaa !397
  %4626 = zext <16 x i8> %4625 to <16 x i16>
  %4627 = sub nsw <16 x i16> %4626, %4222
  %4628 = add nsw i64 %4621, %4620
  %4629 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4628
  %4630 = bitcast i16* %4629 to <16 x i16>*
  store <16 x i16> %4627, <16 x i16>* %4630, align 8, !tbaa !399
  %indvars.iv.next3988 = shl i64 %indvars.iv3987, 4
  %4631 = or i64 %indvars.iv.next3988, 16
  %4632 = add nsw i64 %4631, %4619
  %4633 = getelementptr inbounds i8, i8* %12, i64 %4632
  %4634 = bitcast i8* %4633 to <16 x i8>*
  %4635 = load <16 x i8>, <16 x i8>* %4634, align 4, !tbaa !397
  %4636 = zext <16 x i8> %4635 to <16 x i16>
  %4637 = sub nsw <16 x i16> %4636, %4222
  %4638 = add nsw i64 %4631, %4620
  %4639 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4638
  %4640 = bitcast i16* %4639 to <16 x i16>*
  store <16 x i16> %4637, <16 x i16>* %4640, align 8, !tbaa !399
  %indvars.iv.next3988.1 = shl i64 %indvars.iv3987, 4
  %4641 = or i64 %indvars.iv.next3988.1, 32
  %4642 = add nsw i64 %4641, %4619
  %4643 = getelementptr inbounds i8, i8* %12, i64 %4642
  %4644 = bitcast i8* %4643 to <16 x i8>*
  %4645 = load <16 x i8>, <16 x i8>* %4644, align 4, !tbaa !397
  %4646 = zext <16 x i8> %4645 to <16 x i16>
  %4647 = sub nsw <16 x i16> %4646, %4222
  %4648 = add nsw i64 %4641, %4620
  %4649 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4648
  %4650 = bitcast i16* %4649 to <16 x i16>*
  store <16 x i16> %4647, <16 x i16>* %4650, align 8, !tbaa !399
  %indvars.iv.next3988.2 = shl i64 %indvars.iv3987, 4
  %4651 = or i64 %indvars.iv.next3988.2, 48
  %4652 = add nsw i64 %4651, %4619
  %4653 = getelementptr inbounds i8, i8* %12, i64 %4652
  %4654 = bitcast i8* %4653 to <16 x i8>*
  %4655 = load <16 x i8>, <16 x i8>* %4654, align 4, !tbaa !397
  %4656 = zext <16 x i8> %4655 to <16 x i16>
  %4657 = sub nsw <16 x i16> %4656, %4222
  %4658 = add nsw i64 %4651, %4620
  %4659 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4658
  %4660 = bitcast i16* %4659 to <16 x i16>*
  store <16 x i16> %4657, <16 x i16>* %4660, align 8, !tbaa !399
  %indvars.iv.next3988.3 = add nuw nsw i64 %indvars.iv3987, 4
  %niter5827.nsub.3 = add i64 %niter5827, -4
  %niter5827.ncmp.3 = icmp eq i64 %niter5827.nsub.3, 0
  br i1 %niter5827.ncmp.3, label %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c301.us3053.us.us"

"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c301.us3053.us.us", %"for input_wrapper.s0.x.rebased298.us3048.us.us"
  %indvars.iv3987.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased298.us3048.us.us" ], [ %indvars.iv.next3988.3, %"for input_wrapper.s0.c.c301.us3053.us.us" ]
  br i1 %lcmp.mod5825.not, label %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us", label %"for input_wrapper.s0.c.c301.us3053.us.us.epil"

"for input_wrapper.s0.c.c301.us3053.us.us.epil":  ; preds = %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa", %"for input_wrapper.s0.c.c301.us3053.us.us.epil"
  %indvars.iv3987.epil = phi i64 [ %indvars.iv.next3988.epil, %"for input_wrapper.s0.c.c301.us3053.us.us.epil" ], [ %indvars.iv3987.unr, %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa" ]
  %epil.iter5824 = phi i64 [ %epil.iter5824.sub, %"for input_wrapper.s0.c.c301.us3053.us.us.epil" ], [ %xtraiter5823, %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa" ]
  %4661 = shl nuw nsw i64 %indvars.iv3987.epil, 4
  %4662 = add nsw i64 %4661, %4619
  %4663 = getelementptr inbounds i8, i8* %12, i64 %4662
  %4664 = bitcast i8* %4663 to <16 x i8>*
  %4665 = load <16 x i8>, <16 x i8>* %4664, align 4, !tbaa !397
  %4666 = zext <16 x i8> %4665 to <16 x i16>
  %4667 = sub nsw <16 x i16> %4666, %4222
  %4668 = add nsw i64 %4661, %4620
  %4669 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4668
  %4670 = bitcast i16* %4669 to <16 x i16>*
  store <16 x i16> %4667, <16 x i16>* %4670, align 8, !tbaa !399
  %indvars.iv.next3988.epil = add nuw nsw i64 %indvars.iv3987.epil, 1
  %epil.iter5824.sub = add i64 %epil.iter5824, -1
  %epil.iter5824.cmp.not = icmp eq i64 %epil.iter5824.sub, 0
  br i1 %epil.iter5824.cmp.not, label %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us", label %"for input_wrapper.s0.c.c301.us3053.us.us.epil", !llvm.loop !435

"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us": ; preds = %"for input_wrapper.s0.c.c301.us3053.us.us.epil", %"end for input_wrapper.s0.c.c302.loopexit.us3059.us.us.unr-lcssa"
  %indvars.iv.next3990 = add nuw nsw i64 %indvars.iv3989, 1
  %.not2125.us3057.us.us = icmp eq i64 %indvars.iv3989, %4293
  br i1 %.not2125.us3057.us.us, label %"end for input_wrapper.s0.x.rebased299.loopexit.us.us", label %"for input_wrapper.s0.x.rebased298.us3048.us.us"

"for input_wrapper.s0.x.rebased315.preheader.split.us3128": ; preds = %"for input_wrapper.s0.x.rebased315.preheader.us"
  br i1 %4166, label %"for input_wrapper.s0.x.rebased315.us3067.us", label %"end for input_wrapper.s0.x.rebased316.us", !prof !387

"for input_wrapper.s0.x.rebased315.us.us":        ; preds = %"for input_wrapper.s0.x.rebased315.preheader.us", %"end for input_wrapper.s0.c.c.rebased322.loopexit.us.us"
  %indvars.iv4011 = phi i64 [ %indvars.iv.next4012, %"end for input_wrapper.s0.c.c.rebased322.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased315.preheader.us" ]
  %4671 = trunc i64 %indvars.iv4011 to i32
  %reass.add2674.us.us = add i32 %t4264.us, %4671
  %reass.mul2675.us.us = mul i32 %reass.add2674.us.us, %4219
  %4672 = add nsw i64 %indvars.iv4011, %4291
  %4673 = mul nsw i64 %4672, %4292
  %4674 = add nsw i64 %4360, %4673
  %4675 = sext i32 %reass.mul2675.us.us to i64
  br i1 %4166, label %"for input_wrapper.s0.c.c318.us.us.preheader", label %"end for input_wrapper.s0.c.c319.us.us", !prof !387

"for input_wrapper.s0.c.c318.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.rebased315.us.us"
  br i1 %4343, label %"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c318.us.us"

"for input_wrapper.s0.c.c318.us.us":              ; preds = %"for input_wrapper.s0.c.c318.us.us.preheader", %"for input_wrapper.s0.c.c318.us.us"
  %indvars.iv4007 = phi i64 [ %indvars.iv.next4008.3, %"for input_wrapper.s0.c.c318.us.us" ], [ 0, %"for input_wrapper.s0.c.c318.us.us.preheader" ]
  %niter5842 = phi i64 [ %niter5842.nsub.3, %"for input_wrapper.s0.c.c318.us.us" ], [ %unroll_iter5841, %"for input_wrapper.s0.c.c318.us.us.preheader" ]
  %4676 = shl nuw nsw i64 %indvars.iv4007, 3
  %4677 = add nsw i64 %4676, %4674
  %4678 = getelementptr inbounds i8, i8* %12, i64 %4677
  %4679 = bitcast i8* %4678 to <8 x i8>*
  %4680 = load <8 x i8>, <8 x i8>* %4679, align 4, !tbaa !397
  %4681 = zext <8 x i8> %4680 to <8 x i16>
  %4682 = sub nsw <8 x i16> %4681, %4228
  %4683 = add nsw i64 %4676, %4675
  %4684 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4683
  %4685 = bitcast i16* %4684 to <8 x i16>*
  store <8 x i16> %4682, <8 x i16>* %4685, align 8, !tbaa !399
  %indvars.iv.next4008 = shl i64 %indvars.iv4007, 3
  %4686 = or i64 %indvars.iv.next4008, 8
  %4687 = add nsw i64 %4686, %4674
  %4688 = getelementptr inbounds i8, i8* %12, i64 %4687
  %4689 = bitcast i8* %4688 to <8 x i8>*
  %4690 = load <8 x i8>, <8 x i8>* %4689, align 4, !tbaa !397
  %4691 = zext <8 x i8> %4690 to <8 x i16>
  %4692 = sub nsw <8 x i16> %4691, %4228
  %4693 = add nsw i64 %4686, %4675
  %4694 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4693
  %4695 = bitcast i16* %4694 to <8 x i16>*
  store <8 x i16> %4692, <8 x i16>* %4695, align 8, !tbaa !399
  %indvars.iv.next4008.1 = shl i64 %indvars.iv4007, 3
  %4696 = or i64 %indvars.iv.next4008.1, 16
  %4697 = add nsw i64 %4696, %4674
  %4698 = getelementptr inbounds i8, i8* %12, i64 %4697
  %4699 = bitcast i8* %4698 to <8 x i8>*
  %4700 = load <8 x i8>, <8 x i8>* %4699, align 4, !tbaa !397
  %4701 = zext <8 x i8> %4700 to <8 x i16>
  %4702 = sub nsw <8 x i16> %4701, %4228
  %4703 = add nsw i64 %4696, %4675
  %4704 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4703
  %4705 = bitcast i16* %4704 to <8 x i16>*
  store <8 x i16> %4702, <8 x i16>* %4705, align 8, !tbaa !399
  %indvars.iv.next4008.2 = shl i64 %indvars.iv4007, 3
  %4706 = or i64 %indvars.iv.next4008.2, 24
  %4707 = add nsw i64 %4706, %4674
  %4708 = getelementptr inbounds i8, i8* %12, i64 %4707
  %4709 = bitcast i8* %4708 to <8 x i8>*
  %4710 = load <8 x i8>, <8 x i8>* %4709, align 4, !tbaa !397
  %4711 = zext <8 x i8> %4710 to <8 x i16>
  %4712 = sub nsw <8 x i16> %4711, %4228
  %4713 = add nsw i64 %4706, %4675
  %4714 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4713
  %4715 = bitcast i16* %4714 to <8 x i16>*
  store <8 x i16> %4712, <8 x i16>* %4715, align 8, !tbaa !399
  %indvars.iv.next4008.3 = add nuw nsw i64 %indvars.iv4007, 4
  %niter5842.nsub.3 = add i64 %niter5842, -4
  %niter5842.ncmp.3 = icmp eq i64 %niter5842.nsub.3, 0
  br i1 %niter5842.ncmp.3, label %"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c318.us.us"

"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c318.us.us", %"for input_wrapper.s0.c.c318.us.us.preheader"
  %indvars.iv4007.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c318.us.us.preheader" ], [ %indvars.iv.next4008.3, %"for input_wrapper.s0.c.c318.us.us" ]
  br i1 %lcmp.mod5840.not, label %"end for input_wrapper.s0.c.c319.us.us", label %"for input_wrapper.s0.c.c318.us.us.epil"

"for input_wrapper.s0.c.c318.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c318.us.us.epil"
  %indvars.iv4007.epil = phi i64 [ %indvars.iv.next4008.epil, %"for input_wrapper.s0.c.c318.us.us.epil" ], [ %indvars.iv4007.unr, %"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa" ]
  %epil.iter5839 = phi i64 [ %epil.iter5839.sub, %"for input_wrapper.s0.c.c318.us.us.epil" ], [ %xtraiter5838, %"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa" ]
  %4716 = shl nuw nsw i64 %indvars.iv4007.epil, 3
  %4717 = add nsw i64 %4716, %4674
  %4718 = getelementptr inbounds i8, i8* %12, i64 %4717
  %4719 = bitcast i8* %4718 to <8 x i8>*
  %4720 = load <8 x i8>, <8 x i8>* %4719, align 4, !tbaa !397
  %4721 = zext <8 x i8> %4720 to <8 x i16>
  %4722 = sub nsw <8 x i16> %4721, %4228
  %4723 = add nsw i64 %4716, %4675
  %4724 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4723
  %4725 = bitcast i16* %4724 to <8 x i16>*
  store <8 x i16> %4722, <8 x i16>* %4725, align 8, !tbaa !399
  %indvars.iv.next4008.epil = add nuw nsw i64 %indvars.iv4007.epil, 1
  %epil.iter5839.sub = add i64 %epil.iter5839, -1
  %epil.iter5839.cmp.not = icmp eq i64 %epil.iter5839.sub, 0
  br i1 %epil.iter5839.cmp.not, label %"end for input_wrapper.s0.c.c319.us.us", label %"for input_wrapper.s0.c.c318.us.us.epil", !llvm.loop !436

"end for input_wrapper.s0.c.c319.us.us":          ; preds = %"end for input_wrapper.s0.c.c319.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c318.us.us.epil", %"for input_wrapper.s0.x.rebased315.us.us"
  br label %"for input_wrapper.s0.c.c.rebased321.us.us"

"for input_wrapper.s0.c.c.rebased321.us.us":      ; preds = %after_bb324.us.us, %"end for input_wrapper.s0.c.c319.us.us"
  %indvars.iv4009 = phi i64 [ %indvars.iv.next4010, %after_bb324.us.us ], [ 0, %"end for input_wrapper.s0.c.c319.us.us" ]
  %4726 = add nsw i64 %indvars.iv4009, %4298
  %4727 = trunc i64 %4726 to i32
  %4728 = shl nsw i32 %4727, 3
  %4729 = add nsw i32 %4728, 8
  %.not2121.us.us = icmp sgt i32 %4729, %t4253
  br i1 %.not2121.us.us, label %next_bb326.us.us, label %then_bb325.us.us

then_bb325.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased321.us.us"
  %4730 = shl nsw i64 %4726, 3
  %4731 = add nsw i64 %4730, %4674
  %4732 = getelementptr inbounds i8, i8* %12, i64 %4731
  %4733 = bitcast i8* %4732 to <8 x i8>*
  %4734 = load <8 x i8>, <8 x i8>* %4733, align 4, !tbaa !397
  %4735 = zext <8 x i8> %4734 to <8 x i16>
  %4736 = sub nsw <8 x i16> %4735, %4228
  %4737 = add nsw i64 %4730, %4675
  %4738 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4737
  %4739 = bitcast i16* %4738 to <8 x i16>*
  store <8 x i16> %4736, <8 x i16>* %4739, align 8, !tbaa !399
  br label %after_bb324.us.us

next_bb326.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased321.us.us"
  %4740 = or i32 %4728, 1
  %4741 = insertelement <8 x i32> undef, i32 %4740, i32 0
  %4742 = shufflevector <8 x i32> %4741, <8 x i32> undef, <8 x i32> zeroinitializer
  %4743 = add nsw <8 x i32> %4742, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %4744 = icmp sle <8 x i32> %4743, %4231
  %4745 = shl nsw i64 %4726, 3
  %4746 = add nsw i64 %4745, %4674
  %4747 = getelementptr inbounds i8, i8* %12, i64 %4746
  %4748 = bitcast i8* %4747 to <8 x i8>*
  %4749 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %4748, i32 4, <8 x i1> %4744, <8 x i8> undef), !tbaa !397
  %4750 = zext <8 x i8> %4749 to <8 x i16>
  %4751 = sub nsw <8 x i16> %4750, %4228
  %4752 = add nsw i64 %4745, %4675
  %4753 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4752
  %4754 = bitcast i16* %4753 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %4751, <8 x i16>* %4754, i32 8, <8 x i1> %4744), !tbaa !399
  br label %after_bb324.us.us

after_bb324.us.us:                                ; preds = %next_bb326.us.us, %then_bb325.us.us
  %indvars.iv.next4010 = add nuw nsw i64 %indvars.iv4009, 1
  %.not2122.us.us = icmp eq i64 %indvars.iv.next4010, %4299
  br i1 %.not2122.us.us, label %"end for input_wrapper.s0.c.c.rebased322.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased321.us.us"

"end for input_wrapper.s0.c.c.rebased322.loopexit.us.us": ; preds = %after_bb324.us.us
  %indvars.iv.next4012 = add nuw nsw i64 %indvars.iv4011, 1
  %.not2120.us.us = icmp eq i64 %indvars.iv4011, %4293
  br i1 %.not2120.us.us, label %"end for input_wrapper.s0.x.rebased316.us", label %"for input_wrapper.s0.x.rebased315.us.us"

"for input_wrapper.s0.x.rebased315.us3067.us":    ; preds = %"for input_wrapper.s0.x.rebased315.preheader.split.us3128", %"end for input_wrapper.s0.c.c319.loopexit.us3078.us"
  %indvars.iv4004 = phi i64 [ %indvars.iv.next4005, %"end for input_wrapper.s0.c.c319.loopexit.us3078.us" ], [ 0, %"for input_wrapper.s0.x.rebased315.preheader.split.us3128" ]
  %4755 = trunc i64 %indvars.iv4004 to i32
  %reass.add2674.us3069.us = add i32 %t4264.us, %4755
  %reass.mul2675.us3070.us = mul i32 %reass.add2674.us3069.us, %4219
  %4756 = add nsw i64 %indvars.iv4004, %4291
  %4757 = mul nsw i64 %4756, %4292
  %4758 = add nsw i64 %4360, %4757
  %4759 = sext i32 %reass.mul2675.us3070.us to i64
  br i1 %4342, label %"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa", label %"for input_wrapper.s0.c.c318.us3072.us"

"for input_wrapper.s0.c.c318.us3072.us":          ; preds = %"for input_wrapper.s0.x.rebased315.us3067.us", %"for input_wrapper.s0.c.c318.us3072.us"
  %indvars.iv4002 = phi i64 [ %indvars.iv.next4003.3, %"for input_wrapper.s0.c.c318.us3072.us" ], [ 0, %"for input_wrapper.s0.x.rebased315.us3067.us" ]
  %niter5837 = phi i64 [ %niter5837.nsub.3, %"for input_wrapper.s0.c.c318.us3072.us" ], [ %unroll_iter5836, %"for input_wrapper.s0.x.rebased315.us3067.us" ]
  %4760 = shl nuw nsw i64 %indvars.iv4002, 3
  %4761 = add nsw i64 %4760, %4758
  %4762 = getelementptr inbounds i8, i8* %12, i64 %4761
  %4763 = bitcast i8* %4762 to <8 x i8>*
  %4764 = load <8 x i8>, <8 x i8>* %4763, align 4, !tbaa !397
  %4765 = zext <8 x i8> %4764 to <8 x i16>
  %4766 = sub nsw <8 x i16> %4765, %4228
  %4767 = add nsw i64 %4760, %4759
  %4768 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4767
  %4769 = bitcast i16* %4768 to <8 x i16>*
  store <8 x i16> %4766, <8 x i16>* %4769, align 8, !tbaa !399
  %indvars.iv.next4003 = shl i64 %indvars.iv4002, 3
  %4770 = or i64 %indvars.iv.next4003, 8
  %4771 = add nsw i64 %4770, %4758
  %4772 = getelementptr inbounds i8, i8* %12, i64 %4771
  %4773 = bitcast i8* %4772 to <8 x i8>*
  %4774 = load <8 x i8>, <8 x i8>* %4773, align 4, !tbaa !397
  %4775 = zext <8 x i8> %4774 to <8 x i16>
  %4776 = sub nsw <8 x i16> %4775, %4228
  %4777 = add nsw i64 %4770, %4759
  %4778 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4777
  %4779 = bitcast i16* %4778 to <8 x i16>*
  store <8 x i16> %4776, <8 x i16>* %4779, align 8, !tbaa !399
  %indvars.iv.next4003.1 = shl i64 %indvars.iv4002, 3
  %4780 = or i64 %indvars.iv.next4003.1, 16
  %4781 = add nsw i64 %4780, %4758
  %4782 = getelementptr inbounds i8, i8* %12, i64 %4781
  %4783 = bitcast i8* %4782 to <8 x i8>*
  %4784 = load <8 x i8>, <8 x i8>* %4783, align 4, !tbaa !397
  %4785 = zext <8 x i8> %4784 to <8 x i16>
  %4786 = sub nsw <8 x i16> %4785, %4228
  %4787 = add nsw i64 %4780, %4759
  %4788 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4787
  %4789 = bitcast i16* %4788 to <8 x i16>*
  store <8 x i16> %4786, <8 x i16>* %4789, align 8, !tbaa !399
  %indvars.iv.next4003.2 = shl i64 %indvars.iv4002, 3
  %4790 = or i64 %indvars.iv.next4003.2, 24
  %4791 = add nsw i64 %4790, %4758
  %4792 = getelementptr inbounds i8, i8* %12, i64 %4791
  %4793 = bitcast i8* %4792 to <8 x i8>*
  %4794 = load <8 x i8>, <8 x i8>* %4793, align 4, !tbaa !397
  %4795 = zext <8 x i8> %4794 to <8 x i16>
  %4796 = sub nsw <8 x i16> %4795, %4228
  %4797 = add nsw i64 %4790, %4759
  %4798 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4797
  %4799 = bitcast i16* %4798 to <8 x i16>*
  store <8 x i16> %4796, <8 x i16>* %4799, align 8, !tbaa !399
  %indvars.iv.next4003.3 = add nuw nsw i64 %indvars.iv4002, 4
  %niter5837.nsub.3 = add i64 %niter5837, -4
  %niter5837.ncmp.3 = icmp eq i64 %niter5837.nsub.3, 0
  br i1 %niter5837.ncmp.3, label %"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa", label %"for input_wrapper.s0.c.c318.us3072.us"

"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c318.us3072.us", %"for input_wrapper.s0.x.rebased315.us3067.us"
  %indvars.iv4002.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased315.us3067.us" ], [ %indvars.iv.next4003.3, %"for input_wrapper.s0.c.c318.us3072.us" ]
  br i1 %lcmp.mod5835.not, label %"end for input_wrapper.s0.c.c319.loopexit.us3078.us", label %"for input_wrapper.s0.c.c318.us3072.us.epil"

"for input_wrapper.s0.c.c318.us3072.us.epil":     ; preds = %"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa", %"for input_wrapper.s0.c.c318.us3072.us.epil"
  %indvars.iv4002.epil = phi i64 [ %indvars.iv.next4003.epil, %"for input_wrapper.s0.c.c318.us3072.us.epil" ], [ %indvars.iv4002.unr, %"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa" ]
  %epil.iter5834 = phi i64 [ %epil.iter5834.sub, %"for input_wrapper.s0.c.c318.us3072.us.epil" ], [ %xtraiter5833, %"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa" ]
  %4800 = shl nuw nsw i64 %indvars.iv4002.epil, 3
  %4801 = add nsw i64 %4800, %4758
  %4802 = getelementptr inbounds i8, i8* %12, i64 %4801
  %4803 = bitcast i8* %4802 to <8 x i8>*
  %4804 = load <8 x i8>, <8 x i8>* %4803, align 4, !tbaa !397
  %4805 = zext <8 x i8> %4804 to <8 x i16>
  %4806 = sub nsw <8 x i16> %4805, %4228
  %4807 = add nsw i64 %4800, %4759
  %4808 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4807
  %4809 = bitcast i16* %4808 to <8 x i16>*
  store <8 x i16> %4806, <8 x i16>* %4809, align 8, !tbaa !399
  %indvars.iv.next4003.epil = add nuw nsw i64 %indvars.iv4002.epil, 1
  %epil.iter5834.sub = add i64 %epil.iter5834, -1
  %epil.iter5834.cmp.not = icmp eq i64 %epil.iter5834.sub, 0
  br i1 %epil.iter5834.cmp.not, label %"end for input_wrapper.s0.c.c319.loopexit.us3078.us", label %"for input_wrapper.s0.c.c318.us3072.us.epil", !llvm.loop !437

"end for input_wrapper.s0.c.c319.loopexit.us3078.us": ; preds = %"for input_wrapper.s0.c.c318.us3072.us.epil", %"end for input_wrapper.s0.c.c319.loopexit.us3078.us.unr-lcssa"
  %indvars.iv.next4005 = add nuw nsw i64 %indvars.iv4004, 1
  %.not2120.us3076.us = icmp eq i64 %indvars.iv4004, %4293
  br i1 %.not2120.us3076.us, label %"end for input_wrapper.s0.x.rebased316.us", label %"for input_wrapper.s0.x.rebased315.us3067.us"

"for input_wrapper.s0.x.rebased332.us.us":        ; preds = %"for input_wrapper.s0.y.rebased329.us", %"end for input_wrapper.s0.c.c336.loopexit.us.us"
  %indvars.iv4019 = phi i64 [ %indvars.iv.next4020, %"end for input_wrapper.s0.c.c336.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased329.us" ]
  %4810 = trunc i64 %indvars.iv4019 to i32
  %reass.add2676.us.us = add i32 %t4272.us, %4810
  %reass.mul2677.us.us = mul i32 %reass.add2676.us.us, %4219
  %4811 = add nsw i64 %indvars.iv4019, %4291
  %4812 = mul nsw i64 %4811, %4292
  %4813 = add nsw i64 %4364, %4812
  %4814 = sext i32 %reass.mul2677.us.us to i64
  br i1 %4344, label %"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c335.us.us"

"for input_wrapper.s0.c.c335.us.us":              ; preds = %"for input_wrapper.s0.x.rebased332.us.us", %"for input_wrapper.s0.c.c335.us.us"
  %indvars.iv4017 = phi i64 [ %indvars.iv.next4018.3, %"for input_wrapper.s0.c.c335.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased332.us.us" ]
  %niter5847 = phi i64 [ %niter5847.nsub.3, %"for input_wrapper.s0.c.c335.us.us" ], [ %unroll_iter5846, %"for input_wrapper.s0.x.rebased332.us.us" ]
  %4815 = shl nuw nsw i64 %indvars.iv4017, 2
  %4816 = add nsw i64 %4815, %4813
  %4817 = getelementptr inbounds i8, i8* %12, i64 %4816
  %4818 = bitcast i8* %4817 to <4 x i8>*
  %4819 = load <4 x i8>, <4 x i8>* %4818, align 4, !tbaa !397
  %4820 = zext <4 x i8> %4819 to <4 x i16>
  %4821 = sub nsw <4 x i16> %4820, %4234
  %4822 = add nsw i64 %4815, %4814
  %4823 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4822
  %4824 = bitcast i16* %4823 to <4 x i16>*
  store <4 x i16> %4821, <4 x i16>* %4824, align 8, !tbaa !399
  %indvars.iv.next4018 = shl i64 %indvars.iv4017, 2
  %4825 = or i64 %indvars.iv.next4018, 4
  %4826 = add nsw i64 %4825, %4813
  %4827 = getelementptr inbounds i8, i8* %12, i64 %4826
  %4828 = bitcast i8* %4827 to <4 x i8>*
  %4829 = load <4 x i8>, <4 x i8>* %4828, align 4, !tbaa !397
  %4830 = zext <4 x i8> %4829 to <4 x i16>
  %4831 = sub nsw <4 x i16> %4830, %4234
  %4832 = add nsw i64 %4825, %4814
  %4833 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4832
  %4834 = bitcast i16* %4833 to <4 x i16>*
  store <4 x i16> %4831, <4 x i16>* %4834, align 8, !tbaa !399
  %indvars.iv.next4018.1 = shl i64 %indvars.iv4017, 2
  %4835 = or i64 %indvars.iv.next4018.1, 8
  %4836 = add nsw i64 %4835, %4813
  %4837 = getelementptr inbounds i8, i8* %12, i64 %4836
  %4838 = bitcast i8* %4837 to <4 x i8>*
  %4839 = load <4 x i8>, <4 x i8>* %4838, align 4, !tbaa !397
  %4840 = zext <4 x i8> %4839 to <4 x i16>
  %4841 = sub nsw <4 x i16> %4840, %4234
  %4842 = add nsw i64 %4835, %4814
  %4843 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4842
  %4844 = bitcast i16* %4843 to <4 x i16>*
  store <4 x i16> %4841, <4 x i16>* %4844, align 8, !tbaa !399
  %indvars.iv.next4018.2 = shl i64 %indvars.iv4017, 2
  %4845 = or i64 %indvars.iv.next4018.2, 12
  %4846 = add nsw i64 %4845, %4813
  %4847 = getelementptr inbounds i8, i8* %12, i64 %4846
  %4848 = bitcast i8* %4847 to <4 x i8>*
  %4849 = load <4 x i8>, <4 x i8>* %4848, align 4, !tbaa !397
  %4850 = zext <4 x i8> %4849 to <4 x i16>
  %4851 = sub nsw <4 x i16> %4850, %4234
  %4852 = add nsw i64 %4845, %4814
  %4853 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4852
  %4854 = bitcast i16* %4853 to <4 x i16>*
  store <4 x i16> %4851, <4 x i16>* %4854, align 8, !tbaa !399
  %indvars.iv.next4018.3 = add nuw nsw i64 %indvars.iv4017, 4
  %niter5847.nsub.3 = add i64 %niter5847, -4
  %niter5847.ncmp.3 = icmp eq i64 %niter5847.nsub.3, 0
  br i1 %niter5847.ncmp.3, label %"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c335.us.us"

"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c335.us.us", %"for input_wrapper.s0.x.rebased332.us.us"
  %indvars.iv4017.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased332.us.us" ], [ %indvars.iv.next4018.3, %"for input_wrapper.s0.c.c335.us.us" ]
  br i1 %lcmp.mod5845.not, label %"end for input_wrapper.s0.c.c336.loopexit.us.us", label %"for input_wrapper.s0.c.c335.us.us.epil"

"for input_wrapper.s0.c.c335.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c335.us.us.epil"
  %indvars.iv4017.epil = phi i64 [ %indvars.iv.next4018.epil, %"for input_wrapper.s0.c.c335.us.us.epil" ], [ %indvars.iv4017.unr, %"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa" ]
  %epil.iter5844 = phi i64 [ %epil.iter5844.sub, %"for input_wrapper.s0.c.c335.us.us.epil" ], [ %xtraiter5843, %"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa" ]
  %4855 = shl nuw nsw i64 %indvars.iv4017.epil, 2
  %4856 = add nsw i64 %4855, %4813
  %4857 = getelementptr inbounds i8, i8* %12, i64 %4856
  %4858 = bitcast i8* %4857 to <4 x i8>*
  %4859 = load <4 x i8>, <4 x i8>* %4858, align 4, !tbaa !397
  %4860 = zext <4 x i8> %4859 to <4 x i16>
  %4861 = sub nsw <4 x i16> %4860, %4234
  %4862 = add nsw i64 %4855, %4814
  %4863 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4862
  %4864 = bitcast i16* %4863 to <4 x i16>*
  store <4 x i16> %4861, <4 x i16>* %4864, align 8, !tbaa !399
  %indvars.iv.next4018.epil = add nuw nsw i64 %indvars.iv4017.epil, 1
  %epil.iter5844.sub = add i64 %epil.iter5844, -1
  %epil.iter5844.cmp.not = icmp eq i64 %epil.iter5844.sub, 0
  br i1 %epil.iter5844.cmp.not, label %"end for input_wrapper.s0.c.c336.loopexit.us.us", label %"for input_wrapper.s0.c.c335.us.us.epil", !llvm.loop !438

"end for input_wrapper.s0.c.c336.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c335.us.us.epil", %"end for input_wrapper.s0.c.c336.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4020 = add nuw nsw i64 %indvars.iv4019, 1
  %.not2117.us.us = icmp eq i64 %indvars.iv4019, %4293
  br i1 %.not2117.us.us, label %"end for input_wrapper.s0.x.rebased333.us", label %"for input_wrapper.s0.x.rebased332.us.us"

iter.check5255:                                   ; preds = %"for input_wrapper.s0.y.rebased338.us", %"end for input_wrapper.s0.c345.loopexit.us.us"
  %indvars.iv4027 = phi i64 [ %indvars.iv.next4028, %"end for input_wrapper.s0.c345.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased338.us" ]
  %4865 = trunc i64 %indvars.iv4027 to i32
  %reass.add2678.us.us = add i32 %t4279.us, %4865
  %reass.mul2679.us.us = mul i32 %reass.add2678.us.us, %4219
  %4866 = add nsw i64 %indvars.iv4027, %4291
  %4867 = mul nsw i64 %4866, %4292
  %4868 = add nsw i64 %4368, %4867
  %4869 = sext i32 %reass.mul2679.us.us to i64
  br i1 %min.iters.check5253, label %"for input_wrapper.s0.c344.us.us.preheader", label %vector.main.loop.iter.check5257

vector.main.loop.iter.check5257:                  ; preds = %iter.check5255
  br i1 %min.iters.check5256, label %vec.epilog.ph5280, label %vector.ph5258

vector.ph5258:                                    ; preds = %vector.main.loop.iter.check5257
  br i1 %4345, label %middle.block5250.unr-lcssa, label %vector.body5252

vector.body5252:                                  ; preds = %vector.ph5258, %vector.body5252
  %index5261 = phi i64 [ %index.next5262.1, %vector.body5252 ], [ 0, %vector.ph5258 ]
  %niter5851 = phi i64 [ %niter5851.nsub.1, %vector.body5252 ], [ %unroll_iter5850, %vector.ph5258 ]
  %4870 = add nsw i64 %index5261, %4868
  %4871 = getelementptr inbounds i8, i8* %12, i64 %4870
  %4872 = bitcast i8* %4871 to <16 x i8>*
  %wide.load5264 = load <16 x i8>, <16 x i8>* %4872, align 1, !tbaa !397
  %4873 = getelementptr inbounds i8, i8* %4871, i64 16
  %4874 = bitcast i8* %4873 to <16 x i8>*
  %wide.load5265 = load <16 x i8>, <16 x i8>* %4874, align 1, !tbaa !397
  %4875 = getelementptr inbounds i8, i8* %4871, i64 32
  %4876 = bitcast i8* %4875 to <16 x i8>*
  %wide.load5266 = load <16 x i8>, <16 x i8>* %4876, align 1, !tbaa !397
  %4877 = getelementptr inbounds i8, i8* %4871, i64 48
  %4878 = bitcast i8* %4877 to <16 x i8>*
  %wide.load5267 = load <16 x i8>, <16 x i8>* %4878, align 1, !tbaa !397
  %4879 = zext <16 x i8> %wide.load5264 to <16 x i16>
  %4880 = zext <16 x i8> %wide.load5265 to <16 x i16>
  %4881 = zext <16 x i8> %wide.load5266 to <16 x i16>
  %4882 = zext <16 x i8> %wide.load5267 to <16 x i16>
  %4883 = sub nsw <16 x i16> %4879, %broadcast.splat5269
  %4884 = sub nsw <16 x i16> %4880, %broadcast.splat5271
  %4885 = sub nsw <16 x i16> %4881, %broadcast.splat5273
  %4886 = sub nsw <16 x i16> %4882, %broadcast.splat5275
  %4887 = add nsw i64 %index5261, %4869
  %4888 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4887
  %4889 = bitcast i16* %4888 to <16 x i16>*
  store <16 x i16> %4883, <16 x i16>* %4889, align 2, !tbaa !399
  %4890 = getelementptr inbounds i16, i16* %4888, i64 16
  %4891 = bitcast i16* %4890 to <16 x i16>*
  store <16 x i16> %4884, <16 x i16>* %4891, align 2, !tbaa !399
  %4892 = getelementptr inbounds i16, i16* %4888, i64 32
  %4893 = bitcast i16* %4892 to <16 x i16>*
  store <16 x i16> %4885, <16 x i16>* %4893, align 2, !tbaa !399
  %4894 = getelementptr inbounds i16, i16* %4888, i64 48
  %4895 = bitcast i16* %4894 to <16 x i16>*
  store <16 x i16> %4886, <16 x i16>* %4895, align 2, !tbaa !399
  %index.next5262 = or i64 %index5261, 64
  %4896 = add nsw i64 %index.next5262, %4868
  %4897 = getelementptr inbounds i8, i8* %12, i64 %4896
  %4898 = bitcast i8* %4897 to <16 x i8>*
  %wide.load5264.1 = load <16 x i8>, <16 x i8>* %4898, align 1, !tbaa !397
  %4899 = getelementptr inbounds i8, i8* %4897, i64 16
  %4900 = bitcast i8* %4899 to <16 x i8>*
  %wide.load5265.1 = load <16 x i8>, <16 x i8>* %4900, align 1, !tbaa !397
  %4901 = getelementptr inbounds i8, i8* %4897, i64 32
  %4902 = bitcast i8* %4901 to <16 x i8>*
  %wide.load5266.1 = load <16 x i8>, <16 x i8>* %4902, align 1, !tbaa !397
  %4903 = getelementptr inbounds i8, i8* %4897, i64 48
  %4904 = bitcast i8* %4903 to <16 x i8>*
  %wide.load5267.1 = load <16 x i8>, <16 x i8>* %4904, align 1, !tbaa !397
  %4905 = zext <16 x i8> %wide.load5264.1 to <16 x i16>
  %4906 = zext <16 x i8> %wide.load5265.1 to <16 x i16>
  %4907 = zext <16 x i8> %wide.load5266.1 to <16 x i16>
  %4908 = zext <16 x i8> %wide.load5267.1 to <16 x i16>
  %4909 = sub nsw <16 x i16> %4905, %broadcast.splat5269
  %4910 = sub nsw <16 x i16> %4906, %broadcast.splat5271
  %4911 = sub nsw <16 x i16> %4907, %broadcast.splat5273
  %4912 = sub nsw <16 x i16> %4908, %broadcast.splat5275
  %4913 = add nsw i64 %index.next5262, %4869
  %4914 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4913
  %4915 = bitcast i16* %4914 to <16 x i16>*
  store <16 x i16> %4909, <16 x i16>* %4915, align 2, !tbaa !399
  %4916 = getelementptr inbounds i16, i16* %4914, i64 16
  %4917 = bitcast i16* %4916 to <16 x i16>*
  store <16 x i16> %4910, <16 x i16>* %4917, align 2, !tbaa !399
  %4918 = getelementptr inbounds i16, i16* %4914, i64 32
  %4919 = bitcast i16* %4918 to <16 x i16>*
  store <16 x i16> %4911, <16 x i16>* %4919, align 2, !tbaa !399
  %4920 = getelementptr inbounds i16, i16* %4914, i64 48
  %4921 = bitcast i16* %4920 to <16 x i16>*
  store <16 x i16> %4912, <16 x i16>* %4921, align 2, !tbaa !399
  %index.next5262.1 = add i64 %index5261, 128
  %niter5851.nsub.1 = add i64 %niter5851, -2
  %niter5851.ncmp.1 = icmp eq i64 %niter5851.nsub.1, 0
  br i1 %niter5851.ncmp.1, label %middle.block5250.unr-lcssa, label %vector.body5252, !llvm.loop !439

middle.block5250.unr-lcssa:                       ; preds = %vector.body5252, %vector.ph5258
  %index5261.unr = phi i64 [ 0, %vector.ph5258 ], [ %index.next5262.1, %vector.body5252 ]
  br i1 %lcmp.mod5849.not, label %middle.block5250, label %vector.body5252.epil

vector.body5252.epil:                             ; preds = %middle.block5250.unr-lcssa
  %4922 = add nsw i64 %index5261.unr, %4868
  %4923 = getelementptr inbounds i8, i8* %12, i64 %4922
  %4924 = bitcast i8* %4923 to <16 x i8>*
  %wide.load5264.epil = load <16 x i8>, <16 x i8>* %4924, align 1, !tbaa !397
  %4925 = getelementptr inbounds i8, i8* %4923, i64 16
  %4926 = bitcast i8* %4925 to <16 x i8>*
  %wide.load5265.epil = load <16 x i8>, <16 x i8>* %4926, align 1, !tbaa !397
  %4927 = getelementptr inbounds i8, i8* %4923, i64 32
  %4928 = bitcast i8* %4927 to <16 x i8>*
  %wide.load5266.epil = load <16 x i8>, <16 x i8>* %4928, align 1, !tbaa !397
  %4929 = getelementptr inbounds i8, i8* %4923, i64 48
  %4930 = bitcast i8* %4929 to <16 x i8>*
  %wide.load5267.epil = load <16 x i8>, <16 x i8>* %4930, align 1, !tbaa !397
  %4931 = zext <16 x i8> %wide.load5264.epil to <16 x i16>
  %4932 = zext <16 x i8> %wide.load5265.epil to <16 x i16>
  %4933 = zext <16 x i8> %wide.load5266.epil to <16 x i16>
  %4934 = zext <16 x i8> %wide.load5267.epil to <16 x i16>
  %4935 = sub nsw <16 x i16> %4931, %broadcast.splat5269
  %4936 = sub nsw <16 x i16> %4932, %broadcast.splat5271
  %4937 = sub nsw <16 x i16> %4933, %broadcast.splat5273
  %4938 = sub nsw <16 x i16> %4934, %broadcast.splat5275
  %4939 = add nsw i64 %index5261.unr, %4869
  %4940 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4939
  %4941 = bitcast i16* %4940 to <16 x i16>*
  store <16 x i16> %4935, <16 x i16>* %4941, align 2, !tbaa !399
  %4942 = getelementptr inbounds i16, i16* %4940, i64 16
  %4943 = bitcast i16* %4942 to <16 x i16>*
  store <16 x i16> %4936, <16 x i16>* %4943, align 2, !tbaa !399
  %4944 = getelementptr inbounds i16, i16* %4940, i64 32
  %4945 = bitcast i16* %4944 to <16 x i16>*
  store <16 x i16> %4937, <16 x i16>* %4945, align 2, !tbaa !399
  %4946 = getelementptr inbounds i16, i16* %4940, i64 48
  %4947 = bitcast i16* %4946 to <16 x i16>*
  store <16 x i16> %4938, <16 x i16>* %4947, align 2, !tbaa !399
  br label %middle.block5250

middle.block5250:                                 ; preds = %middle.block5250.unr-lcssa, %vector.body5252.epil
  br i1 %cmp.n5263, label %"end for input_wrapper.s0.c345.loopexit.us.us", label %vec.epilog.iter.check5279

vec.epilog.iter.check5279:                        ; preds = %middle.block5250
  br i1 %min.epilog.iters.check5282, label %"for input_wrapper.s0.c344.us.us.preheader", label %vec.epilog.ph5280

vec.epilog.ph5280:                                ; preds = %vector.main.loop.iter.check5257, %vec.epilog.iter.check5279
  %vec.epilog.resume.val5283 = phi i64 [ %n.vec5260, %vec.epilog.iter.check5279 ], [ 0, %vector.main.loop.iter.check5257 ]
  br label %vec.epilog.vector.body5278

vec.epilog.vector.body5278:                       ; preds = %vec.epilog.vector.body5278, %vec.epilog.ph5280
  %index5286 = phi i64 [ %vec.epilog.resume.val5283, %vec.epilog.ph5280 ], [ %index.next5287, %vec.epilog.vector.body5278 ]
  %4948 = add nsw i64 %index5286, %4868
  %4949 = getelementptr inbounds i8, i8* %12, i64 %4948
  %4950 = bitcast i8* %4949 to <8 x i8>*
  %wide.load5290 = load <8 x i8>, <8 x i8>* %4950, align 1, !tbaa !397
  %4951 = zext <8 x i8> %wide.load5290 to <8 x i16>
  %4952 = sub nsw <8 x i16> %4951, %broadcast.splat5292
  %4953 = add nsw i64 %index5286, %4869
  %4954 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4953
  %4955 = bitcast i16* %4954 to <8 x i16>*
  store <8 x i16> %4952, <8 x i16>* %4955, align 2, !tbaa !399
  %index.next5287 = add i64 %index5286, 8
  %4956 = icmp eq i64 %index.next5287, %n.vec5285
  br i1 %4956, label %vec.epilog.middle.block5276, label %vec.epilog.vector.body5278, !llvm.loop !440

vec.epilog.middle.block5276:                      ; preds = %vec.epilog.vector.body5278
  br i1 %cmp.n5289, label %"end for input_wrapper.s0.c345.loopexit.us.us", label %"for input_wrapper.s0.c344.us.us.preheader"

"for input_wrapper.s0.c344.us.us.preheader":      ; preds = %iter.check5255, %vec.epilog.iter.check5279, %vec.epilog.middle.block5276
  %indvars.iv4025.ph = phi i64 [ 0, %iter.check5255 ], [ %n.vec5260, %vec.epilog.iter.check5279 ], [ %n.vec5285, %vec.epilog.middle.block5276 ]
  br label %"for input_wrapper.s0.c344.us.us"

"for input_wrapper.s0.c344.us.us":                ; preds = %"for input_wrapper.s0.c344.us.us.preheader", %"for input_wrapper.s0.c344.us.us"
  %indvars.iv4025 = phi i64 [ %indvars.iv.next4026, %"for input_wrapper.s0.c344.us.us" ], [ %indvars.iv4025.ph, %"for input_wrapper.s0.c344.us.us.preheader" ]
  %4957 = add nsw i64 %indvars.iv4025, %4868
  %4958 = getelementptr inbounds i8, i8* %12, i64 %4957
  %4959 = load i8, i8* %4958, align 1, !tbaa !397
  %4960 = zext i8 %4959 to i16
  %4961 = sub nsw i16 %4960, %4235
  %4962 = add nsw i64 %indvars.iv4025, %4869
  %4963 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %4962
  store i16 %4961, i16* %4963, align 2, !tbaa !399
  %indvars.iv.next4026 = add nuw nsw i64 %indvars.iv4025, 1
  %.not2115.us.us = icmp eq i64 %indvars.iv.next4026, %4301
  br i1 %.not2115.us.us, label %"end for input_wrapper.s0.c345.loopexit.us.us", label %"for input_wrapper.s0.c344.us.us", !llvm.loop !441

"end for input_wrapper.s0.c345.loopexit.us.us":   ; preds = %"for input_wrapper.s0.c344.us.us", %vec.epilog.middle.block5276, %middle.block5250
  %indvars.iv.next4028 = add nuw nsw i64 %indvars.iv4027, 1
  %.not2114.us.us = icmp eq i64 %indvars.iv4027, %4293
  br i1 %.not2114.us.us, label %"end for input_wrapper.s0.x.rebased342.us", label %iter.check5255

"for input_wrapper.s0.x.x278.us.us":              ; preds = %"for input_wrapper.s0.x.x278.us.us.preheader", %"end for input_wrapper.s0.c.c282.loopexit.us.us"
  %indvars.iv4036 = phi i64 [ 0, %"for input_wrapper.s0.x.x278.us.us.preheader" ], [ %indvars.iv.next4037, %"end for input_wrapper.s0.c.c282.loopexit.us.us" ]
  %4964 = trunc i64 %indvars.iv4036 to i32
  %t4235.us.us = mul i32 %4236, %4964
  %4965 = shl nsw i64 %indvars.iv4036, 3
  %4966 = add nsw i64 %4965, %4291
  br label %"for input_wrapper.s0.c.c281.us.us"

"for input_wrapper.s0.c.c281.us.us":              ; preds = %"for input_wrapper.s0.c.c281.us.us", %"for input_wrapper.s0.x.x278.us.us"
  %indvars.iv4033 = phi i64 [ %indvars.iv.next4034, %"for input_wrapper.s0.c.c281.us.us" ], [ 0, %"for input_wrapper.s0.x.x278.us.us" ]
  %4967 = add nsw i64 %indvars.iv4033, %4966
  %4968 = shl nsw i64 %4967, 2
  %4969 = add nsw i64 %4968, %4520
  %4970 = getelementptr inbounds i8, i8* %12, i64 %4969
  %4971 = bitcast i8* %4970 to <32 x i8>*
  %4972 = load <32 x i8>, <32 x i8>* %4971, align 4, !tbaa !397
  %4973 = zext <32 x i8> %4972 to <32 x i16>
  %4974 = sub nsw <32 x i16> %4973, %4245
  %4975 = trunc i64 %indvars.iv4033 to i32
  %4976 = add i32 %t4235.us.us, %4975
  %4977 = shl nsw i32 %4976, 2
  %4978 = add i32 %4977, %4521
  %4979 = insertelement <4 x i32> undef, i32 %4978, i32 0
  %4980 = shufflevector <4 x i32> %4979, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %4981 = add <4 x i32> %4980, <i32 poison, i32 1, i32 2, i32 3>
  %4982 = add i32 %4978, 1
  %4983 = add i32 %4982, %a184
  %4984 = insertelement <4 x i32> undef, i32 %4983, i32 0
  %4985 = shufflevector <4 x i32> %4984, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %4986 = add <4 x i32> %4985, <i32 poison, i32 1, i32 2, i32 3>
  %4987 = add i32 %4978, 2
  %4988 = add i32 %4987, %4242
  %4989 = insertelement <4 x i32> undef, i32 %4988, i32 0
  %4990 = shufflevector <4 x i32> %4989, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %4991 = add <4 x i32> %4990, <i32 poison, i32 1, i32 2, i32 3>
  %4992 = add i32 %4978, 3
  %4993 = add i32 %4992, %4241
  %4994 = insertelement <4 x i32> undef, i32 %4993, i32 0
  %4995 = shufflevector <4 x i32> %4994, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %4996 = add <4 x i32> %4995, <i32 poison, i32 1, i32 2, i32 3>
  %4997 = add i32 %4978, 4
  %4998 = add i32 %4997, %4240
  %4999 = insertelement <4 x i32> undef, i32 %4998, i32 0
  %5000 = shufflevector <4 x i32> %4999, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %5001 = add <4 x i32> %5000, <i32 poison, i32 1, i32 2, i32 3>
  %5002 = add i32 %4978, 5
  %5003 = add i32 %5002, %4239
  %5004 = insertelement <4 x i32> undef, i32 %5003, i32 0
  %5005 = shufflevector <4 x i32> %5004, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %5006 = add <4 x i32> %5005, <i32 poison, i32 1, i32 2, i32 3>
  %5007 = add i32 %4978, 6
  %5008 = add i32 %5007, %4238
  %5009 = insertelement <4 x i32> undef, i32 %5008, i32 0
  %5010 = shufflevector <4 x i32> %5009, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %5011 = add <4 x i32> %5010, <i32 poison, i32 1, i32 2, i32 3>
  %5012 = add i32 %4978, 7
  %5013 = add i32 %5012, %4237
  %5014 = insertelement <4 x i32> undef, i32 %5013, i32 0
  %5015 = shufflevector <4 x i32> %5014, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %5016 = add <4 x i32> %5015, <i32 poison, i32 1, i32 2, i32 3>
  %5017 = extractelement <32 x i16> %4974, i32 0
  %5018 = sext i32 %4978 to i64
  %5019 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5018
  store i16 %5017, i16* %5019, align 2, !tbaa !399
  %5020 = extractelement <4 x i32> %4981, i32 1
  %5021 = extractelement <32 x i16> %4974, i32 1
  %5022 = sext i32 %5020 to i64
  %5023 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5022
  store i16 %5021, i16* %5023, align 2, !tbaa !399
  %5024 = extractelement <4 x i32> %4981, i32 2
  %5025 = extractelement <32 x i16> %4974, i32 2
  %5026 = sext i32 %5024 to i64
  %5027 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5026
  store i16 %5025, i16* %5027, align 2, !tbaa !399
  %5028 = extractelement <4 x i32> %4981, i32 3
  %5029 = extractelement <32 x i16> %4974, i32 3
  %5030 = sext i32 %5028 to i64
  %5031 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5030
  store i16 %5029, i16* %5031, align 2, !tbaa !399
  %5032 = extractelement <32 x i16> %4974, i32 4
  %5033 = sext i32 %4983 to i64
  %5034 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5033
  store i16 %5032, i16* %5034, align 2, !tbaa !399
  %5035 = extractelement <4 x i32> %4986, i32 1
  %5036 = extractelement <32 x i16> %4974, i32 5
  %5037 = sext i32 %5035 to i64
  %5038 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5037
  store i16 %5036, i16* %5038, align 2, !tbaa !399
  %5039 = extractelement <4 x i32> %4986, i32 2
  %5040 = extractelement <32 x i16> %4974, i32 6
  %5041 = sext i32 %5039 to i64
  %5042 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5041
  store i16 %5040, i16* %5042, align 2, !tbaa !399
  %5043 = extractelement <4 x i32> %4986, i32 3
  %5044 = extractelement <32 x i16> %4974, i32 7
  %5045 = sext i32 %5043 to i64
  %5046 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5045
  store i16 %5044, i16* %5046, align 2, !tbaa !399
  %5047 = extractelement <32 x i16> %4974, i32 8
  %5048 = sext i32 %4988 to i64
  %5049 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5048
  store i16 %5047, i16* %5049, align 2, !tbaa !399
  %5050 = extractelement <4 x i32> %4991, i32 1
  %5051 = extractelement <32 x i16> %4974, i32 9
  %5052 = sext i32 %5050 to i64
  %5053 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5052
  store i16 %5051, i16* %5053, align 2, !tbaa !399
  %5054 = extractelement <4 x i32> %4991, i32 2
  %5055 = extractelement <32 x i16> %4974, i32 10
  %5056 = sext i32 %5054 to i64
  %5057 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5056
  store i16 %5055, i16* %5057, align 2, !tbaa !399
  %5058 = extractelement <4 x i32> %4991, i32 3
  %5059 = extractelement <32 x i16> %4974, i32 11
  %5060 = sext i32 %5058 to i64
  %5061 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5060
  store i16 %5059, i16* %5061, align 2, !tbaa !399
  %5062 = extractelement <32 x i16> %4974, i32 12
  %5063 = sext i32 %4993 to i64
  %5064 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5063
  store i16 %5062, i16* %5064, align 2, !tbaa !399
  %5065 = extractelement <4 x i32> %4996, i32 1
  %5066 = extractelement <32 x i16> %4974, i32 13
  %5067 = sext i32 %5065 to i64
  %5068 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5067
  store i16 %5066, i16* %5068, align 2, !tbaa !399
  %5069 = extractelement <4 x i32> %4996, i32 2
  %5070 = extractelement <32 x i16> %4974, i32 14
  %5071 = sext i32 %5069 to i64
  %5072 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5071
  store i16 %5070, i16* %5072, align 2, !tbaa !399
  %5073 = extractelement <4 x i32> %4996, i32 3
  %5074 = extractelement <32 x i16> %4974, i32 15
  %5075 = sext i32 %5073 to i64
  %5076 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5075
  store i16 %5074, i16* %5076, align 2, !tbaa !399
  %5077 = extractelement <32 x i16> %4974, i32 16
  %5078 = sext i32 %4998 to i64
  %5079 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5078
  store i16 %5077, i16* %5079, align 2, !tbaa !399
  %5080 = extractelement <4 x i32> %5001, i32 1
  %5081 = extractelement <32 x i16> %4974, i32 17
  %5082 = sext i32 %5080 to i64
  %5083 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5082
  store i16 %5081, i16* %5083, align 2, !tbaa !399
  %5084 = extractelement <4 x i32> %5001, i32 2
  %5085 = extractelement <32 x i16> %4974, i32 18
  %5086 = sext i32 %5084 to i64
  %5087 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5086
  store i16 %5085, i16* %5087, align 2, !tbaa !399
  %5088 = extractelement <4 x i32> %5001, i32 3
  %5089 = extractelement <32 x i16> %4974, i32 19
  %5090 = sext i32 %5088 to i64
  %5091 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5090
  store i16 %5089, i16* %5091, align 2, !tbaa !399
  %5092 = extractelement <32 x i16> %4974, i32 20
  %5093 = sext i32 %5003 to i64
  %5094 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5093
  store i16 %5092, i16* %5094, align 2, !tbaa !399
  %5095 = extractelement <4 x i32> %5006, i32 1
  %5096 = extractelement <32 x i16> %4974, i32 21
  %5097 = sext i32 %5095 to i64
  %5098 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5097
  store i16 %5096, i16* %5098, align 2, !tbaa !399
  %5099 = extractelement <4 x i32> %5006, i32 2
  %5100 = extractelement <32 x i16> %4974, i32 22
  %5101 = sext i32 %5099 to i64
  %5102 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5101
  store i16 %5100, i16* %5102, align 2, !tbaa !399
  %5103 = extractelement <4 x i32> %5006, i32 3
  %5104 = extractelement <32 x i16> %4974, i32 23
  %5105 = sext i32 %5103 to i64
  %5106 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5105
  store i16 %5104, i16* %5106, align 2, !tbaa !399
  %5107 = extractelement <32 x i16> %4974, i32 24
  %5108 = sext i32 %5008 to i64
  %5109 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5108
  store i16 %5107, i16* %5109, align 2, !tbaa !399
  %5110 = extractelement <4 x i32> %5011, i32 1
  %5111 = extractelement <32 x i16> %4974, i32 25
  %5112 = sext i32 %5110 to i64
  %5113 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5112
  store i16 %5111, i16* %5113, align 2, !tbaa !399
  %5114 = extractelement <4 x i32> %5011, i32 2
  %5115 = extractelement <32 x i16> %4974, i32 26
  %5116 = sext i32 %5114 to i64
  %5117 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5116
  store i16 %5115, i16* %5117, align 2, !tbaa !399
  %5118 = extractelement <4 x i32> %5011, i32 3
  %5119 = extractelement <32 x i16> %4974, i32 27
  %5120 = sext i32 %5118 to i64
  %5121 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5120
  store i16 %5119, i16* %5121, align 2, !tbaa !399
  %5122 = extractelement <32 x i16> %4974, i32 28
  %5123 = sext i32 %5013 to i64
  %5124 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5123
  store i16 %5122, i16* %5124, align 2, !tbaa !399
  %5125 = extractelement <4 x i32> %5016, i32 1
  %5126 = extractelement <32 x i16> %4974, i32 29
  %5127 = sext i32 %5125 to i64
  %5128 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5127
  store i16 %5126, i16* %5128, align 2, !tbaa !399
  %5129 = extractelement <4 x i32> %5016, i32 2
  %5130 = extractelement <32 x i16> %4974, i32 30
  %5131 = sext i32 %5129 to i64
  %5132 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5131
  store i16 %5130, i16* %5132, align 2, !tbaa !399
  %5133 = extractelement <4 x i32> %5016, i32 3
  %5134 = extractelement <32 x i16> %4974, i32 31
  %5135 = sext i32 %5133 to i64
  %5136 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5135
  store i16 %5134, i16* %5136, align 2, !tbaa !399
  %indvars.iv.next4034 = add nuw nsw i64 %indvars.iv4033, 1
  %.not2134.us.us = icmp eq i64 %indvars.iv.next4034, %4302
  br i1 %.not2134.us.us, label %"end for input_wrapper.s0.c.c282.loopexit.us.us", label %"for input_wrapper.s0.c.c281.us.us"

"end for input_wrapper.s0.c.c282.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c281.us.us"
  %indvars.iv.next4037 = add nuw nsw i64 %indvars.iv4036, 1
  %.not2133.us.us = icmp eq i64 %indvars.iv.next4037, %4303
  br i1 %.not2133.us.us, label %"end for input_wrapper.s0.x.x279.us", label %"for input_wrapper.s0.x.x278.us.us"

"for input_wrapper.s0.x.x.rebased284.us.us":      ; preds = %"for input_wrapper.s0.x.x.rebased284.preheader.us", %"end for input_wrapper.s0.x.v21288.us.us"
  %indvars.iv4044 = phi i64 [ %indvars.iv.next4045, %"end for input_wrapper.s0.x.v21288.us.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased284.preheader.us" ]
  %5137 = trunc i64 %indvars.iv4044 to i32
  %5138 = add i32 %t4215, %5137
  %5139 = shl nsw i32 %5138, 3
  %a188.us.us = sub nsw i32 %a176, %5139
  %5140 = icmp slt i32 %a188.us.us, 7
  %t4246.us.us = select i1 %5140, i32 %a188.us.us, i32 7
  %5141 = icmp sgt i32 %t4246.us.us, -1
  br i1 %5141, label %"for input_wrapper.s0.x.v21287.us.us.us.preheader", label %"end for input_wrapper.s0.x.v21288.us.us", !prof !387

"for input_wrapper.s0.x.v21287.us.us.us.preheader": ; preds = %"for input_wrapper.s0.x.x.rebased284.us.us"
  %5142 = sext i32 %5139 to i64
  %5143 = zext i32 %t4246.us.us to i64
  br label %"for input_wrapper.s0.x.v21287.us.us.us"

"end for input_wrapper.s0.x.v21288.us.us":        ; preds = %"end for input_wrapper.s0.c.c291.loopexit.us.us.us", %"for input_wrapper.s0.x.x.rebased284.us.us"
  %indvars.iv.next4045 = add nuw nsw i64 %indvars.iv4044, 1
  %.not2130.us.us = icmp eq i64 %indvars.iv4044, %4305
  br i1 %.not2130.us.us, label %"end for input_wrapper.s0.x.x.rebased285.us", label %"for input_wrapper.s0.x.x.rebased284.us.us"

"for input_wrapper.s0.x.v21287.us.us.us":         ; preds = %"for input_wrapper.s0.x.v21287.us.us.us.preheader", %"end for input_wrapper.s0.c.c291.loopexit.us.us.us"
  %indvars.iv4041 = phi i64 [ 0, %"for input_wrapper.s0.x.v21287.us.us.us.preheader" ], [ %indvars.iv.next4042, %"end for input_wrapper.s0.c.c291.loopexit.us.us.us" ]
  %5144 = add nsw i64 %indvars.iv4041, %5142
  %5145 = mul nsw i64 %5144, %4304
  %5146 = add nsw i64 %5145, %4369
  %5147 = trunc i64 %5144 to i32
  %t4248.us.us.us = add i32 %b179, %5147
  %5148 = sext i32 %t4248.us.us.us to i64
  br i1 %4346, label %"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c290.us.us.us"

"for input_wrapper.s0.c.c290.us.us.us":           ; preds = %"for input_wrapper.s0.x.v21287.us.us.us", %"for input_wrapper.s0.c.c290.us.us.us"
  %indvars.iv4039 = phi i64 [ %indvars.iv.next4040.3, %"for input_wrapper.s0.c.c290.us.us.us" ], [ 0, %"for input_wrapper.s0.x.v21287.us.us.us" ]
  %niter5856 = phi i64 [ %niter5856.nsub.3, %"for input_wrapper.s0.c.c290.us.us.us" ], [ %unroll_iter5855, %"for input_wrapper.s0.x.v21287.us.us.us" ]
  %5149 = add nsw i64 %indvars.iv4039, %5148
  %5150 = shl nsw i64 %5149, 2
  %5151 = add nsw i64 %5150, %4519
  %5152 = getelementptr inbounds i8, i8* %12, i64 %5151
  %5153 = bitcast i8* %5152 to <4 x i8>*
  %5154 = load <4 x i8>, <4 x i8>* %5153, align 4, !tbaa !397
  %5155 = zext <4 x i8> %5154 to <4 x i16>
  %5156 = sub nsw <4 x i16> %5155, %4234
  %5157 = shl nuw nsw i64 %indvars.iv4039, 2
  %5158 = add nsw i64 %5157, %5146
  %5159 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5158
  %5160 = bitcast i16* %5159 to <4 x i16>*
  store <4 x i16> %5156, <4 x i16>* %5160, align 8, !tbaa !399
  %indvars.iv.next4040 = or i64 %indvars.iv4039, 1
  %5161 = add nsw i64 %indvars.iv.next4040, %5148
  %5162 = shl nsw i64 %5161, 2
  %5163 = add nsw i64 %5162, %4519
  %5164 = getelementptr inbounds i8, i8* %12, i64 %5163
  %5165 = bitcast i8* %5164 to <4 x i8>*
  %5166 = load <4 x i8>, <4 x i8>* %5165, align 4, !tbaa !397
  %5167 = zext <4 x i8> %5166 to <4 x i16>
  %5168 = sub nsw <4 x i16> %5167, %4234
  %5169 = shl nuw nsw i64 %indvars.iv.next4040, 2
  %5170 = add nsw i64 %5169, %5146
  %5171 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5170
  %5172 = bitcast i16* %5171 to <4 x i16>*
  store <4 x i16> %5168, <4 x i16>* %5172, align 8, !tbaa !399
  %indvars.iv.next4040.1 = or i64 %indvars.iv4039, 2
  %5173 = add nsw i64 %indvars.iv.next4040.1, %5148
  %5174 = shl nsw i64 %5173, 2
  %5175 = add nsw i64 %5174, %4519
  %5176 = getelementptr inbounds i8, i8* %12, i64 %5175
  %5177 = bitcast i8* %5176 to <4 x i8>*
  %5178 = load <4 x i8>, <4 x i8>* %5177, align 4, !tbaa !397
  %5179 = zext <4 x i8> %5178 to <4 x i16>
  %5180 = sub nsw <4 x i16> %5179, %4234
  %5181 = shl nuw nsw i64 %indvars.iv.next4040.1, 2
  %5182 = add nsw i64 %5181, %5146
  %5183 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5182
  %5184 = bitcast i16* %5183 to <4 x i16>*
  store <4 x i16> %5180, <4 x i16>* %5184, align 8, !tbaa !399
  %indvars.iv.next4040.2 = or i64 %indvars.iv4039, 3
  %5185 = add nsw i64 %indvars.iv.next4040.2, %5148
  %5186 = shl nsw i64 %5185, 2
  %5187 = add nsw i64 %5186, %4519
  %5188 = getelementptr inbounds i8, i8* %12, i64 %5187
  %5189 = bitcast i8* %5188 to <4 x i8>*
  %5190 = load <4 x i8>, <4 x i8>* %5189, align 4, !tbaa !397
  %5191 = zext <4 x i8> %5190 to <4 x i16>
  %5192 = sub nsw <4 x i16> %5191, %4234
  %5193 = shl nuw nsw i64 %indvars.iv.next4040.2, 2
  %5194 = add nsw i64 %5193, %5146
  %5195 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5194
  %5196 = bitcast i16* %5195 to <4 x i16>*
  store <4 x i16> %5192, <4 x i16>* %5196, align 8, !tbaa !399
  %indvars.iv.next4040.3 = add nuw nsw i64 %indvars.iv4039, 4
  %niter5856.nsub.3 = add i64 %niter5856, -4
  %niter5856.ncmp.3 = icmp eq i64 %niter5856.nsub.3, 0
  br i1 %niter5856.ncmp.3, label %"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c290.us.us.us"

"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c290.us.us.us", %"for input_wrapper.s0.x.v21287.us.us.us"
  %indvars.iv4039.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v21287.us.us.us" ], [ %indvars.iv.next4040.3, %"for input_wrapper.s0.c.c290.us.us.us" ]
  br i1 %lcmp.mod5854.not, label %"end for input_wrapper.s0.c.c291.loopexit.us.us.us", label %"for input_wrapper.s0.c.c290.us.us.us.epil"

"for input_wrapper.s0.c.c290.us.us.us.epil":      ; preds = %"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa", %"for input_wrapper.s0.c.c290.us.us.us.epil"
  %indvars.iv4039.epil = phi i64 [ %indvars.iv.next4040.epil, %"for input_wrapper.s0.c.c290.us.us.us.epil" ], [ %indvars.iv4039.unr, %"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa" ]
  %epil.iter5853 = phi i64 [ %epil.iter5853.sub, %"for input_wrapper.s0.c.c290.us.us.us.epil" ], [ %xtraiter5852, %"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa" ]
  %5197 = add nsw i64 %indvars.iv4039.epil, %5148
  %5198 = shl nsw i64 %5197, 2
  %5199 = add nsw i64 %5198, %4519
  %5200 = getelementptr inbounds i8, i8* %12, i64 %5199
  %5201 = bitcast i8* %5200 to <4 x i8>*
  %5202 = load <4 x i8>, <4 x i8>* %5201, align 4, !tbaa !397
  %5203 = zext <4 x i8> %5202 to <4 x i16>
  %5204 = sub nsw <4 x i16> %5203, %4234
  %5205 = shl nuw nsw i64 %indvars.iv4039.epil, 2
  %5206 = add nsw i64 %5205, %5146
  %5207 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5206
  %5208 = bitcast i16* %5207 to <4 x i16>*
  store <4 x i16> %5204, <4 x i16>* %5208, align 8, !tbaa !399
  %indvars.iv.next4040.epil = add nuw nsw i64 %indvars.iv4039.epil, 1
  %epil.iter5853.sub = add i64 %epil.iter5853, -1
  %epil.iter5853.cmp.not = icmp eq i64 %epil.iter5853.sub, 0
  br i1 %epil.iter5853.cmp.not, label %"end for input_wrapper.s0.c.c291.loopexit.us.us.us", label %"for input_wrapper.s0.c.c290.us.us.us.epil", !llvm.loop !442

"end for input_wrapper.s0.c.c291.loopexit.us.us.us": ; preds = %"for input_wrapper.s0.c.c290.us.us.us.epil", %"end for input_wrapper.s0.c.c291.loopexit.us.us.us.unr-lcssa"
  %indvars.iv.next4042 = add nuw nsw i64 %indvars.iv4041, 1
  %.not2131.us.us.us = icmp eq i64 %indvars.iv4041, %5143
  br i1 %.not2131.us.us.us, label %"end for input_wrapper.s0.x.v21288.us.us", label %"for input_wrapper.s0.x.v21287.us.us.us"

"for convolved.s1.r19$y355.preheader.split.us.us": ; preds = %"for convolved.s1.r19$y355.preheader.us"
  br i1 %4193, label %"for convolved.s1.r19$y355.us.us.us", label %"consume convolved364.us", !prof !387

"for convolved.s1.r19$y355.us.us.us":             ; preds = %"for convolved.s1.r19$y355.preheader.split.us.us", %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us"
  %indvars.iv4058 = phi i64 [ %indvars.iv.next4059, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y355.preheader.split.us.us" ]
  %convolved1914.sroa.142.18.us.us.us = phi <8 x i32> [ %5282, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ], [ %4390, %"for convolved.s1.r19$y355.preheader.split.us.us" ]
  %convolved1914.sroa.102.18.us.us.us = phi <8 x i32> [ %5271, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ], [ %4387, %"for convolved.s1.r19$y355.preheader.split.us.us" ]
  %convolved1914.sroa.62.18.us.us.us = phi <8 x i32> [ %5260, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ], [ %4384, %"for convolved.s1.r19$y355.preheader.split.us.us" ]
  %convolved1914.sroa.0.43.us.us.us = phi <8 x i32> [ %5248, %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us" ], [ %4381, %"for convolved.s1.r19$y355.preheader.split.us.us" ]
  %5209 = mul nsw i64 %indvars.iv4058, %4309
  %5210 = trunc i64 %indvars.iv4058 to i32
  %5211 = mul i32 %5210, %dilation_y
  %5212 = sub i32 %5211, %t4158
  %t4294.us.us.us = mul i32 %5212, %4210
  %5213 = add i32 %t4286.us, %t4294.us.us.us
  br label %"for convolved.s1.r19$x358.us.us.us.us"

"for convolved.s1.r19$x358.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us", %"for convolved.s1.r19$y355.us.us.us"
  %indvars.iv4051 = phi i64 [ %indvars.iv.next4052, %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y355.us.us.us" ]
  %convolved1914.sroa.142.19.us.us.us.us = phi <8 x i32> [ %5282, %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us" ], [ %convolved1914.sroa.142.18.us.us.us, %"for convolved.s1.r19$y355.us.us.us" ]
  %convolved1914.sroa.102.19.us.us.us.us = phi <8 x i32> [ %5271, %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us" ], [ %convolved1914.sroa.102.18.us.us.us, %"for convolved.s1.r19$y355.us.us.us" ]
  %convolved1914.sroa.62.19.us.us.us.us = phi <8 x i32> [ %5260, %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us" ], [ %convolved1914.sroa.62.18.us.us.us, %"for convolved.s1.r19$y355.us.us.us" ]
  %convolved1914.sroa.0.44.us.us.us.us = phi <8 x i32> [ %5248, %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us" ], [ %convolved1914.sroa.0.43.us.us.us, %"for convolved.s1.r19$y355.us.us.us" ]
  %5214 = mul nsw i64 %indvars.iv4051, %4307
  %5215 = trunc i64 %indvars.iv4051 to i32
  %5216 = mul i32 %5215, %dilation_x
  %reass.add2683.us.us.us.us = add i32 %5213, %5216
  %reass.mul2684.us.us.us.us = mul i32 %reass.add2683.us.us.us.us, %4219
  %5217 = add nsw i64 %5214, %5209
  %5218 = trunc i64 %5217 to i32
  %t4304.us.us.us.us = add i32 %t4292.us, %5218
  %t4303.us.us.us.us = add i32 %t4291.us, %5218
  %t4302.us.us.us.us = add i32 %t4290.us, %5218
  %5219 = sext i32 %reass.mul2684.us.us.us.us to i64
  %5220 = sext i32 %t4302.us.us.us.us to i64
  %5221 = sext i32 %t4303.us.us.us.us to i64
  %5222 = sext i32 %t4304.us.us.us.us to i64
  br label %"for convolved.s1.r19$z.r115361.us.us.us.us"

"for convolved.s1.r19$z.r115361.us.us.us.us":     ; preds = %"for convolved.s1.r19$z.r115361.us.us.us.us", %"for convolved.s1.r19$x358.us.us.us.us"
  %indvars.iv4049 = phi i64 [ %indvars.iv.next4050, %"for convolved.s1.r19$z.r115361.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x358.us.us.us.us" ]
  %convolved1914.sroa.142.21.us.us.us.us = phi <8 x i32> [ %5282, %"for convolved.s1.r19$z.r115361.us.us.us.us" ], [ %convolved1914.sroa.142.19.us.us.us.us, %"for convolved.s1.r19$x358.us.us.us.us" ]
  %convolved1914.sroa.102.21.us.us.us.us = phi <8 x i32> [ %5271, %"for convolved.s1.r19$z.r115361.us.us.us.us" ], [ %convolved1914.sroa.102.19.us.us.us.us, %"for convolved.s1.r19$x358.us.us.us.us" ]
  %convolved1914.sroa.62.21.us.us.us.us = phi <8 x i32> [ %5260, %"for convolved.s1.r19$z.r115361.us.us.us.us" ], [ %convolved1914.sroa.62.19.us.us.us.us, %"for convolved.s1.r19$x358.us.us.us.us" ]
  %convolved1914.sroa.0.46.us.us.us.us = phi <8 x i32> [ %5248, %"for convolved.s1.r19$z.r115361.us.us.us.us" ], [ %convolved1914.sroa.0.44.us.us.us.us, %"for convolved.s1.r19$x358.us.us.us.us" ]
  %5223 = shl nuw nsw i64 %indvars.iv4049, 2
  %5224 = add nsw i64 %5223, %5219
  %5225 = getelementptr inbounds i16, i16* %input_wrapper270.us, i64 %5224
  %5226 = bitcast i16* %5225 to <1 x i32>*
  %5227 = load <1 x i32>, <1 x i32>* %5226, align 8, !tbaa !399
  %5228 = shufflevector <1 x i32> %5227, <1 x i32> undef, <8 x i32> zeroinitializer
  %5229 = bitcast <8 x i32> %5228 to <16 x i16>
  %5230 = shl nuw nsw i64 %indvars.iv4049, 3
  %5231 = add nsw i64 %5230, %4515
  %5232 = shl nsw i64 %5231, 2
  %5233 = add nsw i64 %5232, %5217
  %5234 = getelementptr inbounds i16, i16* %4250, i64 %5233
  %5235 = bitcast i16* %5234 to <16 x i16>*
  %5236 = load <16 x i16>, <16 x i16>* %5235, align 32, !tbaa !412
  %5237 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5229, <16 x i16> %5236)
  %5238 = add <8 x i32> %5237, %convolved1914.sroa.0.46.us.us.us.us
  %5239 = getelementptr inbounds i16, i16* %5225, i64 2
  %5240 = bitcast i16* %5239 to <1 x i32>*
  %5241 = load <1 x i32>, <1 x i32>* %5240, align 4, !tbaa !399
  %5242 = shufflevector <1 x i32> %5241, <1 x i32> undef, <8 x i32> zeroinitializer
  %5243 = bitcast <8 x i32> %5242 to <16 x i16>
  %5244 = getelementptr inbounds i16, i16* %5234, i64 16
  %5245 = bitcast i16* %5244 to <16 x i16>*
  %5246 = load <16 x i16>, <16 x i16>* %5245, align 32, !tbaa !412
  %5247 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5243, <16 x i16> %5246)
  %5248 = add <8 x i32> %5238, %5247
  %5249 = shl nuw nsw i64 %indvars.iv4049, 5
  %5250 = add nsw i64 %5249, %5220
  %5251 = getelementptr inbounds i16, i16* %4250, i64 %5250
  %5252 = bitcast i16* %5251 to <16 x i16>*
  %5253 = load <16 x i16>, <16 x i16>* %5252, align 32, !tbaa !412
  %5254 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5229, <16 x i16> %5253)
  %5255 = add <8 x i32> %5254, %convolved1914.sroa.62.21.us.us.us.us
  %5256 = getelementptr inbounds i16, i16* %5251, i64 16
  %5257 = bitcast i16* %5256 to <16 x i16>*
  %5258 = load <16 x i16>, <16 x i16>* %5257, align 32, !tbaa !412
  %5259 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5243, <16 x i16> %5258)
  %5260 = add <8 x i32> %5255, %5259
  %5261 = add nsw i64 %5249, %5221
  %5262 = getelementptr inbounds i16, i16* %4250, i64 %5261
  %5263 = bitcast i16* %5262 to <16 x i16>*
  %5264 = load <16 x i16>, <16 x i16>* %5263, align 32, !tbaa !412
  %5265 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5229, <16 x i16> %5264)
  %5266 = add <8 x i32> %5265, %convolved1914.sroa.102.21.us.us.us.us
  %5267 = getelementptr inbounds i16, i16* %5262, i64 16
  %5268 = bitcast i16* %5267 to <16 x i16>*
  %5269 = load <16 x i16>, <16 x i16>* %5268, align 32, !tbaa !412
  %5270 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5243, <16 x i16> %5269)
  %5271 = add <8 x i32> %5266, %5270
  %5272 = add nsw i64 %5249, %5222
  %5273 = getelementptr inbounds i16, i16* %4250, i64 %5272
  %5274 = bitcast i16* %5273 to <16 x i16>*
  %5275 = load <16 x i16>, <16 x i16>* %5274, align 32, !tbaa !412
  %5276 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5229, <16 x i16> %5275)
  %5277 = add <8 x i32> %5276, %convolved1914.sroa.142.21.us.us.us.us
  %5278 = getelementptr inbounds i16, i16* %5273, i64 16
  %5279 = bitcast i16* %5278 to <16 x i16>*
  %5280 = load <16 x i16>, <16 x i16>* %5279, align 32, !tbaa !412
  %5281 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %5243, <16 x i16> %5280)
  %5282 = add <8 x i32> %5277, %5281
  %indvars.iv.next4050 = add nuw nsw i64 %indvars.iv4049, 1
  %.not2112.us.us.us.us = icmp eq i64 %indvars.iv.next4050, %4302
  br i1 %.not2112.us.us.us.us, label %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r115361.us.us.us.us"

"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us": ; preds = %"for convolved.s1.r19$z.r115361.us.us.us.us"
  %indvars.iv.next4052 = add nuw nsw i64 %indvars.iv4051, 1
  %.not2111.us.us.us.us = icmp eq i64 %indvars.iv.next4052, %4308
  br i1 %.not2111.us.us.us.us, label %"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x358.us.us.us.us"

"end for convolved.s1.r19$x359.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115362.loopexit.us.us.us.us"
  %indvars.iv.next4059 = add nuw nsw i64 %indvars.iv4058, 1
  %.not2110.us.us.us = icmp eq i64 %indvars.iv.next4059, %4310
  br i1 %.not2110.us.us.us, label %"consume convolved364.us", label %"for convolved.s1.r19$y355.us.us.us"

next_bb263:                                       ; preds = %next_bb159
  %a195 = ashr i32 %3, 3
  %5283 = icmp sgt i32 %3, 7
  %t4340 = select i1 %5283, i32 %a195, i32 0
  %t4341 = add nsw i32 %6, 1
  %a196 = ashr i32 %t4341, 2
  %5284 = icmp sgt i32 %6, 2
  %t4342 = select i1 %5284, i32 %a196, i32 0
  %a197 = ashr i32 %t4341, 3
  %5285 = icmp sgt i32 %6, 6
  %t4343 = select i1 %5285, i32 %a197, i32 0
  %5286 = add nsw i32 %10, -1
  %t4344 = mul nsw i32 %5286, %dilation_y
  %a203 = ashr i32 %t4341, 1
  %5287 = icmp eq i32 %14, 4
  %5288 = icmp eq i32 %16, 4
  %t4346 = and i1 %5287, %5288
  %t4347 = add nsw i32 %6, -1
  %t4348 = ashr i32 %t4347, 1
  %5289 = shl nsw i32 %t4348, 2
  %b200 = or i32 %5289, 3
  %t4350 = icmp slt i32 %dilation_y, 0
  %t4307 = select i1 %t4350, i32 %t4344, i32 0
  %t4306 = select i1 %t4350, i32 0, i32 %t4344
  %5290 = icmp slt i32 %14, 16
  %5291 = icmp slt i32 %14, 8
  %5292 = icmp slt i32 %14, 4
  %5293 = icmp slt i32 %a203, 1
  %5294 = select i1 %5293, i32 %a203, i32 1
  %5295 = add nsw i32 %5294, %t4348
  %5296 = select i1 %5292, i32 %a203, i32 %5295
  %5297 = icmp slt i32 %a203, 2
  %5298 = select i1 %5297, i32 %a203, i32 2
  %5299 = and i32 %t4348, -2
  %5300 = add nsw i32 %5298, %5299
  %5301 = select i1 %5291, i32 %5296, i32 %5300
  %5302 = icmp slt i32 %a203, 4
  %5303 = select i1 %5302, i32 %a203, i32 4
  %5304 = and i32 %t4348, -4
  %5305 = add nsw i32 %5303, %5304
  %a199 = select i1 %5290, i32 %5301, i32 %5305
  %5306 = icmp sgt i32 %a203, %a199
  %5307 = select i1 %5306, i32 %a199, i32 %a203
  %5308 = shl nsw i32 %5307, 2
  %5309 = add nsw i32 %5308, -1
  %a198 = select i1 %t4346, i32 %b200, i32 %5309
  %5310 = icmp sgt i32 %a198, %b200
  %a215 = select i1 %5310, i32 %a198, i32 %b200
  %5311 = icmp sgt i32 %6, 0
  %t4328 = select i1 %5311, i32 %a203, i32 0
  %5312 = add nsw i32 %6, 7
  %5313 = ashr i32 %5312, 3
  %t4322 = sub nsw i32 %5313, %t4343
  %5314 = add nsw i32 %6, 3
  %5315 = ashr i32 %5314, 2
  %t4326 = sub nsw i32 %5315, %t4342
  %5316 = add nsw i32 %3, 7
  %5317 = ashr i32 %5316, 3
  %t4331 = sub nsw i32 %5317, %t4340
  %5318 = select i1 %t3704, i32 %t3705, i32 0
  %5319 = select i1 %t3706, i32 %25, i32 1
  %5320 = add i32 %24, -1
  %5321 = add i32 %5320, %5319
  %5322 = mul nsw i32 %5321, %stride_x
  %b210 = add nsw i32 %5322, %5318
  %5323 = icmp sgt i32 %20, 0
  br i1 %5323, label %"for output.s0.b.rebased365.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased365.preheader":           ; preds = %next_bb263
  %5324 = mul nsw i32 %16, %15
  %5325 = add nsw i32 %25, -1
  %5326 = select i1 %t3706, i32 0, i32 %5325
  %5327 = add nsw i32 %5326, %24
  %5328 = mul nsw i32 %5327, %stride_x
  %5329 = select i1 %t3704, i32 0, i32 %t3705
  %b208 = add nsw i32 %5328, %5329
  %a207 = sub i32 %b208, %b210
  %a209 = ashr i32 %a207, 3
  %5330 = add nsw i32 %a207, 1
  %a204 = ashr i32 %5330, 3
  %5331 = icmp sgt i32 %a207, 6
  %t4369 = select i1 %5331, i32 %a204, i32 0
  %.neg = mul i32 %29, %27
  %.neg2648 = mul i32 %26, %24
  %.neg2649 = mul i32 %30, %19
  %5332 = add i32 %t3702, %5324
  %5333 = add i32 %5332, %t3703
  %.neg2653 = mul i32 %15, -4
  %5334 = icmp sgt i32 %a209, -1
  %5335 = select i1 %5334, i32 %a209, i32 -1
  %5336 = sub nsw i32 %5335, %t4369
  %5337 = icmp sgt i32 %28, 0
  %5338 = icmp sgt i32 %a207, -1
  %5339 = add nsw i32 %a215, 1
  %t4407 = shl nsw i32 %a203, 2
  %5340 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %5341 = shufflevector <16 x i8> %5340, <16 x i8> undef, <16 x i32> zeroinitializer
  %5342 = zext <16 x i8> %5341 to <16 x i16>
  %5343 = icmp sgt i32 %t4322, 0
  %5344 = insertelement <16 x i32> undef, i32 %t4407, i32 0
  %5345 = shufflevector <16 x i32> %5344, <16 x i32> undef, <8 x i32> zeroinitializer
  %5346 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %5347 = shufflevector <8 x i8> %5346, <8 x i8> undef, <8 x i32> zeroinitializer
  %5348 = zext <8 x i8> %5347 to <8 x i16>
  %5349 = icmp sgt i32 %t4326, 0
  %5350 = insertelement <8 x i32> undef, i32 %t4407, i32 0
  %5351 = shufflevector <8 x i32> %5350, <8 x i32> undef, <8 x i32> zeroinitializer
  %5352 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %5353 = shufflevector <4 x i8> %5352, <4 x i8> undef, <4 x i32> zeroinitializer
  %5354 = zext <4 x i8> %5353 to <4 x i16>
  %5355 = zext i8 %input_zero to i16
  %t4373 = mul nsw i32 %5330, %5339
  %.neg2654 = sub i32 %.neg2653, %t3702
  %t4318.neg = sub i32 %.neg2654, %t3703
  %5356 = shl i32 %5339, 1
  %5357 = mul nsw i32 %a215, 7
  %5358 = mul nsw i32 %a215, 6
  %5359 = mul nsw i32 %a215, 5
  %5360 = shl nsw i32 %a215, 2
  %5361 = mul nsw i32 %a215, 3
  %5362 = shl nsw i32 %a215, 1
  %5363 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %5364 = shufflevector <32 x i8> %5363, <32 x i8> undef, <32 x i32> zeroinitializer
  %5365 = zext <32 x i8> %5364 to <32 x i16>
  %5366 = icmp sgt i32 %5336, -1
  %reass.add2661 = add i32 %.neg, %.neg2648
  %reass.add2662 = add i32 %reass.add2661, %.neg2649
  %5367 = icmp sgt i32 %10, 0
  %5368 = icmp sgt i32 %8, 0
  %5369 = bitcast i8* %4 to i16*
  %5370 = insertelement <8 x i32> undef, i32 %output_multiplier, i32 0
  %5371 = shufflevector <8 x i32> %5370, <8 x i32> undef, <8 x i32> zeroinitializer
  %5372 = sext <8 x i32> %5371 to <8 x i64>
  %5373 = insertelement <8 x i32> undef, i32 %output_shift, i32 0
  %5374 = shufflevector <8 x i32> %5373, <8 x i32> undef, <8 x i32> zeroinitializer
  %5375 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %5374, i1 false) #11
  %5376 = icmp sgt <8 x i32> %5374, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %5377 = icmp sgt i32 %output_shift, 0
  %5378 = select i1 %5377, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32> zeroinitializer
  %5379 = add nsw i32 %output_shift, -1
  %5380 = insertelement <8 x i32> undef, i32 %5379, i32 0
  %5381 = shufflevector <8 x i32> %5380, <8 x i32> undef, <8 x i32> zeroinitializer
  %5382 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %5381, i1 false) #11
  %5383 = icmp sgt <8 x i32> %5381, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %5384 = zext i8 %output_zero to i16
  %5385 = insertelement <8 x i16> undef, i16 %5384, i32 0
  %5386 = shufflevector <8 x i16> %5385, <8 x i16> undef, <8 x i32> zeroinitializer
  %5387 = insertelement <8 x i8> undef, i8 %output_max, i32 0
  %5388 = shufflevector <8 x i8> %5387, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5389 = insertelement <8 x i8> undef, i8 %output_min, i32 0
  %5390 = shufflevector <8 x i8> %5389, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5391 = icmp sgt i32 %t4331, 0
  %5392 = sext i32 %a195 to i64
  %5393 = insertelement <8 x i32> undef, i32 %3, i32 0
  %5394 = shufflevector <8 x i32> %5393, <8 x i32> undef, <8 x i32> zeroinitializer
  br i1 %5337, label %"for output.s0.b.rebased365.us.preheader", label %after_bb1, !prof !387

"for output.s0.b.rebased365.us.preheader":        ; preds = %"for output.s0.b.rebased365.preheader"
  %5395 = icmp sgt i32 %a215, -1
  %t4555 = select i1 %5395, i32 %a215, i32 -1
  %5396 = add nsw i32 %t4555, 1
  %5397 = zext i32 %5396 to i64
  %t4557 = shl nuw nsw i64 %5397, 1
  %5398 = select i1 %5338, i32 %5330, i32 0
  %t4556 = zext i32 %5398 to i64
  %t4559 = mul i64 %t4557, %t4556
  %5399 = zext i32 %t4343 to i64
  %5400 = sext i32 %b210 to i64
  %5401 = sext i32 %16 to i64
  %5402 = zext i32 %a207 to i64
  %5403 = sext i32 %t4343 to i64
  %5404 = zext i32 %t4322 to i64
  %5405 = sext i32 %18 to i64
  %5406 = zext i32 %t4342 to i64
  %5407 = sext i32 %t4342 to i64
  %5408 = zext i32 %t4326 to i64
  %5409 = zext i32 %t4328 to i64
  %5410 = zext i32 %t4407 to i64
  %5411 = zext i32 %a203 to i64
  %5412 = zext i32 %t4369 to i64
  %5413 = sext i32 %5339 to i64
  %5414 = zext i32 %5336 to i64
  %5415 = sext i32 %t4373 to i64
  %5416 = sext i32 %9 to i64
  %5417 = zext i32 %8 to i64
  %5418 = sext i32 %11 to i64
  %5419 = zext i32 %10 to i64
  %5420 = zext i32 %t4340 to i64
  %5421 = sext i32 %t4340 to i64
  %5422 = sext i32 %46 to i64
  %5423 = sext i32 %7 to i64
  %5424 = zext i32 %t4331 to i64
  %5425 = zext i32 %24 to i64
  %5426 = zext i32 %stride_x to i64
  %5427 = zext i32 %25 to i64
  %5428 = sub i32 %t4306, %t4307
  %5429 = sext i32 %27 to i64
  %5430 = sext i32 %stride_y to i64
  %5431 = sext i32 %t4307 to i64
  %5432 = zext i32 %19 to i64
  %zext3986 = zext i32 %20 to i64
  %zext = zext i32 %28 to i64
  %a217.us = add nsw i32 %5428, 1
  %5433 = icmp sgt i32 %5428, -1
  %5434 = select i1 %5433, i32 %a217.us, i32 0
  %t4558.us = zext i32 %5434 to i64
  %5435 = mul i64 %t4559, %t4558.us
  %5436 = add i64 %5435, 6
  %5437 = zext i32 %5428 to i64
  %5438 = zext i32 %5428 to i64
  %5439 = zext i32 %5428 to i64
  %5440 = zext i32 %5428 to i64
  %5441 = zext i32 %5428 to i64
  %5442 = add nsw i64 %5399, -1
  %5443 = add nsw i64 %5399, -1
  %5444 = add nsw i64 %5406, -1
  %5445 = add nsw i64 %5406, -1
  %5446 = add nsw i64 %5409, -1
  %5447 = and i64 %5410, 4294967232
  %5448 = add nsw i64 %5447, -64
  %5449 = lshr exact i64 %5448, 6
  %5450 = add nuw nsw i64 %5449, 1
  %5451 = add nsw i64 %5411, -1
  %5452 = or i32 %5428, %a207
  %5453 = icmp slt i32 %5452, 0
  %xtraiter5781 = and i64 %5399, 3
  %5454 = icmp ult i64 %5442, 3
  %unroll_iter5784 = and i64 %5399, 4294967292
  %lcmp.mod5783.not = icmp eq i64 %xtraiter5781, 0
  %xtraiter5786 = and i64 %5399, 3
  %5455 = icmp ult i64 %5443, 3
  %unroll_iter5789 = and i64 %5399, 4294967292
  %lcmp.mod5788.not = icmp eq i64 %xtraiter5786, 0
  %xtraiter5791 = and i64 %5406, 3
  %5456 = icmp ult i64 %5444, 3
  %unroll_iter5794 = and i64 %5406, 4294967292
  %lcmp.mod5793.not = icmp eq i64 %xtraiter5791, 0
  %xtraiter5796 = and i64 %5406, 3
  %5457 = icmp ult i64 %5445, 3
  %unroll_iter5799 = and i64 %5406, 4294967292
  %lcmp.mod5798.not = icmp eq i64 %xtraiter5796, 0
  %brmerge5026.demorgan = and i1 %5338, %5311
  %xtraiter5801 = and i64 %5409, 3
  %5458 = icmp ult i64 %5446, 3
  %unroll_iter5804 = and i64 %5409, 4294967292
  %lcmp.mod5803.not = icmp eq i64 %xtraiter5801, 0
  %brmerge5023.demorgan = and i1 %5338, %5311
  %min.iters.check5222 = icmp ult i32 %t4407, 8
  %min.iters.check5224 = icmp ult i32 %t4407, 64
  %n.vec5227 = and i64 %5410, 4294967232
  %broadcast.splatinsert = insertelement <16 x i16> poison, i16 %5355, i32 0
  %broadcast.splat = shufflevector <16 x i16> %broadcast.splatinsert, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5235 = insertelement <16 x i16> poison, i16 %5355, i32 0
  %broadcast.splat5236 = shufflevector <16 x i16> %broadcast.splatinsert5235, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5237 = insertelement <16 x i16> poison, i16 %5355, i32 0
  %broadcast.splat5238 = shufflevector <16 x i16> %broadcast.splatinsert5237, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5239 = insertelement <16 x i16> poison, i16 %5355, i32 0
  %broadcast.splat5240 = shufflevector <16 x i16> %broadcast.splatinsert5239, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter5806 = and i64 %5450, 1
  %5459 = icmp eq i64 %5448, 0
  %unroll_iter5808 = and i64 %5450, 576460752303423486
  %lcmp.mod5807.not = icmp eq i64 %xtraiter5806, 0
  %cmp.n5230 = icmp eq i64 %n.vec5227, %5410
  %n.vec.remaining = and i64 %5410, 56
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  %n.vec5242 = and i64 %5410, 4294967288
  %broadcast.splatinsert5248 = insertelement <8 x i16> poison, i16 %5355, i32 0
  %broadcast.splat5249 = shufflevector <8 x i16> %broadcast.splatinsert5248, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5246 = icmp eq i64 %n.vec5242, %5410
  %xtraiter5810 = and i64 %5411, 3
  %5460 = icmp ult i64 %5451, 3
  %unroll_iter5813 = and i64 %5411, 4294967292
  %lcmp.mod5812.not = icmp eq i64 %xtraiter5810, 0
  %brmerge5020.demorgan = and i1 %5367, %5368
  %brmerge5031.demorgan = and i1 %brmerge5020.demorgan, %5311
  %xtraiter5815 = and i64 %5411, 1
  %5461 = icmp eq i32 %a203, 1
  %unroll_iter5817 = and i64 %5411, 4294967294
  %lcmp.mod5816.not = icmp eq i64 %xtraiter5815, 0
  %brmerge5017.demorgan = and i1 %5367, %5368
  %brmerge5033.demorgan = and i1 %brmerge5017.demorgan, %5311
  %xtraiter5819 = and i64 %5411, 1
  %5462 = icmp eq i32 %a203, 1
  %unroll_iter5821 = and i64 %5411, 4294967294
  %lcmp.mod5820.not = icmp eq i64 %xtraiter5819, 0
  br label %"for output.s0.b.rebased365.us"

"for output.s0.b.rebased365.us":                  ; preds = %"for output.s0.b.rebased365.us.preheader", %"end for output.s0.y.rebased369.loopexit.us"
  %indvars.iv3982 = phi i64 [ 0, %"for output.s0.b.rebased365.us.preheader" ], [ %indvars.iv.next3983, %"end for output.s0.y.rebased369.loopexit.us" ]
  %convolved1914.sroa.0.49.us = phi <8 x i32> [ undef, %"for output.s0.b.rebased365.us.preheader" ], [ %convolved1914.sroa.0.53.us, %"end for output.s0.y.rebased369.loopexit.us" ]
  %5463 = add nuw i64 %indvars.iv3982, %5432
  %5464 = trunc i64 %5463 to i32
  %5465 = mul i32 %21, %5464
  %t4364.us = sub i32 %5465, %5333
  %t4355.us = add i32 %t4318.neg, %5465
  %5466 = sext i32 %t4364.us to i64
  %5467 = trunc i64 %5463 to i32
  %5468 = mul i32 %30, %5467
  br label %"for output.s0.y.rebased368.us"

"for output.s0.y.rebased368.us":                  ; preds = %"for output.s0.b.rebased365.us", %call_destructor.exit2432.us
  %indvars.iv3978 = phi i64 [ 0, %"for output.s0.b.rebased365.us" ], [ %indvars.iv.next3979, %call_destructor.exit2432.us ]
  %convolved1914.sroa.0.50.us = phi <8 x i32> [ %convolved1914.sroa.0.49.us, %"for output.s0.b.rebased365.us" ], [ %convolved1914.sroa.0.53.us, %call_destructor.exit2432.us ]
  %5469 = add nsw i64 %indvars.iv3978, %5429
  %5470 = mul nsw i64 %5469, %5430
  %5471 = add nsw i64 %5470, %5431
  %5472 = call i8* @halide_malloc(i8* null, i64 %5436)
  %input_wrapper371.us = bitcast i8* %5472 to i16*
  br i1 %t4346, label %then_bb374.us, label %next_bb375.us

next_bb375.us:                                    ; preds = %"for output.s0.y.rebased368.us"
  br i1 %5290, label %next_bb395.us, label %then_bb394.us

then_bb394.us:                                    ; preds = %next_bb375.us
  br i1 %5453, label %"consume input_wrapper448.us", label %"for input_wrapper.s0.y.rebased396.us.us", !prof !402

next_bb395.us:                                    ; preds = %next_bb375.us
  br i1 %5291, label %next_bb412.us, label %then_bb411.us

then_bb411.us:                                    ; preds = %next_bb395.us
  br i1 %5433, label %"for input_wrapper.s0.y.rebased413.us", label %"consume input_wrapper448.us", !prof !387

"for input_wrapper.s0.y.rebased413.us":           ; preds = %then_bb411.us, %"end for input_wrapper.s0.x.rebased417.us"
  %indvars.iv3917 = phi i64 [ %indvars.iv.next3918, %"end for input_wrapper.s0.x.rebased417.us" ], [ 0, %then_bb411.us ]
  %5473 = trunc i64 %indvars.iv3917 to i32
  %t4418.us = mul i32 %5330, %5473
  %5474 = add nsw i64 %indvars.iv3917, %5471
  %5475 = mul nsw i64 %5474, %5405
  %5476 = add nsw i64 %5475, %5466
  br i1 %5338, label %"for input_wrapper.s0.x.rebased416.preheader.us", label %"end for input_wrapper.s0.x.rebased417.us", !prof !387

"end for input_wrapper.s0.x.rebased417.us":       ; preds = %"end for input_wrapper.s0.c.c420.loopexit.us2976.us", %"end for input_wrapper.s0.c.c.rebased423.loopexit.us.us", %"for input_wrapper.s0.x.rebased416.preheader.split.us3028", %"for input_wrapper.s0.y.rebased413.us"
  %indvars.iv.next3918 = add nuw nsw i64 %indvars.iv3917, 1
  %.not2090.us = icmp eq i64 %indvars.iv3917, %5438
  br i1 %.not2090.us, label %"consume input_wrapper448.us", label %"for input_wrapper.s0.y.rebased413.us"

next_bb412.us:                                    ; preds = %next_bb395.us
  br i1 %5292, label %next_bb429.us, label %then_bb428.us

then_bb428.us:                                    ; preds = %next_bb412.us
  br i1 %5433, label %"for input_wrapper.s0.y.rebased430.us", label %"consume input_wrapper448.us", !prof !387

"for input_wrapper.s0.y.rebased430.us":           ; preds = %then_bb428.us, %"end for input_wrapper.s0.x.rebased434.us"
  %indvars.iv3925 = phi i64 [ %indvars.iv.next3926, %"end for input_wrapper.s0.x.rebased434.us" ], [ 0, %then_bb428.us ]
  %5477 = trunc i64 %indvars.iv3925 to i32
  %t4426.us = mul i32 %5330, %5477
  %5478 = add nsw i64 %indvars.iv3925, %5471
  %5479 = mul nsw i64 %5478, %5405
  %5480 = add nsw i64 %5479, %5466
  br i1 %brmerge5026.demorgan, label %"for input_wrapper.s0.x.rebased433.us.us", label %"end for input_wrapper.s0.x.rebased434.us", !prof !407

"end for input_wrapper.s0.x.rebased434.us":       ; preds = %"end for input_wrapper.s0.c.c437.loopexit.us.us", %"for input_wrapper.s0.y.rebased430.us"
  %indvars.iv.next3926 = add nuw nsw i64 %indvars.iv3925, 1
  %.not2087.us = icmp eq i64 %indvars.iv3925, %5439
  br i1 %.not2087.us, label %"consume input_wrapper448.us", label %"for input_wrapper.s0.y.rebased430.us"

next_bb429.us:                                    ; preds = %next_bb412.us
  br i1 %5433, label %"for input_wrapper.s0.y.rebased439.us", label %"consume input_wrapper448.us", !prof !387

"for input_wrapper.s0.y.rebased439.us":           ; preds = %next_bb429.us, %"end for input_wrapper.s0.x.rebased443.us"
  %indvars.iv3933 = phi i64 [ %indvars.iv.next3934, %"end for input_wrapper.s0.x.rebased443.us" ], [ 0, %next_bb429.us ]
  %5481 = trunc i64 %indvars.iv3933 to i32
  %t4433.us = mul i32 %5330, %5481
  %5482 = add nsw i64 %indvars.iv3933, %5471
  %5483 = mul nsw i64 %5482, %5405
  %5484 = add nsw i64 %5483, %5466
  br i1 %brmerge5023.demorgan, label %iter.check, label %"end for input_wrapper.s0.x.rebased443.us", !prof !407

"end for input_wrapper.s0.x.rebased443.us":       ; preds = %"end for input_wrapper.s0.c446.loopexit.us.us", %"for input_wrapper.s0.y.rebased439.us"
  %indvars.iv.next3934 = add nuw nsw i64 %indvars.iv3933, 1
  %.not2084.us = icmp eq i64 %indvars.iv3933, %5440
  br i1 %.not2084.us, label %"consume input_wrapper448.us", label %"for input_wrapper.s0.y.rebased439.us"

then_bb374.us:                                    ; preds = %"for output.s0.y.rebased368.us"
  br i1 %5433, label %"for input_wrapper.s0.y.rebased376.us", label %"consume input_wrapper448.us", !prof !387

"for input_wrapper.s0.y.rebased376.us":           ; preds = %then_bb374.us, %"end for input_wrapper.s0.x.x.rebased386.us"
  %indvars.iv3949 = phi i64 [ %indvars.iv.next3950, %"end for input_wrapper.s0.x.x.rebased386.us" ], [ 0, %then_bb374.us ]
  %5485 = mul nsw i64 %indvars.iv3949, %5415
  %5486 = add nsw i64 %indvars.iv3949, %5471
  %5487 = trunc i64 %5486 to i32
  %5488 = mul i32 %18, %5487
  %t4382.us = add i32 %t4355.us, %5488
  br i1 %5331, label %"for input_wrapper.s0.x.x379.preheader.us", label %"end for input_wrapper.s0.x.x380.us", !prof !387

"end for input_wrapper.s0.x.x380.us":             ; preds = %"end for input_wrapper.s0.c.c383.loopexit.us.us", %"for input_wrapper.s0.y.rebased376.us"
  br i1 %5366, label %"for input_wrapper.s0.x.x.rebased385.preheader.us", label %"end for input_wrapper.s0.x.x.rebased386.us", !prof !387

"end for input_wrapper.s0.x.x.rebased386.us":     ; preds = %"end for input_wrapper.s0.x.v21389.us.us", %"for input_wrapper.s0.x.x379.preheader.us", %"for input_wrapper.s0.x.x.rebased385.preheader.us", %"end for input_wrapper.s0.x.x380.us"
  %indvars.iv.next3950 = add nuw nsw i64 %indvars.iv3949, 1
  %.not2100.us = icmp eq i64 %indvars.iv3949, %5441
  br i1 %.not2100.us, label %"consume input_wrapper448.us", label %"for input_wrapper.s0.y.rebased376.us"

"consume input_wrapper448.us":                    ; preds = %"end for input_wrapper.s0.x.rebased400.loopexit.us.us", %"end for input_wrapper.s0.x.rebased417.us", %"end for input_wrapper.s0.x.rebased434.us", %"end for input_wrapper.s0.x.rebased443.us", %"end for input_wrapper.s0.x.x.rebased386.us", %then_bb394.us, %then_bb374.us, %next_bb429.us, %then_bb428.us, %then_bb411.us
  br i1 %48, label %"for output.s0.x.xo449.preheader.us", label %"end for output.s0.x.xo450.us", !prof !387

"for output.s0.x.xo449.us":                       ; preds = %"for output.s0.x.xo449.preheader.us", %"end for output.s0.c.co.rebased.us"
  %indvars.iv3974 = phi i64 [ 0, %"for output.s0.x.xo449.preheader.us" ], [ %indvars.iv.next3975, %"end for output.s0.c.co.rebased.us" ]
  %convolved1914.sroa.0.52.us = phi <8 x i32> [ %convolved1914.sroa.0.50.us, %"for output.s0.x.xo449.preheader.us" ], [ %convolved1914.sroa.0.63.us, %"end for output.s0.c.co.rebased.us" ]
  %5489 = add nuw i64 %indvars.iv3974, %5425
  %5490 = mul i64 %5489, %5426
  %5491 = sub i64 %5490, %5400
  %5492 = trunc i64 %5489 to i32
  %5493 = mul i32 %26, %5492
  %t4438.us = add i32 %t4366.us, %5493
  %t4441.us = sub i32 %t4438.us, %reass.add2662
  br i1 %5283, label %"for output.s0.c.co452.preheader.us", label %"end for output.s0.c.co453.us", !prof !387

"for output.s0.c.co452.us":                       ; preds = %"for output.s0.c.co452.preheader.us", %"consume convolved468.us"
  %indvars.iv3960 = phi i64 [ 0, %"for output.s0.c.co452.preheader.us" ], [ %indvars.iv.next3961, %"consume convolved468.us" ]
  %convolved1914.sroa.0.54.us = phi <8 x i32> [ %convolved1914.sroa.0.52.us, %"for output.s0.c.co452.preheader.us" ], [ %convolved1914.sroa.0.61.us, %"consume convolved468.us" ]
  %5494 = trunc i64 %indvars.iv3960 to i32
  %5495 = shl nsw i32 %5494, 3
  %5496 = icmp sgt i32 %3, %5495
  %5497 = shl nuw nsw i64 %indvars.iv3960, 3
  br i1 %5496, label %"produce convolved458.us", label %"consume convolved468.us"

"produce convolved458.us":                        ; preds = %"for output.s0.c.co452.us"
  %5498 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %5497
  %5499 = bitcast i32* %5498 to <8 x i32>*
  %5500 = load <8 x i32>, <8 x i32>* %5499, align 32, !tbaa !391
  br i1 %brmerge5031.demorgan, label %"for convolved.s1.r19$y459.us.us.us.preheader", label %"consume convolved468.us", !prof !407

"consume convolved468.us":                        ; preds = %"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us", %"for output.s0.c.co452.us", %"produce convolved458.us"
  %convolved1914.sroa.0.61.us = phi <8 x i32> [ %5500, %"produce convolved458.us" ], [ %convolved1914.sroa.0.54.us, %"for output.s0.c.co452.us" ], [ %.lcssa5778, %"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us" ]
  %5501 = sext <8 x i32> %convolved1914.sroa.0.61.us to <8 x i64>
  %5502 = mul nsw <8 x i64> %5501, %5372
  %5503 = ashr <8 x i64> %5502, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5504 = add nsw <8 x i64> %5503, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a223.us = ashr <8 x i64> %5504, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5505 = shufflevector <8 x i64> %a223.us, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5506 = icmp slt <4 x i64> %5505, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5507 = shufflevector <8 x i64> %a223.us, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5508 = icmp slt <4 x i64> %5507, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5509 = select <4 x i1> %5506, <4 x i64> %5505, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5510 = select <4 x i1> %5508, <4 x i64> %5507, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5511 = icmp sgt <4 x i64> %5509, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5512 = icmp sgt <4 x i64> %5510, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5513 = select <4 x i1> %5511, <4 x i64> %5509, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5514 = select <4 x i1> %5512, <4 x i64> %5510, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5515 = shufflevector <4 x i64> %5513, <4 x i64> %5514, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4562.us = trunc <8 x i64> %5515 to <8 x i32>
  %5516 = ashr <8 x i32> %t4562.us, %5375
  %5517 = shl <8 x i32> %t4562.us, %5375
  %5518 = select <8 x i1> %5376, <8 x i32> %5516, <8 x i32> %5517
  %5519 = lshr <8 x i32> %t4562.us, %5382
  %5520 = shl <8 x i32> %t4562.us, %5382
  %5521 = select <8 x i1> %5383, <8 x i32> %5519, <8 x i32> %5520
  %5522 = and <8 x i32> %5521, %5378
  %5523 = add nsw <8 x i32> %5522, %5518
  %5524 = shufflevector <8 x i32> %5523, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5525 = shufflevector <8 x i32> %5523, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5526 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %5524, <4 x i32> %5525) #11
  %5527 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %5526, <8 x i16> %5386)
  %5528 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %5527, <8 x i16> undef) #11
  %5529 = shufflevector <16 x i8> %5528, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5530 = icmp ugt <16 x i8> %5388, %5529
  %5531 = select <16 x i1> %5530, <16 x i8> %5529, <16 x i8> %5388
  %5532 = shufflevector <16 x i8> %5531, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5533 = icmp ugt <16 x i8> %5532, %5390
  %5534 = select <16 x i1> %5533, <16 x i8> %5532, <16 x i8> %5390
  %5535 = shufflevector <16 x i8> %5534, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5536 = add nsw i64 %5497, %5638
  %5537 = getelementptr inbounds i8, i8* %22, i64 %5536
  %5538 = bitcast i8* %5537 to <8 x i8>*
  store <8 x i8> %5535, <8 x i8>* %5538, align 1, !tbaa !414
  %indvars.iv.next3961 = add nuw nsw i64 %indvars.iv3960, 1
  %.not2080.us = icmp eq i64 %indvars.iv.next3961, %5420
  br i1 %.not2080.us, label %"end for output.s0.c.co453.us", label %"for output.s0.c.co452.us"

"end for output.s0.c.co453.us":                   ; preds = %"consume convolved468.us", %"for output.s0.x.xo449.us"
  %convolved1914.sroa.0.55.us = phi <8 x i32> [ %convolved1914.sroa.0.52.us, %"for output.s0.x.xo449.us" ], [ %convolved1914.sroa.0.61.us, %"consume convolved468.us" ]
  br i1 %5391, label %"for output.s0.c.co.rebased.preheader.us", label %"end for output.s0.c.co.rebased.us", !prof !387

"for output.s0.c.co.rebased.us":                  ; preds = %"for output.s0.c.co.rebased.preheader.us", %after_bb489.us
  %indvars.iv3970 = phi i64 [ 0, %"for output.s0.c.co.rebased.preheader.us" ], [ %indvars.iv.next3971, %after_bb489.us ]
  %convolved1914.sroa.0.62.us = phi <8 x i32> [ %convolved1914.sroa.0.55.us, %"for output.s0.c.co.rebased.preheader.us" ], [ %convolved1914.sroa.0.69.us, %after_bb489.us ]
  %5539 = add nsw i64 %indvars.iv3970, %5421
  %5540 = icmp sgt i64 %5539, %5422
  %5541 = trunc i64 %5539 to i32
  %5542 = shl nsw i32 %5541, 3
  %5543 = icmp sle i32 %3, %5542
  %.not2223.us = or i1 %5540, %5543
  %5544 = add nsw i64 %indvars.iv3970, %5392
  %.not2076.us = icmp sgt i64 %5544, %5422
  %or.cond.us = or i1 %.not2076.us, %.not2223.us
  br i1 %or.cond.us, label %"consume convolved488.us", label %then_bb474.us

then_bb474.us:                                    ; preds = %"for output.s0.c.co.rebased.us"
  %5545 = shl nsw i64 %5544, 3
  %5546 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0", i64 %5545
  %5547 = bitcast i32* %5546 to <8 x i32>*
  %5548 = load <8 x i32>, <8 x i32>* %5547, align 32, !tbaa !391
  %5549 = mul nsw i64 %5544, %5423
  br i1 %brmerge5033.demorgan, label %"for convolved.s1.r19$y479.us.us.us", label %"consume convolved488.us", !prof !407

"consume convolved488.us":                        ; preds = %"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us", %then_bb474.us, %"for output.s0.c.co.rebased.us"
  %convolved1914.sroa.0.69.us = phi <8 x i32> [ %convolved1914.sroa.0.62.us, %"for output.s0.c.co.rebased.us" ], [ %5548, %then_bb474.us ], [ %.lcssa5779, %"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us" ]
  %5550 = add nsw i32 %5542, 8
  %.not2073.us = icmp sgt i32 %5550, %3
  br i1 %.not2073.us, label %next_bb491.us, label %then_bb490.us

then_bb490.us:                                    ; preds = %"consume convolved488.us"
  %5551 = sext <8 x i32> %convolved1914.sroa.0.69.us to <8 x i64>
  %5552 = mul nsw <8 x i64> %5551, %5372
  %5553 = ashr <8 x i64> %5552, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5554 = add nsw <8 x i64> %5553, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a229.us = ashr <8 x i64> %5554, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5555 = shufflevector <8 x i64> %a229.us, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5556 = icmp slt <4 x i64> %5555, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5557 = shufflevector <8 x i64> %a229.us, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5558 = icmp slt <4 x i64> %5557, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5559 = select <4 x i1> %5556, <4 x i64> %5555, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5560 = select <4 x i1> %5558, <4 x i64> %5557, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5561 = icmp sgt <4 x i64> %5559, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5562 = icmp sgt <4 x i64> %5560, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5563 = select <4 x i1> %5561, <4 x i64> %5559, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5564 = select <4 x i1> %5562, <4 x i64> %5560, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5565 = shufflevector <4 x i64> %5563, <4 x i64> %5564, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4566.us = trunc <8 x i64> %5565 to <8 x i32>
  %5566 = ashr <8 x i32> %t4566.us, %5375
  %5567 = shl <8 x i32> %t4566.us, %5375
  %5568 = select <8 x i1> %5376, <8 x i32> %5566, <8 x i32> %5567
  %5569 = lshr <8 x i32> %t4566.us, %5382
  %5570 = shl <8 x i32> %t4566.us, %5382
  %5571 = select <8 x i1> %5383, <8 x i32> %5569, <8 x i32> %5570
  %5572 = and <8 x i32> %5571, %5378
  %5573 = add nsw <8 x i32> %5572, %5568
  %5574 = shufflevector <8 x i32> %5573, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5575 = shufflevector <8 x i32> %5573, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5576 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %5574, <4 x i32> %5575) #11
  %5577 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %5576, <8 x i16> %5386)
  %5578 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %5577, <8 x i16> undef) #11
  %5579 = shufflevector <16 x i8> %5578, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5580 = icmp ugt <16 x i8> %5388, %5579
  %5581 = select <16 x i1> %5580, <16 x i8> %5579, <16 x i8> %5388
  %5582 = shufflevector <16 x i8> %5581, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5583 = icmp ugt <16 x i8> %5582, %5390
  %5584 = select <16 x i1> %5583, <16 x i8> %5582, <16 x i8> %5390
  %5585 = shufflevector <16 x i8> %5584, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5586 = shl nsw i64 %5544, 3
  %5587 = add nsw i64 %5586, %5636
  %5588 = getelementptr inbounds i8, i8* %22, i64 %5587
  %5589 = bitcast i8* %5588 to <8 x i8>*
  store <8 x i8> %5585, <8 x i8>* %5589, align 1, !tbaa !414
  br label %after_bb489.us

next_bb491.us:                                    ; preds = %"consume convolved488.us"
  %5590 = or i32 %5542, 1
  %5591 = insertelement <8 x i32> undef, i32 %5590, i32 0
  %5592 = shufflevector <8 x i32> %5591, <8 x i32> undef, <8 x i32> zeroinitializer
  %5593 = add nsw <8 x i32> %5592, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5594 = icmp sle <8 x i32> %5593, %5394
  %5595 = select <8 x i1> %5594, <8 x i32> %convolved1914.sroa.0.69.us, <8 x i32> undef
  %5596 = sext <8 x i32> %5595 to <8 x i64>
  %5597 = mul nsw <8 x i64> %5596, %5372
  %5598 = ashr <8 x i64> %5597, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %5599 = add nsw <8 x i64> %5598, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a235.us = ashr <8 x i64> %5599, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %5600 = shufflevector <8 x i64> %a235.us, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5601 = icmp slt <4 x i64> %5600, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5602 = shufflevector <8 x i64> %a235.us, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5603 = icmp slt <4 x i64> %5602, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5604 = select <4 x i1> %5601, <4 x i64> %5600, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5605 = select <4 x i1> %5603, <4 x i64> %5602, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %5606 = icmp sgt <4 x i64> %5604, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5607 = icmp sgt <4 x i64> %5605, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5608 = select <4 x i1> %5606, <4 x i64> %5604, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5609 = select <4 x i1> %5607, <4 x i64> %5605, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %5610 = shufflevector <4 x i64> %5608, <4 x i64> %5609, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4570.us = trunc <8 x i64> %5610 to <8 x i32>
  %5611 = ashr <8 x i32> %t4570.us, %5375
  %5612 = shl <8 x i32> %t4570.us, %5375
  %5613 = select <8 x i1> %5376, <8 x i32> %5611, <8 x i32> %5612
  %5614 = lshr <8 x i32> %t4570.us, %5382
  %5615 = shl <8 x i32> %t4570.us, %5382
  %5616 = select <8 x i1> %5383, <8 x i32> %5614, <8 x i32> %5615
  %5617 = and <8 x i32> %5616, %5378
  %5618 = add nsw <8 x i32> %5617, %5613
  %5619 = shufflevector <8 x i32> %5618, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %5620 = shufflevector <8 x i32> %5618, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %5621 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %5619, <4 x i32> %5620) #11
  %5622 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %5621, <8 x i16> %5386)
  %5623 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %5622, <8 x i16> undef) #11
  %5624 = shufflevector <16 x i8> %5623, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5625 = icmp ugt <16 x i8> %5388, %5624
  %5626 = select <16 x i1> %5625, <16 x i8> %5624, <16 x i8> %5388
  %5627 = shufflevector <16 x i8> %5626, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %5628 = icmp ugt <16 x i8> %5627, %5390
  %5629 = select <16 x i1> %5628, <16 x i8> %5627, <16 x i8> %5390
  %5630 = shufflevector <16 x i8> %5629, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5631 = shl nsw i64 %5539, 3
  %5632 = add nsw i64 %5631, %5636
  %5633 = getelementptr inbounds i8, i8* %22, i64 %5632
  %5634 = bitcast i8* %5633 to <8 x i8>*
  call void @llvm.masked.store.v8i8.p0v8i8(<8 x i8> %5630, <8 x i8>* %5634, i32 1, <8 x i1> %5594), !tbaa !414
  br label %after_bb489.us

after_bb489.us:                                   ; preds = %next_bb491.us, %then_bb490.us
  %indvars.iv.next3971 = add nuw nsw i64 %indvars.iv3970, 1
  %.not2075.us = icmp eq i64 %indvars.iv.next3971, %5424
  br i1 %.not2075.us, label %"end for output.s0.c.co.rebased.us", label %"for output.s0.c.co.rebased.us"

"end for output.s0.c.co.rebased.us":              ; preds = %after_bb489.us, %"end for output.s0.c.co453.us"
  %convolved1914.sroa.0.63.us = phi <8 x i32> [ %convolved1914.sroa.0.55.us, %"end for output.s0.c.co453.us" ], [ %convolved1914.sroa.0.69.us, %after_bb489.us ]
  %indvars.iv.next3975 = add nuw nsw i64 %indvars.iv3974, 1
  %.not2072.us = icmp eq i64 %indvars.iv.next3975, %5427
  br i1 %.not2072.us, label %"end for output.s0.x.xo450.us", label %"for output.s0.x.xo449.us"

"end for output.s0.x.xo450.us":                   ; preds = %"end for output.s0.c.co.rebased.us", %"consume input_wrapper448.us"
  %convolved1914.sroa.0.53.us = phi <8 x i32> [ %convolved1914.sroa.0.50.us, %"consume input_wrapper448.us" ], [ %convolved1914.sroa.0.63.us, %"end for output.s0.c.co.rebased.us" ]
  %tobool.not.i2429.not.us = icmp eq i8* %5472, null
  br i1 %tobool.not.i2429.not.us, label %call_destructor.exit2432.us, label %if.then.i2430.us

if.then.i2430.us:                                 ; preds = %"end for output.s0.x.xo450.us"
  call void @halide_free(i8* null, i8* nonnull %5472) #17
  br label %call_destructor.exit2432.us

call_destructor.exit2432.us:                      ; preds = %if.then.i2430.us, %"end for output.s0.x.xo450.us"
  %indvars.iv.next3979 = add nuw nsw i64 %indvars.iv3978, 1
  %5635 = icmp eq i64 %indvars.iv.next3979, %zext
  br i1 %5635, label %"end for output.s0.y.rebased369.loopexit.us", label %"for output.s0.y.rebased368.us"

"for output.s0.c.co.rebased.preheader.us":        ; preds = %"end for output.s0.c.co453.us"
  %5636 = sext i32 %t4441.us to i64
  %5637 = trunc i64 %5491 to i32
  br label %"for output.s0.c.co.rebased.us"

"for output.s0.c.co452.preheader.us":             ; preds = %"for output.s0.x.xo449.us"
  %5638 = sext i32 %t4441.us to i64
  %5639 = trunc i64 %5491 to i32
  br label %"for output.s0.c.co452.us"

"for input_wrapper.s0.x.x.rebased385.preheader.us": ; preds = %"end for input_wrapper.s0.x.x380.us"
  %5640 = sext i32 %t4382.us to i64
  br i1 %5311, label %"for input_wrapper.s0.x.x.rebased385.us.us", label %"end for input_wrapper.s0.x.x.rebased386.us", !prof !387

"for input_wrapper.s0.x.x379.preheader.us":       ; preds = %"for input_wrapper.s0.y.rebased376.us"
  %5641 = sext i32 %t4382.us to i64
  br i1 %5311, label %"for input_wrapper.s0.x.x379.us.us.preheader", label %"end for input_wrapper.s0.x.x.rebased386.us", !prof !387

"for input_wrapper.s0.x.x379.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.x379.preheader.us"
  %5642 = trunc i64 %5485 to i32
  br label %"for input_wrapper.s0.x.x379.us.us"

"for input_wrapper.s0.x.rebased416.preheader.us": ; preds = %"for input_wrapper.s0.y.rebased413.us"
  br i1 %5349, label %"for input_wrapper.s0.x.rebased416.us.us", label %"for input_wrapper.s0.x.rebased416.preheader.split.us3028", !prof !387

"for output.s0.x.xo449.preheader.us":             ; preds = %"consume input_wrapper448.us"
  %5643 = trunc i64 %5469 to i32
  %5644 = mul i32 %29, %5643
  %t4366.us = add i32 %5644, %5468
  br label %"for output.s0.x.xo449.us"

"end for output.s0.y.rebased369.loopexit.us":     ; preds = %call_destructor.exit2432.us
  %indvars.iv.next3983 = add nuw nsw i64 %indvars.iv3982, 1
  %5645 = icmp eq i64 %indvars.iv.next3983, %zext3986
  br i1 %5645, label %after_bb1, label %"for output.s0.b.rebased365.us"

"for input_wrapper.s0.y.rebased396.us.us":        ; preds = %then_bb394.us, %"end for input_wrapper.s0.x.rebased400.loopexit.us.us"
  %indvars.iv3902 = phi i64 [ %indvars.iv.next3903, %"end for input_wrapper.s0.x.rebased400.loopexit.us.us" ], [ 0, %then_bb394.us ]
  %5646 = trunc i64 %indvars.iv3902 to i32
  %t4409.us.us = mul i32 %5330, %5646
  %5647 = add nsw i64 %indvars.iv3902, %5471
  %5648 = mul nsw i64 %5647, %5405
  %5649 = add nsw i64 %5648, %5466
  br i1 %5343, label %"for input_wrapper.s0.x.rebased399.us.us.us", label %"for input_wrapper.s0.x.rebased399.preheader.split.us2962.us", !prof !387

"for input_wrapper.s0.x.rebased399.preheader.split.us2962.us": ; preds = %"for input_wrapper.s0.y.rebased396.us.us"
  br i1 %5285, label %"for input_wrapper.s0.x.rebased399.us2946.us.us", label %"end for input_wrapper.s0.x.rebased400.loopexit.us.us", !prof !387

"end for input_wrapper.s0.x.rebased400.loopexit.us.us": ; preds = %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us", %"end for input_wrapper.s0.c.c.rebased406.loopexit.us.us.us", %"for input_wrapper.s0.x.rebased399.preheader.split.us2962.us"
  %indvars.iv.next3903 = add nuw nsw i64 %indvars.iv3902, 1
  %.not2095.us.us = icmp eq i64 %indvars.iv3902, %5437
  br i1 %.not2095.us.us, label %"consume input_wrapper448.us", label %"for input_wrapper.s0.y.rebased396.us.us"

"for input_wrapper.s0.x.rebased399.us.us.us":     ; preds = %"for input_wrapper.s0.y.rebased396.us.us", %"end for input_wrapper.s0.c.c.rebased406.loopexit.us.us.us"
  %indvars.iv3899 = phi i64 [ %indvars.iv.next3900, %"end for input_wrapper.s0.c.c.rebased406.loopexit.us.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased396.us.us" ]
  %5650 = trunc i64 %indvars.iv3899 to i32
  %reass.add.us.us.us = add i32 %t4409.us.us, %5650
  %reass.mul.us.us.us = mul i32 %reass.add.us.us.us, %5339
  %5651 = add nsw i64 %indvars.iv3899, %5400
  %5652 = mul nsw i64 %5651, %5401
  %5653 = add nsw i64 %5649, %5652
  %5654 = sext i32 %reass.mul.us.us.us to i64
  br i1 %5285, label %"for input_wrapper.s0.c.c402.us.us.us.preheader", label %"end for input_wrapper.s0.c.c403.us.us.us", !prof !387

"for input_wrapper.s0.c.c402.us.us.us.preheader": ; preds = %"for input_wrapper.s0.x.rebased399.us.us.us"
  br i1 %5455, label %"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c402.us.us.us"

"for input_wrapper.s0.c.c402.us.us.us":           ; preds = %"for input_wrapper.s0.c.c402.us.us.us.preheader", %"for input_wrapper.s0.c.c402.us.us.us"
  %indvars.iv3895 = phi i64 [ %indvars.iv.next3896.3, %"for input_wrapper.s0.c.c402.us.us.us" ], [ 0, %"for input_wrapper.s0.c.c402.us.us.us.preheader" ]
  %niter5790 = phi i64 [ %niter5790.nsub.3, %"for input_wrapper.s0.c.c402.us.us.us" ], [ %unroll_iter5789, %"for input_wrapper.s0.c.c402.us.us.us.preheader" ]
  %5655 = shl nuw nsw i64 %indvars.iv3895, 4
  %5656 = add nsw i64 %5655, %5653
  %5657 = getelementptr inbounds i8, i8* %12, i64 %5656
  %5658 = bitcast i8* %5657 to <16 x i8>*
  %5659 = load <16 x i8>, <16 x i8>* %5658, align 4, !tbaa !397
  %5660 = zext <16 x i8> %5659 to <16 x i16>
  %5661 = sub nsw <16 x i16> %5660, %5342
  %5662 = add nsw i64 %5655, %5654
  %5663 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5662
  %5664 = bitcast i16* %5663 to <16 x i16>*
  store <16 x i16> %5661, <16 x i16>* %5664, align 8, !tbaa !399
  %indvars.iv.next3896 = shl i64 %indvars.iv3895, 4
  %5665 = or i64 %indvars.iv.next3896, 16
  %5666 = add nsw i64 %5665, %5653
  %5667 = getelementptr inbounds i8, i8* %12, i64 %5666
  %5668 = bitcast i8* %5667 to <16 x i8>*
  %5669 = load <16 x i8>, <16 x i8>* %5668, align 4, !tbaa !397
  %5670 = zext <16 x i8> %5669 to <16 x i16>
  %5671 = sub nsw <16 x i16> %5670, %5342
  %5672 = add nsw i64 %5665, %5654
  %5673 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5672
  %5674 = bitcast i16* %5673 to <16 x i16>*
  store <16 x i16> %5671, <16 x i16>* %5674, align 8, !tbaa !399
  %indvars.iv.next3896.1 = shl i64 %indvars.iv3895, 4
  %5675 = or i64 %indvars.iv.next3896.1, 32
  %5676 = add nsw i64 %5675, %5653
  %5677 = getelementptr inbounds i8, i8* %12, i64 %5676
  %5678 = bitcast i8* %5677 to <16 x i8>*
  %5679 = load <16 x i8>, <16 x i8>* %5678, align 4, !tbaa !397
  %5680 = zext <16 x i8> %5679 to <16 x i16>
  %5681 = sub nsw <16 x i16> %5680, %5342
  %5682 = add nsw i64 %5675, %5654
  %5683 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5682
  %5684 = bitcast i16* %5683 to <16 x i16>*
  store <16 x i16> %5681, <16 x i16>* %5684, align 8, !tbaa !399
  %indvars.iv.next3896.2 = shl i64 %indvars.iv3895, 4
  %5685 = or i64 %indvars.iv.next3896.2, 48
  %5686 = add nsw i64 %5685, %5653
  %5687 = getelementptr inbounds i8, i8* %12, i64 %5686
  %5688 = bitcast i8* %5687 to <16 x i8>*
  %5689 = load <16 x i8>, <16 x i8>* %5688, align 4, !tbaa !397
  %5690 = zext <16 x i8> %5689 to <16 x i16>
  %5691 = sub nsw <16 x i16> %5690, %5342
  %5692 = add nsw i64 %5685, %5654
  %5693 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5692
  %5694 = bitcast i16* %5693 to <16 x i16>*
  store <16 x i16> %5691, <16 x i16>* %5694, align 8, !tbaa !399
  %indvars.iv.next3896.3 = add nuw nsw i64 %indvars.iv3895, 4
  %niter5790.nsub.3 = add i64 %niter5790, -4
  %niter5790.ncmp.3 = icmp eq i64 %niter5790.nsub.3, 0
  br i1 %niter5790.ncmp.3, label %"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c402.us.us.us"

"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c402.us.us.us", %"for input_wrapper.s0.c.c402.us.us.us.preheader"
  %indvars.iv3895.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c402.us.us.us.preheader" ], [ %indvars.iv.next3896.3, %"for input_wrapper.s0.c.c402.us.us.us" ]
  br i1 %lcmp.mod5788.not, label %"end for input_wrapper.s0.c.c403.us.us.us", label %"for input_wrapper.s0.c.c402.us.us.us.epil"

"for input_wrapper.s0.c.c402.us.us.us.epil":      ; preds = %"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c402.us.us.us.epil"
  %indvars.iv3895.epil = phi i64 [ %indvars.iv.next3896.epil, %"for input_wrapper.s0.c.c402.us.us.us.epil" ], [ %indvars.iv3895.unr, %"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa" ]
  %epil.iter5787 = phi i64 [ %epil.iter5787.sub, %"for input_wrapper.s0.c.c402.us.us.us.epil" ], [ %xtraiter5786, %"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa" ]
  %5695 = shl nuw nsw i64 %indvars.iv3895.epil, 4
  %5696 = add nsw i64 %5695, %5653
  %5697 = getelementptr inbounds i8, i8* %12, i64 %5696
  %5698 = bitcast i8* %5697 to <16 x i8>*
  %5699 = load <16 x i8>, <16 x i8>* %5698, align 4, !tbaa !397
  %5700 = zext <16 x i8> %5699 to <16 x i16>
  %5701 = sub nsw <16 x i16> %5700, %5342
  %5702 = add nsw i64 %5695, %5654
  %5703 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5702
  %5704 = bitcast i16* %5703 to <16 x i16>*
  store <16 x i16> %5701, <16 x i16>* %5704, align 8, !tbaa !399
  %indvars.iv.next3896.epil = add nuw nsw i64 %indvars.iv3895.epil, 1
  %epil.iter5787.sub = add i64 %epil.iter5787, -1
  %epil.iter5787.cmp.not = icmp eq i64 %epil.iter5787.sub, 0
  br i1 %epil.iter5787.cmp.not, label %"end for input_wrapper.s0.c.c403.us.us.us", label %"for input_wrapper.s0.c.c402.us.us.us.epil", !llvm.loop !443

"end for input_wrapper.s0.c.c403.us.us.us":       ; preds = %"end for input_wrapper.s0.c.c403.us.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c402.us.us.us.epil", %"for input_wrapper.s0.x.rebased399.us.us.us"
  br label %"for input_wrapper.s0.c.c.rebased405.us.us.us"

"for input_wrapper.s0.c.c.rebased405.us.us.us":   ; preds = %after_bb408.us.us.us, %"end for input_wrapper.s0.c.c403.us.us.us"
  %indvars.iv3897 = phi i64 [ %indvars.iv.next3898, %after_bb408.us.us.us ], [ 0, %"end for input_wrapper.s0.c.c403.us.us.us" ]
  %5705 = add nsw i64 %indvars.iv3897, %5403
  %5706 = trunc i64 %5705 to i32
  %5707 = shl nsw i32 %5706, 4
  %5708 = add nsw i32 %5707, 16
  %.not2097.us.us.us = icmp sgt i32 %5708, %t4407
  br i1 %.not2097.us.us.us, label %next_bb410.us.us.us, label %then_bb409.us.us.us

then_bb409.us.us.us:                              ; preds = %"for input_wrapper.s0.c.c.rebased405.us.us.us"
  %5709 = shl nsw i64 %5705, 4
  %5710 = add nsw i64 %5709, %5653
  %5711 = getelementptr inbounds i8, i8* %12, i64 %5710
  %5712 = bitcast i8* %5711 to <16 x i8>*
  %5713 = load <16 x i8>, <16 x i8>* %5712, align 4, !tbaa !397
  %5714 = zext <16 x i8> %5713 to <16 x i16>
  %5715 = sub nsw <16 x i16> %5714, %5342
  %5716 = add nsw i64 %5709, %5654
  %5717 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5716
  %5718 = bitcast i16* %5717 to <16 x i16>*
  store <16 x i16> %5715, <16 x i16>* %5718, align 8, !tbaa !399
  br label %after_bb408.us.us.us

next_bb410.us.us.us:                              ; preds = %"for input_wrapper.s0.c.c.rebased405.us.us.us"
  %5719 = or i32 %5707, 1
  %5720 = insertelement <16 x i32> undef, i32 %5719, i32 0
  %5721 = shufflevector <16 x i32> %5720, <16 x i32> undef, <16 x i32> zeroinitializer
  %5722 = add nsw <16 x i32> %5721, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5723 = shufflevector <16 x i32> %5722, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5724 = icmp sgt <8 x i32> %5723, %5345
  %5725 = shufflevector <16 x i32> %5722, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5726 = icmp sgt <8 x i32> %5725, %5345
  %5727 = shufflevector <8 x i1> %5724, <8 x i1> %5726, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5728 = xor <16 x i1> %5727, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %5729 = shl nsw i64 %5705, 4
  %5730 = add nsw i64 %5729, %5653
  %5731 = getelementptr inbounds i8, i8* %12, i64 %5730
  %5732 = bitcast i8* %5731 to <16 x i8>*
  %5733 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %5732, i32 4, <16 x i1> %5728, <16 x i8> undef), !tbaa !397
  %5734 = zext <16 x i8> %5733 to <16 x i16>
  %5735 = sub nsw <16 x i16> %5734, %5342
  %5736 = add nsw i64 %5729, %5654
  %5737 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5736
  %5738 = bitcast i16* %5737 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %5735, <16 x i16>* %5738, i32 8, <16 x i1> %5728), !tbaa !399
  br label %after_bb408.us.us.us

after_bb408.us.us.us:                             ; preds = %next_bb410.us.us.us, %then_bb409.us.us.us
  %indvars.iv.next3898 = add nuw nsw i64 %indvars.iv3897, 1
  %.not2098.us.us.us = icmp eq i64 %indvars.iv.next3898, %5404
  br i1 %.not2098.us.us.us, label %"end for input_wrapper.s0.c.c.rebased406.loopexit.us.us.us", label %"for input_wrapper.s0.c.c.rebased405.us.us.us"

"end for input_wrapper.s0.c.c.rebased406.loopexit.us.us.us": ; preds = %after_bb408.us.us.us
  %indvars.iv.next3900 = add nuw nsw i64 %indvars.iv3899, 1
  %.not2096.us.us.us = icmp eq i64 %indvars.iv3899, %5402
  br i1 %.not2096.us.us.us, label %"end for input_wrapper.s0.x.rebased400.loopexit.us.us", label %"for input_wrapper.s0.x.rebased399.us.us.us"

"for input_wrapper.s0.x.rebased399.us2946.us.us": ; preds = %"for input_wrapper.s0.x.rebased399.preheader.split.us2962.us", %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us"
  %indvars.iv3892 = phi i64 [ %indvars.iv.next3893, %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased399.preheader.split.us2962.us" ]
  %5739 = trunc i64 %indvars.iv3892 to i32
  %reass.add.us2948.us.us = add i32 %t4409.us.us, %5739
  %reass.mul.us2949.us.us = mul i32 %reass.add.us2948.us.us, %5339
  %5740 = add nsw i64 %indvars.iv3892, %5400
  %5741 = mul nsw i64 %5740, %5401
  %5742 = add nsw i64 %5649, %5741
  %5743 = sext i32 %reass.mul.us2949.us.us to i64
  br i1 %5454, label %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c402.us2951.us.us"

"for input_wrapper.s0.c.c402.us2951.us.us":       ; preds = %"for input_wrapper.s0.x.rebased399.us2946.us.us", %"for input_wrapper.s0.c.c402.us2951.us.us"
  %indvars.iv3890 = phi i64 [ %indvars.iv.next3891.3, %"for input_wrapper.s0.c.c402.us2951.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased399.us2946.us.us" ]
  %niter5785 = phi i64 [ %niter5785.nsub.3, %"for input_wrapper.s0.c.c402.us2951.us.us" ], [ %unroll_iter5784, %"for input_wrapper.s0.x.rebased399.us2946.us.us" ]
  %5744 = shl nuw nsw i64 %indvars.iv3890, 4
  %5745 = add nsw i64 %5744, %5742
  %5746 = getelementptr inbounds i8, i8* %12, i64 %5745
  %5747 = bitcast i8* %5746 to <16 x i8>*
  %5748 = load <16 x i8>, <16 x i8>* %5747, align 4, !tbaa !397
  %5749 = zext <16 x i8> %5748 to <16 x i16>
  %5750 = sub nsw <16 x i16> %5749, %5342
  %5751 = add nsw i64 %5744, %5743
  %5752 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5751
  %5753 = bitcast i16* %5752 to <16 x i16>*
  store <16 x i16> %5750, <16 x i16>* %5753, align 8, !tbaa !399
  %indvars.iv.next3891 = shl i64 %indvars.iv3890, 4
  %5754 = or i64 %indvars.iv.next3891, 16
  %5755 = add nsw i64 %5754, %5742
  %5756 = getelementptr inbounds i8, i8* %12, i64 %5755
  %5757 = bitcast i8* %5756 to <16 x i8>*
  %5758 = load <16 x i8>, <16 x i8>* %5757, align 4, !tbaa !397
  %5759 = zext <16 x i8> %5758 to <16 x i16>
  %5760 = sub nsw <16 x i16> %5759, %5342
  %5761 = add nsw i64 %5754, %5743
  %5762 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5761
  %5763 = bitcast i16* %5762 to <16 x i16>*
  store <16 x i16> %5760, <16 x i16>* %5763, align 8, !tbaa !399
  %indvars.iv.next3891.1 = shl i64 %indvars.iv3890, 4
  %5764 = or i64 %indvars.iv.next3891.1, 32
  %5765 = add nsw i64 %5764, %5742
  %5766 = getelementptr inbounds i8, i8* %12, i64 %5765
  %5767 = bitcast i8* %5766 to <16 x i8>*
  %5768 = load <16 x i8>, <16 x i8>* %5767, align 4, !tbaa !397
  %5769 = zext <16 x i8> %5768 to <16 x i16>
  %5770 = sub nsw <16 x i16> %5769, %5342
  %5771 = add nsw i64 %5764, %5743
  %5772 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5771
  %5773 = bitcast i16* %5772 to <16 x i16>*
  store <16 x i16> %5770, <16 x i16>* %5773, align 8, !tbaa !399
  %indvars.iv.next3891.2 = shl i64 %indvars.iv3890, 4
  %5774 = or i64 %indvars.iv.next3891.2, 48
  %5775 = add nsw i64 %5774, %5742
  %5776 = getelementptr inbounds i8, i8* %12, i64 %5775
  %5777 = bitcast i8* %5776 to <16 x i8>*
  %5778 = load <16 x i8>, <16 x i8>* %5777, align 4, !tbaa !397
  %5779 = zext <16 x i8> %5778 to <16 x i16>
  %5780 = sub nsw <16 x i16> %5779, %5342
  %5781 = add nsw i64 %5774, %5743
  %5782 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5781
  %5783 = bitcast i16* %5782 to <16 x i16>*
  store <16 x i16> %5780, <16 x i16>* %5783, align 8, !tbaa !399
  %indvars.iv.next3891.3 = add nuw nsw i64 %indvars.iv3890, 4
  %niter5785.nsub.3 = add i64 %niter5785, -4
  %niter5785.ncmp.3 = icmp eq i64 %niter5785.nsub.3, 0
  br i1 %niter5785.ncmp.3, label %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c402.us2951.us.us"

"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c402.us2951.us.us", %"for input_wrapper.s0.x.rebased399.us2946.us.us"
  %indvars.iv3890.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased399.us2946.us.us" ], [ %indvars.iv.next3891.3, %"for input_wrapper.s0.c.c402.us2951.us.us" ]
  br i1 %lcmp.mod5783.not, label %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us", label %"for input_wrapper.s0.c.c402.us2951.us.us.epil"

"for input_wrapper.s0.c.c402.us2951.us.us.epil":  ; preds = %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa", %"for input_wrapper.s0.c.c402.us2951.us.us.epil"
  %indvars.iv3890.epil = phi i64 [ %indvars.iv.next3891.epil, %"for input_wrapper.s0.c.c402.us2951.us.us.epil" ], [ %indvars.iv3890.unr, %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa" ]
  %epil.iter5782 = phi i64 [ %epil.iter5782.sub, %"for input_wrapper.s0.c.c402.us2951.us.us.epil" ], [ %xtraiter5781, %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa" ]
  %5784 = shl nuw nsw i64 %indvars.iv3890.epil, 4
  %5785 = add nsw i64 %5784, %5742
  %5786 = getelementptr inbounds i8, i8* %12, i64 %5785
  %5787 = bitcast i8* %5786 to <16 x i8>*
  %5788 = load <16 x i8>, <16 x i8>* %5787, align 4, !tbaa !397
  %5789 = zext <16 x i8> %5788 to <16 x i16>
  %5790 = sub nsw <16 x i16> %5789, %5342
  %5791 = add nsw i64 %5784, %5743
  %5792 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5791
  %5793 = bitcast i16* %5792 to <16 x i16>*
  store <16 x i16> %5790, <16 x i16>* %5793, align 8, !tbaa !399
  %indvars.iv.next3891.epil = add nuw nsw i64 %indvars.iv3890.epil, 1
  %epil.iter5782.sub = add i64 %epil.iter5782, -1
  %epil.iter5782.cmp.not = icmp eq i64 %epil.iter5782.sub, 0
  br i1 %epil.iter5782.cmp.not, label %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us", label %"for input_wrapper.s0.c.c402.us2951.us.us.epil", !llvm.loop !444

"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us": ; preds = %"for input_wrapper.s0.c.c402.us2951.us.us.epil", %"end for input_wrapper.s0.c.c403.loopexit.us2957.us.us.unr-lcssa"
  %indvars.iv.next3893 = add nuw nsw i64 %indvars.iv3892, 1
  %.not2096.us2955.us.us = icmp eq i64 %indvars.iv3892, %5402
  br i1 %.not2096.us2955.us.us, label %"end for input_wrapper.s0.x.rebased400.loopexit.us.us", label %"for input_wrapper.s0.x.rebased399.us2946.us.us"

"for input_wrapper.s0.x.rebased416.preheader.split.us3028": ; preds = %"for input_wrapper.s0.x.rebased416.preheader.us"
  br i1 %5284, label %"for input_wrapper.s0.x.rebased416.us2965.us", label %"end for input_wrapper.s0.x.rebased417.us", !prof !387

"for input_wrapper.s0.x.rebased416.us.us":        ; preds = %"for input_wrapper.s0.x.rebased416.preheader.us", %"end for input_wrapper.s0.c.c.rebased423.loopexit.us.us"
  %indvars.iv3914 = phi i64 [ %indvars.iv.next3915, %"end for input_wrapper.s0.c.c.rebased423.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased416.preheader.us" ]
  %5794 = trunc i64 %indvars.iv3914 to i32
  %reass.add2655.us.us = add i32 %t4418.us, %5794
  %reass.mul2656.us.us = mul i32 %reass.add2655.us.us, %5339
  %5795 = add nsw i64 %indvars.iv3914, %5400
  %5796 = mul nsw i64 %5795, %5401
  %5797 = add nsw i64 %5476, %5796
  %5798 = sext i32 %reass.mul2656.us.us to i64
  br i1 %5284, label %"for input_wrapper.s0.c.c419.us.us.preheader", label %"end for input_wrapper.s0.c.c420.us.us", !prof !387

"for input_wrapper.s0.c.c419.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.rebased416.us.us"
  br i1 %5457, label %"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c419.us.us"

"for input_wrapper.s0.c.c419.us.us":              ; preds = %"for input_wrapper.s0.c.c419.us.us.preheader", %"for input_wrapper.s0.c.c419.us.us"
  %indvars.iv3910 = phi i64 [ %indvars.iv.next3911.3, %"for input_wrapper.s0.c.c419.us.us" ], [ 0, %"for input_wrapper.s0.c.c419.us.us.preheader" ]
  %niter5800 = phi i64 [ %niter5800.nsub.3, %"for input_wrapper.s0.c.c419.us.us" ], [ %unroll_iter5799, %"for input_wrapper.s0.c.c419.us.us.preheader" ]
  %5799 = shl nuw nsw i64 %indvars.iv3910, 3
  %5800 = add nsw i64 %5799, %5797
  %5801 = getelementptr inbounds i8, i8* %12, i64 %5800
  %5802 = bitcast i8* %5801 to <8 x i8>*
  %5803 = load <8 x i8>, <8 x i8>* %5802, align 4, !tbaa !397
  %5804 = zext <8 x i8> %5803 to <8 x i16>
  %5805 = sub nsw <8 x i16> %5804, %5348
  %5806 = add nsw i64 %5799, %5798
  %5807 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5806
  %5808 = bitcast i16* %5807 to <8 x i16>*
  store <8 x i16> %5805, <8 x i16>* %5808, align 8, !tbaa !399
  %indvars.iv.next3911 = shl i64 %indvars.iv3910, 3
  %5809 = or i64 %indvars.iv.next3911, 8
  %5810 = add nsw i64 %5809, %5797
  %5811 = getelementptr inbounds i8, i8* %12, i64 %5810
  %5812 = bitcast i8* %5811 to <8 x i8>*
  %5813 = load <8 x i8>, <8 x i8>* %5812, align 4, !tbaa !397
  %5814 = zext <8 x i8> %5813 to <8 x i16>
  %5815 = sub nsw <8 x i16> %5814, %5348
  %5816 = add nsw i64 %5809, %5798
  %5817 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5816
  %5818 = bitcast i16* %5817 to <8 x i16>*
  store <8 x i16> %5815, <8 x i16>* %5818, align 8, !tbaa !399
  %indvars.iv.next3911.1 = shl i64 %indvars.iv3910, 3
  %5819 = or i64 %indvars.iv.next3911.1, 16
  %5820 = add nsw i64 %5819, %5797
  %5821 = getelementptr inbounds i8, i8* %12, i64 %5820
  %5822 = bitcast i8* %5821 to <8 x i8>*
  %5823 = load <8 x i8>, <8 x i8>* %5822, align 4, !tbaa !397
  %5824 = zext <8 x i8> %5823 to <8 x i16>
  %5825 = sub nsw <8 x i16> %5824, %5348
  %5826 = add nsw i64 %5819, %5798
  %5827 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5826
  %5828 = bitcast i16* %5827 to <8 x i16>*
  store <8 x i16> %5825, <8 x i16>* %5828, align 8, !tbaa !399
  %indvars.iv.next3911.2 = shl i64 %indvars.iv3910, 3
  %5829 = or i64 %indvars.iv.next3911.2, 24
  %5830 = add nsw i64 %5829, %5797
  %5831 = getelementptr inbounds i8, i8* %12, i64 %5830
  %5832 = bitcast i8* %5831 to <8 x i8>*
  %5833 = load <8 x i8>, <8 x i8>* %5832, align 4, !tbaa !397
  %5834 = zext <8 x i8> %5833 to <8 x i16>
  %5835 = sub nsw <8 x i16> %5834, %5348
  %5836 = add nsw i64 %5829, %5798
  %5837 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5836
  %5838 = bitcast i16* %5837 to <8 x i16>*
  store <8 x i16> %5835, <8 x i16>* %5838, align 8, !tbaa !399
  %indvars.iv.next3911.3 = add nuw nsw i64 %indvars.iv3910, 4
  %niter5800.nsub.3 = add i64 %niter5800, -4
  %niter5800.ncmp.3 = icmp eq i64 %niter5800.nsub.3, 0
  br i1 %niter5800.ncmp.3, label %"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c419.us.us"

"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c419.us.us", %"for input_wrapper.s0.c.c419.us.us.preheader"
  %indvars.iv3910.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c419.us.us.preheader" ], [ %indvars.iv.next3911.3, %"for input_wrapper.s0.c.c419.us.us" ]
  br i1 %lcmp.mod5798.not, label %"end for input_wrapper.s0.c.c420.us.us", label %"for input_wrapper.s0.c.c419.us.us.epil"

"for input_wrapper.s0.c.c419.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c419.us.us.epil"
  %indvars.iv3910.epil = phi i64 [ %indvars.iv.next3911.epil, %"for input_wrapper.s0.c.c419.us.us.epil" ], [ %indvars.iv3910.unr, %"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa" ]
  %epil.iter5797 = phi i64 [ %epil.iter5797.sub, %"for input_wrapper.s0.c.c419.us.us.epil" ], [ %xtraiter5796, %"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa" ]
  %5839 = shl nuw nsw i64 %indvars.iv3910.epil, 3
  %5840 = add nsw i64 %5839, %5797
  %5841 = getelementptr inbounds i8, i8* %12, i64 %5840
  %5842 = bitcast i8* %5841 to <8 x i8>*
  %5843 = load <8 x i8>, <8 x i8>* %5842, align 4, !tbaa !397
  %5844 = zext <8 x i8> %5843 to <8 x i16>
  %5845 = sub nsw <8 x i16> %5844, %5348
  %5846 = add nsw i64 %5839, %5798
  %5847 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5846
  %5848 = bitcast i16* %5847 to <8 x i16>*
  store <8 x i16> %5845, <8 x i16>* %5848, align 8, !tbaa !399
  %indvars.iv.next3911.epil = add nuw nsw i64 %indvars.iv3910.epil, 1
  %epil.iter5797.sub = add i64 %epil.iter5797, -1
  %epil.iter5797.cmp.not = icmp eq i64 %epil.iter5797.sub, 0
  br i1 %epil.iter5797.cmp.not, label %"end for input_wrapper.s0.c.c420.us.us", label %"for input_wrapper.s0.c.c419.us.us.epil", !llvm.loop !445

"end for input_wrapper.s0.c.c420.us.us":          ; preds = %"end for input_wrapper.s0.c.c420.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c419.us.us.epil", %"for input_wrapper.s0.x.rebased416.us.us"
  br label %"for input_wrapper.s0.c.c.rebased422.us.us"

"for input_wrapper.s0.c.c.rebased422.us.us":      ; preds = %after_bb425.us.us, %"end for input_wrapper.s0.c.c420.us.us"
  %indvars.iv3912 = phi i64 [ %indvars.iv.next3913, %after_bb425.us.us ], [ 0, %"end for input_wrapper.s0.c.c420.us.us" ]
  %5849 = add nsw i64 %indvars.iv3912, %5407
  %5850 = trunc i64 %5849 to i32
  %5851 = shl nsw i32 %5850, 3
  %5852 = add nsw i32 %5851, 8
  %.not2092.us.us = icmp sgt i32 %5852, %t4407
  br i1 %.not2092.us.us, label %next_bb427.us.us, label %then_bb426.us.us

then_bb426.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased422.us.us"
  %5853 = shl nsw i64 %5849, 3
  %5854 = add nsw i64 %5853, %5797
  %5855 = getelementptr inbounds i8, i8* %12, i64 %5854
  %5856 = bitcast i8* %5855 to <8 x i8>*
  %5857 = load <8 x i8>, <8 x i8>* %5856, align 4, !tbaa !397
  %5858 = zext <8 x i8> %5857 to <8 x i16>
  %5859 = sub nsw <8 x i16> %5858, %5348
  %5860 = add nsw i64 %5853, %5798
  %5861 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5860
  %5862 = bitcast i16* %5861 to <8 x i16>*
  store <8 x i16> %5859, <8 x i16>* %5862, align 8, !tbaa !399
  br label %after_bb425.us.us

next_bb427.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased422.us.us"
  %5863 = or i32 %5851, 1
  %5864 = insertelement <8 x i32> undef, i32 %5863, i32 0
  %5865 = shufflevector <8 x i32> %5864, <8 x i32> undef, <8 x i32> zeroinitializer
  %5866 = add nsw <8 x i32> %5865, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %5867 = icmp sle <8 x i32> %5866, %5351
  %5868 = shl nsw i64 %5849, 3
  %5869 = add nsw i64 %5868, %5797
  %5870 = getelementptr inbounds i8, i8* %12, i64 %5869
  %5871 = bitcast i8* %5870 to <8 x i8>*
  %5872 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %5871, i32 4, <8 x i1> %5867, <8 x i8> undef), !tbaa !397
  %5873 = zext <8 x i8> %5872 to <8 x i16>
  %5874 = sub nsw <8 x i16> %5873, %5348
  %5875 = add nsw i64 %5868, %5798
  %5876 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5875
  %5877 = bitcast i16* %5876 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %5874, <8 x i16>* %5877, i32 8, <8 x i1> %5867), !tbaa !399
  br label %after_bb425.us.us

after_bb425.us.us:                                ; preds = %next_bb427.us.us, %then_bb426.us.us
  %indvars.iv.next3913 = add nuw nsw i64 %indvars.iv3912, 1
  %.not2093.us.us = icmp eq i64 %indvars.iv.next3913, %5408
  br i1 %.not2093.us.us, label %"end for input_wrapper.s0.c.c.rebased423.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased422.us.us"

"end for input_wrapper.s0.c.c.rebased423.loopexit.us.us": ; preds = %after_bb425.us.us
  %indvars.iv.next3915 = add nuw nsw i64 %indvars.iv3914, 1
  %.not2091.us.us = icmp eq i64 %indvars.iv3914, %5402
  br i1 %.not2091.us.us, label %"end for input_wrapper.s0.x.rebased417.us", label %"for input_wrapper.s0.x.rebased416.us.us"

"for input_wrapper.s0.x.rebased416.us2965.us":    ; preds = %"for input_wrapper.s0.x.rebased416.preheader.split.us3028", %"end for input_wrapper.s0.c.c420.loopexit.us2976.us"
  %indvars.iv3907 = phi i64 [ %indvars.iv.next3908, %"end for input_wrapper.s0.c.c420.loopexit.us2976.us" ], [ 0, %"for input_wrapper.s0.x.rebased416.preheader.split.us3028" ]
  %5878 = trunc i64 %indvars.iv3907 to i32
  %reass.add2655.us2967.us = add i32 %t4418.us, %5878
  %reass.mul2656.us2968.us = mul i32 %reass.add2655.us2967.us, %5339
  %5879 = add nsw i64 %indvars.iv3907, %5400
  %5880 = mul nsw i64 %5879, %5401
  %5881 = add nsw i64 %5476, %5880
  %5882 = sext i32 %reass.mul2656.us2968.us to i64
  br i1 %5456, label %"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa", label %"for input_wrapper.s0.c.c419.us2970.us"

"for input_wrapper.s0.c.c419.us2970.us":          ; preds = %"for input_wrapper.s0.x.rebased416.us2965.us", %"for input_wrapper.s0.c.c419.us2970.us"
  %indvars.iv3905 = phi i64 [ %indvars.iv.next3906.3, %"for input_wrapper.s0.c.c419.us2970.us" ], [ 0, %"for input_wrapper.s0.x.rebased416.us2965.us" ]
  %niter5795 = phi i64 [ %niter5795.nsub.3, %"for input_wrapper.s0.c.c419.us2970.us" ], [ %unroll_iter5794, %"for input_wrapper.s0.x.rebased416.us2965.us" ]
  %5883 = shl nuw nsw i64 %indvars.iv3905, 3
  %5884 = add nsw i64 %5883, %5881
  %5885 = getelementptr inbounds i8, i8* %12, i64 %5884
  %5886 = bitcast i8* %5885 to <8 x i8>*
  %5887 = load <8 x i8>, <8 x i8>* %5886, align 4, !tbaa !397
  %5888 = zext <8 x i8> %5887 to <8 x i16>
  %5889 = sub nsw <8 x i16> %5888, %5348
  %5890 = add nsw i64 %5883, %5882
  %5891 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5890
  %5892 = bitcast i16* %5891 to <8 x i16>*
  store <8 x i16> %5889, <8 x i16>* %5892, align 8, !tbaa !399
  %indvars.iv.next3906 = shl i64 %indvars.iv3905, 3
  %5893 = or i64 %indvars.iv.next3906, 8
  %5894 = add nsw i64 %5893, %5881
  %5895 = getelementptr inbounds i8, i8* %12, i64 %5894
  %5896 = bitcast i8* %5895 to <8 x i8>*
  %5897 = load <8 x i8>, <8 x i8>* %5896, align 4, !tbaa !397
  %5898 = zext <8 x i8> %5897 to <8 x i16>
  %5899 = sub nsw <8 x i16> %5898, %5348
  %5900 = add nsw i64 %5893, %5882
  %5901 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5900
  %5902 = bitcast i16* %5901 to <8 x i16>*
  store <8 x i16> %5899, <8 x i16>* %5902, align 8, !tbaa !399
  %indvars.iv.next3906.1 = shl i64 %indvars.iv3905, 3
  %5903 = or i64 %indvars.iv.next3906.1, 16
  %5904 = add nsw i64 %5903, %5881
  %5905 = getelementptr inbounds i8, i8* %12, i64 %5904
  %5906 = bitcast i8* %5905 to <8 x i8>*
  %5907 = load <8 x i8>, <8 x i8>* %5906, align 4, !tbaa !397
  %5908 = zext <8 x i8> %5907 to <8 x i16>
  %5909 = sub nsw <8 x i16> %5908, %5348
  %5910 = add nsw i64 %5903, %5882
  %5911 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5910
  %5912 = bitcast i16* %5911 to <8 x i16>*
  store <8 x i16> %5909, <8 x i16>* %5912, align 8, !tbaa !399
  %indvars.iv.next3906.2 = shl i64 %indvars.iv3905, 3
  %5913 = or i64 %indvars.iv.next3906.2, 24
  %5914 = add nsw i64 %5913, %5881
  %5915 = getelementptr inbounds i8, i8* %12, i64 %5914
  %5916 = bitcast i8* %5915 to <8 x i8>*
  %5917 = load <8 x i8>, <8 x i8>* %5916, align 4, !tbaa !397
  %5918 = zext <8 x i8> %5917 to <8 x i16>
  %5919 = sub nsw <8 x i16> %5918, %5348
  %5920 = add nsw i64 %5913, %5882
  %5921 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5920
  %5922 = bitcast i16* %5921 to <8 x i16>*
  store <8 x i16> %5919, <8 x i16>* %5922, align 8, !tbaa !399
  %indvars.iv.next3906.3 = add nuw nsw i64 %indvars.iv3905, 4
  %niter5795.nsub.3 = add i64 %niter5795, -4
  %niter5795.ncmp.3 = icmp eq i64 %niter5795.nsub.3, 0
  br i1 %niter5795.ncmp.3, label %"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa", label %"for input_wrapper.s0.c.c419.us2970.us"

"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c419.us2970.us", %"for input_wrapper.s0.x.rebased416.us2965.us"
  %indvars.iv3905.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased416.us2965.us" ], [ %indvars.iv.next3906.3, %"for input_wrapper.s0.c.c419.us2970.us" ]
  br i1 %lcmp.mod5793.not, label %"end for input_wrapper.s0.c.c420.loopexit.us2976.us", label %"for input_wrapper.s0.c.c419.us2970.us.epil"

"for input_wrapper.s0.c.c419.us2970.us.epil":     ; preds = %"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa", %"for input_wrapper.s0.c.c419.us2970.us.epil"
  %indvars.iv3905.epil = phi i64 [ %indvars.iv.next3906.epil, %"for input_wrapper.s0.c.c419.us2970.us.epil" ], [ %indvars.iv3905.unr, %"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa" ]
  %epil.iter5792 = phi i64 [ %epil.iter5792.sub, %"for input_wrapper.s0.c.c419.us2970.us.epil" ], [ %xtraiter5791, %"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa" ]
  %5923 = shl nuw nsw i64 %indvars.iv3905.epil, 3
  %5924 = add nsw i64 %5923, %5881
  %5925 = getelementptr inbounds i8, i8* %12, i64 %5924
  %5926 = bitcast i8* %5925 to <8 x i8>*
  %5927 = load <8 x i8>, <8 x i8>* %5926, align 4, !tbaa !397
  %5928 = zext <8 x i8> %5927 to <8 x i16>
  %5929 = sub nsw <8 x i16> %5928, %5348
  %5930 = add nsw i64 %5923, %5882
  %5931 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5930
  %5932 = bitcast i16* %5931 to <8 x i16>*
  store <8 x i16> %5929, <8 x i16>* %5932, align 8, !tbaa !399
  %indvars.iv.next3906.epil = add nuw nsw i64 %indvars.iv3905.epil, 1
  %epil.iter5792.sub = add i64 %epil.iter5792, -1
  %epil.iter5792.cmp.not = icmp eq i64 %epil.iter5792.sub, 0
  br i1 %epil.iter5792.cmp.not, label %"end for input_wrapper.s0.c.c420.loopexit.us2976.us", label %"for input_wrapper.s0.c.c419.us2970.us.epil", !llvm.loop !446

"end for input_wrapper.s0.c.c420.loopexit.us2976.us": ; preds = %"for input_wrapper.s0.c.c419.us2970.us.epil", %"end for input_wrapper.s0.c.c420.loopexit.us2976.us.unr-lcssa"
  %indvars.iv.next3908 = add nuw nsw i64 %indvars.iv3907, 1
  %.not2091.us2974.us = icmp eq i64 %indvars.iv3907, %5402
  br i1 %.not2091.us2974.us, label %"end for input_wrapper.s0.x.rebased417.us", label %"for input_wrapper.s0.x.rebased416.us2965.us"

"for input_wrapper.s0.x.rebased433.us.us":        ; preds = %"for input_wrapper.s0.y.rebased430.us", %"end for input_wrapper.s0.c.c437.loopexit.us.us"
  %indvars.iv3922 = phi i64 [ %indvars.iv.next3923, %"end for input_wrapper.s0.c.c437.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased430.us" ]
  %5933 = trunc i64 %indvars.iv3922 to i32
  %reass.add2657.us.us = add i32 %t4426.us, %5933
  %reass.mul2658.us.us = mul i32 %reass.add2657.us.us, %5339
  %5934 = add nsw i64 %indvars.iv3922, %5400
  %5935 = mul nsw i64 %5934, %5401
  %5936 = add nsw i64 %5480, %5935
  %5937 = sext i32 %reass.mul2658.us.us to i64
  br i1 %5458, label %"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c436.us.us"

"for input_wrapper.s0.c.c436.us.us":              ; preds = %"for input_wrapper.s0.x.rebased433.us.us", %"for input_wrapper.s0.c.c436.us.us"
  %indvars.iv3920 = phi i64 [ %indvars.iv.next3921.3, %"for input_wrapper.s0.c.c436.us.us" ], [ 0, %"for input_wrapper.s0.x.rebased433.us.us" ]
  %niter5805 = phi i64 [ %niter5805.nsub.3, %"for input_wrapper.s0.c.c436.us.us" ], [ %unroll_iter5804, %"for input_wrapper.s0.x.rebased433.us.us" ]
  %5938 = shl nuw nsw i64 %indvars.iv3920, 2
  %5939 = add nsw i64 %5938, %5936
  %5940 = getelementptr inbounds i8, i8* %12, i64 %5939
  %5941 = bitcast i8* %5940 to <4 x i8>*
  %5942 = load <4 x i8>, <4 x i8>* %5941, align 4, !tbaa !397
  %5943 = zext <4 x i8> %5942 to <4 x i16>
  %5944 = sub nsw <4 x i16> %5943, %5354
  %5945 = add nsw i64 %5938, %5937
  %5946 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5945
  %5947 = bitcast i16* %5946 to <4 x i16>*
  store <4 x i16> %5944, <4 x i16>* %5947, align 8, !tbaa !399
  %indvars.iv.next3921 = shl i64 %indvars.iv3920, 2
  %5948 = or i64 %indvars.iv.next3921, 4
  %5949 = add nsw i64 %5948, %5936
  %5950 = getelementptr inbounds i8, i8* %12, i64 %5949
  %5951 = bitcast i8* %5950 to <4 x i8>*
  %5952 = load <4 x i8>, <4 x i8>* %5951, align 4, !tbaa !397
  %5953 = zext <4 x i8> %5952 to <4 x i16>
  %5954 = sub nsw <4 x i16> %5953, %5354
  %5955 = add nsw i64 %5948, %5937
  %5956 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5955
  %5957 = bitcast i16* %5956 to <4 x i16>*
  store <4 x i16> %5954, <4 x i16>* %5957, align 8, !tbaa !399
  %indvars.iv.next3921.1 = shl i64 %indvars.iv3920, 2
  %5958 = or i64 %indvars.iv.next3921.1, 8
  %5959 = add nsw i64 %5958, %5936
  %5960 = getelementptr inbounds i8, i8* %12, i64 %5959
  %5961 = bitcast i8* %5960 to <4 x i8>*
  %5962 = load <4 x i8>, <4 x i8>* %5961, align 4, !tbaa !397
  %5963 = zext <4 x i8> %5962 to <4 x i16>
  %5964 = sub nsw <4 x i16> %5963, %5354
  %5965 = add nsw i64 %5958, %5937
  %5966 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5965
  %5967 = bitcast i16* %5966 to <4 x i16>*
  store <4 x i16> %5964, <4 x i16>* %5967, align 8, !tbaa !399
  %indvars.iv.next3921.2 = shl i64 %indvars.iv3920, 2
  %5968 = or i64 %indvars.iv.next3921.2, 12
  %5969 = add nsw i64 %5968, %5936
  %5970 = getelementptr inbounds i8, i8* %12, i64 %5969
  %5971 = bitcast i8* %5970 to <4 x i8>*
  %5972 = load <4 x i8>, <4 x i8>* %5971, align 4, !tbaa !397
  %5973 = zext <4 x i8> %5972 to <4 x i16>
  %5974 = sub nsw <4 x i16> %5973, %5354
  %5975 = add nsw i64 %5968, %5937
  %5976 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5975
  %5977 = bitcast i16* %5976 to <4 x i16>*
  store <4 x i16> %5974, <4 x i16>* %5977, align 8, !tbaa !399
  %indvars.iv.next3921.3 = add nuw nsw i64 %indvars.iv3920, 4
  %niter5805.nsub.3 = add i64 %niter5805, -4
  %niter5805.ncmp.3 = icmp eq i64 %niter5805.nsub.3, 0
  br i1 %niter5805.ncmp.3, label %"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c436.us.us"

"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c436.us.us", %"for input_wrapper.s0.x.rebased433.us.us"
  %indvars.iv3920.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased433.us.us" ], [ %indvars.iv.next3921.3, %"for input_wrapper.s0.c.c436.us.us" ]
  br i1 %lcmp.mod5803.not, label %"end for input_wrapper.s0.c.c437.loopexit.us.us", label %"for input_wrapper.s0.c.c436.us.us.epil"

"for input_wrapper.s0.c.c436.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c436.us.us.epil"
  %indvars.iv3920.epil = phi i64 [ %indvars.iv.next3921.epil, %"for input_wrapper.s0.c.c436.us.us.epil" ], [ %indvars.iv3920.unr, %"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa" ]
  %epil.iter5802 = phi i64 [ %epil.iter5802.sub, %"for input_wrapper.s0.c.c436.us.us.epil" ], [ %xtraiter5801, %"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa" ]
  %5978 = shl nuw nsw i64 %indvars.iv3920.epil, 2
  %5979 = add nsw i64 %5978, %5936
  %5980 = getelementptr inbounds i8, i8* %12, i64 %5979
  %5981 = bitcast i8* %5980 to <4 x i8>*
  %5982 = load <4 x i8>, <4 x i8>* %5981, align 4, !tbaa !397
  %5983 = zext <4 x i8> %5982 to <4 x i16>
  %5984 = sub nsw <4 x i16> %5983, %5354
  %5985 = add nsw i64 %5978, %5937
  %5986 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %5985
  %5987 = bitcast i16* %5986 to <4 x i16>*
  store <4 x i16> %5984, <4 x i16>* %5987, align 8, !tbaa !399
  %indvars.iv.next3921.epil = add nuw nsw i64 %indvars.iv3920.epil, 1
  %epil.iter5802.sub = add i64 %epil.iter5802, -1
  %epil.iter5802.cmp.not = icmp eq i64 %epil.iter5802.sub, 0
  br i1 %epil.iter5802.cmp.not, label %"end for input_wrapper.s0.c.c437.loopexit.us.us", label %"for input_wrapper.s0.c.c436.us.us.epil", !llvm.loop !447

"end for input_wrapper.s0.c.c437.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c436.us.us.epil", %"end for input_wrapper.s0.c.c437.loopexit.us.us.unr-lcssa"
  %indvars.iv.next3923 = add nuw nsw i64 %indvars.iv3922, 1
  %.not2088.us.us = icmp eq i64 %indvars.iv3922, %5402
  br i1 %.not2088.us.us, label %"end for input_wrapper.s0.x.rebased434.us", label %"for input_wrapper.s0.x.rebased433.us.us"

iter.check:                                       ; preds = %"for input_wrapper.s0.y.rebased439.us", %"end for input_wrapper.s0.c446.loopexit.us.us"
  %indvars.iv3930 = phi i64 [ %indvars.iv.next3931, %"end for input_wrapper.s0.c446.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased439.us" ]
  %5988 = trunc i64 %indvars.iv3930 to i32
  %reass.add2659.us.us = add i32 %t4433.us, %5988
  %reass.mul2660.us.us = mul i32 %reass.add2659.us.us, %5339
  %5989 = add nsw i64 %indvars.iv3930, %5400
  %5990 = mul nsw i64 %5989, %5401
  %5991 = add nsw i64 %5484, %5990
  %5992 = sext i32 %reass.mul2660.us.us to i64
  br i1 %min.iters.check5222, label %"for input_wrapper.s0.c445.us.us.preheader", label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  br i1 %min.iters.check5224, label %vec.epilog.ph, label %vector.ph5225

vector.ph5225:                                    ; preds = %vector.main.loop.iter.check
  br i1 %5459, label %middle.block5219.unr-lcssa, label %vector.body5221

vector.body5221:                                  ; preds = %vector.ph5225, %vector.body5221
  %index5228 = phi i64 [ %index.next5229.1, %vector.body5221 ], [ 0, %vector.ph5225 ]
  %niter5809 = phi i64 [ %niter5809.nsub.1, %vector.body5221 ], [ %unroll_iter5808, %vector.ph5225 ]
  %5993 = add nsw i64 %index5228, %5991
  %5994 = getelementptr inbounds i8, i8* %12, i64 %5993
  %5995 = bitcast i8* %5994 to <16 x i8>*
  %wide.load5231 = load <16 x i8>, <16 x i8>* %5995, align 1, !tbaa !397
  %5996 = getelementptr inbounds i8, i8* %5994, i64 16
  %5997 = bitcast i8* %5996 to <16 x i8>*
  %wide.load5232 = load <16 x i8>, <16 x i8>* %5997, align 1, !tbaa !397
  %5998 = getelementptr inbounds i8, i8* %5994, i64 32
  %5999 = bitcast i8* %5998 to <16 x i8>*
  %wide.load5233 = load <16 x i8>, <16 x i8>* %5999, align 1, !tbaa !397
  %6000 = getelementptr inbounds i8, i8* %5994, i64 48
  %6001 = bitcast i8* %6000 to <16 x i8>*
  %wide.load5234 = load <16 x i8>, <16 x i8>* %6001, align 1, !tbaa !397
  %6002 = zext <16 x i8> %wide.load5231 to <16 x i16>
  %6003 = zext <16 x i8> %wide.load5232 to <16 x i16>
  %6004 = zext <16 x i8> %wide.load5233 to <16 x i16>
  %6005 = zext <16 x i8> %wide.load5234 to <16 x i16>
  %6006 = sub nsw <16 x i16> %6002, %broadcast.splat
  %6007 = sub nsw <16 x i16> %6003, %broadcast.splat5236
  %6008 = sub nsw <16 x i16> %6004, %broadcast.splat5238
  %6009 = sub nsw <16 x i16> %6005, %broadcast.splat5240
  %6010 = add nsw i64 %index5228, %5992
  %6011 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6010
  %6012 = bitcast i16* %6011 to <16 x i16>*
  store <16 x i16> %6006, <16 x i16>* %6012, align 2, !tbaa !399
  %6013 = getelementptr inbounds i16, i16* %6011, i64 16
  %6014 = bitcast i16* %6013 to <16 x i16>*
  store <16 x i16> %6007, <16 x i16>* %6014, align 2, !tbaa !399
  %6015 = getelementptr inbounds i16, i16* %6011, i64 32
  %6016 = bitcast i16* %6015 to <16 x i16>*
  store <16 x i16> %6008, <16 x i16>* %6016, align 2, !tbaa !399
  %6017 = getelementptr inbounds i16, i16* %6011, i64 48
  %6018 = bitcast i16* %6017 to <16 x i16>*
  store <16 x i16> %6009, <16 x i16>* %6018, align 2, !tbaa !399
  %index.next5229 = or i64 %index5228, 64
  %6019 = add nsw i64 %index.next5229, %5991
  %6020 = getelementptr inbounds i8, i8* %12, i64 %6019
  %6021 = bitcast i8* %6020 to <16 x i8>*
  %wide.load5231.1 = load <16 x i8>, <16 x i8>* %6021, align 1, !tbaa !397
  %6022 = getelementptr inbounds i8, i8* %6020, i64 16
  %6023 = bitcast i8* %6022 to <16 x i8>*
  %wide.load5232.1 = load <16 x i8>, <16 x i8>* %6023, align 1, !tbaa !397
  %6024 = getelementptr inbounds i8, i8* %6020, i64 32
  %6025 = bitcast i8* %6024 to <16 x i8>*
  %wide.load5233.1 = load <16 x i8>, <16 x i8>* %6025, align 1, !tbaa !397
  %6026 = getelementptr inbounds i8, i8* %6020, i64 48
  %6027 = bitcast i8* %6026 to <16 x i8>*
  %wide.load5234.1 = load <16 x i8>, <16 x i8>* %6027, align 1, !tbaa !397
  %6028 = zext <16 x i8> %wide.load5231.1 to <16 x i16>
  %6029 = zext <16 x i8> %wide.load5232.1 to <16 x i16>
  %6030 = zext <16 x i8> %wide.load5233.1 to <16 x i16>
  %6031 = zext <16 x i8> %wide.load5234.1 to <16 x i16>
  %6032 = sub nsw <16 x i16> %6028, %broadcast.splat
  %6033 = sub nsw <16 x i16> %6029, %broadcast.splat5236
  %6034 = sub nsw <16 x i16> %6030, %broadcast.splat5238
  %6035 = sub nsw <16 x i16> %6031, %broadcast.splat5240
  %6036 = add nsw i64 %index.next5229, %5992
  %6037 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6036
  %6038 = bitcast i16* %6037 to <16 x i16>*
  store <16 x i16> %6032, <16 x i16>* %6038, align 2, !tbaa !399
  %6039 = getelementptr inbounds i16, i16* %6037, i64 16
  %6040 = bitcast i16* %6039 to <16 x i16>*
  store <16 x i16> %6033, <16 x i16>* %6040, align 2, !tbaa !399
  %6041 = getelementptr inbounds i16, i16* %6037, i64 32
  %6042 = bitcast i16* %6041 to <16 x i16>*
  store <16 x i16> %6034, <16 x i16>* %6042, align 2, !tbaa !399
  %6043 = getelementptr inbounds i16, i16* %6037, i64 48
  %6044 = bitcast i16* %6043 to <16 x i16>*
  store <16 x i16> %6035, <16 x i16>* %6044, align 2, !tbaa !399
  %index.next5229.1 = add i64 %index5228, 128
  %niter5809.nsub.1 = add i64 %niter5809, -2
  %niter5809.ncmp.1 = icmp eq i64 %niter5809.nsub.1, 0
  br i1 %niter5809.ncmp.1, label %middle.block5219.unr-lcssa, label %vector.body5221, !llvm.loop !448

middle.block5219.unr-lcssa:                       ; preds = %vector.body5221, %vector.ph5225
  %index5228.unr = phi i64 [ 0, %vector.ph5225 ], [ %index.next5229.1, %vector.body5221 ]
  br i1 %lcmp.mod5807.not, label %middle.block5219, label %vector.body5221.epil

vector.body5221.epil:                             ; preds = %middle.block5219.unr-lcssa
  %6045 = add nsw i64 %index5228.unr, %5991
  %6046 = getelementptr inbounds i8, i8* %12, i64 %6045
  %6047 = bitcast i8* %6046 to <16 x i8>*
  %wide.load5231.epil = load <16 x i8>, <16 x i8>* %6047, align 1, !tbaa !397
  %6048 = getelementptr inbounds i8, i8* %6046, i64 16
  %6049 = bitcast i8* %6048 to <16 x i8>*
  %wide.load5232.epil = load <16 x i8>, <16 x i8>* %6049, align 1, !tbaa !397
  %6050 = getelementptr inbounds i8, i8* %6046, i64 32
  %6051 = bitcast i8* %6050 to <16 x i8>*
  %wide.load5233.epil = load <16 x i8>, <16 x i8>* %6051, align 1, !tbaa !397
  %6052 = getelementptr inbounds i8, i8* %6046, i64 48
  %6053 = bitcast i8* %6052 to <16 x i8>*
  %wide.load5234.epil = load <16 x i8>, <16 x i8>* %6053, align 1, !tbaa !397
  %6054 = zext <16 x i8> %wide.load5231.epil to <16 x i16>
  %6055 = zext <16 x i8> %wide.load5232.epil to <16 x i16>
  %6056 = zext <16 x i8> %wide.load5233.epil to <16 x i16>
  %6057 = zext <16 x i8> %wide.load5234.epil to <16 x i16>
  %6058 = sub nsw <16 x i16> %6054, %broadcast.splat
  %6059 = sub nsw <16 x i16> %6055, %broadcast.splat5236
  %6060 = sub nsw <16 x i16> %6056, %broadcast.splat5238
  %6061 = sub nsw <16 x i16> %6057, %broadcast.splat5240
  %6062 = add nsw i64 %index5228.unr, %5992
  %6063 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6062
  %6064 = bitcast i16* %6063 to <16 x i16>*
  store <16 x i16> %6058, <16 x i16>* %6064, align 2, !tbaa !399
  %6065 = getelementptr inbounds i16, i16* %6063, i64 16
  %6066 = bitcast i16* %6065 to <16 x i16>*
  store <16 x i16> %6059, <16 x i16>* %6066, align 2, !tbaa !399
  %6067 = getelementptr inbounds i16, i16* %6063, i64 32
  %6068 = bitcast i16* %6067 to <16 x i16>*
  store <16 x i16> %6060, <16 x i16>* %6068, align 2, !tbaa !399
  %6069 = getelementptr inbounds i16, i16* %6063, i64 48
  %6070 = bitcast i16* %6069 to <16 x i16>*
  store <16 x i16> %6061, <16 x i16>* %6070, align 2, !tbaa !399
  br label %middle.block5219

middle.block5219:                                 ; preds = %middle.block5219.unr-lcssa, %vector.body5221.epil
  br i1 %cmp.n5230, label %"end for input_wrapper.s0.c446.loopexit.us.us", label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block5219
  br i1 %min.epilog.iters.check, label %"for input_wrapper.s0.c445.us.us.preheader", label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec5227, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index5243 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next5244, %vec.epilog.vector.body ]
  %6071 = add nsw i64 %index5243, %5991
  %6072 = getelementptr inbounds i8, i8* %12, i64 %6071
  %6073 = bitcast i8* %6072 to <8 x i8>*
  %wide.load5247 = load <8 x i8>, <8 x i8>* %6073, align 1, !tbaa !397
  %6074 = zext <8 x i8> %wide.load5247 to <8 x i16>
  %6075 = sub nsw <8 x i16> %6074, %broadcast.splat5249
  %6076 = add nsw i64 %index5243, %5992
  %6077 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6076
  %6078 = bitcast i16* %6077 to <8 x i16>*
  store <8 x i16> %6075, <8 x i16>* %6078, align 2, !tbaa !399
  %index.next5244 = add i64 %index5243, 8
  %6079 = icmp eq i64 %index.next5244, %n.vec5242
  br i1 %6079, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !449

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  br i1 %cmp.n5246, label %"end for input_wrapper.s0.c446.loopexit.us.us", label %"for input_wrapper.s0.c445.us.us.preheader"

"for input_wrapper.s0.c445.us.us.preheader":      ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %indvars.iv3928.ph = phi i64 [ 0, %iter.check ], [ %n.vec5227, %vec.epilog.iter.check ], [ %n.vec5242, %vec.epilog.middle.block ]
  br label %"for input_wrapper.s0.c445.us.us"

"for input_wrapper.s0.c445.us.us":                ; preds = %"for input_wrapper.s0.c445.us.us.preheader", %"for input_wrapper.s0.c445.us.us"
  %indvars.iv3928 = phi i64 [ %indvars.iv.next3929, %"for input_wrapper.s0.c445.us.us" ], [ %indvars.iv3928.ph, %"for input_wrapper.s0.c445.us.us.preheader" ]
  %6080 = add nsw i64 %indvars.iv3928, %5991
  %6081 = getelementptr inbounds i8, i8* %12, i64 %6080
  %6082 = load i8, i8* %6081, align 1, !tbaa !397
  %6083 = zext i8 %6082 to i16
  %6084 = sub nsw i16 %6083, %5355
  %6085 = add nsw i64 %indvars.iv3928, %5992
  %6086 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6085
  store i16 %6084, i16* %6086, align 2, !tbaa !399
  %indvars.iv.next3929 = add nuw nsw i64 %indvars.iv3928, 1
  %.not2086.us.us = icmp eq i64 %indvars.iv.next3929, %5410
  br i1 %.not2086.us.us, label %"end for input_wrapper.s0.c446.loopexit.us.us", label %"for input_wrapper.s0.c445.us.us", !llvm.loop !450

"end for input_wrapper.s0.c446.loopexit.us.us":   ; preds = %"for input_wrapper.s0.c445.us.us", %vec.epilog.middle.block, %middle.block5219
  %indvars.iv.next3931 = add nuw nsw i64 %indvars.iv3930, 1
  %.not2085.us.us = icmp eq i64 %indvars.iv3930, %5402
  br i1 %.not2085.us.us, label %"end for input_wrapper.s0.x.rebased443.us", label %iter.check

"for input_wrapper.s0.x.x379.us.us":              ; preds = %"for input_wrapper.s0.x.x379.us.us.preheader", %"end for input_wrapper.s0.c.c383.loopexit.us.us"
  %indvars.iv3939 = phi i64 [ 0, %"for input_wrapper.s0.x.x379.us.us.preheader" ], [ %indvars.iv.next3940, %"end for input_wrapper.s0.c.c383.loopexit.us.us" ]
  %6087 = trunc i64 %indvars.iv3939 to i32
  %t4389.us.us = mul i32 %5356, %6087
  %6088 = shl nsw i64 %indvars.iv3939, 3
  %6089 = add nsw i64 %6088, %5400
  br label %"for input_wrapper.s0.c.c382.us.us"

"for input_wrapper.s0.c.c382.us.us":              ; preds = %"for input_wrapper.s0.c.c382.us.us", %"for input_wrapper.s0.x.x379.us.us"
  %indvars.iv3936 = phi i64 [ %indvars.iv.next3937, %"for input_wrapper.s0.c.c382.us.us" ], [ 0, %"for input_wrapper.s0.x.x379.us.us" ]
  %6090 = add nsw i64 %indvars.iv3936, %6089
  %6091 = shl nsw i64 %6090, 2
  %6092 = add nsw i64 %6091, %5641
  %6093 = getelementptr inbounds i8, i8* %12, i64 %6092
  %6094 = bitcast i8* %6093 to <32 x i8>*
  %6095 = load <32 x i8>, <32 x i8>* %6094, align 4, !tbaa !397
  %6096 = zext <32 x i8> %6095 to <32 x i16>
  %6097 = sub nsw <32 x i16> %6096, %5365
  %6098 = trunc i64 %indvars.iv3936 to i32
  %6099 = add i32 %t4389.us.us, %6098
  %6100 = shl nsw i32 %6099, 2
  %6101 = add i32 %6100, %5642
  %6102 = insertelement <4 x i32> undef, i32 %6101, i32 0
  %6103 = shufflevector <4 x i32> %6102, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6104 = add <4 x i32> %6103, <i32 poison, i32 1, i32 2, i32 3>
  %6105 = add i32 %6101, 1
  %6106 = add i32 %6105, %a215
  %6107 = insertelement <4 x i32> undef, i32 %6106, i32 0
  %6108 = shufflevector <4 x i32> %6107, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6109 = add <4 x i32> %6108, <i32 poison, i32 1, i32 2, i32 3>
  %6110 = add i32 %6101, 2
  %6111 = add i32 %6110, %5362
  %6112 = insertelement <4 x i32> undef, i32 %6111, i32 0
  %6113 = shufflevector <4 x i32> %6112, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6114 = add <4 x i32> %6113, <i32 poison, i32 1, i32 2, i32 3>
  %6115 = add i32 %6101, 3
  %6116 = add i32 %6115, %5361
  %6117 = insertelement <4 x i32> undef, i32 %6116, i32 0
  %6118 = shufflevector <4 x i32> %6117, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6119 = add <4 x i32> %6118, <i32 poison, i32 1, i32 2, i32 3>
  %6120 = add i32 %6101, 4
  %6121 = add i32 %6120, %5360
  %6122 = insertelement <4 x i32> undef, i32 %6121, i32 0
  %6123 = shufflevector <4 x i32> %6122, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6124 = add <4 x i32> %6123, <i32 poison, i32 1, i32 2, i32 3>
  %6125 = add i32 %6101, 5
  %6126 = add i32 %6125, %5359
  %6127 = insertelement <4 x i32> undef, i32 %6126, i32 0
  %6128 = shufflevector <4 x i32> %6127, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6129 = add <4 x i32> %6128, <i32 poison, i32 1, i32 2, i32 3>
  %6130 = add i32 %6101, 6
  %6131 = add i32 %6130, %5358
  %6132 = insertelement <4 x i32> undef, i32 %6131, i32 0
  %6133 = shufflevector <4 x i32> %6132, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6134 = add <4 x i32> %6133, <i32 poison, i32 1, i32 2, i32 3>
  %6135 = add i32 %6101, 7
  %6136 = add i32 %6135, %5357
  %6137 = insertelement <4 x i32> undef, i32 %6136, i32 0
  %6138 = shufflevector <4 x i32> %6137, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6139 = add <4 x i32> %6138, <i32 poison, i32 1, i32 2, i32 3>
  %6140 = extractelement <32 x i16> %6097, i32 0
  %6141 = sext i32 %6101 to i64
  %6142 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6141
  store i16 %6140, i16* %6142, align 2, !tbaa !399
  %6143 = extractelement <4 x i32> %6104, i32 1
  %6144 = extractelement <32 x i16> %6097, i32 1
  %6145 = sext i32 %6143 to i64
  %6146 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6145
  store i16 %6144, i16* %6146, align 2, !tbaa !399
  %6147 = extractelement <4 x i32> %6104, i32 2
  %6148 = extractelement <32 x i16> %6097, i32 2
  %6149 = sext i32 %6147 to i64
  %6150 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6149
  store i16 %6148, i16* %6150, align 2, !tbaa !399
  %6151 = extractelement <4 x i32> %6104, i32 3
  %6152 = extractelement <32 x i16> %6097, i32 3
  %6153 = sext i32 %6151 to i64
  %6154 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6153
  store i16 %6152, i16* %6154, align 2, !tbaa !399
  %6155 = extractelement <32 x i16> %6097, i32 4
  %6156 = sext i32 %6106 to i64
  %6157 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6156
  store i16 %6155, i16* %6157, align 2, !tbaa !399
  %6158 = extractelement <4 x i32> %6109, i32 1
  %6159 = extractelement <32 x i16> %6097, i32 5
  %6160 = sext i32 %6158 to i64
  %6161 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6160
  store i16 %6159, i16* %6161, align 2, !tbaa !399
  %6162 = extractelement <4 x i32> %6109, i32 2
  %6163 = extractelement <32 x i16> %6097, i32 6
  %6164 = sext i32 %6162 to i64
  %6165 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6164
  store i16 %6163, i16* %6165, align 2, !tbaa !399
  %6166 = extractelement <4 x i32> %6109, i32 3
  %6167 = extractelement <32 x i16> %6097, i32 7
  %6168 = sext i32 %6166 to i64
  %6169 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6168
  store i16 %6167, i16* %6169, align 2, !tbaa !399
  %6170 = extractelement <32 x i16> %6097, i32 8
  %6171 = sext i32 %6111 to i64
  %6172 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6171
  store i16 %6170, i16* %6172, align 2, !tbaa !399
  %6173 = extractelement <4 x i32> %6114, i32 1
  %6174 = extractelement <32 x i16> %6097, i32 9
  %6175 = sext i32 %6173 to i64
  %6176 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6175
  store i16 %6174, i16* %6176, align 2, !tbaa !399
  %6177 = extractelement <4 x i32> %6114, i32 2
  %6178 = extractelement <32 x i16> %6097, i32 10
  %6179 = sext i32 %6177 to i64
  %6180 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6179
  store i16 %6178, i16* %6180, align 2, !tbaa !399
  %6181 = extractelement <4 x i32> %6114, i32 3
  %6182 = extractelement <32 x i16> %6097, i32 11
  %6183 = sext i32 %6181 to i64
  %6184 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6183
  store i16 %6182, i16* %6184, align 2, !tbaa !399
  %6185 = extractelement <32 x i16> %6097, i32 12
  %6186 = sext i32 %6116 to i64
  %6187 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6186
  store i16 %6185, i16* %6187, align 2, !tbaa !399
  %6188 = extractelement <4 x i32> %6119, i32 1
  %6189 = extractelement <32 x i16> %6097, i32 13
  %6190 = sext i32 %6188 to i64
  %6191 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6190
  store i16 %6189, i16* %6191, align 2, !tbaa !399
  %6192 = extractelement <4 x i32> %6119, i32 2
  %6193 = extractelement <32 x i16> %6097, i32 14
  %6194 = sext i32 %6192 to i64
  %6195 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6194
  store i16 %6193, i16* %6195, align 2, !tbaa !399
  %6196 = extractelement <4 x i32> %6119, i32 3
  %6197 = extractelement <32 x i16> %6097, i32 15
  %6198 = sext i32 %6196 to i64
  %6199 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6198
  store i16 %6197, i16* %6199, align 2, !tbaa !399
  %6200 = extractelement <32 x i16> %6097, i32 16
  %6201 = sext i32 %6121 to i64
  %6202 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6201
  store i16 %6200, i16* %6202, align 2, !tbaa !399
  %6203 = extractelement <4 x i32> %6124, i32 1
  %6204 = extractelement <32 x i16> %6097, i32 17
  %6205 = sext i32 %6203 to i64
  %6206 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6205
  store i16 %6204, i16* %6206, align 2, !tbaa !399
  %6207 = extractelement <4 x i32> %6124, i32 2
  %6208 = extractelement <32 x i16> %6097, i32 18
  %6209 = sext i32 %6207 to i64
  %6210 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6209
  store i16 %6208, i16* %6210, align 2, !tbaa !399
  %6211 = extractelement <4 x i32> %6124, i32 3
  %6212 = extractelement <32 x i16> %6097, i32 19
  %6213 = sext i32 %6211 to i64
  %6214 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6213
  store i16 %6212, i16* %6214, align 2, !tbaa !399
  %6215 = extractelement <32 x i16> %6097, i32 20
  %6216 = sext i32 %6126 to i64
  %6217 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6216
  store i16 %6215, i16* %6217, align 2, !tbaa !399
  %6218 = extractelement <4 x i32> %6129, i32 1
  %6219 = extractelement <32 x i16> %6097, i32 21
  %6220 = sext i32 %6218 to i64
  %6221 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6220
  store i16 %6219, i16* %6221, align 2, !tbaa !399
  %6222 = extractelement <4 x i32> %6129, i32 2
  %6223 = extractelement <32 x i16> %6097, i32 22
  %6224 = sext i32 %6222 to i64
  %6225 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6224
  store i16 %6223, i16* %6225, align 2, !tbaa !399
  %6226 = extractelement <4 x i32> %6129, i32 3
  %6227 = extractelement <32 x i16> %6097, i32 23
  %6228 = sext i32 %6226 to i64
  %6229 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6228
  store i16 %6227, i16* %6229, align 2, !tbaa !399
  %6230 = extractelement <32 x i16> %6097, i32 24
  %6231 = sext i32 %6131 to i64
  %6232 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6231
  store i16 %6230, i16* %6232, align 2, !tbaa !399
  %6233 = extractelement <4 x i32> %6134, i32 1
  %6234 = extractelement <32 x i16> %6097, i32 25
  %6235 = sext i32 %6233 to i64
  %6236 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6235
  store i16 %6234, i16* %6236, align 2, !tbaa !399
  %6237 = extractelement <4 x i32> %6134, i32 2
  %6238 = extractelement <32 x i16> %6097, i32 26
  %6239 = sext i32 %6237 to i64
  %6240 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6239
  store i16 %6238, i16* %6240, align 2, !tbaa !399
  %6241 = extractelement <4 x i32> %6134, i32 3
  %6242 = extractelement <32 x i16> %6097, i32 27
  %6243 = sext i32 %6241 to i64
  %6244 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6243
  store i16 %6242, i16* %6244, align 2, !tbaa !399
  %6245 = extractelement <32 x i16> %6097, i32 28
  %6246 = sext i32 %6136 to i64
  %6247 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6246
  store i16 %6245, i16* %6247, align 2, !tbaa !399
  %6248 = extractelement <4 x i32> %6139, i32 1
  %6249 = extractelement <32 x i16> %6097, i32 29
  %6250 = sext i32 %6248 to i64
  %6251 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6250
  store i16 %6249, i16* %6251, align 2, !tbaa !399
  %6252 = extractelement <4 x i32> %6139, i32 2
  %6253 = extractelement <32 x i16> %6097, i32 30
  %6254 = sext i32 %6252 to i64
  %6255 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6254
  store i16 %6253, i16* %6255, align 2, !tbaa !399
  %6256 = extractelement <4 x i32> %6139, i32 3
  %6257 = extractelement <32 x i16> %6097, i32 31
  %6258 = sext i32 %6256 to i64
  %6259 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6258
  store i16 %6257, i16* %6259, align 2, !tbaa !399
  %indvars.iv.next3937 = add nuw nsw i64 %indvars.iv3936, 1
  %.not2105.us.us = icmp eq i64 %indvars.iv.next3937, %5411
  br i1 %.not2105.us.us, label %"end for input_wrapper.s0.c.c383.loopexit.us.us", label %"for input_wrapper.s0.c.c382.us.us"

"end for input_wrapper.s0.c.c383.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c382.us.us"
  %indvars.iv.next3940 = add nuw nsw i64 %indvars.iv3939, 1
  %.not2104.us.us = icmp eq i64 %indvars.iv.next3940, %5412
  br i1 %.not2104.us.us, label %"end for input_wrapper.s0.x.x380.us", label %"for input_wrapper.s0.x.x379.us.us"

"for input_wrapper.s0.x.x.rebased385.us.us":      ; preds = %"for input_wrapper.s0.x.x.rebased385.preheader.us", %"end for input_wrapper.s0.x.v21389.us.us"
  %indvars.iv3947 = phi i64 [ %indvars.iv.next3948, %"end for input_wrapper.s0.x.v21389.us.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased385.preheader.us" ]
  %6260 = trunc i64 %indvars.iv3947 to i32
  %6261 = add i32 %t4369, %6260
  %6262 = shl nsw i32 %6261, 3
  %a219.us.us = sub nsw i32 %a207, %6262
  %6263 = icmp slt i32 %a219.us.us, 7
  %t4400.us.us = select i1 %6263, i32 %a219.us.us, i32 7
  %6264 = icmp sgt i32 %t4400.us.us, -1
  br i1 %6264, label %"for input_wrapper.s0.x.v21388.us.us.us.preheader", label %"end for input_wrapper.s0.x.v21389.us.us", !prof !387

"for input_wrapper.s0.x.v21388.us.us.us.preheader": ; preds = %"for input_wrapper.s0.x.x.rebased385.us.us"
  %6265 = sext i32 %6262 to i64
  %6266 = zext i32 %t4400.us.us to i64
  br label %"for input_wrapper.s0.x.v21388.us.us.us"

"end for input_wrapper.s0.x.v21389.us.us":        ; preds = %"end for input_wrapper.s0.c.c392.loopexit.us.us.us", %"for input_wrapper.s0.x.x.rebased385.us.us"
  %indvars.iv.next3948 = add nuw nsw i64 %indvars.iv3947, 1
  %.not2101.us.us = icmp eq i64 %indvars.iv3947, %5414
  br i1 %.not2101.us.us, label %"end for input_wrapper.s0.x.x.rebased386.us", label %"for input_wrapper.s0.x.x.rebased385.us.us"

"for input_wrapper.s0.x.v21388.us.us.us":         ; preds = %"for input_wrapper.s0.x.v21388.us.us.us.preheader", %"end for input_wrapper.s0.c.c392.loopexit.us.us.us"
  %indvars.iv3944 = phi i64 [ 0, %"for input_wrapper.s0.x.v21388.us.us.us.preheader" ], [ %indvars.iv.next3945, %"end for input_wrapper.s0.c.c392.loopexit.us.us.us" ]
  %6267 = add nsw i64 %indvars.iv3944, %6265
  %6268 = mul nsw i64 %6267, %5413
  %6269 = add nsw i64 %6268, %5485
  %6270 = trunc i64 %6267 to i32
  %t4402.us.us.us = add i32 %b210, %6270
  %6271 = sext i32 %t4402.us.us.us to i64
  br i1 %5460, label %"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c391.us.us.us"

"for input_wrapper.s0.c.c391.us.us.us":           ; preds = %"for input_wrapper.s0.x.v21388.us.us.us", %"for input_wrapper.s0.c.c391.us.us.us"
  %indvars.iv3942 = phi i64 [ %indvars.iv.next3943.3, %"for input_wrapper.s0.c.c391.us.us.us" ], [ 0, %"for input_wrapper.s0.x.v21388.us.us.us" ]
  %niter5814 = phi i64 [ %niter5814.nsub.3, %"for input_wrapper.s0.c.c391.us.us.us" ], [ %unroll_iter5813, %"for input_wrapper.s0.x.v21388.us.us.us" ]
  %6272 = add nsw i64 %indvars.iv3942, %6271
  %6273 = shl nsw i64 %6272, 2
  %6274 = add nsw i64 %6273, %5640
  %6275 = getelementptr inbounds i8, i8* %12, i64 %6274
  %6276 = bitcast i8* %6275 to <4 x i8>*
  %6277 = load <4 x i8>, <4 x i8>* %6276, align 4, !tbaa !397
  %6278 = zext <4 x i8> %6277 to <4 x i16>
  %6279 = sub nsw <4 x i16> %6278, %5354
  %6280 = shl nuw nsw i64 %indvars.iv3942, 2
  %6281 = add nsw i64 %6280, %6269
  %6282 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6281
  %6283 = bitcast i16* %6282 to <4 x i16>*
  store <4 x i16> %6279, <4 x i16>* %6283, align 8, !tbaa !399
  %indvars.iv.next3943 = or i64 %indvars.iv3942, 1
  %6284 = add nsw i64 %indvars.iv.next3943, %6271
  %6285 = shl nsw i64 %6284, 2
  %6286 = add nsw i64 %6285, %5640
  %6287 = getelementptr inbounds i8, i8* %12, i64 %6286
  %6288 = bitcast i8* %6287 to <4 x i8>*
  %6289 = load <4 x i8>, <4 x i8>* %6288, align 4, !tbaa !397
  %6290 = zext <4 x i8> %6289 to <4 x i16>
  %6291 = sub nsw <4 x i16> %6290, %5354
  %6292 = shl nuw nsw i64 %indvars.iv.next3943, 2
  %6293 = add nsw i64 %6292, %6269
  %6294 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6293
  %6295 = bitcast i16* %6294 to <4 x i16>*
  store <4 x i16> %6291, <4 x i16>* %6295, align 8, !tbaa !399
  %indvars.iv.next3943.1 = or i64 %indvars.iv3942, 2
  %6296 = add nsw i64 %indvars.iv.next3943.1, %6271
  %6297 = shl nsw i64 %6296, 2
  %6298 = add nsw i64 %6297, %5640
  %6299 = getelementptr inbounds i8, i8* %12, i64 %6298
  %6300 = bitcast i8* %6299 to <4 x i8>*
  %6301 = load <4 x i8>, <4 x i8>* %6300, align 4, !tbaa !397
  %6302 = zext <4 x i8> %6301 to <4 x i16>
  %6303 = sub nsw <4 x i16> %6302, %5354
  %6304 = shl nuw nsw i64 %indvars.iv.next3943.1, 2
  %6305 = add nsw i64 %6304, %6269
  %6306 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6305
  %6307 = bitcast i16* %6306 to <4 x i16>*
  store <4 x i16> %6303, <4 x i16>* %6307, align 8, !tbaa !399
  %indvars.iv.next3943.2 = or i64 %indvars.iv3942, 3
  %6308 = add nsw i64 %indvars.iv.next3943.2, %6271
  %6309 = shl nsw i64 %6308, 2
  %6310 = add nsw i64 %6309, %5640
  %6311 = getelementptr inbounds i8, i8* %12, i64 %6310
  %6312 = bitcast i8* %6311 to <4 x i8>*
  %6313 = load <4 x i8>, <4 x i8>* %6312, align 4, !tbaa !397
  %6314 = zext <4 x i8> %6313 to <4 x i16>
  %6315 = sub nsw <4 x i16> %6314, %5354
  %6316 = shl nuw nsw i64 %indvars.iv.next3943.2, 2
  %6317 = add nsw i64 %6316, %6269
  %6318 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6317
  %6319 = bitcast i16* %6318 to <4 x i16>*
  store <4 x i16> %6315, <4 x i16>* %6319, align 8, !tbaa !399
  %indvars.iv.next3943.3 = add nuw nsw i64 %indvars.iv3942, 4
  %niter5814.nsub.3 = add i64 %niter5814, -4
  %niter5814.ncmp.3 = icmp eq i64 %niter5814.nsub.3, 0
  br i1 %niter5814.ncmp.3, label %"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c391.us.us.us"

"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c391.us.us.us", %"for input_wrapper.s0.x.v21388.us.us.us"
  %indvars.iv3942.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v21388.us.us.us" ], [ %indvars.iv.next3943.3, %"for input_wrapper.s0.c.c391.us.us.us" ]
  br i1 %lcmp.mod5812.not, label %"end for input_wrapper.s0.c.c392.loopexit.us.us.us", label %"for input_wrapper.s0.c.c391.us.us.us.epil"

"for input_wrapper.s0.c.c391.us.us.us.epil":      ; preds = %"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa", %"for input_wrapper.s0.c.c391.us.us.us.epil"
  %indvars.iv3942.epil = phi i64 [ %indvars.iv.next3943.epil, %"for input_wrapper.s0.c.c391.us.us.us.epil" ], [ %indvars.iv3942.unr, %"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa" ]
  %epil.iter5811 = phi i64 [ %epil.iter5811.sub, %"for input_wrapper.s0.c.c391.us.us.us.epil" ], [ %xtraiter5810, %"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa" ]
  %6320 = add nsw i64 %indvars.iv3942.epil, %6271
  %6321 = shl nsw i64 %6320, 2
  %6322 = add nsw i64 %6321, %5640
  %6323 = getelementptr inbounds i8, i8* %12, i64 %6322
  %6324 = bitcast i8* %6323 to <4 x i8>*
  %6325 = load <4 x i8>, <4 x i8>* %6324, align 4, !tbaa !397
  %6326 = zext <4 x i8> %6325 to <4 x i16>
  %6327 = sub nsw <4 x i16> %6326, %5354
  %6328 = shl nuw nsw i64 %indvars.iv3942.epil, 2
  %6329 = add nsw i64 %6328, %6269
  %6330 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6329
  %6331 = bitcast i16* %6330 to <4 x i16>*
  store <4 x i16> %6327, <4 x i16>* %6331, align 8, !tbaa !399
  %indvars.iv.next3943.epil = add nuw nsw i64 %indvars.iv3942.epil, 1
  %epil.iter5811.sub = add i64 %epil.iter5811, -1
  %epil.iter5811.cmp.not = icmp eq i64 %epil.iter5811.sub, 0
  br i1 %epil.iter5811.cmp.not, label %"end for input_wrapper.s0.c.c392.loopexit.us.us.us", label %"for input_wrapper.s0.c.c391.us.us.us.epil", !llvm.loop !451

"end for input_wrapper.s0.c.c392.loopexit.us.us.us": ; preds = %"for input_wrapper.s0.c.c391.us.us.us.epil", %"end for input_wrapper.s0.c.c392.loopexit.us.us.us.unr-lcssa"
  %indvars.iv.next3945 = add nuw nsw i64 %indvars.iv3944, 1
  %.not2102.us.us.us = icmp eq i64 %indvars.iv3944, %6266
  br i1 %.not2102.us.us.us, label %"end for input_wrapper.s0.x.v21389.us.us", label %"for input_wrapper.s0.x.v21388.us.us.us"

"for convolved.s1.r19$y459.us.us.us.preheader":   ; preds = %"produce convolved458.us"
  %t4443.us = mul nsw i32 %7, %5494
  %6332 = sext i32 %t4443.us to i64
  br label %"for convolved.s1.r19$y459.us.us.us"

"for convolved.s1.r19$y459.us.us.us":             ; preds = %"for convolved.s1.r19$y459.us.us.us.preheader", %"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us"
  %indvars.iv3957 = phi i64 [ 0, %"for convolved.s1.r19$y459.us.us.us.preheader" ], [ %indvars.iv.next3958, %"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us" ]
  %convolved1914.sroa.0.56.us.us.us = phi <8 x i32> [ %5500, %"for convolved.s1.r19$y459.us.us.us.preheader" ], [ %.lcssa5778, %"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us" ]
  %6333 = trunc i64 %indvars.iv3957 to i32
  %6334 = mul i32 %6333, %dilation_y
  %6335 = sub i32 %6334, %t4307
  %t4444.us.us.us = mul nsw i32 %6335, %t4373
  %6336 = mul nsw i64 %indvars.iv3957, %5418
  %6337 = add nsw i64 %6336, %6332
  br label %"for convolved.s1.r19$x462.us.us.us.us"

"for convolved.s1.r19$x462.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us", %"for convolved.s1.r19$y459.us.us.us"
  %indvars.iv3954 = phi i64 [ %indvars.iv.next3955, %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y459.us.us.us" ]
  %convolved1914.sroa.0.57.us.us.us.us = phi <8 x i32> [ %.lcssa5778, %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us" ], [ %convolved1914.sroa.0.56.us.us.us, %"for convolved.s1.r19$y459.us.us.us" ]
  %"convolved.s1.r19$x464.us.us.us.us" = phi i32 [ %6416, %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y459.us.us.us" ]
  %6338 = mul nsw i32 %"convolved.s1.r19$x464.us.us.us.us", %dilation_x
  %6339 = add nsw i32 %6338, %5639
  %6340 = mul nsw i32 %6339, %5339
  %t4446.us.us.us.us = add nsw i32 %6340, %t4444.us.us.us
  %6341 = mul nsw i64 %indvars.iv3954, %5416
  %6342 = add nsw i64 %6337, %6341
  %6343 = sext i32 %t4446.us.us.us.us to i64
  br i1 %5461, label %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r115465.us.us.us.us"

"for convolved.s1.r19$z.r115465.us.us.us.us":     ; preds = %"for convolved.s1.r19$x462.us.us.us.us", %"for convolved.s1.r19$z.r115465.us.us.us.us"
  %indvars.iv3952 = phi i64 [ %indvars.iv.next3953.1, %"for convolved.s1.r19$z.r115465.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x462.us.us.us.us" ]
  %convolved1914.sroa.0.59.us.us.us.us = phi <8 x i32> [ %6391, %"for convolved.s1.r19$z.r115465.us.us.us.us" ], [ %convolved1914.sroa.0.57.us.us.us.us, %"for convolved.s1.r19$x462.us.us.us.us" ]
  %niter5818 = phi i64 [ %niter5818.nsub.1, %"for convolved.s1.r19$z.r115465.us.us.us.us" ], [ %unroll_iter5817, %"for convolved.s1.r19$x462.us.us.us.us" ]
  %6344 = shl nuw nsw i64 %indvars.iv3952, 2
  %6345 = add nsw i64 %6344, %6343
  %6346 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6345
  %6347 = bitcast i16* %6346 to <1 x i32>*
  %6348 = load <1 x i32>, <1 x i32>* %6347, align 8, !tbaa !399
  %6349 = shufflevector <1 x i32> %6348, <1 x i32> undef, <8 x i32> zeroinitializer
  %6350 = bitcast <8 x i32> %6349 to <16 x i16>
  %6351 = shl nuw nsw i64 %indvars.iv3952, 5
  %6352 = add nsw i64 %6351, %6342
  %6353 = getelementptr inbounds i16, i16* %5369, i64 %6352
  %6354 = bitcast i16* %6353 to <16 x i16>*
  %6355 = load <16 x i16>, <16 x i16>* %6354, align 32, !tbaa !412
  %6356 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6350, <16 x i16> %6355)
  %6357 = add <8 x i32> %6356, %convolved1914.sroa.0.59.us.us.us.us
  %6358 = getelementptr inbounds i16, i16* %6346, i64 2
  %6359 = bitcast i16* %6358 to <1 x i32>*
  %6360 = load <1 x i32>, <1 x i32>* %6359, align 4, !tbaa !399
  %6361 = shufflevector <1 x i32> %6360, <1 x i32> undef, <8 x i32> zeroinitializer
  %6362 = bitcast <8 x i32> %6361 to <16 x i16>
  %6363 = getelementptr inbounds i16, i16* %6353, i64 16
  %6364 = bitcast i16* %6363 to <16 x i16>*
  %6365 = load <16 x i16>, <16 x i16>* %6364, align 32, !tbaa !412
  %6366 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6362, <16 x i16> %6365)
  %6367 = add <8 x i32> %6357, %6366
  %indvars.iv.next3953 = or i64 %indvars.iv3952, 1
  %6368 = shl nuw nsw i64 %indvars.iv.next3953, 2
  %6369 = add nsw i64 %6368, %6343
  %6370 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6369
  %6371 = bitcast i16* %6370 to <1 x i32>*
  %6372 = load <1 x i32>, <1 x i32>* %6371, align 8, !tbaa !399
  %6373 = shufflevector <1 x i32> %6372, <1 x i32> undef, <8 x i32> zeroinitializer
  %6374 = bitcast <8 x i32> %6373 to <16 x i16>
  %6375 = shl nuw nsw i64 %indvars.iv.next3953, 5
  %6376 = add nsw i64 %6375, %6342
  %6377 = getelementptr inbounds i16, i16* %5369, i64 %6376
  %6378 = bitcast i16* %6377 to <16 x i16>*
  %6379 = load <16 x i16>, <16 x i16>* %6378, align 32, !tbaa !412
  %6380 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6374, <16 x i16> %6379)
  %6381 = add <8 x i32> %6380, %6367
  %6382 = getelementptr inbounds i16, i16* %6370, i64 2
  %6383 = bitcast i16* %6382 to <1 x i32>*
  %6384 = load <1 x i32>, <1 x i32>* %6383, align 4, !tbaa !399
  %6385 = shufflevector <1 x i32> %6384, <1 x i32> undef, <8 x i32> zeroinitializer
  %6386 = bitcast <8 x i32> %6385 to <16 x i16>
  %6387 = getelementptr inbounds i16, i16* %6377, i64 16
  %6388 = bitcast i16* %6387 to <16 x i16>*
  %6389 = load <16 x i16>, <16 x i16>* %6388, align 32, !tbaa !412
  %6390 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6386, <16 x i16> %6389)
  %6391 = add <8 x i32> %6381, %6390
  %indvars.iv.next3953.1 = add nuw nsw i64 %indvars.iv3952, 2
  %niter5818.nsub.1 = add i64 %niter5818, -2
  %niter5818.ncmp.1 = icmp eq i64 %niter5818.nsub.1, 0
  br i1 %niter5818.ncmp.1, label %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r115465.us.us.us.us"

"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r115465.us.us.us.us", %"for convolved.s1.r19$x462.us.us.us.us"
  %.lcssa5778.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$x462.us.us.us.us" ], [ %6391, %"for convolved.s1.r19$z.r115465.us.us.us.us" ]
  %indvars.iv3952.unr = phi i64 [ 0, %"for convolved.s1.r19$x462.us.us.us.us" ], [ %indvars.iv.next3953.1, %"for convolved.s1.r19$z.r115465.us.us.us.us" ]
  %convolved1914.sroa.0.59.us.us.us.us.unr = phi <8 x i32> [ %convolved1914.sroa.0.57.us.us.us.us, %"for convolved.s1.r19$x462.us.us.us.us" ], [ %6391, %"for convolved.s1.r19$z.r115465.us.us.us.us" ]
  br i1 %lcmp.mod5816.not, label %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r115465.us.us.us.us.epil"

"for convolved.s1.r19$z.r115465.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us.unr-lcssa"
  %6392 = shl nuw nsw i64 %indvars.iv3952.unr, 2
  %6393 = add nsw i64 %6392, %6343
  %6394 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6393
  %6395 = shl nuw nsw i64 %indvars.iv3952.unr, 5
  %6396 = add nsw i64 %6395, %6342
  %6397 = getelementptr inbounds i16, i16* %5369, i64 %6396
  %6398 = bitcast i16* %6394 to <1 x i32>*
  %6399 = load <1 x i32>, <1 x i32>* %6398, align 8, !tbaa !399
  %6400 = shufflevector <1 x i32> %6399, <1 x i32> undef, <8 x i32> zeroinitializer
  %6401 = bitcast <8 x i32> %6400 to <16 x i16>
  %6402 = bitcast i16* %6397 to <16 x i16>*
  %6403 = load <16 x i16>, <16 x i16>* %6402, align 32, !tbaa !412
  %6404 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6401, <16 x i16> %6403)
  %6405 = add <8 x i32> %6404, %convolved1914.sroa.0.59.us.us.us.us.unr
  %6406 = getelementptr inbounds i16, i16* %6394, i64 2
  %6407 = bitcast i16* %6406 to <1 x i32>*
  %6408 = load <1 x i32>, <1 x i32>* %6407, align 4, !tbaa !399
  %6409 = shufflevector <1 x i32> %6408, <1 x i32> undef, <8 x i32> zeroinitializer
  %6410 = bitcast <8 x i32> %6409 to <16 x i16>
  %6411 = getelementptr inbounds i16, i16* %6397, i64 16
  %6412 = bitcast i16* %6411 to <16 x i16>*
  %6413 = load <16 x i16>, <16 x i16>* %6412, align 32, !tbaa !412
  %6414 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6410, <16 x i16> %6413)
  %6415 = add <8 x i32> %6405, %6414
  br label %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us"

"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r115465.us.us.us.us.epil"
  %.lcssa5778 = phi <8 x i32> [ %.lcssa5778.ph, %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us.unr-lcssa" ], [ %6415, %"for convolved.s1.r19$z.r115465.us.us.us.us.epil" ]
  %indvars.iv.next3955 = add nuw nsw i64 %indvars.iv3954, 1
  %6416 = add nuw nsw i32 %"convolved.s1.r19$x464.us.us.us.us", 1
  %.not2082.us.us.us.us = icmp eq i64 %indvars.iv.next3955, %5417
  br i1 %.not2082.us.us.us.us, label %"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x462.us.us.us.us"

"end for convolved.s1.r19$x463.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115466.loopexit.us.us.us.us"
  %indvars.iv.next3958 = add nuw nsw i64 %indvars.iv3957, 1
  %.not2081.us.us.us = icmp eq i64 %indvars.iv.next3958, %5419
  br i1 %.not2081.us.us.us, label %"consume convolved468.us", label %"for convolved.s1.r19$y459.us.us.us"

"for convolved.s1.r19$y479.us.us.us":             ; preds = %then_bb474.us, %"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us"
  %indvars.iv3967 = phi i64 [ %indvars.iv.next3968, %"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us" ], [ 0, %then_bb474.us ]
  %convolved1914.sroa.0.64.us.us.us = phi <8 x i32> [ %.lcssa5779, %"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us" ], [ %5548, %then_bb474.us ]
  %6417 = trunc i64 %indvars.iv3967 to i32
  %6418 = mul i32 %6417, %dilation_y
  %6419 = sub i32 %6418, %t4307
  %t4454.us.us.us = mul nsw i32 %6419, %t4373
  %6420 = mul nsw i64 %indvars.iv3967, %5418
  %6421 = add nsw i64 %6420, %5549
  br label %"for convolved.s1.r19$x482.us.us.us.us"

"for convolved.s1.r19$x482.us.us.us.us":          ; preds = %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us", %"for convolved.s1.r19$y479.us.us.us"
  %indvars.iv3964 = phi i64 [ %indvars.iv.next3965, %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y479.us.us.us" ]
  %convolved1914.sroa.0.65.us.us.us.us = phi <8 x i32> [ %.lcssa5779, %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us" ], [ %convolved1914.sroa.0.64.us.us.us, %"for convolved.s1.r19$y479.us.us.us" ]
  %"convolved.s1.r19$x484.us.us.us.us" = phi i32 [ %6500, %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us" ], [ 0, %"for convolved.s1.r19$y479.us.us.us" ]
  %6422 = mul nsw i32 %"convolved.s1.r19$x484.us.us.us.us", %dilation_x
  %6423 = add nsw i32 %6422, %5637
  %6424 = mul nsw i32 %6423, %5339
  %t4456.us.us.us.us = add nsw i32 %6424, %t4454.us.us.us
  %6425 = mul nsw i64 %indvars.iv3964, %5416
  %6426 = add nsw i64 %6421, %6425
  %6427 = sext i32 %t4456.us.us.us.us to i64
  br i1 %5462, label %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r115485.us.us.us.us"

"for convolved.s1.r19$z.r115485.us.us.us.us":     ; preds = %"for convolved.s1.r19$x482.us.us.us.us", %"for convolved.s1.r19$z.r115485.us.us.us.us"
  %indvars.iv3962 = phi i64 [ %indvars.iv.next3963.1, %"for convolved.s1.r19$z.r115485.us.us.us.us" ], [ 0, %"for convolved.s1.r19$x482.us.us.us.us" ]
  %convolved1914.sroa.0.67.us.us.us.us = phi <8 x i32> [ %6475, %"for convolved.s1.r19$z.r115485.us.us.us.us" ], [ %convolved1914.sroa.0.65.us.us.us.us, %"for convolved.s1.r19$x482.us.us.us.us" ]
  %niter5822 = phi i64 [ %niter5822.nsub.1, %"for convolved.s1.r19$z.r115485.us.us.us.us" ], [ %unroll_iter5821, %"for convolved.s1.r19$x482.us.us.us.us" ]
  %6428 = shl nuw nsw i64 %indvars.iv3962, 2
  %6429 = add nsw i64 %6428, %6427
  %6430 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6429
  %6431 = bitcast i16* %6430 to <1 x i32>*
  %6432 = load <1 x i32>, <1 x i32>* %6431, align 8, !tbaa !399
  %6433 = shufflevector <1 x i32> %6432, <1 x i32> undef, <8 x i32> zeroinitializer
  %6434 = bitcast <8 x i32> %6433 to <16 x i16>
  %6435 = shl nuw nsw i64 %indvars.iv3962, 5
  %6436 = add nsw i64 %6435, %6426
  %6437 = getelementptr inbounds i16, i16* %5369, i64 %6436
  %6438 = bitcast i16* %6437 to <16 x i16>*
  %6439 = load <16 x i16>, <16 x i16>* %6438, align 32, !tbaa !412
  %6440 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6434, <16 x i16> %6439)
  %6441 = add <8 x i32> %6440, %convolved1914.sroa.0.67.us.us.us.us
  %6442 = getelementptr inbounds i16, i16* %6430, i64 2
  %6443 = bitcast i16* %6442 to <1 x i32>*
  %6444 = load <1 x i32>, <1 x i32>* %6443, align 4, !tbaa !399
  %6445 = shufflevector <1 x i32> %6444, <1 x i32> undef, <8 x i32> zeroinitializer
  %6446 = bitcast <8 x i32> %6445 to <16 x i16>
  %6447 = getelementptr inbounds i16, i16* %6437, i64 16
  %6448 = bitcast i16* %6447 to <16 x i16>*
  %6449 = load <16 x i16>, <16 x i16>* %6448, align 32, !tbaa !412
  %6450 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6446, <16 x i16> %6449)
  %6451 = add <8 x i32> %6441, %6450
  %indvars.iv.next3963 = or i64 %indvars.iv3962, 1
  %6452 = shl nuw nsw i64 %indvars.iv.next3963, 2
  %6453 = add nsw i64 %6452, %6427
  %6454 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6453
  %6455 = bitcast i16* %6454 to <1 x i32>*
  %6456 = load <1 x i32>, <1 x i32>* %6455, align 8, !tbaa !399
  %6457 = shufflevector <1 x i32> %6456, <1 x i32> undef, <8 x i32> zeroinitializer
  %6458 = bitcast <8 x i32> %6457 to <16 x i16>
  %6459 = shl nuw nsw i64 %indvars.iv.next3963, 5
  %6460 = add nsw i64 %6459, %6426
  %6461 = getelementptr inbounds i16, i16* %5369, i64 %6460
  %6462 = bitcast i16* %6461 to <16 x i16>*
  %6463 = load <16 x i16>, <16 x i16>* %6462, align 32, !tbaa !412
  %6464 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6458, <16 x i16> %6463)
  %6465 = add <8 x i32> %6464, %6451
  %6466 = getelementptr inbounds i16, i16* %6454, i64 2
  %6467 = bitcast i16* %6466 to <1 x i32>*
  %6468 = load <1 x i32>, <1 x i32>* %6467, align 4, !tbaa !399
  %6469 = shufflevector <1 x i32> %6468, <1 x i32> undef, <8 x i32> zeroinitializer
  %6470 = bitcast <8 x i32> %6469 to <16 x i16>
  %6471 = getelementptr inbounds i16, i16* %6461, i64 16
  %6472 = bitcast i16* %6471 to <16 x i16>*
  %6473 = load <16 x i16>, <16 x i16>* %6472, align 32, !tbaa !412
  %6474 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6470, <16 x i16> %6473)
  %6475 = add <8 x i32> %6465, %6474
  %indvars.iv.next3963.1 = add nuw nsw i64 %indvars.iv3962, 2
  %niter5822.nsub.1 = add i64 %niter5822, -2
  %niter5822.ncmp.1 = icmp eq i64 %niter5822.nsub.1, 0
  br i1 %niter5822.ncmp.1, label %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r115485.us.us.us.us"

"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r115485.us.us.us.us", %"for convolved.s1.r19$x482.us.us.us.us"
  %.lcssa5779.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$x482.us.us.us.us" ], [ %6475, %"for convolved.s1.r19$z.r115485.us.us.us.us" ]
  %indvars.iv3962.unr = phi i64 [ 0, %"for convolved.s1.r19$x482.us.us.us.us" ], [ %indvars.iv.next3963.1, %"for convolved.s1.r19$z.r115485.us.us.us.us" ]
  %convolved1914.sroa.0.67.us.us.us.us.unr = phi <8 x i32> [ %convolved1914.sroa.0.65.us.us.us.us, %"for convolved.s1.r19$x482.us.us.us.us" ], [ %6475, %"for convolved.s1.r19$z.r115485.us.us.us.us" ]
  br i1 %lcmp.mod5820.not, label %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us", label %"for convolved.s1.r19$z.r115485.us.us.us.us.epil"

"for convolved.s1.r19$z.r115485.us.us.us.us.epil": ; preds = %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us.unr-lcssa"
  %6476 = shl nuw nsw i64 %indvars.iv3962.unr, 2
  %6477 = add nsw i64 %6476, %6427
  %6478 = getelementptr inbounds i16, i16* %input_wrapper371.us, i64 %6477
  %6479 = shl nuw nsw i64 %indvars.iv3962.unr, 5
  %6480 = add nsw i64 %6479, %6426
  %6481 = getelementptr inbounds i16, i16* %5369, i64 %6480
  %6482 = bitcast i16* %6478 to <1 x i32>*
  %6483 = load <1 x i32>, <1 x i32>* %6482, align 8, !tbaa !399
  %6484 = shufflevector <1 x i32> %6483, <1 x i32> undef, <8 x i32> zeroinitializer
  %6485 = bitcast <8 x i32> %6484 to <16 x i16>
  %6486 = bitcast i16* %6481 to <16 x i16>*
  %6487 = load <16 x i16>, <16 x i16>* %6486, align 32, !tbaa !412
  %6488 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6485, <16 x i16> %6487)
  %6489 = add <8 x i32> %6488, %convolved1914.sroa.0.67.us.us.us.us.unr
  %6490 = getelementptr inbounds i16, i16* %6478, i64 2
  %6491 = bitcast i16* %6490 to <1 x i32>*
  %6492 = load <1 x i32>, <1 x i32>* %6491, align 4, !tbaa !399
  %6493 = shufflevector <1 x i32> %6492, <1 x i32> undef, <8 x i32> zeroinitializer
  %6494 = bitcast <8 x i32> %6493 to <16 x i16>
  %6495 = getelementptr inbounds i16, i16* %6481, i64 16
  %6496 = bitcast i16* %6495 to <16 x i16>*
  %6497 = load <16 x i16>, <16 x i16>* %6496, align 32, !tbaa !412
  %6498 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %6494, <16 x i16> %6497)
  %6499 = add <8 x i32> %6489, %6498
  br label %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us"

"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r115485.us.us.us.us.epil"
  %.lcssa5779 = phi <8 x i32> [ %.lcssa5779.ph, %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us.unr-lcssa" ], [ %6499, %"for convolved.s1.r19$z.r115485.us.us.us.us.epil" ]
  %indvars.iv.next3965 = add nuw nsw i64 %indvars.iv3964, 1
  %6500 = add nuw nsw i32 %"convolved.s1.r19$x484.us.us.us.us", 1
  %.not2078.us.us.us.us = icmp eq i64 %indvars.iv.next3965, %5417
  br i1 %.not2078.us.us.us.us, label %"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us", label %"for convolved.s1.r19$x482.us.us.us.us"

"end for convolved.s1.r19$x483.loopexit.split.us.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115486.loopexit.us.us.us.us"
  %indvars.iv.next3968 = add nuw nsw i64 %indvars.iv3967, 1
  %.not2077.us.us.us = icmp eq i64 %indvars.iv.next3968, %5419
  br i1 %.not2077.us.us.us, label %"consume convolved488.us", label %"for convolved.s1.r19$y479.us.us.us"

then_bb540:                                       ; preds = %if.end.i2409, %pseudostack_alloc.exit2414
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.04852" = phi i64 [ %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.0", %pseudostack_alloc.exit2414 ], [ %add.i2407, %if.end.i2409 ]
  %6501 = alloca i8*, i64 %226, align 32
  %6502 = bitcast i8** %6501 to i32*
  %6503 = bitcast i8** %6501 to i8*
  br label %"produce bias_im_global_wrapper$0542"

"produce bias_im_global_wrapper$0542":            ; preds = %pseudostack_alloc.exit2414, %then_bb540
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.04851" = phi i64 [ %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.04852", %then_bb540 ], [ %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.0", %pseudostack_alloc.exit2414 ]
  %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.2" = phi i8* [ %6503, %then_bb540 ], [ %227, %pseudostack_alloc.exit2414 ]
  %"bias_im_global_wrapper$0541" = phi i32* [ %6502, %then_bb540 ], [ %228, %pseudostack_alloc.exit2414 ]
  %6504 = icmp sgt i32 %163, 0
  br i1 %6504, label %"for bias_im_global_wrapper$0.s0._0543.preheader", label %"consume bias_im_global_wrapper$0547", !prof !387

"for bias_im_global_wrapper$0.s0._0543.preheader": ; preds = %"produce bias_im_global_wrapper$0542"
  %6505 = zext i32 %163 to i64
  %min.iters.check5425 = icmp ult i32 %163, 32
  br i1 %min.iters.check5425, label %"for bias_im_global_wrapper$0.s0._0543.preheader5715", label %vector.ph5426

vector.ph5426:                                    ; preds = %"for bias_im_global_wrapper$0.s0._0543.preheader"
  %n.vec5428 = and i64 %6505, 4294967264
  %6506 = add nsw i64 %n.vec5428, -32
  %6507 = lshr exact i64 %6506, 5
  %6508 = add nuw nsw i64 %6507, 1
  %xtraiter5959 = and i64 %6508, 3
  %6509 = icmp ult i64 %6506, 96
  br i1 %6509, label %middle.block5422.unr-lcssa, label %vector.ph5426.new

vector.ph5426.new:                                ; preds = %vector.ph5426
  %unroll_iter5962 = and i64 %6508, 1152921504606846972
  br label %vector.body5424

vector.body5424:                                  ; preds = %vector.body5424, %vector.ph5426.new
  %index5429 = phi i64 [ 0, %vector.ph5426.new ], [ %index.next5430.3, %vector.body5424 ]
  %niter5963 = phi i64 [ %unroll_iter5962, %vector.ph5426.new ], [ %niter5963.nsub.3, %vector.body5424 ]
  %6510 = getelementptr inbounds i32, i32* %161, i64 %index5429
  %6511 = bitcast i32* %6510 to <8 x i32>*
  %wide.load5433 = load <8 x i32>, <8 x i32>* %6511, align 4, !tbaa !388
  %6512 = getelementptr inbounds i32, i32* %6510, i64 8
  %6513 = bitcast i32* %6512 to <8 x i32>*
  %wide.load5434 = load <8 x i32>, <8 x i32>* %6513, align 4, !tbaa !388
  %6514 = getelementptr inbounds i32, i32* %6510, i64 16
  %6515 = bitcast i32* %6514 to <8 x i32>*
  %wide.load5435 = load <8 x i32>, <8 x i32>* %6515, align 4, !tbaa !388
  %6516 = getelementptr inbounds i32, i32* %6510, i64 24
  %6517 = bitcast i32* %6516 to <8 x i32>*
  %wide.load5436 = load <8 x i32>, <8 x i32>* %6517, align 4, !tbaa !388
  %6518 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %index5429
  %6519 = bitcast i32* %6518 to <8 x i32>*
  store <8 x i32> %wide.load5433, <8 x i32>* %6519, align 4, !tbaa !391
  %6520 = getelementptr inbounds i32, i32* %6518, i64 8
  %6521 = bitcast i32* %6520 to <8 x i32>*
  store <8 x i32> %wide.load5434, <8 x i32>* %6521, align 4, !tbaa !391
  %6522 = getelementptr inbounds i32, i32* %6518, i64 16
  %6523 = bitcast i32* %6522 to <8 x i32>*
  store <8 x i32> %wide.load5435, <8 x i32>* %6523, align 4, !tbaa !391
  %6524 = getelementptr inbounds i32, i32* %6518, i64 24
  %6525 = bitcast i32* %6524 to <8 x i32>*
  store <8 x i32> %wide.load5436, <8 x i32>* %6525, align 4, !tbaa !391
  %index.next5430 = or i64 %index5429, 32
  %6526 = getelementptr inbounds i32, i32* %161, i64 %index.next5430
  %6527 = bitcast i32* %6526 to <8 x i32>*
  %wide.load5433.1 = load <8 x i32>, <8 x i32>* %6527, align 4, !tbaa !388
  %6528 = getelementptr inbounds i32, i32* %6526, i64 8
  %6529 = bitcast i32* %6528 to <8 x i32>*
  %wide.load5434.1 = load <8 x i32>, <8 x i32>* %6529, align 4, !tbaa !388
  %6530 = getelementptr inbounds i32, i32* %6526, i64 16
  %6531 = bitcast i32* %6530 to <8 x i32>*
  %wide.load5435.1 = load <8 x i32>, <8 x i32>* %6531, align 4, !tbaa !388
  %6532 = getelementptr inbounds i32, i32* %6526, i64 24
  %6533 = bitcast i32* %6532 to <8 x i32>*
  %wide.load5436.1 = load <8 x i32>, <8 x i32>* %6533, align 4, !tbaa !388
  %6534 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %index.next5430
  %6535 = bitcast i32* %6534 to <8 x i32>*
  store <8 x i32> %wide.load5433.1, <8 x i32>* %6535, align 4, !tbaa !391
  %6536 = getelementptr inbounds i32, i32* %6534, i64 8
  %6537 = bitcast i32* %6536 to <8 x i32>*
  store <8 x i32> %wide.load5434.1, <8 x i32>* %6537, align 4, !tbaa !391
  %6538 = getelementptr inbounds i32, i32* %6534, i64 16
  %6539 = bitcast i32* %6538 to <8 x i32>*
  store <8 x i32> %wide.load5435.1, <8 x i32>* %6539, align 4, !tbaa !391
  %6540 = getelementptr inbounds i32, i32* %6534, i64 24
  %6541 = bitcast i32* %6540 to <8 x i32>*
  store <8 x i32> %wide.load5436.1, <8 x i32>* %6541, align 4, !tbaa !391
  %index.next5430.1 = or i64 %index5429, 64
  %6542 = getelementptr inbounds i32, i32* %161, i64 %index.next5430.1
  %6543 = bitcast i32* %6542 to <8 x i32>*
  %wide.load5433.2 = load <8 x i32>, <8 x i32>* %6543, align 4, !tbaa !388
  %6544 = getelementptr inbounds i32, i32* %6542, i64 8
  %6545 = bitcast i32* %6544 to <8 x i32>*
  %wide.load5434.2 = load <8 x i32>, <8 x i32>* %6545, align 4, !tbaa !388
  %6546 = getelementptr inbounds i32, i32* %6542, i64 16
  %6547 = bitcast i32* %6546 to <8 x i32>*
  %wide.load5435.2 = load <8 x i32>, <8 x i32>* %6547, align 4, !tbaa !388
  %6548 = getelementptr inbounds i32, i32* %6542, i64 24
  %6549 = bitcast i32* %6548 to <8 x i32>*
  %wide.load5436.2 = load <8 x i32>, <8 x i32>* %6549, align 4, !tbaa !388
  %6550 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %index.next5430.1
  %6551 = bitcast i32* %6550 to <8 x i32>*
  store <8 x i32> %wide.load5433.2, <8 x i32>* %6551, align 4, !tbaa !391
  %6552 = getelementptr inbounds i32, i32* %6550, i64 8
  %6553 = bitcast i32* %6552 to <8 x i32>*
  store <8 x i32> %wide.load5434.2, <8 x i32>* %6553, align 4, !tbaa !391
  %6554 = getelementptr inbounds i32, i32* %6550, i64 16
  %6555 = bitcast i32* %6554 to <8 x i32>*
  store <8 x i32> %wide.load5435.2, <8 x i32>* %6555, align 4, !tbaa !391
  %6556 = getelementptr inbounds i32, i32* %6550, i64 24
  %6557 = bitcast i32* %6556 to <8 x i32>*
  store <8 x i32> %wide.load5436.2, <8 x i32>* %6557, align 4, !tbaa !391
  %index.next5430.2 = or i64 %index5429, 96
  %6558 = getelementptr inbounds i32, i32* %161, i64 %index.next5430.2
  %6559 = bitcast i32* %6558 to <8 x i32>*
  %wide.load5433.3 = load <8 x i32>, <8 x i32>* %6559, align 4, !tbaa !388
  %6560 = getelementptr inbounds i32, i32* %6558, i64 8
  %6561 = bitcast i32* %6560 to <8 x i32>*
  %wide.load5434.3 = load <8 x i32>, <8 x i32>* %6561, align 4, !tbaa !388
  %6562 = getelementptr inbounds i32, i32* %6558, i64 16
  %6563 = bitcast i32* %6562 to <8 x i32>*
  %wide.load5435.3 = load <8 x i32>, <8 x i32>* %6563, align 4, !tbaa !388
  %6564 = getelementptr inbounds i32, i32* %6558, i64 24
  %6565 = bitcast i32* %6564 to <8 x i32>*
  %wide.load5436.3 = load <8 x i32>, <8 x i32>* %6565, align 4, !tbaa !388
  %6566 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %index.next5430.2
  %6567 = bitcast i32* %6566 to <8 x i32>*
  store <8 x i32> %wide.load5433.3, <8 x i32>* %6567, align 4, !tbaa !391
  %6568 = getelementptr inbounds i32, i32* %6566, i64 8
  %6569 = bitcast i32* %6568 to <8 x i32>*
  store <8 x i32> %wide.load5434.3, <8 x i32>* %6569, align 4, !tbaa !391
  %6570 = getelementptr inbounds i32, i32* %6566, i64 16
  %6571 = bitcast i32* %6570 to <8 x i32>*
  store <8 x i32> %wide.load5435.3, <8 x i32>* %6571, align 4, !tbaa !391
  %6572 = getelementptr inbounds i32, i32* %6566, i64 24
  %6573 = bitcast i32* %6572 to <8 x i32>*
  store <8 x i32> %wide.load5436.3, <8 x i32>* %6573, align 4, !tbaa !391
  %index.next5430.3 = add i64 %index5429, 128
  %niter5963.nsub.3 = add i64 %niter5963, -4
  %niter5963.ncmp.3 = icmp eq i64 %niter5963.nsub.3, 0
  br i1 %niter5963.ncmp.3, label %middle.block5422.unr-lcssa, label %vector.body5424, !llvm.loop !452

middle.block5422.unr-lcssa:                       ; preds = %vector.body5424, %vector.ph5426
  %index5429.unr = phi i64 [ 0, %vector.ph5426 ], [ %index.next5430.3, %vector.body5424 ]
  %lcmp.mod5961.not = icmp eq i64 %xtraiter5959, 0
  br i1 %lcmp.mod5961.not, label %middle.block5422, label %vector.body5424.epil

vector.body5424.epil:                             ; preds = %middle.block5422.unr-lcssa, %vector.body5424.epil
  %index5429.epil = phi i64 [ %index.next5430.epil, %vector.body5424.epil ], [ %index5429.unr, %middle.block5422.unr-lcssa ]
  %epil.iter5960 = phi i64 [ %epil.iter5960.sub, %vector.body5424.epil ], [ %xtraiter5959, %middle.block5422.unr-lcssa ]
  %6574 = getelementptr inbounds i32, i32* %161, i64 %index5429.epil
  %6575 = bitcast i32* %6574 to <8 x i32>*
  %wide.load5433.epil = load <8 x i32>, <8 x i32>* %6575, align 4, !tbaa !388
  %6576 = getelementptr inbounds i32, i32* %6574, i64 8
  %6577 = bitcast i32* %6576 to <8 x i32>*
  %wide.load5434.epil = load <8 x i32>, <8 x i32>* %6577, align 4, !tbaa !388
  %6578 = getelementptr inbounds i32, i32* %6574, i64 16
  %6579 = bitcast i32* %6578 to <8 x i32>*
  %wide.load5435.epil = load <8 x i32>, <8 x i32>* %6579, align 4, !tbaa !388
  %6580 = getelementptr inbounds i32, i32* %6574, i64 24
  %6581 = bitcast i32* %6580 to <8 x i32>*
  %wide.load5436.epil = load <8 x i32>, <8 x i32>* %6581, align 4, !tbaa !388
  %6582 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %index5429.epil
  %6583 = bitcast i32* %6582 to <8 x i32>*
  store <8 x i32> %wide.load5433.epil, <8 x i32>* %6583, align 4, !tbaa !391
  %6584 = getelementptr inbounds i32, i32* %6582, i64 8
  %6585 = bitcast i32* %6584 to <8 x i32>*
  store <8 x i32> %wide.load5434.epil, <8 x i32>* %6585, align 4, !tbaa !391
  %6586 = getelementptr inbounds i32, i32* %6582, i64 16
  %6587 = bitcast i32* %6586 to <8 x i32>*
  store <8 x i32> %wide.load5435.epil, <8 x i32>* %6587, align 4, !tbaa !391
  %6588 = getelementptr inbounds i32, i32* %6582, i64 24
  %6589 = bitcast i32* %6588 to <8 x i32>*
  store <8 x i32> %wide.load5436.epil, <8 x i32>* %6589, align 4, !tbaa !391
  %index.next5430.epil = add i64 %index5429.epil, 32
  %epil.iter5960.sub = add i64 %epil.iter5960, -1
  %epil.iter5960.cmp.not = icmp eq i64 %epil.iter5960.sub, 0
  br i1 %epil.iter5960.cmp.not, label %middle.block5422, label %vector.body5424.epil, !llvm.loop !453

middle.block5422:                                 ; preds = %vector.body5424.epil, %middle.block5422.unr-lcssa
  %cmp.n5432 = icmp eq i64 %n.vec5428, %6505
  br i1 %cmp.n5432, label %"consume bias_im_global_wrapper$0547", label %"for bias_im_global_wrapper$0.s0._0543.preheader5715"

"for bias_im_global_wrapper$0.s0._0543.preheader5715": ; preds = %"for bias_im_global_wrapper$0.s0._0543.preheader", %middle.block5422
  %indvars.iv4345.ph = phi i64 [ 0, %"for bias_im_global_wrapper$0.s0._0543.preheader" ], [ %n.vec5428, %middle.block5422 ]
  br label %"for bias_im_global_wrapper$0.s0._0543"

"for bias_im_global_wrapper$0.s0._0543":          ; preds = %"for bias_im_global_wrapper$0.s0._0543.preheader5715", %"for bias_im_global_wrapper$0.s0._0543"
  %indvars.iv4345 = phi i64 [ %indvars.iv.next4346, %"for bias_im_global_wrapper$0.s0._0543" ], [ %indvars.iv4345.ph, %"for bias_im_global_wrapper$0.s0._0543.preheader5715" ]
  %6590 = getelementptr inbounds i32, i32* %161, i64 %indvars.iv4345
  %6591 = load i32, i32* %6590, align 4, !tbaa !388
  %6592 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %indvars.iv4345
  store i32 %6591, i32* %6592, align 4, !tbaa !391
  %indvars.iv.next4346 = add nuw nsw i64 %indvars.iv4345, 1
  %.not2069 = icmp eq i64 %indvars.iv.next4346, %6505
  br i1 %.not2069, label %"consume bias_im_global_wrapper$0547", label %"for bias_im_global_wrapper$0.s0._0543", !llvm.loop !454

"consume bias_im_global_wrapper$0547":            ; preds = %"for bias_im_global_wrapper$0.s0._0543", %middle.block5422, %"produce bias_im_global_wrapper$0542"
  %t3702551 = mul nsw i32 %178, %177
  %t3703552 = mul nsw i32 %181, %179
  %t3704553 = icmp slt i32 %dilation_x, 0
  %6593 = add nsw i32 %168, -1
  %t3705554 = mul nsw i32 %6593, %dilation_x
  %t3706555 = icmp slt i32 %stride_x, 0
  br i1 %194, label %then_bb549, label %next_bb550

if.then.i2454:                                    ; preds = %"end for output.s0.y.rebased1499", %"end for output.s0.y.rebased1281", %"end for output.s0.y.rebased1043", %"end for output.s0.y.rebased816", %"end for output.s0.y.rebased590", %then_bb549, %then_bb775, %then_bb1002, %then_bb1241, %next_bb1242
  %tobool.not.i2477 = icmp ne i8* %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.2", null
  %cmp.i2479 = icmp ugt i64 %"bias_im_global_wrapper$0.pseudostack_slot.sroa.15.04851", 16384
  %or.cond = and i1 %tobool.not.i2477, %cmp.i2479
  br i1 %or.cond, label %if.then.i2481, label %call_destructor.exit2456

if.then.i2481:                                    ; preds = %if.then.i2454
  call void @halide_free(i8* null, i8* nonnull %"bias_im_global_wrapper$0.pseudostack_slot.sroa.0.2") #17
  br label %call_destructor.exit2456

call_destructor.exit2456:                         ; preds = %if.then.i2481, %if.then.i2454
  ret i32 0

then_bb549:                                       ; preds = %"consume bias_im_global_wrapper$0547"
  %t3707556 = add nsw i32 %166, 1
  %a244 = ashr i32 %t3707556, 2
  %6594 = icmp sgt i32 %166, 2
  %t3708557 = select i1 %6594, i32 %a244, i32 0
  %a245 = ashr i32 %t3707556, 3
  %6595 = icmp sgt i32 %166, 6
  %t3709558 = select i1 %6595, i32 %a245, i32 0
  %6596 = add nsw i32 %170, -1
  %t3710559 = mul nsw i32 %6596, %dilation_y
  %a251 = ashr i32 %t3707556, 1
  %6597 = icmp eq i32 %174, 4
  %6598 = icmp eq i32 %176, 4
  %t3712560 = and i1 %6597, %6598
  %t3713561 = add nsw i32 %166, -1
  %t3714562 = ashr i32 %t3713561, 1
  %6599 = shl nsw i32 %t3714562, 2
  %b248 = or i32 %6599, 3
  %t3716563 = icmp slt i32 %dilation_y, 0
  %t3677564 = select i1 %t3716563, i32 %t3710559, i32 0
  %6600 = icmp slt i32 %174, 16
  %6601 = icmp slt i32 %174, 8
  %6602 = icmp slt i32 %174, 4
  %6603 = icmp slt i32 %a251, 1
  %6604 = select i1 %6603, i32 %a251, i32 1
  %6605 = add nsw i32 %6604, %t3714562
  %6606 = select i1 %6602, i32 %a251, i32 %6605
  %6607 = icmp slt i32 %a251, 2
  %6608 = select i1 %6607, i32 %a251, i32 2
  %6609 = and i32 %t3714562, -2
  %6610 = add nsw i32 %6608, %6609
  %6611 = select i1 %6601, i32 %6606, i32 %6610
  %6612 = icmp slt i32 %a251, 4
  %6613 = select i1 %6612, i32 %a251, i32 4
  %6614 = and i32 %t3714562, -4
  %6615 = add nsw i32 %6613, %6614
  %a247 = select i1 %6600, i32 %6611, i32 %6615
  %6616 = icmp sgt i32 %a251, %a247
  %6617 = select i1 %6616, i32 %a247, i32 %a251
  %6618 = shl nsw i32 %6617, 2
  %6619 = add nsw i32 %6618, -1
  %a246 = select i1 %t3712560, i32 %b248, i32 %6619
  %6620 = icmp sgt i32 %a246, %b248
  %a263 = select i1 %6620, i32 %a246, i32 %b248
  %6621 = icmp sgt i32 %166, 0
  %6622 = add nuw nsw i32 %185, 1
  %t3699570 = ashr i32 %6622, 1
  %6623 = add nsw i32 %166, 7
  %6624 = ashr i32 %6623, 3
  %t3692572 = sub nsw i32 %6624, %t3709558
  %6625 = add nsw i32 %166, 3
  %6626 = ashr i32 %6625, 2
  %t3696573 = sub nsw i32 %6626, %t3708557
  %6627 = select i1 %t3704553, i32 %t3705554, i32 0
  %6628 = select i1 %t3706555, i32 %185, i32 1
  %6629 = add i32 %184, -1
  %6630 = add i32 %6629, %6628
  %6631 = mul nsw i32 %6630, %stride_x
  %b258 = add nsw i32 %6631, %6627
  %6632 = icmp sgt i32 %180, 0
  br i1 %6632, label %"for output.s0.b.rebased577.preheader", label %if.then.i2454, !prof !387

"for output.s0.b.rebased577.preheader":           ; preds = %then_bb549
  %t3700571 = ashr i32 %163, 5
  %t3698569 = select i1 %6621, i32 %a251, i32 0
  %t3676565 = select i1 %t3716563, i32 0, i32 %t3710559
  %6633 = mul nsw i32 %176, %175
  %6634 = add nsw i32 %185, -1
  %6635 = select i1 %t3706555, i32 0, i32 %6634
  %6636 = add nsw i32 %6635, %184
  %6637 = mul nsw i32 %6636, %stride_x
  %6638 = select i1 %t3704553, i32 0, i32 %t3705554
  %b256 = add nsw i32 %6637, %6638
  %a255 = sub i32 %b256, %b258
  %a257 = ashr i32 %a255, 3
  %6639 = add nsw i32 %a255, 1
  %a252 = ashr i32 %6639, 3
  %6640 = icmp sgt i32 %a255, 6
  %t3735580 = select i1 %6640, i32 %a252, i32 0
  %.neg2820 = mul i32 %189, %187
  %.neg2821 = mul i32 %186, %184
  %.neg2822 = mul i32 %190, %179
  %6641 = add i32 %t3702551, %6633
  %6642 = add i32 %6641, %t3703552
  %.neg2826 = mul i32 %175, -4
  %6643 = icmp sgt i32 %a257, -1
  %6644 = select i1 %6643, i32 %a257, i32 -1
  %6645 = sub nsw i32 %6644, %t3735580
  %6646 = icmp sgt i32 %188, 0
  %6647 = icmp sgt i32 %a263, -1
  %t4575 = select i1 %6647, i32 %a263, i32 -1
  %6648 = icmp sgt i32 %a255, -1
  %6649 = select i1 %6648, i32 %6639, i32 0
  %t4576 = zext i32 %6649 to i64
  %6650 = add nsw i32 %t4575, 1
  %6651 = zext i32 %6650 to i64
  %t4577 = shl nuw nsw i64 %6651, 1
  %t4579 = mul i64 %t4577, %t4576
  %6652 = add nsw i32 %a263, 1
  %t3773641 = shl nsw i32 %a251, 2
  %6653 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %6654 = shufflevector <16 x i8> %6653, <16 x i8> undef, <16 x i32> zeroinitializer
  %6655 = zext <16 x i8> %6654 to <16 x i16>
  %6656 = icmp sgt i32 %t3692572, 0
  %6657 = insertelement <16 x i32> undef, i32 %t3773641, i32 0
  %6658 = shufflevector <16 x i32> %6657, <16 x i32> undef, <8 x i32> zeroinitializer
  %6659 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %6660 = shufflevector <8 x i8> %6659, <8 x i8> undef, <8 x i32> zeroinitializer
  %6661 = zext <8 x i8> %6660 to <8 x i16>
  %6662 = icmp sgt i32 %t3696573, 0
  %6663 = insertelement <8 x i32> undef, i32 %t3773641, i32 0
  %6664 = shufflevector <8 x i32> %6663, <8 x i32> undef, <8 x i32> zeroinitializer
  %6665 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %6666 = shufflevector <4 x i8> %6665, <4 x i8> undef, <4 x i32> zeroinitializer
  %6667 = zext <4 x i8> %6666 to <4 x i16>
  %6668 = zext i8 %input_zero to i16
  %t3739599 = mul nsw i32 %6639, %6652
  %.neg2827 = sub i32 %.neg2826, %t3702551
  %t3688576.neg = sub i32 %.neg2827, %t3703552
  %6669 = shl i32 %6652, 1
  %6670 = mul nsw i32 %a263, 7
  %6671 = mul nsw i32 %a263, 6
  %6672 = mul nsw i32 %a263, 5
  %6673 = shl nsw i32 %a263, 2
  %6674 = mul nsw i32 %a263, 3
  %6675 = shl nsw i32 %a263, 1
  %6676 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %6677 = shufflevector <32 x i8> %6676, <32 x i8> undef, <32 x i32> zeroinitializer
  %6678 = zext <32 x i8> %6677 to <32 x i16>
  %6679 = icmp sgt i32 %6645, -1
  %reass.add2836 = add i32 %.neg2820, %.neg2821
  %reass.add2837 = add i32 %reass.add2836, %.neg2822
  %b270 = add nsw i32 %185, -2
  %6680 = icmp sgt i32 %163, 31
  %6681 = icmp sgt i32 %170, 0
  %6682 = icmp sgt i32 %168, 0
  %6683 = bitcast i8* %164 to i16*
  %6684 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %6685 = shufflevector <32 x i32> %6684, <32 x i32> undef, <32 x i32> zeroinitializer
  %6686 = sext <32 x i32> %6685 to <32 x i64>
  %6687 = insertelement <32 x i32> undef, i32 %output_shift, i32 0
  %6688 = shufflevector <32 x i32> %6687, <32 x i32> undef, <8 x i32> zeroinitializer
  %6689 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %6688, i1 false) #11
  %6690 = shufflevector <8 x i32> %6689, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4583 = shufflevector <16 x i32> %6690, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6691 = icmp slt <8 x i32> %6688, zeroinitializer
  %6692 = shufflevector <8 x i1> %6691, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6693 = shufflevector <16 x i1> %6692, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6694 = xor <32 x i1> %6693, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %6695 = shufflevector <32 x i1> %6694, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6696 = shufflevector <32 x i1> %6694, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6697 = shufflevector <32 x i1> %6694, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6698 = shufflevector <32 x i1> %6694, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6699 = icmp sgt i32 %output_shift, 0
  %6700 = select i1 %6699, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %6701 = add nsw i32 %output_shift, -1
  %6702 = insertelement <32 x i32> undef, i32 %6701, i32 0
  %6703 = shufflevector <32 x i32> %6702, <32 x i32> undef, <8 x i32> zeroinitializer
  %6704 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %6703, i1 false) #11
  %6705 = shufflevector <8 x i32> %6704, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4585 = shufflevector <16 x i32> %6705, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6706 = icmp slt <8 x i32> %6703, zeroinitializer
  %6707 = shufflevector <8 x i1> %6706, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6708 = shufflevector <16 x i1> %6707, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6709 = xor <32 x i1> %6708, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %6710 = shufflevector <32 x i1> %6709, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %6711 = shufflevector <32 x i1> %6709, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6712 = shufflevector <32 x i1> %6709, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %6713 = shufflevector <32 x i1> %6709, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6714 = zext i8 %output_zero to i16
  %6715 = insertelement <32 x i16> undef, i16 %6714, i32 0
  %6716 = shufflevector <32 x i16> %6715, <32 x i16> undef, <16 x i32> zeroinitializer
  %6717 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %b272 = shufflevector <32 x i8> %6717, <32 x i8> undef, <32 x i32> zeroinitializer
  %6718 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %b271 = shufflevector <32 x i8> %6718, <32 x i8> undef, <32 x i32> zeroinitializer
  %6719 = zext i32 %t3709558 to i64
  %6720 = sext i32 %b258 to i64
  %6721 = sext i32 %176 to i64
  %6722 = zext i32 %a255 to i64
  %6723 = sext i32 %t3709558 to i64
  %6724 = zext i32 %t3692572 to i64
  %6725 = sext i32 %178 to i64
  %6726 = zext i32 %t3708557 to i64
  %6727 = sext i32 %t3708557 to i64
  %6728 = zext i32 %t3696573 to i64
  %6729 = zext i32 %t3698569 to i64
  %6730 = zext i32 %t3773641 to i64
  %6731 = zext i32 %a251 to i64
  %6732 = zext i32 %t3735580 to i64
  %6733 = sext i32 %6652 to i64
  %6734 = zext i32 %6645 to i64
  %6735 = sext i32 %t3739599 to i64
  %6736 = sext i32 %169 to i64
  %6737 = sext i32 %dilation_x to i64
  %6738 = zext i32 %168 to i64
  %6739 = sext i32 %171 to i64
  %6740 = zext i32 %170 to i64
  %6741 = sext i32 %167 to i64
  %6742 = zext i32 %t3700571 to i64
  %6743 = sub i32 %t3676565, %t3677564
  %6744 = sext i32 %187 to i64
  %6745 = sext i32 %stride_y to i64
  %6746 = sext i32 %t3677564 to i64
  %6747 = zext i32 %179 to i64
  %zext4803 = zext i32 %180 to i64
  %zext4798 = zext i32 %188 to i64
  %a265 = add nsw i32 %6743, 1
  %6748 = icmp sgt i32 %6743, -1
  %6749 = select i1 %6748, i32 %a265, i32 0
  %t4578 = zext i32 %6749 to i64
  %6750 = mul i64 %t4579, %t4578
  %6751 = add i64 %6750, 6
  %6752 = zext i32 %6743 to i64
  %6753 = zext i32 %6743 to i64
  %6754 = zext i32 %6743 to i64
  %6755 = zext i32 %6743 to i64
  %6756 = zext i32 %6743 to i64
  %6757 = add nsw i64 %6719, -1
  %6758 = add nsw i64 %6719, -1
  %6759 = add nsw i64 %6726, -1
  %6760 = add nsw i64 %6726, -1
  %6761 = add nsw i64 %6729, -1
  %6762 = and i64 %6730, 4294967232
  %6763 = add nsw i64 %6762, -64
  %6764 = lshr exact i64 %6763, 6
  %6765 = add nuw nsw i64 %6764, 1
  %6766 = add nsw i64 %6731, -1
  %6767 = or i32 %6743, %a255
  %6768 = icmp slt i32 %6767, 0
  %xtraiter6108 = and i64 %6719, 3
  %6769 = icmp ult i64 %6757, 3
  %unroll_iter6111 = and i64 %6719, 4294967292
  %lcmp.mod6110.not = icmp eq i64 %xtraiter6108, 0
  %xtraiter6113 = and i64 %6719, 3
  %6770 = icmp ult i64 %6758, 3
  %unroll_iter6116 = and i64 %6719, 4294967292
  %lcmp.mod6115.not = icmp eq i64 %xtraiter6113, 0
  %xtraiter6118 = and i64 %6726, 3
  %6771 = icmp ult i64 %6759, 3
  %unroll_iter6121 = and i64 %6726, 4294967292
  %lcmp.mod6120.not = icmp eq i64 %xtraiter6118, 0
  %xtraiter6123 = and i64 %6726, 3
  %6772 = icmp ult i64 %6760, 3
  %unroll_iter6126 = and i64 %6726, 4294967292
  %lcmp.mod6125.not = icmp eq i64 %xtraiter6123, 0
  %brmerge5039.demorgan = and i1 %6648, %6621
  %xtraiter6128 = and i64 %6729, 3
  %6773 = icmp ult i64 %6761, 3
  %unroll_iter6131 = and i64 %6729, 4294967292
  %lcmp.mod6130.not = icmp eq i64 %xtraiter6128, 0
  %brmerge5042.demorgan = and i1 %6648, %6621
  %min.iters.check5612 = icmp ult i32 %t3773641, 8
  %min.iters.check5615 = icmp ult i32 %t3773641, 64
  %n.vec5619 = and i64 %6730, 4294967232
  %broadcast.splatinsert5627 = insertelement <16 x i16> poison, i16 %6668, i32 0
  %broadcast.splat5628 = shufflevector <16 x i16> %broadcast.splatinsert5627, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5629 = insertelement <16 x i16> poison, i16 %6668, i32 0
  %broadcast.splat5630 = shufflevector <16 x i16> %broadcast.splatinsert5629, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5631 = insertelement <16 x i16> poison, i16 %6668, i32 0
  %broadcast.splat5632 = shufflevector <16 x i16> %broadcast.splatinsert5631, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5633 = insertelement <16 x i16> poison, i16 %6668, i32 0
  %broadcast.splat5634 = shufflevector <16 x i16> %broadcast.splatinsert5633, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter6133 = and i64 %6765, 1
  %6774 = icmp eq i64 %6763, 0
  %unroll_iter6135 = and i64 %6765, 576460752303423486
  %lcmp.mod6134.not = icmp eq i64 %xtraiter6133, 0
  %cmp.n5622 = icmp eq i64 %n.vec5619, %6730
  %n.vec.remaining5640 = and i64 %6730, 56
  %min.epilog.iters.check5641 = icmp eq i64 %n.vec.remaining5640, 0
  %n.vec5644 = and i64 %6730, 4294967288
  %broadcast.splatinsert5650 = insertelement <8 x i16> poison, i16 %6668, i32 0
  %broadcast.splat5651 = shufflevector <8 x i16> %broadcast.splatinsert5650, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5648 = icmp eq i64 %n.vec5644, %6730
  %xtraiter6137 = and i64 %6731, 3
  %6775 = icmp ult i64 %6766, 3
  %unroll_iter6140 = and i64 %6731, 4294967292
  %lcmp.mod6139.not = icmp eq i64 %xtraiter6137, 0
  br label %"for output.s0.b.rebased577"

next_bb550:                                       ; preds = %"consume bias_im_global_wrapper$0547"
  br i1 %200, label %then_bb775, label %next_bb776

"for output.s0.b.rebased577":                     ; preds = %"for output.s0.b.rebased577.preheader", %"end for output.s0.y.rebased590"
  %indvars.iv4799 = phi i64 [ 0, %"for output.s0.b.rebased577.preheader" ], [ %indvars.iv.next4800, %"end for output.s0.y.rebased590" ]
  %6776 = add nuw i64 %indvars.iv4799, %6747
  %6777 = trunc i64 %6776 to i32
  %6778 = mul i32 %181, %6777
  br i1 %6646, label %"for output.s0.y.rebased589.preheader", label %"end for output.s0.y.rebased590", !prof !387

"for output.s0.y.rebased589.preheader":           ; preds = %"for output.s0.b.rebased577"
  %t3730586 = sub i32 %6778, %6642
  %t3721587 = add i32 %t3688576.neg, %6778
  %6779 = sext i32 %t3730586 to i64
  %6780 = trunc i64 %6776 to i32
  %6781 = mul i32 %190, %6780
  br label %"for output.s0.y.rebased589"

"for output.s0.y.rebased589":                     ; preds = %"for output.s0.y.rebased589.preheader", %call_destructor.exit2460
  %indvars.iv4794 = phi i64 [ 0, %"for output.s0.y.rebased589.preheader" ], [ %indvars.iv.next4795, %call_destructor.exit2460 ]
  %6782 = add nsw i64 %indvars.iv4794, %6744
  %6783 = mul nsw i64 %6782, %6745
  %6784 = add nsw i64 %6783, %6746
  %6785 = call i8* @halide_malloc(i8* null, i64 %6751)
  %input_wrapper593 = bitcast i8* %6785 to i16*
  br i1 %t3712560, label %then_bb596, label %next_bb597

"end for output.s0.y.rebased590":                 ; preds = %call_destructor.exit2460, %"for output.s0.b.rebased577"
  %indvars.iv.next4800 = add nuw nsw i64 %indvars.iv4799, 1
  %6786 = icmp eq i64 %indvars.iv.next4800, %zext4803
  br i1 %6786, label %if.then.i2454, label %"for output.s0.b.rebased577"

then_bb596:                                       ; preds = %"for output.s0.y.rebased589"
  br i1 %6748, label %"for input_wrapper.s0.y.rebased601", label %"consume input_wrapper727", !prof !387

next_bb597:                                       ; preds = %"for output.s0.y.rebased589"
  br i1 %6600, label %next_bb639, label %then_bb638

"for input_wrapper.s0.y.rebased601":              ; preds = %then_bb596, %"end for input_wrapper.s0.x.x.rebased625"
  %indvars.iv4776 = phi i64 [ %indvars.iv.next4777, %"end for input_wrapper.s0.x.x.rebased625" ], [ 0, %then_bb596 ]
  %6787 = mul nsw i64 %indvars.iv4776, %6735
  %6788 = add nsw i64 %indvars.iv4776, %6784
  %6789 = trunc i64 %6788 to i32
  %6790 = mul i32 %178, %6789
  %t3748605 = add i32 %t3721587, %6790
  br i1 %6640, label %"for input_wrapper.s0.x.x606.preheader", label %"end for input_wrapper.s0.x.x607", !prof !387

"for input_wrapper.s0.x.x606.preheader":          ; preds = %"for input_wrapper.s0.y.rebased601"
  %6791 = sext i32 %t3748605 to i64
  br i1 %6621, label %"for input_wrapper.s0.x.x606.us.preheader", label %"end for input_wrapper.s0.x.x.rebased625", !prof !387

"for input_wrapper.s0.x.x606.us.preheader":       ; preds = %"for input_wrapper.s0.x.x606.preheader"
  %6792 = trunc i64 %6787 to i32
  br label %"for input_wrapper.s0.x.x606.us"

"for input_wrapper.s0.x.x606.us":                 ; preds = %"for input_wrapper.s0.x.x606.us.preheader", %"end for input_wrapper.s0.c.c619.loopexit.us"
  %indvars.iv4766 = phi i64 [ 0, %"for input_wrapper.s0.x.x606.us.preheader" ], [ %indvars.iv.next4767, %"end for input_wrapper.s0.c.c619.loopexit.us" ]
  %6793 = trunc i64 %indvars.iv4766 to i32
  %t3755609.us = mul i32 %6669, %6793
  %6794 = shl nsw i64 %indvars.iv4766, 3
  %6795 = add nsw i64 %6794, %6720
  br label %"for input_wrapper.s0.c.c618.us"

"for input_wrapper.s0.c.c618.us":                 ; preds = %"for input_wrapper.s0.x.x606.us", %"for input_wrapper.s0.c.c618.us"
  %indvars.iv4763 = phi i64 [ 0, %"for input_wrapper.s0.x.x606.us" ], [ %indvars.iv.next4764, %"for input_wrapper.s0.c.c618.us" ]
  %6796 = add nsw i64 %indvars.iv4763, %6795
  %6797 = shl nsw i64 %6796, 2
  %6798 = add nsw i64 %6797, %6791
  %6799 = getelementptr inbounds i8, i8* %172, i64 %6798
  %6800 = bitcast i8* %6799 to <32 x i8>*
  %6801 = load <32 x i8>, <32 x i8>* %6800, align 4, !tbaa !397
  %6802 = zext <32 x i8> %6801 to <32 x i16>
  %6803 = sub nsw <32 x i16> %6802, %6678
  %6804 = trunc i64 %indvars.iv4763 to i32
  %6805 = add i32 %t3755609.us, %6804
  %6806 = shl nsw i32 %6805, 2
  %6807 = add i32 %6806, %6792
  %6808 = insertelement <4 x i32> undef, i32 %6807, i32 0
  %6809 = shufflevector <4 x i32> %6808, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6810 = add <4 x i32> %6809, <i32 poison, i32 1, i32 2, i32 3>
  %6811 = add i32 %6807, 1
  %6812 = add i32 %6811, %a263
  %6813 = insertelement <4 x i32> undef, i32 %6812, i32 0
  %6814 = shufflevector <4 x i32> %6813, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6815 = add <4 x i32> %6814, <i32 poison, i32 1, i32 2, i32 3>
  %6816 = add i32 %6807, 2
  %6817 = add i32 %6816, %6675
  %6818 = insertelement <4 x i32> undef, i32 %6817, i32 0
  %6819 = shufflevector <4 x i32> %6818, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6820 = add <4 x i32> %6819, <i32 poison, i32 1, i32 2, i32 3>
  %6821 = add i32 %6807, 3
  %6822 = add i32 %6821, %6674
  %6823 = insertelement <4 x i32> undef, i32 %6822, i32 0
  %6824 = shufflevector <4 x i32> %6823, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6825 = add <4 x i32> %6824, <i32 poison, i32 1, i32 2, i32 3>
  %6826 = add i32 %6807, 4
  %6827 = add i32 %6826, %6673
  %6828 = insertelement <4 x i32> undef, i32 %6827, i32 0
  %6829 = shufflevector <4 x i32> %6828, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6830 = add <4 x i32> %6829, <i32 poison, i32 1, i32 2, i32 3>
  %6831 = add i32 %6807, 5
  %6832 = add i32 %6831, %6672
  %6833 = insertelement <4 x i32> undef, i32 %6832, i32 0
  %6834 = shufflevector <4 x i32> %6833, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6835 = add <4 x i32> %6834, <i32 poison, i32 1, i32 2, i32 3>
  %6836 = add i32 %6807, 6
  %6837 = add i32 %6836, %6671
  %6838 = insertelement <4 x i32> undef, i32 %6837, i32 0
  %6839 = shufflevector <4 x i32> %6838, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6840 = add <4 x i32> %6839, <i32 poison, i32 1, i32 2, i32 3>
  %6841 = add i32 %6807, 7
  %6842 = add i32 %6841, %6670
  %6843 = insertelement <4 x i32> undef, i32 %6842, i32 0
  %6844 = shufflevector <4 x i32> %6843, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %6845 = add <4 x i32> %6844, <i32 poison, i32 1, i32 2, i32 3>
  %6846 = extractelement <32 x i16> %6803, i32 0
  %6847 = sext i32 %6807 to i64
  %6848 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6847
  store i16 %6846, i16* %6848, align 2, !tbaa !399
  %6849 = extractelement <4 x i32> %6810, i32 1
  %6850 = extractelement <32 x i16> %6803, i32 1
  %6851 = sext i32 %6849 to i64
  %6852 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6851
  store i16 %6850, i16* %6852, align 2, !tbaa !399
  %6853 = extractelement <4 x i32> %6810, i32 2
  %6854 = extractelement <32 x i16> %6803, i32 2
  %6855 = sext i32 %6853 to i64
  %6856 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6855
  store i16 %6854, i16* %6856, align 2, !tbaa !399
  %6857 = extractelement <4 x i32> %6810, i32 3
  %6858 = extractelement <32 x i16> %6803, i32 3
  %6859 = sext i32 %6857 to i64
  %6860 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6859
  store i16 %6858, i16* %6860, align 2, !tbaa !399
  %6861 = extractelement <32 x i16> %6803, i32 4
  %6862 = sext i32 %6812 to i64
  %6863 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6862
  store i16 %6861, i16* %6863, align 2, !tbaa !399
  %6864 = extractelement <4 x i32> %6815, i32 1
  %6865 = extractelement <32 x i16> %6803, i32 5
  %6866 = sext i32 %6864 to i64
  %6867 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6866
  store i16 %6865, i16* %6867, align 2, !tbaa !399
  %6868 = extractelement <4 x i32> %6815, i32 2
  %6869 = extractelement <32 x i16> %6803, i32 6
  %6870 = sext i32 %6868 to i64
  %6871 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6870
  store i16 %6869, i16* %6871, align 2, !tbaa !399
  %6872 = extractelement <4 x i32> %6815, i32 3
  %6873 = extractelement <32 x i16> %6803, i32 7
  %6874 = sext i32 %6872 to i64
  %6875 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6874
  store i16 %6873, i16* %6875, align 2, !tbaa !399
  %6876 = extractelement <32 x i16> %6803, i32 8
  %6877 = sext i32 %6817 to i64
  %6878 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6877
  store i16 %6876, i16* %6878, align 2, !tbaa !399
  %6879 = extractelement <4 x i32> %6820, i32 1
  %6880 = extractelement <32 x i16> %6803, i32 9
  %6881 = sext i32 %6879 to i64
  %6882 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6881
  store i16 %6880, i16* %6882, align 2, !tbaa !399
  %6883 = extractelement <4 x i32> %6820, i32 2
  %6884 = extractelement <32 x i16> %6803, i32 10
  %6885 = sext i32 %6883 to i64
  %6886 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6885
  store i16 %6884, i16* %6886, align 2, !tbaa !399
  %6887 = extractelement <4 x i32> %6820, i32 3
  %6888 = extractelement <32 x i16> %6803, i32 11
  %6889 = sext i32 %6887 to i64
  %6890 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6889
  store i16 %6888, i16* %6890, align 2, !tbaa !399
  %6891 = extractelement <32 x i16> %6803, i32 12
  %6892 = sext i32 %6822 to i64
  %6893 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6892
  store i16 %6891, i16* %6893, align 2, !tbaa !399
  %6894 = extractelement <4 x i32> %6825, i32 1
  %6895 = extractelement <32 x i16> %6803, i32 13
  %6896 = sext i32 %6894 to i64
  %6897 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6896
  store i16 %6895, i16* %6897, align 2, !tbaa !399
  %6898 = extractelement <4 x i32> %6825, i32 2
  %6899 = extractelement <32 x i16> %6803, i32 14
  %6900 = sext i32 %6898 to i64
  %6901 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6900
  store i16 %6899, i16* %6901, align 2, !tbaa !399
  %6902 = extractelement <4 x i32> %6825, i32 3
  %6903 = extractelement <32 x i16> %6803, i32 15
  %6904 = sext i32 %6902 to i64
  %6905 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6904
  store i16 %6903, i16* %6905, align 2, !tbaa !399
  %6906 = extractelement <32 x i16> %6803, i32 16
  %6907 = sext i32 %6827 to i64
  %6908 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6907
  store i16 %6906, i16* %6908, align 2, !tbaa !399
  %6909 = extractelement <4 x i32> %6830, i32 1
  %6910 = extractelement <32 x i16> %6803, i32 17
  %6911 = sext i32 %6909 to i64
  %6912 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6911
  store i16 %6910, i16* %6912, align 2, !tbaa !399
  %6913 = extractelement <4 x i32> %6830, i32 2
  %6914 = extractelement <32 x i16> %6803, i32 18
  %6915 = sext i32 %6913 to i64
  %6916 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6915
  store i16 %6914, i16* %6916, align 2, !tbaa !399
  %6917 = extractelement <4 x i32> %6830, i32 3
  %6918 = extractelement <32 x i16> %6803, i32 19
  %6919 = sext i32 %6917 to i64
  %6920 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6919
  store i16 %6918, i16* %6920, align 2, !tbaa !399
  %6921 = extractelement <32 x i16> %6803, i32 20
  %6922 = sext i32 %6832 to i64
  %6923 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6922
  store i16 %6921, i16* %6923, align 2, !tbaa !399
  %6924 = extractelement <4 x i32> %6835, i32 1
  %6925 = extractelement <32 x i16> %6803, i32 21
  %6926 = sext i32 %6924 to i64
  %6927 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6926
  store i16 %6925, i16* %6927, align 2, !tbaa !399
  %6928 = extractelement <4 x i32> %6835, i32 2
  %6929 = extractelement <32 x i16> %6803, i32 22
  %6930 = sext i32 %6928 to i64
  %6931 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6930
  store i16 %6929, i16* %6931, align 2, !tbaa !399
  %6932 = extractelement <4 x i32> %6835, i32 3
  %6933 = extractelement <32 x i16> %6803, i32 23
  %6934 = sext i32 %6932 to i64
  %6935 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6934
  store i16 %6933, i16* %6935, align 2, !tbaa !399
  %6936 = extractelement <32 x i16> %6803, i32 24
  %6937 = sext i32 %6837 to i64
  %6938 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6937
  store i16 %6936, i16* %6938, align 2, !tbaa !399
  %6939 = extractelement <4 x i32> %6840, i32 1
  %6940 = extractelement <32 x i16> %6803, i32 25
  %6941 = sext i32 %6939 to i64
  %6942 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6941
  store i16 %6940, i16* %6942, align 2, !tbaa !399
  %6943 = extractelement <4 x i32> %6840, i32 2
  %6944 = extractelement <32 x i16> %6803, i32 26
  %6945 = sext i32 %6943 to i64
  %6946 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6945
  store i16 %6944, i16* %6946, align 2, !tbaa !399
  %6947 = extractelement <4 x i32> %6840, i32 3
  %6948 = extractelement <32 x i16> %6803, i32 27
  %6949 = sext i32 %6947 to i64
  %6950 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6949
  store i16 %6948, i16* %6950, align 2, !tbaa !399
  %6951 = extractelement <32 x i16> %6803, i32 28
  %6952 = sext i32 %6842 to i64
  %6953 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6952
  store i16 %6951, i16* %6953, align 2, !tbaa !399
  %6954 = extractelement <4 x i32> %6845, i32 1
  %6955 = extractelement <32 x i16> %6803, i32 29
  %6956 = sext i32 %6954 to i64
  %6957 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6956
  store i16 %6955, i16* %6957, align 2, !tbaa !399
  %6958 = extractelement <4 x i32> %6845, i32 2
  %6959 = extractelement <32 x i16> %6803, i32 30
  %6960 = sext i32 %6958 to i64
  %6961 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6960
  store i16 %6959, i16* %6961, align 2, !tbaa !399
  %6962 = extractelement <4 x i32> %6845, i32 3
  %6963 = extractelement <32 x i16> %6803, i32 31
  %6964 = sext i32 %6962 to i64
  %6965 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6964
  store i16 %6963, i16* %6965, align 2, !tbaa !399
  %indvars.iv.next4764 = add nuw nsw i64 %indvars.iv4763, 1
  %.not2068.us = icmp eq i64 %indvars.iv.next4764, %6731
  br i1 %.not2068.us, label %"end for input_wrapper.s0.c.c619.loopexit.us", label %"for input_wrapper.s0.c.c618.us"

"end for input_wrapper.s0.c.c619.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c618.us"
  %indvars.iv.next4767 = add nuw nsw i64 %indvars.iv4766, 1
  %.not2067.us = icmp eq i64 %indvars.iv.next4767, %6732
  br i1 %.not2067.us, label %"end for input_wrapper.s0.x.x607", label %"for input_wrapper.s0.x.x606.us"

"end for input_wrapper.s0.x.x607":                ; preds = %"end for input_wrapper.s0.c.c619.loopexit.us", %"for input_wrapper.s0.y.rebased601"
  br i1 %6679, label %"for input_wrapper.s0.x.x.rebased624.preheader", label %"end for input_wrapper.s0.x.x.rebased625", !prof !387

"for input_wrapper.s0.x.x.rebased624.preheader":  ; preds = %"end for input_wrapper.s0.x.x607"
  %6966 = sext i32 %t3748605 to i64
  br i1 %6621, label %"for input_wrapper.s0.x.x.rebased624.us", label %"end for input_wrapper.s0.x.x.rebased625", !prof !387

"for input_wrapper.s0.x.x.rebased624.us":         ; preds = %"for input_wrapper.s0.x.x.rebased624.preheader", %"end for input_wrapper.s0.x.v21630.us"
  %indvars.iv4774 = phi i64 [ %indvars.iv.next4775, %"end for input_wrapper.s0.x.v21630.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased624.preheader" ]
  %6967 = trunc i64 %indvars.iv4774 to i32
  %6968 = add i32 %t3735580, %6967
  %6969 = shl nsw i32 %6968, 3
  %a267.us = sub nsw i32 %a255, %6969
  %6970 = icmp slt i32 %a267.us, 7
  %t3766627.us = select i1 %6970, i32 %a267.us, i32 7
  %6971 = icmp sgt i32 %t3766627.us, -1
  br i1 %6971, label %"for input_wrapper.s0.x.v21629.us.us.preheader", label %"end for input_wrapper.s0.x.v21630.us", !prof !387

"for input_wrapper.s0.x.v21629.us.us.preheader":  ; preds = %"for input_wrapper.s0.x.x.rebased624.us"
  %6972 = sext i32 %6969 to i64
  %6973 = zext i32 %t3766627.us to i64
  br label %"for input_wrapper.s0.x.v21629.us.us"

"end for input_wrapper.s0.x.v21630.us":           ; preds = %"end for input_wrapper.s0.c.c636.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased624.us"
  %indvars.iv.next4775 = add nuw nsw i64 %indvars.iv4774, 1
  %.not2064.us = icmp eq i64 %indvars.iv4774, %6734
  br i1 %.not2064.us, label %"end for input_wrapper.s0.x.x.rebased625", label %"for input_wrapper.s0.x.x.rebased624.us"

"for input_wrapper.s0.x.v21629.us.us":            ; preds = %"for input_wrapper.s0.x.v21629.us.us.preheader", %"end for input_wrapper.s0.c.c636.loopexit.us.us"
  %indvars.iv4771 = phi i64 [ 0, %"for input_wrapper.s0.x.v21629.us.us.preheader" ], [ %indvars.iv.next4772, %"end for input_wrapper.s0.c.c636.loopexit.us.us" ]
  %6974 = add nsw i64 %indvars.iv4771, %6972
  %6975 = mul nsw i64 %6974, %6733
  %6976 = add nsw i64 %6975, %6787
  %6977 = trunc i64 %6974 to i32
  %t3768634.us.us = add i32 %b258, %6977
  %6978 = sext i32 %t3768634.us.us to i64
  br i1 %6775, label %"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c635.us.us"

"for input_wrapper.s0.c.c635.us.us":              ; preds = %"for input_wrapper.s0.x.v21629.us.us", %"for input_wrapper.s0.c.c635.us.us"
  %indvars.iv4769 = phi i64 [ %indvars.iv.next4770.3, %"for input_wrapper.s0.c.c635.us.us" ], [ 0, %"for input_wrapper.s0.x.v21629.us.us" ]
  %niter6141 = phi i64 [ %niter6141.nsub.3, %"for input_wrapper.s0.c.c635.us.us" ], [ %unroll_iter6140, %"for input_wrapper.s0.x.v21629.us.us" ]
  %6979 = add nsw i64 %indvars.iv4769, %6978
  %6980 = shl nsw i64 %6979, 2
  %6981 = add nsw i64 %6980, %6966
  %6982 = getelementptr inbounds i8, i8* %172, i64 %6981
  %6983 = bitcast i8* %6982 to <4 x i8>*
  %6984 = load <4 x i8>, <4 x i8>* %6983, align 4, !tbaa !397
  %6985 = zext <4 x i8> %6984 to <4 x i16>
  %6986 = sub nsw <4 x i16> %6985, %6667
  %6987 = shl nuw nsw i64 %indvars.iv4769, 2
  %6988 = add nsw i64 %6987, %6976
  %6989 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %6988
  %6990 = bitcast i16* %6989 to <4 x i16>*
  store <4 x i16> %6986, <4 x i16>* %6990, align 8, !tbaa !399
  %indvars.iv.next4770 = or i64 %indvars.iv4769, 1
  %6991 = add nsw i64 %indvars.iv.next4770, %6978
  %6992 = shl nsw i64 %6991, 2
  %6993 = add nsw i64 %6992, %6966
  %6994 = getelementptr inbounds i8, i8* %172, i64 %6993
  %6995 = bitcast i8* %6994 to <4 x i8>*
  %6996 = load <4 x i8>, <4 x i8>* %6995, align 4, !tbaa !397
  %6997 = zext <4 x i8> %6996 to <4 x i16>
  %6998 = sub nsw <4 x i16> %6997, %6667
  %6999 = shl nuw nsw i64 %indvars.iv.next4770, 2
  %7000 = add nsw i64 %6999, %6976
  %7001 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7000
  %7002 = bitcast i16* %7001 to <4 x i16>*
  store <4 x i16> %6998, <4 x i16>* %7002, align 8, !tbaa !399
  %indvars.iv.next4770.1 = or i64 %indvars.iv4769, 2
  %7003 = add nsw i64 %indvars.iv.next4770.1, %6978
  %7004 = shl nsw i64 %7003, 2
  %7005 = add nsw i64 %7004, %6966
  %7006 = getelementptr inbounds i8, i8* %172, i64 %7005
  %7007 = bitcast i8* %7006 to <4 x i8>*
  %7008 = load <4 x i8>, <4 x i8>* %7007, align 4, !tbaa !397
  %7009 = zext <4 x i8> %7008 to <4 x i16>
  %7010 = sub nsw <4 x i16> %7009, %6667
  %7011 = shl nuw nsw i64 %indvars.iv.next4770.1, 2
  %7012 = add nsw i64 %7011, %6976
  %7013 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7012
  %7014 = bitcast i16* %7013 to <4 x i16>*
  store <4 x i16> %7010, <4 x i16>* %7014, align 8, !tbaa !399
  %indvars.iv.next4770.2 = or i64 %indvars.iv4769, 3
  %7015 = add nsw i64 %indvars.iv.next4770.2, %6978
  %7016 = shl nsw i64 %7015, 2
  %7017 = add nsw i64 %7016, %6966
  %7018 = getelementptr inbounds i8, i8* %172, i64 %7017
  %7019 = bitcast i8* %7018 to <4 x i8>*
  %7020 = load <4 x i8>, <4 x i8>* %7019, align 4, !tbaa !397
  %7021 = zext <4 x i8> %7020 to <4 x i16>
  %7022 = sub nsw <4 x i16> %7021, %6667
  %7023 = shl nuw nsw i64 %indvars.iv.next4770.2, 2
  %7024 = add nsw i64 %7023, %6976
  %7025 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7024
  %7026 = bitcast i16* %7025 to <4 x i16>*
  store <4 x i16> %7022, <4 x i16>* %7026, align 8, !tbaa !399
  %indvars.iv.next4770.3 = add nuw nsw i64 %indvars.iv4769, 4
  %niter6141.nsub.3 = add i64 %niter6141, -4
  %niter6141.ncmp.3 = icmp eq i64 %niter6141.nsub.3, 0
  br i1 %niter6141.ncmp.3, label %"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c635.us.us"

"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c635.us.us", %"for input_wrapper.s0.x.v21629.us.us"
  %indvars.iv4769.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v21629.us.us" ], [ %indvars.iv.next4770.3, %"for input_wrapper.s0.c.c635.us.us" ]
  br i1 %lcmp.mod6139.not, label %"end for input_wrapper.s0.c.c636.loopexit.us.us", label %"for input_wrapper.s0.c.c635.us.us.epil"

"for input_wrapper.s0.c.c635.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c635.us.us.epil"
  %indvars.iv4769.epil = phi i64 [ %indvars.iv.next4770.epil, %"for input_wrapper.s0.c.c635.us.us.epil" ], [ %indvars.iv4769.unr, %"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa" ]
  %epil.iter6138 = phi i64 [ %epil.iter6138.sub, %"for input_wrapper.s0.c.c635.us.us.epil" ], [ %xtraiter6137, %"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa" ]
  %7027 = add nsw i64 %indvars.iv4769.epil, %6978
  %7028 = shl nsw i64 %7027, 2
  %7029 = add nsw i64 %7028, %6966
  %7030 = getelementptr inbounds i8, i8* %172, i64 %7029
  %7031 = bitcast i8* %7030 to <4 x i8>*
  %7032 = load <4 x i8>, <4 x i8>* %7031, align 4, !tbaa !397
  %7033 = zext <4 x i8> %7032 to <4 x i16>
  %7034 = sub nsw <4 x i16> %7033, %6667
  %7035 = shl nuw nsw i64 %indvars.iv4769.epil, 2
  %7036 = add nsw i64 %7035, %6976
  %7037 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7036
  %7038 = bitcast i16* %7037 to <4 x i16>*
  store <4 x i16> %7034, <4 x i16>* %7038, align 8, !tbaa !399
  %indvars.iv.next4770.epil = add nuw nsw i64 %indvars.iv4769.epil, 1
  %epil.iter6138.sub = add i64 %epil.iter6138, -1
  %epil.iter6138.cmp.not = icmp eq i64 %epil.iter6138.sub, 0
  br i1 %epil.iter6138.cmp.not, label %"end for input_wrapper.s0.c.c636.loopexit.us.us", label %"for input_wrapper.s0.c.c635.us.us.epil", !llvm.loop !455

"end for input_wrapper.s0.c.c636.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c635.us.us.epil", %"end for input_wrapper.s0.c.c636.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4772 = add nuw nsw i64 %indvars.iv4771, 1
  %.not2065.us.us = icmp eq i64 %indvars.iv4771, %6973
  br i1 %.not2065.us.us, label %"end for input_wrapper.s0.x.v21630.us", label %"for input_wrapper.s0.x.v21629.us.us"

"end for input_wrapper.s0.x.x.rebased625":        ; preds = %"end for input_wrapper.s0.x.v21630.us", %"for input_wrapper.s0.x.x606.preheader", %"for input_wrapper.s0.x.x.rebased624.preheader", %"end for input_wrapper.s0.x.x607"
  %indvars.iv.next4777 = add nuw nsw i64 %indvars.iv4776, 1
  %.not2063 = icmp eq i64 %indvars.iv4776, %6756
  br i1 %.not2063, label %"consume input_wrapper727", label %"for input_wrapper.s0.y.rebased601"

then_bb638:                                       ; preds = %next_bb597
  br i1 %6768, label %"consume input_wrapper727", label %"for input_wrapper.s0.y.rebased643.us", !prof !402

"for input_wrapper.s0.y.rebased643.us":           ; preds = %then_bb638, %"end for input_wrapper.s0.x.rebased649.loopexit.us"
  %indvars.iv4729 = phi i64 [ %indvars.iv.next4730, %"end for input_wrapper.s0.x.rebased649.loopexit.us" ], [ 0, %then_bb638 ]
  %7039 = trunc i64 %indvars.iv4729 to i32
  %t3775646.us = mul i32 %6639, %7039
  %7040 = add nsw i64 %indvars.iv4729, %6784
  %7041 = mul nsw i64 %7040, %6725
  %7042 = add nsw i64 %7041, %6779
  br i1 %6656, label %"for input_wrapper.s0.x.rebased648.us.us", label %"for input_wrapper.s0.x.rebased648.preheader.split.us3553", !prof !387

"for input_wrapper.s0.x.rebased648.preheader.split.us3553": ; preds = %"for input_wrapper.s0.y.rebased643.us"
  br i1 %6595, label %"for input_wrapper.s0.x.rebased648.us3537.us", label %"end for input_wrapper.s0.x.rebased649.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased649.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c654.loopexit.us3548.us", %"end for input_wrapper.s0.c.c.rebased659.loopexit.us.us", %"for input_wrapper.s0.x.rebased648.preheader.split.us3553"
  %indvars.iv.next4730 = add nuw nsw i64 %indvars.iv4729, 1
  %.not2058.us = icmp eq i64 %indvars.iv4729, %6752
  br i1 %.not2058.us, label %"consume input_wrapper727", label %"for input_wrapper.s0.y.rebased643.us"

"for input_wrapper.s0.x.rebased648.us.us":        ; preds = %"for input_wrapper.s0.y.rebased643.us", %"end for input_wrapper.s0.c.c.rebased659.loopexit.us.us"
  %indvars.iv4726 = phi i64 [ %indvars.iv.next4727, %"end for input_wrapper.s0.c.c.rebased659.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased643.us" ]
  %7043 = trunc i64 %indvars.iv4726 to i32
  %reass.add2828.us.us = add i32 %t3775646.us, %7043
  %reass.mul2829.us.us = mul i32 %reass.add2828.us.us, %6652
  %7044 = add nsw i64 %indvars.iv4726, %6720
  %7045 = mul nsw i64 %7044, %6721
  %7046 = add nsw i64 %7042, %7045
  %7047 = sext i32 %reass.mul2829.us.us to i64
  br i1 %6595, label %"for input_wrapper.s0.c.c653.us.us.preheader", label %"end for input_wrapper.s0.c.c654.us.us", !prof !387

"for input_wrapper.s0.c.c653.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.rebased648.us.us"
  br i1 %6770, label %"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c653.us.us"

"for input_wrapper.s0.c.c653.us.us":              ; preds = %"for input_wrapper.s0.c.c653.us.us.preheader", %"for input_wrapper.s0.c.c653.us.us"
  %indvars.iv4722 = phi i64 [ %indvars.iv.next4723.3, %"for input_wrapper.s0.c.c653.us.us" ], [ 0, %"for input_wrapper.s0.c.c653.us.us.preheader" ]
  %niter6117 = phi i64 [ %niter6117.nsub.3, %"for input_wrapper.s0.c.c653.us.us" ], [ %unroll_iter6116, %"for input_wrapper.s0.c.c653.us.us.preheader" ]
  %7048 = shl nuw nsw i64 %indvars.iv4722, 4
  %7049 = add nsw i64 %7048, %7046
  %7050 = getelementptr inbounds i8, i8* %172, i64 %7049
  %7051 = bitcast i8* %7050 to <16 x i8>*
  %7052 = load <16 x i8>, <16 x i8>* %7051, align 4, !tbaa !397
  %7053 = zext <16 x i8> %7052 to <16 x i16>
  %7054 = sub nsw <16 x i16> %7053, %6655
  %7055 = add nsw i64 %7048, %7047
  %7056 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7055
  %7057 = bitcast i16* %7056 to <16 x i16>*
  store <16 x i16> %7054, <16 x i16>* %7057, align 8, !tbaa !399
  %indvars.iv.next4723 = shl i64 %indvars.iv4722, 4
  %7058 = or i64 %indvars.iv.next4723, 16
  %7059 = add nsw i64 %7058, %7046
  %7060 = getelementptr inbounds i8, i8* %172, i64 %7059
  %7061 = bitcast i8* %7060 to <16 x i8>*
  %7062 = load <16 x i8>, <16 x i8>* %7061, align 4, !tbaa !397
  %7063 = zext <16 x i8> %7062 to <16 x i16>
  %7064 = sub nsw <16 x i16> %7063, %6655
  %7065 = add nsw i64 %7058, %7047
  %7066 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7065
  %7067 = bitcast i16* %7066 to <16 x i16>*
  store <16 x i16> %7064, <16 x i16>* %7067, align 8, !tbaa !399
  %indvars.iv.next4723.1 = shl i64 %indvars.iv4722, 4
  %7068 = or i64 %indvars.iv.next4723.1, 32
  %7069 = add nsw i64 %7068, %7046
  %7070 = getelementptr inbounds i8, i8* %172, i64 %7069
  %7071 = bitcast i8* %7070 to <16 x i8>*
  %7072 = load <16 x i8>, <16 x i8>* %7071, align 4, !tbaa !397
  %7073 = zext <16 x i8> %7072 to <16 x i16>
  %7074 = sub nsw <16 x i16> %7073, %6655
  %7075 = add nsw i64 %7068, %7047
  %7076 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7075
  %7077 = bitcast i16* %7076 to <16 x i16>*
  store <16 x i16> %7074, <16 x i16>* %7077, align 8, !tbaa !399
  %indvars.iv.next4723.2 = shl i64 %indvars.iv4722, 4
  %7078 = or i64 %indvars.iv.next4723.2, 48
  %7079 = add nsw i64 %7078, %7046
  %7080 = getelementptr inbounds i8, i8* %172, i64 %7079
  %7081 = bitcast i8* %7080 to <16 x i8>*
  %7082 = load <16 x i8>, <16 x i8>* %7081, align 4, !tbaa !397
  %7083 = zext <16 x i8> %7082 to <16 x i16>
  %7084 = sub nsw <16 x i16> %7083, %6655
  %7085 = add nsw i64 %7078, %7047
  %7086 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7085
  %7087 = bitcast i16* %7086 to <16 x i16>*
  store <16 x i16> %7084, <16 x i16>* %7087, align 8, !tbaa !399
  %indvars.iv.next4723.3 = add nuw nsw i64 %indvars.iv4722, 4
  %niter6117.nsub.3 = add i64 %niter6117, -4
  %niter6117.ncmp.3 = icmp eq i64 %niter6117.nsub.3, 0
  br i1 %niter6117.ncmp.3, label %"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c653.us.us"

"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c653.us.us", %"for input_wrapper.s0.c.c653.us.us.preheader"
  %indvars.iv4722.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c653.us.us.preheader" ], [ %indvars.iv.next4723.3, %"for input_wrapper.s0.c.c653.us.us" ]
  br i1 %lcmp.mod6115.not, label %"end for input_wrapper.s0.c.c654.us.us", label %"for input_wrapper.s0.c.c653.us.us.epil"

"for input_wrapper.s0.c.c653.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c653.us.us.epil"
  %indvars.iv4722.epil = phi i64 [ %indvars.iv.next4723.epil, %"for input_wrapper.s0.c.c653.us.us.epil" ], [ %indvars.iv4722.unr, %"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa" ]
  %epil.iter6114 = phi i64 [ %epil.iter6114.sub, %"for input_wrapper.s0.c.c653.us.us.epil" ], [ %xtraiter6113, %"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa" ]
  %7088 = shl nuw nsw i64 %indvars.iv4722.epil, 4
  %7089 = add nsw i64 %7088, %7046
  %7090 = getelementptr inbounds i8, i8* %172, i64 %7089
  %7091 = bitcast i8* %7090 to <16 x i8>*
  %7092 = load <16 x i8>, <16 x i8>* %7091, align 4, !tbaa !397
  %7093 = zext <16 x i8> %7092 to <16 x i16>
  %7094 = sub nsw <16 x i16> %7093, %6655
  %7095 = add nsw i64 %7088, %7047
  %7096 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7095
  %7097 = bitcast i16* %7096 to <16 x i16>*
  store <16 x i16> %7094, <16 x i16>* %7097, align 8, !tbaa !399
  %indvars.iv.next4723.epil = add nuw nsw i64 %indvars.iv4722.epil, 1
  %epil.iter6114.sub = add i64 %epil.iter6114, -1
  %epil.iter6114.cmp.not = icmp eq i64 %epil.iter6114.sub, 0
  br i1 %epil.iter6114.cmp.not, label %"end for input_wrapper.s0.c.c654.us.us", label %"for input_wrapper.s0.c.c653.us.us.epil", !llvm.loop !456

"end for input_wrapper.s0.c.c654.us.us":          ; preds = %"end for input_wrapper.s0.c.c654.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c653.us.us.epil", %"for input_wrapper.s0.x.rebased648.us.us"
  br label %"for input_wrapper.s0.c.c.rebased658.us.us"

"for input_wrapper.s0.c.c.rebased658.us.us":      ; preds = %after_bb661.us.us, %"end for input_wrapper.s0.c.c654.us.us"
  %indvars.iv4724 = phi i64 [ %indvars.iv.next4725, %after_bb661.us.us ], [ 0, %"end for input_wrapper.s0.c.c654.us.us" ]
  %7098 = add nsw i64 %indvars.iv4724, %6723
  %7099 = trunc i64 %7098 to i32
  %7100 = shl nsw i32 %7099, 4
  %7101 = add nsw i32 %7100, 16
  %.not2060.us.us = icmp sgt i32 %7101, %t3773641
  br i1 %.not2060.us.us, label %next_bb663.us.us, label %then_bb662.us.us

then_bb662.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased658.us.us"
  %7102 = shl nsw i64 %7098, 4
  %7103 = add nsw i64 %7102, %7046
  %7104 = getelementptr inbounds i8, i8* %172, i64 %7103
  %7105 = bitcast i8* %7104 to <16 x i8>*
  %7106 = load <16 x i8>, <16 x i8>* %7105, align 4, !tbaa !397
  %7107 = zext <16 x i8> %7106 to <16 x i16>
  %7108 = sub nsw <16 x i16> %7107, %6655
  %7109 = add nsw i64 %7102, %7047
  %7110 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7109
  %7111 = bitcast i16* %7110 to <16 x i16>*
  store <16 x i16> %7108, <16 x i16>* %7111, align 8, !tbaa !399
  br label %after_bb661.us.us

next_bb663.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased658.us.us"
  %7112 = or i32 %7100, 1
  %7113 = insertelement <16 x i32> undef, i32 %7112, i32 0
  %7114 = shufflevector <16 x i32> %7113, <16 x i32> undef, <16 x i32> zeroinitializer
  %7115 = add nsw <16 x i32> %7114, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7116 = shufflevector <16 x i32> %7115, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7117 = icmp sgt <8 x i32> %7116, %6658
  %7118 = shufflevector <16 x i32> %7115, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7119 = icmp sgt <8 x i32> %7118, %6658
  %7120 = shufflevector <8 x i1> %7117, <8 x i1> %7119, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7121 = xor <16 x i1> %7120, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %7122 = shl nsw i64 %7098, 4
  %7123 = add nsw i64 %7122, %7046
  %7124 = getelementptr inbounds i8, i8* %172, i64 %7123
  %7125 = bitcast i8* %7124 to <16 x i8>*
  %7126 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %7125, i32 4, <16 x i1> %7121, <16 x i8> undef), !tbaa !397
  %7127 = zext <16 x i8> %7126 to <16 x i16>
  %7128 = sub nsw <16 x i16> %7127, %6655
  %7129 = add nsw i64 %7122, %7047
  %7130 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7129
  %7131 = bitcast i16* %7130 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %7128, <16 x i16>* %7131, i32 8, <16 x i1> %7121), !tbaa !399
  br label %after_bb661.us.us

after_bb661.us.us:                                ; preds = %next_bb663.us.us, %then_bb662.us.us
  %indvars.iv.next4725 = add nuw nsw i64 %indvars.iv4724, 1
  %.not2061.us.us = icmp eq i64 %indvars.iv.next4725, %6724
  br i1 %.not2061.us.us, label %"end for input_wrapper.s0.c.c.rebased659.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased658.us.us"

"end for input_wrapper.s0.c.c.rebased659.loopexit.us.us": ; preds = %after_bb661.us.us
  %indvars.iv.next4727 = add nuw nsw i64 %indvars.iv4726, 1
  %.not2059.us.us = icmp eq i64 %indvars.iv4726, %6722
  br i1 %.not2059.us.us, label %"end for input_wrapper.s0.x.rebased649.loopexit.us", label %"for input_wrapper.s0.x.rebased648.us.us"

"for input_wrapper.s0.x.rebased648.us3537.us":    ; preds = %"for input_wrapper.s0.x.rebased648.preheader.split.us3553", %"end for input_wrapper.s0.c.c654.loopexit.us3548.us"
  %indvars.iv4719 = phi i64 [ %indvars.iv.next4720, %"end for input_wrapper.s0.c.c654.loopexit.us3548.us" ], [ 0, %"for input_wrapper.s0.x.rebased648.preheader.split.us3553" ]
  %7132 = trunc i64 %indvars.iv4719 to i32
  %reass.add2828.us3539.us = add i32 %t3775646.us, %7132
  %reass.mul2829.us3540.us = mul i32 %reass.add2828.us3539.us, %6652
  %7133 = add nsw i64 %indvars.iv4719, %6720
  %7134 = mul nsw i64 %7133, %6721
  %7135 = add nsw i64 %7042, %7134
  %7136 = sext i32 %reass.mul2829.us3540.us to i64
  br i1 %6769, label %"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa", label %"for input_wrapper.s0.c.c653.us3542.us"

"for input_wrapper.s0.c.c653.us3542.us":          ; preds = %"for input_wrapper.s0.x.rebased648.us3537.us", %"for input_wrapper.s0.c.c653.us3542.us"
  %indvars.iv4717 = phi i64 [ %indvars.iv.next4718.3, %"for input_wrapper.s0.c.c653.us3542.us" ], [ 0, %"for input_wrapper.s0.x.rebased648.us3537.us" ]
  %niter6112 = phi i64 [ %niter6112.nsub.3, %"for input_wrapper.s0.c.c653.us3542.us" ], [ %unroll_iter6111, %"for input_wrapper.s0.x.rebased648.us3537.us" ]
  %7137 = shl nuw nsw i64 %indvars.iv4717, 4
  %7138 = add nsw i64 %7137, %7135
  %7139 = getelementptr inbounds i8, i8* %172, i64 %7138
  %7140 = bitcast i8* %7139 to <16 x i8>*
  %7141 = load <16 x i8>, <16 x i8>* %7140, align 4, !tbaa !397
  %7142 = zext <16 x i8> %7141 to <16 x i16>
  %7143 = sub nsw <16 x i16> %7142, %6655
  %7144 = add nsw i64 %7137, %7136
  %7145 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7144
  %7146 = bitcast i16* %7145 to <16 x i16>*
  store <16 x i16> %7143, <16 x i16>* %7146, align 8, !tbaa !399
  %indvars.iv.next4718 = shl i64 %indvars.iv4717, 4
  %7147 = or i64 %indvars.iv.next4718, 16
  %7148 = add nsw i64 %7147, %7135
  %7149 = getelementptr inbounds i8, i8* %172, i64 %7148
  %7150 = bitcast i8* %7149 to <16 x i8>*
  %7151 = load <16 x i8>, <16 x i8>* %7150, align 4, !tbaa !397
  %7152 = zext <16 x i8> %7151 to <16 x i16>
  %7153 = sub nsw <16 x i16> %7152, %6655
  %7154 = add nsw i64 %7147, %7136
  %7155 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7154
  %7156 = bitcast i16* %7155 to <16 x i16>*
  store <16 x i16> %7153, <16 x i16>* %7156, align 8, !tbaa !399
  %indvars.iv.next4718.1 = shl i64 %indvars.iv4717, 4
  %7157 = or i64 %indvars.iv.next4718.1, 32
  %7158 = add nsw i64 %7157, %7135
  %7159 = getelementptr inbounds i8, i8* %172, i64 %7158
  %7160 = bitcast i8* %7159 to <16 x i8>*
  %7161 = load <16 x i8>, <16 x i8>* %7160, align 4, !tbaa !397
  %7162 = zext <16 x i8> %7161 to <16 x i16>
  %7163 = sub nsw <16 x i16> %7162, %6655
  %7164 = add nsw i64 %7157, %7136
  %7165 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7164
  %7166 = bitcast i16* %7165 to <16 x i16>*
  store <16 x i16> %7163, <16 x i16>* %7166, align 8, !tbaa !399
  %indvars.iv.next4718.2 = shl i64 %indvars.iv4717, 4
  %7167 = or i64 %indvars.iv.next4718.2, 48
  %7168 = add nsw i64 %7167, %7135
  %7169 = getelementptr inbounds i8, i8* %172, i64 %7168
  %7170 = bitcast i8* %7169 to <16 x i8>*
  %7171 = load <16 x i8>, <16 x i8>* %7170, align 4, !tbaa !397
  %7172 = zext <16 x i8> %7171 to <16 x i16>
  %7173 = sub nsw <16 x i16> %7172, %6655
  %7174 = add nsw i64 %7167, %7136
  %7175 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7174
  %7176 = bitcast i16* %7175 to <16 x i16>*
  store <16 x i16> %7173, <16 x i16>* %7176, align 8, !tbaa !399
  %indvars.iv.next4718.3 = add nuw nsw i64 %indvars.iv4717, 4
  %niter6112.nsub.3 = add i64 %niter6112, -4
  %niter6112.ncmp.3 = icmp eq i64 %niter6112.nsub.3, 0
  br i1 %niter6112.ncmp.3, label %"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa", label %"for input_wrapper.s0.c.c653.us3542.us"

"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c653.us3542.us", %"for input_wrapper.s0.x.rebased648.us3537.us"
  %indvars.iv4717.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased648.us3537.us" ], [ %indvars.iv.next4718.3, %"for input_wrapper.s0.c.c653.us3542.us" ]
  br i1 %lcmp.mod6110.not, label %"end for input_wrapper.s0.c.c654.loopexit.us3548.us", label %"for input_wrapper.s0.c.c653.us3542.us.epil"

"for input_wrapper.s0.c.c653.us3542.us.epil":     ; preds = %"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa", %"for input_wrapper.s0.c.c653.us3542.us.epil"
  %indvars.iv4717.epil = phi i64 [ %indvars.iv.next4718.epil, %"for input_wrapper.s0.c.c653.us3542.us.epil" ], [ %indvars.iv4717.unr, %"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa" ]
  %epil.iter6109 = phi i64 [ %epil.iter6109.sub, %"for input_wrapper.s0.c.c653.us3542.us.epil" ], [ %xtraiter6108, %"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa" ]
  %7177 = shl nuw nsw i64 %indvars.iv4717.epil, 4
  %7178 = add nsw i64 %7177, %7135
  %7179 = getelementptr inbounds i8, i8* %172, i64 %7178
  %7180 = bitcast i8* %7179 to <16 x i8>*
  %7181 = load <16 x i8>, <16 x i8>* %7180, align 4, !tbaa !397
  %7182 = zext <16 x i8> %7181 to <16 x i16>
  %7183 = sub nsw <16 x i16> %7182, %6655
  %7184 = add nsw i64 %7177, %7136
  %7185 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7184
  %7186 = bitcast i16* %7185 to <16 x i16>*
  store <16 x i16> %7183, <16 x i16>* %7186, align 8, !tbaa !399
  %indvars.iv.next4718.epil = add nuw nsw i64 %indvars.iv4717.epil, 1
  %epil.iter6109.sub = add i64 %epil.iter6109, -1
  %epil.iter6109.cmp.not = icmp eq i64 %epil.iter6109.sub, 0
  br i1 %epil.iter6109.cmp.not, label %"end for input_wrapper.s0.c.c654.loopexit.us3548.us", label %"for input_wrapper.s0.c.c653.us3542.us.epil", !llvm.loop !457

"end for input_wrapper.s0.c.c654.loopexit.us3548.us": ; preds = %"for input_wrapper.s0.c.c653.us3542.us.epil", %"end for input_wrapper.s0.c.c654.loopexit.us3548.us.unr-lcssa"
  %indvars.iv.next4720 = add nuw nsw i64 %indvars.iv4719, 1
  %.not2059.us3546.us = icmp eq i64 %indvars.iv4719, %6722
  br i1 %.not2059.us3546.us, label %"end for input_wrapper.s0.x.rebased649.loopexit.us", label %"for input_wrapper.s0.x.rebased648.us3537.us"

next_bb639:                                       ; preds = %next_bb597
  br i1 %6601, label %next_bb667, label %then_bb666

then_bb666:                                       ; preds = %next_bb639
  br i1 %6748, label %"for input_wrapper.s0.y.rebased671", label %"consume input_wrapper727", !prof !387

next_bb667:                                       ; preds = %next_bb639
  br i1 %6602, label %next_bb695, label %then_bb694

"for input_wrapper.s0.y.rebased671":              ; preds = %then_bb666, %"end for input_wrapper.s0.x.rebased677"
  %indvars.iv4744 = phi i64 [ %indvars.iv.next4745, %"end for input_wrapper.s0.x.rebased677" ], [ 0, %then_bb666 ]
  %7187 = trunc i64 %indvars.iv4744 to i32
  %t3784674 = mul i32 %6639, %7187
  %7188 = add nsw i64 %indvars.iv4744, %6784
  %7189 = mul nsw i64 %7188, %6725
  %7190 = add nsw i64 %7189, %6779
  br i1 %6648, label %"for input_wrapper.s0.x.rebased676.preheader", label %"end for input_wrapper.s0.x.rebased677", !prof !387

"for input_wrapper.s0.x.rebased676.preheader":    ; preds = %"for input_wrapper.s0.y.rebased671"
  br i1 %6662, label %"for input_wrapper.s0.x.rebased676.us", label %"for input_wrapper.s0.x.rebased676.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased676.us":           ; preds = %"for input_wrapper.s0.x.rebased676.preheader", %"end for input_wrapper.s0.c.c.rebased687.loopexit.us"
  %indvars.iv4741 = phi i64 [ %indvars.iv.next4742, %"end for input_wrapper.s0.c.c.rebased687.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased676.preheader" ]
  %7191 = trunc i64 %indvars.iv4741 to i32
  %reass.add2830.us = add i32 %t3784674, %7191
  %reass.mul2831.us = mul i32 %reass.add2830.us, %6652
  %7192 = add nsw i64 %indvars.iv4741, %6720
  %7193 = mul nsw i64 %7192, %6721
  %7194 = add nsw i64 %7190, %7193
  %7195 = sext i32 %reass.mul2831.us to i64
  br i1 %6594, label %"for input_wrapper.s0.c.c681.us.preheader", label %"end for input_wrapper.s0.c.c682.us", !prof !387

"for input_wrapper.s0.c.c681.us.preheader":       ; preds = %"for input_wrapper.s0.x.rebased676.us"
  br i1 %6772, label %"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c681.us"

"for input_wrapper.s0.c.c681.us":                 ; preds = %"for input_wrapper.s0.c.c681.us.preheader", %"for input_wrapper.s0.c.c681.us"
  %indvars.iv4737 = phi i64 [ %indvars.iv.next4738.3, %"for input_wrapper.s0.c.c681.us" ], [ 0, %"for input_wrapper.s0.c.c681.us.preheader" ]
  %niter6127 = phi i64 [ %niter6127.nsub.3, %"for input_wrapper.s0.c.c681.us" ], [ %unroll_iter6126, %"for input_wrapper.s0.c.c681.us.preheader" ]
  %7196 = shl nuw nsw i64 %indvars.iv4737, 3
  %7197 = add nsw i64 %7196, %7194
  %7198 = getelementptr inbounds i8, i8* %172, i64 %7197
  %7199 = bitcast i8* %7198 to <8 x i8>*
  %7200 = load <8 x i8>, <8 x i8>* %7199, align 4, !tbaa !397
  %7201 = zext <8 x i8> %7200 to <8 x i16>
  %7202 = sub nsw <8 x i16> %7201, %6661
  %7203 = add nsw i64 %7196, %7195
  %7204 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7203
  %7205 = bitcast i16* %7204 to <8 x i16>*
  store <8 x i16> %7202, <8 x i16>* %7205, align 8, !tbaa !399
  %indvars.iv.next4738 = shl i64 %indvars.iv4737, 3
  %7206 = or i64 %indvars.iv.next4738, 8
  %7207 = add nsw i64 %7206, %7194
  %7208 = getelementptr inbounds i8, i8* %172, i64 %7207
  %7209 = bitcast i8* %7208 to <8 x i8>*
  %7210 = load <8 x i8>, <8 x i8>* %7209, align 4, !tbaa !397
  %7211 = zext <8 x i8> %7210 to <8 x i16>
  %7212 = sub nsw <8 x i16> %7211, %6661
  %7213 = add nsw i64 %7206, %7195
  %7214 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7213
  %7215 = bitcast i16* %7214 to <8 x i16>*
  store <8 x i16> %7212, <8 x i16>* %7215, align 8, !tbaa !399
  %indvars.iv.next4738.1 = shl i64 %indvars.iv4737, 3
  %7216 = or i64 %indvars.iv.next4738.1, 16
  %7217 = add nsw i64 %7216, %7194
  %7218 = getelementptr inbounds i8, i8* %172, i64 %7217
  %7219 = bitcast i8* %7218 to <8 x i8>*
  %7220 = load <8 x i8>, <8 x i8>* %7219, align 4, !tbaa !397
  %7221 = zext <8 x i8> %7220 to <8 x i16>
  %7222 = sub nsw <8 x i16> %7221, %6661
  %7223 = add nsw i64 %7216, %7195
  %7224 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7223
  %7225 = bitcast i16* %7224 to <8 x i16>*
  store <8 x i16> %7222, <8 x i16>* %7225, align 8, !tbaa !399
  %indvars.iv.next4738.2 = shl i64 %indvars.iv4737, 3
  %7226 = or i64 %indvars.iv.next4738.2, 24
  %7227 = add nsw i64 %7226, %7194
  %7228 = getelementptr inbounds i8, i8* %172, i64 %7227
  %7229 = bitcast i8* %7228 to <8 x i8>*
  %7230 = load <8 x i8>, <8 x i8>* %7229, align 4, !tbaa !397
  %7231 = zext <8 x i8> %7230 to <8 x i16>
  %7232 = sub nsw <8 x i16> %7231, %6661
  %7233 = add nsw i64 %7226, %7195
  %7234 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7233
  %7235 = bitcast i16* %7234 to <8 x i16>*
  store <8 x i16> %7232, <8 x i16>* %7235, align 8, !tbaa !399
  %indvars.iv.next4738.3 = add nuw nsw i64 %indvars.iv4737, 4
  %niter6127.nsub.3 = add i64 %niter6127, -4
  %niter6127.ncmp.3 = icmp eq i64 %niter6127.nsub.3, 0
  br i1 %niter6127.ncmp.3, label %"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c681.us"

"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c681.us", %"for input_wrapper.s0.c.c681.us.preheader"
  %indvars.iv4737.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c681.us.preheader" ], [ %indvars.iv.next4738.3, %"for input_wrapper.s0.c.c681.us" ]
  br i1 %lcmp.mod6125.not, label %"end for input_wrapper.s0.c.c682.us", label %"for input_wrapper.s0.c.c681.us.epil"

"for input_wrapper.s0.c.c681.us.epil":            ; preds = %"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c681.us.epil"
  %indvars.iv4737.epil = phi i64 [ %indvars.iv.next4738.epil, %"for input_wrapper.s0.c.c681.us.epil" ], [ %indvars.iv4737.unr, %"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa" ]
  %epil.iter6124 = phi i64 [ %epil.iter6124.sub, %"for input_wrapper.s0.c.c681.us.epil" ], [ %xtraiter6123, %"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa" ]
  %7236 = shl nuw nsw i64 %indvars.iv4737.epil, 3
  %7237 = add nsw i64 %7236, %7194
  %7238 = getelementptr inbounds i8, i8* %172, i64 %7237
  %7239 = bitcast i8* %7238 to <8 x i8>*
  %7240 = load <8 x i8>, <8 x i8>* %7239, align 4, !tbaa !397
  %7241 = zext <8 x i8> %7240 to <8 x i16>
  %7242 = sub nsw <8 x i16> %7241, %6661
  %7243 = add nsw i64 %7236, %7195
  %7244 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7243
  %7245 = bitcast i16* %7244 to <8 x i16>*
  store <8 x i16> %7242, <8 x i16>* %7245, align 8, !tbaa !399
  %indvars.iv.next4738.epil = add nuw nsw i64 %indvars.iv4737.epil, 1
  %epil.iter6124.sub = add i64 %epil.iter6124, -1
  %epil.iter6124.cmp.not = icmp eq i64 %epil.iter6124.sub, 0
  br i1 %epil.iter6124.cmp.not, label %"end for input_wrapper.s0.c.c682.us", label %"for input_wrapper.s0.c.c681.us.epil", !llvm.loop !458

"end for input_wrapper.s0.c.c682.us":             ; preds = %"end for input_wrapper.s0.c.c682.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c681.us.epil", %"for input_wrapper.s0.x.rebased676.us"
  br label %"for input_wrapper.s0.c.c.rebased686.us"

"for input_wrapper.s0.c.c.rebased686.us":         ; preds = %"end for input_wrapper.s0.c.c682.us", %after_bb689.us
  %indvars.iv4739 = phi i64 [ 0, %"end for input_wrapper.s0.c.c682.us" ], [ %indvars.iv.next4740, %after_bb689.us ]
  %7246 = add nsw i64 %indvars.iv4739, %6727
  %7247 = trunc i64 %7246 to i32
  %7248 = shl nsw i32 %7247, 3
  %7249 = add nsw i32 %7248, 8
  %.not2055.us = icmp sgt i32 %7249, %t3773641
  br i1 %.not2055.us, label %next_bb691.us, label %then_bb690.us

then_bb690.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased686.us"
  %7250 = shl nsw i64 %7246, 3
  %7251 = add nsw i64 %7250, %7194
  %7252 = getelementptr inbounds i8, i8* %172, i64 %7251
  %7253 = bitcast i8* %7252 to <8 x i8>*
  %7254 = load <8 x i8>, <8 x i8>* %7253, align 4, !tbaa !397
  %7255 = zext <8 x i8> %7254 to <8 x i16>
  %7256 = sub nsw <8 x i16> %7255, %6661
  %7257 = add nsw i64 %7250, %7195
  %7258 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7257
  %7259 = bitcast i16* %7258 to <8 x i16>*
  store <8 x i16> %7256, <8 x i16>* %7259, align 8, !tbaa !399
  br label %after_bb689.us

next_bb691.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased686.us"
  %7260 = or i32 %7248, 1
  %7261 = insertelement <8 x i32> undef, i32 %7260, i32 0
  %7262 = shufflevector <8 x i32> %7261, <8 x i32> undef, <8 x i32> zeroinitializer
  %7263 = add nsw <8 x i32> %7262, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7264 = icmp sle <8 x i32> %7263, %6664
  %7265 = shl nsw i64 %7246, 3
  %7266 = add nsw i64 %7265, %7194
  %7267 = getelementptr inbounds i8, i8* %172, i64 %7266
  %7268 = bitcast i8* %7267 to <8 x i8>*
  %7269 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %7268, i32 4, <8 x i1> %7264, <8 x i8> undef), !tbaa !397
  %7270 = zext <8 x i8> %7269 to <8 x i16>
  %7271 = sub nsw <8 x i16> %7270, %6661
  %7272 = add nsw i64 %7265, %7195
  %7273 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7272
  %7274 = bitcast i16* %7273 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %7271, <8 x i16>* %7274, i32 8, <8 x i1> %7264), !tbaa !399
  br label %after_bb689.us

after_bb689.us:                                   ; preds = %next_bb691.us, %then_bb690.us
  %indvars.iv.next4740 = add nuw nsw i64 %indvars.iv4739, 1
  %.not2056.us = icmp eq i64 %indvars.iv.next4740, %6728
  br i1 %.not2056.us, label %"end for input_wrapper.s0.c.c.rebased687.loopexit.us", label %"for input_wrapper.s0.c.c.rebased686.us"

"end for input_wrapper.s0.c.c.rebased687.loopexit.us": ; preds = %after_bb689.us
  %indvars.iv.next4742 = add nuw nsw i64 %indvars.iv4741, 1
  %.not2054.us = icmp eq i64 %indvars.iv4741, %6722
  br i1 %.not2054.us, label %"end for input_wrapper.s0.x.rebased677", label %"for input_wrapper.s0.x.rebased676.us"

"for input_wrapper.s0.x.rebased676.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased676.preheader"
  br i1 %6594, label %"for input_wrapper.s0.x.rebased676.us3556", label %"end for input_wrapper.s0.x.rebased677", !prof !387

"for input_wrapper.s0.x.rebased676.us3556":       ; preds = %"for input_wrapper.s0.x.rebased676.preheader.split", %"end for input_wrapper.s0.c.c682.loopexit.us3567"
  %indvars.iv4734 = phi i64 [ %indvars.iv.next4735, %"end for input_wrapper.s0.c.c682.loopexit.us3567" ], [ 0, %"for input_wrapper.s0.x.rebased676.preheader.split" ]
  %7275 = trunc i64 %indvars.iv4734 to i32
  %reass.add2830.us3558 = add i32 %t3784674, %7275
  %reass.mul2831.us3559 = mul i32 %reass.add2830.us3558, %6652
  %7276 = add nsw i64 %indvars.iv4734, %6720
  %7277 = mul nsw i64 %7276, %6721
  %7278 = add nsw i64 %7190, %7277
  %7279 = sext i32 %reass.mul2831.us3559 to i64
  br i1 %6771, label %"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa", label %"for input_wrapper.s0.c.c681.us3561"

"for input_wrapper.s0.c.c681.us3561":             ; preds = %"for input_wrapper.s0.x.rebased676.us3556", %"for input_wrapper.s0.c.c681.us3561"
  %indvars.iv4732 = phi i64 [ %indvars.iv.next4733.3, %"for input_wrapper.s0.c.c681.us3561" ], [ 0, %"for input_wrapper.s0.x.rebased676.us3556" ]
  %niter6122 = phi i64 [ %niter6122.nsub.3, %"for input_wrapper.s0.c.c681.us3561" ], [ %unroll_iter6121, %"for input_wrapper.s0.x.rebased676.us3556" ]
  %7280 = shl nuw nsw i64 %indvars.iv4732, 3
  %7281 = add nsw i64 %7280, %7278
  %7282 = getelementptr inbounds i8, i8* %172, i64 %7281
  %7283 = bitcast i8* %7282 to <8 x i8>*
  %7284 = load <8 x i8>, <8 x i8>* %7283, align 4, !tbaa !397
  %7285 = zext <8 x i8> %7284 to <8 x i16>
  %7286 = sub nsw <8 x i16> %7285, %6661
  %7287 = add nsw i64 %7280, %7279
  %7288 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7287
  %7289 = bitcast i16* %7288 to <8 x i16>*
  store <8 x i16> %7286, <8 x i16>* %7289, align 8, !tbaa !399
  %indvars.iv.next4733 = shl i64 %indvars.iv4732, 3
  %7290 = or i64 %indvars.iv.next4733, 8
  %7291 = add nsw i64 %7290, %7278
  %7292 = getelementptr inbounds i8, i8* %172, i64 %7291
  %7293 = bitcast i8* %7292 to <8 x i8>*
  %7294 = load <8 x i8>, <8 x i8>* %7293, align 4, !tbaa !397
  %7295 = zext <8 x i8> %7294 to <8 x i16>
  %7296 = sub nsw <8 x i16> %7295, %6661
  %7297 = add nsw i64 %7290, %7279
  %7298 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7297
  %7299 = bitcast i16* %7298 to <8 x i16>*
  store <8 x i16> %7296, <8 x i16>* %7299, align 8, !tbaa !399
  %indvars.iv.next4733.1 = shl i64 %indvars.iv4732, 3
  %7300 = or i64 %indvars.iv.next4733.1, 16
  %7301 = add nsw i64 %7300, %7278
  %7302 = getelementptr inbounds i8, i8* %172, i64 %7301
  %7303 = bitcast i8* %7302 to <8 x i8>*
  %7304 = load <8 x i8>, <8 x i8>* %7303, align 4, !tbaa !397
  %7305 = zext <8 x i8> %7304 to <8 x i16>
  %7306 = sub nsw <8 x i16> %7305, %6661
  %7307 = add nsw i64 %7300, %7279
  %7308 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7307
  %7309 = bitcast i16* %7308 to <8 x i16>*
  store <8 x i16> %7306, <8 x i16>* %7309, align 8, !tbaa !399
  %indvars.iv.next4733.2 = shl i64 %indvars.iv4732, 3
  %7310 = or i64 %indvars.iv.next4733.2, 24
  %7311 = add nsw i64 %7310, %7278
  %7312 = getelementptr inbounds i8, i8* %172, i64 %7311
  %7313 = bitcast i8* %7312 to <8 x i8>*
  %7314 = load <8 x i8>, <8 x i8>* %7313, align 4, !tbaa !397
  %7315 = zext <8 x i8> %7314 to <8 x i16>
  %7316 = sub nsw <8 x i16> %7315, %6661
  %7317 = add nsw i64 %7310, %7279
  %7318 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7317
  %7319 = bitcast i16* %7318 to <8 x i16>*
  store <8 x i16> %7316, <8 x i16>* %7319, align 8, !tbaa !399
  %indvars.iv.next4733.3 = add nuw nsw i64 %indvars.iv4732, 4
  %niter6122.nsub.3 = add i64 %niter6122, -4
  %niter6122.ncmp.3 = icmp eq i64 %niter6122.nsub.3, 0
  br i1 %niter6122.ncmp.3, label %"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa", label %"for input_wrapper.s0.c.c681.us3561"

"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c681.us3561", %"for input_wrapper.s0.x.rebased676.us3556"
  %indvars.iv4732.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased676.us3556" ], [ %indvars.iv.next4733.3, %"for input_wrapper.s0.c.c681.us3561" ]
  br i1 %lcmp.mod6120.not, label %"end for input_wrapper.s0.c.c682.loopexit.us3567", label %"for input_wrapper.s0.c.c681.us3561.epil"

"for input_wrapper.s0.c.c681.us3561.epil":        ; preds = %"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa", %"for input_wrapper.s0.c.c681.us3561.epil"
  %indvars.iv4732.epil = phi i64 [ %indvars.iv.next4733.epil, %"for input_wrapper.s0.c.c681.us3561.epil" ], [ %indvars.iv4732.unr, %"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa" ]
  %epil.iter6119 = phi i64 [ %epil.iter6119.sub, %"for input_wrapper.s0.c.c681.us3561.epil" ], [ %xtraiter6118, %"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa" ]
  %7320 = shl nuw nsw i64 %indvars.iv4732.epil, 3
  %7321 = add nsw i64 %7320, %7278
  %7322 = getelementptr inbounds i8, i8* %172, i64 %7321
  %7323 = bitcast i8* %7322 to <8 x i8>*
  %7324 = load <8 x i8>, <8 x i8>* %7323, align 4, !tbaa !397
  %7325 = zext <8 x i8> %7324 to <8 x i16>
  %7326 = sub nsw <8 x i16> %7325, %6661
  %7327 = add nsw i64 %7320, %7279
  %7328 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7327
  %7329 = bitcast i16* %7328 to <8 x i16>*
  store <8 x i16> %7326, <8 x i16>* %7329, align 8, !tbaa !399
  %indvars.iv.next4733.epil = add nuw nsw i64 %indvars.iv4732.epil, 1
  %epil.iter6119.sub = add i64 %epil.iter6119, -1
  %epil.iter6119.cmp.not = icmp eq i64 %epil.iter6119.sub, 0
  br i1 %epil.iter6119.cmp.not, label %"end for input_wrapper.s0.c.c682.loopexit.us3567", label %"for input_wrapper.s0.c.c681.us3561.epil", !llvm.loop !459

"end for input_wrapper.s0.c.c682.loopexit.us3567": ; preds = %"for input_wrapper.s0.c.c681.us3561.epil", %"end for input_wrapper.s0.c.c682.loopexit.us3567.unr-lcssa"
  %indvars.iv.next4735 = add nuw nsw i64 %indvars.iv4734, 1
  %.not2054.us3565 = icmp eq i64 %indvars.iv4734, %6722
  br i1 %.not2054.us3565, label %"end for input_wrapper.s0.x.rebased677", label %"for input_wrapper.s0.x.rebased676.us3556"

"end for input_wrapper.s0.x.rebased677":          ; preds = %"end for input_wrapper.s0.c.c682.loopexit.us3567", %"end for input_wrapper.s0.c.c.rebased687.loopexit.us", %"for input_wrapper.s0.x.rebased676.preheader.split", %"for input_wrapper.s0.y.rebased671"
  %indvars.iv.next4745 = add nuw nsw i64 %indvars.iv4744, 1
  %.not2053 = icmp eq i64 %indvars.iv4744, %6753
  br i1 %.not2053, label %"consume input_wrapper727", label %"for input_wrapper.s0.y.rebased671"

then_bb694:                                       ; preds = %next_bb667
  br i1 %6748, label %"for input_wrapper.s0.y.rebased698", label %"consume input_wrapper727", !prof !387

next_bb695:                                       ; preds = %next_bb667
  br i1 %6748, label %"for input_wrapper.s0.y.rebased714", label %"consume input_wrapper727", !prof !387

"for input_wrapper.s0.y.rebased698":              ; preds = %then_bb694, %"end for input_wrapper.s0.x.rebased704"
  %indvars.iv4752 = phi i64 [ %indvars.iv.next4753, %"end for input_wrapper.s0.x.rebased704" ], [ 0, %then_bb694 ]
  %7330 = trunc i64 %indvars.iv4752 to i32
  %t3792701 = mul i32 %6639, %7330
  %7331 = add nsw i64 %indvars.iv4752, %6784
  %7332 = mul nsw i64 %7331, %6725
  %7333 = add nsw i64 %7332, %6779
  br i1 %brmerge5039.demorgan, label %"for input_wrapper.s0.x.rebased703.us", label %"end for input_wrapper.s0.x.rebased704", !prof !407

"for input_wrapper.s0.x.rebased703.us":           ; preds = %"for input_wrapper.s0.y.rebased698", %"end for input_wrapper.s0.c.c709.loopexit.us"
  %indvars.iv4749 = phi i64 [ %indvars.iv.next4750, %"end for input_wrapper.s0.c.c709.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased698" ]
  %7334 = trunc i64 %indvars.iv4749 to i32
  %reass.add2832.us = add i32 %t3792701, %7334
  %reass.mul2833.us = mul i32 %reass.add2832.us, %6652
  %7335 = add nsw i64 %indvars.iv4749, %6720
  %7336 = mul nsw i64 %7335, %6721
  %7337 = add nsw i64 %7333, %7336
  %7338 = sext i32 %reass.mul2833.us to i64
  br i1 %6773, label %"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c708.us"

"for input_wrapper.s0.c.c708.us":                 ; preds = %"for input_wrapper.s0.x.rebased703.us", %"for input_wrapper.s0.c.c708.us"
  %indvars.iv4747 = phi i64 [ %indvars.iv.next4748.3, %"for input_wrapper.s0.c.c708.us" ], [ 0, %"for input_wrapper.s0.x.rebased703.us" ]
  %niter6132 = phi i64 [ %niter6132.nsub.3, %"for input_wrapper.s0.c.c708.us" ], [ %unroll_iter6131, %"for input_wrapper.s0.x.rebased703.us" ]
  %7339 = shl nuw nsw i64 %indvars.iv4747, 2
  %7340 = add nsw i64 %7339, %7337
  %7341 = getelementptr inbounds i8, i8* %172, i64 %7340
  %7342 = bitcast i8* %7341 to <4 x i8>*
  %7343 = load <4 x i8>, <4 x i8>* %7342, align 4, !tbaa !397
  %7344 = zext <4 x i8> %7343 to <4 x i16>
  %7345 = sub nsw <4 x i16> %7344, %6667
  %7346 = add nsw i64 %7339, %7338
  %7347 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7346
  %7348 = bitcast i16* %7347 to <4 x i16>*
  store <4 x i16> %7345, <4 x i16>* %7348, align 8, !tbaa !399
  %indvars.iv.next4748 = shl i64 %indvars.iv4747, 2
  %7349 = or i64 %indvars.iv.next4748, 4
  %7350 = add nsw i64 %7349, %7337
  %7351 = getelementptr inbounds i8, i8* %172, i64 %7350
  %7352 = bitcast i8* %7351 to <4 x i8>*
  %7353 = load <4 x i8>, <4 x i8>* %7352, align 4, !tbaa !397
  %7354 = zext <4 x i8> %7353 to <4 x i16>
  %7355 = sub nsw <4 x i16> %7354, %6667
  %7356 = add nsw i64 %7349, %7338
  %7357 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7356
  %7358 = bitcast i16* %7357 to <4 x i16>*
  store <4 x i16> %7355, <4 x i16>* %7358, align 8, !tbaa !399
  %indvars.iv.next4748.1 = shl i64 %indvars.iv4747, 2
  %7359 = or i64 %indvars.iv.next4748.1, 8
  %7360 = add nsw i64 %7359, %7337
  %7361 = getelementptr inbounds i8, i8* %172, i64 %7360
  %7362 = bitcast i8* %7361 to <4 x i8>*
  %7363 = load <4 x i8>, <4 x i8>* %7362, align 4, !tbaa !397
  %7364 = zext <4 x i8> %7363 to <4 x i16>
  %7365 = sub nsw <4 x i16> %7364, %6667
  %7366 = add nsw i64 %7359, %7338
  %7367 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7366
  %7368 = bitcast i16* %7367 to <4 x i16>*
  store <4 x i16> %7365, <4 x i16>* %7368, align 8, !tbaa !399
  %indvars.iv.next4748.2 = shl i64 %indvars.iv4747, 2
  %7369 = or i64 %indvars.iv.next4748.2, 12
  %7370 = add nsw i64 %7369, %7337
  %7371 = getelementptr inbounds i8, i8* %172, i64 %7370
  %7372 = bitcast i8* %7371 to <4 x i8>*
  %7373 = load <4 x i8>, <4 x i8>* %7372, align 4, !tbaa !397
  %7374 = zext <4 x i8> %7373 to <4 x i16>
  %7375 = sub nsw <4 x i16> %7374, %6667
  %7376 = add nsw i64 %7369, %7338
  %7377 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7376
  %7378 = bitcast i16* %7377 to <4 x i16>*
  store <4 x i16> %7375, <4 x i16>* %7378, align 8, !tbaa !399
  %indvars.iv.next4748.3 = add nuw nsw i64 %indvars.iv4747, 4
  %niter6132.nsub.3 = add i64 %niter6132, -4
  %niter6132.ncmp.3 = icmp eq i64 %niter6132.nsub.3, 0
  br i1 %niter6132.ncmp.3, label %"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c708.us"

"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c708.us", %"for input_wrapper.s0.x.rebased703.us"
  %indvars.iv4747.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased703.us" ], [ %indvars.iv.next4748.3, %"for input_wrapper.s0.c.c708.us" ]
  br i1 %lcmp.mod6130.not, label %"end for input_wrapper.s0.c.c709.loopexit.us", label %"for input_wrapper.s0.c.c708.us.epil"

"for input_wrapper.s0.c.c708.us.epil":            ; preds = %"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c708.us.epil"
  %indvars.iv4747.epil = phi i64 [ %indvars.iv.next4748.epil, %"for input_wrapper.s0.c.c708.us.epil" ], [ %indvars.iv4747.unr, %"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa" ]
  %epil.iter6129 = phi i64 [ %epil.iter6129.sub, %"for input_wrapper.s0.c.c708.us.epil" ], [ %xtraiter6128, %"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa" ]
  %7379 = shl nuw nsw i64 %indvars.iv4747.epil, 2
  %7380 = add nsw i64 %7379, %7337
  %7381 = getelementptr inbounds i8, i8* %172, i64 %7380
  %7382 = bitcast i8* %7381 to <4 x i8>*
  %7383 = load <4 x i8>, <4 x i8>* %7382, align 4, !tbaa !397
  %7384 = zext <4 x i8> %7383 to <4 x i16>
  %7385 = sub nsw <4 x i16> %7384, %6667
  %7386 = add nsw i64 %7379, %7338
  %7387 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7386
  %7388 = bitcast i16* %7387 to <4 x i16>*
  store <4 x i16> %7385, <4 x i16>* %7388, align 8, !tbaa !399
  %indvars.iv.next4748.epil = add nuw nsw i64 %indvars.iv4747.epil, 1
  %epil.iter6129.sub = add i64 %epil.iter6129, -1
  %epil.iter6129.cmp.not = icmp eq i64 %epil.iter6129.sub, 0
  br i1 %epil.iter6129.cmp.not, label %"end for input_wrapper.s0.c.c709.loopexit.us", label %"for input_wrapper.s0.c.c708.us.epil", !llvm.loop !460

"end for input_wrapper.s0.c.c709.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c708.us.epil", %"end for input_wrapper.s0.c.c709.loopexit.us.unr-lcssa"
  %indvars.iv.next4750 = add nuw nsw i64 %indvars.iv4749, 1
  %.not2051.us = icmp eq i64 %indvars.iv4749, %6722
  br i1 %.not2051.us, label %"end for input_wrapper.s0.x.rebased704", label %"for input_wrapper.s0.x.rebased703.us"

"end for input_wrapper.s0.x.rebased704":          ; preds = %"end for input_wrapper.s0.c.c709.loopexit.us", %"for input_wrapper.s0.y.rebased698"
  %indvars.iv.next4753 = add nuw nsw i64 %indvars.iv4752, 1
  %.not2050 = icmp eq i64 %indvars.iv4752, %6754
  br i1 %.not2050, label %"consume input_wrapper727", label %"for input_wrapper.s0.y.rebased698"

"for input_wrapper.s0.y.rebased714":              ; preds = %next_bb695, %"end for input_wrapper.s0.x.rebased720"
  %indvars.iv4760 = phi i64 [ %indvars.iv.next4761, %"end for input_wrapper.s0.x.rebased720" ], [ 0, %next_bb695 ]
  %7389 = trunc i64 %indvars.iv4760 to i32
  %t3799717 = mul i32 %6639, %7389
  %7390 = add nsw i64 %indvars.iv4760, %6784
  %7391 = mul nsw i64 %7390, %6725
  %7392 = add nsw i64 %7391, %6779
  br i1 %brmerge5042.demorgan, label %iter.check5614, label %"end for input_wrapper.s0.x.rebased720", !prof !407

iter.check5614:                                   ; preds = %"for input_wrapper.s0.y.rebased714", %"end for input_wrapper.s0.c725.loopexit.us"
  %indvars.iv4757 = phi i64 [ %indvars.iv.next4758, %"end for input_wrapper.s0.c725.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased714" ]
  %7393 = trunc i64 %indvars.iv4757 to i32
  %reass.add2834.us = add i32 %t3799717, %7393
  %reass.mul2835.us = mul i32 %reass.add2834.us, %6652
  %7394 = add nsw i64 %indvars.iv4757, %6720
  %7395 = mul nsw i64 %7394, %6721
  %7396 = add nsw i64 %7392, %7395
  %7397 = sext i32 %reass.mul2835.us to i64
  br i1 %min.iters.check5612, label %"for input_wrapper.s0.c724.us.preheader", label %vector.main.loop.iter.check5616

vector.main.loop.iter.check5616:                  ; preds = %iter.check5614
  br i1 %min.iters.check5615, label %vec.epilog.ph5639, label %vector.ph5617

vector.ph5617:                                    ; preds = %vector.main.loop.iter.check5616
  br i1 %6774, label %middle.block5609.unr-lcssa, label %vector.body5611

vector.body5611:                                  ; preds = %vector.ph5617, %vector.body5611
  %index5620 = phi i64 [ %index.next5621.1, %vector.body5611 ], [ 0, %vector.ph5617 ]
  %niter6136 = phi i64 [ %niter6136.nsub.1, %vector.body5611 ], [ %unroll_iter6135, %vector.ph5617 ]
  %7398 = add nsw i64 %index5620, %7396
  %7399 = getelementptr inbounds i8, i8* %172, i64 %7398
  %7400 = bitcast i8* %7399 to <16 x i8>*
  %wide.load5623 = load <16 x i8>, <16 x i8>* %7400, align 1, !tbaa !397
  %7401 = getelementptr inbounds i8, i8* %7399, i64 16
  %7402 = bitcast i8* %7401 to <16 x i8>*
  %wide.load5624 = load <16 x i8>, <16 x i8>* %7402, align 1, !tbaa !397
  %7403 = getelementptr inbounds i8, i8* %7399, i64 32
  %7404 = bitcast i8* %7403 to <16 x i8>*
  %wide.load5625 = load <16 x i8>, <16 x i8>* %7404, align 1, !tbaa !397
  %7405 = getelementptr inbounds i8, i8* %7399, i64 48
  %7406 = bitcast i8* %7405 to <16 x i8>*
  %wide.load5626 = load <16 x i8>, <16 x i8>* %7406, align 1, !tbaa !397
  %7407 = zext <16 x i8> %wide.load5623 to <16 x i16>
  %7408 = zext <16 x i8> %wide.load5624 to <16 x i16>
  %7409 = zext <16 x i8> %wide.load5625 to <16 x i16>
  %7410 = zext <16 x i8> %wide.load5626 to <16 x i16>
  %7411 = sub nsw <16 x i16> %7407, %broadcast.splat5628
  %7412 = sub nsw <16 x i16> %7408, %broadcast.splat5630
  %7413 = sub nsw <16 x i16> %7409, %broadcast.splat5632
  %7414 = sub nsw <16 x i16> %7410, %broadcast.splat5634
  %7415 = add nsw i64 %index5620, %7397
  %7416 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7415
  %7417 = bitcast i16* %7416 to <16 x i16>*
  store <16 x i16> %7411, <16 x i16>* %7417, align 2, !tbaa !399
  %7418 = getelementptr inbounds i16, i16* %7416, i64 16
  %7419 = bitcast i16* %7418 to <16 x i16>*
  store <16 x i16> %7412, <16 x i16>* %7419, align 2, !tbaa !399
  %7420 = getelementptr inbounds i16, i16* %7416, i64 32
  %7421 = bitcast i16* %7420 to <16 x i16>*
  store <16 x i16> %7413, <16 x i16>* %7421, align 2, !tbaa !399
  %7422 = getelementptr inbounds i16, i16* %7416, i64 48
  %7423 = bitcast i16* %7422 to <16 x i16>*
  store <16 x i16> %7414, <16 x i16>* %7423, align 2, !tbaa !399
  %index.next5621 = or i64 %index5620, 64
  %7424 = add nsw i64 %index.next5621, %7396
  %7425 = getelementptr inbounds i8, i8* %172, i64 %7424
  %7426 = bitcast i8* %7425 to <16 x i8>*
  %wide.load5623.1 = load <16 x i8>, <16 x i8>* %7426, align 1, !tbaa !397
  %7427 = getelementptr inbounds i8, i8* %7425, i64 16
  %7428 = bitcast i8* %7427 to <16 x i8>*
  %wide.load5624.1 = load <16 x i8>, <16 x i8>* %7428, align 1, !tbaa !397
  %7429 = getelementptr inbounds i8, i8* %7425, i64 32
  %7430 = bitcast i8* %7429 to <16 x i8>*
  %wide.load5625.1 = load <16 x i8>, <16 x i8>* %7430, align 1, !tbaa !397
  %7431 = getelementptr inbounds i8, i8* %7425, i64 48
  %7432 = bitcast i8* %7431 to <16 x i8>*
  %wide.load5626.1 = load <16 x i8>, <16 x i8>* %7432, align 1, !tbaa !397
  %7433 = zext <16 x i8> %wide.load5623.1 to <16 x i16>
  %7434 = zext <16 x i8> %wide.load5624.1 to <16 x i16>
  %7435 = zext <16 x i8> %wide.load5625.1 to <16 x i16>
  %7436 = zext <16 x i8> %wide.load5626.1 to <16 x i16>
  %7437 = sub nsw <16 x i16> %7433, %broadcast.splat5628
  %7438 = sub nsw <16 x i16> %7434, %broadcast.splat5630
  %7439 = sub nsw <16 x i16> %7435, %broadcast.splat5632
  %7440 = sub nsw <16 x i16> %7436, %broadcast.splat5634
  %7441 = add nsw i64 %index.next5621, %7397
  %7442 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7441
  %7443 = bitcast i16* %7442 to <16 x i16>*
  store <16 x i16> %7437, <16 x i16>* %7443, align 2, !tbaa !399
  %7444 = getelementptr inbounds i16, i16* %7442, i64 16
  %7445 = bitcast i16* %7444 to <16 x i16>*
  store <16 x i16> %7438, <16 x i16>* %7445, align 2, !tbaa !399
  %7446 = getelementptr inbounds i16, i16* %7442, i64 32
  %7447 = bitcast i16* %7446 to <16 x i16>*
  store <16 x i16> %7439, <16 x i16>* %7447, align 2, !tbaa !399
  %7448 = getelementptr inbounds i16, i16* %7442, i64 48
  %7449 = bitcast i16* %7448 to <16 x i16>*
  store <16 x i16> %7440, <16 x i16>* %7449, align 2, !tbaa !399
  %index.next5621.1 = add i64 %index5620, 128
  %niter6136.nsub.1 = add i64 %niter6136, -2
  %niter6136.ncmp.1 = icmp eq i64 %niter6136.nsub.1, 0
  br i1 %niter6136.ncmp.1, label %middle.block5609.unr-lcssa, label %vector.body5611, !llvm.loop !461

middle.block5609.unr-lcssa:                       ; preds = %vector.body5611, %vector.ph5617
  %index5620.unr = phi i64 [ 0, %vector.ph5617 ], [ %index.next5621.1, %vector.body5611 ]
  br i1 %lcmp.mod6134.not, label %middle.block5609, label %vector.body5611.epil

vector.body5611.epil:                             ; preds = %middle.block5609.unr-lcssa
  %7450 = add nsw i64 %index5620.unr, %7396
  %7451 = getelementptr inbounds i8, i8* %172, i64 %7450
  %7452 = bitcast i8* %7451 to <16 x i8>*
  %wide.load5623.epil = load <16 x i8>, <16 x i8>* %7452, align 1, !tbaa !397
  %7453 = getelementptr inbounds i8, i8* %7451, i64 16
  %7454 = bitcast i8* %7453 to <16 x i8>*
  %wide.load5624.epil = load <16 x i8>, <16 x i8>* %7454, align 1, !tbaa !397
  %7455 = getelementptr inbounds i8, i8* %7451, i64 32
  %7456 = bitcast i8* %7455 to <16 x i8>*
  %wide.load5625.epil = load <16 x i8>, <16 x i8>* %7456, align 1, !tbaa !397
  %7457 = getelementptr inbounds i8, i8* %7451, i64 48
  %7458 = bitcast i8* %7457 to <16 x i8>*
  %wide.load5626.epil = load <16 x i8>, <16 x i8>* %7458, align 1, !tbaa !397
  %7459 = zext <16 x i8> %wide.load5623.epil to <16 x i16>
  %7460 = zext <16 x i8> %wide.load5624.epil to <16 x i16>
  %7461 = zext <16 x i8> %wide.load5625.epil to <16 x i16>
  %7462 = zext <16 x i8> %wide.load5626.epil to <16 x i16>
  %7463 = sub nsw <16 x i16> %7459, %broadcast.splat5628
  %7464 = sub nsw <16 x i16> %7460, %broadcast.splat5630
  %7465 = sub nsw <16 x i16> %7461, %broadcast.splat5632
  %7466 = sub nsw <16 x i16> %7462, %broadcast.splat5634
  %7467 = add nsw i64 %index5620.unr, %7397
  %7468 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7467
  %7469 = bitcast i16* %7468 to <16 x i16>*
  store <16 x i16> %7463, <16 x i16>* %7469, align 2, !tbaa !399
  %7470 = getelementptr inbounds i16, i16* %7468, i64 16
  %7471 = bitcast i16* %7470 to <16 x i16>*
  store <16 x i16> %7464, <16 x i16>* %7471, align 2, !tbaa !399
  %7472 = getelementptr inbounds i16, i16* %7468, i64 32
  %7473 = bitcast i16* %7472 to <16 x i16>*
  store <16 x i16> %7465, <16 x i16>* %7473, align 2, !tbaa !399
  %7474 = getelementptr inbounds i16, i16* %7468, i64 48
  %7475 = bitcast i16* %7474 to <16 x i16>*
  store <16 x i16> %7466, <16 x i16>* %7475, align 2, !tbaa !399
  br label %middle.block5609

middle.block5609:                                 ; preds = %middle.block5609.unr-lcssa, %vector.body5611.epil
  br i1 %cmp.n5622, label %"end for input_wrapper.s0.c725.loopexit.us", label %vec.epilog.iter.check5638

vec.epilog.iter.check5638:                        ; preds = %middle.block5609
  br i1 %min.epilog.iters.check5641, label %"for input_wrapper.s0.c724.us.preheader", label %vec.epilog.ph5639

vec.epilog.ph5639:                                ; preds = %vector.main.loop.iter.check5616, %vec.epilog.iter.check5638
  %vec.epilog.resume.val5642 = phi i64 [ %n.vec5619, %vec.epilog.iter.check5638 ], [ 0, %vector.main.loop.iter.check5616 ]
  br label %vec.epilog.vector.body5637

vec.epilog.vector.body5637:                       ; preds = %vec.epilog.vector.body5637, %vec.epilog.ph5639
  %index5645 = phi i64 [ %vec.epilog.resume.val5642, %vec.epilog.ph5639 ], [ %index.next5646, %vec.epilog.vector.body5637 ]
  %7476 = add nsw i64 %index5645, %7396
  %7477 = getelementptr inbounds i8, i8* %172, i64 %7476
  %7478 = bitcast i8* %7477 to <8 x i8>*
  %wide.load5649 = load <8 x i8>, <8 x i8>* %7478, align 1, !tbaa !397
  %7479 = zext <8 x i8> %wide.load5649 to <8 x i16>
  %7480 = sub nsw <8 x i16> %7479, %broadcast.splat5651
  %7481 = add nsw i64 %index5645, %7397
  %7482 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7481
  %7483 = bitcast i16* %7482 to <8 x i16>*
  store <8 x i16> %7480, <8 x i16>* %7483, align 2, !tbaa !399
  %index.next5646 = add i64 %index5645, 8
  %7484 = icmp eq i64 %index.next5646, %n.vec5644
  br i1 %7484, label %vec.epilog.middle.block5635, label %vec.epilog.vector.body5637, !llvm.loop !462

vec.epilog.middle.block5635:                      ; preds = %vec.epilog.vector.body5637
  br i1 %cmp.n5648, label %"end for input_wrapper.s0.c725.loopexit.us", label %"for input_wrapper.s0.c724.us.preheader"

"for input_wrapper.s0.c724.us.preheader":         ; preds = %iter.check5614, %vec.epilog.iter.check5638, %vec.epilog.middle.block5635
  %indvars.iv4755.ph = phi i64 [ 0, %iter.check5614 ], [ %n.vec5619, %vec.epilog.iter.check5638 ], [ %n.vec5644, %vec.epilog.middle.block5635 ]
  br label %"for input_wrapper.s0.c724.us"

"for input_wrapper.s0.c724.us":                   ; preds = %"for input_wrapper.s0.c724.us.preheader", %"for input_wrapper.s0.c724.us"
  %indvars.iv4755 = phi i64 [ %indvars.iv.next4756, %"for input_wrapper.s0.c724.us" ], [ %indvars.iv4755.ph, %"for input_wrapper.s0.c724.us.preheader" ]
  %7485 = add nsw i64 %indvars.iv4755, %7396
  %7486 = getelementptr inbounds i8, i8* %172, i64 %7485
  %7487 = load i8, i8* %7486, align 1, !tbaa !397
  %7488 = zext i8 %7487 to i16
  %7489 = sub nsw i16 %7488, %6668
  %7490 = add nsw i64 %indvars.iv4755, %7397
  %7491 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7490
  store i16 %7489, i16* %7491, align 2, !tbaa !399
  %indvars.iv.next4756 = add nuw nsw i64 %indvars.iv4755, 1
  %.not2049.us = icmp eq i64 %indvars.iv.next4756, %6730
  br i1 %.not2049.us, label %"end for input_wrapper.s0.c725.loopexit.us", label %"for input_wrapper.s0.c724.us", !llvm.loop !463

"end for input_wrapper.s0.c725.loopexit.us":      ; preds = %"for input_wrapper.s0.c724.us", %vec.epilog.middle.block5635, %middle.block5609
  %indvars.iv.next4758 = add nuw nsw i64 %indvars.iv4757, 1
  %.not2048.us = icmp eq i64 %indvars.iv4757, %6722
  br i1 %.not2048.us, label %"end for input_wrapper.s0.x.rebased720", label %iter.check5614

"end for input_wrapper.s0.x.rebased720":          ; preds = %"end for input_wrapper.s0.c725.loopexit.us", %"for input_wrapper.s0.y.rebased714"
  %indvars.iv.next4761 = add nuw nsw i64 %indvars.iv4760, 1
  %.not2047 = icmp eq i64 %indvars.iv4760, %6755
  br i1 %.not2047, label %"consume input_wrapper727", label %"for input_wrapper.s0.y.rebased714"

"consume input_wrapper727":                       ; preds = %"end for input_wrapper.s0.x.rebased649.loopexit.us", %"end for input_wrapper.s0.x.rebased677", %"end for input_wrapper.s0.x.rebased704", %"end for input_wrapper.s0.x.rebased720", %"end for input_wrapper.s0.x.x.rebased625", %then_bb638, %next_bb695, %then_bb694, %then_bb666, %then_bb596
  %7492 = trunc i64 %6782 to i32
  %7493 = mul i32 %189, %7492
  %t3732585 = add i32 %7493, %6781
  %t3804731 = sub i32 %t3732585, %reass.add2837
  br i1 %208, label %"for output.s0.x.xo732", label %"end for output.s0.x.xo733", !prof !387

"for output.s0.x.xo732":                          ; preds = %"consume input_wrapper727", %"end for output.s0.c.co743"
  %output.s0.x.xo734 = phi i32 [ %7628, %"end for output.s0.c.co743" ], [ 0, %"consume input_wrapper727" ]
  %a268 = shl nuw nsw i32 %output.s0.x.xo734, 1
  %7494 = icmp sgt i32 %b270, %a268
  %output.s0.x.x.base.s735 = select i1 %7494, i32 %a268, i32 %b270
  %t3810736 = add nsw i32 %output.s0.x.x.base.s735, %184
  %t3811737 = add nsw i32 %t3810736, 1
  br i1 %6680, label %"for output.s0.c.co742.preheader", label %"end for output.s0.c.co743", !prof !387

"for output.s0.c.co742.preheader":                ; preds = %"for output.s0.x.xo732"
  %7495 = mul nsw i32 %t3810736, %stride_x
  %t3806739 = sub i32 %7495, %b258
  %7496 = mul nsw i32 %t3811737, %stride_x
  %t3807738 = sub i32 %7496, %b258
  %7497 = mul nsw i32 %t3810736, %186
  %t3808741 = add nsw i32 %7497, %t3804731
  %7498 = mul nsw i32 %t3811737, %186
  %t3809740 = add nsw i32 %7498, %t3804731
  %7499 = sext i32 %t3808741 to i64
  %7500 = sext i32 %t3809740 to i64
  %7501 = sext i32 %t3807738 to i64
  %7502 = sext i32 %t3806739 to i64
  br label %"for output.s0.c.co742"

"end for output.s0.x.xo733":                      ; preds = %"end for output.s0.c.co743", %"consume input_wrapper727"
  %tobool.not.i2457.not = icmp eq i8* %6785, null
  br i1 %tobool.not.i2457.not, label %call_destructor.exit2460, label %if.then.i2458

if.then.i2458:                                    ; preds = %"end for output.s0.x.xo733"
  call void @halide_free(i8* null, i8* nonnull %6785) #17
  br label %call_destructor.exit2460

call_destructor.exit2460:                         ; preds = %"end for output.s0.x.xo733", %if.then.i2458
  %indvars.iv.next4795 = add nuw nsw i64 %indvars.iv4794, 1
  %7503 = icmp eq i64 %indvars.iv.next4795, %zext4798
  br i1 %7503, label %"end for output.s0.y.rebased590", label %"for output.s0.y.rebased589"

"for output.s0.c.co742":                          ; preds = %"for output.s0.c.co742.preheader", %"consume convolved774"
  %indvars.iv4791 = phi i64 [ 0, %"for output.s0.c.co742.preheader" ], [ %indvars.iv.next4792, %"consume convolved774" ]
  %7504 = shl nuw nsw i64 %indvars.iv4791, 5
  %7505 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %7504
  %7506 = bitcast i32* %7505 to <8 x i32>*
  %7507 = load <8 x i32>, <8 x i32>* %7506, align 32, !tbaa !391
  %7508 = getelementptr inbounds i32, i32* %7505, i64 8
  %7509 = bitcast i32* %7508 to <8 x i32>*
  %7510 = load <8 x i32>, <8 x i32>* %7509, align 32, !tbaa !391
  %7511 = getelementptr inbounds i32, i32* %7505, i64 16
  %7512 = bitcast i32* %7511 to <8 x i32>*
  %7513 = load <8 x i32>, <8 x i32>* %7512, align 32, !tbaa !391
  %7514 = getelementptr inbounds i32, i32* %7505, i64 24
  %7515 = bitcast i32* %7514 to <8 x i32>*
  %7516 = load <8 x i32>, <8 x i32>* %7515, align 32, !tbaa !391
  %7517 = trunc i64 %indvars.iv4791 to i32
  %t3816746 = shl nsw i32 %7517, 2
  %7518 = or i32 %t3816746, 3
  %t3815747 = mul nsw i32 %7518, %167
  %7519 = or i32 %t3816746, 2
  %t3814748 = mul nsw i32 %7519, %167
  %7520 = or i32 %t3816746, 1
  %t3813749 = mul nsw i32 %7520, %167
  br i1 %6681, label %"for convolved.s1.r19$y751.preheader", label %"consume convolved774", !prof !387

"for convolved.s1.r19$y751.preheader":            ; preds = %"for output.s0.c.co742"
  %7521 = mul nsw i64 %indvars.iv4791, %6741
  br i1 %6682, label %"for convolved.s1.r19$y751.preheader.split.us", label %"consume convolved774", !prof !387

"for convolved.s1.r19$y751.preheader.split.us":   ; preds = %"for convolved.s1.r19$y751.preheader"
  br i1 %6621, label %"for convolved.s1.r19$y751.us.us", label %"consume convolved774", !prof !387

"for convolved.s1.r19$y751.us.us":                ; preds = %"for convolved.s1.r19$y751.preheader.split.us", %"end for convolved.s1.r19$x760.loopexit.split.us.us.us"
  %indvars.iv4788 = phi i64 [ %indvars.iv.next4789, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.272.18.us.us = phi <8 x i32> [ %7627, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7516, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.242.18.us.us = phi <8 x i32> [ %7623, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7513, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.212.18.us.us = phi <8 x i32> [ %7619, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7510, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.182.18.us.us = phi <8 x i32> [ %7615, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7507, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.142.24.us.us = phi <8 x i32> [ %7600, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7516, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.102.24.us.us = phi <8 x i32> [ %7589, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7513, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.62.24.us.us = phi <8 x i32> [ %7578, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7510, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %convolved1914.sroa.0.70.us.us = phi <8 x i32> [ %7566, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ], [ %7507, %"for convolved.s1.r19$y751.preheader.split.us" ]
  %7522 = mul nsw i64 %indvars.iv4788, %6739
  %7523 = trunc i64 %indvars.iv4788 to i32
  %7524 = mul i32 %7523, %dilation_y
  %7525 = sub i32 %7524, %t3677564
  %t3817755.us.us = mul nsw i32 %t3739599, %7525
  %7526 = sext i32 %t3817755.us.us to i64
  %7527 = trunc i64 %7522 to i32
  br label %"for convolved.s1.r19$x759.us.us.us"

"for convolved.s1.r19$x759.us.us.us":             ; preds = %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us", %"for convolved.s1.r19$y751.us.us"
  %indvars.iv4781 = phi i64 [ %indvars.iv.next4782, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.272.19.us.us.us = phi <8 x i32> [ %7627, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.272.18.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.242.19.us.us.us = phi <8 x i32> [ %7623, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.242.18.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.212.19.us.us.us = phi <8 x i32> [ %7619, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.212.18.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.182.19.us.us.us = phi <8 x i32> [ %7615, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.182.18.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.142.25.us.us.us = phi <8 x i32> [ %7600, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.142.24.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.102.25.us.us.us = phi <8 x i32> [ %7589, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.102.24.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.62.25.us.us.us = phi <8 x i32> [ %7578, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.62.24.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %convolved1914.sroa.0.71.us.us.us = phi <8 x i32> [ %7566, %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us" ], [ %convolved1914.sroa.0.70.us.us, %"for convolved.s1.r19$y751.us.us" ]
  %7528 = mul nsw i64 %indvars.iv4781, %6736
  %7529 = mul nsw i64 %indvars.iv4781, %6737
  %7530 = add nsw i64 %7529, %7501
  %7531 = mul nsw i64 %7530, %6733
  %7532 = add nsw i64 %7531, %7526
  %7533 = add nsw i64 %7529, %7502
  %7534 = mul nsw i64 %7533, %6733
  %7535 = add nsw i64 %7534, %7526
  %7536 = add nsw i64 %7528, %7522
  %7537 = trunc i64 %7528 to i32
  %t3821756.us.us.us = add i32 %7537, %7527
  %t3827768.us.us.us = add i32 %t3821756.us.us.us, %t3815747
  %t3826769.us.us.us = add i32 %t3821756.us.us.us, %t3814748
  %t3825770.us.us.us = add i32 %t3821756.us.us.us, %t3813749
  %7538 = sext i32 %t3825770.us.us.us to i64
  %7539 = sext i32 %t3826769.us.us.us to i64
  %7540 = sext i32 %t3827768.us.us.us to i64
  br label %"for convolved.s1.r19$z.r115771.us.us.us"

"for convolved.s1.r19$z.r115771.us.us.us":        ; preds = %"for convolved.s1.r19$z.r115771.us.us.us", %"for convolved.s1.r19$x759.us.us.us"
  %indvars.iv4779 = phi i64 [ %indvars.iv.next4780, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ 0, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.272.21.us.us.us = phi <8 x i32> [ %7627, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.272.19.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.242.21.us.us.us = phi <8 x i32> [ %7623, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.242.19.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.212.21.us.us.us = phi <8 x i32> [ %7619, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.212.19.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.182.21.us.us.us = phi <8 x i32> [ %7615, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.182.19.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.142.27.us.us.us = phi <8 x i32> [ %7600, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.142.25.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.102.27.us.us.us = phi <8 x i32> [ %7589, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.102.25.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.62.27.us.us.us = phi <8 x i32> [ %7578, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.62.25.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %convolved1914.sroa.0.73.us.us.us = phi <8 x i32> [ %7566, %"for convolved.s1.r19$z.r115771.us.us.us" ], [ %convolved1914.sroa.0.71.us.us.us, %"for convolved.s1.r19$x759.us.us.us" ]
  %7541 = shl nuw nsw i64 %indvars.iv4779, 2
  %7542 = add nsw i64 %7541, %7535
  %7543 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7542
  %7544 = bitcast i16* %7543 to <1 x i32>*
  %7545 = load <1 x i32>, <1 x i32>* %7544, align 8, !tbaa !399
  %7546 = shufflevector <1 x i32> %7545, <1 x i32> undef, <8 x i32> zeroinitializer
  %7547 = bitcast <8 x i32> %7546 to <16 x i16>
  %7548 = shl nuw nsw i64 %indvars.iv4779, 3
  %7549 = add nsw i64 %7548, %7521
  %7550 = shl nsw i64 %7549, 2
  %7551 = add nsw i64 %7550, %7536
  %7552 = getelementptr inbounds i16, i16* %6683, i64 %7551
  %7553 = bitcast i16* %7552 to <16 x i16>*
  %7554 = load <16 x i16>, <16 x i16>* %7553, align 32, !tbaa !412
  %7555 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7547, <16 x i16> %7554)
  %7556 = add <8 x i32> %7555, %convolved1914.sroa.0.73.us.us.us
  %7557 = getelementptr inbounds i16, i16* %7543, i64 2
  %7558 = bitcast i16* %7557 to <1 x i32>*
  %7559 = load <1 x i32>, <1 x i32>* %7558, align 4, !tbaa !399
  %7560 = shufflevector <1 x i32> %7559, <1 x i32> undef, <8 x i32> zeroinitializer
  %7561 = bitcast <8 x i32> %7560 to <16 x i16>
  %7562 = getelementptr inbounds i16, i16* %7552, i64 16
  %7563 = bitcast i16* %7562 to <16 x i16>*
  %7564 = load <16 x i16>, <16 x i16>* %7563, align 32, !tbaa !412
  %7565 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7561, <16 x i16> %7564)
  %7566 = add <8 x i32> %7556, %7565
  %7567 = shl nuw nsw i64 %indvars.iv4779, 5
  %7568 = add nsw i64 %7567, %7538
  %7569 = getelementptr inbounds i16, i16* %6683, i64 %7568
  %7570 = bitcast i16* %7569 to <16 x i16>*
  %7571 = load <16 x i16>, <16 x i16>* %7570, align 32, !tbaa !412
  %7572 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7547, <16 x i16> %7571)
  %7573 = add <8 x i32> %7572, %convolved1914.sroa.62.27.us.us.us
  %7574 = getelementptr inbounds i16, i16* %7569, i64 16
  %7575 = bitcast i16* %7574 to <16 x i16>*
  %7576 = load <16 x i16>, <16 x i16>* %7575, align 32, !tbaa !412
  %7577 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7561, <16 x i16> %7576)
  %7578 = add <8 x i32> %7573, %7577
  %7579 = add nsw i64 %7567, %7539
  %7580 = getelementptr inbounds i16, i16* %6683, i64 %7579
  %7581 = bitcast i16* %7580 to <16 x i16>*
  %7582 = load <16 x i16>, <16 x i16>* %7581, align 32, !tbaa !412
  %7583 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7547, <16 x i16> %7582)
  %7584 = add <8 x i32> %7583, %convolved1914.sroa.102.27.us.us.us
  %7585 = getelementptr inbounds i16, i16* %7580, i64 16
  %7586 = bitcast i16* %7585 to <16 x i16>*
  %7587 = load <16 x i16>, <16 x i16>* %7586, align 32, !tbaa !412
  %7588 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7561, <16 x i16> %7587)
  %7589 = add <8 x i32> %7584, %7588
  %7590 = add nsw i64 %7567, %7540
  %7591 = getelementptr inbounds i16, i16* %6683, i64 %7590
  %7592 = bitcast i16* %7591 to <16 x i16>*
  %7593 = load <16 x i16>, <16 x i16>* %7592, align 32, !tbaa !412
  %7594 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7547, <16 x i16> %7593)
  %7595 = add <8 x i32> %7594, %convolved1914.sroa.142.27.us.us.us
  %7596 = getelementptr inbounds i16, i16* %7591, i64 16
  %7597 = bitcast i16* %7596 to <16 x i16>*
  %7598 = load <16 x i16>, <16 x i16>* %7597, align 32, !tbaa !412
  %7599 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7561, <16 x i16> %7598)
  %7600 = add <8 x i32> %7595, %7599
  %7601 = add nsw i64 %7541, %7532
  %7602 = getelementptr inbounds i16, i16* %input_wrapper593, i64 %7601
  %7603 = bitcast i16* %7602 to <1 x i32>*
  %7604 = load <1 x i32>, <1 x i32>* %7603, align 8, !tbaa !399
  %7605 = shufflevector <1 x i32> %7604, <1 x i32> undef, <8 x i32> zeroinitializer
  %7606 = bitcast <8 x i32> %7605 to <16 x i16>
  %7607 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7606, <16 x i16> %7554)
  %7608 = add <8 x i32> %7607, %convolved1914.sroa.182.21.us.us.us
  %7609 = getelementptr inbounds i16, i16* %7602, i64 2
  %7610 = bitcast i16* %7609 to <1 x i32>*
  %7611 = load <1 x i32>, <1 x i32>* %7610, align 4, !tbaa !399
  %7612 = shufflevector <1 x i32> %7611, <1 x i32> undef, <8 x i32> zeroinitializer
  %7613 = bitcast <8 x i32> %7612 to <16 x i16>
  %7614 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7613, <16 x i16> %7564)
  %7615 = add <8 x i32> %7608, %7614
  %7616 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7606, <16 x i16> %7571)
  %7617 = add <8 x i32> %7616, %convolved1914.sroa.212.21.us.us.us
  %7618 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7613, <16 x i16> %7576)
  %7619 = add <8 x i32> %7617, %7618
  %7620 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7606, <16 x i16> %7582)
  %7621 = add <8 x i32> %7620, %convolved1914.sroa.242.21.us.us.us
  %7622 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7613, <16 x i16> %7587)
  %7623 = add <8 x i32> %7621, %7622
  %7624 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7606, <16 x i16> %7593)
  %7625 = add <8 x i32> %7624, %convolved1914.sroa.272.21.us.us.us
  %7626 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %7613, <16 x i16> %7598)
  %7627 = add <8 x i32> %7625, %7626
  %indvars.iv.next4780 = add nuw nsw i64 %indvars.iv4779, 1
  %.not2046.us.us.us = icmp eq i64 %indvars.iv.next4780, %6731
  br i1 %.not2046.us.us.us, label %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us", label %"for convolved.s1.r19$z.r115771.us.us.us"

"end for convolved.s1.r19$z.r115772.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r115771.us.us.us"
  %indvars.iv.next4782 = add nuw nsw i64 %indvars.iv4781, 1
  %.not2045.us.us.us = icmp eq i64 %indvars.iv.next4782, %6738
  br i1 %.not2045.us.us.us, label %"end for convolved.s1.r19$x760.loopexit.split.us.us.us", label %"for convolved.s1.r19$x759.us.us.us"

"end for convolved.s1.r19$x760.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115772.loopexit.us.us.us"
  %indvars.iv.next4789 = add nuw nsw i64 %indvars.iv4788, 1
  %.not2044.us.us = icmp eq i64 %indvars.iv.next4789, %6740
  br i1 %.not2044.us.us, label %"consume convolved774", label %"for convolved.s1.r19$y751.us.us"

"end for output.s0.c.co743":                      ; preds = %"consume convolved774", %"for output.s0.x.xo732"
  %7628 = add nuw nsw i32 %output.s0.x.xo734, 1
  %.not2042 = icmp eq i32 %7628, %t3699570
  br i1 %.not2042, label %"end for output.s0.x.xo733", label %"for output.s0.x.xo732"

"consume convolved774":                           ; preds = %"end for convolved.s1.r19$x760.loopexit.split.us.us.us", %"for convolved.s1.r19$y751.preheader.split.us", %"for convolved.s1.r19$y751.preheader", %"for output.s0.c.co742"
  %convolved1914.sroa.272.23 = phi <8 x i32> [ %7516, %"for output.s0.c.co742" ], [ %7516, %"for convolved.s1.r19$y751.preheader" ], [ %7516, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7627, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.242.23 = phi <8 x i32> [ %7513, %"for output.s0.c.co742" ], [ %7513, %"for convolved.s1.r19$y751.preheader" ], [ %7513, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7623, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.212.23 = phi <8 x i32> [ %7510, %"for output.s0.c.co742" ], [ %7510, %"for convolved.s1.r19$y751.preheader" ], [ %7510, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7619, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.182.23 = phi <8 x i32> [ %7507, %"for output.s0.c.co742" ], [ %7507, %"for convolved.s1.r19$y751.preheader" ], [ %7507, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7615, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.142.29 = phi <8 x i32> [ %7516, %"for output.s0.c.co742" ], [ %7516, %"for convolved.s1.r19$y751.preheader" ], [ %7516, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7600, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.29 = phi <8 x i32> [ %7513, %"for output.s0.c.co742" ], [ %7513, %"for convolved.s1.r19$y751.preheader" ], [ %7513, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7589, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.29 = phi <8 x i32> [ %7510, %"for output.s0.c.co742" ], [ %7510, %"for convolved.s1.r19$y751.preheader" ], [ %7510, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7578, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.75 = phi <8 x i32> [ %7507, %"for output.s0.c.co742" ], [ %7507, %"for convolved.s1.r19$y751.preheader" ], [ %7507, %"for convolved.s1.r19$y751.preheader.split.us" ], [ %7566, %"end for convolved.s1.r19$x760.loopexit.split.us.us.us" ]
  %7629 = shufflevector <8 x i32> %convolved1914.sroa.0.75, <8 x i32> %convolved1914.sroa.62.29, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7630 = shufflevector <8 x i32> %convolved1914.sroa.102.29, <8 x i32> %convolved1914.sroa.142.29, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7631 = shufflevector <16 x i32> %7629, <16 x i32> %7630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7632 = sext <32 x i32> %7631 to <32 x i64>
  %7633 = mul nsw <32 x i64> %7632, %6686
  %7634 = ashr <32 x i64> %7633, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %7635 = add nsw <32 x i64> %7634, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a272 = ashr <32 x i64> %7635, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %7636 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7637 = icmp slt <4 x i64> %7636, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7638 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7639 = icmp slt <4 x i64> %7638, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7640 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7641 = icmp slt <4 x i64> %7640, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7642 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7643 = icmp slt <4 x i64> %7642, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7644 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7645 = icmp slt <4 x i64> %7644, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7646 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7647 = icmp slt <4 x i64> %7646, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7648 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7649 = icmp slt <4 x i64> %7648, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7650 = shufflevector <32 x i64> %a272, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7651 = icmp slt <4 x i64> %7650, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7652 = shufflevector <4 x i1> %7651, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7653 = shufflevector <8 x i1> %7652, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7654 = shufflevector <16 x i1> %7653, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7655 = select <4 x i1> %7637, <4 x i64> %7636, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7656 = select <4 x i1> %7639, <4 x i64> %7638, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7657 = select <4 x i1> %7641, <4 x i64> %7640, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7658 = select <4 x i1> %7643, <4 x i64> %7642, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7659 = select <4 x i1> %7645, <4 x i64> %7644, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7660 = select <4 x i1> %7647, <4 x i64> %7646, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7661 = select <4 x i1> %7649, <4 x i64> %7648, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7662 = shufflevector <32 x i1> %7654, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7663 = select <4 x i1> %7662, <4 x i64> %7650, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7664 = shufflevector <4 x i64> %7663, <4 x i64> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7665 = shufflevector <8 x i64> %7664, <8 x i64> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %a271 = shufflevector <16 x i64> %7665, <16 x i64> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7666 = icmp sgt <4 x i64> %7655, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7667 = icmp sgt <4 x i64> %7656, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7668 = icmp sgt <4 x i64> %7657, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7669 = icmp sgt <4 x i64> %7658, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7670 = icmp sgt <4 x i64> %7659, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7671 = icmp sgt <4 x i64> %7660, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7672 = icmp sgt <4 x i64> %7661, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7673 = shufflevector <32 x i64> %a271, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7674 = icmp sgt <4 x i64> %7673, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7675 = shufflevector <4 x i1> %7674, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7676 = shufflevector <8 x i1> %7675, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7677 = shufflevector <16 x i1> %7676, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7678 = select <4 x i1> %7666, <4 x i64> %7655, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7679 = select <4 x i1> %7667, <4 x i64> %7656, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7680 = select <4 x i1> %7668, <4 x i64> %7657, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7681 = select <4 x i1> %7669, <4 x i64> %7658, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7682 = select <4 x i1> %7670, <4 x i64> %7659, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7683 = select <4 x i1> %7671, <4 x i64> %7660, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7684 = select <4 x i1> %7672, <4 x i64> %7661, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7685 = shufflevector <32 x i1> %7677, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7686 = select <4 x i1> %7685, <4 x i64> %7673, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7687 = shufflevector <4 x i64> %7678, <4 x i64> %7679, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7688 = shufflevector <4 x i64> %7680, <4 x i64> %7681, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7689 = shufflevector <4 x i64> %7682, <4 x i64> %7683, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7690 = shufflevector <4 x i64> %7684, <4 x i64> %7686, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7691 = shufflevector <8 x i64> %7687, <8 x i64> %7688, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7692 = shufflevector <8 x i64> %7689, <8 x i64> %7690, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7693 = shufflevector <16 x i64> %7691, <16 x i64> %7692, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t4582 = trunc <32 x i64> %7693 to <32 x i32>
  %7694 = ashr <32 x i32> %t4582, %t4583
  %7695 = shl <32 x i32> %t4582, %t4583
  %7696 = shufflevector <32 x i32> %7694, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7697 = shufflevector <32 x i32> %7695, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7698 = select <8 x i1> %6695, <8 x i32> %7696, <8 x i32> %7697
  %7699 = shufflevector <32 x i32> %7694, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7700 = shufflevector <32 x i32> %7695, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7701 = select <8 x i1> %6696, <8 x i32> %7699, <8 x i32> %7700
  %7702 = shufflevector <32 x i32> %7694, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7703 = shufflevector <32 x i32> %7695, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7704 = select <8 x i1> %6697, <8 x i32> %7702, <8 x i32> %7703
  %7705 = shufflevector <32 x i32> %7694, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7706 = shufflevector <32 x i32> %7695, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7707 = select <8 x i1> %6698, <8 x i32> %7705, <8 x i32> %7706
  %7708 = shufflevector <8 x i32> %7698, <8 x i32> %7701, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7709 = shufflevector <8 x i32> %7704, <8 x i32> %7707, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7710 = shufflevector <16 x i32> %7708, <16 x i32> %7709, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7711 = ashr <32 x i32> %t4582, %t4585
  %7712 = shl <32 x i32> %t4582, %t4585
  %7713 = shufflevector <32 x i32> %7711, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7714 = shufflevector <32 x i32> %7712, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7715 = select <8 x i1> %6710, <8 x i32> %7713, <8 x i32> %7714
  %7716 = shufflevector <32 x i32> %7711, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7717 = shufflevector <32 x i32> %7712, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7718 = select <8 x i1> %6711, <8 x i32> %7716, <8 x i32> %7717
  %7719 = shufflevector <32 x i32> %7711, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7720 = shufflevector <32 x i32> %7712, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7721 = select <8 x i1> %6712, <8 x i32> %7719, <8 x i32> %7720
  %7722 = shufflevector <32 x i32> %7711, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7723 = shufflevector <32 x i32> %7712, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7724 = select <8 x i1> %6713, <8 x i32> %7722, <8 x i32> %7723
  %7725 = shufflevector <8 x i32> %7715, <8 x i32> %7718, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7726 = shufflevector <8 x i32> %7721, <8 x i32> %7724, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7727 = shufflevector <16 x i32> %7725, <16 x i32> %7726, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7728 = and <32 x i32> %7727, %6700
  %7729 = add nsw <32 x i32> %7728, %7710
  %7730 = shufflevector <32 x i32> %7729, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7731 = shufflevector <32 x i32> %7729, <32 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7732 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %7730, <8 x i32> %7731) #11
  %7733 = shufflevector <32 x i32> %7729, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7734 = shufflevector <16 x i32> %7733, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7735 = shufflevector <16 x i32> %7733, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7736 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %7734, <8 x i32> %7735) #11
  %7737 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %7732, <16 x i16> %6716)
  %7738 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %7736, <16 x i16> %6716)
  %7739 = shufflevector <16 x i16> %7737, <16 x i16> %7738, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7740 = shufflevector <16 x i16> %7737, <16 x i16> %7738, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7741 = call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %7739, <16 x i16> %7740) #11
  %7742 = icmp ugt <32 x i8> %b272, %7741
  %a269 = select <32 x i1> %7742, <32 x i8> %7741, <32 x i8> %b272
  %7743 = icmp ugt <32 x i8> %a269, %b271
  %7744 = select <32 x i1> %7743, <32 x i8> %a269, <32 x i8> %b271
  %7745 = add nsw i64 %7504, %7499
  %7746 = getelementptr inbounds i8, i8* %182, i64 %7745
  %7747 = bitcast i8* %7746 to <32 x i8>*
  store <32 x i8> %7744, <32 x i8>* %7747, align 1, !tbaa !414
  %7748 = shufflevector <8 x i32> %convolved1914.sroa.182.23, <8 x i32> %convolved1914.sroa.212.23, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7749 = shufflevector <8 x i32> %convolved1914.sroa.242.23, <8 x i32> %convolved1914.sroa.272.23, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7750 = shufflevector <16 x i32> %7748, <16 x i32> %7749, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7751 = sext <32 x i32> %7750 to <32 x i64>
  %7752 = mul nsw <32 x i64> %7751, %6686
  %7753 = ashr <32 x i64> %7752, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %7754 = add nsw <32 x i64> %7753, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a278 = ashr <32 x i64> %7754, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %7755 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %7756 = icmp slt <4 x i64> %7755, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7757 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %7758 = icmp slt <4 x i64> %7757, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7759 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %7760 = icmp slt <4 x i64> %7759, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7761 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %7762 = icmp slt <4 x i64> %7761, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7763 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %7764 = icmp slt <4 x i64> %7763, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7765 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %7766 = icmp slt <4 x i64> %7765, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7767 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %7768 = icmp slt <4 x i64> %7767, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7769 = shufflevector <32 x i64> %a278, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7770 = icmp slt <4 x i64> %7769, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7771 = shufflevector <4 x i1> %7770, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7772 = shufflevector <8 x i1> %7771, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7773 = shufflevector <16 x i1> %7772, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7774 = select <4 x i1> %7756, <4 x i64> %7755, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7775 = select <4 x i1> %7758, <4 x i64> %7757, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7776 = select <4 x i1> %7760, <4 x i64> %7759, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7777 = select <4 x i1> %7762, <4 x i64> %7761, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7778 = select <4 x i1> %7764, <4 x i64> %7763, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7779 = select <4 x i1> %7766, <4 x i64> %7765, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7780 = select <4 x i1> %7768, <4 x i64> %7767, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7781 = shufflevector <32 x i1> %7773, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7782 = select <4 x i1> %7781, <4 x i64> %7769, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %7783 = shufflevector <4 x i64> %7782, <4 x i64> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7784 = shufflevector <8 x i64> %7783, <8 x i64> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %a277 = shufflevector <16 x i64> %7784, <16 x i64> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7785 = icmp sgt <4 x i64> %7774, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7786 = icmp sgt <4 x i64> %7775, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7787 = icmp sgt <4 x i64> %7776, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7788 = icmp sgt <4 x i64> %7777, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7789 = icmp sgt <4 x i64> %7778, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7790 = icmp sgt <4 x i64> %7779, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7791 = icmp sgt <4 x i64> %7780, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7792 = shufflevector <32 x i64> %a277, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7793 = icmp sgt <4 x i64> %7792, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7794 = shufflevector <4 x i1> %7793, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %7795 = shufflevector <8 x i1> %7794, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %7796 = shufflevector <16 x i1> %7795, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %7797 = select <4 x i1> %7785, <4 x i64> %7774, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7798 = select <4 x i1> %7786, <4 x i64> %7775, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7799 = select <4 x i1> %7787, <4 x i64> %7776, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7800 = select <4 x i1> %7788, <4 x i64> %7777, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7801 = select <4 x i1> %7789, <4 x i64> %7778, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7802 = select <4 x i1> %7790, <4 x i64> %7779, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7803 = select <4 x i1> %7791, <4 x i64> %7780, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7804 = shufflevector <32 x i1> %7796, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %7805 = select <4 x i1> %7804, <4 x i64> %7792, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %7806 = shufflevector <4 x i64> %7797, <4 x i64> %7798, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7807 = shufflevector <4 x i64> %7799, <4 x i64> %7800, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7808 = shufflevector <4 x i64> %7801, <4 x i64> %7802, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7809 = shufflevector <4 x i64> %7803, <4 x i64> %7805, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7810 = shufflevector <8 x i64> %7806, <8 x i64> %7807, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7811 = shufflevector <8 x i64> %7808, <8 x i64> %7809, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7812 = shufflevector <16 x i64> %7810, <16 x i64> %7811, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t4586 = trunc <32 x i64> %7812 to <32 x i32>
  %7813 = ashr <32 x i32> %t4586, %t4583
  %7814 = shl <32 x i32> %t4586, %t4583
  %7815 = shufflevector <32 x i32> %7813, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7816 = shufflevector <32 x i32> %7814, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7817 = select <8 x i1> %6695, <8 x i32> %7815, <8 x i32> %7816
  %7818 = shufflevector <32 x i32> %7813, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7819 = shufflevector <32 x i32> %7814, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7820 = select <8 x i1> %6696, <8 x i32> %7818, <8 x i32> %7819
  %7821 = shufflevector <32 x i32> %7813, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7822 = shufflevector <32 x i32> %7814, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7823 = select <8 x i1> %6697, <8 x i32> %7821, <8 x i32> %7822
  %7824 = shufflevector <32 x i32> %7813, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7825 = shufflevector <32 x i32> %7814, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7826 = select <8 x i1> %6698, <8 x i32> %7824, <8 x i32> %7825
  %7827 = shufflevector <8 x i32> %7817, <8 x i32> %7820, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7828 = shufflevector <8 x i32> %7823, <8 x i32> %7826, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7829 = shufflevector <16 x i32> %7827, <16 x i32> %7828, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7830 = ashr <32 x i32> %t4586, %t4585
  %7831 = shl <32 x i32> %t4586, %t4585
  %7832 = shufflevector <32 x i32> %7830, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7833 = shufflevector <32 x i32> %7831, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7834 = select <8 x i1> %6710, <8 x i32> %7832, <8 x i32> %7833
  %7835 = shufflevector <32 x i32> %7830, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7836 = shufflevector <32 x i32> %7831, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7837 = select <8 x i1> %6711, <8 x i32> %7835, <8 x i32> %7836
  %7838 = shufflevector <32 x i32> %7830, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7839 = shufflevector <32 x i32> %7831, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7840 = select <8 x i1> %6712, <8 x i32> %7838, <8 x i32> %7839
  %7841 = shufflevector <32 x i32> %7830, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7842 = shufflevector <32 x i32> %7831, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7843 = select <8 x i1> %6713, <8 x i32> %7841, <8 x i32> %7842
  %7844 = shufflevector <8 x i32> %7834, <8 x i32> %7837, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7845 = shufflevector <8 x i32> %7840, <8 x i32> %7843, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7846 = shufflevector <16 x i32> %7844, <16 x i32> %7845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7847 = and <32 x i32> %7846, %6700
  %7848 = add nsw <32 x i32> %7847, %7829
  %7849 = shufflevector <32 x i32> %7848, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7850 = shufflevector <32 x i32> %7848, <32 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7851 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %7849, <8 x i32> %7850) #11
  %7852 = shufflevector <32 x i32> %7848, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7853 = shufflevector <16 x i32> %7852, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %7854 = shufflevector <16 x i32> %7852, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %7855 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %7853, <8 x i32> %7854) #11
  %7856 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %7851, <16 x i16> %6716)
  %7857 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %7855, <16 x i16> %6716)
  %7858 = shufflevector <16 x i16> %7856, <16 x i16> %7857, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %7859 = shufflevector <16 x i16> %7856, <16 x i16> %7857, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7860 = call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %7858, <16 x i16> %7859) #11
  %7861 = icmp ugt <32 x i8> %b272, %7860
  %a275 = select <32 x i1> %7861, <32 x i8> %7860, <32 x i8> %b272
  %7862 = icmp ugt <32 x i8> %a275, %b271
  %7863 = select <32 x i1> %7862, <32 x i8> %a275, <32 x i8> %b271
  %7864 = add nsw i64 %7504, %7500
  %7865 = getelementptr inbounds i8, i8* %182, i64 %7864
  %7866 = bitcast i8* %7865 to <32 x i8>*
  store <32 x i8> %7863, <32 x i8>* %7866, align 1, !tbaa !414
  %indvars.iv.next4792 = add nuw nsw i64 %indvars.iv4791, 1
  %.not2043 = icmp eq i64 %indvars.iv.next4792, %6742
  br i1 %.not2043, label %"end for output.s0.c.co743", label %"for output.s0.c.co742"

then_bb775:                                       ; preds = %next_bb550
  %t3863782 = add nsw i32 %166, 1
  %a281 = ashr i32 %t3863782, 2
  %7867 = icmp sgt i32 %166, 2
  %t3864783 = select i1 %7867, i32 %a281, i32 0
  %a282 = ashr i32 %t3863782, 3
  %7868 = icmp sgt i32 %166, 6
  %t3865784 = select i1 %7868, i32 %a282, i32 0
  %7869 = add nsw i32 %170, -1
  %t3866785 = mul nsw i32 %7869, %dilation_y
  %a288 = ashr i32 %t3863782, 1
  %7870 = icmp eq i32 %174, 4
  %7871 = icmp eq i32 %176, 4
  %t3868786 = and i1 %7870, %7871
  %t3869787 = add nsw i32 %166, -1
  %t3870788 = ashr i32 %t3869787, 1
  %7872 = shl nsw i32 %t3870788, 2
  %b285 = or i32 %7872, 3
  %t3872789 = icmp slt i32 %dilation_y, 0
  %t3833790 = select i1 %t3872789, i32 %t3866785, i32 0
  %7873 = icmp slt i32 %174, 16
  %7874 = icmp slt i32 %174, 8
  %7875 = icmp slt i32 %174, 4
  %7876 = icmp slt i32 %a288, 1
  %7877 = select i1 %7876, i32 %a288, i32 1
  %7878 = add nsw i32 %7877, %t3870788
  %7879 = select i1 %7875, i32 %a288, i32 %7878
  %7880 = icmp slt i32 %a288, 2
  %7881 = select i1 %7880, i32 %a288, i32 2
  %7882 = and i32 %t3870788, -2
  %7883 = add nsw i32 %7881, %7882
  %7884 = select i1 %7874, i32 %7879, i32 %7883
  %7885 = icmp slt i32 %a288, 4
  %7886 = select i1 %7885, i32 %a288, i32 4
  %7887 = and i32 %t3870788, -4
  %7888 = add nsw i32 %7886, %7887
  %a284 = select i1 %7873, i32 %7884, i32 %7888
  %7889 = icmp sgt i32 %a288, %a284
  %7890 = select i1 %7889, i32 %a284, i32 %a288
  %7891 = shl nsw i32 %7890, 2
  %7892 = add nsw i32 %7891, -1
  %a283 = select i1 %t3868786, i32 %b285, i32 %7892
  %7893 = icmp sgt i32 %a283, %b285
  %a300 = select i1 %7893, i32 %a283, i32 %b285
  %7894 = icmp sgt i32 %166, 0
  %7895 = add nuw nsw i32 %185, 3
  %t3855796 = ashr i32 %7895, 2
  %7896 = add nsw i32 %166, 7
  %7897 = ashr i32 %7896, 3
  %t3848798 = sub nsw i32 %7897, %t3865784
  %7898 = add nsw i32 %166, 3
  %7899 = ashr i32 %7898, 2
  %t3852799 = sub nsw i32 %7899, %t3864783
  %7900 = select i1 %t3704553, i32 %t3705554, i32 0
  %7901 = select i1 %t3706555, i32 %185, i32 1
  %7902 = add i32 %184, -1
  %7903 = add i32 %7902, %7901
  %7904 = mul nsw i32 %7903, %stride_x
  %b295 = add nsw i32 %7904, %7900
  %7905 = icmp sgt i32 %180, 0
  br i1 %7905, label %"for output.s0.b.rebased803.preheader", label %if.then.i2454, !prof !387

"for output.s0.b.rebased803.preheader":           ; preds = %then_bb775
  %t3856797 = ashr i32 %163, 4
  %t3854795 = select i1 %7894, i32 %a288, i32 0
  %t3832791 = select i1 %t3872789, i32 0, i32 %t3866785
  %7906 = mul nsw i32 %176, %175
  %7907 = add nsw i32 %185, -1
  %7908 = select i1 %t3706555, i32 0, i32 %7907
  %7909 = add nsw i32 %7908, %184
  %7910 = mul nsw i32 %7909, %stride_x
  %7911 = select i1 %t3704553, i32 0, i32 %t3705554
  %b293 = add nsw i32 %7910, %7911
  %a292 = sub i32 %b293, %b295
  %a294 = ashr i32 %a292, 3
  %7912 = add nsw i32 %a292, 1
  %a289 = ashr i32 %7912, 3
  %7913 = icmp sgt i32 %a292, 6
  %t3891806 = select i1 %7913, i32 %a289, i32 0
  %.neg2801 = mul i32 %189, %187
  %.neg2802 = mul i32 %186, %184
  %.neg2803 = mul i32 %190, %179
  %7914 = add i32 %t3702551, %7906
  %7915 = add i32 %7914, %t3703552
  %.neg2807 = mul i32 %175, -4
  %7916 = icmp sgt i32 %a294, -1
  %7917 = select i1 %7916, i32 %a294, i32 -1
  %7918 = sub nsw i32 %7917, %t3891806
  %7919 = icmp sgt i32 %188, 0
  %7920 = icmp sgt i32 %a300, -1
  %t4590 = select i1 %7920, i32 %a300, i32 -1
  %7921 = icmp sgt i32 %a292, -1
  %7922 = select i1 %7921, i32 %7912, i32 0
  %t4591 = zext i32 %7922 to i64
  %7923 = add nsw i32 %t4590, 1
  %7924 = zext i32 %7923 to i64
  %t4592 = shl nuw nsw i64 %7924, 1
  %t4594 = mul i64 %t4592, %t4591
  %7925 = add nsw i32 %a300, 1
  %t3929867 = shl nsw i32 %a288, 2
  %7926 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %7927 = shufflevector <16 x i8> %7926, <16 x i8> undef, <16 x i32> zeroinitializer
  %7928 = zext <16 x i8> %7927 to <16 x i16>
  %7929 = icmp sgt i32 %t3848798, 0
  %7930 = insertelement <16 x i32> undef, i32 %t3929867, i32 0
  %7931 = shufflevector <16 x i32> %7930, <16 x i32> undef, <8 x i32> zeroinitializer
  %7932 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %7933 = shufflevector <8 x i8> %7932, <8 x i8> undef, <8 x i32> zeroinitializer
  %7934 = zext <8 x i8> %7933 to <8 x i16>
  %7935 = icmp sgt i32 %t3852799, 0
  %7936 = insertelement <8 x i32> undef, i32 %t3929867, i32 0
  %7937 = shufflevector <8 x i32> %7936, <8 x i32> undef, <8 x i32> zeroinitializer
  %7938 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %7939 = shufflevector <4 x i8> %7938, <4 x i8> undef, <4 x i32> zeroinitializer
  %7940 = zext <4 x i8> %7939 to <4 x i16>
  %7941 = zext i8 %input_zero to i16
  %t3895825 = mul nsw i32 %7912, %7925
  %.neg2808 = sub i32 %.neg2807, %t3702551
  %t3844802.neg = sub i32 %.neg2808, %t3703552
  %7942 = shl i32 %7925, 1
  %7943 = mul nsw i32 %a300, 7
  %7944 = mul nsw i32 %a300, 6
  %7945 = mul nsw i32 %a300, 5
  %7946 = shl nsw i32 %a300, 2
  %7947 = mul nsw i32 %a300, 3
  %7948 = shl nsw i32 %a300, 1
  %7949 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %7950 = shufflevector <32 x i8> %7949, <32 x i8> undef, <32 x i32> zeroinitializer
  %7951 = zext <32 x i8> %7950 to <32 x i16>
  %7952 = icmp sgt i32 %7918, -1
  %reass.add2817 = add i32 %.neg2801, %.neg2802
  %reass.add2818 = add i32 %reass.add2817, %.neg2803
  %b307 = add nsw i32 %185, -4
  %7953 = icmp sgt i32 %163, 15
  %7954 = icmp sgt i32 %170, 0
  %7955 = icmp sgt i32 %168, 0
  %7956 = bitcast i8* %164 to i16*
  %7957 = insertelement <16 x i32> undef, i32 %output_multiplier, i32 0
  %7958 = shufflevector <16 x i32> %7957, <16 x i32> undef, <16 x i32> zeroinitializer
  %7959 = sext <16 x i32> %7958 to <16 x i64>
  %7960 = insertelement <16 x i32> undef, i32 %output_shift, i32 0
  %7961 = shufflevector <16 x i32> %7960, <16 x i32> undef, <8 x i32> zeroinitializer
  %7962 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %7961, i1 false) #11
  %t4598 = shufflevector <8 x i32> %7962, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7963 = icmp slt <8 x i32> %7961, zeroinitializer
  %7964 = shufflevector <8 x i1> %7963, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7965 = xor <16 x i1> %7964, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %7966 = shufflevector <16 x i1> %7965, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7967 = shufflevector <16 x i1> %7965, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7968 = icmp sgt i32 %output_shift, 0
  %7969 = select i1 %7968, <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <16 x i32> zeroinitializer
  %7970 = add nsw i32 %output_shift, -1
  %7971 = insertelement <16 x i32> undef, i32 %7970, i32 0
  %7972 = shufflevector <16 x i32> %7971, <16 x i32> undef, <8 x i32> zeroinitializer
  %7973 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %7972, i1 false) #11
  %t4600 = shufflevector <8 x i32> %7973, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7974 = icmp slt <8 x i32> %7972, zeroinitializer
  %7975 = shufflevector <8 x i1> %7974, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7976 = xor <16 x i1> %7975, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %7977 = shufflevector <16 x i1> %7976, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %7978 = shufflevector <16 x i1> %7976, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7979 = zext i8 %output_zero to i16
  %7980 = insertelement <16 x i16> undef, i16 %7979, i32 0
  %7981 = shufflevector <16 x i16> %7980, <16 x i16> undef, <16 x i32> zeroinitializer
  %7982 = insertelement <16 x i8> undef, i8 %output_max, i32 0
  %b309 = shufflevector <16 x i8> %7982, <16 x i8> undef, <16 x i32> zeroinitializer
  %7983 = insertelement <16 x i8> undef, i8 %output_min, i32 0
  %b308 = shufflevector <16 x i8> %7983, <16 x i8> undef, <16 x i32> zeroinitializer
  %7984 = zext i32 %t3865784 to i64
  %7985 = sext i32 %b295 to i64
  %7986 = sext i32 %176 to i64
  %7987 = zext i32 %a292 to i64
  %7988 = sext i32 %t3865784 to i64
  %7989 = zext i32 %t3848798 to i64
  %7990 = sext i32 %178 to i64
  %7991 = zext i32 %t3864783 to i64
  %7992 = sext i32 %t3864783 to i64
  %7993 = zext i32 %t3852799 to i64
  %7994 = zext i32 %t3854795 to i64
  %7995 = zext i32 %t3929867 to i64
  %7996 = zext i32 %a288 to i64
  %7997 = zext i32 %t3891806 to i64
  %7998 = sext i32 %7925 to i64
  %7999 = zext i32 %7918 to i64
  %8000 = sext i32 %t3895825 to i64
  %8001 = sext i32 %169 to i64
  %8002 = sext i32 %dilation_x to i64
  %8003 = zext i32 %168 to i64
  %8004 = sext i32 %171 to i64
  %8005 = zext i32 %170 to i64
  %8006 = sext i32 %167 to i64
  %8007 = zext i32 %t3856797 to i64
  %8008 = sub i32 %t3832791, %t3833790
  %8009 = sext i32 %187 to i64
  %8010 = sext i32 %stride_y to i64
  %8011 = sext i32 %t3833790 to i64
  %8012 = zext i32 %179 to i64
  %zext4716 = zext i32 %180 to i64
  %zext4711 = zext i32 %188 to i64
  %a302 = add nsw i32 %8008, 1
  %8013 = icmp sgt i32 %8008, -1
  %8014 = select i1 %8013, i32 %a302, i32 0
  %t4593 = zext i32 %8014 to i64
  %8015 = mul i64 %t4594, %t4593
  %8016 = add i64 %8015, 6
  %8017 = zext i32 %8008 to i64
  %8018 = zext i32 %8008 to i64
  %8019 = zext i32 %8008 to i64
  %8020 = zext i32 %8008 to i64
  %8021 = zext i32 %8008 to i64
  %8022 = add nsw i64 %7984, -1
  %8023 = add nsw i64 %7984, -1
  %8024 = add nsw i64 %7991, -1
  %8025 = add nsw i64 %7991, -1
  %8026 = add nsw i64 %7994, -1
  %8027 = and i64 %7995, 4294967232
  %8028 = add nsw i64 %8027, -64
  %8029 = lshr exact i64 %8028, 6
  %8030 = add nuw nsw i64 %8029, 1
  %8031 = add nsw i64 %7996, -1
  %8032 = or i32 %8008, %a292
  %8033 = icmp slt i32 %8032, 0
  %xtraiter6074 = and i64 %7984, 3
  %8034 = icmp ult i64 %8022, 3
  %unroll_iter6077 = and i64 %7984, 4294967292
  %lcmp.mod6076.not = icmp eq i64 %xtraiter6074, 0
  %xtraiter6079 = and i64 %7984, 3
  %8035 = icmp ult i64 %8023, 3
  %unroll_iter6082 = and i64 %7984, 4294967292
  %lcmp.mod6081.not = icmp eq i64 %xtraiter6079, 0
  %xtraiter6084 = and i64 %7991, 3
  %8036 = icmp ult i64 %8024, 3
  %unroll_iter6087 = and i64 %7991, 4294967292
  %lcmp.mod6086.not = icmp eq i64 %xtraiter6084, 0
  %xtraiter6089 = and i64 %7991, 3
  %8037 = icmp ult i64 %8025, 3
  %unroll_iter6092 = and i64 %7991, 4294967292
  %lcmp.mod6091.not = icmp eq i64 %xtraiter6089, 0
  %brmerge5048.demorgan = and i1 %7921, %7894
  %xtraiter6094 = and i64 %7994, 3
  %8038 = icmp ult i64 %8026, 3
  %unroll_iter6097 = and i64 %7994, 4294967292
  %lcmp.mod6096.not = icmp eq i64 %xtraiter6094, 0
  %brmerge5051.demorgan = and i1 %7921, %7894
  %min.iters.check5569 = icmp ult i32 %t3929867, 8
  %min.iters.check5572 = icmp ult i32 %t3929867, 64
  %n.vec5576 = and i64 %7995, 4294967232
  %broadcast.splatinsert5584 = insertelement <16 x i16> poison, i16 %7941, i32 0
  %broadcast.splat5585 = shufflevector <16 x i16> %broadcast.splatinsert5584, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5586 = insertelement <16 x i16> poison, i16 %7941, i32 0
  %broadcast.splat5587 = shufflevector <16 x i16> %broadcast.splatinsert5586, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5588 = insertelement <16 x i16> poison, i16 %7941, i32 0
  %broadcast.splat5589 = shufflevector <16 x i16> %broadcast.splatinsert5588, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5590 = insertelement <16 x i16> poison, i16 %7941, i32 0
  %broadcast.splat5591 = shufflevector <16 x i16> %broadcast.splatinsert5590, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter6099 = and i64 %8030, 1
  %8039 = icmp eq i64 %8028, 0
  %unroll_iter6101 = and i64 %8030, 576460752303423486
  %lcmp.mod6100.not = icmp eq i64 %xtraiter6099, 0
  %cmp.n5579 = icmp eq i64 %n.vec5576, %7995
  %n.vec.remaining5597 = and i64 %7995, 56
  %min.epilog.iters.check5598 = icmp eq i64 %n.vec.remaining5597, 0
  %n.vec5601 = and i64 %7995, 4294967288
  %broadcast.splatinsert5607 = insertelement <8 x i16> poison, i16 %7941, i32 0
  %broadcast.splat5608 = shufflevector <8 x i16> %broadcast.splatinsert5607, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5605 = icmp eq i64 %n.vec5601, %7995
  %xtraiter6103 = and i64 %7996, 3
  %8040 = icmp ult i64 %8031, 3
  %unroll_iter6106 = and i64 %7996, 4294967292
  %lcmp.mod6105.not = icmp eq i64 %xtraiter6103, 0
  %8041 = insertelement <4 x i32> poison, i32 %stride_x, i32 0
  %8042 = shufflevector <4 x i32> %8041, <4 x i32> undef, <4 x i32> zeroinitializer
  %8043 = insertelement <4 x i32> poison, i32 %b295, i32 0
  %8044 = shufflevector <4 x i32> %8043, <4 x i32> undef, <4 x i32> zeroinitializer
  %8045 = insertelement <4 x i64> poison, i64 %7998, i32 0
  %8046 = shufflevector <4 x i64> %8045, <4 x i64> undef, <4 x i32> zeroinitializer
  br label %"for output.s0.b.rebased803"

next_bb776:                                       ; preds = %next_bb550
  br i1 %205, label %then_bb1002, label %next_bb1003

"for output.s0.b.rebased803":                     ; preds = %"for output.s0.b.rebased803.preheader", %"end for output.s0.y.rebased816"
  %indvars.iv4712 = phi i64 [ 0, %"for output.s0.b.rebased803.preheader" ], [ %indvars.iv.next4713, %"end for output.s0.y.rebased816" ]
  %8047 = add nuw i64 %indvars.iv4712, %8012
  %8048 = trunc i64 %8047 to i32
  %8049 = mul i32 %181, %8048
  br i1 %7919, label %"for output.s0.y.rebased815.preheader", label %"end for output.s0.y.rebased816", !prof !387

"for output.s0.y.rebased815.preheader":           ; preds = %"for output.s0.b.rebased803"
  %t3886812 = sub i32 %8049, %7915
  %t3877813 = add i32 %t3844802.neg, %8049
  %8050 = sext i32 %t3886812 to i64
  %8051 = trunc i64 %8047 to i32
  %8052 = mul i32 %190, %8051
  br label %"for output.s0.y.rebased815"

"for output.s0.y.rebased815":                     ; preds = %"for output.s0.y.rebased815.preheader", %call_destructor.exit2464
  %indvars.iv4707 = phi i64 [ 0, %"for output.s0.y.rebased815.preheader" ], [ %indvars.iv.next4708, %call_destructor.exit2464 ]
  %8053 = add nsw i64 %indvars.iv4707, %8009
  %8054 = mul nsw i64 %8053, %8010
  %8055 = add nsw i64 %8054, %8011
  %8056 = call i8* @halide_malloc(i8* null, i64 %8016)
  %input_wrapper819 = bitcast i8* %8056 to i16*
  br i1 %t3868786, label %then_bb822, label %next_bb823

"end for output.s0.y.rebased816":                 ; preds = %call_destructor.exit2464, %"for output.s0.b.rebased803"
  %indvars.iv.next4713 = add nuw nsw i64 %indvars.iv4712, 1
  %8057 = icmp eq i64 %indvars.iv.next4713, %zext4716
  br i1 %8057, label %if.then.i2454, label %"for output.s0.b.rebased803"

then_bb822:                                       ; preds = %"for output.s0.y.rebased815"
  br i1 %8013, label %"for input_wrapper.s0.y.rebased827", label %"consume input_wrapper953", !prof !387

next_bb823:                                       ; preds = %"for output.s0.y.rebased815"
  br i1 %7873, label %next_bb865, label %then_bb864

"for input_wrapper.s0.y.rebased827":              ; preds = %then_bb822, %"end for input_wrapper.s0.x.x.rebased851"
  %indvars.iv4687 = phi i64 [ %indvars.iv.next4688, %"end for input_wrapper.s0.x.x.rebased851" ], [ 0, %then_bb822 ]
  %8058 = mul nsw i64 %indvars.iv4687, %8000
  %8059 = add nsw i64 %indvars.iv4687, %8055
  %8060 = trunc i64 %8059 to i32
  %8061 = mul i32 %178, %8060
  %t3904831 = add i32 %t3877813, %8061
  br i1 %7913, label %"for input_wrapper.s0.x.x832.preheader", label %"end for input_wrapper.s0.x.x833", !prof !387

"for input_wrapper.s0.x.x832.preheader":          ; preds = %"for input_wrapper.s0.y.rebased827"
  %8062 = sext i32 %t3904831 to i64
  br i1 %7894, label %"for input_wrapper.s0.x.x832.us.preheader", label %"end for input_wrapper.s0.x.x.rebased851", !prof !387

"for input_wrapper.s0.x.x832.us.preheader":       ; preds = %"for input_wrapper.s0.x.x832.preheader"
  %8063 = trunc i64 %8058 to i32
  br label %"for input_wrapper.s0.x.x832.us"

"for input_wrapper.s0.x.x832.us":                 ; preds = %"for input_wrapper.s0.x.x832.us.preheader", %"end for input_wrapper.s0.c.c845.loopexit.us"
  %indvars.iv4677 = phi i64 [ 0, %"for input_wrapper.s0.x.x832.us.preheader" ], [ %indvars.iv.next4678, %"end for input_wrapper.s0.c.c845.loopexit.us" ]
  %8064 = trunc i64 %indvars.iv4677 to i32
  %t3911835.us = mul i32 %7942, %8064
  %8065 = shl nsw i64 %indvars.iv4677, 3
  %8066 = add nsw i64 %8065, %7985
  br label %"for input_wrapper.s0.c.c844.us"

"for input_wrapper.s0.c.c844.us":                 ; preds = %"for input_wrapper.s0.x.x832.us", %"for input_wrapper.s0.c.c844.us"
  %indvars.iv4674 = phi i64 [ 0, %"for input_wrapper.s0.x.x832.us" ], [ %indvars.iv.next4675, %"for input_wrapper.s0.c.c844.us" ]
  %8067 = add nsw i64 %indvars.iv4674, %8066
  %8068 = shl nsw i64 %8067, 2
  %8069 = add nsw i64 %8068, %8062
  %8070 = getelementptr inbounds i8, i8* %172, i64 %8069
  %8071 = bitcast i8* %8070 to <32 x i8>*
  %8072 = load <32 x i8>, <32 x i8>* %8071, align 4, !tbaa !397
  %8073 = zext <32 x i8> %8072 to <32 x i16>
  %8074 = sub nsw <32 x i16> %8073, %7951
  %8075 = trunc i64 %indvars.iv4674 to i32
  %8076 = add i32 %t3911835.us, %8075
  %8077 = shl nsw i32 %8076, 2
  %8078 = add i32 %8077, %8063
  %8079 = insertelement <4 x i32> undef, i32 %8078, i32 0
  %8080 = shufflevector <4 x i32> %8079, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8081 = add <4 x i32> %8080, <i32 poison, i32 1, i32 2, i32 3>
  %8082 = add i32 %8078, 1
  %8083 = add i32 %8082, %a300
  %8084 = insertelement <4 x i32> undef, i32 %8083, i32 0
  %8085 = shufflevector <4 x i32> %8084, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8086 = add <4 x i32> %8085, <i32 poison, i32 1, i32 2, i32 3>
  %8087 = add i32 %8078, 2
  %8088 = add i32 %8087, %7948
  %8089 = insertelement <4 x i32> undef, i32 %8088, i32 0
  %8090 = shufflevector <4 x i32> %8089, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8091 = add <4 x i32> %8090, <i32 poison, i32 1, i32 2, i32 3>
  %8092 = add i32 %8078, 3
  %8093 = add i32 %8092, %7947
  %8094 = insertelement <4 x i32> undef, i32 %8093, i32 0
  %8095 = shufflevector <4 x i32> %8094, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8096 = add <4 x i32> %8095, <i32 poison, i32 1, i32 2, i32 3>
  %8097 = add i32 %8078, 4
  %8098 = add i32 %8097, %7946
  %8099 = insertelement <4 x i32> undef, i32 %8098, i32 0
  %8100 = shufflevector <4 x i32> %8099, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8101 = add <4 x i32> %8100, <i32 poison, i32 1, i32 2, i32 3>
  %8102 = add i32 %8078, 5
  %8103 = add i32 %8102, %7945
  %8104 = insertelement <4 x i32> undef, i32 %8103, i32 0
  %8105 = shufflevector <4 x i32> %8104, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8106 = add <4 x i32> %8105, <i32 poison, i32 1, i32 2, i32 3>
  %8107 = add i32 %8078, 6
  %8108 = add i32 %8107, %7944
  %8109 = insertelement <4 x i32> undef, i32 %8108, i32 0
  %8110 = shufflevector <4 x i32> %8109, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8111 = add <4 x i32> %8110, <i32 poison, i32 1, i32 2, i32 3>
  %8112 = add i32 %8078, 7
  %8113 = add i32 %8112, %7943
  %8114 = insertelement <4 x i32> undef, i32 %8113, i32 0
  %8115 = shufflevector <4 x i32> %8114, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %8116 = add <4 x i32> %8115, <i32 poison, i32 1, i32 2, i32 3>
  %8117 = extractelement <32 x i16> %8074, i32 0
  %8118 = sext i32 %8078 to i64
  %8119 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8118
  store i16 %8117, i16* %8119, align 2, !tbaa !399
  %8120 = extractelement <4 x i32> %8081, i32 1
  %8121 = extractelement <32 x i16> %8074, i32 1
  %8122 = sext i32 %8120 to i64
  %8123 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8122
  store i16 %8121, i16* %8123, align 2, !tbaa !399
  %8124 = extractelement <4 x i32> %8081, i32 2
  %8125 = extractelement <32 x i16> %8074, i32 2
  %8126 = sext i32 %8124 to i64
  %8127 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8126
  store i16 %8125, i16* %8127, align 2, !tbaa !399
  %8128 = extractelement <4 x i32> %8081, i32 3
  %8129 = extractelement <32 x i16> %8074, i32 3
  %8130 = sext i32 %8128 to i64
  %8131 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8130
  store i16 %8129, i16* %8131, align 2, !tbaa !399
  %8132 = extractelement <32 x i16> %8074, i32 4
  %8133 = sext i32 %8083 to i64
  %8134 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8133
  store i16 %8132, i16* %8134, align 2, !tbaa !399
  %8135 = extractelement <4 x i32> %8086, i32 1
  %8136 = extractelement <32 x i16> %8074, i32 5
  %8137 = sext i32 %8135 to i64
  %8138 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8137
  store i16 %8136, i16* %8138, align 2, !tbaa !399
  %8139 = extractelement <4 x i32> %8086, i32 2
  %8140 = extractelement <32 x i16> %8074, i32 6
  %8141 = sext i32 %8139 to i64
  %8142 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8141
  store i16 %8140, i16* %8142, align 2, !tbaa !399
  %8143 = extractelement <4 x i32> %8086, i32 3
  %8144 = extractelement <32 x i16> %8074, i32 7
  %8145 = sext i32 %8143 to i64
  %8146 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8145
  store i16 %8144, i16* %8146, align 2, !tbaa !399
  %8147 = extractelement <32 x i16> %8074, i32 8
  %8148 = sext i32 %8088 to i64
  %8149 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8148
  store i16 %8147, i16* %8149, align 2, !tbaa !399
  %8150 = extractelement <4 x i32> %8091, i32 1
  %8151 = extractelement <32 x i16> %8074, i32 9
  %8152 = sext i32 %8150 to i64
  %8153 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8152
  store i16 %8151, i16* %8153, align 2, !tbaa !399
  %8154 = extractelement <4 x i32> %8091, i32 2
  %8155 = extractelement <32 x i16> %8074, i32 10
  %8156 = sext i32 %8154 to i64
  %8157 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8156
  store i16 %8155, i16* %8157, align 2, !tbaa !399
  %8158 = extractelement <4 x i32> %8091, i32 3
  %8159 = extractelement <32 x i16> %8074, i32 11
  %8160 = sext i32 %8158 to i64
  %8161 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8160
  store i16 %8159, i16* %8161, align 2, !tbaa !399
  %8162 = extractelement <32 x i16> %8074, i32 12
  %8163 = sext i32 %8093 to i64
  %8164 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8163
  store i16 %8162, i16* %8164, align 2, !tbaa !399
  %8165 = extractelement <4 x i32> %8096, i32 1
  %8166 = extractelement <32 x i16> %8074, i32 13
  %8167 = sext i32 %8165 to i64
  %8168 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8167
  store i16 %8166, i16* %8168, align 2, !tbaa !399
  %8169 = extractelement <4 x i32> %8096, i32 2
  %8170 = extractelement <32 x i16> %8074, i32 14
  %8171 = sext i32 %8169 to i64
  %8172 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8171
  store i16 %8170, i16* %8172, align 2, !tbaa !399
  %8173 = extractelement <4 x i32> %8096, i32 3
  %8174 = extractelement <32 x i16> %8074, i32 15
  %8175 = sext i32 %8173 to i64
  %8176 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8175
  store i16 %8174, i16* %8176, align 2, !tbaa !399
  %8177 = extractelement <32 x i16> %8074, i32 16
  %8178 = sext i32 %8098 to i64
  %8179 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8178
  store i16 %8177, i16* %8179, align 2, !tbaa !399
  %8180 = extractelement <4 x i32> %8101, i32 1
  %8181 = extractelement <32 x i16> %8074, i32 17
  %8182 = sext i32 %8180 to i64
  %8183 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8182
  store i16 %8181, i16* %8183, align 2, !tbaa !399
  %8184 = extractelement <4 x i32> %8101, i32 2
  %8185 = extractelement <32 x i16> %8074, i32 18
  %8186 = sext i32 %8184 to i64
  %8187 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8186
  store i16 %8185, i16* %8187, align 2, !tbaa !399
  %8188 = extractelement <4 x i32> %8101, i32 3
  %8189 = extractelement <32 x i16> %8074, i32 19
  %8190 = sext i32 %8188 to i64
  %8191 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8190
  store i16 %8189, i16* %8191, align 2, !tbaa !399
  %8192 = extractelement <32 x i16> %8074, i32 20
  %8193 = sext i32 %8103 to i64
  %8194 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8193
  store i16 %8192, i16* %8194, align 2, !tbaa !399
  %8195 = extractelement <4 x i32> %8106, i32 1
  %8196 = extractelement <32 x i16> %8074, i32 21
  %8197 = sext i32 %8195 to i64
  %8198 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8197
  store i16 %8196, i16* %8198, align 2, !tbaa !399
  %8199 = extractelement <4 x i32> %8106, i32 2
  %8200 = extractelement <32 x i16> %8074, i32 22
  %8201 = sext i32 %8199 to i64
  %8202 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8201
  store i16 %8200, i16* %8202, align 2, !tbaa !399
  %8203 = extractelement <4 x i32> %8106, i32 3
  %8204 = extractelement <32 x i16> %8074, i32 23
  %8205 = sext i32 %8203 to i64
  %8206 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8205
  store i16 %8204, i16* %8206, align 2, !tbaa !399
  %8207 = extractelement <32 x i16> %8074, i32 24
  %8208 = sext i32 %8108 to i64
  %8209 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8208
  store i16 %8207, i16* %8209, align 2, !tbaa !399
  %8210 = extractelement <4 x i32> %8111, i32 1
  %8211 = extractelement <32 x i16> %8074, i32 25
  %8212 = sext i32 %8210 to i64
  %8213 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8212
  store i16 %8211, i16* %8213, align 2, !tbaa !399
  %8214 = extractelement <4 x i32> %8111, i32 2
  %8215 = extractelement <32 x i16> %8074, i32 26
  %8216 = sext i32 %8214 to i64
  %8217 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8216
  store i16 %8215, i16* %8217, align 2, !tbaa !399
  %8218 = extractelement <4 x i32> %8111, i32 3
  %8219 = extractelement <32 x i16> %8074, i32 27
  %8220 = sext i32 %8218 to i64
  %8221 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8220
  store i16 %8219, i16* %8221, align 2, !tbaa !399
  %8222 = extractelement <32 x i16> %8074, i32 28
  %8223 = sext i32 %8113 to i64
  %8224 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8223
  store i16 %8222, i16* %8224, align 2, !tbaa !399
  %8225 = extractelement <4 x i32> %8116, i32 1
  %8226 = extractelement <32 x i16> %8074, i32 29
  %8227 = sext i32 %8225 to i64
  %8228 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8227
  store i16 %8226, i16* %8228, align 2, !tbaa !399
  %8229 = extractelement <4 x i32> %8116, i32 2
  %8230 = extractelement <32 x i16> %8074, i32 30
  %8231 = sext i32 %8229 to i64
  %8232 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8231
  store i16 %8230, i16* %8232, align 2, !tbaa !399
  %8233 = extractelement <4 x i32> %8116, i32 3
  %8234 = extractelement <32 x i16> %8074, i32 31
  %8235 = sext i32 %8233 to i64
  %8236 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8235
  store i16 %8234, i16* %8236, align 2, !tbaa !399
  %indvars.iv.next4675 = add nuw nsw i64 %indvars.iv4674, 1
  %.not2039.us = icmp eq i64 %indvars.iv.next4675, %7996
  br i1 %.not2039.us, label %"end for input_wrapper.s0.c.c845.loopexit.us", label %"for input_wrapper.s0.c.c844.us"

"end for input_wrapper.s0.c.c845.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c844.us"
  %indvars.iv.next4678 = add nuw nsw i64 %indvars.iv4677, 1
  %.not2038.us = icmp eq i64 %indvars.iv.next4678, %7997
  br i1 %.not2038.us, label %"end for input_wrapper.s0.x.x833", label %"for input_wrapper.s0.x.x832.us"

"end for input_wrapper.s0.x.x833":                ; preds = %"end for input_wrapper.s0.c.c845.loopexit.us", %"for input_wrapper.s0.y.rebased827"
  br i1 %7952, label %"for input_wrapper.s0.x.x.rebased850.preheader", label %"end for input_wrapper.s0.x.x.rebased851", !prof !387

"for input_wrapper.s0.x.x.rebased850.preheader":  ; preds = %"end for input_wrapper.s0.x.x833"
  %8237 = sext i32 %t3904831 to i64
  br i1 %7894, label %"for input_wrapper.s0.x.x.rebased850.us", label %"end for input_wrapper.s0.x.x.rebased851", !prof !387

"for input_wrapper.s0.x.x.rebased850.us":         ; preds = %"for input_wrapper.s0.x.x.rebased850.preheader", %"end for input_wrapper.s0.x.v21856.us"
  %indvars.iv4685 = phi i64 [ %indvars.iv.next4686, %"end for input_wrapper.s0.x.v21856.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased850.preheader" ]
  %8238 = trunc i64 %indvars.iv4685 to i32
  %8239 = add i32 %t3891806, %8238
  %8240 = shl nsw i32 %8239, 3
  %a304.us = sub nsw i32 %a292, %8240
  %8241 = icmp slt i32 %a304.us, 7
  %t3922853.us = select i1 %8241, i32 %a304.us, i32 7
  %8242 = icmp sgt i32 %t3922853.us, -1
  br i1 %8242, label %"for input_wrapper.s0.x.v21855.us.us.preheader", label %"end for input_wrapper.s0.x.v21856.us", !prof !387

"for input_wrapper.s0.x.v21855.us.us.preheader":  ; preds = %"for input_wrapper.s0.x.x.rebased850.us"
  %8243 = sext i32 %8240 to i64
  %8244 = zext i32 %t3922853.us to i64
  br label %"for input_wrapper.s0.x.v21855.us.us"

"end for input_wrapper.s0.x.v21856.us":           ; preds = %"end for input_wrapper.s0.c.c862.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased850.us"
  %indvars.iv.next4686 = add nuw nsw i64 %indvars.iv4685, 1
  %.not2035.us = icmp eq i64 %indvars.iv4685, %7999
  br i1 %.not2035.us, label %"end for input_wrapper.s0.x.x.rebased851", label %"for input_wrapper.s0.x.x.rebased850.us"

"for input_wrapper.s0.x.v21855.us.us":            ; preds = %"for input_wrapper.s0.x.v21855.us.us.preheader", %"end for input_wrapper.s0.c.c862.loopexit.us.us"
  %indvars.iv4682 = phi i64 [ 0, %"for input_wrapper.s0.x.v21855.us.us.preheader" ], [ %indvars.iv.next4683, %"end for input_wrapper.s0.c.c862.loopexit.us.us" ]
  %8245 = add nsw i64 %indvars.iv4682, %8243
  %8246 = mul nsw i64 %8245, %7998
  %8247 = add nsw i64 %8246, %8058
  %8248 = trunc i64 %8245 to i32
  %t3924860.us.us = add i32 %b295, %8248
  %8249 = sext i32 %t3924860.us.us to i64
  br i1 %8040, label %"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c861.us.us"

"for input_wrapper.s0.c.c861.us.us":              ; preds = %"for input_wrapper.s0.x.v21855.us.us", %"for input_wrapper.s0.c.c861.us.us"
  %indvars.iv4680 = phi i64 [ %indvars.iv.next4681.3, %"for input_wrapper.s0.c.c861.us.us" ], [ 0, %"for input_wrapper.s0.x.v21855.us.us" ]
  %niter6107 = phi i64 [ %niter6107.nsub.3, %"for input_wrapper.s0.c.c861.us.us" ], [ %unroll_iter6106, %"for input_wrapper.s0.x.v21855.us.us" ]
  %8250 = add nsw i64 %indvars.iv4680, %8249
  %8251 = shl nsw i64 %8250, 2
  %8252 = add nsw i64 %8251, %8237
  %8253 = getelementptr inbounds i8, i8* %172, i64 %8252
  %8254 = bitcast i8* %8253 to <4 x i8>*
  %8255 = load <4 x i8>, <4 x i8>* %8254, align 4, !tbaa !397
  %8256 = zext <4 x i8> %8255 to <4 x i16>
  %8257 = sub nsw <4 x i16> %8256, %7940
  %8258 = shl nuw nsw i64 %indvars.iv4680, 2
  %8259 = add nsw i64 %8258, %8247
  %8260 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8259
  %8261 = bitcast i16* %8260 to <4 x i16>*
  store <4 x i16> %8257, <4 x i16>* %8261, align 8, !tbaa !399
  %indvars.iv.next4681 = or i64 %indvars.iv4680, 1
  %8262 = add nsw i64 %indvars.iv.next4681, %8249
  %8263 = shl nsw i64 %8262, 2
  %8264 = add nsw i64 %8263, %8237
  %8265 = getelementptr inbounds i8, i8* %172, i64 %8264
  %8266 = bitcast i8* %8265 to <4 x i8>*
  %8267 = load <4 x i8>, <4 x i8>* %8266, align 4, !tbaa !397
  %8268 = zext <4 x i8> %8267 to <4 x i16>
  %8269 = sub nsw <4 x i16> %8268, %7940
  %8270 = shl nuw nsw i64 %indvars.iv.next4681, 2
  %8271 = add nsw i64 %8270, %8247
  %8272 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8271
  %8273 = bitcast i16* %8272 to <4 x i16>*
  store <4 x i16> %8269, <4 x i16>* %8273, align 8, !tbaa !399
  %indvars.iv.next4681.1 = or i64 %indvars.iv4680, 2
  %8274 = add nsw i64 %indvars.iv.next4681.1, %8249
  %8275 = shl nsw i64 %8274, 2
  %8276 = add nsw i64 %8275, %8237
  %8277 = getelementptr inbounds i8, i8* %172, i64 %8276
  %8278 = bitcast i8* %8277 to <4 x i8>*
  %8279 = load <4 x i8>, <4 x i8>* %8278, align 4, !tbaa !397
  %8280 = zext <4 x i8> %8279 to <4 x i16>
  %8281 = sub nsw <4 x i16> %8280, %7940
  %8282 = shl nuw nsw i64 %indvars.iv.next4681.1, 2
  %8283 = add nsw i64 %8282, %8247
  %8284 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8283
  %8285 = bitcast i16* %8284 to <4 x i16>*
  store <4 x i16> %8281, <4 x i16>* %8285, align 8, !tbaa !399
  %indvars.iv.next4681.2 = or i64 %indvars.iv4680, 3
  %8286 = add nsw i64 %indvars.iv.next4681.2, %8249
  %8287 = shl nsw i64 %8286, 2
  %8288 = add nsw i64 %8287, %8237
  %8289 = getelementptr inbounds i8, i8* %172, i64 %8288
  %8290 = bitcast i8* %8289 to <4 x i8>*
  %8291 = load <4 x i8>, <4 x i8>* %8290, align 4, !tbaa !397
  %8292 = zext <4 x i8> %8291 to <4 x i16>
  %8293 = sub nsw <4 x i16> %8292, %7940
  %8294 = shl nuw nsw i64 %indvars.iv.next4681.2, 2
  %8295 = add nsw i64 %8294, %8247
  %8296 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8295
  %8297 = bitcast i16* %8296 to <4 x i16>*
  store <4 x i16> %8293, <4 x i16>* %8297, align 8, !tbaa !399
  %indvars.iv.next4681.3 = add nuw nsw i64 %indvars.iv4680, 4
  %niter6107.nsub.3 = add i64 %niter6107, -4
  %niter6107.ncmp.3 = icmp eq i64 %niter6107.nsub.3, 0
  br i1 %niter6107.ncmp.3, label %"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c861.us.us"

"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c861.us.us", %"for input_wrapper.s0.x.v21855.us.us"
  %indvars.iv4680.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v21855.us.us" ], [ %indvars.iv.next4681.3, %"for input_wrapper.s0.c.c861.us.us" ]
  br i1 %lcmp.mod6105.not, label %"end for input_wrapper.s0.c.c862.loopexit.us.us", label %"for input_wrapper.s0.c.c861.us.us.epil"

"for input_wrapper.s0.c.c861.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c861.us.us.epil"
  %indvars.iv4680.epil = phi i64 [ %indvars.iv.next4681.epil, %"for input_wrapper.s0.c.c861.us.us.epil" ], [ %indvars.iv4680.unr, %"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa" ]
  %epil.iter6104 = phi i64 [ %epil.iter6104.sub, %"for input_wrapper.s0.c.c861.us.us.epil" ], [ %xtraiter6103, %"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa" ]
  %8298 = add nsw i64 %indvars.iv4680.epil, %8249
  %8299 = shl nsw i64 %8298, 2
  %8300 = add nsw i64 %8299, %8237
  %8301 = getelementptr inbounds i8, i8* %172, i64 %8300
  %8302 = bitcast i8* %8301 to <4 x i8>*
  %8303 = load <4 x i8>, <4 x i8>* %8302, align 4, !tbaa !397
  %8304 = zext <4 x i8> %8303 to <4 x i16>
  %8305 = sub nsw <4 x i16> %8304, %7940
  %8306 = shl nuw nsw i64 %indvars.iv4680.epil, 2
  %8307 = add nsw i64 %8306, %8247
  %8308 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8307
  %8309 = bitcast i16* %8308 to <4 x i16>*
  store <4 x i16> %8305, <4 x i16>* %8309, align 8, !tbaa !399
  %indvars.iv.next4681.epil = add nuw nsw i64 %indvars.iv4680.epil, 1
  %epil.iter6104.sub = add i64 %epil.iter6104, -1
  %epil.iter6104.cmp.not = icmp eq i64 %epil.iter6104.sub, 0
  br i1 %epil.iter6104.cmp.not, label %"end for input_wrapper.s0.c.c862.loopexit.us.us", label %"for input_wrapper.s0.c.c861.us.us.epil", !llvm.loop !464

"end for input_wrapper.s0.c.c862.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c861.us.us.epil", %"end for input_wrapper.s0.c.c862.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4683 = add nuw nsw i64 %indvars.iv4682, 1
  %.not2036.us.us = icmp eq i64 %indvars.iv4682, %8244
  br i1 %.not2036.us.us, label %"end for input_wrapper.s0.x.v21856.us", label %"for input_wrapper.s0.x.v21855.us.us"

"end for input_wrapper.s0.x.x.rebased851":        ; preds = %"end for input_wrapper.s0.x.v21856.us", %"for input_wrapper.s0.x.x832.preheader", %"for input_wrapper.s0.x.x.rebased850.preheader", %"end for input_wrapper.s0.x.x833"
  %indvars.iv.next4688 = add nuw nsw i64 %indvars.iv4687, 1
  %.not2034 = icmp eq i64 %indvars.iv4687, %8021
  br i1 %.not2034, label %"consume input_wrapper953", label %"for input_wrapper.s0.y.rebased827"

then_bb864:                                       ; preds = %next_bb823
  br i1 %8033, label %"consume input_wrapper953", label %"for input_wrapper.s0.y.rebased869.us", !prof !402

"for input_wrapper.s0.y.rebased869.us":           ; preds = %then_bb864, %"end for input_wrapper.s0.x.rebased875.loopexit.us"
  %indvars.iv4640 = phi i64 [ %indvars.iv.next4641, %"end for input_wrapper.s0.x.rebased875.loopexit.us" ], [ 0, %then_bb864 ]
  %8310 = trunc i64 %indvars.iv4640 to i32
  %t3931872.us = mul i32 %7912, %8310
  %8311 = add nsw i64 %indvars.iv4640, %8055
  %8312 = mul nsw i64 %8311, %7990
  %8313 = add nsw i64 %8312, %8050
  br i1 %7929, label %"for input_wrapper.s0.x.rebased874.us.us", label %"for input_wrapper.s0.x.rebased874.preheader.split.us3493", !prof !387

"for input_wrapper.s0.x.rebased874.preheader.split.us3493": ; preds = %"for input_wrapper.s0.y.rebased869.us"
  br i1 %7868, label %"for input_wrapper.s0.x.rebased874.us3477.us", label %"end for input_wrapper.s0.x.rebased875.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased875.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c880.loopexit.us3488.us", %"end for input_wrapper.s0.c.c.rebased885.loopexit.us.us", %"for input_wrapper.s0.x.rebased874.preheader.split.us3493"
  %indvars.iv.next4641 = add nuw nsw i64 %indvars.iv4640, 1
  %.not2029.us = icmp eq i64 %indvars.iv4640, %8017
  br i1 %.not2029.us, label %"consume input_wrapper953", label %"for input_wrapper.s0.y.rebased869.us"

"for input_wrapper.s0.x.rebased874.us.us":        ; preds = %"for input_wrapper.s0.y.rebased869.us", %"end for input_wrapper.s0.c.c.rebased885.loopexit.us.us"
  %indvars.iv4637 = phi i64 [ %indvars.iv.next4638, %"end for input_wrapper.s0.c.c.rebased885.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased869.us" ]
  %8314 = trunc i64 %indvars.iv4637 to i32
  %reass.add2809.us.us = add i32 %t3931872.us, %8314
  %reass.mul2810.us.us = mul i32 %reass.add2809.us.us, %7925
  %8315 = add nsw i64 %indvars.iv4637, %7985
  %8316 = mul nsw i64 %8315, %7986
  %8317 = add nsw i64 %8313, %8316
  %8318 = sext i32 %reass.mul2810.us.us to i64
  br i1 %7868, label %"for input_wrapper.s0.c.c879.us.us.preheader", label %"end for input_wrapper.s0.c.c880.us.us", !prof !387

"for input_wrapper.s0.c.c879.us.us.preheader":    ; preds = %"for input_wrapper.s0.x.rebased874.us.us"
  br i1 %8035, label %"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c879.us.us"

"for input_wrapper.s0.c.c879.us.us":              ; preds = %"for input_wrapper.s0.c.c879.us.us.preheader", %"for input_wrapper.s0.c.c879.us.us"
  %indvars.iv4633 = phi i64 [ %indvars.iv.next4634.3, %"for input_wrapper.s0.c.c879.us.us" ], [ 0, %"for input_wrapper.s0.c.c879.us.us.preheader" ]
  %niter6083 = phi i64 [ %niter6083.nsub.3, %"for input_wrapper.s0.c.c879.us.us" ], [ %unroll_iter6082, %"for input_wrapper.s0.c.c879.us.us.preheader" ]
  %8319 = shl nuw nsw i64 %indvars.iv4633, 4
  %8320 = add nsw i64 %8319, %8317
  %8321 = getelementptr inbounds i8, i8* %172, i64 %8320
  %8322 = bitcast i8* %8321 to <16 x i8>*
  %8323 = load <16 x i8>, <16 x i8>* %8322, align 4, !tbaa !397
  %8324 = zext <16 x i8> %8323 to <16 x i16>
  %8325 = sub nsw <16 x i16> %8324, %7928
  %8326 = add nsw i64 %8319, %8318
  %8327 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8326
  %8328 = bitcast i16* %8327 to <16 x i16>*
  store <16 x i16> %8325, <16 x i16>* %8328, align 8, !tbaa !399
  %indvars.iv.next4634 = shl i64 %indvars.iv4633, 4
  %8329 = or i64 %indvars.iv.next4634, 16
  %8330 = add nsw i64 %8329, %8317
  %8331 = getelementptr inbounds i8, i8* %172, i64 %8330
  %8332 = bitcast i8* %8331 to <16 x i8>*
  %8333 = load <16 x i8>, <16 x i8>* %8332, align 4, !tbaa !397
  %8334 = zext <16 x i8> %8333 to <16 x i16>
  %8335 = sub nsw <16 x i16> %8334, %7928
  %8336 = add nsw i64 %8329, %8318
  %8337 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8336
  %8338 = bitcast i16* %8337 to <16 x i16>*
  store <16 x i16> %8335, <16 x i16>* %8338, align 8, !tbaa !399
  %indvars.iv.next4634.1 = shl i64 %indvars.iv4633, 4
  %8339 = or i64 %indvars.iv.next4634.1, 32
  %8340 = add nsw i64 %8339, %8317
  %8341 = getelementptr inbounds i8, i8* %172, i64 %8340
  %8342 = bitcast i8* %8341 to <16 x i8>*
  %8343 = load <16 x i8>, <16 x i8>* %8342, align 4, !tbaa !397
  %8344 = zext <16 x i8> %8343 to <16 x i16>
  %8345 = sub nsw <16 x i16> %8344, %7928
  %8346 = add nsw i64 %8339, %8318
  %8347 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8346
  %8348 = bitcast i16* %8347 to <16 x i16>*
  store <16 x i16> %8345, <16 x i16>* %8348, align 8, !tbaa !399
  %indvars.iv.next4634.2 = shl i64 %indvars.iv4633, 4
  %8349 = or i64 %indvars.iv.next4634.2, 48
  %8350 = add nsw i64 %8349, %8317
  %8351 = getelementptr inbounds i8, i8* %172, i64 %8350
  %8352 = bitcast i8* %8351 to <16 x i8>*
  %8353 = load <16 x i8>, <16 x i8>* %8352, align 4, !tbaa !397
  %8354 = zext <16 x i8> %8353 to <16 x i16>
  %8355 = sub nsw <16 x i16> %8354, %7928
  %8356 = add nsw i64 %8349, %8318
  %8357 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8356
  %8358 = bitcast i16* %8357 to <16 x i16>*
  store <16 x i16> %8355, <16 x i16>* %8358, align 8, !tbaa !399
  %indvars.iv.next4634.3 = add nuw nsw i64 %indvars.iv4633, 4
  %niter6083.nsub.3 = add i64 %niter6083, -4
  %niter6083.ncmp.3 = icmp eq i64 %niter6083.nsub.3, 0
  br i1 %niter6083.ncmp.3, label %"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c879.us.us"

"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c879.us.us", %"for input_wrapper.s0.c.c879.us.us.preheader"
  %indvars.iv4633.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c879.us.us.preheader" ], [ %indvars.iv.next4634.3, %"for input_wrapper.s0.c.c879.us.us" ]
  br i1 %lcmp.mod6081.not, label %"end for input_wrapper.s0.c.c880.us.us", label %"for input_wrapper.s0.c.c879.us.us.epil"

"for input_wrapper.s0.c.c879.us.us.epil":         ; preds = %"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c879.us.us.epil"
  %indvars.iv4633.epil = phi i64 [ %indvars.iv.next4634.epil, %"for input_wrapper.s0.c.c879.us.us.epil" ], [ %indvars.iv4633.unr, %"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa" ]
  %epil.iter6080 = phi i64 [ %epil.iter6080.sub, %"for input_wrapper.s0.c.c879.us.us.epil" ], [ %xtraiter6079, %"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa" ]
  %8359 = shl nuw nsw i64 %indvars.iv4633.epil, 4
  %8360 = add nsw i64 %8359, %8317
  %8361 = getelementptr inbounds i8, i8* %172, i64 %8360
  %8362 = bitcast i8* %8361 to <16 x i8>*
  %8363 = load <16 x i8>, <16 x i8>* %8362, align 4, !tbaa !397
  %8364 = zext <16 x i8> %8363 to <16 x i16>
  %8365 = sub nsw <16 x i16> %8364, %7928
  %8366 = add nsw i64 %8359, %8318
  %8367 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8366
  %8368 = bitcast i16* %8367 to <16 x i16>*
  store <16 x i16> %8365, <16 x i16>* %8368, align 8, !tbaa !399
  %indvars.iv.next4634.epil = add nuw nsw i64 %indvars.iv4633.epil, 1
  %epil.iter6080.sub = add i64 %epil.iter6080, -1
  %epil.iter6080.cmp.not = icmp eq i64 %epil.iter6080.sub, 0
  br i1 %epil.iter6080.cmp.not, label %"end for input_wrapper.s0.c.c880.us.us", label %"for input_wrapper.s0.c.c879.us.us.epil", !llvm.loop !465

"end for input_wrapper.s0.c.c880.us.us":          ; preds = %"end for input_wrapper.s0.c.c880.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c879.us.us.epil", %"for input_wrapper.s0.x.rebased874.us.us"
  br label %"for input_wrapper.s0.c.c.rebased884.us.us"

"for input_wrapper.s0.c.c.rebased884.us.us":      ; preds = %after_bb887.us.us, %"end for input_wrapper.s0.c.c880.us.us"
  %indvars.iv4635 = phi i64 [ %indvars.iv.next4636, %after_bb887.us.us ], [ 0, %"end for input_wrapper.s0.c.c880.us.us" ]
  %8369 = add nsw i64 %indvars.iv4635, %7988
  %8370 = trunc i64 %8369 to i32
  %8371 = shl nsw i32 %8370, 4
  %8372 = add nsw i32 %8371, 16
  %.not2031.us.us = icmp sgt i32 %8372, %t3929867
  br i1 %.not2031.us.us, label %next_bb889.us.us, label %then_bb888.us.us

then_bb888.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased884.us.us"
  %8373 = shl nsw i64 %8369, 4
  %8374 = add nsw i64 %8373, %8317
  %8375 = getelementptr inbounds i8, i8* %172, i64 %8374
  %8376 = bitcast i8* %8375 to <16 x i8>*
  %8377 = load <16 x i8>, <16 x i8>* %8376, align 4, !tbaa !397
  %8378 = zext <16 x i8> %8377 to <16 x i16>
  %8379 = sub nsw <16 x i16> %8378, %7928
  %8380 = add nsw i64 %8373, %8318
  %8381 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8380
  %8382 = bitcast i16* %8381 to <16 x i16>*
  store <16 x i16> %8379, <16 x i16>* %8382, align 8, !tbaa !399
  br label %after_bb887.us.us

next_bb889.us.us:                                 ; preds = %"for input_wrapper.s0.c.c.rebased884.us.us"
  %8383 = or i32 %8371, 1
  %8384 = insertelement <16 x i32> undef, i32 %8383, i32 0
  %8385 = shufflevector <16 x i32> %8384, <16 x i32> undef, <16 x i32> zeroinitializer
  %8386 = add nsw <16 x i32> %8385, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8387 = shufflevector <16 x i32> %8386, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8388 = icmp sgt <8 x i32> %8387, %7931
  %8389 = shufflevector <16 x i32> %8386, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8390 = icmp sgt <8 x i32> %8389, %7931
  %8391 = shufflevector <8 x i1> %8388, <8 x i1> %8390, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8392 = xor <16 x i1> %8391, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %8393 = shl nsw i64 %8369, 4
  %8394 = add nsw i64 %8393, %8317
  %8395 = getelementptr inbounds i8, i8* %172, i64 %8394
  %8396 = bitcast i8* %8395 to <16 x i8>*
  %8397 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %8396, i32 4, <16 x i1> %8392, <16 x i8> undef), !tbaa !397
  %8398 = zext <16 x i8> %8397 to <16 x i16>
  %8399 = sub nsw <16 x i16> %8398, %7928
  %8400 = add nsw i64 %8393, %8318
  %8401 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8400
  %8402 = bitcast i16* %8401 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %8399, <16 x i16>* %8402, i32 8, <16 x i1> %8392), !tbaa !399
  br label %after_bb887.us.us

after_bb887.us.us:                                ; preds = %next_bb889.us.us, %then_bb888.us.us
  %indvars.iv.next4636 = add nuw nsw i64 %indvars.iv4635, 1
  %.not2032.us.us = icmp eq i64 %indvars.iv.next4636, %7989
  br i1 %.not2032.us.us, label %"end for input_wrapper.s0.c.c.rebased885.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased884.us.us"

"end for input_wrapper.s0.c.c.rebased885.loopexit.us.us": ; preds = %after_bb887.us.us
  %indvars.iv.next4638 = add nuw nsw i64 %indvars.iv4637, 1
  %.not2030.us.us = icmp eq i64 %indvars.iv4637, %7987
  br i1 %.not2030.us.us, label %"end for input_wrapper.s0.x.rebased875.loopexit.us", label %"for input_wrapper.s0.x.rebased874.us.us"

"for input_wrapper.s0.x.rebased874.us3477.us":    ; preds = %"for input_wrapper.s0.x.rebased874.preheader.split.us3493", %"end for input_wrapper.s0.c.c880.loopexit.us3488.us"
  %indvars.iv4630 = phi i64 [ %indvars.iv.next4631, %"end for input_wrapper.s0.c.c880.loopexit.us3488.us" ], [ 0, %"for input_wrapper.s0.x.rebased874.preheader.split.us3493" ]
  %8403 = trunc i64 %indvars.iv4630 to i32
  %reass.add2809.us3479.us = add i32 %t3931872.us, %8403
  %reass.mul2810.us3480.us = mul i32 %reass.add2809.us3479.us, %7925
  %8404 = add nsw i64 %indvars.iv4630, %7985
  %8405 = mul nsw i64 %8404, %7986
  %8406 = add nsw i64 %8313, %8405
  %8407 = sext i32 %reass.mul2810.us3480.us to i64
  br i1 %8034, label %"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa", label %"for input_wrapper.s0.c.c879.us3482.us"

"for input_wrapper.s0.c.c879.us3482.us":          ; preds = %"for input_wrapper.s0.x.rebased874.us3477.us", %"for input_wrapper.s0.c.c879.us3482.us"
  %indvars.iv4628 = phi i64 [ %indvars.iv.next4629.3, %"for input_wrapper.s0.c.c879.us3482.us" ], [ 0, %"for input_wrapper.s0.x.rebased874.us3477.us" ]
  %niter6078 = phi i64 [ %niter6078.nsub.3, %"for input_wrapper.s0.c.c879.us3482.us" ], [ %unroll_iter6077, %"for input_wrapper.s0.x.rebased874.us3477.us" ]
  %8408 = shl nuw nsw i64 %indvars.iv4628, 4
  %8409 = add nsw i64 %8408, %8406
  %8410 = getelementptr inbounds i8, i8* %172, i64 %8409
  %8411 = bitcast i8* %8410 to <16 x i8>*
  %8412 = load <16 x i8>, <16 x i8>* %8411, align 4, !tbaa !397
  %8413 = zext <16 x i8> %8412 to <16 x i16>
  %8414 = sub nsw <16 x i16> %8413, %7928
  %8415 = add nsw i64 %8408, %8407
  %8416 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8415
  %8417 = bitcast i16* %8416 to <16 x i16>*
  store <16 x i16> %8414, <16 x i16>* %8417, align 8, !tbaa !399
  %indvars.iv.next4629 = shl i64 %indvars.iv4628, 4
  %8418 = or i64 %indvars.iv.next4629, 16
  %8419 = add nsw i64 %8418, %8406
  %8420 = getelementptr inbounds i8, i8* %172, i64 %8419
  %8421 = bitcast i8* %8420 to <16 x i8>*
  %8422 = load <16 x i8>, <16 x i8>* %8421, align 4, !tbaa !397
  %8423 = zext <16 x i8> %8422 to <16 x i16>
  %8424 = sub nsw <16 x i16> %8423, %7928
  %8425 = add nsw i64 %8418, %8407
  %8426 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8425
  %8427 = bitcast i16* %8426 to <16 x i16>*
  store <16 x i16> %8424, <16 x i16>* %8427, align 8, !tbaa !399
  %indvars.iv.next4629.1 = shl i64 %indvars.iv4628, 4
  %8428 = or i64 %indvars.iv.next4629.1, 32
  %8429 = add nsw i64 %8428, %8406
  %8430 = getelementptr inbounds i8, i8* %172, i64 %8429
  %8431 = bitcast i8* %8430 to <16 x i8>*
  %8432 = load <16 x i8>, <16 x i8>* %8431, align 4, !tbaa !397
  %8433 = zext <16 x i8> %8432 to <16 x i16>
  %8434 = sub nsw <16 x i16> %8433, %7928
  %8435 = add nsw i64 %8428, %8407
  %8436 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8435
  %8437 = bitcast i16* %8436 to <16 x i16>*
  store <16 x i16> %8434, <16 x i16>* %8437, align 8, !tbaa !399
  %indvars.iv.next4629.2 = shl i64 %indvars.iv4628, 4
  %8438 = or i64 %indvars.iv.next4629.2, 48
  %8439 = add nsw i64 %8438, %8406
  %8440 = getelementptr inbounds i8, i8* %172, i64 %8439
  %8441 = bitcast i8* %8440 to <16 x i8>*
  %8442 = load <16 x i8>, <16 x i8>* %8441, align 4, !tbaa !397
  %8443 = zext <16 x i8> %8442 to <16 x i16>
  %8444 = sub nsw <16 x i16> %8443, %7928
  %8445 = add nsw i64 %8438, %8407
  %8446 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8445
  %8447 = bitcast i16* %8446 to <16 x i16>*
  store <16 x i16> %8444, <16 x i16>* %8447, align 8, !tbaa !399
  %indvars.iv.next4629.3 = add nuw nsw i64 %indvars.iv4628, 4
  %niter6078.nsub.3 = add i64 %niter6078, -4
  %niter6078.ncmp.3 = icmp eq i64 %niter6078.nsub.3, 0
  br i1 %niter6078.ncmp.3, label %"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa", label %"for input_wrapper.s0.c.c879.us3482.us"

"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c879.us3482.us", %"for input_wrapper.s0.x.rebased874.us3477.us"
  %indvars.iv4628.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased874.us3477.us" ], [ %indvars.iv.next4629.3, %"for input_wrapper.s0.c.c879.us3482.us" ]
  br i1 %lcmp.mod6076.not, label %"end for input_wrapper.s0.c.c880.loopexit.us3488.us", label %"for input_wrapper.s0.c.c879.us3482.us.epil"

"for input_wrapper.s0.c.c879.us3482.us.epil":     ; preds = %"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa", %"for input_wrapper.s0.c.c879.us3482.us.epil"
  %indvars.iv4628.epil = phi i64 [ %indvars.iv.next4629.epil, %"for input_wrapper.s0.c.c879.us3482.us.epil" ], [ %indvars.iv4628.unr, %"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa" ]
  %epil.iter6075 = phi i64 [ %epil.iter6075.sub, %"for input_wrapper.s0.c.c879.us3482.us.epil" ], [ %xtraiter6074, %"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa" ]
  %8448 = shl nuw nsw i64 %indvars.iv4628.epil, 4
  %8449 = add nsw i64 %8448, %8406
  %8450 = getelementptr inbounds i8, i8* %172, i64 %8449
  %8451 = bitcast i8* %8450 to <16 x i8>*
  %8452 = load <16 x i8>, <16 x i8>* %8451, align 4, !tbaa !397
  %8453 = zext <16 x i8> %8452 to <16 x i16>
  %8454 = sub nsw <16 x i16> %8453, %7928
  %8455 = add nsw i64 %8448, %8407
  %8456 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8455
  %8457 = bitcast i16* %8456 to <16 x i16>*
  store <16 x i16> %8454, <16 x i16>* %8457, align 8, !tbaa !399
  %indvars.iv.next4629.epil = add nuw nsw i64 %indvars.iv4628.epil, 1
  %epil.iter6075.sub = add i64 %epil.iter6075, -1
  %epil.iter6075.cmp.not = icmp eq i64 %epil.iter6075.sub, 0
  br i1 %epil.iter6075.cmp.not, label %"end for input_wrapper.s0.c.c880.loopexit.us3488.us", label %"for input_wrapper.s0.c.c879.us3482.us.epil", !llvm.loop !466

"end for input_wrapper.s0.c.c880.loopexit.us3488.us": ; preds = %"for input_wrapper.s0.c.c879.us3482.us.epil", %"end for input_wrapper.s0.c.c880.loopexit.us3488.us.unr-lcssa"
  %indvars.iv.next4631 = add nuw nsw i64 %indvars.iv4630, 1
  %.not2030.us3486.us = icmp eq i64 %indvars.iv4630, %7987
  br i1 %.not2030.us3486.us, label %"end for input_wrapper.s0.x.rebased875.loopexit.us", label %"for input_wrapper.s0.x.rebased874.us3477.us"

next_bb865:                                       ; preds = %next_bb823
  br i1 %7874, label %next_bb893, label %then_bb892

then_bb892:                                       ; preds = %next_bb865
  br i1 %8013, label %"for input_wrapper.s0.y.rebased897", label %"consume input_wrapper953", !prof !387

next_bb893:                                       ; preds = %next_bb865
  br i1 %7875, label %next_bb921, label %then_bb920

"for input_wrapper.s0.y.rebased897":              ; preds = %then_bb892, %"end for input_wrapper.s0.x.rebased903"
  %indvars.iv4655 = phi i64 [ %indvars.iv.next4656, %"end for input_wrapper.s0.x.rebased903" ], [ 0, %then_bb892 ]
  %8458 = trunc i64 %indvars.iv4655 to i32
  %t3940900 = mul i32 %7912, %8458
  %8459 = add nsw i64 %indvars.iv4655, %8055
  %8460 = mul nsw i64 %8459, %7990
  %8461 = add nsw i64 %8460, %8050
  br i1 %7921, label %"for input_wrapper.s0.x.rebased902.preheader", label %"end for input_wrapper.s0.x.rebased903", !prof !387

"for input_wrapper.s0.x.rebased902.preheader":    ; preds = %"for input_wrapper.s0.y.rebased897"
  br i1 %7935, label %"for input_wrapper.s0.x.rebased902.us", label %"for input_wrapper.s0.x.rebased902.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased902.us":           ; preds = %"for input_wrapper.s0.x.rebased902.preheader", %"end for input_wrapper.s0.c.c.rebased913.loopexit.us"
  %indvars.iv4652 = phi i64 [ %indvars.iv.next4653, %"end for input_wrapper.s0.c.c.rebased913.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased902.preheader" ]
  %8462 = trunc i64 %indvars.iv4652 to i32
  %reass.add2811.us = add i32 %t3940900, %8462
  %reass.mul2812.us = mul i32 %reass.add2811.us, %7925
  %8463 = add nsw i64 %indvars.iv4652, %7985
  %8464 = mul nsw i64 %8463, %7986
  %8465 = add nsw i64 %8461, %8464
  %8466 = sext i32 %reass.mul2812.us to i64
  br i1 %7867, label %"for input_wrapper.s0.c.c907.us.preheader", label %"end for input_wrapper.s0.c.c908.us", !prof !387

"for input_wrapper.s0.c.c907.us.preheader":       ; preds = %"for input_wrapper.s0.x.rebased902.us"
  br i1 %8037, label %"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c907.us"

"for input_wrapper.s0.c.c907.us":                 ; preds = %"for input_wrapper.s0.c.c907.us.preheader", %"for input_wrapper.s0.c.c907.us"
  %indvars.iv4648 = phi i64 [ %indvars.iv.next4649.3, %"for input_wrapper.s0.c.c907.us" ], [ 0, %"for input_wrapper.s0.c.c907.us.preheader" ]
  %niter6093 = phi i64 [ %niter6093.nsub.3, %"for input_wrapper.s0.c.c907.us" ], [ %unroll_iter6092, %"for input_wrapper.s0.c.c907.us.preheader" ]
  %8467 = shl nuw nsw i64 %indvars.iv4648, 3
  %8468 = add nsw i64 %8467, %8465
  %8469 = getelementptr inbounds i8, i8* %172, i64 %8468
  %8470 = bitcast i8* %8469 to <8 x i8>*
  %8471 = load <8 x i8>, <8 x i8>* %8470, align 4, !tbaa !397
  %8472 = zext <8 x i8> %8471 to <8 x i16>
  %8473 = sub nsw <8 x i16> %8472, %7934
  %8474 = add nsw i64 %8467, %8466
  %8475 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8474
  %8476 = bitcast i16* %8475 to <8 x i16>*
  store <8 x i16> %8473, <8 x i16>* %8476, align 8, !tbaa !399
  %indvars.iv.next4649 = shl i64 %indvars.iv4648, 3
  %8477 = or i64 %indvars.iv.next4649, 8
  %8478 = add nsw i64 %8477, %8465
  %8479 = getelementptr inbounds i8, i8* %172, i64 %8478
  %8480 = bitcast i8* %8479 to <8 x i8>*
  %8481 = load <8 x i8>, <8 x i8>* %8480, align 4, !tbaa !397
  %8482 = zext <8 x i8> %8481 to <8 x i16>
  %8483 = sub nsw <8 x i16> %8482, %7934
  %8484 = add nsw i64 %8477, %8466
  %8485 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8484
  %8486 = bitcast i16* %8485 to <8 x i16>*
  store <8 x i16> %8483, <8 x i16>* %8486, align 8, !tbaa !399
  %indvars.iv.next4649.1 = shl i64 %indvars.iv4648, 3
  %8487 = or i64 %indvars.iv.next4649.1, 16
  %8488 = add nsw i64 %8487, %8465
  %8489 = getelementptr inbounds i8, i8* %172, i64 %8488
  %8490 = bitcast i8* %8489 to <8 x i8>*
  %8491 = load <8 x i8>, <8 x i8>* %8490, align 4, !tbaa !397
  %8492 = zext <8 x i8> %8491 to <8 x i16>
  %8493 = sub nsw <8 x i16> %8492, %7934
  %8494 = add nsw i64 %8487, %8466
  %8495 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8494
  %8496 = bitcast i16* %8495 to <8 x i16>*
  store <8 x i16> %8493, <8 x i16>* %8496, align 8, !tbaa !399
  %indvars.iv.next4649.2 = shl i64 %indvars.iv4648, 3
  %8497 = or i64 %indvars.iv.next4649.2, 24
  %8498 = add nsw i64 %8497, %8465
  %8499 = getelementptr inbounds i8, i8* %172, i64 %8498
  %8500 = bitcast i8* %8499 to <8 x i8>*
  %8501 = load <8 x i8>, <8 x i8>* %8500, align 4, !tbaa !397
  %8502 = zext <8 x i8> %8501 to <8 x i16>
  %8503 = sub nsw <8 x i16> %8502, %7934
  %8504 = add nsw i64 %8497, %8466
  %8505 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8504
  %8506 = bitcast i16* %8505 to <8 x i16>*
  store <8 x i16> %8503, <8 x i16>* %8506, align 8, !tbaa !399
  %indvars.iv.next4649.3 = add nuw nsw i64 %indvars.iv4648, 4
  %niter6093.nsub.3 = add i64 %niter6093, -4
  %niter6093.ncmp.3 = icmp eq i64 %niter6093.nsub.3, 0
  br i1 %niter6093.ncmp.3, label %"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c907.us"

"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c907.us", %"for input_wrapper.s0.c.c907.us.preheader"
  %indvars.iv4648.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c907.us.preheader" ], [ %indvars.iv.next4649.3, %"for input_wrapper.s0.c.c907.us" ]
  br i1 %lcmp.mod6091.not, label %"end for input_wrapper.s0.c.c908.us", label %"for input_wrapper.s0.c.c907.us.epil"

"for input_wrapper.s0.c.c907.us.epil":            ; preds = %"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c907.us.epil"
  %indvars.iv4648.epil = phi i64 [ %indvars.iv.next4649.epil, %"for input_wrapper.s0.c.c907.us.epil" ], [ %indvars.iv4648.unr, %"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa" ]
  %epil.iter6090 = phi i64 [ %epil.iter6090.sub, %"for input_wrapper.s0.c.c907.us.epil" ], [ %xtraiter6089, %"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa" ]
  %8507 = shl nuw nsw i64 %indvars.iv4648.epil, 3
  %8508 = add nsw i64 %8507, %8465
  %8509 = getelementptr inbounds i8, i8* %172, i64 %8508
  %8510 = bitcast i8* %8509 to <8 x i8>*
  %8511 = load <8 x i8>, <8 x i8>* %8510, align 4, !tbaa !397
  %8512 = zext <8 x i8> %8511 to <8 x i16>
  %8513 = sub nsw <8 x i16> %8512, %7934
  %8514 = add nsw i64 %8507, %8466
  %8515 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8514
  %8516 = bitcast i16* %8515 to <8 x i16>*
  store <8 x i16> %8513, <8 x i16>* %8516, align 8, !tbaa !399
  %indvars.iv.next4649.epil = add nuw nsw i64 %indvars.iv4648.epil, 1
  %epil.iter6090.sub = add i64 %epil.iter6090, -1
  %epil.iter6090.cmp.not = icmp eq i64 %epil.iter6090.sub, 0
  br i1 %epil.iter6090.cmp.not, label %"end for input_wrapper.s0.c.c908.us", label %"for input_wrapper.s0.c.c907.us.epil", !llvm.loop !467

"end for input_wrapper.s0.c.c908.us":             ; preds = %"end for input_wrapper.s0.c.c908.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c907.us.epil", %"for input_wrapper.s0.x.rebased902.us"
  br label %"for input_wrapper.s0.c.c.rebased912.us"

"for input_wrapper.s0.c.c.rebased912.us":         ; preds = %"end for input_wrapper.s0.c.c908.us", %after_bb915.us
  %indvars.iv4650 = phi i64 [ 0, %"end for input_wrapper.s0.c.c908.us" ], [ %indvars.iv.next4651, %after_bb915.us ]
  %8517 = add nsw i64 %indvars.iv4650, %7992
  %8518 = trunc i64 %8517 to i32
  %8519 = shl nsw i32 %8518, 3
  %8520 = add nsw i32 %8519, 8
  %.not2026.us = icmp sgt i32 %8520, %t3929867
  br i1 %.not2026.us, label %next_bb917.us, label %then_bb916.us

then_bb916.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased912.us"
  %8521 = shl nsw i64 %8517, 3
  %8522 = add nsw i64 %8521, %8465
  %8523 = getelementptr inbounds i8, i8* %172, i64 %8522
  %8524 = bitcast i8* %8523 to <8 x i8>*
  %8525 = load <8 x i8>, <8 x i8>* %8524, align 4, !tbaa !397
  %8526 = zext <8 x i8> %8525 to <8 x i16>
  %8527 = sub nsw <8 x i16> %8526, %7934
  %8528 = add nsw i64 %8521, %8466
  %8529 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8528
  %8530 = bitcast i16* %8529 to <8 x i16>*
  store <8 x i16> %8527, <8 x i16>* %8530, align 8, !tbaa !399
  br label %after_bb915.us

next_bb917.us:                                    ; preds = %"for input_wrapper.s0.c.c.rebased912.us"
  %8531 = or i32 %8519, 1
  %8532 = insertelement <8 x i32> undef, i32 %8531, i32 0
  %8533 = shufflevector <8 x i32> %8532, <8 x i32> undef, <8 x i32> zeroinitializer
  %8534 = add nsw <8 x i32> %8533, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8535 = icmp sle <8 x i32> %8534, %7937
  %8536 = shl nsw i64 %8517, 3
  %8537 = add nsw i64 %8536, %8465
  %8538 = getelementptr inbounds i8, i8* %172, i64 %8537
  %8539 = bitcast i8* %8538 to <8 x i8>*
  %8540 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %8539, i32 4, <8 x i1> %8535, <8 x i8> undef), !tbaa !397
  %8541 = zext <8 x i8> %8540 to <8 x i16>
  %8542 = sub nsw <8 x i16> %8541, %7934
  %8543 = add nsw i64 %8536, %8466
  %8544 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8543
  %8545 = bitcast i16* %8544 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %8542, <8 x i16>* %8545, i32 8, <8 x i1> %8535), !tbaa !399
  br label %after_bb915.us

after_bb915.us:                                   ; preds = %next_bb917.us, %then_bb916.us
  %indvars.iv.next4651 = add nuw nsw i64 %indvars.iv4650, 1
  %.not2027.us = icmp eq i64 %indvars.iv.next4651, %7993
  br i1 %.not2027.us, label %"end for input_wrapper.s0.c.c.rebased913.loopexit.us", label %"for input_wrapper.s0.c.c.rebased912.us"

"end for input_wrapper.s0.c.c.rebased913.loopexit.us": ; preds = %after_bb915.us
  %indvars.iv.next4653 = add nuw nsw i64 %indvars.iv4652, 1
  %.not2025.us = icmp eq i64 %indvars.iv4652, %7987
  br i1 %.not2025.us, label %"end for input_wrapper.s0.x.rebased903", label %"for input_wrapper.s0.x.rebased902.us"

"for input_wrapper.s0.x.rebased902.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased902.preheader"
  br i1 %7867, label %"for input_wrapper.s0.x.rebased902.us3496", label %"end for input_wrapper.s0.x.rebased903", !prof !387

"for input_wrapper.s0.x.rebased902.us3496":       ; preds = %"for input_wrapper.s0.x.rebased902.preheader.split", %"end for input_wrapper.s0.c.c908.loopexit.us3507"
  %indvars.iv4645 = phi i64 [ %indvars.iv.next4646, %"end for input_wrapper.s0.c.c908.loopexit.us3507" ], [ 0, %"for input_wrapper.s0.x.rebased902.preheader.split" ]
  %8546 = trunc i64 %indvars.iv4645 to i32
  %reass.add2811.us3498 = add i32 %t3940900, %8546
  %reass.mul2812.us3499 = mul i32 %reass.add2811.us3498, %7925
  %8547 = add nsw i64 %indvars.iv4645, %7985
  %8548 = mul nsw i64 %8547, %7986
  %8549 = add nsw i64 %8461, %8548
  %8550 = sext i32 %reass.mul2812.us3499 to i64
  br i1 %8036, label %"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa", label %"for input_wrapper.s0.c.c907.us3501"

"for input_wrapper.s0.c.c907.us3501":             ; preds = %"for input_wrapper.s0.x.rebased902.us3496", %"for input_wrapper.s0.c.c907.us3501"
  %indvars.iv4643 = phi i64 [ %indvars.iv.next4644.3, %"for input_wrapper.s0.c.c907.us3501" ], [ 0, %"for input_wrapper.s0.x.rebased902.us3496" ]
  %niter6088 = phi i64 [ %niter6088.nsub.3, %"for input_wrapper.s0.c.c907.us3501" ], [ %unroll_iter6087, %"for input_wrapper.s0.x.rebased902.us3496" ]
  %8551 = shl nuw nsw i64 %indvars.iv4643, 3
  %8552 = add nsw i64 %8551, %8549
  %8553 = getelementptr inbounds i8, i8* %172, i64 %8552
  %8554 = bitcast i8* %8553 to <8 x i8>*
  %8555 = load <8 x i8>, <8 x i8>* %8554, align 4, !tbaa !397
  %8556 = zext <8 x i8> %8555 to <8 x i16>
  %8557 = sub nsw <8 x i16> %8556, %7934
  %8558 = add nsw i64 %8551, %8550
  %8559 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8558
  %8560 = bitcast i16* %8559 to <8 x i16>*
  store <8 x i16> %8557, <8 x i16>* %8560, align 8, !tbaa !399
  %indvars.iv.next4644 = shl i64 %indvars.iv4643, 3
  %8561 = or i64 %indvars.iv.next4644, 8
  %8562 = add nsw i64 %8561, %8549
  %8563 = getelementptr inbounds i8, i8* %172, i64 %8562
  %8564 = bitcast i8* %8563 to <8 x i8>*
  %8565 = load <8 x i8>, <8 x i8>* %8564, align 4, !tbaa !397
  %8566 = zext <8 x i8> %8565 to <8 x i16>
  %8567 = sub nsw <8 x i16> %8566, %7934
  %8568 = add nsw i64 %8561, %8550
  %8569 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8568
  %8570 = bitcast i16* %8569 to <8 x i16>*
  store <8 x i16> %8567, <8 x i16>* %8570, align 8, !tbaa !399
  %indvars.iv.next4644.1 = shl i64 %indvars.iv4643, 3
  %8571 = or i64 %indvars.iv.next4644.1, 16
  %8572 = add nsw i64 %8571, %8549
  %8573 = getelementptr inbounds i8, i8* %172, i64 %8572
  %8574 = bitcast i8* %8573 to <8 x i8>*
  %8575 = load <8 x i8>, <8 x i8>* %8574, align 4, !tbaa !397
  %8576 = zext <8 x i8> %8575 to <8 x i16>
  %8577 = sub nsw <8 x i16> %8576, %7934
  %8578 = add nsw i64 %8571, %8550
  %8579 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8578
  %8580 = bitcast i16* %8579 to <8 x i16>*
  store <8 x i16> %8577, <8 x i16>* %8580, align 8, !tbaa !399
  %indvars.iv.next4644.2 = shl i64 %indvars.iv4643, 3
  %8581 = or i64 %indvars.iv.next4644.2, 24
  %8582 = add nsw i64 %8581, %8549
  %8583 = getelementptr inbounds i8, i8* %172, i64 %8582
  %8584 = bitcast i8* %8583 to <8 x i8>*
  %8585 = load <8 x i8>, <8 x i8>* %8584, align 4, !tbaa !397
  %8586 = zext <8 x i8> %8585 to <8 x i16>
  %8587 = sub nsw <8 x i16> %8586, %7934
  %8588 = add nsw i64 %8581, %8550
  %8589 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8588
  %8590 = bitcast i16* %8589 to <8 x i16>*
  store <8 x i16> %8587, <8 x i16>* %8590, align 8, !tbaa !399
  %indvars.iv.next4644.3 = add nuw nsw i64 %indvars.iv4643, 4
  %niter6088.nsub.3 = add i64 %niter6088, -4
  %niter6088.ncmp.3 = icmp eq i64 %niter6088.nsub.3, 0
  br i1 %niter6088.ncmp.3, label %"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa", label %"for input_wrapper.s0.c.c907.us3501"

"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c907.us3501", %"for input_wrapper.s0.x.rebased902.us3496"
  %indvars.iv4643.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased902.us3496" ], [ %indvars.iv.next4644.3, %"for input_wrapper.s0.c.c907.us3501" ]
  br i1 %lcmp.mod6086.not, label %"end for input_wrapper.s0.c.c908.loopexit.us3507", label %"for input_wrapper.s0.c.c907.us3501.epil"

"for input_wrapper.s0.c.c907.us3501.epil":        ; preds = %"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa", %"for input_wrapper.s0.c.c907.us3501.epil"
  %indvars.iv4643.epil = phi i64 [ %indvars.iv.next4644.epil, %"for input_wrapper.s0.c.c907.us3501.epil" ], [ %indvars.iv4643.unr, %"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa" ]
  %epil.iter6085 = phi i64 [ %epil.iter6085.sub, %"for input_wrapper.s0.c.c907.us3501.epil" ], [ %xtraiter6084, %"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa" ]
  %8591 = shl nuw nsw i64 %indvars.iv4643.epil, 3
  %8592 = add nsw i64 %8591, %8549
  %8593 = getelementptr inbounds i8, i8* %172, i64 %8592
  %8594 = bitcast i8* %8593 to <8 x i8>*
  %8595 = load <8 x i8>, <8 x i8>* %8594, align 4, !tbaa !397
  %8596 = zext <8 x i8> %8595 to <8 x i16>
  %8597 = sub nsw <8 x i16> %8596, %7934
  %8598 = add nsw i64 %8591, %8550
  %8599 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8598
  %8600 = bitcast i16* %8599 to <8 x i16>*
  store <8 x i16> %8597, <8 x i16>* %8600, align 8, !tbaa !399
  %indvars.iv.next4644.epil = add nuw nsw i64 %indvars.iv4643.epil, 1
  %epil.iter6085.sub = add i64 %epil.iter6085, -1
  %epil.iter6085.cmp.not = icmp eq i64 %epil.iter6085.sub, 0
  br i1 %epil.iter6085.cmp.not, label %"end for input_wrapper.s0.c.c908.loopexit.us3507", label %"for input_wrapper.s0.c.c907.us3501.epil", !llvm.loop !468

"end for input_wrapper.s0.c.c908.loopexit.us3507": ; preds = %"for input_wrapper.s0.c.c907.us3501.epil", %"end for input_wrapper.s0.c.c908.loopexit.us3507.unr-lcssa"
  %indvars.iv.next4646 = add nuw nsw i64 %indvars.iv4645, 1
  %.not2025.us3505 = icmp eq i64 %indvars.iv4645, %7987
  br i1 %.not2025.us3505, label %"end for input_wrapper.s0.x.rebased903", label %"for input_wrapper.s0.x.rebased902.us3496"

"end for input_wrapper.s0.x.rebased903":          ; preds = %"end for input_wrapper.s0.c.c908.loopexit.us3507", %"end for input_wrapper.s0.c.c.rebased913.loopexit.us", %"for input_wrapper.s0.x.rebased902.preheader.split", %"for input_wrapper.s0.y.rebased897"
  %indvars.iv.next4656 = add nuw nsw i64 %indvars.iv4655, 1
  %.not2024 = icmp eq i64 %indvars.iv4655, %8018
  br i1 %.not2024, label %"consume input_wrapper953", label %"for input_wrapper.s0.y.rebased897"

then_bb920:                                       ; preds = %next_bb893
  br i1 %8013, label %"for input_wrapper.s0.y.rebased924", label %"consume input_wrapper953", !prof !387

next_bb921:                                       ; preds = %next_bb893
  br i1 %8013, label %"for input_wrapper.s0.y.rebased940", label %"consume input_wrapper953", !prof !387

"for input_wrapper.s0.y.rebased924":              ; preds = %then_bb920, %"end for input_wrapper.s0.x.rebased930"
  %indvars.iv4663 = phi i64 [ %indvars.iv.next4664, %"end for input_wrapper.s0.x.rebased930" ], [ 0, %then_bb920 ]
  %8601 = trunc i64 %indvars.iv4663 to i32
  %t3948927 = mul i32 %7912, %8601
  %8602 = add nsw i64 %indvars.iv4663, %8055
  %8603 = mul nsw i64 %8602, %7990
  %8604 = add nsw i64 %8603, %8050
  br i1 %brmerge5048.demorgan, label %"for input_wrapper.s0.x.rebased929.us", label %"end for input_wrapper.s0.x.rebased930", !prof !407

"for input_wrapper.s0.x.rebased929.us":           ; preds = %"for input_wrapper.s0.y.rebased924", %"end for input_wrapper.s0.c.c935.loopexit.us"
  %indvars.iv4660 = phi i64 [ %indvars.iv.next4661, %"end for input_wrapper.s0.c.c935.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased924" ]
  %8605 = trunc i64 %indvars.iv4660 to i32
  %reass.add2813.us = add i32 %t3948927, %8605
  %reass.mul2814.us = mul i32 %reass.add2813.us, %7925
  %8606 = add nsw i64 %indvars.iv4660, %7985
  %8607 = mul nsw i64 %8606, %7986
  %8608 = add nsw i64 %8604, %8607
  %8609 = sext i32 %reass.mul2814.us to i64
  br i1 %8038, label %"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c934.us"

"for input_wrapper.s0.c.c934.us":                 ; preds = %"for input_wrapper.s0.x.rebased929.us", %"for input_wrapper.s0.c.c934.us"
  %indvars.iv4658 = phi i64 [ %indvars.iv.next4659.3, %"for input_wrapper.s0.c.c934.us" ], [ 0, %"for input_wrapper.s0.x.rebased929.us" ]
  %niter6098 = phi i64 [ %niter6098.nsub.3, %"for input_wrapper.s0.c.c934.us" ], [ %unroll_iter6097, %"for input_wrapper.s0.x.rebased929.us" ]
  %8610 = shl nuw nsw i64 %indvars.iv4658, 2
  %8611 = add nsw i64 %8610, %8608
  %8612 = getelementptr inbounds i8, i8* %172, i64 %8611
  %8613 = bitcast i8* %8612 to <4 x i8>*
  %8614 = load <4 x i8>, <4 x i8>* %8613, align 4, !tbaa !397
  %8615 = zext <4 x i8> %8614 to <4 x i16>
  %8616 = sub nsw <4 x i16> %8615, %7940
  %8617 = add nsw i64 %8610, %8609
  %8618 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8617
  %8619 = bitcast i16* %8618 to <4 x i16>*
  store <4 x i16> %8616, <4 x i16>* %8619, align 8, !tbaa !399
  %indvars.iv.next4659 = shl i64 %indvars.iv4658, 2
  %8620 = or i64 %indvars.iv.next4659, 4
  %8621 = add nsw i64 %8620, %8608
  %8622 = getelementptr inbounds i8, i8* %172, i64 %8621
  %8623 = bitcast i8* %8622 to <4 x i8>*
  %8624 = load <4 x i8>, <4 x i8>* %8623, align 4, !tbaa !397
  %8625 = zext <4 x i8> %8624 to <4 x i16>
  %8626 = sub nsw <4 x i16> %8625, %7940
  %8627 = add nsw i64 %8620, %8609
  %8628 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8627
  %8629 = bitcast i16* %8628 to <4 x i16>*
  store <4 x i16> %8626, <4 x i16>* %8629, align 8, !tbaa !399
  %indvars.iv.next4659.1 = shl i64 %indvars.iv4658, 2
  %8630 = or i64 %indvars.iv.next4659.1, 8
  %8631 = add nsw i64 %8630, %8608
  %8632 = getelementptr inbounds i8, i8* %172, i64 %8631
  %8633 = bitcast i8* %8632 to <4 x i8>*
  %8634 = load <4 x i8>, <4 x i8>* %8633, align 4, !tbaa !397
  %8635 = zext <4 x i8> %8634 to <4 x i16>
  %8636 = sub nsw <4 x i16> %8635, %7940
  %8637 = add nsw i64 %8630, %8609
  %8638 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8637
  %8639 = bitcast i16* %8638 to <4 x i16>*
  store <4 x i16> %8636, <4 x i16>* %8639, align 8, !tbaa !399
  %indvars.iv.next4659.2 = shl i64 %indvars.iv4658, 2
  %8640 = or i64 %indvars.iv.next4659.2, 12
  %8641 = add nsw i64 %8640, %8608
  %8642 = getelementptr inbounds i8, i8* %172, i64 %8641
  %8643 = bitcast i8* %8642 to <4 x i8>*
  %8644 = load <4 x i8>, <4 x i8>* %8643, align 4, !tbaa !397
  %8645 = zext <4 x i8> %8644 to <4 x i16>
  %8646 = sub nsw <4 x i16> %8645, %7940
  %8647 = add nsw i64 %8640, %8609
  %8648 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8647
  %8649 = bitcast i16* %8648 to <4 x i16>*
  store <4 x i16> %8646, <4 x i16>* %8649, align 8, !tbaa !399
  %indvars.iv.next4659.3 = add nuw nsw i64 %indvars.iv4658, 4
  %niter6098.nsub.3 = add i64 %niter6098, -4
  %niter6098.ncmp.3 = icmp eq i64 %niter6098.nsub.3, 0
  br i1 %niter6098.ncmp.3, label %"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c934.us"

"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c934.us", %"for input_wrapper.s0.x.rebased929.us"
  %indvars.iv4658.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased929.us" ], [ %indvars.iv.next4659.3, %"for input_wrapper.s0.c.c934.us" ]
  br i1 %lcmp.mod6096.not, label %"end for input_wrapper.s0.c.c935.loopexit.us", label %"for input_wrapper.s0.c.c934.us.epil"

"for input_wrapper.s0.c.c934.us.epil":            ; preds = %"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c934.us.epil"
  %indvars.iv4658.epil = phi i64 [ %indvars.iv.next4659.epil, %"for input_wrapper.s0.c.c934.us.epil" ], [ %indvars.iv4658.unr, %"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa" ]
  %epil.iter6095 = phi i64 [ %epil.iter6095.sub, %"for input_wrapper.s0.c.c934.us.epil" ], [ %xtraiter6094, %"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa" ]
  %8650 = shl nuw nsw i64 %indvars.iv4658.epil, 2
  %8651 = add nsw i64 %8650, %8608
  %8652 = getelementptr inbounds i8, i8* %172, i64 %8651
  %8653 = bitcast i8* %8652 to <4 x i8>*
  %8654 = load <4 x i8>, <4 x i8>* %8653, align 4, !tbaa !397
  %8655 = zext <4 x i8> %8654 to <4 x i16>
  %8656 = sub nsw <4 x i16> %8655, %7940
  %8657 = add nsw i64 %8650, %8609
  %8658 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8657
  %8659 = bitcast i16* %8658 to <4 x i16>*
  store <4 x i16> %8656, <4 x i16>* %8659, align 8, !tbaa !399
  %indvars.iv.next4659.epil = add nuw nsw i64 %indvars.iv4658.epil, 1
  %epil.iter6095.sub = add i64 %epil.iter6095, -1
  %epil.iter6095.cmp.not = icmp eq i64 %epil.iter6095.sub, 0
  br i1 %epil.iter6095.cmp.not, label %"end for input_wrapper.s0.c.c935.loopexit.us", label %"for input_wrapper.s0.c.c934.us.epil", !llvm.loop !469

"end for input_wrapper.s0.c.c935.loopexit.us":    ; preds = %"for input_wrapper.s0.c.c934.us.epil", %"end for input_wrapper.s0.c.c935.loopexit.us.unr-lcssa"
  %indvars.iv.next4661 = add nuw nsw i64 %indvars.iv4660, 1
  %.not2022.us = icmp eq i64 %indvars.iv4660, %7987
  br i1 %.not2022.us, label %"end for input_wrapper.s0.x.rebased930", label %"for input_wrapper.s0.x.rebased929.us"

"end for input_wrapper.s0.x.rebased930":          ; preds = %"end for input_wrapper.s0.c.c935.loopexit.us", %"for input_wrapper.s0.y.rebased924"
  %indvars.iv.next4664 = add nuw nsw i64 %indvars.iv4663, 1
  %.not2021 = icmp eq i64 %indvars.iv4663, %8019
  br i1 %.not2021, label %"consume input_wrapper953", label %"for input_wrapper.s0.y.rebased924"

"for input_wrapper.s0.y.rebased940":              ; preds = %next_bb921, %"end for input_wrapper.s0.x.rebased946"
  %indvars.iv4671 = phi i64 [ %indvars.iv.next4672, %"end for input_wrapper.s0.x.rebased946" ], [ 0, %next_bb921 ]
  %8660 = trunc i64 %indvars.iv4671 to i32
  %t3955943 = mul i32 %7912, %8660
  %8661 = add nsw i64 %indvars.iv4671, %8055
  %8662 = mul nsw i64 %8661, %7990
  %8663 = add nsw i64 %8662, %8050
  br i1 %brmerge5051.demorgan, label %iter.check5571, label %"end for input_wrapper.s0.x.rebased946", !prof !407

iter.check5571:                                   ; preds = %"for input_wrapper.s0.y.rebased940", %"end for input_wrapper.s0.c951.loopexit.us"
  %indvars.iv4668 = phi i64 [ %indvars.iv.next4669, %"end for input_wrapper.s0.c951.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased940" ]
  %8664 = trunc i64 %indvars.iv4668 to i32
  %reass.add2815.us = add i32 %t3955943, %8664
  %reass.mul2816.us = mul i32 %reass.add2815.us, %7925
  %8665 = add nsw i64 %indvars.iv4668, %7985
  %8666 = mul nsw i64 %8665, %7986
  %8667 = add nsw i64 %8663, %8666
  %8668 = sext i32 %reass.mul2816.us to i64
  br i1 %min.iters.check5569, label %"for input_wrapper.s0.c950.us.preheader", label %vector.main.loop.iter.check5573

vector.main.loop.iter.check5573:                  ; preds = %iter.check5571
  br i1 %min.iters.check5572, label %vec.epilog.ph5596, label %vector.ph5574

vector.ph5574:                                    ; preds = %vector.main.loop.iter.check5573
  br i1 %8039, label %middle.block5566.unr-lcssa, label %vector.body5568

vector.body5568:                                  ; preds = %vector.ph5574, %vector.body5568
  %index5577 = phi i64 [ %index.next5578.1, %vector.body5568 ], [ 0, %vector.ph5574 ]
  %niter6102 = phi i64 [ %niter6102.nsub.1, %vector.body5568 ], [ %unroll_iter6101, %vector.ph5574 ]
  %8669 = add nsw i64 %index5577, %8667
  %8670 = getelementptr inbounds i8, i8* %172, i64 %8669
  %8671 = bitcast i8* %8670 to <16 x i8>*
  %wide.load5580 = load <16 x i8>, <16 x i8>* %8671, align 1, !tbaa !397
  %8672 = getelementptr inbounds i8, i8* %8670, i64 16
  %8673 = bitcast i8* %8672 to <16 x i8>*
  %wide.load5581 = load <16 x i8>, <16 x i8>* %8673, align 1, !tbaa !397
  %8674 = getelementptr inbounds i8, i8* %8670, i64 32
  %8675 = bitcast i8* %8674 to <16 x i8>*
  %wide.load5582 = load <16 x i8>, <16 x i8>* %8675, align 1, !tbaa !397
  %8676 = getelementptr inbounds i8, i8* %8670, i64 48
  %8677 = bitcast i8* %8676 to <16 x i8>*
  %wide.load5583 = load <16 x i8>, <16 x i8>* %8677, align 1, !tbaa !397
  %8678 = zext <16 x i8> %wide.load5580 to <16 x i16>
  %8679 = zext <16 x i8> %wide.load5581 to <16 x i16>
  %8680 = zext <16 x i8> %wide.load5582 to <16 x i16>
  %8681 = zext <16 x i8> %wide.load5583 to <16 x i16>
  %8682 = sub nsw <16 x i16> %8678, %broadcast.splat5585
  %8683 = sub nsw <16 x i16> %8679, %broadcast.splat5587
  %8684 = sub nsw <16 x i16> %8680, %broadcast.splat5589
  %8685 = sub nsw <16 x i16> %8681, %broadcast.splat5591
  %8686 = add nsw i64 %index5577, %8668
  %8687 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8686
  %8688 = bitcast i16* %8687 to <16 x i16>*
  store <16 x i16> %8682, <16 x i16>* %8688, align 2, !tbaa !399
  %8689 = getelementptr inbounds i16, i16* %8687, i64 16
  %8690 = bitcast i16* %8689 to <16 x i16>*
  store <16 x i16> %8683, <16 x i16>* %8690, align 2, !tbaa !399
  %8691 = getelementptr inbounds i16, i16* %8687, i64 32
  %8692 = bitcast i16* %8691 to <16 x i16>*
  store <16 x i16> %8684, <16 x i16>* %8692, align 2, !tbaa !399
  %8693 = getelementptr inbounds i16, i16* %8687, i64 48
  %8694 = bitcast i16* %8693 to <16 x i16>*
  store <16 x i16> %8685, <16 x i16>* %8694, align 2, !tbaa !399
  %index.next5578 = or i64 %index5577, 64
  %8695 = add nsw i64 %index.next5578, %8667
  %8696 = getelementptr inbounds i8, i8* %172, i64 %8695
  %8697 = bitcast i8* %8696 to <16 x i8>*
  %wide.load5580.1 = load <16 x i8>, <16 x i8>* %8697, align 1, !tbaa !397
  %8698 = getelementptr inbounds i8, i8* %8696, i64 16
  %8699 = bitcast i8* %8698 to <16 x i8>*
  %wide.load5581.1 = load <16 x i8>, <16 x i8>* %8699, align 1, !tbaa !397
  %8700 = getelementptr inbounds i8, i8* %8696, i64 32
  %8701 = bitcast i8* %8700 to <16 x i8>*
  %wide.load5582.1 = load <16 x i8>, <16 x i8>* %8701, align 1, !tbaa !397
  %8702 = getelementptr inbounds i8, i8* %8696, i64 48
  %8703 = bitcast i8* %8702 to <16 x i8>*
  %wide.load5583.1 = load <16 x i8>, <16 x i8>* %8703, align 1, !tbaa !397
  %8704 = zext <16 x i8> %wide.load5580.1 to <16 x i16>
  %8705 = zext <16 x i8> %wide.load5581.1 to <16 x i16>
  %8706 = zext <16 x i8> %wide.load5582.1 to <16 x i16>
  %8707 = zext <16 x i8> %wide.load5583.1 to <16 x i16>
  %8708 = sub nsw <16 x i16> %8704, %broadcast.splat5585
  %8709 = sub nsw <16 x i16> %8705, %broadcast.splat5587
  %8710 = sub nsw <16 x i16> %8706, %broadcast.splat5589
  %8711 = sub nsw <16 x i16> %8707, %broadcast.splat5591
  %8712 = add nsw i64 %index.next5578, %8668
  %8713 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8712
  %8714 = bitcast i16* %8713 to <16 x i16>*
  store <16 x i16> %8708, <16 x i16>* %8714, align 2, !tbaa !399
  %8715 = getelementptr inbounds i16, i16* %8713, i64 16
  %8716 = bitcast i16* %8715 to <16 x i16>*
  store <16 x i16> %8709, <16 x i16>* %8716, align 2, !tbaa !399
  %8717 = getelementptr inbounds i16, i16* %8713, i64 32
  %8718 = bitcast i16* %8717 to <16 x i16>*
  store <16 x i16> %8710, <16 x i16>* %8718, align 2, !tbaa !399
  %8719 = getelementptr inbounds i16, i16* %8713, i64 48
  %8720 = bitcast i16* %8719 to <16 x i16>*
  store <16 x i16> %8711, <16 x i16>* %8720, align 2, !tbaa !399
  %index.next5578.1 = add i64 %index5577, 128
  %niter6102.nsub.1 = add i64 %niter6102, -2
  %niter6102.ncmp.1 = icmp eq i64 %niter6102.nsub.1, 0
  br i1 %niter6102.ncmp.1, label %middle.block5566.unr-lcssa, label %vector.body5568, !llvm.loop !470

middle.block5566.unr-lcssa:                       ; preds = %vector.body5568, %vector.ph5574
  %index5577.unr = phi i64 [ 0, %vector.ph5574 ], [ %index.next5578.1, %vector.body5568 ]
  br i1 %lcmp.mod6100.not, label %middle.block5566, label %vector.body5568.epil

vector.body5568.epil:                             ; preds = %middle.block5566.unr-lcssa
  %8721 = add nsw i64 %index5577.unr, %8667
  %8722 = getelementptr inbounds i8, i8* %172, i64 %8721
  %8723 = bitcast i8* %8722 to <16 x i8>*
  %wide.load5580.epil = load <16 x i8>, <16 x i8>* %8723, align 1, !tbaa !397
  %8724 = getelementptr inbounds i8, i8* %8722, i64 16
  %8725 = bitcast i8* %8724 to <16 x i8>*
  %wide.load5581.epil = load <16 x i8>, <16 x i8>* %8725, align 1, !tbaa !397
  %8726 = getelementptr inbounds i8, i8* %8722, i64 32
  %8727 = bitcast i8* %8726 to <16 x i8>*
  %wide.load5582.epil = load <16 x i8>, <16 x i8>* %8727, align 1, !tbaa !397
  %8728 = getelementptr inbounds i8, i8* %8722, i64 48
  %8729 = bitcast i8* %8728 to <16 x i8>*
  %wide.load5583.epil = load <16 x i8>, <16 x i8>* %8729, align 1, !tbaa !397
  %8730 = zext <16 x i8> %wide.load5580.epil to <16 x i16>
  %8731 = zext <16 x i8> %wide.load5581.epil to <16 x i16>
  %8732 = zext <16 x i8> %wide.load5582.epil to <16 x i16>
  %8733 = zext <16 x i8> %wide.load5583.epil to <16 x i16>
  %8734 = sub nsw <16 x i16> %8730, %broadcast.splat5585
  %8735 = sub nsw <16 x i16> %8731, %broadcast.splat5587
  %8736 = sub nsw <16 x i16> %8732, %broadcast.splat5589
  %8737 = sub nsw <16 x i16> %8733, %broadcast.splat5591
  %8738 = add nsw i64 %index5577.unr, %8668
  %8739 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8738
  %8740 = bitcast i16* %8739 to <16 x i16>*
  store <16 x i16> %8734, <16 x i16>* %8740, align 2, !tbaa !399
  %8741 = getelementptr inbounds i16, i16* %8739, i64 16
  %8742 = bitcast i16* %8741 to <16 x i16>*
  store <16 x i16> %8735, <16 x i16>* %8742, align 2, !tbaa !399
  %8743 = getelementptr inbounds i16, i16* %8739, i64 32
  %8744 = bitcast i16* %8743 to <16 x i16>*
  store <16 x i16> %8736, <16 x i16>* %8744, align 2, !tbaa !399
  %8745 = getelementptr inbounds i16, i16* %8739, i64 48
  %8746 = bitcast i16* %8745 to <16 x i16>*
  store <16 x i16> %8737, <16 x i16>* %8746, align 2, !tbaa !399
  br label %middle.block5566

middle.block5566:                                 ; preds = %middle.block5566.unr-lcssa, %vector.body5568.epil
  br i1 %cmp.n5579, label %"end for input_wrapper.s0.c951.loopexit.us", label %vec.epilog.iter.check5595

vec.epilog.iter.check5595:                        ; preds = %middle.block5566
  br i1 %min.epilog.iters.check5598, label %"for input_wrapper.s0.c950.us.preheader", label %vec.epilog.ph5596

vec.epilog.ph5596:                                ; preds = %vector.main.loop.iter.check5573, %vec.epilog.iter.check5595
  %vec.epilog.resume.val5599 = phi i64 [ %n.vec5576, %vec.epilog.iter.check5595 ], [ 0, %vector.main.loop.iter.check5573 ]
  br label %vec.epilog.vector.body5594

vec.epilog.vector.body5594:                       ; preds = %vec.epilog.vector.body5594, %vec.epilog.ph5596
  %index5602 = phi i64 [ %vec.epilog.resume.val5599, %vec.epilog.ph5596 ], [ %index.next5603, %vec.epilog.vector.body5594 ]
  %8747 = add nsw i64 %index5602, %8667
  %8748 = getelementptr inbounds i8, i8* %172, i64 %8747
  %8749 = bitcast i8* %8748 to <8 x i8>*
  %wide.load5606 = load <8 x i8>, <8 x i8>* %8749, align 1, !tbaa !397
  %8750 = zext <8 x i8> %wide.load5606 to <8 x i16>
  %8751 = sub nsw <8 x i16> %8750, %broadcast.splat5608
  %8752 = add nsw i64 %index5602, %8668
  %8753 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8752
  %8754 = bitcast i16* %8753 to <8 x i16>*
  store <8 x i16> %8751, <8 x i16>* %8754, align 2, !tbaa !399
  %index.next5603 = add i64 %index5602, 8
  %8755 = icmp eq i64 %index.next5603, %n.vec5601
  br i1 %8755, label %vec.epilog.middle.block5592, label %vec.epilog.vector.body5594, !llvm.loop !471

vec.epilog.middle.block5592:                      ; preds = %vec.epilog.vector.body5594
  br i1 %cmp.n5605, label %"end for input_wrapper.s0.c951.loopexit.us", label %"for input_wrapper.s0.c950.us.preheader"

"for input_wrapper.s0.c950.us.preheader":         ; preds = %iter.check5571, %vec.epilog.iter.check5595, %vec.epilog.middle.block5592
  %indvars.iv4666.ph = phi i64 [ 0, %iter.check5571 ], [ %n.vec5576, %vec.epilog.iter.check5595 ], [ %n.vec5601, %vec.epilog.middle.block5592 ]
  br label %"for input_wrapper.s0.c950.us"

"for input_wrapper.s0.c950.us":                   ; preds = %"for input_wrapper.s0.c950.us.preheader", %"for input_wrapper.s0.c950.us"
  %indvars.iv4666 = phi i64 [ %indvars.iv.next4667, %"for input_wrapper.s0.c950.us" ], [ %indvars.iv4666.ph, %"for input_wrapper.s0.c950.us.preheader" ]
  %8756 = add nsw i64 %indvars.iv4666, %8667
  %8757 = getelementptr inbounds i8, i8* %172, i64 %8756
  %8758 = load i8, i8* %8757, align 1, !tbaa !397
  %8759 = zext i8 %8758 to i16
  %8760 = sub nsw i16 %8759, %7941
  %8761 = add nsw i64 %indvars.iv4666, %8668
  %8762 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8761
  store i16 %8760, i16* %8762, align 2, !tbaa !399
  %indvars.iv.next4667 = add nuw nsw i64 %indvars.iv4666, 1
  %.not2020.us = icmp eq i64 %indvars.iv.next4667, %7995
  br i1 %.not2020.us, label %"end for input_wrapper.s0.c951.loopexit.us", label %"for input_wrapper.s0.c950.us", !llvm.loop !472

"end for input_wrapper.s0.c951.loopexit.us":      ; preds = %"for input_wrapper.s0.c950.us", %vec.epilog.middle.block5592, %middle.block5566
  %indvars.iv.next4669 = add nuw nsw i64 %indvars.iv4668, 1
  %.not2019.us = icmp eq i64 %indvars.iv4668, %7987
  br i1 %.not2019.us, label %"end for input_wrapper.s0.x.rebased946", label %iter.check5571

"end for input_wrapper.s0.x.rebased946":          ; preds = %"end for input_wrapper.s0.c951.loopexit.us", %"for input_wrapper.s0.y.rebased940"
  %indvars.iv.next4672 = add nuw nsw i64 %indvars.iv4671, 1
  %.not2018 = icmp eq i64 %indvars.iv4671, %8020
  br i1 %.not2018, label %"consume input_wrapper953", label %"for input_wrapper.s0.y.rebased940"

"consume input_wrapper953":                       ; preds = %"end for input_wrapper.s0.x.rebased875.loopexit.us", %"end for input_wrapper.s0.x.rebased903", %"end for input_wrapper.s0.x.rebased930", %"end for input_wrapper.s0.x.rebased946", %"end for input_wrapper.s0.x.x.rebased851", %then_bb864, %next_bb921, %then_bb920, %then_bb892, %then_bb822
  %8763 = trunc i64 %8053 to i32
  %8764 = mul i32 %189, %8763
  %t3888811 = add i32 %8764, %8052
  %t3960957 = sub i32 %t3888811, %reass.add2818
  br i1 %208, label %"for output.s0.x.xo958", label %"end for output.s0.x.xo959", !prof !387

"for output.s0.x.xo958":                          ; preds = %"consume input_wrapper953", %"end for output.s0.c.co975"
  %output.s0.x.xo960 = phi i32 [ %8907, %"end for output.s0.c.co975" ], [ 0, %"consume input_wrapper953" ]
  %a305 = shl nsw i32 %output.s0.x.xo960, 2
  %8765 = icmp sgt i32 %b307, %a305
  %output.s0.x.x.base.s961 = select i1 %8765, i32 %a305, i32 %b307
  %t3970962 = add nsw i32 %output.s0.x.x.base.s961, %184
  %t3971963 = add nsw i32 %t3970962, 1
  %t3972964 = add nsw i32 %t3970962, 2
  %t3973965 = add nsw i32 %t3970962, 3
  br i1 %7953, label %"for output.s0.c.co974.preheader", label %"end for output.s0.c.co975", !prof !387

"for output.s0.c.co974.preheader":                ; preds = %"for output.s0.x.xo958"
  %8766 = insertelement <4 x i32> poison, i32 %t3970962, i32 0
  %8767 = insertelement <4 x i32> %8766, i32 %t3971963, i32 1
  %8768 = insertelement <4 x i32> %8767, i32 %t3972964, i32 2
  %8769 = insertelement <4 x i32> %8768, i32 %t3973965, i32 3
  %8770 = mul nsw <4 x i32> %8769, %8042
  %8771 = sub <4 x i32> %8770, %8044
  %8772 = mul nsw i32 %t3970962, %186
  %t3966973 = add nsw i32 %8772, %t3960957
  %8773 = mul nsw i32 %t3971963, %186
  %t3967972 = add nsw i32 %8773, %t3960957
  %8774 = mul nsw i32 %t3972964, %186
  %t3968971 = add nsw i32 %8774, %t3960957
  %8775 = mul nsw i32 %t3973965, %186
  %t3969970 = add nsw i32 %8775, %t3960957
  %8776 = sext i32 %t3966973 to i64
  %8777 = sext i32 %t3967972 to i64
  %8778 = sext i32 %t3968971 to i64
  %8779 = sext i32 %t3969970 to i64
  %8780 = sext <4 x i32> %8771 to <4 x i64>
  br label %"for output.s0.c.co974"

"end for output.s0.x.xo959":                      ; preds = %"end for output.s0.c.co975", %"consume input_wrapper953"
  %tobool.not.i2461.not = icmp eq i8* %8056, null
  br i1 %tobool.not.i2461.not, label %call_destructor.exit2464, label %if.then.i2462

if.then.i2462:                                    ; preds = %"end for output.s0.x.xo959"
  call void @halide_free(i8* null, i8* nonnull %8056) #17
  br label %call_destructor.exit2464

call_destructor.exit2464:                         ; preds = %"end for output.s0.x.xo959", %if.then.i2462
  %indvars.iv.next4708 = add nuw nsw i64 %indvars.iv4707, 1
  %8781 = icmp eq i64 %indvars.iv.next4708, %zext4711
  br i1 %8781, label %"end for output.s0.y.rebased816", label %"for output.s0.y.rebased815"

"for output.s0.c.co974":                          ; preds = %"for output.s0.c.co974.preheader", %"consume convolved1001"
  %indvars.iv4704 = phi i64 [ 0, %"for output.s0.c.co974.preheader" ], [ %indvars.iv.next4705, %"consume convolved1001" ]
  %8782 = shl nuw nsw i64 %indvars.iv4704, 4
  %8783 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %8782
  %8784 = bitcast i32* %8783 to <8 x i32>*
  %8785 = load <8 x i32>, <8 x i32>* %8784, align 32, !tbaa !391
  %8786 = getelementptr inbounds i32, i32* %8783, i64 8
  %8787 = bitcast i32* %8786 to <8 x i32>*
  %8788 = load <8 x i32>, <8 x i32>* %8787, align 32, !tbaa !391
  %indvars.iv4704.tr = trunc i64 %indvars.iv4704 to i32
  %8789 = shl i32 %indvars.iv4704.tr, 1
  %8790 = or i32 %8789, 1
  %t3975978 = mul nsw i32 %8790, %167
  br i1 %7954, label %"for convolved.s1.r19$y980.preheader", label %"consume convolved1001", !prof !387

"for convolved.s1.r19$y980.preheader":            ; preds = %"for output.s0.c.co974"
  %8791 = mul nsw i64 %indvars.iv4704, %8006
  br i1 %7955, label %"for convolved.s1.r19$y980.preheader.split.us", label %"consume convolved1001", !prof !387

"for convolved.s1.r19$y980.preheader.split.us":   ; preds = %"for convolved.s1.r19$y980.preheader"
  br i1 %7894, label %"for convolved.s1.r19$y980.us.us", label %"consume convolved1001", !prof !387

"for convolved.s1.r19$y980.us.us":                ; preds = %"for convolved.s1.r19$y980.preheader.split.us", %"end for convolved.s1.r19$x987.loopexit.split.us.us.us"
  %indvars.iv4701 = phi i64 [ %indvars.iv.next4702, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.272.24.us.us = phi <8 x i32> [ %8906, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.242.24.us.us = phi <8 x i32> [ %8902, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.212.24.us.us = phi <8 x i32> [ %8887, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.182.24.us.us = phi <8 x i32> [ %8883, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.142.30.us.us = phi <8 x i32> [ %8868, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.102.30.us.us = phi <8 x i32> [ %8864, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.62.30.us.us = phi <8 x i32> [ %8849, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %convolved1914.sroa.0.76.us.us = phi <8 x i32> [ %8837, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ]
  %8792 = mul nsw i64 %indvars.iv4701, %8004
  %8793 = trunc i64 %indvars.iv4701 to i32
  %8794 = mul i32 %8793, %dilation_y
  %8795 = sub i32 %8794, %t3833790
  %t3976984.us.us = mul nsw i32 %t3895825, %8795
  %8796 = sext i32 %t3976984.us.us to i64
  %8797 = trunc i64 %8792 to i32
  %8798 = insertelement <4 x i64> poison, i64 %8796, i32 0
  br label %"for convolved.s1.r19$x986.us.us.us"

"for convolved.s1.r19$x986.us.us.us":             ; preds = %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us", %"for convolved.s1.r19$y980.us.us"
  %indvars.iv4692 = phi i64 [ %indvars.iv.next4693, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.272.25.us.us.us = phi <8 x i32> [ %8906, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.272.24.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.242.25.us.us.us = phi <8 x i32> [ %8902, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.242.24.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.212.25.us.us.us = phi <8 x i32> [ %8887, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.212.24.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.182.25.us.us.us = phi <8 x i32> [ %8883, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.182.24.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.142.31.us.us.us = phi <8 x i32> [ %8868, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.142.30.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.102.31.us.us.us = phi <8 x i32> [ %8864, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.102.30.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.62.31.us.us.us = phi <8 x i32> [ %8849, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.62.30.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %convolved1914.sroa.0.77.us.us.us = phi <8 x i32> [ %8837, %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us" ], [ %convolved1914.sroa.0.76.us.us, %"for convolved.s1.r19$y980.us.us" ]
  %8799 = mul nsw i64 %indvars.iv4692, %8001
  %8800 = mul nsw i64 %indvars.iv4692, %8002
  %8801 = insertelement <4 x i64> poison, i64 %8800, i32 0
  %8802 = shufflevector <4 x i64> %8801, <4 x i64> undef, <4 x i32> zeroinitializer
  %8803 = add nsw <4 x i64> %8802, %8780
  %8804 = mul nsw <4 x i64> %8803, %8046
  %8805 = add nsw i64 %8799, %8792
  %8806 = trunc i64 %8799 to i32
  %t3978985.us.us.us = add i32 %8806, %8797
  %t3982997.us.us.us = add i32 %t3978985.us.us.us, %t3975978
  %8807 = sext i32 %t3982997.us.us.us to i64
  br label %"for convolved.s1.r19$z.r115998.us.us.us"

"for convolved.s1.r19$z.r115998.us.us.us":        ; preds = %"for convolved.s1.r19$z.r115998.us.us.us", %"for convolved.s1.r19$x986.us.us.us"
  %indvars.iv4690 = phi i64 [ %indvars.iv.next4691, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ 0, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.272.27.us.us.us = phi <8 x i32> [ %8906, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.272.25.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.242.27.us.us.us = phi <8 x i32> [ %8902, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.242.25.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.212.27.us.us.us = phi <8 x i32> [ %8887, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.212.25.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.182.27.us.us.us = phi <8 x i32> [ %8883, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.182.25.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.142.33.us.us.us = phi <8 x i32> [ %8868, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.142.31.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.102.33.us.us.us = phi <8 x i32> [ %8864, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.102.31.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.62.33.us.us.us = phi <8 x i32> [ %8849, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.62.31.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %convolved1914.sroa.0.79.us.us.us = phi <8 x i32> [ %8837, %"for convolved.s1.r19$z.r115998.us.us.us" ], [ %convolved1914.sroa.0.77.us.us.us, %"for convolved.s1.r19$x986.us.us.us" ]
  %8808 = shl nuw nsw i64 %indvars.iv4690, 2
  %8809 = insertelement <4 x i64> poison, i64 %8808, i32 0
  %8810 = add <4 x i64> %8809, %8798
  %8811 = shufflevector <4 x i64> %8810, <4 x i64> poison, <4 x i32> zeroinitializer
  %8812 = add <4 x i64> %8811, %8804
  %8813 = extractelement <4 x i64> %8812, i32 0
  %8814 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8813
  %8815 = bitcast i16* %8814 to <1 x i32>*
  %8816 = load <1 x i32>, <1 x i32>* %8815, align 8, !tbaa !399
  %8817 = shufflevector <1 x i32> %8816, <1 x i32> undef, <8 x i32> zeroinitializer
  %8818 = bitcast <8 x i32> %8817 to <16 x i16>
  %8819 = shl nuw nsw i64 %indvars.iv4690, 4
  %8820 = add nsw i64 %8819, %8791
  %8821 = shl nsw i64 %8820, 1
  %8822 = add nsw i64 %8821, %8805
  %8823 = getelementptr inbounds i16, i16* %7956, i64 %8822
  %8824 = bitcast i16* %8823 to <16 x i16>*
  %8825 = load <16 x i16>, <16 x i16>* %8824, align 32, !tbaa !412
  %8826 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8818, <16 x i16> %8825)
  %8827 = add <8 x i32> %8826, %convolved1914.sroa.0.79.us.us.us
  %8828 = getelementptr inbounds i16, i16* %8814, i64 2
  %8829 = bitcast i16* %8828 to <1 x i32>*
  %8830 = load <1 x i32>, <1 x i32>* %8829, align 4, !tbaa !399
  %8831 = shufflevector <1 x i32> %8830, <1 x i32> undef, <8 x i32> zeroinitializer
  %8832 = bitcast <8 x i32> %8831 to <16 x i16>
  %8833 = getelementptr inbounds i16, i16* %8823, i64 16
  %8834 = bitcast i16* %8833 to <16 x i16>*
  %8835 = load <16 x i16>, <16 x i16>* %8834, align 32, !tbaa !412
  %8836 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8832, <16 x i16> %8835)
  %8837 = add <8 x i32> %8827, %8836
  %8838 = shl nuw nsw i64 %indvars.iv4690, 5
  %8839 = add nsw i64 %8838, %8807
  %8840 = getelementptr inbounds i16, i16* %7956, i64 %8839
  %8841 = bitcast i16* %8840 to <16 x i16>*
  %8842 = load <16 x i16>, <16 x i16>* %8841, align 32, !tbaa !412
  %8843 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8818, <16 x i16> %8842)
  %8844 = add <8 x i32> %8843, %convolved1914.sroa.62.33.us.us.us
  %8845 = getelementptr inbounds i16, i16* %8840, i64 16
  %8846 = bitcast i16* %8845 to <16 x i16>*
  %8847 = load <16 x i16>, <16 x i16>* %8846, align 32, !tbaa !412
  %8848 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8832, <16 x i16> %8847)
  %8849 = add <8 x i32> %8844, %8848
  %8850 = extractelement <4 x i64> %8812, i32 1
  %8851 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8850
  %8852 = bitcast i16* %8851 to <1 x i32>*
  %8853 = load <1 x i32>, <1 x i32>* %8852, align 8, !tbaa !399
  %8854 = shufflevector <1 x i32> %8853, <1 x i32> undef, <8 x i32> zeroinitializer
  %8855 = bitcast <8 x i32> %8854 to <16 x i16>
  %8856 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8855, <16 x i16> %8825)
  %8857 = add <8 x i32> %8856, %convolved1914.sroa.102.33.us.us.us
  %8858 = getelementptr inbounds i16, i16* %8851, i64 2
  %8859 = bitcast i16* %8858 to <1 x i32>*
  %8860 = load <1 x i32>, <1 x i32>* %8859, align 4, !tbaa !399
  %8861 = shufflevector <1 x i32> %8860, <1 x i32> undef, <8 x i32> zeroinitializer
  %8862 = bitcast <8 x i32> %8861 to <16 x i16>
  %8863 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8862, <16 x i16> %8835)
  %8864 = add <8 x i32> %8857, %8863
  %8865 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8855, <16 x i16> %8842)
  %8866 = add <8 x i32> %8865, %convolved1914.sroa.142.33.us.us.us
  %8867 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8862, <16 x i16> %8847)
  %8868 = add <8 x i32> %8866, %8867
  %8869 = extractelement <4 x i64> %8812, i32 2
  %8870 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8869
  %8871 = bitcast i16* %8870 to <1 x i32>*
  %8872 = load <1 x i32>, <1 x i32>* %8871, align 8, !tbaa !399
  %8873 = shufflevector <1 x i32> %8872, <1 x i32> undef, <8 x i32> zeroinitializer
  %8874 = bitcast <8 x i32> %8873 to <16 x i16>
  %8875 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8874, <16 x i16> %8825)
  %8876 = add <8 x i32> %8875, %convolved1914.sroa.182.27.us.us.us
  %8877 = getelementptr inbounds i16, i16* %8870, i64 2
  %8878 = bitcast i16* %8877 to <1 x i32>*
  %8879 = load <1 x i32>, <1 x i32>* %8878, align 4, !tbaa !399
  %8880 = shufflevector <1 x i32> %8879, <1 x i32> undef, <8 x i32> zeroinitializer
  %8881 = bitcast <8 x i32> %8880 to <16 x i16>
  %8882 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8881, <16 x i16> %8835)
  %8883 = add <8 x i32> %8876, %8882
  %8884 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8874, <16 x i16> %8842)
  %8885 = add <8 x i32> %8884, %convolved1914.sroa.212.27.us.us.us
  %8886 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8881, <16 x i16> %8847)
  %8887 = add <8 x i32> %8885, %8886
  %8888 = extractelement <4 x i64> %8812, i32 3
  %8889 = getelementptr inbounds i16, i16* %input_wrapper819, i64 %8888
  %8890 = bitcast i16* %8889 to <1 x i32>*
  %8891 = load <1 x i32>, <1 x i32>* %8890, align 8, !tbaa !399
  %8892 = shufflevector <1 x i32> %8891, <1 x i32> undef, <8 x i32> zeroinitializer
  %8893 = bitcast <8 x i32> %8892 to <16 x i16>
  %8894 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8893, <16 x i16> %8825)
  %8895 = add <8 x i32> %8894, %convolved1914.sroa.242.27.us.us.us
  %8896 = getelementptr inbounds i16, i16* %8889, i64 2
  %8897 = bitcast i16* %8896 to <1 x i32>*
  %8898 = load <1 x i32>, <1 x i32>* %8897, align 4, !tbaa !399
  %8899 = shufflevector <1 x i32> %8898, <1 x i32> undef, <8 x i32> zeroinitializer
  %8900 = bitcast <8 x i32> %8899 to <16 x i16>
  %8901 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8900, <16 x i16> %8835)
  %8902 = add <8 x i32> %8895, %8901
  %8903 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8893, <16 x i16> %8842)
  %8904 = add <8 x i32> %8903, %convolved1914.sroa.272.27.us.us.us
  %8905 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %8900, <16 x i16> %8847)
  %8906 = add <8 x i32> %8904, %8905
  %indvars.iv.next4691 = add nuw nsw i64 %indvars.iv4690, 1
  %.not2017.us.us.us = icmp eq i64 %indvars.iv.next4691, %7996
  br i1 %.not2017.us.us.us, label %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us", label %"for convolved.s1.r19$z.r115998.us.us.us"

"end for convolved.s1.r19$z.r115999.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r115998.us.us.us"
  %indvars.iv.next4693 = add nuw nsw i64 %indvars.iv4692, 1
  %.not2016.us.us.us = icmp eq i64 %indvars.iv.next4693, %8003
  br i1 %.not2016.us.us.us, label %"end for convolved.s1.r19$x987.loopexit.split.us.us.us", label %"for convolved.s1.r19$x986.us.us.us"

"end for convolved.s1.r19$x987.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r115999.loopexit.us.us.us"
  %indvars.iv.next4702 = add nuw nsw i64 %indvars.iv4701, 1
  %.not2015.us.us = icmp eq i64 %indvars.iv.next4702, %8005
  br i1 %.not2015.us.us, label %"consume convolved1001", label %"for convolved.s1.r19$y980.us.us"

"end for output.s0.c.co975":                      ; preds = %"consume convolved1001", %"for output.s0.x.xo958"
  %8907 = add nuw nsw i32 %output.s0.x.xo960, 1
  %.not2013 = icmp eq i32 %8907, %t3855796
  br i1 %.not2013, label %"end for output.s0.x.xo959", label %"for output.s0.x.xo958"

"consume convolved1001":                          ; preds = %"end for convolved.s1.r19$x987.loopexit.split.us.us.us", %"for convolved.s1.r19$y980.preheader.split.us", %"for convolved.s1.r19$y980.preheader", %"for output.s0.c.co974"
  %convolved1914.sroa.272.29 = phi <8 x i32> [ %8788, %"for output.s0.c.co974" ], [ %8788, %"for convolved.s1.r19$y980.preheader" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8906, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.242.29 = phi <8 x i32> [ %8785, %"for output.s0.c.co974" ], [ %8785, %"for convolved.s1.r19$y980.preheader" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8902, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.212.29 = phi <8 x i32> [ %8788, %"for output.s0.c.co974" ], [ %8788, %"for convolved.s1.r19$y980.preheader" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8887, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.182.29 = phi <8 x i32> [ %8785, %"for output.s0.c.co974" ], [ %8785, %"for convolved.s1.r19$y980.preheader" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8883, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.142.35 = phi <8 x i32> [ %8788, %"for output.s0.c.co974" ], [ %8788, %"for convolved.s1.r19$y980.preheader" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8868, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.35 = phi <8 x i32> [ %8785, %"for output.s0.c.co974" ], [ %8785, %"for convolved.s1.r19$y980.preheader" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8864, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.35 = phi <8 x i32> [ %8788, %"for output.s0.c.co974" ], [ %8788, %"for convolved.s1.r19$y980.preheader" ], [ %8788, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8849, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.81 = phi <8 x i32> [ %8785, %"for output.s0.c.co974" ], [ %8785, %"for convolved.s1.r19$y980.preheader" ], [ %8785, %"for convolved.s1.r19$y980.preheader.split.us" ], [ %8837, %"end for convolved.s1.r19$x987.loopexit.split.us.us.us" ]
  %8908 = shufflevector <8 x i32> %convolved1914.sroa.0.81, <8 x i32> %convolved1914.sroa.62.35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8909 = sext <16 x i32> %8908 to <16 x i64>
  %8910 = mul nsw <16 x i64> %8909, %7959
  %8911 = ashr <16 x i64> %8910, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %8912 = add nsw <16 x i64> %8911, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a309 = ashr <16 x i64> %8912, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %8913 = shufflevector <16 x i64> %a309, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8914 = icmp slt <4 x i64> %8913, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8915 = shufflevector <16 x i64> %a309, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8916 = icmp slt <4 x i64> %8915, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8917 = shufflevector <16 x i64> %a309, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8918 = icmp slt <4 x i64> %8917, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8919 = shufflevector <16 x i64> %a309, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8920 = icmp slt <4 x i64> %8919, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8921 = select <4 x i1> %8914, <4 x i64> %8913, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8922 = select <4 x i1> %8916, <4 x i64> %8915, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8923 = select <4 x i1> %8918, <4 x i64> %8917, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8924 = select <4 x i1> %8920, <4 x i64> %8919, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8925 = icmp sgt <4 x i64> %8921, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8926 = icmp sgt <4 x i64> %8922, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8927 = icmp sgt <4 x i64> %8923, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8928 = icmp sgt <4 x i64> %8924, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8929 = select <4 x i1> %8925, <4 x i64> %8921, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8930 = select <4 x i1> %8926, <4 x i64> %8922, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8931 = select <4 x i1> %8927, <4 x i64> %8923, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8932 = select <4 x i1> %8928, <4 x i64> %8924, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8933 = shufflevector <4 x i64> %8929, <4 x i64> %8930, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8934 = shufflevector <4 x i64> %8931, <4 x i64> %8932, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8935 = shufflevector <8 x i64> %8933, <8 x i64> %8934, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4597 = trunc <16 x i64> %8935 to <16 x i32>
  %8936 = ashr <16 x i32> %t4597, %t4598
  %8937 = shl <16 x i32> %t4597, %t4598
  %8938 = shufflevector <16 x i32> %8936, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8939 = shufflevector <16 x i32> %8937, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8940 = select <8 x i1> %7966, <8 x i32> %8938, <8 x i32> %8939
  %8941 = shufflevector <16 x i32> %8936, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8942 = shufflevector <16 x i32> %8937, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8943 = select <8 x i1> %7967, <8 x i32> %8941, <8 x i32> %8942
  %8944 = shufflevector <8 x i32> %8940, <8 x i32> %8943, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8945 = ashr <16 x i32> %t4597, %t4600
  %8946 = shl <16 x i32> %t4597, %t4600
  %8947 = shufflevector <16 x i32> %8945, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8948 = shufflevector <16 x i32> %8946, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8949 = select <8 x i1> %7977, <8 x i32> %8947, <8 x i32> %8948
  %8950 = shufflevector <16 x i32> %8945, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8951 = shufflevector <16 x i32> %8946, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8952 = select <8 x i1> %7978, <8 x i32> %8950, <8 x i32> %8951
  %8953 = shufflevector <8 x i32> %8949, <8 x i32> %8952, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8954 = and <16 x i32> %8953, %7969
  %8955 = add nsw <16 x i32> %8954, %8944
  %8956 = shufflevector <16 x i32> %8955, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %8957 = shufflevector <16 x i32> %8955, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %8958 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %8956, <8 x i32> %8957) #11
  %8959 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %8958, <16 x i16> %7981)
  %8960 = shufflevector <16 x i16> %8959, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8961 = shufflevector <16 x i16> %8959, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8962 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %8960, <8 x i16> %8961) #11
  %8963 = icmp ugt <16 x i8> %b309, %8962
  %a306 = select <16 x i1> %8963, <16 x i8> %8962, <16 x i8> %b309
  %8964 = icmp ugt <16 x i8> %a306, %b308
  %8965 = select <16 x i1> %8964, <16 x i8> %a306, <16 x i8> %b308
  %8966 = add nsw i64 %8782, %8776
  %8967 = getelementptr inbounds i8, i8* %182, i64 %8966
  %8968 = bitcast i8* %8967 to <16 x i8>*
  store <16 x i8> %8965, <16 x i8>* %8968, align 1, !tbaa !414
  %8969 = shufflevector <8 x i32> %convolved1914.sroa.102.35, <8 x i32> %convolved1914.sroa.142.35, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8970 = sext <16 x i32> %8969 to <16 x i64>
  %8971 = mul nsw <16 x i64> %8970, %7959
  %8972 = ashr <16 x i64> %8971, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %8973 = add nsw <16 x i64> %8972, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a315 = ashr <16 x i64> %8973, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %8974 = shufflevector <16 x i64> %a315, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %8975 = icmp slt <4 x i64> %8974, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8976 = shufflevector <16 x i64> %a315, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %8977 = icmp slt <4 x i64> %8976, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8978 = shufflevector <16 x i64> %a315, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %8979 = icmp slt <4 x i64> %8978, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8980 = shufflevector <16 x i64> %a315, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %8981 = icmp slt <4 x i64> %8980, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8982 = select <4 x i1> %8975, <4 x i64> %8974, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8983 = select <4 x i1> %8977, <4 x i64> %8976, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8984 = select <4 x i1> %8979, <4 x i64> %8978, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8985 = select <4 x i1> %8981, <4 x i64> %8980, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %8986 = icmp sgt <4 x i64> %8982, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8987 = icmp sgt <4 x i64> %8983, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8988 = icmp sgt <4 x i64> %8984, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8989 = icmp sgt <4 x i64> %8985, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8990 = select <4 x i1> %8986, <4 x i64> %8982, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8991 = select <4 x i1> %8987, <4 x i64> %8983, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8992 = select <4 x i1> %8988, <4 x i64> %8984, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8993 = select <4 x i1> %8989, <4 x i64> %8985, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %8994 = shufflevector <4 x i64> %8990, <4 x i64> %8991, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8995 = shufflevector <4 x i64> %8992, <4 x i64> %8993, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %8996 = shufflevector <8 x i64> %8994, <8 x i64> %8995, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4601 = trunc <16 x i64> %8996 to <16 x i32>
  %8997 = ashr <16 x i32> %t4601, %t4598
  %8998 = shl <16 x i32> %t4601, %t4598
  %8999 = shufflevector <16 x i32> %8997, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9000 = shufflevector <16 x i32> %8998, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9001 = select <8 x i1> %7966, <8 x i32> %8999, <8 x i32> %9000
  %9002 = shufflevector <16 x i32> %8997, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9003 = shufflevector <16 x i32> %8998, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9004 = select <8 x i1> %7967, <8 x i32> %9002, <8 x i32> %9003
  %9005 = shufflevector <8 x i32> %9001, <8 x i32> %9004, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9006 = ashr <16 x i32> %t4601, %t4600
  %9007 = shl <16 x i32> %t4601, %t4600
  %9008 = shufflevector <16 x i32> %9006, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9009 = shufflevector <16 x i32> %9007, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9010 = select <8 x i1> %7977, <8 x i32> %9008, <8 x i32> %9009
  %9011 = shufflevector <16 x i32> %9006, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9012 = shufflevector <16 x i32> %9007, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9013 = select <8 x i1> %7978, <8 x i32> %9011, <8 x i32> %9012
  %9014 = shufflevector <8 x i32> %9010, <8 x i32> %9013, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9015 = and <16 x i32> %9014, %7969
  %9016 = add nsw <16 x i32> %9015, %9005
  %9017 = shufflevector <16 x i32> %9016, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9018 = shufflevector <16 x i32> %9016, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9019 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %9017, <8 x i32> %9018) #11
  %9020 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %9019, <16 x i16> %7981)
  %9021 = shufflevector <16 x i16> %9020, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9022 = shufflevector <16 x i16> %9020, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9023 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %9021, <8 x i16> %9022) #11
  %9024 = icmp ugt <16 x i8> %b309, %9023
  %a312 = select <16 x i1> %9024, <16 x i8> %9023, <16 x i8> %b309
  %9025 = icmp ugt <16 x i8> %a312, %b308
  %9026 = select <16 x i1> %9025, <16 x i8> %a312, <16 x i8> %b308
  %9027 = add nsw i64 %8782, %8777
  %9028 = getelementptr inbounds i8, i8* %182, i64 %9027
  %9029 = bitcast i8* %9028 to <16 x i8>*
  store <16 x i8> %9026, <16 x i8>* %9029, align 1, !tbaa !414
  %9030 = shufflevector <8 x i32> %convolved1914.sroa.182.29, <8 x i32> %convolved1914.sroa.212.29, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9031 = sext <16 x i32> %9030 to <16 x i64>
  %9032 = mul nsw <16 x i64> %9031, %7959
  %9033 = ashr <16 x i64> %9032, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %9034 = add nsw <16 x i64> %9033, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a321 = ashr <16 x i64> %9034, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %9035 = shufflevector <16 x i64> %a321, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9036 = icmp slt <4 x i64> %9035, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9037 = shufflevector <16 x i64> %a321, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9038 = icmp slt <4 x i64> %9037, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9039 = shufflevector <16 x i64> %a321, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9040 = icmp slt <4 x i64> %9039, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9041 = shufflevector <16 x i64> %a321, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9042 = icmp slt <4 x i64> %9041, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9043 = select <4 x i1> %9036, <4 x i64> %9035, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9044 = select <4 x i1> %9038, <4 x i64> %9037, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9045 = select <4 x i1> %9040, <4 x i64> %9039, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9046 = select <4 x i1> %9042, <4 x i64> %9041, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9047 = icmp sgt <4 x i64> %9043, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9048 = icmp sgt <4 x i64> %9044, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9049 = icmp sgt <4 x i64> %9045, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9050 = icmp sgt <4 x i64> %9046, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9051 = select <4 x i1> %9047, <4 x i64> %9043, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9052 = select <4 x i1> %9048, <4 x i64> %9044, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9053 = select <4 x i1> %9049, <4 x i64> %9045, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9054 = select <4 x i1> %9050, <4 x i64> %9046, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9055 = shufflevector <4 x i64> %9051, <4 x i64> %9052, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9056 = shufflevector <4 x i64> %9053, <4 x i64> %9054, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9057 = shufflevector <8 x i64> %9055, <8 x i64> %9056, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4605 = trunc <16 x i64> %9057 to <16 x i32>
  %9058 = ashr <16 x i32> %t4605, %t4598
  %9059 = shl <16 x i32> %t4605, %t4598
  %9060 = shufflevector <16 x i32> %9058, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9061 = shufflevector <16 x i32> %9059, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9062 = select <8 x i1> %7966, <8 x i32> %9060, <8 x i32> %9061
  %9063 = shufflevector <16 x i32> %9058, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9064 = shufflevector <16 x i32> %9059, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9065 = select <8 x i1> %7967, <8 x i32> %9063, <8 x i32> %9064
  %9066 = shufflevector <8 x i32> %9062, <8 x i32> %9065, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9067 = ashr <16 x i32> %t4605, %t4600
  %9068 = shl <16 x i32> %t4605, %t4600
  %9069 = shufflevector <16 x i32> %9067, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9070 = shufflevector <16 x i32> %9068, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9071 = select <8 x i1> %7977, <8 x i32> %9069, <8 x i32> %9070
  %9072 = shufflevector <16 x i32> %9067, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9073 = shufflevector <16 x i32> %9068, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9074 = select <8 x i1> %7978, <8 x i32> %9072, <8 x i32> %9073
  %9075 = shufflevector <8 x i32> %9071, <8 x i32> %9074, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9076 = and <16 x i32> %9075, %7969
  %9077 = add nsw <16 x i32> %9076, %9066
  %9078 = shufflevector <16 x i32> %9077, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9079 = shufflevector <16 x i32> %9077, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9080 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %9078, <8 x i32> %9079) #11
  %9081 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %9080, <16 x i16> %7981)
  %9082 = shufflevector <16 x i16> %9081, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9083 = shufflevector <16 x i16> %9081, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9084 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %9082, <8 x i16> %9083) #11
  %9085 = icmp ugt <16 x i8> %b309, %9084
  %a318 = select <16 x i1> %9085, <16 x i8> %9084, <16 x i8> %b309
  %9086 = icmp ugt <16 x i8> %a318, %b308
  %9087 = select <16 x i1> %9086, <16 x i8> %a318, <16 x i8> %b308
  %9088 = add nsw i64 %8782, %8778
  %9089 = getelementptr inbounds i8, i8* %182, i64 %9088
  %9090 = bitcast i8* %9089 to <16 x i8>*
  store <16 x i8> %9087, <16 x i8>* %9090, align 1, !tbaa !414
  %9091 = shufflevector <8 x i32> %convolved1914.sroa.242.29, <8 x i32> %convolved1914.sroa.272.29, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9092 = sext <16 x i32> %9091 to <16 x i64>
  %9093 = mul nsw <16 x i64> %9092, %7959
  %9094 = ashr <16 x i64> %9093, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %9095 = add nsw <16 x i64> %9094, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a327 = ashr <16 x i64> %9095, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %9096 = shufflevector <16 x i64> %a327, <16 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %9097 = icmp slt <4 x i64> %9096, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9098 = shufflevector <16 x i64> %a327, <16 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %9099 = icmp slt <4 x i64> %9098, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9100 = shufflevector <16 x i64> %a327, <16 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %9101 = icmp slt <4 x i64> %9100, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9102 = shufflevector <16 x i64> %a327, <16 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %9103 = icmp slt <4 x i64> %9102, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9104 = select <4 x i1> %9097, <4 x i64> %9096, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9105 = select <4 x i1> %9099, <4 x i64> %9098, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9106 = select <4 x i1> %9101, <4 x i64> %9100, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9107 = select <4 x i1> %9103, <4 x i64> %9102, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %9108 = icmp sgt <4 x i64> %9104, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9109 = icmp sgt <4 x i64> %9105, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9110 = icmp sgt <4 x i64> %9106, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9111 = icmp sgt <4 x i64> %9107, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9112 = select <4 x i1> %9108, <4 x i64> %9104, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9113 = select <4 x i1> %9109, <4 x i64> %9105, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9114 = select <4 x i1> %9110, <4 x i64> %9106, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9115 = select <4 x i1> %9111, <4 x i64> %9107, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %9116 = shufflevector <4 x i64> %9112, <4 x i64> %9113, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9117 = shufflevector <4 x i64> %9114, <4 x i64> %9115, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9118 = shufflevector <8 x i64> %9116, <8 x i64> %9117, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %t4609 = trunc <16 x i64> %9118 to <16 x i32>
  %9119 = ashr <16 x i32> %t4609, %t4598
  %9120 = shl <16 x i32> %t4609, %t4598
  %9121 = shufflevector <16 x i32> %9119, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9122 = shufflevector <16 x i32> %9120, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9123 = select <8 x i1> %7966, <8 x i32> %9121, <8 x i32> %9122
  %9124 = shufflevector <16 x i32> %9119, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9125 = shufflevector <16 x i32> %9120, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9126 = select <8 x i1> %7967, <8 x i32> %9124, <8 x i32> %9125
  %9127 = shufflevector <8 x i32> %9123, <8 x i32> %9126, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9128 = ashr <16 x i32> %t4609, %t4600
  %9129 = shl <16 x i32> %t4609, %t4600
  %9130 = shufflevector <16 x i32> %9128, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9131 = shufflevector <16 x i32> %9129, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9132 = select <8 x i1> %7977, <8 x i32> %9130, <8 x i32> %9131
  %9133 = shufflevector <16 x i32> %9128, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9134 = shufflevector <16 x i32> %9129, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9135 = select <8 x i1> %7978, <8 x i32> %9133, <8 x i32> %9134
  %9136 = shufflevector <8 x i32> %9132, <8 x i32> %9135, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9137 = and <16 x i32> %9136, %7969
  %9138 = add nsw <16 x i32> %9137, %9127
  %9139 = shufflevector <16 x i32> %9138, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %9140 = shufflevector <16 x i32> %9138, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %9141 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %9139, <8 x i32> %9140) #11
  %9142 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %9141, <16 x i16> %7981)
  %9143 = shufflevector <16 x i16> %9142, <16 x i16> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9144 = shufflevector <16 x i16> %9142, <16 x i16> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9145 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %9143, <8 x i16> %9144) #11
  %9146 = icmp ugt <16 x i8> %b309, %9145
  %a324 = select <16 x i1> %9146, <16 x i8> %9145, <16 x i8> %b309
  %9147 = icmp ugt <16 x i8> %a324, %b308
  %9148 = select <16 x i1> %9147, <16 x i8> %a324, <16 x i8> %b308
  %9149 = add nsw i64 %8782, %8779
  %9150 = getelementptr inbounds i8, i8* %182, i64 %9149
  %9151 = bitcast i8* %9150 to <16 x i8>*
  store <16 x i8> %9148, <16 x i8>* %9151, align 1, !tbaa !414
  %indvars.iv.next4705 = add nuw nsw i64 %indvars.iv4704, 1
  %.not2014 = icmp eq i64 %indvars.iv.next4705, %8007
  br i1 %.not2014, label %"end for output.s0.c.co975", label %"for output.s0.c.co974"

then_bb1002:                                      ; preds = %next_bb776
  %t40201009 = add nsw i32 %166, 1
  %a330 = ashr i32 %t40201009, 2
  %9152 = icmp sgt i32 %166, 2
  %t40211010 = select i1 %9152, i32 %a330, i32 0
  %a331 = ashr i32 %t40201009, 3
  %9153 = icmp sgt i32 %166, 6
  %t40221011 = select i1 %9153, i32 %a331, i32 0
  %9154 = add nsw i32 %170, -1
  %t40231012 = mul nsw i32 %9154, %dilation_y
  %a337 = ashr i32 %t40201009, 1
  %9155 = icmp eq i32 %174, 4
  %9156 = icmp eq i32 %176, 4
  %t40251013 = and i1 %9155, %9156
  %t40261014 = add nsw i32 %166, -1
  %t40271015 = ashr i32 %t40261014, 1
  %9157 = shl nsw i32 %t40271015, 2
  %b334 = or i32 %9157, 3
  %t40291016 = icmp slt i32 %dilation_y, 0
  %t39901017 = select i1 %t40291016, i32 %t40231012, i32 0
  %9158 = icmp slt i32 %174, 16
  %9159 = icmp slt i32 %174, 8
  %9160 = icmp slt i32 %174, 4
  %9161 = icmp slt i32 %a337, 1
  %9162 = select i1 %9161, i32 %a337, i32 1
  %9163 = add nsw i32 %9162, %t40271015
  %9164 = select i1 %9160, i32 %a337, i32 %9163
  %9165 = icmp slt i32 %a337, 2
  %9166 = select i1 %9165, i32 %a337, i32 2
  %9167 = and i32 %t40271015, -2
  %9168 = add nsw i32 %9166, %9167
  %9169 = select i1 %9159, i32 %9164, i32 %9168
  %9170 = icmp slt i32 %a337, 4
  %9171 = select i1 %9170, i32 %a337, i32 4
  %9172 = and i32 %t40271015, -4
  %9173 = add nsw i32 %9171, %9172
  %a333 = select i1 %9158, i32 %9169, i32 %9173
  %9174 = icmp sgt i32 %a337, %a333
  %9175 = select i1 %9174, i32 %a333, i32 %a337
  %9176 = shl nsw i32 %9175, 2
  %9177 = add nsw i32 %9176, -1
  %a332 = select i1 %t40251013, i32 %b334, i32 %9177
  %9178 = icmp sgt i32 %a332, %b334
  %a349 = select i1 %9178, i32 %a332, i32 %b334
  %9179 = icmp sgt i32 %166, 0
  %9180 = add nuw nsw i32 %185, 7
  %t40121023 = ashr i32 %9180, 3
  %9181 = add nsw i32 %166, 7
  %9182 = ashr i32 %9181, 3
  %t40051025 = sub nsw i32 %9182, %t40221011
  %9183 = add nsw i32 %166, 3
  %9184 = ashr i32 %9183, 2
  %t40091026 = sub nsw i32 %9184, %t40211010
  %9185 = select i1 %t3704553, i32 %t3705554, i32 0
  %9186 = select i1 %t3706555, i32 %185, i32 1
  %9187 = add i32 %184, -1
  %9188 = add i32 %9187, %9186
  %9189 = mul nsw i32 %9188, %stride_x
  %b344 = add nsw i32 %9189, %9185
  %9190 = icmp sgt i32 %180, 0
  br i1 %9190, label %"for output.s0.b.rebased1030.preheader", label %if.then.i2454, !prof !387

"for output.s0.b.rebased1030.preheader":          ; preds = %then_bb1002
  %t40131024 = ashr i32 %163, 3
  %t40111022 = select i1 %9179, i32 %a337, i32 0
  %t39891018 = select i1 %t40291016, i32 0, i32 %t40231012
  %9191 = mul nsw i32 %176, %175
  %9192 = add nsw i32 %185, -1
  %9193 = select i1 %t3706555, i32 0, i32 %9192
  %9194 = add nsw i32 %9193, %184
  %9195 = mul nsw i32 %9194, %stride_x
  %9196 = select i1 %t3704553, i32 0, i32 %t3705554
  %b342 = add nsw i32 %9195, %9196
  %a341 = sub i32 %b342, %b344
  %a343 = ashr i32 %a341, 3
  %9197 = add nsw i32 %a341, 1
  %a338 = ashr i32 %9197, 3
  %9198 = icmp sgt i32 %a341, 6
  %t40481033 = select i1 %9198, i32 %a338, i32 0
  %.neg2782 = mul i32 %189, %187
  %.neg2783 = mul i32 %186, %184
  %.neg2784 = mul i32 %190, %179
  %9199 = add i32 %t3702551, %9191
  %9200 = add i32 %9199, %t3703552
  %.neg2788 = mul i32 %175, -4
  %9201 = icmp sgt i32 %a343, -1
  %9202 = select i1 %9201, i32 %a343, i32 -1
  %9203 = sub nsw i32 %9202, %t40481033
  %9204 = icmp sgt i32 %188, 0
  %9205 = icmp sgt i32 %a349, -1
  %t4613 = select i1 %9205, i32 %a349, i32 -1
  %9206 = icmp sgt i32 %a341, -1
  %9207 = select i1 %9206, i32 %9197, i32 0
  %t4614 = zext i32 %9207 to i64
  %9208 = add nsw i32 %t4613, 1
  %9209 = zext i32 %9208 to i64
  %t4615 = shl nuw nsw i64 %9209, 1
  %t4617 = mul i64 %t4615, %t4614
  %9210 = add nsw i32 %a349, 1
  %t40861094 = shl nsw i32 %a337, 2
  %9211 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %9212 = shufflevector <16 x i8> %9211, <16 x i8> undef, <16 x i32> zeroinitializer
  %9213 = zext <16 x i8> %9212 to <16 x i16>
  %9214 = icmp sgt i32 %t40051025, 0
  %9215 = insertelement <16 x i32> undef, i32 %t40861094, i32 0
  %9216 = shufflevector <16 x i32> %9215, <16 x i32> undef, <8 x i32> zeroinitializer
  %9217 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %9218 = shufflevector <8 x i8> %9217, <8 x i8> undef, <8 x i32> zeroinitializer
  %9219 = zext <8 x i8> %9218 to <8 x i16>
  %9220 = icmp sgt i32 %t40091026, 0
  %9221 = insertelement <8 x i32> undef, i32 %t40861094, i32 0
  %9222 = shufflevector <8 x i32> %9221, <8 x i32> undef, <8 x i32> zeroinitializer
  %9223 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %9224 = shufflevector <4 x i8> %9223, <4 x i8> undef, <4 x i32> zeroinitializer
  %9225 = zext <4 x i8> %9224 to <4 x i16>
  %9226 = zext i8 %input_zero to i16
  %t40521052 = mul nsw i32 %9197, %9210
  %.neg2789 = sub i32 %.neg2788, %t3702551
  %t40011029.neg = sub i32 %.neg2789, %t3703552
  %9227 = shl i32 %9210, 1
  %9228 = mul nsw i32 %a349, 7
  %9229 = mul nsw i32 %a349, 6
  %9230 = mul nsw i32 %a349, 5
  %9231 = shl nsw i32 %a349, 2
  %9232 = mul nsw i32 %a349, 3
  %9233 = shl nsw i32 %a349, 1
  %9234 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %9235 = shufflevector <32 x i8> %9234, <32 x i8> undef, <32 x i32> zeroinitializer
  %9236 = zext <32 x i8> %9235 to <32 x i16>
  %9237 = icmp sgt i32 %9203, -1
  %reass.add2798 = add i32 %.neg2782, %.neg2783
  %reass.add2799 = add i32 %reass.add2798, %.neg2784
  %b356 = add nsw i32 %185, -8
  %9238 = icmp sgt i32 %163, 7
  %9239 = icmp sgt i32 %170, 0
  %9240 = icmp sgt i32 %168, 0
  %9241 = bitcast i8* %164 to i16*
  %9242 = insertelement <8 x i32> undef, i32 %output_multiplier, i32 0
  %9243 = shufflevector <8 x i32> %9242, <8 x i32> undef, <8 x i32> zeroinitializer
  %9244 = sext <8 x i32> %9243 to <8 x i64>
  %9245 = insertelement <8 x i32> undef, i32 %output_shift, i32 0
  %9246 = shufflevector <8 x i32> %9245, <8 x i32> undef, <8 x i32> zeroinitializer
  %9247 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %9246, i1 false) #11
  %9248 = icmp sgt <8 x i32> %9246, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %9249 = icmp sgt i32 %output_shift, 0
  %9250 = select i1 %9249, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32> zeroinitializer
  %9251 = add nsw i32 %output_shift, -1
  %9252 = insertelement <8 x i32> undef, i32 %9251, i32 0
  %9253 = shufflevector <8 x i32> %9252, <8 x i32> undef, <8 x i32> zeroinitializer
  %9254 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %9253, i1 false) #11
  %9255 = icmp sgt <8 x i32> %9253, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %9256 = zext i8 %output_zero to i16
  %9257 = insertelement <8 x i16> undef, i16 %9256, i32 0
  %9258 = shufflevector <8 x i16> %9257, <8 x i16> undef, <8 x i32> zeroinitializer
  %9259 = insertelement <8 x i8> undef, i8 %output_max, i32 0
  %9260 = shufflevector <8 x i8> %9259, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9261 = insertelement <8 x i8> undef, i8 %output_min, i32 0
  %9262 = shufflevector <8 x i8> %9261, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %9263 = zext i32 %t40221011 to i64
  %9264 = sext i32 %b344 to i64
  %9265 = sext i32 %176 to i64
  %9266 = zext i32 %a341 to i64
  %9267 = sext i32 %t40221011 to i64
  %9268 = zext i32 %t40051025 to i64
  %9269 = sext i32 %178 to i64
  %9270 = zext i32 %t40211010 to i64
  %9271 = sext i32 %t40211010 to i64
  %9272 = zext i32 %t40091026 to i64
  %9273 = zext i32 %t40111022 to i64
  %9274 = zext i32 %t40861094 to i64
  %9275 = zext i32 %a337 to i64
  %9276 = zext i32 %t40481033 to i64
  %9277 = sext i32 %9210 to i64
  %9278 = zext i32 %9203 to i64
  %9279 = sext i32 %t40521052 to i64
  %9280 = sext i32 %dilation_x to i64
  %9281 = sext i32 %169 to i64
  %9282 = zext i32 %168 to i64
  %9283 = sext i32 %171 to i64
  %9284 = zext i32 %170 to i64
  %9285 = sext i32 %167 to i64
  %9286 = zext i32 %t40131024 to i64
  %9287 = sub i32 %t39891018, %t39901017
  %9288 = sext i32 %187 to i64
  %9289 = sext i32 %stride_y to i64
  %9290 = sext i32 %t39901017 to i64
  %9291 = zext i32 %179 to i64
  %zext4627 = zext i32 %180 to i64
  %zext4622 = zext i32 %188 to i64
  %a351 = add nsw i32 %9287, 1
  %9292 = icmp sgt i32 %9287, -1
  %9293 = select i1 %9292, i32 %a351, i32 0
  %t4616 = zext i32 %9293 to i64
  %9294 = mul i64 %t4617, %t4616
  %9295 = add i64 %9294, 6
  %9296 = zext i32 %9287 to i64
  %9297 = zext i32 %9287 to i64
  %9298 = zext i32 %9287 to i64
  %9299 = zext i32 %9287 to i64
  %9300 = zext i32 %9287 to i64
  %9301 = add nsw i64 %9263, -1
  %9302 = add nsw i64 %9263, -1
  %9303 = add nsw i64 %9270, -1
  %9304 = add nsw i64 %9270, -1
  %9305 = add nsw i64 %9273, -1
  %9306 = and i64 %9274, 4294967232
  %9307 = add nsw i64 %9306, -64
  %9308 = lshr exact i64 %9307, 6
  %9309 = add nuw nsw i64 %9308, 1
  %9310 = add nsw i64 %9275, -1
  %9311 = or i32 %9287, %a341
  %9312 = icmp slt i32 %9311, 0
  %xtraiter6040 = and i64 %9263, 3
  %9313 = icmp ult i64 %9301, 3
  %unroll_iter6043 = and i64 %9263, 4294967292
  %lcmp.mod6042.not = icmp eq i64 %xtraiter6040, 0
  %xtraiter6045 = and i64 %9263, 3
  %9314 = icmp ult i64 %9302, 3
  %unroll_iter6048 = and i64 %9263, 4294967292
  %lcmp.mod6047.not = icmp eq i64 %xtraiter6045, 0
  %xtraiter6050 = and i64 %9270, 3
  %9315 = icmp ult i64 %9303, 3
  %unroll_iter6053 = and i64 %9270, 4294967292
  %lcmp.mod6052.not = icmp eq i64 %xtraiter6050, 0
  %xtraiter6055 = and i64 %9270, 3
  %9316 = icmp ult i64 %9304, 3
  %unroll_iter6058 = and i64 %9270, 4294967292
  %lcmp.mod6057.not = icmp eq i64 %xtraiter6055, 0
  %brmerge5057.demorgan = and i1 %9206, %9179
  %xtraiter6060 = and i64 %9273, 3
  %9317 = icmp ult i64 %9305, 3
  %unroll_iter6063 = and i64 %9273, 4294967292
  %lcmp.mod6062.not = icmp eq i64 %xtraiter6060, 0
  %brmerge5060.demorgan = and i1 %9206, %9179
  %min.iters.check5526 = icmp ult i32 %t40861094, 8
  %min.iters.check5529 = icmp ult i32 %t40861094, 64
  %n.vec5533 = and i64 %9274, 4294967232
  %broadcast.splatinsert5541 = insertelement <16 x i16> poison, i16 %9226, i32 0
  %broadcast.splat5542 = shufflevector <16 x i16> %broadcast.splatinsert5541, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5543 = insertelement <16 x i16> poison, i16 %9226, i32 0
  %broadcast.splat5544 = shufflevector <16 x i16> %broadcast.splatinsert5543, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5545 = insertelement <16 x i16> poison, i16 %9226, i32 0
  %broadcast.splat5546 = shufflevector <16 x i16> %broadcast.splatinsert5545, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5547 = insertelement <16 x i16> poison, i16 %9226, i32 0
  %broadcast.splat5548 = shufflevector <16 x i16> %broadcast.splatinsert5547, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter6065 = and i64 %9309, 1
  %9318 = icmp eq i64 %9307, 0
  %unroll_iter6067 = and i64 %9309, 576460752303423486
  %lcmp.mod6066.not = icmp eq i64 %xtraiter6065, 0
  %cmp.n5536 = icmp eq i64 %n.vec5533, %9274
  %n.vec.remaining5554 = and i64 %9274, 56
  %min.epilog.iters.check5555 = icmp eq i64 %n.vec.remaining5554, 0
  %n.vec5558 = and i64 %9274, 4294967288
  %broadcast.splatinsert5564 = insertelement <8 x i16> poison, i16 %9226, i32 0
  %broadcast.splat5565 = shufflevector <8 x i16> %broadcast.splatinsert5564, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5562 = icmp eq i64 %n.vec5558, %9274
  %xtraiter6069 = and i64 %9275, 3
  %9319 = icmp ult i64 %9310, 3
  %unroll_iter6072 = and i64 %9275, 4294967292
  %lcmp.mod6071.not = icmp eq i64 %xtraiter6069, 0
  %9320 = insertelement <8 x i32> poison, i32 %stride_x, i32 0
  %9321 = shufflevector <8 x i32> %9320, <8 x i32> undef, <8 x i32> zeroinitializer
  %9322 = insertelement <8 x i32> poison, i32 %b344, i32 0
  %9323 = shufflevector <8 x i32> %9322, <8 x i32> undef, <8 x i32> zeroinitializer
  %9324 = insertelement <8 x i32> poison, i32 %186, i32 0
  %9325 = shufflevector <8 x i32> %9324, <8 x i32> undef, <8 x i32> zeroinitializer
  %9326 = insertelement <8 x i64> poison, i64 %9277, i32 0
  %9327 = shufflevector <8 x i64> %9326, <8 x i64> undef, <8 x i32> zeroinitializer
  br label %"for output.s0.b.rebased1030"

next_bb1003:                                      ; preds = %next_bb776
  br i1 %209, label %then_bb1241, label %next_bb1242

"for output.s0.b.rebased1030":                    ; preds = %"for output.s0.b.rebased1030.preheader", %"end for output.s0.y.rebased1043"
  %indvars.iv4623 = phi i64 [ 0, %"for output.s0.b.rebased1030.preheader" ], [ %indvars.iv.next4624, %"end for output.s0.y.rebased1043" ]
  %9328 = add nuw i64 %indvars.iv4623, %9291
  %9329 = trunc i64 %9328 to i32
  %9330 = mul i32 %181, %9329
  br i1 %9204, label %"for output.s0.y.rebased1042.preheader", label %"end for output.s0.y.rebased1043", !prof !387

"for output.s0.y.rebased1042.preheader":          ; preds = %"for output.s0.b.rebased1030"
  %t40431039 = sub i32 %9330, %9200
  %t40341040 = add i32 %t40011029.neg, %9330
  %9331 = sext i32 %t40431039 to i64
  %9332 = trunc i64 %9328 to i32
  %9333 = mul i32 %190, %9332
  br label %"for output.s0.y.rebased1042"

"for output.s0.y.rebased1042":                    ; preds = %"for output.s0.y.rebased1042.preheader", %call_destructor.exit2468
  %indvars.iv4618 = phi i64 [ 0, %"for output.s0.y.rebased1042.preheader" ], [ %indvars.iv.next4619, %call_destructor.exit2468 ]
  %9334 = add nsw i64 %indvars.iv4618, %9288
  %9335 = mul nsw i64 %9334, %9289
  %9336 = add nsw i64 %9335, %9290
  %9337 = call i8* @halide_malloc(i8* null, i64 %9295)
  %input_wrapper1046 = bitcast i8* %9337 to i16*
  br i1 %t40251013, label %then_bb1049, label %next_bb1050

"end for output.s0.y.rebased1043":                ; preds = %call_destructor.exit2468, %"for output.s0.b.rebased1030"
  %indvars.iv.next4624 = add nuw nsw i64 %indvars.iv4623, 1
  %9338 = icmp eq i64 %indvars.iv.next4624, %zext4627
  br i1 %9338, label %if.then.i2454, label %"for output.s0.b.rebased1030"

then_bb1049:                                      ; preds = %"for output.s0.y.rebased1042"
  br i1 %9292, label %"for input_wrapper.s0.y.rebased1054", label %"consume input_wrapper1180", !prof !387

next_bb1050:                                      ; preds = %"for output.s0.y.rebased1042"
  br i1 %9158, label %next_bb1092, label %then_bb1091

"for input_wrapper.s0.y.rebased1054":             ; preds = %then_bb1049, %"end for input_wrapper.s0.x.x.rebased1078"
  %indvars.iv4595 = phi i64 [ %indvars.iv.next4596, %"end for input_wrapper.s0.x.x.rebased1078" ], [ 0, %then_bb1049 ]
  %9339 = mul nsw i64 %indvars.iv4595, %9279
  %9340 = add nsw i64 %indvars.iv4595, %9336
  %9341 = trunc i64 %9340 to i32
  %9342 = mul i32 %178, %9341
  %t40611058 = add i32 %t40341040, %9342
  br i1 %9198, label %"for input_wrapper.s0.x.x1059.preheader", label %"end for input_wrapper.s0.x.x1060", !prof !387

"for input_wrapper.s0.x.x1059.preheader":         ; preds = %"for input_wrapper.s0.y.rebased1054"
  %9343 = sext i32 %t40611058 to i64
  br i1 %9179, label %"for input_wrapper.s0.x.x1059.us.preheader", label %"end for input_wrapper.s0.x.x.rebased1078", !prof !387

"for input_wrapper.s0.x.x1059.us.preheader":      ; preds = %"for input_wrapper.s0.x.x1059.preheader"
  %9344 = trunc i64 %9339 to i32
  br label %"for input_wrapper.s0.x.x1059.us"

"for input_wrapper.s0.x.x1059.us":                ; preds = %"for input_wrapper.s0.x.x1059.us.preheader", %"end for input_wrapper.s0.c.c1072.loopexit.us"
  %indvars.iv4585 = phi i64 [ 0, %"for input_wrapper.s0.x.x1059.us.preheader" ], [ %indvars.iv.next4586, %"end for input_wrapper.s0.c.c1072.loopexit.us" ]
  %9345 = trunc i64 %indvars.iv4585 to i32
  %t40681062.us = mul i32 %9227, %9345
  %9346 = shl nsw i64 %indvars.iv4585, 3
  %9347 = add nsw i64 %9346, %9264
  br label %"for input_wrapper.s0.c.c1071.us"

"for input_wrapper.s0.c.c1071.us":                ; preds = %"for input_wrapper.s0.x.x1059.us", %"for input_wrapper.s0.c.c1071.us"
  %indvars.iv4582 = phi i64 [ 0, %"for input_wrapper.s0.x.x1059.us" ], [ %indvars.iv.next4583, %"for input_wrapper.s0.c.c1071.us" ]
  %9348 = add nsw i64 %indvars.iv4582, %9347
  %9349 = shl nsw i64 %9348, 2
  %9350 = add nsw i64 %9349, %9343
  %9351 = getelementptr inbounds i8, i8* %172, i64 %9350
  %9352 = bitcast i8* %9351 to <32 x i8>*
  %9353 = load <32 x i8>, <32 x i8>* %9352, align 4, !tbaa !397
  %9354 = zext <32 x i8> %9353 to <32 x i16>
  %9355 = sub nsw <32 x i16> %9354, %9236
  %9356 = trunc i64 %indvars.iv4582 to i32
  %9357 = add i32 %t40681062.us, %9356
  %9358 = shl nsw i32 %9357, 2
  %9359 = add i32 %9358, %9344
  %9360 = insertelement <4 x i32> undef, i32 %9359, i32 0
  %9361 = shufflevector <4 x i32> %9360, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9362 = add <4 x i32> %9361, <i32 poison, i32 1, i32 2, i32 3>
  %9363 = add i32 %9359, 1
  %9364 = add i32 %9363, %a349
  %9365 = insertelement <4 x i32> undef, i32 %9364, i32 0
  %9366 = shufflevector <4 x i32> %9365, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9367 = add <4 x i32> %9366, <i32 poison, i32 1, i32 2, i32 3>
  %9368 = add i32 %9359, 2
  %9369 = add i32 %9368, %9233
  %9370 = insertelement <4 x i32> undef, i32 %9369, i32 0
  %9371 = shufflevector <4 x i32> %9370, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9372 = add <4 x i32> %9371, <i32 poison, i32 1, i32 2, i32 3>
  %9373 = add i32 %9359, 3
  %9374 = add i32 %9373, %9232
  %9375 = insertelement <4 x i32> undef, i32 %9374, i32 0
  %9376 = shufflevector <4 x i32> %9375, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9377 = add <4 x i32> %9376, <i32 poison, i32 1, i32 2, i32 3>
  %9378 = add i32 %9359, 4
  %9379 = add i32 %9378, %9231
  %9380 = insertelement <4 x i32> undef, i32 %9379, i32 0
  %9381 = shufflevector <4 x i32> %9380, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9382 = add <4 x i32> %9381, <i32 poison, i32 1, i32 2, i32 3>
  %9383 = add i32 %9359, 5
  %9384 = add i32 %9383, %9230
  %9385 = insertelement <4 x i32> undef, i32 %9384, i32 0
  %9386 = shufflevector <4 x i32> %9385, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9387 = add <4 x i32> %9386, <i32 poison, i32 1, i32 2, i32 3>
  %9388 = add i32 %9359, 6
  %9389 = add i32 %9388, %9229
  %9390 = insertelement <4 x i32> undef, i32 %9389, i32 0
  %9391 = shufflevector <4 x i32> %9390, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9392 = add <4 x i32> %9391, <i32 poison, i32 1, i32 2, i32 3>
  %9393 = add i32 %9359, 7
  %9394 = add i32 %9393, %9228
  %9395 = insertelement <4 x i32> undef, i32 %9394, i32 0
  %9396 = shufflevector <4 x i32> %9395, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %9397 = add <4 x i32> %9396, <i32 poison, i32 1, i32 2, i32 3>
  %9398 = extractelement <32 x i16> %9355, i32 0
  %9399 = sext i32 %9359 to i64
  %9400 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9399
  store i16 %9398, i16* %9400, align 2, !tbaa !399
  %9401 = extractelement <4 x i32> %9362, i32 1
  %9402 = extractelement <32 x i16> %9355, i32 1
  %9403 = sext i32 %9401 to i64
  %9404 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9403
  store i16 %9402, i16* %9404, align 2, !tbaa !399
  %9405 = extractelement <4 x i32> %9362, i32 2
  %9406 = extractelement <32 x i16> %9355, i32 2
  %9407 = sext i32 %9405 to i64
  %9408 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9407
  store i16 %9406, i16* %9408, align 2, !tbaa !399
  %9409 = extractelement <4 x i32> %9362, i32 3
  %9410 = extractelement <32 x i16> %9355, i32 3
  %9411 = sext i32 %9409 to i64
  %9412 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9411
  store i16 %9410, i16* %9412, align 2, !tbaa !399
  %9413 = extractelement <32 x i16> %9355, i32 4
  %9414 = sext i32 %9364 to i64
  %9415 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9414
  store i16 %9413, i16* %9415, align 2, !tbaa !399
  %9416 = extractelement <4 x i32> %9367, i32 1
  %9417 = extractelement <32 x i16> %9355, i32 5
  %9418 = sext i32 %9416 to i64
  %9419 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9418
  store i16 %9417, i16* %9419, align 2, !tbaa !399
  %9420 = extractelement <4 x i32> %9367, i32 2
  %9421 = extractelement <32 x i16> %9355, i32 6
  %9422 = sext i32 %9420 to i64
  %9423 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9422
  store i16 %9421, i16* %9423, align 2, !tbaa !399
  %9424 = extractelement <4 x i32> %9367, i32 3
  %9425 = extractelement <32 x i16> %9355, i32 7
  %9426 = sext i32 %9424 to i64
  %9427 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9426
  store i16 %9425, i16* %9427, align 2, !tbaa !399
  %9428 = extractelement <32 x i16> %9355, i32 8
  %9429 = sext i32 %9369 to i64
  %9430 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9429
  store i16 %9428, i16* %9430, align 2, !tbaa !399
  %9431 = extractelement <4 x i32> %9372, i32 1
  %9432 = extractelement <32 x i16> %9355, i32 9
  %9433 = sext i32 %9431 to i64
  %9434 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9433
  store i16 %9432, i16* %9434, align 2, !tbaa !399
  %9435 = extractelement <4 x i32> %9372, i32 2
  %9436 = extractelement <32 x i16> %9355, i32 10
  %9437 = sext i32 %9435 to i64
  %9438 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9437
  store i16 %9436, i16* %9438, align 2, !tbaa !399
  %9439 = extractelement <4 x i32> %9372, i32 3
  %9440 = extractelement <32 x i16> %9355, i32 11
  %9441 = sext i32 %9439 to i64
  %9442 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9441
  store i16 %9440, i16* %9442, align 2, !tbaa !399
  %9443 = extractelement <32 x i16> %9355, i32 12
  %9444 = sext i32 %9374 to i64
  %9445 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9444
  store i16 %9443, i16* %9445, align 2, !tbaa !399
  %9446 = extractelement <4 x i32> %9377, i32 1
  %9447 = extractelement <32 x i16> %9355, i32 13
  %9448 = sext i32 %9446 to i64
  %9449 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9448
  store i16 %9447, i16* %9449, align 2, !tbaa !399
  %9450 = extractelement <4 x i32> %9377, i32 2
  %9451 = extractelement <32 x i16> %9355, i32 14
  %9452 = sext i32 %9450 to i64
  %9453 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9452
  store i16 %9451, i16* %9453, align 2, !tbaa !399
  %9454 = extractelement <4 x i32> %9377, i32 3
  %9455 = extractelement <32 x i16> %9355, i32 15
  %9456 = sext i32 %9454 to i64
  %9457 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9456
  store i16 %9455, i16* %9457, align 2, !tbaa !399
  %9458 = extractelement <32 x i16> %9355, i32 16
  %9459 = sext i32 %9379 to i64
  %9460 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9459
  store i16 %9458, i16* %9460, align 2, !tbaa !399
  %9461 = extractelement <4 x i32> %9382, i32 1
  %9462 = extractelement <32 x i16> %9355, i32 17
  %9463 = sext i32 %9461 to i64
  %9464 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9463
  store i16 %9462, i16* %9464, align 2, !tbaa !399
  %9465 = extractelement <4 x i32> %9382, i32 2
  %9466 = extractelement <32 x i16> %9355, i32 18
  %9467 = sext i32 %9465 to i64
  %9468 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9467
  store i16 %9466, i16* %9468, align 2, !tbaa !399
  %9469 = extractelement <4 x i32> %9382, i32 3
  %9470 = extractelement <32 x i16> %9355, i32 19
  %9471 = sext i32 %9469 to i64
  %9472 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9471
  store i16 %9470, i16* %9472, align 2, !tbaa !399
  %9473 = extractelement <32 x i16> %9355, i32 20
  %9474 = sext i32 %9384 to i64
  %9475 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9474
  store i16 %9473, i16* %9475, align 2, !tbaa !399
  %9476 = extractelement <4 x i32> %9387, i32 1
  %9477 = extractelement <32 x i16> %9355, i32 21
  %9478 = sext i32 %9476 to i64
  %9479 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9478
  store i16 %9477, i16* %9479, align 2, !tbaa !399
  %9480 = extractelement <4 x i32> %9387, i32 2
  %9481 = extractelement <32 x i16> %9355, i32 22
  %9482 = sext i32 %9480 to i64
  %9483 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9482
  store i16 %9481, i16* %9483, align 2, !tbaa !399
  %9484 = extractelement <4 x i32> %9387, i32 3
  %9485 = extractelement <32 x i16> %9355, i32 23
  %9486 = sext i32 %9484 to i64
  %9487 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9486
  store i16 %9485, i16* %9487, align 2, !tbaa !399
  %9488 = extractelement <32 x i16> %9355, i32 24
  %9489 = sext i32 %9389 to i64
  %9490 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9489
  store i16 %9488, i16* %9490, align 2, !tbaa !399
  %9491 = extractelement <4 x i32> %9392, i32 1
  %9492 = extractelement <32 x i16> %9355, i32 25
  %9493 = sext i32 %9491 to i64
  %9494 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9493
  store i16 %9492, i16* %9494, align 2, !tbaa !399
  %9495 = extractelement <4 x i32> %9392, i32 2
  %9496 = extractelement <32 x i16> %9355, i32 26
  %9497 = sext i32 %9495 to i64
  %9498 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9497
  store i16 %9496, i16* %9498, align 2, !tbaa !399
  %9499 = extractelement <4 x i32> %9392, i32 3
  %9500 = extractelement <32 x i16> %9355, i32 27
  %9501 = sext i32 %9499 to i64
  %9502 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9501
  store i16 %9500, i16* %9502, align 2, !tbaa !399
  %9503 = extractelement <32 x i16> %9355, i32 28
  %9504 = sext i32 %9394 to i64
  %9505 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9504
  store i16 %9503, i16* %9505, align 2, !tbaa !399
  %9506 = extractelement <4 x i32> %9397, i32 1
  %9507 = extractelement <32 x i16> %9355, i32 29
  %9508 = sext i32 %9506 to i64
  %9509 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9508
  store i16 %9507, i16* %9509, align 2, !tbaa !399
  %9510 = extractelement <4 x i32> %9397, i32 2
  %9511 = extractelement <32 x i16> %9355, i32 30
  %9512 = sext i32 %9510 to i64
  %9513 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9512
  store i16 %9511, i16* %9513, align 2, !tbaa !399
  %9514 = extractelement <4 x i32> %9397, i32 3
  %9515 = extractelement <32 x i16> %9355, i32 31
  %9516 = sext i32 %9514 to i64
  %9517 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9516
  store i16 %9515, i16* %9517, align 2, !tbaa !399
  %indvars.iv.next4583 = add nuw nsw i64 %indvars.iv4582, 1
  %.not2010.us = icmp eq i64 %indvars.iv.next4583, %9275
  br i1 %.not2010.us, label %"end for input_wrapper.s0.c.c1072.loopexit.us", label %"for input_wrapper.s0.c.c1071.us"

"end for input_wrapper.s0.c.c1072.loopexit.us":   ; preds = %"for input_wrapper.s0.c.c1071.us"
  %indvars.iv.next4586 = add nuw nsw i64 %indvars.iv4585, 1
  %.not2009.us = icmp eq i64 %indvars.iv.next4586, %9276
  br i1 %.not2009.us, label %"end for input_wrapper.s0.x.x1060", label %"for input_wrapper.s0.x.x1059.us"

"end for input_wrapper.s0.x.x1060":               ; preds = %"end for input_wrapper.s0.c.c1072.loopexit.us", %"for input_wrapper.s0.y.rebased1054"
  br i1 %9237, label %"for input_wrapper.s0.x.x.rebased1077.preheader", label %"end for input_wrapper.s0.x.x.rebased1078", !prof !387

"for input_wrapper.s0.x.x.rebased1077.preheader": ; preds = %"end for input_wrapper.s0.x.x1060"
  %9518 = sext i32 %t40611058 to i64
  br i1 %9179, label %"for input_wrapper.s0.x.x.rebased1077.us", label %"end for input_wrapper.s0.x.x.rebased1078", !prof !387

"for input_wrapper.s0.x.x.rebased1077.us":        ; preds = %"for input_wrapper.s0.x.x.rebased1077.preheader", %"end for input_wrapper.s0.x.v211083.us"
  %indvars.iv4593 = phi i64 [ %indvars.iv.next4594, %"end for input_wrapper.s0.x.v211083.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased1077.preheader" ]
  %9519 = trunc i64 %indvars.iv4593 to i32
  %9520 = add i32 %t40481033, %9519
  %9521 = shl nsw i32 %9520, 3
  %a353.us = sub nsw i32 %a341, %9521
  %9522 = icmp slt i32 %a353.us, 7
  %t40791080.us = select i1 %9522, i32 %a353.us, i32 7
  %9523 = icmp sgt i32 %t40791080.us, -1
  br i1 %9523, label %"for input_wrapper.s0.x.v211082.us.us.preheader", label %"end for input_wrapper.s0.x.v211083.us", !prof !387

"for input_wrapper.s0.x.v211082.us.us.preheader": ; preds = %"for input_wrapper.s0.x.x.rebased1077.us"
  %9524 = sext i32 %9521 to i64
  %9525 = zext i32 %t40791080.us to i64
  br label %"for input_wrapper.s0.x.v211082.us.us"

"end for input_wrapper.s0.x.v211083.us":          ; preds = %"end for input_wrapper.s0.c.c1089.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased1077.us"
  %indvars.iv.next4594 = add nuw nsw i64 %indvars.iv4593, 1
  %.not2006.us = icmp eq i64 %indvars.iv4593, %9278
  br i1 %.not2006.us, label %"end for input_wrapper.s0.x.x.rebased1078", label %"for input_wrapper.s0.x.x.rebased1077.us"

"for input_wrapper.s0.x.v211082.us.us":           ; preds = %"for input_wrapper.s0.x.v211082.us.us.preheader", %"end for input_wrapper.s0.c.c1089.loopexit.us.us"
  %indvars.iv4590 = phi i64 [ 0, %"for input_wrapper.s0.x.v211082.us.us.preheader" ], [ %indvars.iv.next4591, %"end for input_wrapper.s0.c.c1089.loopexit.us.us" ]
  %9526 = add nsw i64 %indvars.iv4590, %9524
  %9527 = mul nsw i64 %9526, %9277
  %9528 = add nsw i64 %9527, %9339
  %9529 = trunc i64 %9526 to i32
  %t40811087.us.us = add i32 %b344, %9529
  %9530 = sext i32 %t40811087.us.us to i64
  br i1 %9319, label %"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c1088.us.us"

"for input_wrapper.s0.c.c1088.us.us":             ; preds = %"for input_wrapper.s0.x.v211082.us.us", %"for input_wrapper.s0.c.c1088.us.us"
  %indvars.iv4588 = phi i64 [ %indvars.iv.next4589.3, %"for input_wrapper.s0.c.c1088.us.us" ], [ 0, %"for input_wrapper.s0.x.v211082.us.us" ]
  %niter6073 = phi i64 [ %niter6073.nsub.3, %"for input_wrapper.s0.c.c1088.us.us" ], [ %unroll_iter6072, %"for input_wrapper.s0.x.v211082.us.us" ]
  %9531 = add nsw i64 %indvars.iv4588, %9530
  %9532 = shl nsw i64 %9531, 2
  %9533 = add nsw i64 %9532, %9518
  %9534 = getelementptr inbounds i8, i8* %172, i64 %9533
  %9535 = bitcast i8* %9534 to <4 x i8>*
  %9536 = load <4 x i8>, <4 x i8>* %9535, align 4, !tbaa !397
  %9537 = zext <4 x i8> %9536 to <4 x i16>
  %9538 = sub nsw <4 x i16> %9537, %9225
  %9539 = shl nuw nsw i64 %indvars.iv4588, 2
  %9540 = add nsw i64 %9539, %9528
  %9541 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9540
  %9542 = bitcast i16* %9541 to <4 x i16>*
  store <4 x i16> %9538, <4 x i16>* %9542, align 8, !tbaa !399
  %indvars.iv.next4589 = or i64 %indvars.iv4588, 1
  %9543 = add nsw i64 %indvars.iv.next4589, %9530
  %9544 = shl nsw i64 %9543, 2
  %9545 = add nsw i64 %9544, %9518
  %9546 = getelementptr inbounds i8, i8* %172, i64 %9545
  %9547 = bitcast i8* %9546 to <4 x i8>*
  %9548 = load <4 x i8>, <4 x i8>* %9547, align 4, !tbaa !397
  %9549 = zext <4 x i8> %9548 to <4 x i16>
  %9550 = sub nsw <4 x i16> %9549, %9225
  %9551 = shl nuw nsw i64 %indvars.iv.next4589, 2
  %9552 = add nsw i64 %9551, %9528
  %9553 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9552
  %9554 = bitcast i16* %9553 to <4 x i16>*
  store <4 x i16> %9550, <4 x i16>* %9554, align 8, !tbaa !399
  %indvars.iv.next4589.1 = or i64 %indvars.iv4588, 2
  %9555 = add nsw i64 %indvars.iv.next4589.1, %9530
  %9556 = shl nsw i64 %9555, 2
  %9557 = add nsw i64 %9556, %9518
  %9558 = getelementptr inbounds i8, i8* %172, i64 %9557
  %9559 = bitcast i8* %9558 to <4 x i8>*
  %9560 = load <4 x i8>, <4 x i8>* %9559, align 4, !tbaa !397
  %9561 = zext <4 x i8> %9560 to <4 x i16>
  %9562 = sub nsw <4 x i16> %9561, %9225
  %9563 = shl nuw nsw i64 %indvars.iv.next4589.1, 2
  %9564 = add nsw i64 %9563, %9528
  %9565 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9564
  %9566 = bitcast i16* %9565 to <4 x i16>*
  store <4 x i16> %9562, <4 x i16>* %9566, align 8, !tbaa !399
  %indvars.iv.next4589.2 = or i64 %indvars.iv4588, 3
  %9567 = add nsw i64 %indvars.iv.next4589.2, %9530
  %9568 = shl nsw i64 %9567, 2
  %9569 = add nsw i64 %9568, %9518
  %9570 = getelementptr inbounds i8, i8* %172, i64 %9569
  %9571 = bitcast i8* %9570 to <4 x i8>*
  %9572 = load <4 x i8>, <4 x i8>* %9571, align 4, !tbaa !397
  %9573 = zext <4 x i8> %9572 to <4 x i16>
  %9574 = sub nsw <4 x i16> %9573, %9225
  %9575 = shl nuw nsw i64 %indvars.iv.next4589.2, 2
  %9576 = add nsw i64 %9575, %9528
  %9577 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9576
  %9578 = bitcast i16* %9577 to <4 x i16>*
  store <4 x i16> %9574, <4 x i16>* %9578, align 8, !tbaa !399
  %indvars.iv.next4589.3 = add nuw nsw i64 %indvars.iv4588, 4
  %niter6073.nsub.3 = add i64 %niter6073, -4
  %niter6073.ncmp.3 = icmp eq i64 %niter6073.nsub.3, 0
  br i1 %niter6073.ncmp.3, label %"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c1088.us.us"

"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1088.us.us", %"for input_wrapper.s0.x.v211082.us.us"
  %indvars.iv4588.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v211082.us.us" ], [ %indvars.iv.next4589.3, %"for input_wrapper.s0.c.c1088.us.us" ]
  br i1 %lcmp.mod6071.not, label %"end for input_wrapper.s0.c.c1089.loopexit.us.us", label %"for input_wrapper.s0.c.c1088.us.us.epil"

"for input_wrapper.s0.c.c1088.us.us.epil":        ; preds = %"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c1088.us.us.epil"
  %indvars.iv4588.epil = phi i64 [ %indvars.iv.next4589.epil, %"for input_wrapper.s0.c.c1088.us.us.epil" ], [ %indvars.iv4588.unr, %"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa" ]
  %epil.iter6070 = phi i64 [ %epil.iter6070.sub, %"for input_wrapper.s0.c.c1088.us.us.epil" ], [ %xtraiter6069, %"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa" ]
  %9579 = add nsw i64 %indvars.iv4588.epil, %9530
  %9580 = shl nsw i64 %9579, 2
  %9581 = add nsw i64 %9580, %9518
  %9582 = getelementptr inbounds i8, i8* %172, i64 %9581
  %9583 = bitcast i8* %9582 to <4 x i8>*
  %9584 = load <4 x i8>, <4 x i8>* %9583, align 4, !tbaa !397
  %9585 = zext <4 x i8> %9584 to <4 x i16>
  %9586 = sub nsw <4 x i16> %9585, %9225
  %9587 = shl nuw nsw i64 %indvars.iv4588.epil, 2
  %9588 = add nsw i64 %9587, %9528
  %9589 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9588
  %9590 = bitcast i16* %9589 to <4 x i16>*
  store <4 x i16> %9586, <4 x i16>* %9590, align 8, !tbaa !399
  %indvars.iv.next4589.epil = add nuw nsw i64 %indvars.iv4588.epil, 1
  %epil.iter6070.sub = add i64 %epil.iter6070, -1
  %epil.iter6070.cmp.not = icmp eq i64 %epil.iter6070.sub, 0
  br i1 %epil.iter6070.cmp.not, label %"end for input_wrapper.s0.c.c1089.loopexit.us.us", label %"for input_wrapper.s0.c.c1088.us.us.epil", !llvm.loop !473

"end for input_wrapper.s0.c.c1089.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c1088.us.us.epil", %"end for input_wrapper.s0.c.c1089.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4591 = add nuw nsw i64 %indvars.iv4590, 1
  %.not2007.us.us = icmp eq i64 %indvars.iv4590, %9525
  br i1 %.not2007.us.us, label %"end for input_wrapper.s0.x.v211083.us", label %"for input_wrapper.s0.x.v211082.us.us"

"end for input_wrapper.s0.x.x.rebased1078":       ; preds = %"end for input_wrapper.s0.x.v211083.us", %"for input_wrapper.s0.x.x1059.preheader", %"for input_wrapper.s0.x.x.rebased1077.preheader", %"end for input_wrapper.s0.x.x1060"
  %indvars.iv.next4596 = add nuw nsw i64 %indvars.iv4595, 1
  %.not2005 = icmp eq i64 %indvars.iv4595, %9300
  br i1 %.not2005, label %"consume input_wrapper1180", label %"for input_wrapper.s0.y.rebased1054"

then_bb1091:                                      ; preds = %next_bb1050
  br i1 %9312, label %"consume input_wrapper1180", label %"for input_wrapper.s0.y.rebased1096.us", !prof !402

"for input_wrapper.s0.y.rebased1096.us":          ; preds = %then_bb1091, %"end for input_wrapper.s0.x.rebased1102.loopexit.us"
  %indvars.iv4548 = phi i64 [ %indvars.iv.next4549, %"end for input_wrapper.s0.x.rebased1102.loopexit.us" ], [ 0, %then_bb1091 ]
  %9591 = trunc i64 %indvars.iv4548 to i32
  %t40881099.us = mul i32 %9197, %9591
  %9592 = add nsw i64 %indvars.iv4548, %9336
  %9593 = mul nsw i64 %9592, %9269
  %9594 = add nsw i64 %9593, %9331
  br i1 %9214, label %"for input_wrapper.s0.x.rebased1101.us.us", label %"for input_wrapper.s0.x.rebased1101.preheader.split.us3433", !prof !387

"for input_wrapper.s0.x.rebased1101.preheader.split.us3433": ; preds = %"for input_wrapper.s0.y.rebased1096.us"
  br i1 %9153, label %"for input_wrapper.s0.x.rebased1101.us3417.us", label %"end for input_wrapper.s0.x.rebased1102.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased1102.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us", %"end for input_wrapper.s0.c.c.rebased1112.loopexit.us.us", %"for input_wrapper.s0.x.rebased1101.preheader.split.us3433"
  %indvars.iv.next4549 = add nuw nsw i64 %indvars.iv4548, 1
  %.not2000.us = icmp eq i64 %indvars.iv4548, %9296
  br i1 %.not2000.us, label %"consume input_wrapper1180", label %"for input_wrapper.s0.y.rebased1096.us"

"for input_wrapper.s0.x.rebased1101.us.us":       ; preds = %"for input_wrapper.s0.y.rebased1096.us", %"end for input_wrapper.s0.c.c.rebased1112.loopexit.us.us"
  %indvars.iv4545 = phi i64 [ %indvars.iv.next4546, %"end for input_wrapper.s0.c.c.rebased1112.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased1096.us" ]
  %9595 = trunc i64 %indvars.iv4545 to i32
  %reass.add2790.us.us = add i32 %t40881099.us, %9595
  %reass.mul2791.us.us = mul i32 %reass.add2790.us.us, %9210
  %9596 = add nsw i64 %indvars.iv4545, %9264
  %9597 = mul nsw i64 %9596, %9265
  %9598 = add nsw i64 %9594, %9597
  %9599 = sext i32 %reass.mul2791.us.us to i64
  br i1 %9153, label %"for input_wrapper.s0.c.c1106.us.us.preheader", label %"end for input_wrapper.s0.c.c1107.us.us", !prof !387

"for input_wrapper.s0.c.c1106.us.us.preheader":   ; preds = %"for input_wrapper.s0.x.rebased1101.us.us"
  br i1 %9314, label %"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1106.us.us"

"for input_wrapper.s0.c.c1106.us.us":             ; preds = %"for input_wrapper.s0.c.c1106.us.us.preheader", %"for input_wrapper.s0.c.c1106.us.us"
  %indvars.iv4541 = phi i64 [ %indvars.iv.next4542.3, %"for input_wrapper.s0.c.c1106.us.us" ], [ 0, %"for input_wrapper.s0.c.c1106.us.us.preheader" ]
  %niter6049 = phi i64 [ %niter6049.nsub.3, %"for input_wrapper.s0.c.c1106.us.us" ], [ %unroll_iter6048, %"for input_wrapper.s0.c.c1106.us.us.preheader" ]
  %9600 = shl nuw nsw i64 %indvars.iv4541, 4
  %9601 = add nsw i64 %9600, %9598
  %9602 = getelementptr inbounds i8, i8* %172, i64 %9601
  %9603 = bitcast i8* %9602 to <16 x i8>*
  %9604 = load <16 x i8>, <16 x i8>* %9603, align 4, !tbaa !397
  %9605 = zext <16 x i8> %9604 to <16 x i16>
  %9606 = sub nsw <16 x i16> %9605, %9213
  %9607 = add nsw i64 %9600, %9599
  %9608 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9607
  %9609 = bitcast i16* %9608 to <16 x i16>*
  store <16 x i16> %9606, <16 x i16>* %9609, align 8, !tbaa !399
  %indvars.iv.next4542 = shl i64 %indvars.iv4541, 4
  %9610 = or i64 %indvars.iv.next4542, 16
  %9611 = add nsw i64 %9610, %9598
  %9612 = getelementptr inbounds i8, i8* %172, i64 %9611
  %9613 = bitcast i8* %9612 to <16 x i8>*
  %9614 = load <16 x i8>, <16 x i8>* %9613, align 4, !tbaa !397
  %9615 = zext <16 x i8> %9614 to <16 x i16>
  %9616 = sub nsw <16 x i16> %9615, %9213
  %9617 = add nsw i64 %9610, %9599
  %9618 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9617
  %9619 = bitcast i16* %9618 to <16 x i16>*
  store <16 x i16> %9616, <16 x i16>* %9619, align 8, !tbaa !399
  %indvars.iv.next4542.1 = shl i64 %indvars.iv4541, 4
  %9620 = or i64 %indvars.iv.next4542.1, 32
  %9621 = add nsw i64 %9620, %9598
  %9622 = getelementptr inbounds i8, i8* %172, i64 %9621
  %9623 = bitcast i8* %9622 to <16 x i8>*
  %9624 = load <16 x i8>, <16 x i8>* %9623, align 4, !tbaa !397
  %9625 = zext <16 x i8> %9624 to <16 x i16>
  %9626 = sub nsw <16 x i16> %9625, %9213
  %9627 = add nsw i64 %9620, %9599
  %9628 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9627
  %9629 = bitcast i16* %9628 to <16 x i16>*
  store <16 x i16> %9626, <16 x i16>* %9629, align 8, !tbaa !399
  %indvars.iv.next4542.2 = shl i64 %indvars.iv4541, 4
  %9630 = or i64 %indvars.iv.next4542.2, 48
  %9631 = add nsw i64 %9630, %9598
  %9632 = getelementptr inbounds i8, i8* %172, i64 %9631
  %9633 = bitcast i8* %9632 to <16 x i8>*
  %9634 = load <16 x i8>, <16 x i8>* %9633, align 4, !tbaa !397
  %9635 = zext <16 x i8> %9634 to <16 x i16>
  %9636 = sub nsw <16 x i16> %9635, %9213
  %9637 = add nsw i64 %9630, %9599
  %9638 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9637
  %9639 = bitcast i16* %9638 to <16 x i16>*
  store <16 x i16> %9636, <16 x i16>* %9639, align 8, !tbaa !399
  %indvars.iv.next4542.3 = add nuw nsw i64 %indvars.iv4541, 4
  %niter6049.nsub.3 = add i64 %niter6049, -4
  %niter6049.ncmp.3 = icmp eq i64 %niter6049.nsub.3, 0
  br i1 %niter6049.ncmp.3, label %"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1106.us.us"

"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1106.us.us", %"for input_wrapper.s0.c.c1106.us.us.preheader"
  %indvars.iv4541.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c1106.us.us.preheader" ], [ %indvars.iv.next4542.3, %"for input_wrapper.s0.c.c1106.us.us" ]
  br i1 %lcmp.mod6047.not, label %"end for input_wrapper.s0.c.c1107.us.us", label %"for input_wrapper.s0.c.c1106.us.us.epil"

"for input_wrapper.s0.c.c1106.us.us.epil":        ; preds = %"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1106.us.us.epil"
  %indvars.iv4541.epil = phi i64 [ %indvars.iv.next4542.epil, %"for input_wrapper.s0.c.c1106.us.us.epil" ], [ %indvars.iv4541.unr, %"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa" ]
  %epil.iter6046 = phi i64 [ %epil.iter6046.sub, %"for input_wrapper.s0.c.c1106.us.us.epil" ], [ %xtraiter6045, %"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa" ]
  %9640 = shl nuw nsw i64 %indvars.iv4541.epil, 4
  %9641 = add nsw i64 %9640, %9598
  %9642 = getelementptr inbounds i8, i8* %172, i64 %9641
  %9643 = bitcast i8* %9642 to <16 x i8>*
  %9644 = load <16 x i8>, <16 x i8>* %9643, align 4, !tbaa !397
  %9645 = zext <16 x i8> %9644 to <16 x i16>
  %9646 = sub nsw <16 x i16> %9645, %9213
  %9647 = add nsw i64 %9640, %9599
  %9648 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9647
  %9649 = bitcast i16* %9648 to <16 x i16>*
  store <16 x i16> %9646, <16 x i16>* %9649, align 8, !tbaa !399
  %indvars.iv.next4542.epil = add nuw nsw i64 %indvars.iv4541.epil, 1
  %epil.iter6046.sub = add i64 %epil.iter6046, -1
  %epil.iter6046.cmp.not = icmp eq i64 %epil.iter6046.sub, 0
  br i1 %epil.iter6046.cmp.not, label %"end for input_wrapper.s0.c.c1107.us.us", label %"for input_wrapper.s0.c.c1106.us.us.epil", !llvm.loop !474

"end for input_wrapper.s0.c.c1107.us.us":         ; preds = %"end for input_wrapper.s0.c.c1107.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1106.us.us.epil", %"for input_wrapper.s0.x.rebased1101.us.us"
  br label %"for input_wrapper.s0.c.c.rebased1111.us.us"

"for input_wrapper.s0.c.c.rebased1111.us.us":     ; preds = %after_bb1114.us.us, %"end for input_wrapper.s0.c.c1107.us.us"
  %indvars.iv4543 = phi i64 [ %indvars.iv.next4544, %after_bb1114.us.us ], [ 0, %"end for input_wrapper.s0.c.c1107.us.us" ]
  %9650 = add nsw i64 %indvars.iv4543, %9267
  %9651 = trunc i64 %9650 to i32
  %9652 = shl nsw i32 %9651, 4
  %9653 = add nsw i32 %9652, 16
  %.not2002.us.us = icmp sgt i32 %9653, %t40861094
  br i1 %.not2002.us.us, label %next_bb1116.us.us, label %then_bb1115.us.us

then_bb1115.us.us:                                ; preds = %"for input_wrapper.s0.c.c.rebased1111.us.us"
  %9654 = shl nsw i64 %9650, 4
  %9655 = add nsw i64 %9654, %9598
  %9656 = getelementptr inbounds i8, i8* %172, i64 %9655
  %9657 = bitcast i8* %9656 to <16 x i8>*
  %9658 = load <16 x i8>, <16 x i8>* %9657, align 4, !tbaa !397
  %9659 = zext <16 x i8> %9658 to <16 x i16>
  %9660 = sub nsw <16 x i16> %9659, %9213
  %9661 = add nsw i64 %9654, %9599
  %9662 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9661
  %9663 = bitcast i16* %9662 to <16 x i16>*
  store <16 x i16> %9660, <16 x i16>* %9663, align 8, !tbaa !399
  br label %after_bb1114.us.us

next_bb1116.us.us:                                ; preds = %"for input_wrapper.s0.c.c.rebased1111.us.us"
  %9664 = or i32 %9652, 1
  %9665 = insertelement <16 x i32> undef, i32 %9664, i32 0
  %9666 = shufflevector <16 x i32> %9665, <16 x i32> undef, <16 x i32> zeroinitializer
  %9667 = add nsw <16 x i32> %9666, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9668 = shufflevector <16 x i32> %9667, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9669 = icmp sgt <8 x i32> %9668, %9216
  %9670 = shufflevector <16 x i32> %9667, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9671 = icmp sgt <8 x i32> %9670, %9216
  %9672 = shufflevector <8 x i1> %9669, <8 x i1> %9671, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9673 = xor <16 x i1> %9672, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %9674 = shl nsw i64 %9650, 4
  %9675 = add nsw i64 %9674, %9598
  %9676 = getelementptr inbounds i8, i8* %172, i64 %9675
  %9677 = bitcast i8* %9676 to <16 x i8>*
  %9678 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %9677, i32 4, <16 x i1> %9673, <16 x i8> undef), !tbaa !397
  %9679 = zext <16 x i8> %9678 to <16 x i16>
  %9680 = sub nsw <16 x i16> %9679, %9213
  %9681 = add nsw i64 %9674, %9599
  %9682 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9681
  %9683 = bitcast i16* %9682 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %9680, <16 x i16>* %9683, i32 8, <16 x i1> %9673), !tbaa !399
  br label %after_bb1114.us.us

after_bb1114.us.us:                               ; preds = %next_bb1116.us.us, %then_bb1115.us.us
  %indvars.iv.next4544 = add nuw nsw i64 %indvars.iv4543, 1
  %.not2003.us.us = icmp eq i64 %indvars.iv.next4544, %9268
  br i1 %.not2003.us.us, label %"end for input_wrapper.s0.c.c.rebased1112.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased1111.us.us"

"end for input_wrapper.s0.c.c.rebased1112.loopexit.us.us": ; preds = %after_bb1114.us.us
  %indvars.iv.next4546 = add nuw nsw i64 %indvars.iv4545, 1
  %.not2001.us.us = icmp eq i64 %indvars.iv4545, %9266
  br i1 %.not2001.us.us, label %"end for input_wrapper.s0.x.rebased1102.loopexit.us", label %"for input_wrapper.s0.x.rebased1101.us.us"

"for input_wrapper.s0.x.rebased1101.us3417.us":   ; preds = %"for input_wrapper.s0.x.rebased1101.preheader.split.us3433", %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us"
  %indvars.iv4538 = phi i64 [ %indvars.iv.next4539, %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us" ], [ 0, %"for input_wrapper.s0.x.rebased1101.preheader.split.us3433" ]
  %9684 = trunc i64 %indvars.iv4538 to i32
  %reass.add2790.us3419.us = add i32 %t40881099.us, %9684
  %reass.mul2791.us3420.us = mul i32 %reass.add2790.us3419.us, %9210
  %9685 = add nsw i64 %indvars.iv4538, %9264
  %9686 = mul nsw i64 %9685, %9265
  %9687 = add nsw i64 %9594, %9686
  %9688 = sext i32 %reass.mul2791.us3420.us to i64
  br i1 %9313, label %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa", label %"for input_wrapper.s0.c.c1106.us3422.us"

"for input_wrapper.s0.c.c1106.us3422.us":         ; preds = %"for input_wrapper.s0.x.rebased1101.us3417.us", %"for input_wrapper.s0.c.c1106.us3422.us"
  %indvars.iv4536 = phi i64 [ %indvars.iv.next4537.3, %"for input_wrapper.s0.c.c1106.us3422.us" ], [ 0, %"for input_wrapper.s0.x.rebased1101.us3417.us" ]
  %niter6044 = phi i64 [ %niter6044.nsub.3, %"for input_wrapper.s0.c.c1106.us3422.us" ], [ %unroll_iter6043, %"for input_wrapper.s0.x.rebased1101.us3417.us" ]
  %9689 = shl nuw nsw i64 %indvars.iv4536, 4
  %9690 = add nsw i64 %9689, %9687
  %9691 = getelementptr inbounds i8, i8* %172, i64 %9690
  %9692 = bitcast i8* %9691 to <16 x i8>*
  %9693 = load <16 x i8>, <16 x i8>* %9692, align 4, !tbaa !397
  %9694 = zext <16 x i8> %9693 to <16 x i16>
  %9695 = sub nsw <16 x i16> %9694, %9213
  %9696 = add nsw i64 %9689, %9688
  %9697 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9696
  %9698 = bitcast i16* %9697 to <16 x i16>*
  store <16 x i16> %9695, <16 x i16>* %9698, align 8, !tbaa !399
  %indvars.iv.next4537 = shl i64 %indvars.iv4536, 4
  %9699 = or i64 %indvars.iv.next4537, 16
  %9700 = add nsw i64 %9699, %9687
  %9701 = getelementptr inbounds i8, i8* %172, i64 %9700
  %9702 = bitcast i8* %9701 to <16 x i8>*
  %9703 = load <16 x i8>, <16 x i8>* %9702, align 4, !tbaa !397
  %9704 = zext <16 x i8> %9703 to <16 x i16>
  %9705 = sub nsw <16 x i16> %9704, %9213
  %9706 = add nsw i64 %9699, %9688
  %9707 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9706
  %9708 = bitcast i16* %9707 to <16 x i16>*
  store <16 x i16> %9705, <16 x i16>* %9708, align 8, !tbaa !399
  %indvars.iv.next4537.1 = shl i64 %indvars.iv4536, 4
  %9709 = or i64 %indvars.iv.next4537.1, 32
  %9710 = add nsw i64 %9709, %9687
  %9711 = getelementptr inbounds i8, i8* %172, i64 %9710
  %9712 = bitcast i8* %9711 to <16 x i8>*
  %9713 = load <16 x i8>, <16 x i8>* %9712, align 4, !tbaa !397
  %9714 = zext <16 x i8> %9713 to <16 x i16>
  %9715 = sub nsw <16 x i16> %9714, %9213
  %9716 = add nsw i64 %9709, %9688
  %9717 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9716
  %9718 = bitcast i16* %9717 to <16 x i16>*
  store <16 x i16> %9715, <16 x i16>* %9718, align 8, !tbaa !399
  %indvars.iv.next4537.2 = shl i64 %indvars.iv4536, 4
  %9719 = or i64 %indvars.iv.next4537.2, 48
  %9720 = add nsw i64 %9719, %9687
  %9721 = getelementptr inbounds i8, i8* %172, i64 %9720
  %9722 = bitcast i8* %9721 to <16 x i8>*
  %9723 = load <16 x i8>, <16 x i8>* %9722, align 4, !tbaa !397
  %9724 = zext <16 x i8> %9723 to <16 x i16>
  %9725 = sub nsw <16 x i16> %9724, %9213
  %9726 = add nsw i64 %9719, %9688
  %9727 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9726
  %9728 = bitcast i16* %9727 to <16 x i16>*
  store <16 x i16> %9725, <16 x i16>* %9728, align 8, !tbaa !399
  %indvars.iv.next4537.3 = add nuw nsw i64 %indvars.iv4536, 4
  %niter6044.nsub.3 = add i64 %niter6044, -4
  %niter6044.ncmp.3 = icmp eq i64 %niter6044.nsub.3, 0
  br i1 %niter6044.ncmp.3, label %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa", label %"for input_wrapper.s0.c.c1106.us3422.us"

"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1106.us3422.us", %"for input_wrapper.s0.x.rebased1101.us3417.us"
  %indvars.iv4536.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1101.us3417.us" ], [ %indvars.iv.next4537.3, %"for input_wrapper.s0.c.c1106.us3422.us" ]
  br i1 %lcmp.mod6042.not, label %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us", label %"for input_wrapper.s0.c.c1106.us3422.us.epil"

"for input_wrapper.s0.c.c1106.us3422.us.epil":    ; preds = %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa", %"for input_wrapper.s0.c.c1106.us3422.us.epil"
  %indvars.iv4536.epil = phi i64 [ %indvars.iv.next4537.epil, %"for input_wrapper.s0.c.c1106.us3422.us.epil" ], [ %indvars.iv4536.unr, %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa" ]
  %epil.iter6041 = phi i64 [ %epil.iter6041.sub, %"for input_wrapper.s0.c.c1106.us3422.us.epil" ], [ %xtraiter6040, %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa" ]
  %9729 = shl nuw nsw i64 %indvars.iv4536.epil, 4
  %9730 = add nsw i64 %9729, %9687
  %9731 = getelementptr inbounds i8, i8* %172, i64 %9730
  %9732 = bitcast i8* %9731 to <16 x i8>*
  %9733 = load <16 x i8>, <16 x i8>* %9732, align 4, !tbaa !397
  %9734 = zext <16 x i8> %9733 to <16 x i16>
  %9735 = sub nsw <16 x i16> %9734, %9213
  %9736 = add nsw i64 %9729, %9688
  %9737 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9736
  %9738 = bitcast i16* %9737 to <16 x i16>*
  store <16 x i16> %9735, <16 x i16>* %9738, align 8, !tbaa !399
  %indvars.iv.next4537.epil = add nuw nsw i64 %indvars.iv4536.epil, 1
  %epil.iter6041.sub = add i64 %epil.iter6041, -1
  %epil.iter6041.cmp.not = icmp eq i64 %epil.iter6041.sub, 0
  br i1 %epil.iter6041.cmp.not, label %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us", label %"for input_wrapper.s0.c.c1106.us3422.us.epil", !llvm.loop !475

"end for input_wrapper.s0.c.c1107.loopexit.us3428.us": ; preds = %"for input_wrapper.s0.c.c1106.us3422.us.epil", %"end for input_wrapper.s0.c.c1107.loopexit.us3428.us.unr-lcssa"
  %indvars.iv.next4539 = add nuw nsw i64 %indvars.iv4538, 1
  %.not2001.us3426.us = icmp eq i64 %indvars.iv4538, %9266
  br i1 %.not2001.us3426.us, label %"end for input_wrapper.s0.x.rebased1102.loopexit.us", label %"for input_wrapper.s0.x.rebased1101.us3417.us"

next_bb1092:                                      ; preds = %next_bb1050
  br i1 %9159, label %next_bb1120, label %then_bb1119

then_bb1119:                                      ; preds = %next_bb1092
  br i1 %9292, label %"for input_wrapper.s0.y.rebased1124", label %"consume input_wrapper1180", !prof !387

next_bb1120:                                      ; preds = %next_bb1092
  br i1 %9160, label %next_bb1148, label %then_bb1147

"for input_wrapper.s0.y.rebased1124":             ; preds = %then_bb1119, %"end for input_wrapper.s0.x.rebased1130"
  %indvars.iv4563 = phi i64 [ %indvars.iv.next4564, %"end for input_wrapper.s0.x.rebased1130" ], [ 0, %then_bb1119 ]
  %9739 = trunc i64 %indvars.iv4563 to i32
  %t40971127 = mul i32 %9197, %9739
  %9740 = add nsw i64 %indvars.iv4563, %9336
  %9741 = mul nsw i64 %9740, %9269
  %9742 = add nsw i64 %9741, %9331
  br i1 %9206, label %"for input_wrapper.s0.x.rebased1129.preheader", label %"end for input_wrapper.s0.x.rebased1130", !prof !387

"for input_wrapper.s0.x.rebased1129.preheader":   ; preds = %"for input_wrapper.s0.y.rebased1124"
  br i1 %9220, label %"for input_wrapper.s0.x.rebased1129.us", label %"for input_wrapper.s0.x.rebased1129.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased1129.us":          ; preds = %"for input_wrapper.s0.x.rebased1129.preheader", %"end for input_wrapper.s0.c.c.rebased1140.loopexit.us"
  %indvars.iv4560 = phi i64 [ %indvars.iv.next4561, %"end for input_wrapper.s0.c.c.rebased1140.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased1129.preheader" ]
  %9743 = trunc i64 %indvars.iv4560 to i32
  %reass.add2792.us = add i32 %t40971127, %9743
  %reass.mul2793.us = mul i32 %reass.add2792.us, %9210
  %9744 = add nsw i64 %indvars.iv4560, %9264
  %9745 = mul nsw i64 %9744, %9265
  %9746 = add nsw i64 %9742, %9745
  %9747 = sext i32 %reass.mul2793.us to i64
  br i1 %9152, label %"for input_wrapper.s0.c.c1134.us.preheader", label %"end for input_wrapper.s0.c.c1135.us", !prof !387

"for input_wrapper.s0.c.c1134.us.preheader":      ; preds = %"for input_wrapper.s0.x.rebased1129.us"
  br i1 %9316, label %"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1134.us"

"for input_wrapper.s0.c.c1134.us":                ; preds = %"for input_wrapper.s0.c.c1134.us.preheader", %"for input_wrapper.s0.c.c1134.us"
  %indvars.iv4556 = phi i64 [ %indvars.iv.next4557.3, %"for input_wrapper.s0.c.c1134.us" ], [ 0, %"for input_wrapper.s0.c.c1134.us.preheader" ]
  %niter6059 = phi i64 [ %niter6059.nsub.3, %"for input_wrapper.s0.c.c1134.us" ], [ %unroll_iter6058, %"for input_wrapper.s0.c.c1134.us.preheader" ]
  %9748 = shl nuw nsw i64 %indvars.iv4556, 3
  %9749 = add nsw i64 %9748, %9746
  %9750 = getelementptr inbounds i8, i8* %172, i64 %9749
  %9751 = bitcast i8* %9750 to <8 x i8>*
  %9752 = load <8 x i8>, <8 x i8>* %9751, align 4, !tbaa !397
  %9753 = zext <8 x i8> %9752 to <8 x i16>
  %9754 = sub nsw <8 x i16> %9753, %9219
  %9755 = add nsw i64 %9748, %9747
  %9756 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9755
  %9757 = bitcast i16* %9756 to <8 x i16>*
  store <8 x i16> %9754, <8 x i16>* %9757, align 8, !tbaa !399
  %indvars.iv.next4557 = shl i64 %indvars.iv4556, 3
  %9758 = or i64 %indvars.iv.next4557, 8
  %9759 = add nsw i64 %9758, %9746
  %9760 = getelementptr inbounds i8, i8* %172, i64 %9759
  %9761 = bitcast i8* %9760 to <8 x i8>*
  %9762 = load <8 x i8>, <8 x i8>* %9761, align 4, !tbaa !397
  %9763 = zext <8 x i8> %9762 to <8 x i16>
  %9764 = sub nsw <8 x i16> %9763, %9219
  %9765 = add nsw i64 %9758, %9747
  %9766 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9765
  %9767 = bitcast i16* %9766 to <8 x i16>*
  store <8 x i16> %9764, <8 x i16>* %9767, align 8, !tbaa !399
  %indvars.iv.next4557.1 = shl i64 %indvars.iv4556, 3
  %9768 = or i64 %indvars.iv.next4557.1, 16
  %9769 = add nsw i64 %9768, %9746
  %9770 = getelementptr inbounds i8, i8* %172, i64 %9769
  %9771 = bitcast i8* %9770 to <8 x i8>*
  %9772 = load <8 x i8>, <8 x i8>* %9771, align 4, !tbaa !397
  %9773 = zext <8 x i8> %9772 to <8 x i16>
  %9774 = sub nsw <8 x i16> %9773, %9219
  %9775 = add nsw i64 %9768, %9747
  %9776 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9775
  %9777 = bitcast i16* %9776 to <8 x i16>*
  store <8 x i16> %9774, <8 x i16>* %9777, align 8, !tbaa !399
  %indvars.iv.next4557.2 = shl i64 %indvars.iv4556, 3
  %9778 = or i64 %indvars.iv.next4557.2, 24
  %9779 = add nsw i64 %9778, %9746
  %9780 = getelementptr inbounds i8, i8* %172, i64 %9779
  %9781 = bitcast i8* %9780 to <8 x i8>*
  %9782 = load <8 x i8>, <8 x i8>* %9781, align 4, !tbaa !397
  %9783 = zext <8 x i8> %9782 to <8 x i16>
  %9784 = sub nsw <8 x i16> %9783, %9219
  %9785 = add nsw i64 %9778, %9747
  %9786 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9785
  %9787 = bitcast i16* %9786 to <8 x i16>*
  store <8 x i16> %9784, <8 x i16>* %9787, align 8, !tbaa !399
  %indvars.iv.next4557.3 = add nuw nsw i64 %indvars.iv4556, 4
  %niter6059.nsub.3 = add i64 %niter6059, -4
  %niter6059.ncmp.3 = icmp eq i64 %niter6059.nsub.3, 0
  br i1 %niter6059.ncmp.3, label %"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1134.us"

"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1134.us", %"for input_wrapper.s0.c.c1134.us.preheader"
  %indvars.iv4556.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c1134.us.preheader" ], [ %indvars.iv.next4557.3, %"for input_wrapper.s0.c.c1134.us" ]
  br i1 %lcmp.mod6057.not, label %"end for input_wrapper.s0.c.c1135.us", label %"for input_wrapper.s0.c.c1134.us.epil"

"for input_wrapper.s0.c.c1134.us.epil":           ; preds = %"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1134.us.epil"
  %indvars.iv4556.epil = phi i64 [ %indvars.iv.next4557.epil, %"for input_wrapper.s0.c.c1134.us.epil" ], [ %indvars.iv4556.unr, %"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa" ]
  %epil.iter6056 = phi i64 [ %epil.iter6056.sub, %"for input_wrapper.s0.c.c1134.us.epil" ], [ %xtraiter6055, %"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa" ]
  %9788 = shl nuw nsw i64 %indvars.iv4556.epil, 3
  %9789 = add nsw i64 %9788, %9746
  %9790 = getelementptr inbounds i8, i8* %172, i64 %9789
  %9791 = bitcast i8* %9790 to <8 x i8>*
  %9792 = load <8 x i8>, <8 x i8>* %9791, align 4, !tbaa !397
  %9793 = zext <8 x i8> %9792 to <8 x i16>
  %9794 = sub nsw <8 x i16> %9793, %9219
  %9795 = add nsw i64 %9788, %9747
  %9796 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9795
  %9797 = bitcast i16* %9796 to <8 x i16>*
  store <8 x i16> %9794, <8 x i16>* %9797, align 8, !tbaa !399
  %indvars.iv.next4557.epil = add nuw nsw i64 %indvars.iv4556.epil, 1
  %epil.iter6056.sub = add i64 %epil.iter6056, -1
  %epil.iter6056.cmp.not = icmp eq i64 %epil.iter6056.sub, 0
  br i1 %epil.iter6056.cmp.not, label %"end for input_wrapper.s0.c.c1135.us", label %"for input_wrapper.s0.c.c1134.us.epil", !llvm.loop !476

"end for input_wrapper.s0.c.c1135.us":            ; preds = %"end for input_wrapper.s0.c.c1135.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1134.us.epil", %"for input_wrapper.s0.x.rebased1129.us"
  br label %"for input_wrapper.s0.c.c.rebased1139.us"

"for input_wrapper.s0.c.c.rebased1139.us":        ; preds = %"end for input_wrapper.s0.c.c1135.us", %after_bb1142.us
  %indvars.iv4558 = phi i64 [ 0, %"end for input_wrapper.s0.c.c1135.us" ], [ %indvars.iv.next4559, %after_bb1142.us ]
  %9798 = add nsw i64 %indvars.iv4558, %9271
  %9799 = trunc i64 %9798 to i32
  %9800 = shl nsw i32 %9799, 3
  %9801 = add nsw i32 %9800, 8
  %.not1997.us = icmp sgt i32 %9801, %t40861094
  br i1 %.not1997.us, label %next_bb1144.us, label %then_bb1143.us

then_bb1143.us:                                   ; preds = %"for input_wrapper.s0.c.c.rebased1139.us"
  %9802 = shl nsw i64 %9798, 3
  %9803 = add nsw i64 %9802, %9746
  %9804 = getelementptr inbounds i8, i8* %172, i64 %9803
  %9805 = bitcast i8* %9804 to <8 x i8>*
  %9806 = load <8 x i8>, <8 x i8>* %9805, align 4, !tbaa !397
  %9807 = zext <8 x i8> %9806 to <8 x i16>
  %9808 = sub nsw <8 x i16> %9807, %9219
  %9809 = add nsw i64 %9802, %9747
  %9810 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9809
  %9811 = bitcast i16* %9810 to <8 x i16>*
  store <8 x i16> %9808, <8 x i16>* %9811, align 8, !tbaa !399
  br label %after_bb1142.us

next_bb1144.us:                                   ; preds = %"for input_wrapper.s0.c.c.rebased1139.us"
  %9812 = or i32 %9800, 1
  %9813 = insertelement <8 x i32> undef, i32 %9812, i32 0
  %9814 = shufflevector <8 x i32> %9813, <8 x i32> undef, <8 x i32> zeroinitializer
  %9815 = add nsw <8 x i32> %9814, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %9816 = icmp sle <8 x i32> %9815, %9222
  %9817 = shl nsw i64 %9798, 3
  %9818 = add nsw i64 %9817, %9746
  %9819 = getelementptr inbounds i8, i8* %172, i64 %9818
  %9820 = bitcast i8* %9819 to <8 x i8>*
  %9821 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %9820, i32 4, <8 x i1> %9816, <8 x i8> undef), !tbaa !397
  %9822 = zext <8 x i8> %9821 to <8 x i16>
  %9823 = sub nsw <8 x i16> %9822, %9219
  %9824 = add nsw i64 %9817, %9747
  %9825 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9824
  %9826 = bitcast i16* %9825 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %9823, <8 x i16>* %9826, i32 8, <8 x i1> %9816), !tbaa !399
  br label %after_bb1142.us

after_bb1142.us:                                  ; preds = %next_bb1144.us, %then_bb1143.us
  %indvars.iv.next4559 = add nuw nsw i64 %indvars.iv4558, 1
  %.not1998.us = icmp eq i64 %indvars.iv.next4559, %9272
  br i1 %.not1998.us, label %"end for input_wrapper.s0.c.c.rebased1140.loopexit.us", label %"for input_wrapper.s0.c.c.rebased1139.us"

"end for input_wrapper.s0.c.c.rebased1140.loopexit.us": ; preds = %after_bb1142.us
  %indvars.iv.next4561 = add nuw nsw i64 %indvars.iv4560, 1
  %.not1996.us = icmp eq i64 %indvars.iv4560, %9266
  br i1 %.not1996.us, label %"end for input_wrapper.s0.x.rebased1130", label %"for input_wrapper.s0.x.rebased1129.us"

"for input_wrapper.s0.x.rebased1129.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased1129.preheader"
  br i1 %9152, label %"for input_wrapper.s0.x.rebased1129.us3436", label %"end for input_wrapper.s0.x.rebased1130", !prof !387

"for input_wrapper.s0.x.rebased1129.us3436":      ; preds = %"for input_wrapper.s0.x.rebased1129.preheader.split", %"end for input_wrapper.s0.c.c1135.loopexit.us3447"
  %indvars.iv4553 = phi i64 [ %indvars.iv.next4554, %"end for input_wrapper.s0.c.c1135.loopexit.us3447" ], [ 0, %"for input_wrapper.s0.x.rebased1129.preheader.split" ]
  %9827 = trunc i64 %indvars.iv4553 to i32
  %reass.add2792.us3438 = add i32 %t40971127, %9827
  %reass.mul2793.us3439 = mul i32 %reass.add2792.us3438, %9210
  %9828 = add nsw i64 %indvars.iv4553, %9264
  %9829 = mul nsw i64 %9828, %9265
  %9830 = add nsw i64 %9742, %9829
  %9831 = sext i32 %reass.mul2793.us3439 to i64
  br i1 %9315, label %"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa", label %"for input_wrapper.s0.c.c1134.us3441"

"for input_wrapper.s0.c.c1134.us3441":            ; preds = %"for input_wrapper.s0.x.rebased1129.us3436", %"for input_wrapper.s0.c.c1134.us3441"
  %indvars.iv4551 = phi i64 [ %indvars.iv.next4552.3, %"for input_wrapper.s0.c.c1134.us3441" ], [ 0, %"for input_wrapper.s0.x.rebased1129.us3436" ]
  %niter6054 = phi i64 [ %niter6054.nsub.3, %"for input_wrapper.s0.c.c1134.us3441" ], [ %unroll_iter6053, %"for input_wrapper.s0.x.rebased1129.us3436" ]
  %9832 = shl nuw nsw i64 %indvars.iv4551, 3
  %9833 = add nsw i64 %9832, %9830
  %9834 = getelementptr inbounds i8, i8* %172, i64 %9833
  %9835 = bitcast i8* %9834 to <8 x i8>*
  %9836 = load <8 x i8>, <8 x i8>* %9835, align 4, !tbaa !397
  %9837 = zext <8 x i8> %9836 to <8 x i16>
  %9838 = sub nsw <8 x i16> %9837, %9219
  %9839 = add nsw i64 %9832, %9831
  %9840 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9839
  %9841 = bitcast i16* %9840 to <8 x i16>*
  store <8 x i16> %9838, <8 x i16>* %9841, align 8, !tbaa !399
  %indvars.iv.next4552 = shl i64 %indvars.iv4551, 3
  %9842 = or i64 %indvars.iv.next4552, 8
  %9843 = add nsw i64 %9842, %9830
  %9844 = getelementptr inbounds i8, i8* %172, i64 %9843
  %9845 = bitcast i8* %9844 to <8 x i8>*
  %9846 = load <8 x i8>, <8 x i8>* %9845, align 4, !tbaa !397
  %9847 = zext <8 x i8> %9846 to <8 x i16>
  %9848 = sub nsw <8 x i16> %9847, %9219
  %9849 = add nsw i64 %9842, %9831
  %9850 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9849
  %9851 = bitcast i16* %9850 to <8 x i16>*
  store <8 x i16> %9848, <8 x i16>* %9851, align 8, !tbaa !399
  %indvars.iv.next4552.1 = shl i64 %indvars.iv4551, 3
  %9852 = or i64 %indvars.iv.next4552.1, 16
  %9853 = add nsw i64 %9852, %9830
  %9854 = getelementptr inbounds i8, i8* %172, i64 %9853
  %9855 = bitcast i8* %9854 to <8 x i8>*
  %9856 = load <8 x i8>, <8 x i8>* %9855, align 4, !tbaa !397
  %9857 = zext <8 x i8> %9856 to <8 x i16>
  %9858 = sub nsw <8 x i16> %9857, %9219
  %9859 = add nsw i64 %9852, %9831
  %9860 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9859
  %9861 = bitcast i16* %9860 to <8 x i16>*
  store <8 x i16> %9858, <8 x i16>* %9861, align 8, !tbaa !399
  %indvars.iv.next4552.2 = shl i64 %indvars.iv4551, 3
  %9862 = or i64 %indvars.iv.next4552.2, 24
  %9863 = add nsw i64 %9862, %9830
  %9864 = getelementptr inbounds i8, i8* %172, i64 %9863
  %9865 = bitcast i8* %9864 to <8 x i8>*
  %9866 = load <8 x i8>, <8 x i8>* %9865, align 4, !tbaa !397
  %9867 = zext <8 x i8> %9866 to <8 x i16>
  %9868 = sub nsw <8 x i16> %9867, %9219
  %9869 = add nsw i64 %9862, %9831
  %9870 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9869
  %9871 = bitcast i16* %9870 to <8 x i16>*
  store <8 x i16> %9868, <8 x i16>* %9871, align 8, !tbaa !399
  %indvars.iv.next4552.3 = add nuw nsw i64 %indvars.iv4551, 4
  %niter6054.nsub.3 = add i64 %niter6054, -4
  %niter6054.ncmp.3 = icmp eq i64 %niter6054.nsub.3, 0
  br i1 %niter6054.ncmp.3, label %"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa", label %"for input_wrapper.s0.c.c1134.us3441"

"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1134.us3441", %"for input_wrapper.s0.x.rebased1129.us3436"
  %indvars.iv4551.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1129.us3436" ], [ %indvars.iv.next4552.3, %"for input_wrapper.s0.c.c1134.us3441" ]
  br i1 %lcmp.mod6052.not, label %"end for input_wrapper.s0.c.c1135.loopexit.us3447", label %"for input_wrapper.s0.c.c1134.us3441.epil"

"for input_wrapper.s0.c.c1134.us3441.epil":       ; preds = %"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa", %"for input_wrapper.s0.c.c1134.us3441.epil"
  %indvars.iv4551.epil = phi i64 [ %indvars.iv.next4552.epil, %"for input_wrapper.s0.c.c1134.us3441.epil" ], [ %indvars.iv4551.unr, %"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa" ]
  %epil.iter6051 = phi i64 [ %epil.iter6051.sub, %"for input_wrapper.s0.c.c1134.us3441.epil" ], [ %xtraiter6050, %"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa" ]
  %9872 = shl nuw nsw i64 %indvars.iv4551.epil, 3
  %9873 = add nsw i64 %9872, %9830
  %9874 = getelementptr inbounds i8, i8* %172, i64 %9873
  %9875 = bitcast i8* %9874 to <8 x i8>*
  %9876 = load <8 x i8>, <8 x i8>* %9875, align 4, !tbaa !397
  %9877 = zext <8 x i8> %9876 to <8 x i16>
  %9878 = sub nsw <8 x i16> %9877, %9219
  %9879 = add nsw i64 %9872, %9831
  %9880 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9879
  %9881 = bitcast i16* %9880 to <8 x i16>*
  store <8 x i16> %9878, <8 x i16>* %9881, align 8, !tbaa !399
  %indvars.iv.next4552.epil = add nuw nsw i64 %indvars.iv4551.epil, 1
  %epil.iter6051.sub = add i64 %epil.iter6051, -1
  %epil.iter6051.cmp.not = icmp eq i64 %epil.iter6051.sub, 0
  br i1 %epil.iter6051.cmp.not, label %"end for input_wrapper.s0.c.c1135.loopexit.us3447", label %"for input_wrapper.s0.c.c1134.us3441.epil", !llvm.loop !477

"end for input_wrapper.s0.c.c1135.loopexit.us3447": ; preds = %"for input_wrapper.s0.c.c1134.us3441.epil", %"end for input_wrapper.s0.c.c1135.loopexit.us3447.unr-lcssa"
  %indvars.iv.next4554 = add nuw nsw i64 %indvars.iv4553, 1
  %.not1996.us3445 = icmp eq i64 %indvars.iv4553, %9266
  br i1 %.not1996.us3445, label %"end for input_wrapper.s0.x.rebased1130", label %"for input_wrapper.s0.x.rebased1129.us3436"

"end for input_wrapper.s0.x.rebased1130":         ; preds = %"end for input_wrapper.s0.c.c1135.loopexit.us3447", %"end for input_wrapper.s0.c.c.rebased1140.loopexit.us", %"for input_wrapper.s0.x.rebased1129.preheader.split", %"for input_wrapper.s0.y.rebased1124"
  %indvars.iv.next4564 = add nuw nsw i64 %indvars.iv4563, 1
  %.not1995 = icmp eq i64 %indvars.iv4563, %9297
  br i1 %.not1995, label %"consume input_wrapper1180", label %"for input_wrapper.s0.y.rebased1124"

then_bb1147:                                      ; preds = %next_bb1120
  br i1 %9292, label %"for input_wrapper.s0.y.rebased1151", label %"consume input_wrapper1180", !prof !387

next_bb1148:                                      ; preds = %next_bb1120
  br i1 %9292, label %"for input_wrapper.s0.y.rebased1167", label %"consume input_wrapper1180", !prof !387

"for input_wrapper.s0.y.rebased1151":             ; preds = %then_bb1147, %"end for input_wrapper.s0.x.rebased1157"
  %indvars.iv4571 = phi i64 [ %indvars.iv.next4572, %"end for input_wrapper.s0.x.rebased1157" ], [ 0, %then_bb1147 ]
  %9882 = trunc i64 %indvars.iv4571 to i32
  %t41051154 = mul i32 %9197, %9882
  %9883 = add nsw i64 %indvars.iv4571, %9336
  %9884 = mul nsw i64 %9883, %9269
  %9885 = add nsw i64 %9884, %9331
  br i1 %brmerge5057.demorgan, label %"for input_wrapper.s0.x.rebased1156.us", label %"end for input_wrapper.s0.x.rebased1157", !prof !407

"for input_wrapper.s0.x.rebased1156.us":          ; preds = %"for input_wrapper.s0.y.rebased1151", %"end for input_wrapper.s0.c.c1162.loopexit.us"
  %indvars.iv4568 = phi i64 [ %indvars.iv.next4569, %"end for input_wrapper.s0.c.c1162.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased1151" ]
  %9886 = trunc i64 %indvars.iv4568 to i32
  %reass.add2794.us = add i32 %t41051154, %9886
  %reass.mul2795.us = mul i32 %reass.add2794.us, %9210
  %9887 = add nsw i64 %indvars.iv4568, %9264
  %9888 = mul nsw i64 %9887, %9265
  %9889 = add nsw i64 %9885, %9888
  %9890 = sext i32 %reass.mul2795.us to i64
  br i1 %9317, label %"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c1161.us"

"for input_wrapper.s0.c.c1161.us":                ; preds = %"for input_wrapper.s0.x.rebased1156.us", %"for input_wrapper.s0.c.c1161.us"
  %indvars.iv4566 = phi i64 [ %indvars.iv.next4567.3, %"for input_wrapper.s0.c.c1161.us" ], [ 0, %"for input_wrapper.s0.x.rebased1156.us" ]
  %niter6064 = phi i64 [ %niter6064.nsub.3, %"for input_wrapper.s0.c.c1161.us" ], [ %unroll_iter6063, %"for input_wrapper.s0.x.rebased1156.us" ]
  %9891 = shl nuw nsw i64 %indvars.iv4566, 2
  %9892 = add nsw i64 %9891, %9889
  %9893 = getelementptr inbounds i8, i8* %172, i64 %9892
  %9894 = bitcast i8* %9893 to <4 x i8>*
  %9895 = load <4 x i8>, <4 x i8>* %9894, align 4, !tbaa !397
  %9896 = zext <4 x i8> %9895 to <4 x i16>
  %9897 = sub nsw <4 x i16> %9896, %9225
  %9898 = add nsw i64 %9891, %9890
  %9899 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9898
  %9900 = bitcast i16* %9899 to <4 x i16>*
  store <4 x i16> %9897, <4 x i16>* %9900, align 8, !tbaa !399
  %indvars.iv.next4567 = shl i64 %indvars.iv4566, 2
  %9901 = or i64 %indvars.iv.next4567, 4
  %9902 = add nsw i64 %9901, %9889
  %9903 = getelementptr inbounds i8, i8* %172, i64 %9902
  %9904 = bitcast i8* %9903 to <4 x i8>*
  %9905 = load <4 x i8>, <4 x i8>* %9904, align 4, !tbaa !397
  %9906 = zext <4 x i8> %9905 to <4 x i16>
  %9907 = sub nsw <4 x i16> %9906, %9225
  %9908 = add nsw i64 %9901, %9890
  %9909 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9908
  %9910 = bitcast i16* %9909 to <4 x i16>*
  store <4 x i16> %9907, <4 x i16>* %9910, align 8, !tbaa !399
  %indvars.iv.next4567.1 = shl i64 %indvars.iv4566, 2
  %9911 = or i64 %indvars.iv.next4567.1, 8
  %9912 = add nsw i64 %9911, %9889
  %9913 = getelementptr inbounds i8, i8* %172, i64 %9912
  %9914 = bitcast i8* %9913 to <4 x i8>*
  %9915 = load <4 x i8>, <4 x i8>* %9914, align 4, !tbaa !397
  %9916 = zext <4 x i8> %9915 to <4 x i16>
  %9917 = sub nsw <4 x i16> %9916, %9225
  %9918 = add nsw i64 %9911, %9890
  %9919 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9918
  %9920 = bitcast i16* %9919 to <4 x i16>*
  store <4 x i16> %9917, <4 x i16>* %9920, align 8, !tbaa !399
  %indvars.iv.next4567.2 = shl i64 %indvars.iv4566, 2
  %9921 = or i64 %indvars.iv.next4567.2, 12
  %9922 = add nsw i64 %9921, %9889
  %9923 = getelementptr inbounds i8, i8* %172, i64 %9922
  %9924 = bitcast i8* %9923 to <4 x i8>*
  %9925 = load <4 x i8>, <4 x i8>* %9924, align 4, !tbaa !397
  %9926 = zext <4 x i8> %9925 to <4 x i16>
  %9927 = sub nsw <4 x i16> %9926, %9225
  %9928 = add nsw i64 %9921, %9890
  %9929 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9928
  %9930 = bitcast i16* %9929 to <4 x i16>*
  store <4 x i16> %9927, <4 x i16>* %9930, align 8, !tbaa !399
  %indvars.iv.next4567.3 = add nuw nsw i64 %indvars.iv4566, 4
  %niter6064.nsub.3 = add i64 %niter6064, -4
  %niter6064.ncmp.3 = icmp eq i64 %niter6064.nsub.3, 0
  br i1 %niter6064.ncmp.3, label %"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c1161.us"

"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1161.us", %"for input_wrapper.s0.x.rebased1156.us"
  %indvars.iv4566.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1156.us" ], [ %indvars.iv.next4567.3, %"for input_wrapper.s0.c.c1161.us" ]
  br i1 %lcmp.mod6062.not, label %"end for input_wrapper.s0.c.c1162.loopexit.us", label %"for input_wrapper.s0.c.c1161.us.epil"

"for input_wrapper.s0.c.c1161.us.epil":           ; preds = %"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c1161.us.epil"
  %indvars.iv4566.epil = phi i64 [ %indvars.iv.next4567.epil, %"for input_wrapper.s0.c.c1161.us.epil" ], [ %indvars.iv4566.unr, %"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa" ]
  %epil.iter6061 = phi i64 [ %epil.iter6061.sub, %"for input_wrapper.s0.c.c1161.us.epil" ], [ %xtraiter6060, %"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa" ]
  %9931 = shl nuw nsw i64 %indvars.iv4566.epil, 2
  %9932 = add nsw i64 %9931, %9889
  %9933 = getelementptr inbounds i8, i8* %172, i64 %9932
  %9934 = bitcast i8* %9933 to <4 x i8>*
  %9935 = load <4 x i8>, <4 x i8>* %9934, align 4, !tbaa !397
  %9936 = zext <4 x i8> %9935 to <4 x i16>
  %9937 = sub nsw <4 x i16> %9936, %9225
  %9938 = add nsw i64 %9931, %9890
  %9939 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9938
  %9940 = bitcast i16* %9939 to <4 x i16>*
  store <4 x i16> %9937, <4 x i16>* %9940, align 8, !tbaa !399
  %indvars.iv.next4567.epil = add nuw nsw i64 %indvars.iv4566.epil, 1
  %epil.iter6061.sub = add i64 %epil.iter6061, -1
  %epil.iter6061.cmp.not = icmp eq i64 %epil.iter6061.sub, 0
  br i1 %epil.iter6061.cmp.not, label %"end for input_wrapper.s0.c.c1162.loopexit.us", label %"for input_wrapper.s0.c.c1161.us.epil", !llvm.loop !478

"end for input_wrapper.s0.c.c1162.loopexit.us":   ; preds = %"for input_wrapper.s0.c.c1161.us.epil", %"end for input_wrapper.s0.c.c1162.loopexit.us.unr-lcssa"
  %indvars.iv.next4569 = add nuw nsw i64 %indvars.iv4568, 1
  %.not1993.us = icmp eq i64 %indvars.iv4568, %9266
  br i1 %.not1993.us, label %"end for input_wrapper.s0.x.rebased1157", label %"for input_wrapper.s0.x.rebased1156.us"

"end for input_wrapper.s0.x.rebased1157":         ; preds = %"end for input_wrapper.s0.c.c1162.loopexit.us", %"for input_wrapper.s0.y.rebased1151"
  %indvars.iv.next4572 = add nuw nsw i64 %indvars.iv4571, 1
  %.not1992 = icmp eq i64 %indvars.iv4571, %9298
  br i1 %.not1992, label %"consume input_wrapper1180", label %"for input_wrapper.s0.y.rebased1151"

"for input_wrapper.s0.y.rebased1167":             ; preds = %next_bb1148, %"end for input_wrapper.s0.x.rebased1173"
  %indvars.iv4579 = phi i64 [ %indvars.iv.next4580, %"end for input_wrapper.s0.x.rebased1173" ], [ 0, %next_bb1148 ]
  %9941 = trunc i64 %indvars.iv4579 to i32
  %t41121170 = mul i32 %9197, %9941
  %9942 = add nsw i64 %indvars.iv4579, %9336
  %9943 = mul nsw i64 %9942, %9269
  %9944 = add nsw i64 %9943, %9331
  br i1 %brmerge5060.demorgan, label %iter.check5528, label %"end for input_wrapper.s0.x.rebased1173", !prof !407

iter.check5528:                                   ; preds = %"for input_wrapper.s0.y.rebased1167", %"end for input_wrapper.s0.c1178.loopexit.us"
  %indvars.iv4576 = phi i64 [ %indvars.iv.next4577, %"end for input_wrapper.s0.c1178.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased1167" ]
  %9945 = trunc i64 %indvars.iv4576 to i32
  %reass.add2796.us = add i32 %t41121170, %9945
  %reass.mul2797.us = mul i32 %reass.add2796.us, %9210
  %9946 = add nsw i64 %indvars.iv4576, %9264
  %9947 = mul nsw i64 %9946, %9265
  %9948 = add nsw i64 %9944, %9947
  %9949 = sext i32 %reass.mul2797.us to i64
  br i1 %min.iters.check5526, label %"for input_wrapper.s0.c1177.us.preheader", label %vector.main.loop.iter.check5530

vector.main.loop.iter.check5530:                  ; preds = %iter.check5528
  br i1 %min.iters.check5529, label %vec.epilog.ph5553, label %vector.ph5531

vector.ph5531:                                    ; preds = %vector.main.loop.iter.check5530
  br i1 %9318, label %middle.block5523.unr-lcssa, label %vector.body5525

vector.body5525:                                  ; preds = %vector.ph5531, %vector.body5525
  %index5534 = phi i64 [ %index.next5535.1, %vector.body5525 ], [ 0, %vector.ph5531 ]
  %niter6068 = phi i64 [ %niter6068.nsub.1, %vector.body5525 ], [ %unroll_iter6067, %vector.ph5531 ]
  %9950 = add nsw i64 %index5534, %9948
  %9951 = getelementptr inbounds i8, i8* %172, i64 %9950
  %9952 = bitcast i8* %9951 to <16 x i8>*
  %wide.load5537 = load <16 x i8>, <16 x i8>* %9952, align 1, !tbaa !397
  %9953 = getelementptr inbounds i8, i8* %9951, i64 16
  %9954 = bitcast i8* %9953 to <16 x i8>*
  %wide.load5538 = load <16 x i8>, <16 x i8>* %9954, align 1, !tbaa !397
  %9955 = getelementptr inbounds i8, i8* %9951, i64 32
  %9956 = bitcast i8* %9955 to <16 x i8>*
  %wide.load5539 = load <16 x i8>, <16 x i8>* %9956, align 1, !tbaa !397
  %9957 = getelementptr inbounds i8, i8* %9951, i64 48
  %9958 = bitcast i8* %9957 to <16 x i8>*
  %wide.load5540 = load <16 x i8>, <16 x i8>* %9958, align 1, !tbaa !397
  %9959 = zext <16 x i8> %wide.load5537 to <16 x i16>
  %9960 = zext <16 x i8> %wide.load5538 to <16 x i16>
  %9961 = zext <16 x i8> %wide.load5539 to <16 x i16>
  %9962 = zext <16 x i8> %wide.load5540 to <16 x i16>
  %9963 = sub nsw <16 x i16> %9959, %broadcast.splat5542
  %9964 = sub nsw <16 x i16> %9960, %broadcast.splat5544
  %9965 = sub nsw <16 x i16> %9961, %broadcast.splat5546
  %9966 = sub nsw <16 x i16> %9962, %broadcast.splat5548
  %9967 = add nsw i64 %index5534, %9949
  %9968 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9967
  %9969 = bitcast i16* %9968 to <16 x i16>*
  store <16 x i16> %9963, <16 x i16>* %9969, align 2, !tbaa !399
  %9970 = getelementptr inbounds i16, i16* %9968, i64 16
  %9971 = bitcast i16* %9970 to <16 x i16>*
  store <16 x i16> %9964, <16 x i16>* %9971, align 2, !tbaa !399
  %9972 = getelementptr inbounds i16, i16* %9968, i64 32
  %9973 = bitcast i16* %9972 to <16 x i16>*
  store <16 x i16> %9965, <16 x i16>* %9973, align 2, !tbaa !399
  %9974 = getelementptr inbounds i16, i16* %9968, i64 48
  %9975 = bitcast i16* %9974 to <16 x i16>*
  store <16 x i16> %9966, <16 x i16>* %9975, align 2, !tbaa !399
  %index.next5535 = or i64 %index5534, 64
  %9976 = add nsw i64 %index.next5535, %9948
  %9977 = getelementptr inbounds i8, i8* %172, i64 %9976
  %9978 = bitcast i8* %9977 to <16 x i8>*
  %wide.load5537.1 = load <16 x i8>, <16 x i8>* %9978, align 1, !tbaa !397
  %9979 = getelementptr inbounds i8, i8* %9977, i64 16
  %9980 = bitcast i8* %9979 to <16 x i8>*
  %wide.load5538.1 = load <16 x i8>, <16 x i8>* %9980, align 1, !tbaa !397
  %9981 = getelementptr inbounds i8, i8* %9977, i64 32
  %9982 = bitcast i8* %9981 to <16 x i8>*
  %wide.load5539.1 = load <16 x i8>, <16 x i8>* %9982, align 1, !tbaa !397
  %9983 = getelementptr inbounds i8, i8* %9977, i64 48
  %9984 = bitcast i8* %9983 to <16 x i8>*
  %wide.load5540.1 = load <16 x i8>, <16 x i8>* %9984, align 1, !tbaa !397
  %9985 = zext <16 x i8> %wide.load5537.1 to <16 x i16>
  %9986 = zext <16 x i8> %wide.load5538.1 to <16 x i16>
  %9987 = zext <16 x i8> %wide.load5539.1 to <16 x i16>
  %9988 = zext <16 x i8> %wide.load5540.1 to <16 x i16>
  %9989 = sub nsw <16 x i16> %9985, %broadcast.splat5542
  %9990 = sub nsw <16 x i16> %9986, %broadcast.splat5544
  %9991 = sub nsw <16 x i16> %9987, %broadcast.splat5546
  %9992 = sub nsw <16 x i16> %9988, %broadcast.splat5548
  %9993 = add nsw i64 %index.next5535, %9949
  %9994 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %9993
  %9995 = bitcast i16* %9994 to <16 x i16>*
  store <16 x i16> %9989, <16 x i16>* %9995, align 2, !tbaa !399
  %9996 = getelementptr inbounds i16, i16* %9994, i64 16
  %9997 = bitcast i16* %9996 to <16 x i16>*
  store <16 x i16> %9990, <16 x i16>* %9997, align 2, !tbaa !399
  %9998 = getelementptr inbounds i16, i16* %9994, i64 32
  %9999 = bitcast i16* %9998 to <16 x i16>*
  store <16 x i16> %9991, <16 x i16>* %9999, align 2, !tbaa !399
  %10000 = getelementptr inbounds i16, i16* %9994, i64 48
  %10001 = bitcast i16* %10000 to <16 x i16>*
  store <16 x i16> %9992, <16 x i16>* %10001, align 2, !tbaa !399
  %index.next5535.1 = add i64 %index5534, 128
  %niter6068.nsub.1 = add i64 %niter6068, -2
  %niter6068.ncmp.1 = icmp eq i64 %niter6068.nsub.1, 0
  br i1 %niter6068.ncmp.1, label %middle.block5523.unr-lcssa, label %vector.body5525, !llvm.loop !479

middle.block5523.unr-lcssa:                       ; preds = %vector.body5525, %vector.ph5531
  %index5534.unr = phi i64 [ 0, %vector.ph5531 ], [ %index.next5535.1, %vector.body5525 ]
  br i1 %lcmp.mod6066.not, label %middle.block5523, label %vector.body5525.epil

vector.body5525.epil:                             ; preds = %middle.block5523.unr-lcssa
  %10002 = add nsw i64 %index5534.unr, %9948
  %10003 = getelementptr inbounds i8, i8* %172, i64 %10002
  %10004 = bitcast i8* %10003 to <16 x i8>*
  %wide.load5537.epil = load <16 x i8>, <16 x i8>* %10004, align 1, !tbaa !397
  %10005 = getelementptr inbounds i8, i8* %10003, i64 16
  %10006 = bitcast i8* %10005 to <16 x i8>*
  %wide.load5538.epil = load <16 x i8>, <16 x i8>* %10006, align 1, !tbaa !397
  %10007 = getelementptr inbounds i8, i8* %10003, i64 32
  %10008 = bitcast i8* %10007 to <16 x i8>*
  %wide.load5539.epil = load <16 x i8>, <16 x i8>* %10008, align 1, !tbaa !397
  %10009 = getelementptr inbounds i8, i8* %10003, i64 48
  %10010 = bitcast i8* %10009 to <16 x i8>*
  %wide.load5540.epil = load <16 x i8>, <16 x i8>* %10010, align 1, !tbaa !397
  %10011 = zext <16 x i8> %wide.load5537.epil to <16 x i16>
  %10012 = zext <16 x i8> %wide.load5538.epil to <16 x i16>
  %10013 = zext <16 x i8> %wide.load5539.epil to <16 x i16>
  %10014 = zext <16 x i8> %wide.load5540.epil to <16 x i16>
  %10015 = sub nsw <16 x i16> %10011, %broadcast.splat5542
  %10016 = sub nsw <16 x i16> %10012, %broadcast.splat5544
  %10017 = sub nsw <16 x i16> %10013, %broadcast.splat5546
  %10018 = sub nsw <16 x i16> %10014, %broadcast.splat5548
  %10019 = add nsw i64 %index5534.unr, %9949
  %10020 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10019
  %10021 = bitcast i16* %10020 to <16 x i16>*
  store <16 x i16> %10015, <16 x i16>* %10021, align 2, !tbaa !399
  %10022 = getelementptr inbounds i16, i16* %10020, i64 16
  %10023 = bitcast i16* %10022 to <16 x i16>*
  store <16 x i16> %10016, <16 x i16>* %10023, align 2, !tbaa !399
  %10024 = getelementptr inbounds i16, i16* %10020, i64 32
  %10025 = bitcast i16* %10024 to <16 x i16>*
  store <16 x i16> %10017, <16 x i16>* %10025, align 2, !tbaa !399
  %10026 = getelementptr inbounds i16, i16* %10020, i64 48
  %10027 = bitcast i16* %10026 to <16 x i16>*
  store <16 x i16> %10018, <16 x i16>* %10027, align 2, !tbaa !399
  br label %middle.block5523

middle.block5523:                                 ; preds = %middle.block5523.unr-lcssa, %vector.body5525.epil
  br i1 %cmp.n5536, label %"end for input_wrapper.s0.c1178.loopexit.us", label %vec.epilog.iter.check5552

vec.epilog.iter.check5552:                        ; preds = %middle.block5523
  br i1 %min.epilog.iters.check5555, label %"for input_wrapper.s0.c1177.us.preheader", label %vec.epilog.ph5553

vec.epilog.ph5553:                                ; preds = %vector.main.loop.iter.check5530, %vec.epilog.iter.check5552
  %vec.epilog.resume.val5556 = phi i64 [ %n.vec5533, %vec.epilog.iter.check5552 ], [ 0, %vector.main.loop.iter.check5530 ]
  br label %vec.epilog.vector.body5551

vec.epilog.vector.body5551:                       ; preds = %vec.epilog.vector.body5551, %vec.epilog.ph5553
  %index5559 = phi i64 [ %vec.epilog.resume.val5556, %vec.epilog.ph5553 ], [ %index.next5560, %vec.epilog.vector.body5551 ]
  %10028 = add nsw i64 %index5559, %9948
  %10029 = getelementptr inbounds i8, i8* %172, i64 %10028
  %10030 = bitcast i8* %10029 to <8 x i8>*
  %wide.load5563 = load <8 x i8>, <8 x i8>* %10030, align 1, !tbaa !397
  %10031 = zext <8 x i8> %wide.load5563 to <8 x i16>
  %10032 = sub nsw <8 x i16> %10031, %broadcast.splat5565
  %10033 = add nsw i64 %index5559, %9949
  %10034 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10033
  %10035 = bitcast i16* %10034 to <8 x i16>*
  store <8 x i16> %10032, <8 x i16>* %10035, align 2, !tbaa !399
  %index.next5560 = add i64 %index5559, 8
  %10036 = icmp eq i64 %index.next5560, %n.vec5558
  br i1 %10036, label %vec.epilog.middle.block5549, label %vec.epilog.vector.body5551, !llvm.loop !480

vec.epilog.middle.block5549:                      ; preds = %vec.epilog.vector.body5551
  br i1 %cmp.n5562, label %"end for input_wrapper.s0.c1178.loopexit.us", label %"for input_wrapper.s0.c1177.us.preheader"

"for input_wrapper.s0.c1177.us.preheader":        ; preds = %iter.check5528, %vec.epilog.iter.check5552, %vec.epilog.middle.block5549
  %indvars.iv4574.ph = phi i64 [ 0, %iter.check5528 ], [ %n.vec5533, %vec.epilog.iter.check5552 ], [ %n.vec5558, %vec.epilog.middle.block5549 ]
  br label %"for input_wrapper.s0.c1177.us"

"for input_wrapper.s0.c1177.us":                  ; preds = %"for input_wrapper.s0.c1177.us.preheader", %"for input_wrapper.s0.c1177.us"
  %indvars.iv4574 = phi i64 [ %indvars.iv.next4575, %"for input_wrapper.s0.c1177.us" ], [ %indvars.iv4574.ph, %"for input_wrapper.s0.c1177.us.preheader" ]
  %10037 = add nsw i64 %indvars.iv4574, %9948
  %10038 = getelementptr inbounds i8, i8* %172, i64 %10037
  %10039 = load i8, i8* %10038, align 1, !tbaa !397
  %10040 = zext i8 %10039 to i16
  %10041 = sub nsw i16 %10040, %9226
  %10042 = add nsw i64 %indvars.iv4574, %9949
  %10043 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10042
  store i16 %10041, i16* %10043, align 2, !tbaa !399
  %indvars.iv.next4575 = add nuw nsw i64 %indvars.iv4574, 1
  %.not1991.us = icmp eq i64 %indvars.iv.next4575, %9274
  br i1 %.not1991.us, label %"end for input_wrapper.s0.c1178.loopexit.us", label %"for input_wrapper.s0.c1177.us", !llvm.loop !481

"end for input_wrapper.s0.c1178.loopexit.us":     ; preds = %"for input_wrapper.s0.c1177.us", %vec.epilog.middle.block5549, %middle.block5523
  %indvars.iv.next4577 = add nuw nsw i64 %indvars.iv4576, 1
  %.not1990.us = icmp eq i64 %indvars.iv4576, %9266
  br i1 %.not1990.us, label %"end for input_wrapper.s0.x.rebased1173", label %iter.check5528

"end for input_wrapper.s0.x.rebased1173":         ; preds = %"end for input_wrapper.s0.c1178.loopexit.us", %"for input_wrapper.s0.y.rebased1167"
  %indvars.iv.next4580 = add nuw nsw i64 %indvars.iv4579, 1
  %.not1989 = icmp eq i64 %indvars.iv4579, %9299
  br i1 %.not1989, label %"consume input_wrapper1180", label %"for input_wrapper.s0.y.rebased1167"

"consume input_wrapper1180":                      ; preds = %"end for input_wrapper.s0.x.rebased1102.loopexit.us", %"end for input_wrapper.s0.x.rebased1130", %"end for input_wrapper.s0.x.rebased1157", %"end for input_wrapper.s0.x.rebased1173", %"end for input_wrapper.s0.x.x.rebased1078", %then_bb1091, %next_bb1148, %then_bb1147, %then_bb1119, %then_bb1049
  %10044 = trunc i64 %9334 to i32
  %10045 = mul i32 %189, %10044
  %t40451038 = add i32 %10045, %9333
  %t41171184 = sub i32 %t40451038, %reass.add2799
  br i1 %208, label %"for output.s0.x.xo1185.preheader", label %"end for output.s0.x.xo1186", !prof !387

"for output.s0.x.xo1185.preheader":               ; preds = %"consume input_wrapper1180"
  %10046 = insertelement <8 x i32> poison, i32 %t41171184, i32 0
  %10047 = shufflevector <8 x i32> %10046, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %"for output.s0.x.xo1185"

"for output.s0.x.xo1185":                         ; preds = %"for output.s0.x.xo1185.preheader", %"end for output.s0.c.co1214"
  %output.s0.x.xo1187 = phi i32 [ %10223, %"end for output.s0.c.co1214" ], [ 0, %"for output.s0.x.xo1185.preheader" ]
  %a354 = shl nsw i32 %output.s0.x.xo1187, 3
  %10048 = icmp sgt i32 %b356, %a354
  %output.s0.x.x.base.s1188 = select i1 %10048, i32 %a354, i32 %b356
  %t41351189 = add nsw i32 %output.s0.x.x.base.s1188, %184
  %10049 = insertelement <4 x i32> poison, i32 %t41351189, i32 0
  %10050 = shufflevector <4 x i32> %10049, <4 x i32> undef, <4 x i32> zeroinitializer
  %10051 = add nsw <4 x i32> %10050, <i32 1, i32 2, i32 3, i32 4>
  br i1 %9238, label %"for output.s0.c.co1213.preheader", label %"end for output.s0.c.co1214", !prof !387

"for output.s0.c.co1213.preheader":               ; preds = %"for output.s0.x.xo1185"
  %t41421196 = add nsw i32 %t41351189, 7
  %t41411195 = add nsw i32 %t41351189, 6
  %t41401194 = add nsw i32 %t41351189, 5
  %10052 = insertelement <8 x i32> poison, i32 %t41351189, i32 0
  %10053 = extractelement <4 x i32> %10051, i32 0
  %10054 = insertelement <8 x i32> %10052, i32 %10053, i32 1
  %10055 = extractelement <4 x i32> %10051, i32 1
  %10056 = insertelement <8 x i32> %10054, i32 %10055, i32 2
  %10057 = extractelement <4 x i32> %10051, i32 2
  %10058 = insertelement <8 x i32> %10056, i32 %10057, i32 3
  %10059 = extractelement <4 x i32> %10051, i32 3
  %10060 = insertelement <8 x i32> %10058, i32 %10059, i32 4
  %10061 = insertelement <8 x i32> %10060, i32 %t41401194, i32 5
  %10062 = insertelement <8 x i32> %10061, i32 %t41411195, i32 6
  %10063 = insertelement <8 x i32> %10062, i32 %t41421196, i32 7
  %10064 = mul nsw <8 x i32> %10063, %9321
  %10065 = sub <8 x i32> %10064, %9323
  %10066 = mul nsw <8 x i32> %10063, %9325
  %10067 = add nsw <8 x i32> %10066, %10047
  %10068 = sext <8 x i32> %10067 to <8 x i64>
  %10069 = sext <8 x i32> %10065 to <8 x i64>
  br label %"for output.s0.c.co1213"

"end for output.s0.x.xo1186":                     ; preds = %"end for output.s0.c.co1214", %"consume input_wrapper1180"
  %tobool.not.i2465.not = icmp eq i8* %9337, null
  br i1 %tobool.not.i2465.not, label %call_destructor.exit2468, label %if.then.i2466

if.then.i2466:                                    ; preds = %"end for output.s0.x.xo1186"
  call void @halide_free(i8* null, i8* nonnull %9337) #17
  br label %call_destructor.exit2468

call_destructor.exit2468:                         ; preds = %"end for output.s0.x.xo1186", %if.then.i2466
  %indvars.iv.next4619 = add nuw nsw i64 %indvars.iv4618, 1
  %10070 = icmp eq i64 %indvars.iv.next4619, %zext4622
  br i1 %10070, label %"end for output.s0.y.rebased1043", label %"for output.s0.y.rebased1042"

"for output.s0.c.co1213":                         ; preds = %"for output.s0.c.co1213.preheader", %"consume convolved1240"
  %indvars.iv4615 = phi i64 [ 0, %"for output.s0.c.co1213.preheader" ], [ %indvars.iv.next4616, %"consume convolved1240" ]
  %10071 = shl nuw nsw i64 %indvars.iv4615, 3
  %10072 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %10071
  %10073 = bitcast i32* %10072 to <8 x i32>*
  %10074 = load <8 x i32>, <8 x i32>* %10073, align 32, !tbaa !391
  %10075 = mul nsw i64 %indvars.iv4615, %9285
  br i1 %9239, label %"for convolved.s1.r19$y1218.preheader", label %"consume convolved1240", !prof !387

"for convolved.s1.r19$y1218.preheader":           ; preds = %"for output.s0.c.co1213"
  br i1 %9240, label %"for convolved.s1.r19$y1218.preheader.split.us", label %"consume convolved1240", !prof !387

"for convolved.s1.r19$y1218.preheader.split.us":  ; preds = %"for convolved.s1.r19$y1218.preheader"
  br i1 %9179, label %"for convolved.s1.r19$y1218.us.us", label %"consume convolved1240", !prof !387

"for convolved.s1.r19$y1218.us.us":               ; preds = %"for convolved.s1.r19$y1218.preheader.split.us", %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us"
  %indvars.iv4612 = phi i64 [ %indvars.iv.next4613, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.272.30.us.us = phi <8 x i32> [ %10222, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.242.30.us.us = phi <8 x i32> [ %10207, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.212.30.us.us = phi <8 x i32> [ %10192, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.182.30.us.us = phi <8 x i32> [ %10177, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.142.36.us.us = phi <8 x i32> [ %10162, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.102.36.us.us = phi <8 x i32> [ %10147, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.62.36.us.us = phi <8 x i32> [ %10132, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %convolved1914.sroa.0.82.us.us = phi <8 x i32> [ %10117, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ]
  %10076 = trunc i64 %indvars.iv4612 to i32
  %10077 = mul i32 %10076, %dilation_y
  %10078 = sub i32 %10077, %t39901017
  %t41441221.us.us = mul nsw i32 %t40521052, %10078
  %10079 = mul nsw i64 %indvars.iv4612, %9283
  %10080 = add nsw i64 %10079, %10075
  %10081 = sext i32 %t41441221.us.us to i64
  %10082 = insertelement <8 x i64> poison, i64 %10081, i32 0
  br label %"for convolved.s1.r19$x1223.us.us.us"

"for convolved.s1.r19$x1223.us.us.us":            ; preds = %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us", %"for convolved.s1.r19$y1218.us.us"
  %indvars.iv4600 = phi i64 [ %indvars.iv.next4601, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.272.31.us.us.us = phi <8 x i32> [ %10222, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.272.30.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.242.31.us.us.us = phi <8 x i32> [ %10207, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.242.30.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.212.31.us.us.us = phi <8 x i32> [ %10192, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.212.30.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.182.31.us.us.us = phi <8 x i32> [ %10177, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.182.30.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.142.37.us.us.us = phi <8 x i32> [ %10162, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.142.36.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.102.37.us.us.us = phi <8 x i32> [ %10147, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.102.36.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.62.37.us.us.us = phi <8 x i32> [ %10132, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.62.36.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %convolved1914.sroa.0.83.us.us.us = phi <8 x i32> [ %10117, %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us" ], [ %convolved1914.sroa.0.82.us.us, %"for convolved.s1.r19$y1218.us.us" ]
  %10083 = mul nsw i64 %indvars.iv4600, %9280
  %10084 = insertelement <8 x i64> poison, i64 %10083, i32 0
  %10085 = shufflevector <8 x i64> %10084, <8 x i64> undef, <8 x i32> zeroinitializer
  %10086 = add nsw <8 x i64> %10085, %10069
  %10087 = mul nsw <8 x i64> %10086, %9327
  %10088 = mul nsw i64 %indvars.iv4600, %9281
  %10089 = add nsw i64 %10080, %10088
  br label %"for convolved.s1.r19$z.r1151237.us.us.us"

"for convolved.s1.r19$z.r1151237.us.us.us":       ; preds = %"for convolved.s1.r19$z.r1151237.us.us.us", %"for convolved.s1.r19$x1223.us.us.us"
  %indvars.iv4598 = phi i64 [ %indvars.iv.next4599, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ 0, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.272.33.us.us.us = phi <8 x i32> [ %10222, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.272.31.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.242.33.us.us.us = phi <8 x i32> [ %10207, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.242.31.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.212.33.us.us.us = phi <8 x i32> [ %10192, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.212.31.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.182.33.us.us.us = phi <8 x i32> [ %10177, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.182.31.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.142.39.us.us.us = phi <8 x i32> [ %10162, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.142.37.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.102.39.us.us.us = phi <8 x i32> [ %10147, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.102.37.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.62.39.us.us.us = phi <8 x i32> [ %10132, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.62.37.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %convolved1914.sroa.0.85.us.us.us = phi <8 x i32> [ %10117, %"for convolved.s1.r19$z.r1151237.us.us.us" ], [ %convolved1914.sroa.0.83.us.us.us, %"for convolved.s1.r19$x1223.us.us.us" ]
  %10090 = shl nuw nsw i64 %indvars.iv4598, 2
  %10091 = insertelement <8 x i64> poison, i64 %10090, i32 0
  %10092 = add <8 x i64> %10091, %10082
  %10093 = shufflevector <8 x i64> %10092, <8 x i64> poison, <8 x i32> zeroinitializer
  %10094 = add <8 x i64> %10093, %10087
  %10095 = extractelement <8 x i64> %10094, i32 0
  %10096 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10095
  %10097 = bitcast i16* %10096 to <1 x i32>*
  %10098 = load <1 x i32>, <1 x i32>* %10097, align 8, !tbaa !399
  %10099 = shufflevector <1 x i32> %10098, <1 x i32> undef, <8 x i32> zeroinitializer
  %10100 = bitcast <8 x i32> %10099 to <16 x i16>
  %10101 = shl nuw nsw i64 %indvars.iv4598, 5
  %10102 = add nsw i64 %10101, %10089
  %10103 = getelementptr inbounds i16, i16* %9241, i64 %10102
  %10104 = bitcast i16* %10103 to <16 x i16>*
  %10105 = load <16 x i16>, <16 x i16>* %10104, align 32, !tbaa !412
  %10106 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10100, <16 x i16> %10105)
  %10107 = add <8 x i32> %10106, %convolved1914.sroa.0.85.us.us.us
  %10108 = getelementptr inbounds i16, i16* %10096, i64 2
  %10109 = bitcast i16* %10108 to <1 x i32>*
  %10110 = load <1 x i32>, <1 x i32>* %10109, align 4, !tbaa !399
  %10111 = shufflevector <1 x i32> %10110, <1 x i32> undef, <8 x i32> zeroinitializer
  %10112 = bitcast <8 x i32> %10111 to <16 x i16>
  %10113 = getelementptr inbounds i16, i16* %10103, i64 16
  %10114 = bitcast i16* %10113 to <16 x i16>*
  %10115 = load <16 x i16>, <16 x i16>* %10114, align 32, !tbaa !412
  %10116 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10112, <16 x i16> %10115)
  %10117 = add <8 x i32> %10107, %10116
  %10118 = extractelement <8 x i64> %10094, i32 1
  %10119 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10118
  %10120 = bitcast i16* %10119 to <1 x i32>*
  %10121 = load <1 x i32>, <1 x i32>* %10120, align 8, !tbaa !399
  %10122 = shufflevector <1 x i32> %10121, <1 x i32> undef, <8 x i32> zeroinitializer
  %10123 = bitcast <8 x i32> %10122 to <16 x i16>
  %10124 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10123, <16 x i16> %10105)
  %10125 = add <8 x i32> %10124, %convolved1914.sroa.62.39.us.us.us
  %10126 = getelementptr inbounds i16, i16* %10119, i64 2
  %10127 = bitcast i16* %10126 to <1 x i32>*
  %10128 = load <1 x i32>, <1 x i32>* %10127, align 4, !tbaa !399
  %10129 = shufflevector <1 x i32> %10128, <1 x i32> undef, <8 x i32> zeroinitializer
  %10130 = bitcast <8 x i32> %10129 to <16 x i16>
  %10131 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10130, <16 x i16> %10115)
  %10132 = add <8 x i32> %10125, %10131
  %10133 = extractelement <8 x i64> %10094, i32 2
  %10134 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10133
  %10135 = bitcast i16* %10134 to <1 x i32>*
  %10136 = load <1 x i32>, <1 x i32>* %10135, align 8, !tbaa !399
  %10137 = shufflevector <1 x i32> %10136, <1 x i32> undef, <8 x i32> zeroinitializer
  %10138 = bitcast <8 x i32> %10137 to <16 x i16>
  %10139 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10138, <16 x i16> %10105)
  %10140 = add <8 x i32> %10139, %convolved1914.sroa.102.39.us.us.us
  %10141 = getelementptr inbounds i16, i16* %10134, i64 2
  %10142 = bitcast i16* %10141 to <1 x i32>*
  %10143 = load <1 x i32>, <1 x i32>* %10142, align 4, !tbaa !399
  %10144 = shufflevector <1 x i32> %10143, <1 x i32> undef, <8 x i32> zeroinitializer
  %10145 = bitcast <8 x i32> %10144 to <16 x i16>
  %10146 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10145, <16 x i16> %10115)
  %10147 = add <8 x i32> %10140, %10146
  %10148 = extractelement <8 x i64> %10094, i32 3
  %10149 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10148
  %10150 = bitcast i16* %10149 to <1 x i32>*
  %10151 = load <1 x i32>, <1 x i32>* %10150, align 8, !tbaa !399
  %10152 = shufflevector <1 x i32> %10151, <1 x i32> undef, <8 x i32> zeroinitializer
  %10153 = bitcast <8 x i32> %10152 to <16 x i16>
  %10154 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10153, <16 x i16> %10105)
  %10155 = add <8 x i32> %10154, %convolved1914.sroa.142.39.us.us.us
  %10156 = getelementptr inbounds i16, i16* %10149, i64 2
  %10157 = bitcast i16* %10156 to <1 x i32>*
  %10158 = load <1 x i32>, <1 x i32>* %10157, align 4, !tbaa !399
  %10159 = shufflevector <1 x i32> %10158, <1 x i32> undef, <8 x i32> zeroinitializer
  %10160 = bitcast <8 x i32> %10159 to <16 x i16>
  %10161 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10160, <16 x i16> %10115)
  %10162 = add <8 x i32> %10155, %10161
  %10163 = extractelement <8 x i64> %10094, i32 4
  %10164 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10163
  %10165 = bitcast i16* %10164 to <1 x i32>*
  %10166 = load <1 x i32>, <1 x i32>* %10165, align 8, !tbaa !399
  %10167 = shufflevector <1 x i32> %10166, <1 x i32> undef, <8 x i32> zeroinitializer
  %10168 = bitcast <8 x i32> %10167 to <16 x i16>
  %10169 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10168, <16 x i16> %10105)
  %10170 = add <8 x i32> %10169, %convolved1914.sroa.182.33.us.us.us
  %10171 = getelementptr inbounds i16, i16* %10164, i64 2
  %10172 = bitcast i16* %10171 to <1 x i32>*
  %10173 = load <1 x i32>, <1 x i32>* %10172, align 4, !tbaa !399
  %10174 = shufflevector <1 x i32> %10173, <1 x i32> undef, <8 x i32> zeroinitializer
  %10175 = bitcast <8 x i32> %10174 to <16 x i16>
  %10176 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10175, <16 x i16> %10115)
  %10177 = add <8 x i32> %10170, %10176
  %10178 = extractelement <8 x i64> %10094, i32 5
  %10179 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10178
  %10180 = bitcast i16* %10179 to <1 x i32>*
  %10181 = load <1 x i32>, <1 x i32>* %10180, align 8, !tbaa !399
  %10182 = shufflevector <1 x i32> %10181, <1 x i32> undef, <8 x i32> zeroinitializer
  %10183 = bitcast <8 x i32> %10182 to <16 x i16>
  %10184 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10183, <16 x i16> %10105)
  %10185 = add <8 x i32> %10184, %convolved1914.sroa.212.33.us.us.us
  %10186 = getelementptr inbounds i16, i16* %10179, i64 2
  %10187 = bitcast i16* %10186 to <1 x i32>*
  %10188 = load <1 x i32>, <1 x i32>* %10187, align 4, !tbaa !399
  %10189 = shufflevector <1 x i32> %10188, <1 x i32> undef, <8 x i32> zeroinitializer
  %10190 = bitcast <8 x i32> %10189 to <16 x i16>
  %10191 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10190, <16 x i16> %10115)
  %10192 = add <8 x i32> %10185, %10191
  %10193 = extractelement <8 x i64> %10094, i32 6
  %10194 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10193
  %10195 = bitcast i16* %10194 to <1 x i32>*
  %10196 = load <1 x i32>, <1 x i32>* %10195, align 8, !tbaa !399
  %10197 = shufflevector <1 x i32> %10196, <1 x i32> undef, <8 x i32> zeroinitializer
  %10198 = bitcast <8 x i32> %10197 to <16 x i16>
  %10199 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10198, <16 x i16> %10105)
  %10200 = add <8 x i32> %10199, %convolved1914.sroa.242.33.us.us.us
  %10201 = getelementptr inbounds i16, i16* %10194, i64 2
  %10202 = bitcast i16* %10201 to <1 x i32>*
  %10203 = load <1 x i32>, <1 x i32>* %10202, align 4, !tbaa !399
  %10204 = shufflevector <1 x i32> %10203, <1 x i32> undef, <8 x i32> zeroinitializer
  %10205 = bitcast <8 x i32> %10204 to <16 x i16>
  %10206 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10205, <16 x i16> %10115)
  %10207 = add <8 x i32> %10200, %10206
  %10208 = extractelement <8 x i64> %10094, i32 7
  %10209 = getelementptr inbounds i16, i16* %input_wrapper1046, i64 %10208
  %10210 = bitcast i16* %10209 to <1 x i32>*
  %10211 = load <1 x i32>, <1 x i32>* %10210, align 8, !tbaa !399
  %10212 = shufflevector <1 x i32> %10211, <1 x i32> undef, <8 x i32> zeroinitializer
  %10213 = bitcast <8 x i32> %10212 to <16 x i16>
  %10214 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10213, <16 x i16> %10105)
  %10215 = add <8 x i32> %10214, %convolved1914.sroa.272.33.us.us.us
  %10216 = getelementptr inbounds i16, i16* %10209, i64 2
  %10217 = bitcast i16* %10216 to <1 x i32>*
  %10218 = load <1 x i32>, <1 x i32>* %10217, align 4, !tbaa !399
  %10219 = shufflevector <1 x i32> %10218, <1 x i32> undef, <8 x i32> zeroinitializer
  %10220 = bitcast <8 x i32> %10219 to <16 x i16>
  %10221 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %10220, <16 x i16> %10115)
  %10222 = add <8 x i32> %10215, %10221
  %indvars.iv.next4599 = add nuw nsw i64 %indvars.iv4598, 1
  %.not1988.us.us.us = icmp eq i64 %indvars.iv.next4599, %9275
  br i1 %.not1988.us.us.us, label %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us", label %"for convolved.s1.r19$z.r1151237.us.us.us"

"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r1151237.us.us.us"
  %indvars.iv.next4601 = add nuw nsw i64 %indvars.iv4600, 1
  %.not1987.us.us.us = icmp eq i64 %indvars.iv.next4601, %9282
  br i1 %.not1987.us.us.us, label %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us", label %"for convolved.s1.r19$x1223.us.us.us"

"end for convolved.s1.r19$x1224.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r1151238.loopexit.us.us.us"
  %indvars.iv.next4613 = add nuw nsw i64 %indvars.iv4612, 1
  %.not1986.us.us = icmp eq i64 %indvars.iv.next4613, %9284
  br i1 %.not1986.us.us, label %"consume convolved1240", label %"for convolved.s1.r19$y1218.us.us"

"end for output.s0.c.co1214":                     ; preds = %"consume convolved1240", %"for output.s0.x.xo1185"
  %10223 = add nuw nsw i32 %output.s0.x.xo1187, 1
  %.not1984 = icmp eq i32 %10223, %t40121023
  br i1 %.not1984, label %"end for output.s0.x.xo1186", label %"for output.s0.x.xo1185"

"consume convolved1240":                          ; preds = %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us", %"for convolved.s1.r19$y1218.preheader.split.us", %"for convolved.s1.r19$y1218.preheader", %"for output.s0.c.co1213"
  %convolved1914.sroa.272.35 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10222, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.242.35 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10207, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.212.35 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10192, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.182.35 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10177, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.142.41 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10162, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.41 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10147, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.41 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10132, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.87 = phi <8 x i32> [ %10074, %"for output.s0.c.co1213" ], [ %10074, %"for convolved.s1.r19$y1218.preheader" ], [ %10074, %"for convolved.s1.r19$y1218.preheader.split.us" ], [ %10117, %"end for convolved.s1.r19$x1224.loopexit.split.us.us.us" ]
  %10224 = sext <8 x i32> %convolved1914.sroa.0.87 to <8 x i64>
  %10225 = mul nsw <8 x i64> %10224, %9244
  %10226 = ashr <8 x i64> %10225, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10227 = add nsw <8 x i64> %10226, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a358 = ashr <8 x i64> %10227, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10228 = shufflevector <8 x i64> %a358, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10229 = icmp slt <4 x i64> %10228, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10230 = shufflevector <8 x i64> %a358, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10231 = icmp slt <4 x i64> %10230, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10232 = select <4 x i1> %10229, <4 x i64> %10228, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10233 = select <4 x i1> %10231, <4 x i64> %10230, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10234 = icmp sgt <4 x i64> %10232, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10235 = icmp sgt <4 x i64> %10233, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10236 = select <4 x i1> %10234, <4 x i64> %10232, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10237 = select <4 x i1> %10235, <4 x i64> %10233, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10238 = shufflevector <4 x i64> %10236, <4 x i64> %10237, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4620 = trunc <8 x i64> %10238 to <8 x i32>
  %10239 = ashr <8 x i32> %t4620, %9247
  %10240 = shl <8 x i32> %t4620, %9247
  %10241 = select <8 x i1> %9248, <8 x i32> %10239, <8 x i32> %10240
  %10242 = lshr <8 x i32> %t4620, %9254
  %10243 = shl <8 x i32> %t4620, %9254
  %10244 = select <8 x i1> %9255, <8 x i32> %10242, <8 x i32> %10243
  %10245 = and <8 x i32> %10244, %9250
  %10246 = add nsw <8 x i32> %10245, %10241
  %10247 = shufflevector <8 x i32> %10246, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10248 = shufflevector <8 x i32> %10246, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10249 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10247, <4 x i32> %10248) #11
  %10250 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10249, <8 x i16> %9258)
  %10251 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10250, <8 x i16> undef) #11
  %10252 = shufflevector <16 x i8> %10251, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10253 = icmp ugt <16 x i8> %9260, %10252
  %10254 = select <16 x i1> %10253, <16 x i8> %10252, <16 x i8> %9260
  %10255 = shufflevector <16 x i8> %10254, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10256 = icmp ugt <16 x i8> %10255, %9262
  %10257 = select <16 x i1> %10256, <16 x i8> %10255, <16 x i8> %9262
  %10258 = shufflevector <16 x i8> %10257, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10259 = insertelement <8 x i64> poison, i64 %10071, i32 0
  %10260 = shufflevector <8 x i64> %10259, <8 x i64> undef, <8 x i32> zeroinitializer
  %10261 = add nsw <8 x i64> %10260, %10068
  %10262 = extractelement <8 x i64> %10261, i32 0
  %10263 = getelementptr inbounds i8, i8* %182, i64 %10262
  %10264 = bitcast i8* %10263 to <8 x i8>*
  store <8 x i8> %10258, <8 x i8>* %10264, align 1, !tbaa !414
  %10265 = sext <8 x i32> %convolved1914.sroa.62.41 to <8 x i64>
  %10266 = mul nsw <8 x i64> %10265, %9244
  %10267 = ashr <8 x i64> %10266, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10268 = add nsw <8 x i64> %10267, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a364 = ashr <8 x i64> %10268, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10269 = shufflevector <8 x i64> %a364, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10270 = icmp slt <4 x i64> %10269, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10271 = shufflevector <8 x i64> %a364, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10272 = icmp slt <4 x i64> %10271, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10273 = select <4 x i1> %10270, <4 x i64> %10269, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10274 = select <4 x i1> %10272, <4 x i64> %10271, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10275 = icmp sgt <4 x i64> %10273, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10276 = icmp sgt <4 x i64> %10274, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10277 = select <4 x i1> %10275, <4 x i64> %10273, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10278 = select <4 x i1> %10276, <4 x i64> %10274, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10279 = shufflevector <4 x i64> %10277, <4 x i64> %10278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4624 = trunc <8 x i64> %10279 to <8 x i32>
  %10280 = ashr <8 x i32> %t4624, %9247
  %10281 = shl <8 x i32> %t4624, %9247
  %10282 = select <8 x i1> %9248, <8 x i32> %10280, <8 x i32> %10281
  %10283 = lshr <8 x i32> %t4624, %9254
  %10284 = shl <8 x i32> %t4624, %9254
  %10285 = select <8 x i1> %9255, <8 x i32> %10283, <8 x i32> %10284
  %10286 = and <8 x i32> %10285, %9250
  %10287 = add nsw <8 x i32> %10286, %10282
  %10288 = shufflevector <8 x i32> %10287, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10289 = shufflevector <8 x i32> %10287, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10290 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10288, <4 x i32> %10289) #11
  %10291 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10290, <8 x i16> %9258)
  %10292 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10291, <8 x i16> undef) #11
  %10293 = shufflevector <16 x i8> %10292, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10294 = icmp ugt <16 x i8> %9260, %10293
  %10295 = select <16 x i1> %10294, <16 x i8> %10293, <16 x i8> %9260
  %10296 = shufflevector <16 x i8> %10295, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10297 = icmp ugt <16 x i8> %10296, %9262
  %10298 = select <16 x i1> %10297, <16 x i8> %10296, <16 x i8> %9262
  %10299 = shufflevector <16 x i8> %10298, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10300 = extractelement <8 x i64> %10261, i32 1
  %10301 = getelementptr inbounds i8, i8* %182, i64 %10300
  %10302 = bitcast i8* %10301 to <8 x i8>*
  store <8 x i8> %10299, <8 x i8>* %10302, align 1, !tbaa !414
  %10303 = sext <8 x i32> %convolved1914.sroa.102.41 to <8 x i64>
  %10304 = mul nsw <8 x i64> %10303, %9244
  %10305 = ashr <8 x i64> %10304, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10306 = add nsw <8 x i64> %10305, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a370 = ashr <8 x i64> %10306, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10307 = shufflevector <8 x i64> %a370, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10308 = icmp slt <4 x i64> %10307, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10309 = shufflevector <8 x i64> %a370, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10310 = icmp slt <4 x i64> %10309, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10311 = select <4 x i1> %10308, <4 x i64> %10307, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10312 = select <4 x i1> %10310, <4 x i64> %10309, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10313 = icmp sgt <4 x i64> %10311, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10314 = icmp sgt <4 x i64> %10312, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10315 = select <4 x i1> %10313, <4 x i64> %10311, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10316 = select <4 x i1> %10314, <4 x i64> %10312, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10317 = shufflevector <4 x i64> %10315, <4 x i64> %10316, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4628 = trunc <8 x i64> %10317 to <8 x i32>
  %10318 = ashr <8 x i32> %t4628, %9247
  %10319 = shl <8 x i32> %t4628, %9247
  %10320 = select <8 x i1> %9248, <8 x i32> %10318, <8 x i32> %10319
  %10321 = lshr <8 x i32> %t4628, %9254
  %10322 = shl <8 x i32> %t4628, %9254
  %10323 = select <8 x i1> %9255, <8 x i32> %10321, <8 x i32> %10322
  %10324 = and <8 x i32> %10323, %9250
  %10325 = add nsw <8 x i32> %10324, %10320
  %10326 = shufflevector <8 x i32> %10325, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10327 = shufflevector <8 x i32> %10325, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10328 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10326, <4 x i32> %10327) #11
  %10329 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10328, <8 x i16> %9258)
  %10330 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10329, <8 x i16> undef) #11
  %10331 = shufflevector <16 x i8> %10330, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10332 = icmp ugt <16 x i8> %9260, %10331
  %10333 = select <16 x i1> %10332, <16 x i8> %10331, <16 x i8> %9260
  %10334 = shufflevector <16 x i8> %10333, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10335 = icmp ugt <16 x i8> %10334, %9262
  %10336 = select <16 x i1> %10335, <16 x i8> %10334, <16 x i8> %9262
  %10337 = shufflevector <16 x i8> %10336, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10338 = extractelement <8 x i64> %10261, i32 2
  %10339 = getelementptr inbounds i8, i8* %182, i64 %10338
  %10340 = bitcast i8* %10339 to <8 x i8>*
  store <8 x i8> %10337, <8 x i8>* %10340, align 1, !tbaa !414
  %10341 = sext <8 x i32> %convolved1914.sroa.142.41 to <8 x i64>
  %10342 = mul nsw <8 x i64> %10341, %9244
  %10343 = ashr <8 x i64> %10342, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10344 = add nsw <8 x i64> %10343, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a376 = ashr <8 x i64> %10344, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10345 = shufflevector <8 x i64> %a376, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10346 = icmp slt <4 x i64> %10345, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10347 = shufflevector <8 x i64> %a376, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10348 = icmp slt <4 x i64> %10347, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10349 = select <4 x i1> %10346, <4 x i64> %10345, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10350 = select <4 x i1> %10348, <4 x i64> %10347, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10351 = icmp sgt <4 x i64> %10349, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10352 = icmp sgt <4 x i64> %10350, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10353 = select <4 x i1> %10351, <4 x i64> %10349, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10354 = select <4 x i1> %10352, <4 x i64> %10350, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10355 = shufflevector <4 x i64> %10353, <4 x i64> %10354, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4632 = trunc <8 x i64> %10355 to <8 x i32>
  %10356 = ashr <8 x i32> %t4632, %9247
  %10357 = shl <8 x i32> %t4632, %9247
  %10358 = select <8 x i1> %9248, <8 x i32> %10356, <8 x i32> %10357
  %10359 = lshr <8 x i32> %t4632, %9254
  %10360 = shl <8 x i32> %t4632, %9254
  %10361 = select <8 x i1> %9255, <8 x i32> %10359, <8 x i32> %10360
  %10362 = and <8 x i32> %10361, %9250
  %10363 = add nsw <8 x i32> %10362, %10358
  %10364 = shufflevector <8 x i32> %10363, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10365 = shufflevector <8 x i32> %10363, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10366 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10364, <4 x i32> %10365) #11
  %10367 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10366, <8 x i16> %9258)
  %10368 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10367, <8 x i16> undef) #11
  %10369 = shufflevector <16 x i8> %10368, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10370 = icmp ugt <16 x i8> %9260, %10369
  %10371 = select <16 x i1> %10370, <16 x i8> %10369, <16 x i8> %9260
  %10372 = shufflevector <16 x i8> %10371, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10373 = icmp ugt <16 x i8> %10372, %9262
  %10374 = select <16 x i1> %10373, <16 x i8> %10372, <16 x i8> %9262
  %10375 = shufflevector <16 x i8> %10374, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10376 = extractelement <8 x i64> %10261, i32 3
  %10377 = getelementptr inbounds i8, i8* %182, i64 %10376
  %10378 = bitcast i8* %10377 to <8 x i8>*
  store <8 x i8> %10375, <8 x i8>* %10378, align 1, !tbaa !414
  %10379 = sext <8 x i32> %convolved1914.sroa.182.35 to <8 x i64>
  %10380 = mul nsw <8 x i64> %10379, %9244
  %10381 = ashr <8 x i64> %10380, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10382 = add nsw <8 x i64> %10381, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a382 = ashr <8 x i64> %10382, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10383 = shufflevector <8 x i64> %a382, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10384 = icmp slt <4 x i64> %10383, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10385 = shufflevector <8 x i64> %a382, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10386 = icmp slt <4 x i64> %10385, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10387 = select <4 x i1> %10384, <4 x i64> %10383, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10388 = select <4 x i1> %10386, <4 x i64> %10385, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10389 = icmp sgt <4 x i64> %10387, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10390 = icmp sgt <4 x i64> %10388, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10391 = select <4 x i1> %10389, <4 x i64> %10387, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10392 = select <4 x i1> %10390, <4 x i64> %10388, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10393 = shufflevector <4 x i64> %10391, <4 x i64> %10392, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4636 = trunc <8 x i64> %10393 to <8 x i32>
  %10394 = ashr <8 x i32> %t4636, %9247
  %10395 = shl <8 x i32> %t4636, %9247
  %10396 = select <8 x i1> %9248, <8 x i32> %10394, <8 x i32> %10395
  %10397 = lshr <8 x i32> %t4636, %9254
  %10398 = shl <8 x i32> %t4636, %9254
  %10399 = select <8 x i1> %9255, <8 x i32> %10397, <8 x i32> %10398
  %10400 = and <8 x i32> %10399, %9250
  %10401 = add nsw <8 x i32> %10400, %10396
  %10402 = shufflevector <8 x i32> %10401, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10403 = shufflevector <8 x i32> %10401, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10404 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10402, <4 x i32> %10403) #11
  %10405 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10404, <8 x i16> %9258)
  %10406 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10405, <8 x i16> undef) #11
  %10407 = shufflevector <16 x i8> %10406, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10408 = icmp ugt <16 x i8> %9260, %10407
  %10409 = select <16 x i1> %10408, <16 x i8> %10407, <16 x i8> %9260
  %10410 = shufflevector <16 x i8> %10409, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10411 = icmp ugt <16 x i8> %10410, %9262
  %10412 = select <16 x i1> %10411, <16 x i8> %10410, <16 x i8> %9262
  %10413 = shufflevector <16 x i8> %10412, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10414 = extractelement <8 x i64> %10261, i32 4
  %10415 = getelementptr inbounds i8, i8* %182, i64 %10414
  %10416 = bitcast i8* %10415 to <8 x i8>*
  store <8 x i8> %10413, <8 x i8>* %10416, align 1, !tbaa !414
  %10417 = sext <8 x i32> %convolved1914.sroa.212.35 to <8 x i64>
  %10418 = mul nsw <8 x i64> %10417, %9244
  %10419 = ashr <8 x i64> %10418, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10420 = add nsw <8 x i64> %10419, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a388 = ashr <8 x i64> %10420, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10421 = shufflevector <8 x i64> %a388, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10422 = icmp slt <4 x i64> %10421, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10423 = shufflevector <8 x i64> %a388, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10424 = icmp slt <4 x i64> %10423, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10425 = select <4 x i1> %10422, <4 x i64> %10421, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10426 = select <4 x i1> %10424, <4 x i64> %10423, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10427 = icmp sgt <4 x i64> %10425, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10428 = icmp sgt <4 x i64> %10426, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10429 = select <4 x i1> %10427, <4 x i64> %10425, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10430 = select <4 x i1> %10428, <4 x i64> %10426, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10431 = shufflevector <4 x i64> %10429, <4 x i64> %10430, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4640 = trunc <8 x i64> %10431 to <8 x i32>
  %10432 = ashr <8 x i32> %t4640, %9247
  %10433 = shl <8 x i32> %t4640, %9247
  %10434 = select <8 x i1> %9248, <8 x i32> %10432, <8 x i32> %10433
  %10435 = lshr <8 x i32> %t4640, %9254
  %10436 = shl <8 x i32> %t4640, %9254
  %10437 = select <8 x i1> %9255, <8 x i32> %10435, <8 x i32> %10436
  %10438 = and <8 x i32> %10437, %9250
  %10439 = add nsw <8 x i32> %10438, %10434
  %10440 = shufflevector <8 x i32> %10439, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10441 = shufflevector <8 x i32> %10439, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10442 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10440, <4 x i32> %10441) #11
  %10443 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10442, <8 x i16> %9258)
  %10444 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10443, <8 x i16> undef) #11
  %10445 = shufflevector <16 x i8> %10444, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10446 = icmp ugt <16 x i8> %9260, %10445
  %10447 = select <16 x i1> %10446, <16 x i8> %10445, <16 x i8> %9260
  %10448 = shufflevector <16 x i8> %10447, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10449 = icmp ugt <16 x i8> %10448, %9262
  %10450 = select <16 x i1> %10449, <16 x i8> %10448, <16 x i8> %9262
  %10451 = shufflevector <16 x i8> %10450, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10452 = extractelement <8 x i64> %10261, i32 5
  %10453 = getelementptr inbounds i8, i8* %182, i64 %10452
  %10454 = bitcast i8* %10453 to <8 x i8>*
  store <8 x i8> %10451, <8 x i8>* %10454, align 1, !tbaa !414
  %10455 = sext <8 x i32> %convolved1914.sroa.242.35 to <8 x i64>
  %10456 = mul nsw <8 x i64> %10455, %9244
  %10457 = ashr <8 x i64> %10456, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10458 = add nsw <8 x i64> %10457, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a394 = ashr <8 x i64> %10458, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10459 = shufflevector <8 x i64> %a394, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10460 = icmp slt <4 x i64> %10459, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10461 = shufflevector <8 x i64> %a394, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10462 = icmp slt <4 x i64> %10461, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10463 = select <4 x i1> %10460, <4 x i64> %10459, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10464 = select <4 x i1> %10462, <4 x i64> %10461, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10465 = icmp sgt <4 x i64> %10463, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10466 = icmp sgt <4 x i64> %10464, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10467 = select <4 x i1> %10465, <4 x i64> %10463, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10468 = select <4 x i1> %10466, <4 x i64> %10464, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10469 = shufflevector <4 x i64> %10467, <4 x i64> %10468, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4644 = trunc <8 x i64> %10469 to <8 x i32>
  %10470 = ashr <8 x i32> %t4644, %9247
  %10471 = shl <8 x i32> %t4644, %9247
  %10472 = select <8 x i1> %9248, <8 x i32> %10470, <8 x i32> %10471
  %10473 = lshr <8 x i32> %t4644, %9254
  %10474 = shl <8 x i32> %t4644, %9254
  %10475 = select <8 x i1> %9255, <8 x i32> %10473, <8 x i32> %10474
  %10476 = and <8 x i32> %10475, %9250
  %10477 = add nsw <8 x i32> %10476, %10472
  %10478 = shufflevector <8 x i32> %10477, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10479 = shufflevector <8 x i32> %10477, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10480 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10478, <4 x i32> %10479) #11
  %10481 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10480, <8 x i16> %9258)
  %10482 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10481, <8 x i16> undef) #11
  %10483 = shufflevector <16 x i8> %10482, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10484 = icmp ugt <16 x i8> %9260, %10483
  %10485 = select <16 x i1> %10484, <16 x i8> %10483, <16 x i8> %9260
  %10486 = shufflevector <16 x i8> %10485, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10487 = icmp ugt <16 x i8> %10486, %9262
  %10488 = select <16 x i1> %10487, <16 x i8> %10486, <16 x i8> %9262
  %10489 = shufflevector <16 x i8> %10488, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10490 = extractelement <8 x i64> %10261, i32 6
  %10491 = getelementptr inbounds i8, i8* %182, i64 %10490
  %10492 = bitcast i8* %10491 to <8 x i8>*
  store <8 x i8> %10489, <8 x i8>* %10492, align 1, !tbaa !414
  %10493 = sext <8 x i32> %convolved1914.sroa.272.35 to <8 x i64>
  %10494 = mul nsw <8 x i64> %10493, %9244
  %10495 = ashr <8 x i64> %10494, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %10496 = add nsw <8 x i64> %10495, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a400 = ashr <8 x i64> %10496, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %10497 = shufflevector <8 x i64> %a400, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10498 = icmp slt <4 x i64> %10497, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10499 = shufflevector <8 x i64> %a400, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10500 = icmp slt <4 x i64> %10499, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10501 = select <4 x i1> %10498, <4 x i64> %10497, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10502 = select <4 x i1> %10500, <4 x i64> %10499, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %10503 = icmp sgt <4 x i64> %10501, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10504 = icmp sgt <4 x i64> %10502, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10505 = select <4 x i1> %10503, <4 x i64> %10501, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10506 = select <4 x i1> %10504, <4 x i64> %10502, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %10507 = shufflevector <4 x i64> %10505, <4 x i64> %10506, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4648 = trunc <8 x i64> %10507 to <8 x i32>
  %10508 = ashr <8 x i32> %t4648, %9247
  %10509 = shl <8 x i32> %t4648, %9247
  %10510 = select <8 x i1> %9248, <8 x i32> %10508, <8 x i32> %10509
  %10511 = lshr <8 x i32> %t4648, %9254
  %10512 = shl <8 x i32> %t4648, %9254
  %10513 = select <8 x i1> %9255, <8 x i32> %10511, <8 x i32> %10512
  %10514 = and <8 x i32> %10513, %9250
  %10515 = add nsw <8 x i32> %10514, %10510
  %10516 = shufflevector <8 x i32> %10515, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %10517 = shufflevector <8 x i32> %10515, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %10518 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %10516, <4 x i32> %10517) #11
  %10519 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %10518, <8 x i16> %9258)
  %10520 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %10519, <8 x i16> undef) #11
  %10521 = shufflevector <16 x i8> %10520, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10522 = icmp ugt <16 x i8> %9260, %10521
  %10523 = select <16 x i1> %10522, <16 x i8> %10521, <16 x i8> %9260
  %10524 = shufflevector <16 x i8> %10523, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10525 = icmp ugt <16 x i8> %10524, %9262
  %10526 = select <16 x i1> %10525, <16 x i8> %10524, <16 x i8> %9262
  %10527 = shufflevector <16 x i8> %10526, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10528 = extractelement <8 x i64> %10261, i32 7
  %10529 = getelementptr inbounds i8, i8* %182, i64 %10528
  %10530 = bitcast i8* %10529 to <8 x i8>*
  store <8 x i8> %10527, <8 x i8>* %10530, align 1, !tbaa !414
  %indvars.iv.next4616 = add nuw nsw i64 %indvars.iv4615, 1
  %.not1985 = icmp eq i64 %indvars.iv.next4616, %9286
  br i1 %.not1985, label %"end for output.s0.c.co1214", label %"for output.s0.c.co1213"

then_bb1241:                                      ; preds = %next_bb1003
  %t41871248 = add nsw i32 %166, 1
  %a403 = ashr i32 %t41871248, 2
  %10531 = icmp sgt i32 %166, 2
  %t41881249 = select i1 %10531, i32 %a403, i32 0
  %a404 = ashr i32 %t41871248, 3
  %10532 = icmp sgt i32 %166, 6
  %t41891250 = select i1 %10532, i32 %a404, i32 0
  %10533 = add nsw i32 %170, -1
  %t41901251 = mul nsw i32 %10533, %dilation_y
  %a410 = ashr i32 %t41871248, 1
  %10534 = icmp eq i32 %174, 4
  %10535 = icmp eq i32 %176, 4
  %t41921252 = and i1 %10534, %10535
  %t41931253 = add nsw i32 %166, -1
  %t41941254 = ashr i32 %t41931253, 1
  %10536 = shl nsw i32 %t41941254, 2
  %b407 = or i32 %10536, 3
  %t41961255 = icmp slt i32 %dilation_y, 0
  %t41581256 = select i1 %t41961255, i32 %t41901251, i32 0
  %10537 = icmp slt i32 %174, 16
  %10538 = icmp slt i32 %174, 8
  %10539 = icmp slt i32 %174, 4
  %10540 = icmp slt i32 %a410, 1
  %10541 = select i1 %10540, i32 %a410, i32 1
  %10542 = add nsw i32 %10541, %t41941254
  %10543 = select i1 %10539, i32 %a410, i32 %10542
  %10544 = icmp slt i32 %a410, 2
  %10545 = select i1 %10544, i32 %a410, i32 2
  %10546 = and i32 %t41941254, -2
  %10547 = add nsw i32 %10545, %10546
  %10548 = select i1 %10538, i32 %10543, i32 %10547
  %10549 = icmp slt i32 %a410, 4
  %10550 = select i1 %10549, i32 %a410, i32 4
  %10551 = and i32 %t41941254, -4
  %10552 = add nsw i32 %10550, %10551
  %a406 = select i1 %10537, i32 %10548, i32 %10552
  %10553 = icmp sgt i32 %a410, %a406
  %10554 = select i1 %10553, i32 %a406, i32 %a410
  %10555 = shl nsw i32 %10554, 2
  %10556 = add nsw i32 %10555, -1
  %a405 = select i1 %t41921252, i32 %b407, i32 %10556
  %10557 = icmp sgt i32 %a405, %b407
  %a422 = select i1 %10557, i32 %a405, i32 %b407
  %10558 = icmp sgt i32 %166, 0
  %10559 = add nsw i32 %166, 7
  %10560 = ashr i32 %10559, 3
  %t41731263 = sub nsw i32 %10560, %t41891250
  %10561 = add nsw i32 %166, 3
  %10562 = ashr i32 %10561, 2
  %t41771264 = sub nsw i32 %10562, %t41881249
  %10563 = select i1 %t3704553, i32 %t3705554, i32 0
  %10564 = select i1 %t3706555, i32 %185, i32 1
  %10565 = add i32 %184, -1
  %10566 = add i32 %10565, %10564
  %10567 = mul nsw i32 %10566, %stride_x
  %b417 = add nsw i32 %10567, %10563
  %10568 = icmp sgt i32 %180, 0
  br i1 %10568, label %"for output.s0.b.rebased1268.preheader", label %if.then.i2454, !prof !387

"for output.s0.b.rebased1268.preheader":          ; preds = %then_bb1241
  %t41801262 = ashr i32 %163, 5
  %t41791261 = select i1 %10558, i32 %a410, i32 0
  %t41571257 = select i1 %t41961255, i32 0, i32 %t41901251
  %10569 = mul nsw i32 %176, %175
  %10570 = add nsw i32 %185, -1
  %10571 = select i1 %t3706555, i32 0, i32 %10570
  %10572 = add nsw i32 %10571, %184
  %10573 = mul nsw i32 %10572, %stride_x
  %10574 = select i1 %t3704553, i32 0, i32 %t3705554
  %b415 = add nsw i32 %10573, %10574
  %a414 = sub i32 %b415, %b417
  %a416 = ashr i32 %a414, 3
  %10575 = add nsw i32 %a414, 1
  %a411 = ashr i32 %10575, 3
  %10576 = icmp sgt i32 %a414, 6
  %t42151271 = select i1 %10576, i32 %a411, i32 0
  %.neg2761 = mul i32 %189, %187
  %.neg2762 = mul i32 %186, %184
  %.neg2763 = mul i32 %190, %179
  %10577 = add i32 %t3702551, %10569
  %10578 = add i32 %10577, %t3703552
  %.neg2767 = mul i32 %175, -4
  %10579 = icmp sgt i32 %a416, -1
  %10580 = select i1 %10579, i32 %a416, i32 -1
  %10581 = sub nsw i32 %10580, %t42151271
  %10582 = icmp sgt i32 %188, 0
  %10583 = icmp sgt i32 %a422, -1
  %t4652 = select i1 %10583, i32 %a422, i32 -1
  %10584 = icmp sgt i32 %a414, -1
  %10585 = select i1 %10584, i32 %10575, i32 0
  %t4653 = zext i32 %10585 to i64
  %10586 = add nsw i32 %t4652, 1
  %10587 = zext i32 %10586 to i64
  %t4654 = shl nuw nsw i64 %10587, 1
  %t4656 = mul i64 %t4654, %t4653
  %10588 = add nsw i32 %a422, 1
  %t42531332 = shl nsw i32 %a410, 2
  %10589 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %10590 = shufflevector <16 x i8> %10589, <16 x i8> undef, <16 x i32> zeroinitializer
  %10591 = zext <16 x i8> %10590 to <16 x i16>
  %10592 = icmp sgt i32 %t41731263, 0
  %10593 = insertelement <16 x i32> undef, i32 %t42531332, i32 0
  %10594 = shufflevector <16 x i32> %10593, <16 x i32> undef, <8 x i32> zeroinitializer
  %10595 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %10596 = shufflevector <8 x i8> %10595, <8 x i8> undef, <8 x i32> zeroinitializer
  %10597 = zext <8 x i8> %10596 to <8 x i16>
  %10598 = icmp sgt i32 %t41771264, 0
  %10599 = insertelement <8 x i32> undef, i32 %t42531332, i32 0
  %10600 = shufflevector <8 x i32> %10599, <8 x i32> undef, <8 x i32> zeroinitializer
  %10601 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %10602 = shufflevector <4 x i8> %10601, <4 x i8> undef, <4 x i32> zeroinitializer
  %10603 = zext <4 x i8> %10602 to <4 x i16>
  %10604 = zext i8 %input_zero to i16
  %t42191290 = mul nsw i32 %10575, %10588
  %.neg2768 = sub i32 %.neg2767, %t3702551
  %t41691267.neg = sub i32 %.neg2768, %t3703552
  %10605 = shl i32 %10588, 1
  %10606 = mul nsw i32 %a422, 7
  %10607 = mul nsw i32 %a422, 6
  %10608 = mul nsw i32 %a422, 5
  %10609 = shl nsw i32 %a422, 2
  %10610 = mul nsw i32 %a422, 3
  %10611 = shl nsw i32 %a422, 1
  %10612 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %10613 = shufflevector <32 x i8> %10612, <32 x i8> undef, <32 x i32> zeroinitializer
  %10614 = zext <32 x i8> %10613 to <32 x i16>
  %10615 = icmp sgt i32 %10581, -1
  %reass.add2777 = add i32 %.neg2761, %.neg2762
  %reass.add2778 = add i32 %reass.add2777, %.neg2763
  %10616 = icmp sgt i32 %163, 31
  %10617 = icmp sgt i32 %170, 0
  %10618 = icmp sgt i32 %168, 0
  %10619 = bitcast i8* %164 to i16*
  %10620 = insertelement <32 x i32> undef, i32 %output_multiplier, i32 0
  %10621 = shufflevector <32 x i32> %10620, <32 x i32> undef, <32 x i32> zeroinitializer
  %10622 = sext <32 x i32> %10621 to <32 x i64>
  %10623 = insertelement <32 x i32> undef, i32 %output_shift, i32 0
  %10624 = shufflevector <32 x i32> %10623, <32 x i32> undef, <8 x i32> zeroinitializer
  %10625 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %10624, i1 false) #11
  %10626 = shufflevector <8 x i32> %10625, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4660 = shufflevector <16 x i32> %10626, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10627 = icmp slt <8 x i32> %10624, zeroinitializer
  %10628 = shufflevector <8 x i1> %10627, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10629 = shufflevector <16 x i1> %10628, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10630 = xor <32 x i1> %10629, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %10631 = shufflevector <32 x i1> %10630, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10632 = shufflevector <32 x i1> %10630, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10633 = shufflevector <32 x i1> %10630, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10634 = shufflevector <32 x i1> %10630, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10635 = icmp sgt i32 %output_shift, 0
  %10636 = select i1 %10635, <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <32 x i32> zeroinitializer
  %10637 = add nsw i32 %output_shift, -1
  %10638 = insertelement <32 x i32> undef, i32 %10637, i32 0
  %10639 = shufflevector <32 x i32> %10638, <32 x i32> undef, <8 x i32> zeroinitializer
  %10640 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %10639, i1 false) #11
  %10641 = shufflevector <8 x i32> %10640, <8 x i32> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4662 = shufflevector <16 x i32> %10641, <16 x i32> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10642 = icmp slt <8 x i32> %10639, zeroinitializer
  %10643 = shufflevector <8 x i1> %10642, <8 x i1> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10644 = shufflevector <16 x i1> %10643, <16 x i1> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10645 = xor <32 x i1> %10644, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %10646 = shufflevector <32 x i1> %10645, <32 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10647 = shufflevector <32 x i1> %10645, <32 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10648 = shufflevector <32 x i1> %10645, <32 x i1> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10649 = shufflevector <32 x i1> %10645, <32 x i1> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10650 = zext i8 %output_zero to i16
  %10651 = insertelement <32 x i16> undef, i16 %10650, i32 0
  %10652 = shufflevector <32 x i16> %10651, <32 x i16> undef, <16 x i32> zeroinitializer
  %10653 = insertelement <32 x i8> undef, i8 %output_max, i32 0
  %b430 = shufflevector <32 x i8> %10653, <32 x i8> undef, <32 x i32> zeroinitializer
  %10654 = insertelement <32 x i8> undef, i8 %output_min, i32 0
  %b429 = shufflevector <32 x i8> %10654, <32 x i8> undef, <32 x i32> zeroinitializer
  %10655 = zext i32 %t41891250 to i64
  %10656 = sext i32 %b417 to i64
  %10657 = sext i32 %176 to i64
  %10658 = zext i32 %a414 to i64
  %10659 = sext i32 %t41891250 to i64
  %10660 = zext i32 %t41731263 to i64
  %10661 = sext i32 %178 to i64
  %10662 = zext i32 %t41881249 to i64
  %10663 = sext i32 %t41881249 to i64
  %10664 = zext i32 %t41771264 to i64
  %10665 = zext i32 %t41791261 to i64
  %10666 = zext i32 %t42531332 to i64
  %10667 = zext i32 %a410 to i64
  %10668 = zext i32 %t42151271 to i64
  %10669 = sext i32 %10588 to i64
  %10670 = zext i32 %10581 to i64
  %10671 = sext i32 %t42191290 to i64
  %10672 = sext i32 %169 to i64
  %10673 = zext i32 %168 to i64
  %10674 = sext i32 %171 to i64
  %10675 = zext i32 %170 to i64
  %10676 = sext i32 %167 to i64
  %10677 = zext i32 %t41801262 to i64
  %10678 = zext i32 %184 to i64
  %10679 = zext i32 %185 to i64
  %10680 = sub i32 %t41571257, %t41581256
  %10681 = sext i32 %187 to i64
  %10682 = sext i32 %stride_y to i64
  %10683 = sext i32 %t41581256 to i64
  %10684 = zext i32 %179 to i64
  %zext4535 = zext i32 %180 to i64
  %zext4530 = zext i32 %188 to i64
  %a424 = add nsw i32 %10680, 1
  %10685 = icmp sgt i32 %10680, -1
  %10686 = select i1 %10685, i32 %a424, i32 0
  %t4655 = zext i32 %10686 to i64
  %10687 = mul i64 %t4656, %t4655
  %10688 = add i64 %10687, 6
  %10689 = zext i32 %10680 to i64
  %10690 = zext i32 %10680 to i64
  %10691 = zext i32 %10680 to i64
  %10692 = zext i32 %10680 to i64
  %10693 = zext i32 %10680 to i64
  %10694 = add nsw i64 %10655, -1
  %10695 = add nsw i64 %10655, -1
  %10696 = add nsw i64 %10662, -1
  %10697 = add nsw i64 %10662, -1
  %10698 = add nsw i64 %10665, -1
  %10699 = and i64 %10666, 4294967232
  %10700 = add nsw i64 %10699, -64
  %10701 = lshr exact i64 %10700, 6
  %10702 = add nuw nsw i64 %10701, 1
  %10703 = add nsw i64 %10667, -1
  %10704 = or i32 %10680, %a414
  %10705 = icmp slt i32 %10704, 0
  %xtraiter6006 = and i64 %10655, 3
  %10706 = icmp ult i64 %10694, 3
  %unroll_iter6009 = and i64 %10655, 4294967292
  %lcmp.mod6008.not = icmp eq i64 %xtraiter6006, 0
  %xtraiter6011 = and i64 %10655, 3
  %10707 = icmp ult i64 %10695, 3
  %unroll_iter6014 = and i64 %10655, 4294967292
  %lcmp.mod6013.not = icmp eq i64 %xtraiter6011, 0
  %xtraiter6016 = and i64 %10662, 3
  %10708 = icmp ult i64 %10696, 3
  %unroll_iter6019 = and i64 %10662, 4294967292
  %lcmp.mod6018.not = icmp eq i64 %xtraiter6016, 0
  %xtraiter6021 = and i64 %10662, 3
  %10709 = icmp ult i64 %10697, 3
  %unroll_iter6024 = and i64 %10662, 4294967292
  %lcmp.mod6023.not = icmp eq i64 %xtraiter6021, 0
  %brmerge5066.demorgan = and i1 %10584, %10558
  %xtraiter6026 = and i64 %10665, 3
  %10710 = icmp ult i64 %10698, 3
  %unroll_iter6029 = and i64 %10665, 4294967292
  %lcmp.mod6028.not = icmp eq i64 %xtraiter6026, 0
  %brmerge5069.demorgan = and i1 %10584, %10558
  %min.iters.check5483 = icmp ult i32 %t42531332, 8
  %min.iters.check5486 = icmp ult i32 %t42531332, 64
  %n.vec5490 = and i64 %10666, 4294967232
  %broadcast.splatinsert5498 = insertelement <16 x i16> poison, i16 %10604, i32 0
  %broadcast.splat5499 = shufflevector <16 x i16> %broadcast.splatinsert5498, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5500 = insertelement <16 x i16> poison, i16 %10604, i32 0
  %broadcast.splat5501 = shufflevector <16 x i16> %broadcast.splatinsert5500, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5502 = insertelement <16 x i16> poison, i16 %10604, i32 0
  %broadcast.splat5503 = shufflevector <16 x i16> %broadcast.splatinsert5502, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5504 = insertelement <16 x i16> poison, i16 %10604, i32 0
  %broadcast.splat5505 = shufflevector <16 x i16> %broadcast.splatinsert5504, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter6031 = and i64 %10702, 1
  %10711 = icmp eq i64 %10700, 0
  %unroll_iter6033 = and i64 %10702, 576460752303423486
  %lcmp.mod6032.not = icmp eq i64 %xtraiter6031, 0
  %cmp.n5493 = icmp eq i64 %n.vec5490, %10666
  %n.vec.remaining5511 = and i64 %10666, 56
  %min.epilog.iters.check5512 = icmp eq i64 %n.vec.remaining5511, 0
  %n.vec5515 = and i64 %10666, 4294967288
  %broadcast.splatinsert5521 = insertelement <8 x i16> poison, i16 %10604, i32 0
  %broadcast.splat5522 = shufflevector <8 x i16> %broadcast.splatinsert5521, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5519 = icmp eq i64 %n.vec5515, %10666
  %xtraiter6035 = and i64 %10667, 3
  %10712 = icmp ult i64 %10703, 3
  %unroll_iter6038 = and i64 %10667, 4294967292
  %lcmp.mod6037.not = icmp eq i64 %xtraiter6035, 0
  br label %"for output.s0.b.rebased1268"

next_bb1242:                                      ; preds = %next_bb1003
  %a433 = ashr i32 %163, 3
  %10713 = icmp sgt i32 %163, 7
  %t43401464 = select i1 %10713, i32 %a433, i32 0
  %t43411465 = add nsw i32 %166, 1
  %a434 = ashr i32 %t43411465, 2
  %10714 = icmp sgt i32 %166, 2
  %t43421466 = select i1 %10714, i32 %a434, i32 0
  %a435 = ashr i32 %t43411465, 3
  %10715 = icmp sgt i32 %166, 6
  %t43431467 = select i1 %10715, i32 %a435, i32 0
  %10716 = add nsw i32 %170, -1
  %t43441468 = mul nsw i32 %10716, %dilation_y
  %a441 = ashr i32 %t43411465, 1
  %10717 = icmp eq i32 %174, 4
  %10718 = icmp eq i32 %176, 4
  %t43461469 = and i1 %10717, %10718
  %t43471470 = add nsw i32 %166, -1
  %t43481471 = ashr i32 %t43471470, 1
  %10719 = shl nsw i32 %t43481471, 2
  %b438 = or i32 %10719, 3
  %t43501472 = icmp slt i32 %dilation_y, 0
  %t43071473 = select i1 %t43501472, i32 %t43441468, i32 0
  %10720 = icmp slt i32 %174, 16
  %10721 = icmp slt i32 %174, 8
  %10722 = icmp slt i32 %174, 4
  %10723 = icmp slt i32 %a441, 1
  %10724 = select i1 %10723, i32 %a441, i32 1
  %10725 = add nsw i32 %10724, %t43481471
  %10726 = select i1 %10722, i32 %a441, i32 %10725
  %10727 = icmp slt i32 %a441, 2
  %10728 = select i1 %10727, i32 %a441, i32 2
  %10729 = and i32 %t43481471, -2
  %10730 = add nsw i32 %10728, %10729
  %10731 = select i1 %10721, i32 %10726, i32 %10730
  %10732 = icmp slt i32 %a441, 4
  %10733 = select i1 %10732, i32 %a441, i32 4
  %10734 = and i32 %t43481471, -4
  %10735 = add nsw i32 %10733, %10734
  %a437 = select i1 %10720, i32 %10731, i32 %10735
  %10736 = icmp sgt i32 %a441, %a437
  %10737 = select i1 %10736, i32 %a437, i32 %a441
  %10738 = shl nsw i32 %10737, 2
  %10739 = add nsw i32 %10738, -1
  %a436 = select i1 %t43461469, i32 %b438, i32 %10739
  %10740 = icmp sgt i32 %a436, %b438
  %a453 = select i1 %10740, i32 %a436, i32 %b438
  %10741 = icmp sgt i32 %166, 0
  %10742 = add nsw i32 %166, 7
  %10743 = ashr i32 %10742, 3
  %t43221480 = sub nsw i32 %10743, %t43431467
  %10744 = add nsw i32 %166, 3
  %10745 = ashr i32 %10744, 2
  %t43261481 = sub nsw i32 %10745, %t43421466
  %10746 = add nsw i32 %163, 7
  %10747 = ashr i32 %10746, 3
  %t43311482 = sub nsw i32 %10747, %t43401464
  %10748 = select i1 %t3704553, i32 %t3705554, i32 0
  %10749 = select i1 %t3706555, i32 %185, i32 1
  %10750 = add i32 %184, -1
  %10751 = add i32 %10750, %10749
  %10752 = mul nsw i32 %10751, %stride_x
  %b448 = add nsw i32 %10752, %10748
  %10753 = icmp sgt i32 %180, 0
  br i1 %10753, label %"for output.s0.b.rebased1486.preheader", label %if.then.i2454, !prof !387

"for output.s0.b.rebased1486.preheader":          ; preds = %next_bb1242
  %t43281478 = select i1 %10741, i32 %a441, i32 0
  %t43061474 = select i1 %t43501472, i32 0, i32 %t43441468
  %10754 = mul nsw i32 %176, %175
  %10755 = add nsw i32 %185, -1
  %10756 = select i1 %t3706555, i32 0, i32 %10755
  %10757 = add nsw i32 %10756, %184
  %10758 = mul nsw i32 %10757, %stride_x
  %10759 = select i1 %t3704553, i32 0, i32 %t3705554
  %b446 = add nsw i32 %10758, %10759
  %a445 = sub i32 %b446, %b448
  %a447 = ashr i32 %a445, 3
  %10760 = add nsw i32 %a445, 1
  %a442 = ashr i32 %10760, 3
  %10761 = icmp sgt i32 %a445, 6
  %t43691489 = select i1 %10761, i32 %a442, i32 0
  %.neg2742 = mul i32 %189, %187
  %.neg2743 = mul i32 %186, %184
  %.neg2744 = mul i32 %190, %179
  %10762 = add i32 %t3702551, %10754
  %10763 = add i32 %10762, %t3703552
  %.neg2748 = mul i32 %175, -4
  %10764 = icmp sgt i32 %a447, -1
  %10765 = select i1 %10764, i32 %a447, i32 -1
  %10766 = sub nsw i32 %10765, %t43691489
  %10767 = icmp sgt i32 %188, 0
  %10768 = icmp sgt i32 %a453, -1
  %t4663 = select i1 %10768, i32 %a453, i32 -1
  %10769 = icmp sgt i32 %a445, -1
  %10770 = select i1 %10769, i32 %10760, i32 0
  %t4664 = zext i32 %10770 to i64
  %10771 = add nsw i32 %t4663, 1
  %10772 = zext i32 %10771 to i64
  %t4665 = shl nuw nsw i64 %10772, 1
  %t4667 = mul i64 %t4665, %t4664
  %10773 = add nsw i32 %a453, 1
  %t44071550 = shl nsw i32 %a441, 2
  %10774 = insertelement <16 x i8> undef, i8 %input_zero, i32 0
  %10775 = shufflevector <16 x i8> %10774, <16 x i8> undef, <16 x i32> zeroinitializer
  %10776 = zext <16 x i8> %10775 to <16 x i16>
  %10777 = icmp sgt i32 %t43221480, 0
  %10778 = insertelement <16 x i32> undef, i32 %t44071550, i32 0
  %10779 = shufflevector <16 x i32> %10778, <16 x i32> undef, <8 x i32> zeroinitializer
  %10780 = insertelement <8 x i8> undef, i8 %input_zero, i32 0
  %10781 = shufflevector <8 x i8> %10780, <8 x i8> undef, <8 x i32> zeroinitializer
  %10782 = zext <8 x i8> %10781 to <8 x i16>
  %10783 = icmp sgt i32 %t43261481, 0
  %10784 = insertelement <8 x i32> undef, i32 %t44071550, i32 0
  %10785 = shufflevector <8 x i32> %10784, <8 x i32> undef, <8 x i32> zeroinitializer
  %10786 = insertelement <4 x i8> undef, i8 %input_zero, i32 0
  %10787 = shufflevector <4 x i8> %10786, <4 x i8> undef, <4 x i32> zeroinitializer
  %10788 = zext <4 x i8> %10787 to <4 x i16>
  %10789 = zext i8 %input_zero to i16
  %t43731508 = mul nsw i32 %10760, %10773
  %.neg2749 = sub i32 %.neg2748, %t3702551
  %t43181485.neg = sub i32 %.neg2749, %t3703552
  %10790 = shl i32 %10773, 1
  %10791 = mul nsw i32 %a453, 7
  %10792 = mul nsw i32 %a453, 6
  %10793 = mul nsw i32 %a453, 5
  %10794 = shl nsw i32 %a453, 2
  %10795 = mul nsw i32 %a453, 3
  %10796 = shl nsw i32 %a453, 1
  %10797 = insertelement <32 x i8> undef, i8 %input_zero, i32 0
  %10798 = shufflevector <32 x i8> %10797, <32 x i8> undef, <32 x i32> zeroinitializer
  %10799 = zext <32 x i8> %10798 to <32 x i16>
  %10800 = icmp sgt i32 %10766, -1
  %reass.add2758 = add i32 %.neg2742, %.neg2743
  %reass.add2759 = add i32 %reass.add2758, %.neg2744
  %10801 = icmp sgt i32 %170, 0
  %10802 = icmp sgt i32 %168, 0
  %10803 = bitcast i8* %164 to i16*
  %10804 = insertelement <8 x i32> undef, i32 %output_multiplier, i32 0
  %10805 = shufflevector <8 x i32> %10804, <8 x i32> undef, <8 x i32> zeroinitializer
  %10806 = sext <8 x i32> %10805 to <8 x i64>
  %10807 = insertelement <8 x i32> undef, i32 %output_shift, i32 0
  %10808 = shufflevector <8 x i32> %10807, <8 x i32> undef, <8 x i32> zeroinitializer
  %10809 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %10808, i1 false) #11
  %10810 = icmp sgt <8 x i32> %10808, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %10811 = icmp sgt i32 %output_shift, 0
  %10812 = select i1 %10811, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32> zeroinitializer
  %10813 = add nsw i32 %output_shift, -1
  %10814 = insertelement <8 x i32> undef, i32 %10813, i32 0
  %10815 = shufflevector <8 x i32> %10814, <8 x i32> undef, <8 x i32> zeroinitializer
  %10816 = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %10815, i1 false) #11
  %10817 = icmp sgt <8 x i32> %10815, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %10818 = zext i8 %output_zero to i16
  %10819 = insertelement <8 x i16> undef, i16 %10818, i32 0
  %10820 = shufflevector <8 x i16> %10819, <8 x i16> undef, <8 x i32> zeroinitializer
  %10821 = insertelement <8 x i8> undef, i8 %output_max, i32 0
  %10822 = shufflevector <8 x i8> %10821, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10823 = insertelement <8 x i8> undef, i8 %output_min, i32 0
  %10824 = shufflevector <8 x i8> %10823, <8 x i8> undef, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %10825 = icmp sgt i32 %t43311482, 0
  %10826 = sext i32 %a433 to i64
  %10827 = insertelement <8 x i32> undef, i32 %163, i32 0
  %10828 = shufflevector <8 x i32> %10827, <8 x i32> undef, <8 x i32> zeroinitializer
  %10829 = zext i32 %t43431467 to i64
  %10830 = sext i32 %b448 to i64
  %10831 = sext i32 %176 to i64
  %10832 = zext i32 %a445 to i64
  %10833 = sext i32 %t43431467 to i64
  %10834 = zext i32 %t43221480 to i64
  %10835 = sext i32 %178 to i64
  %10836 = zext i32 %t43421466 to i64
  %10837 = sext i32 %t43421466 to i64
  %10838 = zext i32 %t43261481 to i64
  %10839 = zext i32 %t43281478 to i64
  %10840 = zext i32 %t44071550 to i64
  %10841 = zext i32 %a441 to i64
  %10842 = zext i32 %t43691489 to i64
  %10843 = sext i32 %10773 to i64
  %10844 = zext i32 %10766 to i64
  %10845 = sext i32 %t43731508 to i64
  %10846 = sext i32 %169 to i64
  %10847 = zext i32 %168 to i64
  %10848 = sext i32 %171 to i64
  %10849 = zext i32 %170 to i64
  %10850 = sext i32 %167 to i64
  %10851 = zext i32 %t43401464 to i64
  %10852 = sext i32 %t43401464 to i64
  %10853 = sext i32 %206 to i64
  %10854 = zext i32 %t43311482 to i64
  %10855 = zext i32 %184 to i64
  %10856 = zext i32 %stride_x to i64
  %10857 = zext i32 %185 to i64
  %10858 = sub i32 %t43061474, %t43071473
  %10859 = sext i32 %187 to i64
  %10860 = sext i32 %stride_y to i64
  %10861 = sext i32 %t43071473 to i64
  %10862 = zext i32 %179 to i64
  %zext4445 = zext i32 %180 to i64
  %zext4440 = zext i32 %188 to i64
  %a455 = add nsw i32 %10858, 1
  %10863 = icmp sgt i32 %10858, -1
  %10864 = select i1 %10863, i32 %a455, i32 0
  %t4666 = zext i32 %10864 to i64
  %10865 = mul i64 %t4667, %t4666
  %10866 = add i64 %10865, 6
  %10867 = zext i32 %10858 to i64
  %10868 = zext i32 %10858 to i64
  %10869 = zext i32 %10858 to i64
  %10870 = zext i32 %10858 to i64
  %10871 = zext i32 %10858 to i64
  %10872 = add nsw i64 %10829, -1
  %10873 = add nsw i64 %10829, -1
  %10874 = add nsw i64 %10836, -1
  %10875 = add nsw i64 %10836, -1
  %10876 = add nsw i64 %10839, -1
  %10877 = and i64 %10840, 4294967232
  %10878 = add nsw i64 %10877, -64
  %10879 = lshr exact i64 %10878, 6
  %10880 = add nuw nsw i64 %10879, 1
  %10881 = add nsw i64 %10841, -1
  %10882 = or i32 %10858, %a445
  %10883 = icmp slt i32 %10882, 0
  %xtraiter5964 = and i64 %10829, 3
  %10884 = icmp ult i64 %10872, 3
  %unroll_iter5967 = and i64 %10829, 4294967292
  %lcmp.mod5966.not = icmp eq i64 %xtraiter5964, 0
  %xtraiter5969 = and i64 %10829, 3
  %10885 = icmp ult i64 %10873, 3
  %unroll_iter5972 = and i64 %10829, 4294967292
  %lcmp.mod5971.not = icmp eq i64 %xtraiter5969, 0
  %xtraiter5974 = and i64 %10836, 3
  %10886 = icmp ult i64 %10874, 3
  %unroll_iter5977 = and i64 %10836, 4294967292
  %lcmp.mod5976.not = icmp eq i64 %xtraiter5974, 0
  %xtraiter5979 = and i64 %10836, 3
  %10887 = icmp ult i64 %10875, 3
  %unroll_iter5982 = and i64 %10836, 4294967292
  %lcmp.mod5981.not = icmp eq i64 %xtraiter5979, 0
  %brmerge5075.demorgan = and i1 %10769, %10741
  %xtraiter5984 = and i64 %10839, 3
  %10888 = icmp ult i64 %10876, 3
  %unroll_iter5987 = and i64 %10839, 4294967292
  %lcmp.mod5986.not = icmp eq i64 %xtraiter5984, 0
  %brmerge5078.demorgan = and i1 %10769, %10741
  %min.iters.check5440 = icmp ult i32 %t44071550, 8
  %min.iters.check5443 = icmp ult i32 %t44071550, 64
  %n.vec5447 = and i64 %10840, 4294967232
  %broadcast.splatinsert5455 = insertelement <16 x i16> poison, i16 %10789, i32 0
  %broadcast.splat5456 = shufflevector <16 x i16> %broadcast.splatinsert5455, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5457 = insertelement <16 x i16> poison, i16 %10789, i32 0
  %broadcast.splat5458 = shufflevector <16 x i16> %broadcast.splatinsert5457, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5459 = insertelement <16 x i16> poison, i16 %10789, i32 0
  %broadcast.splat5460 = shufflevector <16 x i16> %broadcast.splatinsert5459, <16 x i16> poison, <16 x i32> zeroinitializer
  %broadcast.splatinsert5461 = insertelement <16 x i16> poison, i16 %10789, i32 0
  %broadcast.splat5462 = shufflevector <16 x i16> %broadcast.splatinsert5461, <16 x i16> poison, <16 x i32> zeroinitializer
  %xtraiter5989 = and i64 %10880, 1
  %10889 = icmp eq i64 %10878, 0
  %unroll_iter5991 = and i64 %10880, 576460752303423486
  %lcmp.mod5990.not = icmp eq i64 %xtraiter5989, 0
  %cmp.n5450 = icmp eq i64 %n.vec5447, %10840
  %n.vec.remaining5468 = and i64 %10840, 56
  %min.epilog.iters.check5469 = icmp eq i64 %n.vec.remaining5468, 0
  %n.vec5472 = and i64 %10840, 4294967288
  %broadcast.splatinsert5478 = insertelement <8 x i16> poison, i16 %10789, i32 0
  %broadcast.splat5479 = shufflevector <8 x i16> %broadcast.splatinsert5478, <8 x i16> poison, <8 x i32> zeroinitializer
  %cmp.n5476 = icmp eq i64 %n.vec5472, %10840
  %xtraiter5993 = and i64 %10841, 3
  %10890 = icmp ult i64 %10881, 3
  %unroll_iter5996 = and i64 %10841, 4294967292
  %lcmp.mod5995.not = icmp eq i64 %xtraiter5993, 0
  %brmerge5081.demorgan = and i1 %10801, %10802
  %brmerge5083.demorgan = and i1 %brmerge5081.demorgan, %10741
  %xtraiter5998 = and i64 %10841, 1
  %10891 = icmp eq i32 %a441, 1
  %unroll_iter6000 = and i64 %10841, 4294967294
  %lcmp.mod5999.not = icmp eq i64 %xtraiter5998, 0
  %brmerge5086.demorgan = and i1 %10801, %10802
  %brmerge5088.demorgan = and i1 %brmerge5086.demorgan, %10741
  %xtraiter6002 = and i64 %10841, 1
  %10892 = icmp eq i32 %a441, 1
  %unroll_iter6004 = and i64 %10841, 4294967294
  %lcmp.mod6003.not = icmp eq i64 %xtraiter6002, 0
  br label %"for output.s0.b.rebased1486"

"for output.s0.b.rebased1268":                    ; preds = %"for output.s0.b.rebased1268.preheader", %"end for output.s0.y.rebased1281"
  %indvars.iv4531 = phi i64 [ 0, %"for output.s0.b.rebased1268.preheader" ], [ %indvars.iv.next4532, %"end for output.s0.y.rebased1281" ]
  %10893 = add nuw i64 %indvars.iv4531, %10684
  %10894 = trunc i64 %10893 to i32
  %10895 = mul i32 %181, %10894
  br i1 %10582, label %"for output.s0.y.rebased1280.preheader", label %"end for output.s0.y.rebased1281", !prof !387

"for output.s0.y.rebased1280.preheader":          ; preds = %"for output.s0.b.rebased1268"
  %t42101277 = sub i32 %10895, %10578
  %t42011278 = add i32 %t41691267.neg, %10895
  %10896 = sext i32 %t42101277 to i64
  %10897 = trunc i64 %10893 to i32
  %10898 = mul i32 %190, %10897
  br label %"for output.s0.y.rebased1280"

"for output.s0.y.rebased1280":                    ; preds = %"for output.s0.y.rebased1280.preheader", %call_destructor.exit2472
  %indvars.iv4526 = phi i64 [ 0, %"for output.s0.y.rebased1280.preheader" ], [ %indvars.iv.next4527, %call_destructor.exit2472 ]
  %10899 = add nsw i64 %indvars.iv4526, %10681
  %10900 = mul nsw i64 %10899, %10682
  %10901 = add nsw i64 %10900, %10683
  %10902 = call i8* @halide_malloc(i8* null, i64 %10688)
  %input_wrapper1284 = bitcast i8* %10902 to i16*
  br i1 %t41921252, label %then_bb1287, label %next_bb1288

"end for output.s0.y.rebased1281":                ; preds = %call_destructor.exit2472, %"for output.s0.b.rebased1268"
  %indvars.iv.next4532 = add nuw nsw i64 %indvars.iv4531, 1
  %10903 = icmp eq i64 %indvars.iv.next4532, %zext4535
  br i1 %10903, label %if.then.i2454, label %"for output.s0.b.rebased1268"

then_bb1287:                                      ; preds = %"for output.s0.y.rebased1280"
  br i1 %10685, label %"for input_wrapper.s0.y.rebased1292", label %"consume input_wrapper1418", !prof !387

next_bb1288:                                      ; preds = %"for output.s0.y.rebased1280"
  br i1 %10537, label %next_bb1330, label %then_bb1329

"for input_wrapper.s0.y.rebased1292":             ; preds = %then_bb1287, %"end for input_wrapper.s0.x.x.rebased1316"
  %indvars.iv4505 = phi i64 [ %indvars.iv.next4506, %"end for input_wrapper.s0.x.x.rebased1316" ], [ 0, %then_bb1287 ]
  %10904 = mul nsw i64 %indvars.iv4505, %10671
  %10905 = add nsw i64 %indvars.iv4505, %10901
  %10906 = trunc i64 %10905 to i32
  %10907 = mul i32 %178, %10906
  %t42281296 = add i32 %t42011278, %10907
  br i1 %10576, label %"for input_wrapper.s0.x.x1297.preheader", label %"end for input_wrapper.s0.x.x1298", !prof !387

"for input_wrapper.s0.x.x1297.preheader":         ; preds = %"for input_wrapper.s0.y.rebased1292"
  %10908 = sext i32 %t42281296 to i64
  br i1 %10558, label %"for input_wrapper.s0.x.x1297.us.preheader", label %"end for input_wrapper.s0.x.x.rebased1316", !prof !387

"for input_wrapper.s0.x.x1297.us.preheader":      ; preds = %"for input_wrapper.s0.x.x1297.preheader"
  %10909 = trunc i64 %10904 to i32
  br label %"for input_wrapper.s0.x.x1297.us"

"for input_wrapper.s0.x.x1297.us":                ; preds = %"for input_wrapper.s0.x.x1297.us.preheader", %"end for input_wrapper.s0.c.c1310.loopexit.us"
  %indvars.iv4495 = phi i64 [ 0, %"for input_wrapper.s0.x.x1297.us.preheader" ], [ %indvars.iv.next4496, %"end for input_wrapper.s0.c.c1310.loopexit.us" ]
  %10910 = trunc i64 %indvars.iv4495 to i32
  %t42351300.us = mul i32 %10605, %10910
  %10911 = shl nsw i64 %indvars.iv4495, 3
  %10912 = add nsw i64 %10911, %10656
  br label %"for input_wrapper.s0.c.c1309.us"

"for input_wrapper.s0.c.c1309.us":                ; preds = %"for input_wrapper.s0.x.x1297.us", %"for input_wrapper.s0.c.c1309.us"
  %indvars.iv4492 = phi i64 [ 0, %"for input_wrapper.s0.x.x1297.us" ], [ %indvars.iv.next4493, %"for input_wrapper.s0.c.c1309.us" ]
  %10913 = add nsw i64 %indvars.iv4492, %10912
  %10914 = shl nsw i64 %10913, 2
  %10915 = add nsw i64 %10914, %10908
  %10916 = getelementptr inbounds i8, i8* %172, i64 %10915
  %10917 = bitcast i8* %10916 to <32 x i8>*
  %10918 = load <32 x i8>, <32 x i8>* %10917, align 4, !tbaa !397
  %10919 = zext <32 x i8> %10918 to <32 x i16>
  %10920 = sub nsw <32 x i16> %10919, %10614
  %10921 = trunc i64 %indvars.iv4492 to i32
  %10922 = add i32 %t42351300.us, %10921
  %10923 = shl nsw i32 %10922, 2
  %10924 = add i32 %10923, %10909
  %10925 = insertelement <4 x i32> undef, i32 %10924, i32 0
  %10926 = shufflevector <4 x i32> %10925, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10927 = add <4 x i32> %10926, <i32 poison, i32 1, i32 2, i32 3>
  %10928 = add i32 %10924, 1
  %10929 = add i32 %10928, %a422
  %10930 = insertelement <4 x i32> undef, i32 %10929, i32 0
  %10931 = shufflevector <4 x i32> %10930, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10932 = add <4 x i32> %10931, <i32 poison, i32 1, i32 2, i32 3>
  %10933 = add i32 %10924, 2
  %10934 = add i32 %10933, %10611
  %10935 = insertelement <4 x i32> undef, i32 %10934, i32 0
  %10936 = shufflevector <4 x i32> %10935, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10937 = add <4 x i32> %10936, <i32 poison, i32 1, i32 2, i32 3>
  %10938 = add i32 %10924, 3
  %10939 = add i32 %10938, %10610
  %10940 = insertelement <4 x i32> undef, i32 %10939, i32 0
  %10941 = shufflevector <4 x i32> %10940, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10942 = add <4 x i32> %10941, <i32 poison, i32 1, i32 2, i32 3>
  %10943 = add i32 %10924, 4
  %10944 = add i32 %10943, %10609
  %10945 = insertelement <4 x i32> undef, i32 %10944, i32 0
  %10946 = shufflevector <4 x i32> %10945, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10947 = add <4 x i32> %10946, <i32 poison, i32 1, i32 2, i32 3>
  %10948 = add i32 %10924, 5
  %10949 = add i32 %10948, %10608
  %10950 = insertelement <4 x i32> undef, i32 %10949, i32 0
  %10951 = shufflevector <4 x i32> %10950, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10952 = add <4 x i32> %10951, <i32 poison, i32 1, i32 2, i32 3>
  %10953 = add i32 %10924, 6
  %10954 = add i32 %10953, %10607
  %10955 = insertelement <4 x i32> undef, i32 %10954, i32 0
  %10956 = shufflevector <4 x i32> %10955, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10957 = add <4 x i32> %10956, <i32 poison, i32 1, i32 2, i32 3>
  %10958 = add i32 %10924, 7
  %10959 = add i32 %10958, %10606
  %10960 = insertelement <4 x i32> undef, i32 %10959, i32 0
  %10961 = shufflevector <4 x i32> %10960, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %10962 = add <4 x i32> %10961, <i32 poison, i32 1, i32 2, i32 3>
  %10963 = extractelement <32 x i16> %10920, i32 0
  %10964 = sext i32 %10924 to i64
  %10965 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10964
  store i16 %10963, i16* %10965, align 2, !tbaa !399
  %10966 = extractelement <4 x i32> %10927, i32 1
  %10967 = extractelement <32 x i16> %10920, i32 1
  %10968 = sext i32 %10966 to i64
  %10969 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10968
  store i16 %10967, i16* %10969, align 2, !tbaa !399
  %10970 = extractelement <4 x i32> %10927, i32 2
  %10971 = extractelement <32 x i16> %10920, i32 2
  %10972 = sext i32 %10970 to i64
  %10973 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10972
  store i16 %10971, i16* %10973, align 2, !tbaa !399
  %10974 = extractelement <4 x i32> %10927, i32 3
  %10975 = extractelement <32 x i16> %10920, i32 3
  %10976 = sext i32 %10974 to i64
  %10977 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10976
  store i16 %10975, i16* %10977, align 2, !tbaa !399
  %10978 = extractelement <32 x i16> %10920, i32 4
  %10979 = sext i32 %10929 to i64
  %10980 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10979
  store i16 %10978, i16* %10980, align 2, !tbaa !399
  %10981 = extractelement <4 x i32> %10932, i32 1
  %10982 = extractelement <32 x i16> %10920, i32 5
  %10983 = sext i32 %10981 to i64
  %10984 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10983
  store i16 %10982, i16* %10984, align 2, !tbaa !399
  %10985 = extractelement <4 x i32> %10932, i32 2
  %10986 = extractelement <32 x i16> %10920, i32 6
  %10987 = sext i32 %10985 to i64
  %10988 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10987
  store i16 %10986, i16* %10988, align 2, !tbaa !399
  %10989 = extractelement <4 x i32> %10932, i32 3
  %10990 = extractelement <32 x i16> %10920, i32 7
  %10991 = sext i32 %10989 to i64
  %10992 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10991
  store i16 %10990, i16* %10992, align 2, !tbaa !399
  %10993 = extractelement <32 x i16> %10920, i32 8
  %10994 = sext i32 %10934 to i64
  %10995 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10994
  store i16 %10993, i16* %10995, align 2, !tbaa !399
  %10996 = extractelement <4 x i32> %10937, i32 1
  %10997 = extractelement <32 x i16> %10920, i32 9
  %10998 = sext i32 %10996 to i64
  %10999 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %10998
  store i16 %10997, i16* %10999, align 2, !tbaa !399
  %11000 = extractelement <4 x i32> %10937, i32 2
  %11001 = extractelement <32 x i16> %10920, i32 10
  %11002 = sext i32 %11000 to i64
  %11003 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11002
  store i16 %11001, i16* %11003, align 2, !tbaa !399
  %11004 = extractelement <4 x i32> %10937, i32 3
  %11005 = extractelement <32 x i16> %10920, i32 11
  %11006 = sext i32 %11004 to i64
  %11007 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11006
  store i16 %11005, i16* %11007, align 2, !tbaa !399
  %11008 = extractelement <32 x i16> %10920, i32 12
  %11009 = sext i32 %10939 to i64
  %11010 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11009
  store i16 %11008, i16* %11010, align 2, !tbaa !399
  %11011 = extractelement <4 x i32> %10942, i32 1
  %11012 = extractelement <32 x i16> %10920, i32 13
  %11013 = sext i32 %11011 to i64
  %11014 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11013
  store i16 %11012, i16* %11014, align 2, !tbaa !399
  %11015 = extractelement <4 x i32> %10942, i32 2
  %11016 = extractelement <32 x i16> %10920, i32 14
  %11017 = sext i32 %11015 to i64
  %11018 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11017
  store i16 %11016, i16* %11018, align 2, !tbaa !399
  %11019 = extractelement <4 x i32> %10942, i32 3
  %11020 = extractelement <32 x i16> %10920, i32 15
  %11021 = sext i32 %11019 to i64
  %11022 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11021
  store i16 %11020, i16* %11022, align 2, !tbaa !399
  %11023 = extractelement <32 x i16> %10920, i32 16
  %11024 = sext i32 %10944 to i64
  %11025 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11024
  store i16 %11023, i16* %11025, align 2, !tbaa !399
  %11026 = extractelement <4 x i32> %10947, i32 1
  %11027 = extractelement <32 x i16> %10920, i32 17
  %11028 = sext i32 %11026 to i64
  %11029 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11028
  store i16 %11027, i16* %11029, align 2, !tbaa !399
  %11030 = extractelement <4 x i32> %10947, i32 2
  %11031 = extractelement <32 x i16> %10920, i32 18
  %11032 = sext i32 %11030 to i64
  %11033 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11032
  store i16 %11031, i16* %11033, align 2, !tbaa !399
  %11034 = extractelement <4 x i32> %10947, i32 3
  %11035 = extractelement <32 x i16> %10920, i32 19
  %11036 = sext i32 %11034 to i64
  %11037 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11036
  store i16 %11035, i16* %11037, align 2, !tbaa !399
  %11038 = extractelement <32 x i16> %10920, i32 20
  %11039 = sext i32 %10949 to i64
  %11040 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11039
  store i16 %11038, i16* %11040, align 2, !tbaa !399
  %11041 = extractelement <4 x i32> %10952, i32 1
  %11042 = extractelement <32 x i16> %10920, i32 21
  %11043 = sext i32 %11041 to i64
  %11044 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11043
  store i16 %11042, i16* %11044, align 2, !tbaa !399
  %11045 = extractelement <4 x i32> %10952, i32 2
  %11046 = extractelement <32 x i16> %10920, i32 22
  %11047 = sext i32 %11045 to i64
  %11048 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11047
  store i16 %11046, i16* %11048, align 2, !tbaa !399
  %11049 = extractelement <4 x i32> %10952, i32 3
  %11050 = extractelement <32 x i16> %10920, i32 23
  %11051 = sext i32 %11049 to i64
  %11052 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11051
  store i16 %11050, i16* %11052, align 2, !tbaa !399
  %11053 = extractelement <32 x i16> %10920, i32 24
  %11054 = sext i32 %10954 to i64
  %11055 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11054
  store i16 %11053, i16* %11055, align 2, !tbaa !399
  %11056 = extractelement <4 x i32> %10957, i32 1
  %11057 = extractelement <32 x i16> %10920, i32 25
  %11058 = sext i32 %11056 to i64
  %11059 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11058
  store i16 %11057, i16* %11059, align 2, !tbaa !399
  %11060 = extractelement <4 x i32> %10957, i32 2
  %11061 = extractelement <32 x i16> %10920, i32 26
  %11062 = sext i32 %11060 to i64
  %11063 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11062
  store i16 %11061, i16* %11063, align 2, !tbaa !399
  %11064 = extractelement <4 x i32> %10957, i32 3
  %11065 = extractelement <32 x i16> %10920, i32 27
  %11066 = sext i32 %11064 to i64
  %11067 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11066
  store i16 %11065, i16* %11067, align 2, !tbaa !399
  %11068 = extractelement <32 x i16> %10920, i32 28
  %11069 = sext i32 %10959 to i64
  %11070 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11069
  store i16 %11068, i16* %11070, align 2, !tbaa !399
  %11071 = extractelement <4 x i32> %10962, i32 1
  %11072 = extractelement <32 x i16> %10920, i32 29
  %11073 = sext i32 %11071 to i64
  %11074 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11073
  store i16 %11072, i16* %11074, align 2, !tbaa !399
  %11075 = extractelement <4 x i32> %10962, i32 2
  %11076 = extractelement <32 x i16> %10920, i32 30
  %11077 = sext i32 %11075 to i64
  %11078 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11077
  store i16 %11076, i16* %11078, align 2, !tbaa !399
  %11079 = extractelement <4 x i32> %10962, i32 3
  %11080 = extractelement <32 x i16> %10920, i32 31
  %11081 = sext i32 %11079 to i64
  %11082 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11081
  store i16 %11080, i16* %11082, align 2, !tbaa !399
  %indvars.iv.next4493 = add nuw nsw i64 %indvars.iv4492, 1
  %.not1981.us = icmp eq i64 %indvars.iv.next4493, %10667
  br i1 %.not1981.us, label %"end for input_wrapper.s0.c.c1310.loopexit.us", label %"for input_wrapper.s0.c.c1309.us"

"end for input_wrapper.s0.c.c1310.loopexit.us":   ; preds = %"for input_wrapper.s0.c.c1309.us"
  %indvars.iv.next4496 = add nuw nsw i64 %indvars.iv4495, 1
  %.not1980.us = icmp eq i64 %indvars.iv.next4496, %10668
  br i1 %.not1980.us, label %"end for input_wrapper.s0.x.x1298", label %"for input_wrapper.s0.x.x1297.us"

"end for input_wrapper.s0.x.x1298":               ; preds = %"end for input_wrapper.s0.c.c1310.loopexit.us", %"for input_wrapper.s0.y.rebased1292"
  br i1 %10615, label %"for input_wrapper.s0.x.x.rebased1315.preheader", label %"end for input_wrapper.s0.x.x.rebased1316", !prof !387

"for input_wrapper.s0.x.x.rebased1315.preheader": ; preds = %"end for input_wrapper.s0.x.x1298"
  %11083 = sext i32 %t42281296 to i64
  br i1 %10558, label %"for input_wrapper.s0.x.x.rebased1315.us", label %"end for input_wrapper.s0.x.x.rebased1316", !prof !387

"for input_wrapper.s0.x.x.rebased1315.us":        ; preds = %"for input_wrapper.s0.x.x.rebased1315.preheader", %"end for input_wrapper.s0.x.v211321.us"
  %indvars.iv4503 = phi i64 [ %indvars.iv.next4504, %"end for input_wrapper.s0.x.v211321.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased1315.preheader" ]
  %11084 = trunc i64 %indvars.iv4503 to i32
  %11085 = add i32 %t42151271, %11084
  %11086 = shl nsw i32 %11085, 3
  %a426.us = sub nsw i32 %a414, %11086
  %11087 = icmp slt i32 %a426.us, 7
  %t42461318.us = select i1 %11087, i32 %a426.us, i32 7
  %11088 = icmp sgt i32 %t42461318.us, -1
  br i1 %11088, label %"for input_wrapper.s0.x.v211320.us.us.preheader", label %"end for input_wrapper.s0.x.v211321.us", !prof !387

"for input_wrapper.s0.x.v211320.us.us.preheader": ; preds = %"for input_wrapper.s0.x.x.rebased1315.us"
  %11089 = sext i32 %11086 to i64
  %11090 = zext i32 %t42461318.us to i64
  br label %"for input_wrapper.s0.x.v211320.us.us"

"end for input_wrapper.s0.x.v211321.us":          ; preds = %"end for input_wrapper.s0.c.c1327.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased1315.us"
  %indvars.iv.next4504 = add nuw nsw i64 %indvars.iv4503, 1
  %.not1977.us = icmp eq i64 %indvars.iv4503, %10670
  br i1 %.not1977.us, label %"end for input_wrapper.s0.x.x.rebased1316", label %"for input_wrapper.s0.x.x.rebased1315.us"

"for input_wrapper.s0.x.v211320.us.us":           ; preds = %"for input_wrapper.s0.x.v211320.us.us.preheader", %"end for input_wrapper.s0.c.c1327.loopexit.us.us"
  %indvars.iv4500 = phi i64 [ 0, %"for input_wrapper.s0.x.v211320.us.us.preheader" ], [ %indvars.iv.next4501, %"end for input_wrapper.s0.c.c1327.loopexit.us.us" ]
  %11091 = add nsw i64 %indvars.iv4500, %11089
  %11092 = mul nsw i64 %11091, %10669
  %11093 = add nsw i64 %11092, %10904
  %11094 = trunc i64 %11091 to i32
  %t42481325.us.us = add i32 %b417, %11094
  %11095 = sext i32 %t42481325.us.us to i64
  br i1 %10712, label %"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c1326.us.us"

"for input_wrapper.s0.c.c1326.us.us":             ; preds = %"for input_wrapper.s0.x.v211320.us.us", %"for input_wrapper.s0.c.c1326.us.us"
  %indvars.iv4498 = phi i64 [ %indvars.iv.next4499.3, %"for input_wrapper.s0.c.c1326.us.us" ], [ 0, %"for input_wrapper.s0.x.v211320.us.us" ]
  %niter6039 = phi i64 [ %niter6039.nsub.3, %"for input_wrapper.s0.c.c1326.us.us" ], [ %unroll_iter6038, %"for input_wrapper.s0.x.v211320.us.us" ]
  %11096 = add nsw i64 %indvars.iv4498, %11095
  %11097 = shl nsw i64 %11096, 2
  %11098 = add nsw i64 %11097, %11083
  %11099 = getelementptr inbounds i8, i8* %172, i64 %11098
  %11100 = bitcast i8* %11099 to <4 x i8>*
  %11101 = load <4 x i8>, <4 x i8>* %11100, align 4, !tbaa !397
  %11102 = zext <4 x i8> %11101 to <4 x i16>
  %11103 = sub nsw <4 x i16> %11102, %10603
  %11104 = shl nuw nsw i64 %indvars.iv4498, 2
  %11105 = add nsw i64 %11104, %11093
  %11106 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11105
  %11107 = bitcast i16* %11106 to <4 x i16>*
  store <4 x i16> %11103, <4 x i16>* %11107, align 8, !tbaa !399
  %indvars.iv.next4499 = or i64 %indvars.iv4498, 1
  %11108 = add nsw i64 %indvars.iv.next4499, %11095
  %11109 = shl nsw i64 %11108, 2
  %11110 = add nsw i64 %11109, %11083
  %11111 = getelementptr inbounds i8, i8* %172, i64 %11110
  %11112 = bitcast i8* %11111 to <4 x i8>*
  %11113 = load <4 x i8>, <4 x i8>* %11112, align 4, !tbaa !397
  %11114 = zext <4 x i8> %11113 to <4 x i16>
  %11115 = sub nsw <4 x i16> %11114, %10603
  %11116 = shl nuw nsw i64 %indvars.iv.next4499, 2
  %11117 = add nsw i64 %11116, %11093
  %11118 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11117
  %11119 = bitcast i16* %11118 to <4 x i16>*
  store <4 x i16> %11115, <4 x i16>* %11119, align 8, !tbaa !399
  %indvars.iv.next4499.1 = or i64 %indvars.iv4498, 2
  %11120 = add nsw i64 %indvars.iv.next4499.1, %11095
  %11121 = shl nsw i64 %11120, 2
  %11122 = add nsw i64 %11121, %11083
  %11123 = getelementptr inbounds i8, i8* %172, i64 %11122
  %11124 = bitcast i8* %11123 to <4 x i8>*
  %11125 = load <4 x i8>, <4 x i8>* %11124, align 4, !tbaa !397
  %11126 = zext <4 x i8> %11125 to <4 x i16>
  %11127 = sub nsw <4 x i16> %11126, %10603
  %11128 = shl nuw nsw i64 %indvars.iv.next4499.1, 2
  %11129 = add nsw i64 %11128, %11093
  %11130 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11129
  %11131 = bitcast i16* %11130 to <4 x i16>*
  store <4 x i16> %11127, <4 x i16>* %11131, align 8, !tbaa !399
  %indvars.iv.next4499.2 = or i64 %indvars.iv4498, 3
  %11132 = add nsw i64 %indvars.iv.next4499.2, %11095
  %11133 = shl nsw i64 %11132, 2
  %11134 = add nsw i64 %11133, %11083
  %11135 = getelementptr inbounds i8, i8* %172, i64 %11134
  %11136 = bitcast i8* %11135 to <4 x i8>*
  %11137 = load <4 x i8>, <4 x i8>* %11136, align 4, !tbaa !397
  %11138 = zext <4 x i8> %11137 to <4 x i16>
  %11139 = sub nsw <4 x i16> %11138, %10603
  %11140 = shl nuw nsw i64 %indvars.iv.next4499.2, 2
  %11141 = add nsw i64 %11140, %11093
  %11142 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11141
  %11143 = bitcast i16* %11142 to <4 x i16>*
  store <4 x i16> %11139, <4 x i16>* %11143, align 8, !tbaa !399
  %indvars.iv.next4499.3 = add nuw nsw i64 %indvars.iv4498, 4
  %niter6039.nsub.3 = add i64 %niter6039, -4
  %niter6039.ncmp.3 = icmp eq i64 %niter6039.nsub.3, 0
  br i1 %niter6039.ncmp.3, label %"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c1326.us.us"

"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1326.us.us", %"for input_wrapper.s0.x.v211320.us.us"
  %indvars.iv4498.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v211320.us.us" ], [ %indvars.iv.next4499.3, %"for input_wrapper.s0.c.c1326.us.us" ]
  br i1 %lcmp.mod6037.not, label %"end for input_wrapper.s0.c.c1327.loopexit.us.us", label %"for input_wrapper.s0.c.c1326.us.us.epil"

"for input_wrapper.s0.c.c1326.us.us.epil":        ; preds = %"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c1326.us.us.epil"
  %indvars.iv4498.epil = phi i64 [ %indvars.iv.next4499.epil, %"for input_wrapper.s0.c.c1326.us.us.epil" ], [ %indvars.iv4498.unr, %"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa" ]
  %epil.iter6036 = phi i64 [ %epil.iter6036.sub, %"for input_wrapper.s0.c.c1326.us.us.epil" ], [ %xtraiter6035, %"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa" ]
  %11144 = add nsw i64 %indvars.iv4498.epil, %11095
  %11145 = shl nsw i64 %11144, 2
  %11146 = add nsw i64 %11145, %11083
  %11147 = getelementptr inbounds i8, i8* %172, i64 %11146
  %11148 = bitcast i8* %11147 to <4 x i8>*
  %11149 = load <4 x i8>, <4 x i8>* %11148, align 4, !tbaa !397
  %11150 = zext <4 x i8> %11149 to <4 x i16>
  %11151 = sub nsw <4 x i16> %11150, %10603
  %11152 = shl nuw nsw i64 %indvars.iv4498.epil, 2
  %11153 = add nsw i64 %11152, %11093
  %11154 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11153
  %11155 = bitcast i16* %11154 to <4 x i16>*
  store <4 x i16> %11151, <4 x i16>* %11155, align 8, !tbaa !399
  %indvars.iv.next4499.epil = add nuw nsw i64 %indvars.iv4498.epil, 1
  %epil.iter6036.sub = add i64 %epil.iter6036, -1
  %epil.iter6036.cmp.not = icmp eq i64 %epil.iter6036.sub, 0
  br i1 %epil.iter6036.cmp.not, label %"end for input_wrapper.s0.c.c1327.loopexit.us.us", label %"for input_wrapper.s0.c.c1326.us.us.epil", !llvm.loop !482

"end for input_wrapper.s0.c.c1327.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c1326.us.us.epil", %"end for input_wrapper.s0.c.c1327.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4501 = add nuw nsw i64 %indvars.iv4500, 1
  %.not1978.us.us = icmp eq i64 %indvars.iv4500, %11090
  br i1 %.not1978.us.us, label %"end for input_wrapper.s0.x.v211321.us", label %"for input_wrapper.s0.x.v211320.us.us"

"end for input_wrapper.s0.x.x.rebased1316":       ; preds = %"end for input_wrapper.s0.x.v211321.us", %"for input_wrapper.s0.x.x1297.preheader", %"for input_wrapper.s0.x.x.rebased1315.preheader", %"end for input_wrapper.s0.x.x1298"
  %indvars.iv.next4506 = add nuw nsw i64 %indvars.iv4505, 1
  %.not1976 = icmp eq i64 %indvars.iv4505, %10693
  br i1 %.not1976, label %"consume input_wrapper1418", label %"for input_wrapper.s0.y.rebased1292"

then_bb1329:                                      ; preds = %next_bb1288
  br i1 %10705, label %"consume input_wrapper1418", label %"for input_wrapper.s0.y.rebased1334.us", !prof !402

"for input_wrapper.s0.y.rebased1334.us":          ; preds = %then_bb1329, %"end for input_wrapper.s0.x.rebased1340.loopexit.us"
  %indvars.iv4458 = phi i64 [ %indvars.iv.next4459, %"end for input_wrapper.s0.x.rebased1340.loopexit.us" ], [ 0, %then_bb1329 ]
  %11156 = trunc i64 %indvars.iv4458 to i32
  %t42551337.us = mul i32 %10575, %11156
  %11157 = add nsw i64 %indvars.iv4458, %10901
  %11158 = mul nsw i64 %11157, %10661
  %11159 = add nsw i64 %11158, %10896
  br i1 %10592, label %"for input_wrapper.s0.x.rebased1339.us.us", label %"for input_wrapper.s0.x.rebased1339.preheader.split.us3385", !prof !387

"for input_wrapper.s0.x.rebased1339.preheader.split.us3385": ; preds = %"for input_wrapper.s0.y.rebased1334.us"
  br i1 %10532, label %"for input_wrapper.s0.x.rebased1339.us3369.us", label %"end for input_wrapper.s0.x.rebased1340.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased1340.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us", %"end for input_wrapper.s0.c.c.rebased1350.loopexit.us.us", %"for input_wrapper.s0.x.rebased1339.preheader.split.us3385"
  %indvars.iv.next4459 = add nuw nsw i64 %indvars.iv4458, 1
  %.not1971.us = icmp eq i64 %indvars.iv4458, %10689
  br i1 %.not1971.us, label %"consume input_wrapper1418", label %"for input_wrapper.s0.y.rebased1334.us"

"for input_wrapper.s0.x.rebased1339.us.us":       ; preds = %"for input_wrapper.s0.y.rebased1334.us", %"end for input_wrapper.s0.c.c.rebased1350.loopexit.us.us"
  %indvars.iv4455 = phi i64 [ %indvars.iv.next4456, %"end for input_wrapper.s0.c.c.rebased1350.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased1334.us" ]
  %11160 = trunc i64 %indvars.iv4455 to i32
  %reass.add2769.us.us = add i32 %t42551337.us, %11160
  %reass.mul2770.us.us = mul i32 %reass.add2769.us.us, %10588
  %11161 = add nsw i64 %indvars.iv4455, %10656
  %11162 = mul nsw i64 %11161, %10657
  %11163 = add nsw i64 %11159, %11162
  %11164 = sext i32 %reass.mul2770.us.us to i64
  br i1 %10532, label %"for input_wrapper.s0.c.c1344.us.us.preheader", label %"end for input_wrapper.s0.c.c1345.us.us", !prof !387

"for input_wrapper.s0.c.c1344.us.us.preheader":   ; preds = %"for input_wrapper.s0.x.rebased1339.us.us"
  br i1 %10707, label %"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1344.us.us"

"for input_wrapper.s0.c.c1344.us.us":             ; preds = %"for input_wrapper.s0.c.c1344.us.us.preheader", %"for input_wrapper.s0.c.c1344.us.us"
  %indvars.iv4451 = phi i64 [ %indvars.iv.next4452.3, %"for input_wrapper.s0.c.c1344.us.us" ], [ 0, %"for input_wrapper.s0.c.c1344.us.us.preheader" ]
  %niter6015 = phi i64 [ %niter6015.nsub.3, %"for input_wrapper.s0.c.c1344.us.us" ], [ %unroll_iter6014, %"for input_wrapper.s0.c.c1344.us.us.preheader" ]
  %11165 = shl nuw nsw i64 %indvars.iv4451, 4
  %11166 = add nsw i64 %11165, %11163
  %11167 = getelementptr inbounds i8, i8* %172, i64 %11166
  %11168 = bitcast i8* %11167 to <16 x i8>*
  %11169 = load <16 x i8>, <16 x i8>* %11168, align 4, !tbaa !397
  %11170 = zext <16 x i8> %11169 to <16 x i16>
  %11171 = sub nsw <16 x i16> %11170, %10591
  %11172 = add nsw i64 %11165, %11164
  %11173 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11172
  %11174 = bitcast i16* %11173 to <16 x i16>*
  store <16 x i16> %11171, <16 x i16>* %11174, align 8, !tbaa !399
  %indvars.iv.next4452 = shl i64 %indvars.iv4451, 4
  %11175 = or i64 %indvars.iv.next4452, 16
  %11176 = add nsw i64 %11175, %11163
  %11177 = getelementptr inbounds i8, i8* %172, i64 %11176
  %11178 = bitcast i8* %11177 to <16 x i8>*
  %11179 = load <16 x i8>, <16 x i8>* %11178, align 4, !tbaa !397
  %11180 = zext <16 x i8> %11179 to <16 x i16>
  %11181 = sub nsw <16 x i16> %11180, %10591
  %11182 = add nsw i64 %11175, %11164
  %11183 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11182
  %11184 = bitcast i16* %11183 to <16 x i16>*
  store <16 x i16> %11181, <16 x i16>* %11184, align 8, !tbaa !399
  %indvars.iv.next4452.1 = shl i64 %indvars.iv4451, 4
  %11185 = or i64 %indvars.iv.next4452.1, 32
  %11186 = add nsw i64 %11185, %11163
  %11187 = getelementptr inbounds i8, i8* %172, i64 %11186
  %11188 = bitcast i8* %11187 to <16 x i8>*
  %11189 = load <16 x i8>, <16 x i8>* %11188, align 4, !tbaa !397
  %11190 = zext <16 x i8> %11189 to <16 x i16>
  %11191 = sub nsw <16 x i16> %11190, %10591
  %11192 = add nsw i64 %11185, %11164
  %11193 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11192
  %11194 = bitcast i16* %11193 to <16 x i16>*
  store <16 x i16> %11191, <16 x i16>* %11194, align 8, !tbaa !399
  %indvars.iv.next4452.2 = shl i64 %indvars.iv4451, 4
  %11195 = or i64 %indvars.iv.next4452.2, 48
  %11196 = add nsw i64 %11195, %11163
  %11197 = getelementptr inbounds i8, i8* %172, i64 %11196
  %11198 = bitcast i8* %11197 to <16 x i8>*
  %11199 = load <16 x i8>, <16 x i8>* %11198, align 4, !tbaa !397
  %11200 = zext <16 x i8> %11199 to <16 x i16>
  %11201 = sub nsw <16 x i16> %11200, %10591
  %11202 = add nsw i64 %11195, %11164
  %11203 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11202
  %11204 = bitcast i16* %11203 to <16 x i16>*
  store <16 x i16> %11201, <16 x i16>* %11204, align 8, !tbaa !399
  %indvars.iv.next4452.3 = add nuw nsw i64 %indvars.iv4451, 4
  %niter6015.nsub.3 = add i64 %niter6015, -4
  %niter6015.ncmp.3 = icmp eq i64 %niter6015.nsub.3, 0
  br i1 %niter6015.ncmp.3, label %"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1344.us.us"

"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1344.us.us", %"for input_wrapper.s0.c.c1344.us.us.preheader"
  %indvars.iv4451.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c1344.us.us.preheader" ], [ %indvars.iv.next4452.3, %"for input_wrapper.s0.c.c1344.us.us" ]
  br i1 %lcmp.mod6013.not, label %"end for input_wrapper.s0.c.c1345.us.us", label %"for input_wrapper.s0.c.c1344.us.us.epil"

"for input_wrapper.s0.c.c1344.us.us.epil":        ; preds = %"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1344.us.us.epil"
  %indvars.iv4451.epil = phi i64 [ %indvars.iv.next4452.epil, %"for input_wrapper.s0.c.c1344.us.us.epil" ], [ %indvars.iv4451.unr, %"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa" ]
  %epil.iter6012 = phi i64 [ %epil.iter6012.sub, %"for input_wrapper.s0.c.c1344.us.us.epil" ], [ %xtraiter6011, %"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa" ]
  %11205 = shl nuw nsw i64 %indvars.iv4451.epil, 4
  %11206 = add nsw i64 %11205, %11163
  %11207 = getelementptr inbounds i8, i8* %172, i64 %11206
  %11208 = bitcast i8* %11207 to <16 x i8>*
  %11209 = load <16 x i8>, <16 x i8>* %11208, align 4, !tbaa !397
  %11210 = zext <16 x i8> %11209 to <16 x i16>
  %11211 = sub nsw <16 x i16> %11210, %10591
  %11212 = add nsw i64 %11205, %11164
  %11213 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11212
  %11214 = bitcast i16* %11213 to <16 x i16>*
  store <16 x i16> %11211, <16 x i16>* %11214, align 8, !tbaa !399
  %indvars.iv.next4452.epil = add nuw nsw i64 %indvars.iv4451.epil, 1
  %epil.iter6012.sub = add i64 %epil.iter6012, -1
  %epil.iter6012.cmp.not = icmp eq i64 %epil.iter6012.sub, 0
  br i1 %epil.iter6012.cmp.not, label %"end for input_wrapper.s0.c.c1345.us.us", label %"for input_wrapper.s0.c.c1344.us.us.epil", !llvm.loop !483

"end for input_wrapper.s0.c.c1345.us.us":         ; preds = %"end for input_wrapper.s0.c.c1345.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1344.us.us.epil", %"for input_wrapper.s0.x.rebased1339.us.us"
  br label %"for input_wrapper.s0.c.c.rebased1349.us.us"

"for input_wrapper.s0.c.c.rebased1349.us.us":     ; preds = %after_bb1352.us.us, %"end for input_wrapper.s0.c.c1345.us.us"
  %indvars.iv4453 = phi i64 [ %indvars.iv.next4454, %after_bb1352.us.us ], [ 0, %"end for input_wrapper.s0.c.c1345.us.us" ]
  %11215 = add nsw i64 %indvars.iv4453, %10659
  %11216 = trunc i64 %11215 to i32
  %11217 = shl nsw i32 %11216, 4
  %11218 = add nsw i32 %11217, 16
  %.not1973.us.us = icmp sgt i32 %11218, %t42531332
  br i1 %.not1973.us.us, label %next_bb1354.us.us, label %then_bb1353.us.us

then_bb1353.us.us:                                ; preds = %"for input_wrapper.s0.c.c.rebased1349.us.us"
  %11219 = shl nsw i64 %11215, 4
  %11220 = add nsw i64 %11219, %11163
  %11221 = getelementptr inbounds i8, i8* %172, i64 %11220
  %11222 = bitcast i8* %11221 to <16 x i8>*
  %11223 = load <16 x i8>, <16 x i8>* %11222, align 4, !tbaa !397
  %11224 = zext <16 x i8> %11223 to <16 x i16>
  %11225 = sub nsw <16 x i16> %11224, %10591
  %11226 = add nsw i64 %11219, %11164
  %11227 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11226
  %11228 = bitcast i16* %11227 to <16 x i16>*
  store <16 x i16> %11225, <16 x i16>* %11228, align 8, !tbaa !399
  br label %after_bb1352.us.us

next_bb1354.us.us:                                ; preds = %"for input_wrapper.s0.c.c.rebased1349.us.us"
  %11229 = or i32 %11217, 1
  %11230 = insertelement <16 x i32> undef, i32 %11229, i32 0
  %11231 = shufflevector <16 x i32> %11230, <16 x i32> undef, <16 x i32> zeroinitializer
  %11232 = add nsw <16 x i32> %11231, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11233 = shufflevector <16 x i32> %11232, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11234 = icmp sgt <8 x i32> %11233, %10594
  %11235 = shufflevector <16 x i32> %11232, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11236 = icmp sgt <8 x i32> %11235, %10594
  %11237 = shufflevector <8 x i1> %11234, <8 x i1> %11236, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11238 = xor <16 x i1> %11237, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %11239 = shl nsw i64 %11215, 4
  %11240 = add nsw i64 %11239, %11163
  %11241 = getelementptr inbounds i8, i8* %172, i64 %11240
  %11242 = bitcast i8* %11241 to <16 x i8>*
  %11243 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %11242, i32 4, <16 x i1> %11238, <16 x i8> undef), !tbaa !397
  %11244 = zext <16 x i8> %11243 to <16 x i16>
  %11245 = sub nsw <16 x i16> %11244, %10591
  %11246 = add nsw i64 %11239, %11164
  %11247 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11246
  %11248 = bitcast i16* %11247 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %11245, <16 x i16>* %11248, i32 8, <16 x i1> %11238), !tbaa !399
  br label %after_bb1352.us.us

after_bb1352.us.us:                               ; preds = %next_bb1354.us.us, %then_bb1353.us.us
  %indvars.iv.next4454 = add nuw nsw i64 %indvars.iv4453, 1
  %.not1974.us.us = icmp eq i64 %indvars.iv.next4454, %10660
  br i1 %.not1974.us.us, label %"end for input_wrapper.s0.c.c.rebased1350.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased1349.us.us"

"end for input_wrapper.s0.c.c.rebased1350.loopexit.us.us": ; preds = %after_bb1352.us.us
  %indvars.iv.next4456 = add nuw nsw i64 %indvars.iv4455, 1
  %.not1972.us.us = icmp eq i64 %indvars.iv4455, %10658
  br i1 %.not1972.us.us, label %"end for input_wrapper.s0.x.rebased1340.loopexit.us", label %"for input_wrapper.s0.x.rebased1339.us.us"

"for input_wrapper.s0.x.rebased1339.us3369.us":   ; preds = %"for input_wrapper.s0.x.rebased1339.preheader.split.us3385", %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us"
  %indvars.iv4448 = phi i64 [ %indvars.iv.next4449, %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us" ], [ 0, %"for input_wrapper.s0.x.rebased1339.preheader.split.us3385" ]
  %11249 = trunc i64 %indvars.iv4448 to i32
  %reass.add2769.us3371.us = add i32 %t42551337.us, %11249
  %reass.mul2770.us3372.us = mul i32 %reass.add2769.us3371.us, %10588
  %11250 = add nsw i64 %indvars.iv4448, %10656
  %11251 = mul nsw i64 %11250, %10657
  %11252 = add nsw i64 %11159, %11251
  %11253 = sext i32 %reass.mul2770.us3372.us to i64
  br i1 %10706, label %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa", label %"for input_wrapper.s0.c.c1344.us3374.us"

"for input_wrapper.s0.c.c1344.us3374.us":         ; preds = %"for input_wrapper.s0.x.rebased1339.us3369.us", %"for input_wrapper.s0.c.c1344.us3374.us"
  %indvars.iv4446 = phi i64 [ %indvars.iv.next4447.3, %"for input_wrapper.s0.c.c1344.us3374.us" ], [ 0, %"for input_wrapper.s0.x.rebased1339.us3369.us" ]
  %niter6010 = phi i64 [ %niter6010.nsub.3, %"for input_wrapper.s0.c.c1344.us3374.us" ], [ %unroll_iter6009, %"for input_wrapper.s0.x.rebased1339.us3369.us" ]
  %11254 = shl nuw nsw i64 %indvars.iv4446, 4
  %11255 = add nsw i64 %11254, %11252
  %11256 = getelementptr inbounds i8, i8* %172, i64 %11255
  %11257 = bitcast i8* %11256 to <16 x i8>*
  %11258 = load <16 x i8>, <16 x i8>* %11257, align 4, !tbaa !397
  %11259 = zext <16 x i8> %11258 to <16 x i16>
  %11260 = sub nsw <16 x i16> %11259, %10591
  %11261 = add nsw i64 %11254, %11253
  %11262 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11261
  %11263 = bitcast i16* %11262 to <16 x i16>*
  store <16 x i16> %11260, <16 x i16>* %11263, align 8, !tbaa !399
  %indvars.iv.next4447 = shl i64 %indvars.iv4446, 4
  %11264 = or i64 %indvars.iv.next4447, 16
  %11265 = add nsw i64 %11264, %11252
  %11266 = getelementptr inbounds i8, i8* %172, i64 %11265
  %11267 = bitcast i8* %11266 to <16 x i8>*
  %11268 = load <16 x i8>, <16 x i8>* %11267, align 4, !tbaa !397
  %11269 = zext <16 x i8> %11268 to <16 x i16>
  %11270 = sub nsw <16 x i16> %11269, %10591
  %11271 = add nsw i64 %11264, %11253
  %11272 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11271
  %11273 = bitcast i16* %11272 to <16 x i16>*
  store <16 x i16> %11270, <16 x i16>* %11273, align 8, !tbaa !399
  %indvars.iv.next4447.1 = shl i64 %indvars.iv4446, 4
  %11274 = or i64 %indvars.iv.next4447.1, 32
  %11275 = add nsw i64 %11274, %11252
  %11276 = getelementptr inbounds i8, i8* %172, i64 %11275
  %11277 = bitcast i8* %11276 to <16 x i8>*
  %11278 = load <16 x i8>, <16 x i8>* %11277, align 4, !tbaa !397
  %11279 = zext <16 x i8> %11278 to <16 x i16>
  %11280 = sub nsw <16 x i16> %11279, %10591
  %11281 = add nsw i64 %11274, %11253
  %11282 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11281
  %11283 = bitcast i16* %11282 to <16 x i16>*
  store <16 x i16> %11280, <16 x i16>* %11283, align 8, !tbaa !399
  %indvars.iv.next4447.2 = shl i64 %indvars.iv4446, 4
  %11284 = or i64 %indvars.iv.next4447.2, 48
  %11285 = add nsw i64 %11284, %11252
  %11286 = getelementptr inbounds i8, i8* %172, i64 %11285
  %11287 = bitcast i8* %11286 to <16 x i8>*
  %11288 = load <16 x i8>, <16 x i8>* %11287, align 4, !tbaa !397
  %11289 = zext <16 x i8> %11288 to <16 x i16>
  %11290 = sub nsw <16 x i16> %11289, %10591
  %11291 = add nsw i64 %11284, %11253
  %11292 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11291
  %11293 = bitcast i16* %11292 to <16 x i16>*
  store <16 x i16> %11290, <16 x i16>* %11293, align 8, !tbaa !399
  %indvars.iv.next4447.3 = add nuw nsw i64 %indvars.iv4446, 4
  %niter6010.nsub.3 = add i64 %niter6010, -4
  %niter6010.ncmp.3 = icmp eq i64 %niter6010.nsub.3, 0
  br i1 %niter6010.ncmp.3, label %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa", label %"for input_wrapper.s0.c.c1344.us3374.us"

"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1344.us3374.us", %"for input_wrapper.s0.x.rebased1339.us3369.us"
  %indvars.iv4446.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1339.us3369.us" ], [ %indvars.iv.next4447.3, %"for input_wrapper.s0.c.c1344.us3374.us" ]
  br i1 %lcmp.mod6008.not, label %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us", label %"for input_wrapper.s0.c.c1344.us3374.us.epil"

"for input_wrapper.s0.c.c1344.us3374.us.epil":    ; preds = %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa", %"for input_wrapper.s0.c.c1344.us3374.us.epil"
  %indvars.iv4446.epil = phi i64 [ %indvars.iv.next4447.epil, %"for input_wrapper.s0.c.c1344.us3374.us.epil" ], [ %indvars.iv4446.unr, %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa" ]
  %epil.iter6007 = phi i64 [ %epil.iter6007.sub, %"for input_wrapper.s0.c.c1344.us3374.us.epil" ], [ %xtraiter6006, %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa" ]
  %11294 = shl nuw nsw i64 %indvars.iv4446.epil, 4
  %11295 = add nsw i64 %11294, %11252
  %11296 = getelementptr inbounds i8, i8* %172, i64 %11295
  %11297 = bitcast i8* %11296 to <16 x i8>*
  %11298 = load <16 x i8>, <16 x i8>* %11297, align 4, !tbaa !397
  %11299 = zext <16 x i8> %11298 to <16 x i16>
  %11300 = sub nsw <16 x i16> %11299, %10591
  %11301 = add nsw i64 %11294, %11253
  %11302 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11301
  %11303 = bitcast i16* %11302 to <16 x i16>*
  store <16 x i16> %11300, <16 x i16>* %11303, align 8, !tbaa !399
  %indvars.iv.next4447.epil = add nuw nsw i64 %indvars.iv4446.epil, 1
  %epil.iter6007.sub = add i64 %epil.iter6007, -1
  %epil.iter6007.cmp.not = icmp eq i64 %epil.iter6007.sub, 0
  br i1 %epil.iter6007.cmp.not, label %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us", label %"for input_wrapper.s0.c.c1344.us3374.us.epil", !llvm.loop !484

"end for input_wrapper.s0.c.c1345.loopexit.us3380.us": ; preds = %"for input_wrapper.s0.c.c1344.us3374.us.epil", %"end for input_wrapper.s0.c.c1345.loopexit.us3380.us.unr-lcssa"
  %indvars.iv.next4449 = add nuw nsw i64 %indvars.iv4448, 1
  %.not1972.us3378.us = icmp eq i64 %indvars.iv4448, %10658
  br i1 %.not1972.us3378.us, label %"end for input_wrapper.s0.x.rebased1340.loopexit.us", label %"for input_wrapper.s0.x.rebased1339.us3369.us"

next_bb1330:                                      ; preds = %next_bb1288
  br i1 %10538, label %next_bb1358, label %then_bb1357

then_bb1357:                                      ; preds = %next_bb1330
  br i1 %10685, label %"for input_wrapper.s0.y.rebased1362", label %"consume input_wrapper1418", !prof !387

next_bb1358:                                      ; preds = %next_bb1330
  br i1 %10539, label %next_bb1386, label %then_bb1385

"for input_wrapper.s0.y.rebased1362":             ; preds = %then_bb1357, %"end for input_wrapper.s0.x.rebased1368"
  %indvars.iv4473 = phi i64 [ %indvars.iv.next4474, %"end for input_wrapper.s0.x.rebased1368" ], [ 0, %then_bb1357 ]
  %11304 = trunc i64 %indvars.iv4473 to i32
  %t42641365 = mul i32 %10575, %11304
  %11305 = add nsw i64 %indvars.iv4473, %10901
  %11306 = mul nsw i64 %11305, %10661
  %11307 = add nsw i64 %11306, %10896
  br i1 %10584, label %"for input_wrapper.s0.x.rebased1367.preheader", label %"end for input_wrapper.s0.x.rebased1368", !prof !387

"for input_wrapper.s0.x.rebased1367.preheader":   ; preds = %"for input_wrapper.s0.y.rebased1362"
  br i1 %10598, label %"for input_wrapper.s0.x.rebased1367.us", label %"for input_wrapper.s0.x.rebased1367.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased1367.us":          ; preds = %"for input_wrapper.s0.x.rebased1367.preheader", %"end for input_wrapper.s0.c.c.rebased1378.loopexit.us"
  %indvars.iv4470 = phi i64 [ %indvars.iv.next4471, %"end for input_wrapper.s0.c.c.rebased1378.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased1367.preheader" ]
  %11308 = trunc i64 %indvars.iv4470 to i32
  %reass.add2771.us = add i32 %t42641365, %11308
  %reass.mul2772.us = mul i32 %reass.add2771.us, %10588
  %11309 = add nsw i64 %indvars.iv4470, %10656
  %11310 = mul nsw i64 %11309, %10657
  %11311 = add nsw i64 %11307, %11310
  %11312 = sext i32 %reass.mul2772.us to i64
  br i1 %10531, label %"for input_wrapper.s0.c.c1372.us.preheader", label %"end for input_wrapper.s0.c.c1373.us", !prof !387

"for input_wrapper.s0.c.c1372.us.preheader":      ; preds = %"for input_wrapper.s0.x.rebased1367.us"
  br i1 %10709, label %"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1372.us"

"for input_wrapper.s0.c.c1372.us":                ; preds = %"for input_wrapper.s0.c.c1372.us.preheader", %"for input_wrapper.s0.c.c1372.us"
  %indvars.iv4466 = phi i64 [ %indvars.iv.next4467.3, %"for input_wrapper.s0.c.c1372.us" ], [ 0, %"for input_wrapper.s0.c.c1372.us.preheader" ]
  %niter6025 = phi i64 [ %niter6025.nsub.3, %"for input_wrapper.s0.c.c1372.us" ], [ %unroll_iter6024, %"for input_wrapper.s0.c.c1372.us.preheader" ]
  %11313 = shl nuw nsw i64 %indvars.iv4466, 3
  %11314 = add nsw i64 %11313, %11311
  %11315 = getelementptr inbounds i8, i8* %172, i64 %11314
  %11316 = bitcast i8* %11315 to <8 x i8>*
  %11317 = load <8 x i8>, <8 x i8>* %11316, align 4, !tbaa !397
  %11318 = zext <8 x i8> %11317 to <8 x i16>
  %11319 = sub nsw <8 x i16> %11318, %10597
  %11320 = add nsw i64 %11313, %11312
  %11321 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11320
  %11322 = bitcast i16* %11321 to <8 x i16>*
  store <8 x i16> %11319, <8 x i16>* %11322, align 8, !tbaa !399
  %indvars.iv.next4467 = shl i64 %indvars.iv4466, 3
  %11323 = or i64 %indvars.iv.next4467, 8
  %11324 = add nsw i64 %11323, %11311
  %11325 = getelementptr inbounds i8, i8* %172, i64 %11324
  %11326 = bitcast i8* %11325 to <8 x i8>*
  %11327 = load <8 x i8>, <8 x i8>* %11326, align 4, !tbaa !397
  %11328 = zext <8 x i8> %11327 to <8 x i16>
  %11329 = sub nsw <8 x i16> %11328, %10597
  %11330 = add nsw i64 %11323, %11312
  %11331 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11330
  %11332 = bitcast i16* %11331 to <8 x i16>*
  store <8 x i16> %11329, <8 x i16>* %11332, align 8, !tbaa !399
  %indvars.iv.next4467.1 = shl i64 %indvars.iv4466, 3
  %11333 = or i64 %indvars.iv.next4467.1, 16
  %11334 = add nsw i64 %11333, %11311
  %11335 = getelementptr inbounds i8, i8* %172, i64 %11334
  %11336 = bitcast i8* %11335 to <8 x i8>*
  %11337 = load <8 x i8>, <8 x i8>* %11336, align 4, !tbaa !397
  %11338 = zext <8 x i8> %11337 to <8 x i16>
  %11339 = sub nsw <8 x i16> %11338, %10597
  %11340 = add nsw i64 %11333, %11312
  %11341 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11340
  %11342 = bitcast i16* %11341 to <8 x i16>*
  store <8 x i16> %11339, <8 x i16>* %11342, align 8, !tbaa !399
  %indvars.iv.next4467.2 = shl i64 %indvars.iv4466, 3
  %11343 = or i64 %indvars.iv.next4467.2, 24
  %11344 = add nsw i64 %11343, %11311
  %11345 = getelementptr inbounds i8, i8* %172, i64 %11344
  %11346 = bitcast i8* %11345 to <8 x i8>*
  %11347 = load <8 x i8>, <8 x i8>* %11346, align 4, !tbaa !397
  %11348 = zext <8 x i8> %11347 to <8 x i16>
  %11349 = sub nsw <8 x i16> %11348, %10597
  %11350 = add nsw i64 %11343, %11312
  %11351 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11350
  %11352 = bitcast i16* %11351 to <8 x i16>*
  store <8 x i16> %11349, <8 x i16>* %11352, align 8, !tbaa !399
  %indvars.iv.next4467.3 = add nuw nsw i64 %indvars.iv4466, 4
  %niter6025.nsub.3 = add i64 %niter6025, -4
  %niter6025.ncmp.3 = icmp eq i64 %niter6025.nsub.3, 0
  br i1 %niter6025.ncmp.3, label %"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1372.us"

"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1372.us", %"for input_wrapper.s0.c.c1372.us.preheader"
  %indvars.iv4466.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c1372.us.preheader" ], [ %indvars.iv.next4467.3, %"for input_wrapper.s0.c.c1372.us" ]
  br i1 %lcmp.mod6023.not, label %"end for input_wrapper.s0.c.c1373.us", label %"for input_wrapper.s0.c.c1372.us.epil"

"for input_wrapper.s0.c.c1372.us.epil":           ; preds = %"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1372.us.epil"
  %indvars.iv4466.epil = phi i64 [ %indvars.iv.next4467.epil, %"for input_wrapper.s0.c.c1372.us.epil" ], [ %indvars.iv4466.unr, %"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa" ]
  %epil.iter6022 = phi i64 [ %epil.iter6022.sub, %"for input_wrapper.s0.c.c1372.us.epil" ], [ %xtraiter6021, %"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa" ]
  %11353 = shl nuw nsw i64 %indvars.iv4466.epil, 3
  %11354 = add nsw i64 %11353, %11311
  %11355 = getelementptr inbounds i8, i8* %172, i64 %11354
  %11356 = bitcast i8* %11355 to <8 x i8>*
  %11357 = load <8 x i8>, <8 x i8>* %11356, align 4, !tbaa !397
  %11358 = zext <8 x i8> %11357 to <8 x i16>
  %11359 = sub nsw <8 x i16> %11358, %10597
  %11360 = add nsw i64 %11353, %11312
  %11361 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11360
  %11362 = bitcast i16* %11361 to <8 x i16>*
  store <8 x i16> %11359, <8 x i16>* %11362, align 8, !tbaa !399
  %indvars.iv.next4467.epil = add nuw nsw i64 %indvars.iv4466.epil, 1
  %epil.iter6022.sub = add i64 %epil.iter6022, -1
  %epil.iter6022.cmp.not = icmp eq i64 %epil.iter6022.sub, 0
  br i1 %epil.iter6022.cmp.not, label %"end for input_wrapper.s0.c.c1373.us", label %"for input_wrapper.s0.c.c1372.us.epil", !llvm.loop !485

"end for input_wrapper.s0.c.c1373.us":            ; preds = %"end for input_wrapper.s0.c.c1373.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1372.us.epil", %"for input_wrapper.s0.x.rebased1367.us"
  br label %"for input_wrapper.s0.c.c.rebased1377.us"

"for input_wrapper.s0.c.c.rebased1377.us":        ; preds = %"end for input_wrapper.s0.c.c1373.us", %after_bb1380.us
  %indvars.iv4468 = phi i64 [ 0, %"end for input_wrapper.s0.c.c1373.us" ], [ %indvars.iv.next4469, %after_bb1380.us ]
  %11363 = add nsw i64 %indvars.iv4468, %10663
  %11364 = trunc i64 %11363 to i32
  %11365 = shl nsw i32 %11364, 3
  %11366 = add nsw i32 %11365, 8
  %.not1968.us = icmp sgt i32 %11366, %t42531332
  br i1 %.not1968.us, label %next_bb1382.us, label %then_bb1381.us

then_bb1381.us:                                   ; preds = %"for input_wrapper.s0.c.c.rebased1377.us"
  %11367 = shl nsw i64 %11363, 3
  %11368 = add nsw i64 %11367, %11311
  %11369 = getelementptr inbounds i8, i8* %172, i64 %11368
  %11370 = bitcast i8* %11369 to <8 x i8>*
  %11371 = load <8 x i8>, <8 x i8>* %11370, align 4, !tbaa !397
  %11372 = zext <8 x i8> %11371 to <8 x i16>
  %11373 = sub nsw <8 x i16> %11372, %10597
  %11374 = add nsw i64 %11367, %11312
  %11375 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11374
  %11376 = bitcast i16* %11375 to <8 x i16>*
  store <8 x i16> %11373, <8 x i16>* %11376, align 8, !tbaa !399
  br label %after_bb1380.us

next_bb1382.us:                                   ; preds = %"for input_wrapper.s0.c.c.rebased1377.us"
  %11377 = or i32 %11365, 1
  %11378 = insertelement <8 x i32> undef, i32 %11377, i32 0
  %11379 = shufflevector <8 x i32> %11378, <8 x i32> undef, <8 x i32> zeroinitializer
  %11380 = add nsw <8 x i32> %11379, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11381 = icmp sle <8 x i32> %11380, %10600
  %11382 = shl nsw i64 %11363, 3
  %11383 = add nsw i64 %11382, %11311
  %11384 = getelementptr inbounds i8, i8* %172, i64 %11383
  %11385 = bitcast i8* %11384 to <8 x i8>*
  %11386 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %11385, i32 4, <8 x i1> %11381, <8 x i8> undef), !tbaa !397
  %11387 = zext <8 x i8> %11386 to <8 x i16>
  %11388 = sub nsw <8 x i16> %11387, %10597
  %11389 = add nsw i64 %11382, %11312
  %11390 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11389
  %11391 = bitcast i16* %11390 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %11388, <8 x i16>* %11391, i32 8, <8 x i1> %11381), !tbaa !399
  br label %after_bb1380.us

after_bb1380.us:                                  ; preds = %next_bb1382.us, %then_bb1381.us
  %indvars.iv.next4469 = add nuw nsw i64 %indvars.iv4468, 1
  %.not1969.us = icmp eq i64 %indvars.iv.next4469, %10664
  br i1 %.not1969.us, label %"end for input_wrapper.s0.c.c.rebased1378.loopexit.us", label %"for input_wrapper.s0.c.c.rebased1377.us"

"end for input_wrapper.s0.c.c.rebased1378.loopexit.us": ; preds = %after_bb1380.us
  %indvars.iv.next4471 = add nuw nsw i64 %indvars.iv4470, 1
  %.not1967.us = icmp eq i64 %indvars.iv4470, %10658
  br i1 %.not1967.us, label %"end for input_wrapper.s0.x.rebased1368", label %"for input_wrapper.s0.x.rebased1367.us"

"for input_wrapper.s0.x.rebased1367.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased1367.preheader"
  br i1 %10531, label %"for input_wrapper.s0.x.rebased1367.us3388", label %"end for input_wrapper.s0.x.rebased1368", !prof !387

"for input_wrapper.s0.x.rebased1367.us3388":      ; preds = %"for input_wrapper.s0.x.rebased1367.preheader.split", %"end for input_wrapper.s0.c.c1373.loopexit.us3399"
  %indvars.iv4463 = phi i64 [ %indvars.iv.next4464, %"end for input_wrapper.s0.c.c1373.loopexit.us3399" ], [ 0, %"for input_wrapper.s0.x.rebased1367.preheader.split" ]
  %11392 = trunc i64 %indvars.iv4463 to i32
  %reass.add2771.us3390 = add i32 %t42641365, %11392
  %reass.mul2772.us3391 = mul i32 %reass.add2771.us3390, %10588
  %11393 = add nsw i64 %indvars.iv4463, %10656
  %11394 = mul nsw i64 %11393, %10657
  %11395 = add nsw i64 %11307, %11394
  %11396 = sext i32 %reass.mul2772.us3391 to i64
  br i1 %10708, label %"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa", label %"for input_wrapper.s0.c.c1372.us3393"

"for input_wrapper.s0.c.c1372.us3393":            ; preds = %"for input_wrapper.s0.x.rebased1367.us3388", %"for input_wrapper.s0.c.c1372.us3393"
  %indvars.iv4461 = phi i64 [ %indvars.iv.next4462.3, %"for input_wrapper.s0.c.c1372.us3393" ], [ 0, %"for input_wrapper.s0.x.rebased1367.us3388" ]
  %niter6020 = phi i64 [ %niter6020.nsub.3, %"for input_wrapper.s0.c.c1372.us3393" ], [ %unroll_iter6019, %"for input_wrapper.s0.x.rebased1367.us3388" ]
  %11397 = shl nuw nsw i64 %indvars.iv4461, 3
  %11398 = add nsw i64 %11397, %11395
  %11399 = getelementptr inbounds i8, i8* %172, i64 %11398
  %11400 = bitcast i8* %11399 to <8 x i8>*
  %11401 = load <8 x i8>, <8 x i8>* %11400, align 4, !tbaa !397
  %11402 = zext <8 x i8> %11401 to <8 x i16>
  %11403 = sub nsw <8 x i16> %11402, %10597
  %11404 = add nsw i64 %11397, %11396
  %11405 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11404
  %11406 = bitcast i16* %11405 to <8 x i16>*
  store <8 x i16> %11403, <8 x i16>* %11406, align 8, !tbaa !399
  %indvars.iv.next4462 = shl i64 %indvars.iv4461, 3
  %11407 = or i64 %indvars.iv.next4462, 8
  %11408 = add nsw i64 %11407, %11395
  %11409 = getelementptr inbounds i8, i8* %172, i64 %11408
  %11410 = bitcast i8* %11409 to <8 x i8>*
  %11411 = load <8 x i8>, <8 x i8>* %11410, align 4, !tbaa !397
  %11412 = zext <8 x i8> %11411 to <8 x i16>
  %11413 = sub nsw <8 x i16> %11412, %10597
  %11414 = add nsw i64 %11407, %11396
  %11415 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11414
  %11416 = bitcast i16* %11415 to <8 x i16>*
  store <8 x i16> %11413, <8 x i16>* %11416, align 8, !tbaa !399
  %indvars.iv.next4462.1 = shl i64 %indvars.iv4461, 3
  %11417 = or i64 %indvars.iv.next4462.1, 16
  %11418 = add nsw i64 %11417, %11395
  %11419 = getelementptr inbounds i8, i8* %172, i64 %11418
  %11420 = bitcast i8* %11419 to <8 x i8>*
  %11421 = load <8 x i8>, <8 x i8>* %11420, align 4, !tbaa !397
  %11422 = zext <8 x i8> %11421 to <8 x i16>
  %11423 = sub nsw <8 x i16> %11422, %10597
  %11424 = add nsw i64 %11417, %11396
  %11425 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11424
  %11426 = bitcast i16* %11425 to <8 x i16>*
  store <8 x i16> %11423, <8 x i16>* %11426, align 8, !tbaa !399
  %indvars.iv.next4462.2 = shl i64 %indvars.iv4461, 3
  %11427 = or i64 %indvars.iv.next4462.2, 24
  %11428 = add nsw i64 %11427, %11395
  %11429 = getelementptr inbounds i8, i8* %172, i64 %11428
  %11430 = bitcast i8* %11429 to <8 x i8>*
  %11431 = load <8 x i8>, <8 x i8>* %11430, align 4, !tbaa !397
  %11432 = zext <8 x i8> %11431 to <8 x i16>
  %11433 = sub nsw <8 x i16> %11432, %10597
  %11434 = add nsw i64 %11427, %11396
  %11435 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11434
  %11436 = bitcast i16* %11435 to <8 x i16>*
  store <8 x i16> %11433, <8 x i16>* %11436, align 8, !tbaa !399
  %indvars.iv.next4462.3 = add nuw nsw i64 %indvars.iv4461, 4
  %niter6020.nsub.3 = add i64 %niter6020, -4
  %niter6020.ncmp.3 = icmp eq i64 %niter6020.nsub.3, 0
  br i1 %niter6020.ncmp.3, label %"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa", label %"for input_wrapper.s0.c.c1372.us3393"

"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1372.us3393", %"for input_wrapper.s0.x.rebased1367.us3388"
  %indvars.iv4461.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1367.us3388" ], [ %indvars.iv.next4462.3, %"for input_wrapper.s0.c.c1372.us3393" ]
  br i1 %lcmp.mod6018.not, label %"end for input_wrapper.s0.c.c1373.loopexit.us3399", label %"for input_wrapper.s0.c.c1372.us3393.epil"

"for input_wrapper.s0.c.c1372.us3393.epil":       ; preds = %"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa", %"for input_wrapper.s0.c.c1372.us3393.epil"
  %indvars.iv4461.epil = phi i64 [ %indvars.iv.next4462.epil, %"for input_wrapper.s0.c.c1372.us3393.epil" ], [ %indvars.iv4461.unr, %"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa" ]
  %epil.iter6017 = phi i64 [ %epil.iter6017.sub, %"for input_wrapper.s0.c.c1372.us3393.epil" ], [ %xtraiter6016, %"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa" ]
  %11437 = shl nuw nsw i64 %indvars.iv4461.epil, 3
  %11438 = add nsw i64 %11437, %11395
  %11439 = getelementptr inbounds i8, i8* %172, i64 %11438
  %11440 = bitcast i8* %11439 to <8 x i8>*
  %11441 = load <8 x i8>, <8 x i8>* %11440, align 4, !tbaa !397
  %11442 = zext <8 x i8> %11441 to <8 x i16>
  %11443 = sub nsw <8 x i16> %11442, %10597
  %11444 = add nsw i64 %11437, %11396
  %11445 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11444
  %11446 = bitcast i16* %11445 to <8 x i16>*
  store <8 x i16> %11443, <8 x i16>* %11446, align 8, !tbaa !399
  %indvars.iv.next4462.epil = add nuw nsw i64 %indvars.iv4461.epil, 1
  %epil.iter6017.sub = add i64 %epil.iter6017, -1
  %epil.iter6017.cmp.not = icmp eq i64 %epil.iter6017.sub, 0
  br i1 %epil.iter6017.cmp.not, label %"end for input_wrapper.s0.c.c1373.loopexit.us3399", label %"for input_wrapper.s0.c.c1372.us3393.epil", !llvm.loop !486

"end for input_wrapper.s0.c.c1373.loopexit.us3399": ; preds = %"for input_wrapper.s0.c.c1372.us3393.epil", %"end for input_wrapper.s0.c.c1373.loopexit.us3399.unr-lcssa"
  %indvars.iv.next4464 = add nuw nsw i64 %indvars.iv4463, 1
  %.not1967.us3397 = icmp eq i64 %indvars.iv4463, %10658
  br i1 %.not1967.us3397, label %"end for input_wrapper.s0.x.rebased1368", label %"for input_wrapper.s0.x.rebased1367.us3388"

"end for input_wrapper.s0.x.rebased1368":         ; preds = %"end for input_wrapper.s0.c.c1373.loopexit.us3399", %"end for input_wrapper.s0.c.c.rebased1378.loopexit.us", %"for input_wrapper.s0.x.rebased1367.preheader.split", %"for input_wrapper.s0.y.rebased1362"
  %indvars.iv.next4474 = add nuw nsw i64 %indvars.iv4473, 1
  %.not1966 = icmp eq i64 %indvars.iv4473, %10690
  br i1 %.not1966, label %"consume input_wrapper1418", label %"for input_wrapper.s0.y.rebased1362"

then_bb1385:                                      ; preds = %next_bb1358
  br i1 %10685, label %"for input_wrapper.s0.y.rebased1389", label %"consume input_wrapper1418", !prof !387

next_bb1386:                                      ; preds = %next_bb1358
  br i1 %10685, label %"for input_wrapper.s0.y.rebased1405", label %"consume input_wrapper1418", !prof !387

"for input_wrapper.s0.y.rebased1389":             ; preds = %then_bb1385, %"end for input_wrapper.s0.x.rebased1395"
  %indvars.iv4481 = phi i64 [ %indvars.iv.next4482, %"end for input_wrapper.s0.x.rebased1395" ], [ 0, %then_bb1385 ]
  %11447 = trunc i64 %indvars.iv4481 to i32
  %t42721392 = mul i32 %10575, %11447
  %11448 = add nsw i64 %indvars.iv4481, %10901
  %11449 = mul nsw i64 %11448, %10661
  %11450 = add nsw i64 %11449, %10896
  br i1 %brmerge5066.demorgan, label %"for input_wrapper.s0.x.rebased1394.us", label %"end for input_wrapper.s0.x.rebased1395", !prof !407

"for input_wrapper.s0.x.rebased1394.us":          ; preds = %"for input_wrapper.s0.y.rebased1389", %"end for input_wrapper.s0.c.c1400.loopexit.us"
  %indvars.iv4478 = phi i64 [ %indvars.iv.next4479, %"end for input_wrapper.s0.c.c1400.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased1389" ]
  %11451 = trunc i64 %indvars.iv4478 to i32
  %reass.add2773.us = add i32 %t42721392, %11451
  %reass.mul2774.us = mul i32 %reass.add2773.us, %10588
  %11452 = add nsw i64 %indvars.iv4478, %10656
  %11453 = mul nsw i64 %11452, %10657
  %11454 = add nsw i64 %11450, %11453
  %11455 = sext i32 %reass.mul2774.us to i64
  br i1 %10710, label %"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c1399.us"

"for input_wrapper.s0.c.c1399.us":                ; preds = %"for input_wrapper.s0.x.rebased1394.us", %"for input_wrapper.s0.c.c1399.us"
  %indvars.iv4476 = phi i64 [ %indvars.iv.next4477.3, %"for input_wrapper.s0.c.c1399.us" ], [ 0, %"for input_wrapper.s0.x.rebased1394.us" ]
  %niter6030 = phi i64 [ %niter6030.nsub.3, %"for input_wrapper.s0.c.c1399.us" ], [ %unroll_iter6029, %"for input_wrapper.s0.x.rebased1394.us" ]
  %11456 = shl nuw nsw i64 %indvars.iv4476, 2
  %11457 = add nsw i64 %11456, %11454
  %11458 = getelementptr inbounds i8, i8* %172, i64 %11457
  %11459 = bitcast i8* %11458 to <4 x i8>*
  %11460 = load <4 x i8>, <4 x i8>* %11459, align 4, !tbaa !397
  %11461 = zext <4 x i8> %11460 to <4 x i16>
  %11462 = sub nsw <4 x i16> %11461, %10603
  %11463 = add nsw i64 %11456, %11455
  %11464 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11463
  %11465 = bitcast i16* %11464 to <4 x i16>*
  store <4 x i16> %11462, <4 x i16>* %11465, align 8, !tbaa !399
  %indvars.iv.next4477 = shl i64 %indvars.iv4476, 2
  %11466 = or i64 %indvars.iv.next4477, 4
  %11467 = add nsw i64 %11466, %11454
  %11468 = getelementptr inbounds i8, i8* %172, i64 %11467
  %11469 = bitcast i8* %11468 to <4 x i8>*
  %11470 = load <4 x i8>, <4 x i8>* %11469, align 4, !tbaa !397
  %11471 = zext <4 x i8> %11470 to <4 x i16>
  %11472 = sub nsw <4 x i16> %11471, %10603
  %11473 = add nsw i64 %11466, %11455
  %11474 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11473
  %11475 = bitcast i16* %11474 to <4 x i16>*
  store <4 x i16> %11472, <4 x i16>* %11475, align 8, !tbaa !399
  %indvars.iv.next4477.1 = shl i64 %indvars.iv4476, 2
  %11476 = or i64 %indvars.iv.next4477.1, 8
  %11477 = add nsw i64 %11476, %11454
  %11478 = getelementptr inbounds i8, i8* %172, i64 %11477
  %11479 = bitcast i8* %11478 to <4 x i8>*
  %11480 = load <4 x i8>, <4 x i8>* %11479, align 4, !tbaa !397
  %11481 = zext <4 x i8> %11480 to <4 x i16>
  %11482 = sub nsw <4 x i16> %11481, %10603
  %11483 = add nsw i64 %11476, %11455
  %11484 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11483
  %11485 = bitcast i16* %11484 to <4 x i16>*
  store <4 x i16> %11482, <4 x i16>* %11485, align 8, !tbaa !399
  %indvars.iv.next4477.2 = shl i64 %indvars.iv4476, 2
  %11486 = or i64 %indvars.iv.next4477.2, 12
  %11487 = add nsw i64 %11486, %11454
  %11488 = getelementptr inbounds i8, i8* %172, i64 %11487
  %11489 = bitcast i8* %11488 to <4 x i8>*
  %11490 = load <4 x i8>, <4 x i8>* %11489, align 4, !tbaa !397
  %11491 = zext <4 x i8> %11490 to <4 x i16>
  %11492 = sub nsw <4 x i16> %11491, %10603
  %11493 = add nsw i64 %11486, %11455
  %11494 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11493
  %11495 = bitcast i16* %11494 to <4 x i16>*
  store <4 x i16> %11492, <4 x i16>* %11495, align 8, !tbaa !399
  %indvars.iv.next4477.3 = add nuw nsw i64 %indvars.iv4476, 4
  %niter6030.nsub.3 = add i64 %niter6030, -4
  %niter6030.ncmp.3 = icmp eq i64 %niter6030.nsub.3, 0
  br i1 %niter6030.ncmp.3, label %"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c1399.us"

"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1399.us", %"for input_wrapper.s0.x.rebased1394.us"
  %indvars.iv4476.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1394.us" ], [ %indvars.iv.next4477.3, %"for input_wrapper.s0.c.c1399.us" ]
  br i1 %lcmp.mod6028.not, label %"end for input_wrapper.s0.c.c1400.loopexit.us", label %"for input_wrapper.s0.c.c1399.us.epil"

"for input_wrapper.s0.c.c1399.us.epil":           ; preds = %"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c1399.us.epil"
  %indvars.iv4476.epil = phi i64 [ %indvars.iv.next4477.epil, %"for input_wrapper.s0.c.c1399.us.epil" ], [ %indvars.iv4476.unr, %"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa" ]
  %epil.iter6027 = phi i64 [ %epil.iter6027.sub, %"for input_wrapper.s0.c.c1399.us.epil" ], [ %xtraiter6026, %"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa" ]
  %11496 = shl nuw nsw i64 %indvars.iv4476.epil, 2
  %11497 = add nsw i64 %11496, %11454
  %11498 = getelementptr inbounds i8, i8* %172, i64 %11497
  %11499 = bitcast i8* %11498 to <4 x i8>*
  %11500 = load <4 x i8>, <4 x i8>* %11499, align 4, !tbaa !397
  %11501 = zext <4 x i8> %11500 to <4 x i16>
  %11502 = sub nsw <4 x i16> %11501, %10603
  %11503 = add nsw i64 %11496, %11455
  %11504 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11503
  %11505 = bitcast i16* %11504 to <4 x i16>*
  store <4 x i16> %11502, <4 x i16>* %11505, align 8, !tbaa !399
  %indvars.iv.next4477.epil = add nuw nsw i64 %indvars.iv4476.epil, 1
  %epil.iter6027.sub = add i64 %epil.iter6027, -1
  %epil.iter6027.cmp.not = icmp eq i64 %epil.iter6027.sub, 0
  br i1 %epil.iter6027.cmp.not, label %"end for input_wrapper.s0.c.c1400.loopexit.us", label %"for input_wrapper.s0.c.c1399.us.epil", !llvm.loop !487

"end for input_wrapper.s0.c.c1400.loopexit.us":   ; preds = %"for input_wrapper.s0.c.c1399.us.epil", %"end for input_wrapper.s0.c.c1400.loopexit.us.unr-lcssa"
  %indvars.iv.next4479 = add nuw nsw i64 %indvars.iv4478, 1
  %.not1964.us = icmp eq i64 %indvars.iv4478, %10658
  br i1 %.not1964.us, label %"end for input_wrapper.s0.x.rebased1395", label %"for input_wrapper.s0.x.rebased1394.us"

"end for input_wrapper.s0.x.rebased1395":         ; preds = %"end for input_wrapper.s0.c.c1400.loopexit.us", %"for input_wrapper.s0.y.rebased1389"
  %indvars.iv.next4482 = add nuw nsw i64 %indvars.iv4481, 1
  %.not1963 = icmp eq i64 %indvars.iv4481, %10691
  br i1 %.not1963, label %"consume input_wrapper1418", label %"for input_wrapper.s0.y.rebased1389"

"for input_wrapper.s0.y.rebased1405":             ; preds = %next_bb1386, %"end for input_wrapper.s0.x.rebased1411"
  %indvars.iv4489 = phi i64 [ %indvars.iv.next4490, %"end for input_wrapper.s0.x.rebased1411" ], [ 0, %next_bb1386 ]
  %11506 = trunc i64 %indvars.iv4489 to i32
  %t42791408 = mul i32 %10575, %11506
  %11507 = add nsw i64 %indvars.iv4489, %10901
  %11508 = mul nsw i64 %11507, %10661
  %11509 = add nsw i64 %11508, %10896
  br i1 %brmerge5069.demorgan, label %iter.check5485, label %"end for input_wrapper.s0.x.rebased1411", !prof !407

iter.check5485:                                   ; preds = %"for input_wrapper.s0.y.rebased1405", %"end for input_wrapper.s0.c1416.loopexit.us"
  %indvars.iv4486 = phi i64 [ %indvars.iv.next4487, %"end for input_wrapper.s0.c1416.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased1405" ]
  %11510 = trunc i64 %indvars.iv4486 to i32
  %reass.add2775.us = add i32 %t42791408, %11510
  %reass.mul2776.us = mul i32 %reass.add2775.us, %10588
  %11511 = add nsw i64 %indvars.iv4486, %10656
  %11512 = mul nsw i64 %11511, %10657
  %11513 = add nsw i64 %11509, %11512
  %11514 = sext i32 %reass.mul2776.us to i64
  br i1 %min.iters.check5483, label %"for input_wrapper.s0.c1415.us.preheader", label %vector.main.loop.iter.check5487

vector.main.loop.iter.check5487:                  ; preds = %iter.check5485
  br i1 %min.iters.check5486, label %vec.epilog.ph5510, label %vector.ph5488

vector.ph5488:                                    ; preds = %vector.main.loop.iter.check5487
  br i1 %10711, label %middle.block5480.unr-lcssa, label %vector.body5482

vector.body5482:                                  ; preds = %vector.ph5488, %vector.body5482
  %index5491 = phi i64 [ %index.next5492.1, %vector.body5482 ], [ 0, %vector.ph5488 ]
  %niter6034 = phi i64 [ %niter6034.nsub.1, %vector.body5482 ], [ %unroll_iter6033, %vector.ph5488 ]
  %11515 = add nsw i64 %index5491, %11513
  %11516 = getelementptr inbounds i8, i8* %172, i64 %11515
  %11517 = bitcast i8* %11516 to <16 x i8>*
  %wide.load5494 = load <16 x i8>, <16 x i8>* %11517, align 1, !tbaa !397
  %11518 = getelementptr inbounds i8, i8* %11516, i64 16
  %11519 = bitcast i8* %11518 to <16 x i8>*
  %wide.load5495 = load <16 x i8>, <16 x i8>* %11519, align 1, !tbaa !397
  %11520 = getelementptr inbounds i8, i8* %11516, i64 32
  %11521 = bitcast i8* %11520 to <16 x i8>*
  %wide.load5496 = load <16 x i8>, <16 x i8>* %11521, align 1, !tbaa !397
  %11522 = getelementptr inbounds i8, i8* %11516, i64 48
  %11523 = bitcast i8* %11522 to <16 x i8>*
  %wide.load5497 = load <16 x i8>, <16 x i8>* %11523, align 1, !tbaa !397
  %11524 = zext <16 x i8> %wide.load5494 to <16 x i16>
  %11525 = zext <16 x i8> %wide.load5495 to <16 x i16>
  %11526 = zext <16 x i8> %wide.load5496 to <16 x i16>
  %11527 = zext <16 x i8> %wide.load5497 to <16 x i16>
  %11528 = sub nsw <16 x i16> %11524, %broadcast.splat5499
  %11529 = sub nsw <16 x i16> %11525, %broadcast.splat5501
  %11530 = sub nsw <16 x i16> %11526, %broadcast.splat5503
  %11531 = sub nsw <16 x i16> %11527, %broadcast.splat5505
  %11532 = add nsw i64 %index5491, %11514
  %11533 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11532
  %11534 = bitcast i16* %11533 to <16 x i16>*
  store <16 x i16> %11528, <16 x i16>* %11534, align 2, !tbaa !399
  %11535 = getelementptr inbounds i16, i16* %11533, i64 16
  %11536 = bitcast i16* %11535 to <16 x i16>*
  store <16 x i16> %11529, <16 x i16>* %11536, align 2, !tbaa !399
  %11537 = getelementptr inbounds i16, i16* %11533, i64 32
  %11538 = bitcast i16* %11537 to <16 x i16>*
  store <16 x i16> %11530, <16 x i16>* %11538, align 2, !tbaa !399
  %11539 = getelementptr inbounds i16, i16* %11533, i64 48
  %11540 = bitcast i16* %11539 to <16 x i16>*
  store <16 x i16> %11531, <16 x i16>* %11540, align 2, !tbaa !399
  %index.next5492 = or i64 %index5491, 64
  %11541 = add nsw i64 %index.next5492, %11513
  %11542 = getelementptr inbounds i8, i8* %172, i64 %11541
  %11543 = bitcast i8* %11542 to <16 x i8>*
  %wide.load5494.1 = load <16 x i8>, <16 x i8>* %11543, align 1, !tbaa !397
  %11544 = getelementptr inbounds i8, i8* %11542, i64 16
  %11545 = bitcast i8* %11544 to <16 x i8>*
  %wide.load5495.1 = load <16 x i8>, <16 x i8>* %11545, align 1, !tbaa !397
  %11546 = getelementptr inbounds i8, i8* %11542, i64 32
  %11547 = bitcast i8* %11546 to <16 x i8>*
  %wide.load5496.1 = load <16 x i8>, <16 x i8>* %11547, align 1, !tbaa !397
  %11548 = getelementptr inbounds i8, i8* %11542, i64 48
  %11549 = bitcast i8* %11548 to <16 x i8>*
  %wide.load5497.1 = load <16 x i8>, <16 x i8>* %11549, align 1, !tbaa !397
  %11550 = zext <16 x i8> %wide.load5494.1 to <16 x i16>
  %11551 = zext <16 x i8> %wide.load5495.1 to <16 x i16>
  %11552 = zext <16 x i8> %wide.load5496.1 to <16 x i16>
  %11553 = zext <16 x i8> %wide.load5497.1 to <16 x i16>
  %11554 = sub nsw <16 x i16> %11550, %broadcast.splat5499
  %11555 = sub nsw <16 x i16> %11551, %broadcast.splat5501
  %11556 = sub nsw <16 x i16> %11552, %broadcast.splat5503
  %11557 = sub nsw <16 x i16> %11553, %broadcast.splat5505
  %11558 = add nsw i64 %index.next5492, %11514
  %11559 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11558
  %11560 = bitcast i16* %11559 to <16 x i16>*
  store <16 x i16> %11554, <16 x i16>* %11560, align 2, !tbaa !399
  %11561 = getelementptr inbounds i16, i16* %11559, i64 16
  %11562 = bitcast i16* %11561 to <16 x i16>*
  store <16 x i16> %11555, <16 x i16>* %11562, align 2, !tbaa !399
  %11563 = getelementptr inbounds i16, i16* %11559, i64 32
  %11564 = bitcast i16* %11563 to <16 x i16>*
  store <16 x i16> %11556, <16 x i16>* %11564, align 2, !tbaa !399
  %11565 = getelementptr inbounds i16, i16* %11559, i64 48
  %11566 = bitcast i16* %11565 to <16 x i16>*
  store <16 x i16> %11557, <16 x i16>* %11566, align 2, !tbaa !399
  %index.next5492.1 = add i64 %index5491, 128
  %niter6034.nsub.1 = add i64 %niter6034, -2
  %niter6034.ncmp.1 = icmp eq i64 %niter6034.nsub.1, 0
  br i1 %niter6034.ncmp.1, label %middle.block5480.unr-lcssa, label %vector.body5482, !llvm.loop !488

middle.block5480.unr-lcssa:                       ; preds = %vector.body5482, %vector.ph5488
  %index5491.unr = phi i64 [ 0, %vector.ph5488 ], [ %index.next5492.1, %vector.body5482 ]
  br i1 %lcmp.mod6032.not, label %middle.block5480, label %vector.body5482.epil

vector.body5482.epil:                             ; preds = %middle.block5480.unr-lcssa
  %11567 = add nsw i64 %index5491.unr, %11513
  %11568 = getelementptr inbounds i8, i8* %172, i64 %11567
  %11569 = bitcast i8* %11568 to <16 x i8>*
  %wide.load5494.epil = load <16 x i8>, <16 x i8>* %11569, align 1, !tbaa !397
  %11570 = getelementptr inbounds i8, i8* %11568, i64 16
  %11571 = bitcast i8* %11570 to <16 x i8>*
  %wide.load5495.epil = load <16 x i8>, <16 x i8>* %11571, align 1, !tbaa !397
  %11572 = getelementptr inbounds i8, i8* %11568, i64 32
  %11573 = bitcast i8* %11572 to <16 x i8>*
  %wide.load5496.epil = load <16 x i8>, <16 x i8>* %11573, align 1, !tbaa !397
  %11574 = getelementptr inbounds i8, i8* %11568, i64 48
  %11575 = bitcast i8* %11574 to <16 x i8>*
  %wide.load5497.epil = load <16 x i8>, <16 x i8>* %11575, align 1, !tbaa !397
  %11576 = zext <16 x i8> %wide.load5494.epil to <16 x i16>
  %11577 = zext <16 x i8> %wide.load5495.epil to <16 x i16>
  %11578 = zext <16 x i8> %wide.load5496.epil to <16 x i16>
  %11579 = zext <16 x i8> %wide.load5497.epil to <16 x i16>
  %11580 = sub nsw <16 x i16> %11576, %broadcast.splat5499
  %11581 = sub nsw <16 x i16> %11577, %broadcast.splat5501
  %11582 = sub nsw <16 x i16> %11578, %broadcast.splat5503
  %11583 = sub nsw <16 x i16> %11579, %broadcast.splat5505
  %11584 = add nsw i64 %index5491.unr, %11514
  %11585 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11584
  %11586 = bitcast i16* %11585 to <16 x i16>*
  store <16 x i16> %11580, <16 x i16>* %11586, align 2, !tbaa !399
  %11587 = getelementptr inbounds i16, i16* %11585, i64 16
  %11588 = bitcast i16* %11587 to <16 x i16>*
  store <16 x i16> %11581, <16 x i16>* %11588, align 2, !tbaa !399
  %11589 = getelementptr inbounds i16, i16* %11585, i64 32
  %11590 = bitcast i16* %11589 to <16 x i16>*
  store <16 x i16> %11582, <16 x i16>* %11590, align 2, !tbaa !399
  %11591 = getelementptr inbounds i16, i16* %11585, i64 48
  %11592 = bitcast i16* %11591 to <16 x i16>*
  store <16 x i16> %11583, <16 x i16>* %11592, align 2, !tbaa !399
  br label %middle.block5480

middle.block5480:                                 ; preds = %middle.block5480.unr-lcssa, %vector.body5482.epil
  br i1 %cmp.n5493, label %"end for input_wrapper.s0.c1416.loopexit.us", label %vec.epilog.iter.check5509

vec.epilog.iter.check5509:                        ; preds = %middle.block5480
  br i1 %min.epilog.iters.check5512, label %"for input_wrapper.s0.c1415.us.preheader", label %vec.epilog.ph5510

vec.epilog.ph5510:                                ; preds = %vector.main.loop.iter.check5487, %vec.epilog.iter.check5509
  %vec.epilog.resume.val5513 = phi i64 [ %n.vec5490, %vec.epilog.iter.check5509 ], [ 0, %vector.main.loop.iter.check5487 ]
  br label %vec.epilog.vector.body5508

vec.epilog.vector.body5508:                       ; preds = %vec.epilog.vector.body5508, %vec.epilog.ph5510
  %index5516 = phi i64 [ %vec.epilog.resume.val5513, %vec.epilog.ph5510 ], [ %index.next5517, %vec.epilog.vector.body5508 ]
  %11593 = add nsw i64 %index5516, %11513
  %11594 = getelementptr inbounds i8, i8* %172, i64 %11593
  %11595 = bitcast i8* %11594 to <8 x i8>*
  %wide.load5520 = load <8 x i8>, <8 x i8>* %11595, align 1, !tbaa !397
  %11596 = zext <8 x i8> %wide.load5520 to <8 x i16>
  %11597 = sub nsw <8 x i16> %11596, %broadcast.splat5522
  %11598 = add nsw i64 %index5516, %11514
  %11599 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11598
  %11600 = bitcast i16* %11599 to <8 x i16>*
  store <8 x i16> %11597, <8 x i16>* %11600, align 2, !tbaa !399
  %index.next5517 = add i64 %index5516, 8
  %11601 = icmp eq i64 %index.next5517, %n.vec5515
  br i1 %11601, label %vec.epilog.middle.block5506, label %vec.epilog.vector.body5508, !llvm.loop !489

vec.epilog.middle.block5506:                      ; preds = %vec.epilog.vector.body5508
  br i1 %cmp.n5519, label %"end for input_wrapper.s0.c1416.loopexit.us", label %"for input_wrapper.s0.c1415.us.preheader"

"for input_wrapper.s0.c1415.us.preheader":        ; preds = %iter.check5485, %vec.epilog.iter.check5509, %vec.epilog.middle.block5506
  %indvars.iv4484.ph = phi i64 [ 0, %iter.check5485 ], [ %n.vec5490, %vec.epilog.iter.check5509 ], [ %n.vec5515, %vec.epilog.middle.block5506 ]
  br label %"for input_wrapper.s0.c1415.us"

"for input_wrapper.s0.c1415.us":                  ; preds = %"for input_wrapper.s0.c1415.us.preheader", %"for input_wrapper.s0.c1415.us"
  %indvars.iv4484 = phi i64 [ %indvars.iv.next4485, %"for input_wrapper.s0.c1415.us" ], [ %indvars.iv4484.ph, %"for input_wrapper.s0.c1415.us.preheader" ]
  %11602 = add nsw i64 %indvars.iv4484, %11513
  %11603 = getelementptr inbounds i8, i8* %172, i64 %11602
  %11604 = load i8, i8* %11603, align 1, !tbaa !397
  %11605 = zext i8 %11604 to i16
  %11606 = sub nsw i16 %11605, %10604
  %11607 = add nsw i64 %indvars.iv4484, %11514
  %11608 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11607
  store i16 %11606, i16* %11608, align 2, !tbaa !399
  %indvars.iv.next4485 = add nuw nsw i64 %indvars.iv4484, 1
  %.not1962.us = icmp eq i64 %indvars.iv.next4485, %10666
  br i1 %.not1962.us, label %"end for input_wrapper.s0.c1416.loopexit.us", label %"for input_wrapper.s0.c1415.us", !llvm.loop !490

"end for input_wrapper.s0.c1416.loopexit.us":     ; preds = %"for input_wrapper.s0.c1415.us", %vec.epilog.middle.block5506, %middle.block5480
  %indvars.iv.next4487 = add nuw nsw i64 %indvars.iv4486, 1
  %.not1961.us = icmp eq i64 %indvars.iv4486, %10658
  br i1 %.not1961.us, label %"end for input_wrapper.s0.x.rebased1411", label %iter.check5485

"end for input_wrapper.s0.x.rebased1411":         ; preds = %"end for input_wrapper.s0.c1416.loopexit.us", %"for input_wrapper.s0.y.rebased1405"
  %indvars.iv.next4490 = add nuw nsw i64 %indvars.iv4489, 1
  %.not1960 = icmp eq i64 %indvars.iv4489, %10692
  br i1 %.not1960, label %"consume input_wrapper1418", label %"for input_wrapper.s0.y.rebased1405"

"consume input_wrapper1418":                      ; preds = %"end for input_wrapper.s0.x.rebased1340.loopexit.us", %"end for input_wrapper.s0.x.rebased1368", %"end for input_wrapper.s0.x.rebased1395", %"end for input_wrapper.s0.x.rebased1411", %"end for input_wrapper.s0.x.x.rebased1316", %then_bb1329, %next_bb1386, %then_bb1385, %then_bb1357, %then_bb1287
  %11609 = trunc i64 %10899 to i32
  %11610 = mul i32 %189, %11609
  %t42121276 = add i32 %11610, %10898
  br label %"for output.s0.x.xo1423"

"for output.s0.x.xo1423":                         ; preds = %"consume input_wrapper1418", %"end for output.s0.c.co1430"
  %indvars.iv4523 = phi i64 [ 0, %"consume input_wrapper1418" ], [ %indvars.iv.next4524, %"end for output.s0.c.co1430" ]
  %11611 = add nuw i64 %indvars.iv4523, %10678
  %11612 = trunc i64 %11611 to i32
  %11613 = mul i32 %11612, %stride_x
  %t42861427 = sub i32 %11613, %b417
  br i1 %10616, label %"for output.s0.c.co1429.preheader", label %"end for output.s0.c.co1430", !prof !387

"for output.s0.c.co1429.preheader":               ; preds = %"for output.s0.x.xo1423"
  %11614 = trunc i64 %11611 to i32
  %11615 = mul i32 %186, %11614
  %t42841422 = add i32 %t42121276, %11615
  %t42871428 = sub i32 %t42841422, %reass.add2778
  %11616 = sext i32 %t42871428 to i64
  br label %"for output.s0.c.co1429"

"end for output.s0.x.xo1424":                     ; preds = %"end for output.s0.c.co1430"
  %tobool.not.i2469.not = icmp eq i8* %10902, null
  br i1 %tobool.not.i2469.not, label %call_destructor.exit2472, label %if.then.i2470

if.then.i2470:                                    ; preds = %"end for output.s0.x.xo1424"
  call void @halide_free(i8* null, i8* nonnull %10902) #17
  br label %call_destructor.exit2472

call_destructor.exit2472:                         ; preds = %"end for output.s0.x.xo1424", %if.then.i2470
  %indvars.iv.next4527 = add nuw nsw i64 %indvars.iv4526, 1
  %11617 = icmp eq i64 %indvars.iv.next4527, %zext4530
  br i1 %11617, label %"end for output.s0.y.rebased1281", label %"for output.s0.y.rebased1280"

"for output.s0.c.co1429":                         ; preds = %"for output.s0.c.co1429.preheader", %"consume convolved1458"
  %indvars.iv4520 = phi i64 [ 0, %"for output.s0.c.co1429.preheader" ], [ %indvars.iv.next4521, %"consume convolved1458" ]
  %11618 = shl nuw nsw i64 %indvars.iv4520, 5
  %11619 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %11618
  %11620 = bitcast i32* %11619 to <8 x i32>*
  %11621 = load <8 x i32>, <8 x i32>* %11620, align 32, !tbaa !391
  %11622 = getelementptr inbounds i32, i32* %11619, i64 8
  %11623 = bitcast i32* %11622 to <8 x i32>*
  %11624 = load <8 x i32>, <8 x i32>* %11623, align 32, !tbaa !391
  %11625 = getelementptr inbounds i32, i32* %11619, i64 16
  %11626 = bitcast i32* %11625 to <8 x i32>*
  %11627 = load <8 x i32>, <8 x i32>* %11626, align 32, !tbaa !391
  %11628 = getelementptr inbounds i32, i32* %11619, i64 24
  %11629 = bitcast i32* %11628 to <8 x i32>*
  %11630 = load <8 x i32>, <8 x i32>* %11629, align 32, !tbaa !391
  %11631 = trunc i64 %indvars.iv4520 to i32
  %t42931433 = shl nsw i32 %11631, 2
  %11632 = or i32 %t42931433, 3
  %t42921434 = mul nsw i32 %11632, %167
  %11633 = or i32 %t42931433, 2
  %t42911435 = mul nsw i32 %11633, %167
  %11634 = or i32 %t42931433, 1
  %t42901436 = mul nsw i32 %11634, %167
  br i1 %10617, label %"for convolved.s1.r19$y1438.preheader", label %"consume convolved1458", !prof !387

"for convolved.s1.r19$y1438.preheader":           ; preds = %"for output.s0.c.co1429"
  %11635 = mul nsw i64 %indvars.iv4520, %10676
  br i1 %10618, label %"for convolved.s1.r19$y1438.preheader.split.us", label %"consume convolved1458", !prof !387

"for convolved.s1.r19$y1438.preheader.split.us":  ; preds = %"for convolved.s1.r19$y1438.preheader"
  br i1 %10558, label %"for convolved.s1.r19$y1438.us.us", label %"consume convolved1458", !prof !387

"for convolved.s1.r19$y1438.us.us":               ; preds = %"for convolved.s1.r19$y1438.preheader.split.us", %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us"
  %indvars.iv4517 = phi i64 [ %indvars.iv.next4518, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ], [ 0, %"for convolved.s1.r19$y1438.preheader.split.us" ]
  %convolved1914.sroa.142.42.us.us = phi <8 x i32> [ %11709, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ], [ %11630, %"for convolved.s1.r19$y1438.preheader.split.us" ]
  %convolved1914.sroa.102.42.us.us = phi <8 x i32> [ %11698, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ], [ %11627, %"for convolved.s1.r19$y1438.preheader.split.us" ]
  %convolved1914.sroa.62.42.us.us = phi <8 x i32> [ %11687, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ], [ %11624, %"for convolved.s1.r19$y1438.preheader.split.us" ]
  %convolved1914.sroa.0.88.us.us = phi <8 x i32> [ %11675, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ], [ %11621, %"for convolved.s1.r19$y1438.preheader.split.us" ]
  %11636 = mul nsw i64 %indvars.iv4517, %10674
  %11637 = trunc i64 %indvars.iv4517 to i32
  %11638 = mul i32 %11637, %dilation_y
  %11639 = sub i32 %11638, %t41581256
  %t42941442.us.us = mul i32 %11639, %10575
  %11640 = add i32 %t42861427, %t42941442.us.us
  br label %"for convolved.s1.r19$x1446.us.us.us"

"for convolved.s1.r19$x1446.us.us.us":            ; preds = %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us", %"for convolved.s1.r19$y1438.us.us"
  %indvars.iv4510 = phi i64 [ %indvars.iv.next4511, %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y1438.us.us" ]
  %convolved1914.sroa.142.43.us.us.us = phi <8 x i32> [ %11709, %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us" ], [ %convolved1914.sroa.142.42.us.us, %"for convolved.s1.r19$y1438.us.us" ]
  %convolved1914.sroa.102.43.us.us.us = phi <8 x i32> [ %11698, %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us" ], [ %convolved1914.sroa.102.42.us.us, %"for convolved.s1.r19$y1438.us.us" ]
  %convolved1914.sroa.62.43.us.us.us = phi <8 x i32> [ %11687, %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us" ], [ %convolved1914.sroa.62.42.us.us, %"for convolved.s1.r19$y1438.us.us" ]
  %convolved1914.sroa.0.89.us.us.us = phi <8 x i32> [ %11675, %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us" ], [ %convolved1914.sroa.0.88.us.us, %"for convolved.s1.r19$y1438.us.us" ]
  %11641 = mul nsw i64 %indvars.iv4510, %10672
  %11642 = trunc i64 %indvars.iv4510 to i32
  %11643 = mul i32 %11642, %dilation_x
  %reass.add2780.us.us.us = add i32 %11640, %11643
  %reass.mul2781.us.us.us = mul i32 %reass.add2780.us.us.us, %10588
  %11644 = add nsw i64 %11641, %11636
  %11645 = trunc i64 %11644 to i32
  %t43041452.us.us.us = add i32 %t42921434, %11645
  %t43031453.us.us.us = add i32 %t42911435, %11645
  %t43021454.us.us.us = add i32 %t42901436, %11645
  %11646 = sext i32 %reass.mul2781.us.us.us to i64
  %11647 = sext i32 %t43021454.us.us.us to i64
  %11648 = sext i32 %t43031453.us.us.us to i64
  %11649 = sext i32 %t43041452.us.us.us to i64
  br label %"for convolved.s1.r19$z.r1151455.us.us.us"

"for convolved.s1.r19$z.r1151455.us.us.us":       ; preds = %"for convolved.s1.r19$z.r1151455.us.us.us", %"for convolved.s1.r19$x1446.us.us.us"
  %indvars.iv4508 = phi i64 [ %indvars.iv.next4509, %"for convolved.s1.r19$z.r1151455.us.us.us" ], [ 0, %"for convolved.s1.r19$x1446.us.us.us" ]
  %convolved1914.sroa.142.45.us.us.us = phi <8 x i32> [ %11709, %"for convolved.s1.r19$z.r1151455.us.us.us" ], [ %convolved1914.sroa.142.43.us.us.us, %"for convolved.s1.r19$x1446.us.us.us" ]
  %convolved1914.sroa.102.45.us.us.us = phi <8 x i32> [ %11698, %"for convolved.s1.r19$z.r1151455.us.us.us" ], [ %convolved1914.sroa.102.43.us.us.us, %"for convolved.s1.r19$x1446.us.us.us" ]
  %convolved1914.sroa.62.45.us.us.us = phi <8 x i32> [ %11687, %"for convolved.s1.r19$z.r1151455.us.us.us" ], [ %convolved1914.sroa.62.43.us.us.us, %"for convolved.s1.r19$x1446.us.us.us" ]
  %convolved1914.sroa.0.91.us.us.us = phi <8 x i32> [ %11675, %"for convolved.s1.r19$z.r1151455.us.us.us" ], [ %convolved1914.sroa.0.89.us.us.us, %"for convolved.s1.r19$x1446.us.us.us" ]
  %11650 = shl nuw nsw i64 %indvars.iv4508, 2
  %11651 = add nsw i64 %11650, %11646
  %11652 = getelementptr inbounds i16, i16* %input_wrapper1284, i64 %11651
  %11653 = bitcast i16* %11652 to <1 x i32>*
  %11654 = load <1 x i32>, <1 x i32>* %11653, align 8, !tbaa !399
  %11655 = shufflevector <1 x i32> %11654, <1 x i32> undef, <8 x i32> zeroinitializer
  %11656 = bitcast <8 x i32> %11655 to <16 x i16>
  %11657 = shl nuw nsw i64 %indvars.iv4508, 3
  %11658 = add nsw i64 %11657, %11635
  %11659 = shl nsw i64 %11658, 2
  %11660 = add nsw i64 %11659, %11644
  %11661 = getelementptr inbounds i16, i16* %10619, i64 %11660
  %11662 = bitcast i16* %11661 to <16 x i16>*
  %11663 = load <16 x i16>, <16 x i16>* %11662, align 32, !tbaa !412
  %11664 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11656, <16 x i16> %11663)
  %11665 = add <8 x i32> %11664, %convolved1914.sroa.0.91.us.us.us
  %11666 = getelementptr inbounds i16, i16* %11652, i64 2
  %11667 = bitcast i16* %11666 to <1 x i32>*
  %11668 = load <1 x i32>, <1 x i32>* %11667, align 4, !tbaa !399
  %11669 = shufflevector <1 x i32> %11668, <1 x i32> undef, <8 x i32> zeroinitializer
  %11670 = bitcast <8 x i32> %11669 to <16 x i16>
  %11671 = getelementptr inbounds i16, i16* %11661, i64 16
  %11672 = bitcast i16* %11671 to <16 x i16>*
  %11673 = load <16 x i16>, <16 x i16>* %11672, align 32, !tbaa !412
  %11674 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11670, <16 x i16> %11673)
  %11675 = add <8 x i32> %11665, %11674
  %11676 = shl nuw nsw i64 %indvars.iv4508, 5
  %11677 = add nsw i64 %11676, %11647
  %11678 = getelementptr inbounds i16, i16* %10619, i64 %11677
  %11679 = bitcast i16* %11678 to <16 x i16>*
  %11680 = load <16 x i16>, <16 x i16>* %11679, align 32, !tbaa !412
  %11681 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11656, <16 x i16> %11680)
  %11682 = add <8 x i32> %11681, %convolved1914.sroa.62.45.us.us.us
  %11683 = getelementptr inbounds i16, i16* %11678, i64 16
  %11684 = bitcast i16* %11683 to <16 x i16>*
  %11685 = load <16 x i16>, <16 x i16>* %11684, align 32, !tbaa !412
  %11686 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11670, <16 x i16> %11685)
  %11687 = add <8 x i32> %11682, %11686
  %11688 = add nsw i64 %11676, %11648
  %11689 = getelementptr inbounds i16, i16* %10619, i64 %11688
  %11690 = bitcast i16* %11689 to <16 x i16>*
  %11691 = load <16 x i16>, <16 x i16>* %11690, align 32, !tbaa !412
  %11692 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11656, <16 x i16> %11691)
  %11693 = add <8 x i32> %11692, %convolved1914.sroa.102.45.us.us.us
  %11694 = getelementptr inbounds i16, i16* %11689, i64 16
  %11695 = bitcast i16* %11694 to <16 x i16>*
  %11696 = load <16 x i16>, <16 x i16>* %11695, align 32, !tbaa !412
  %11697 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11670, <16 x i16> %11696)
  %11698 = add <8 x i32> %11693, %11697
  %11699 = add nsw i64 %11676, %11649
  %11700 = getelementptr inbounds i16, i16* %10619, i64 %11699
  %11701 = bitcast i16* %11700 to <16 x i16>*
  %11702 = load <16 x i16>, <16 x i16>* %11701, align 32, !tbaa !412
  %11703 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11656, <16 x i16> %11702)
  %11704 = add <8 x i32> %11703, %convolved1914.sroa.142.45.us.us.us
  %11705 = getelementptr inbounds i16, i16* %11700, i64 16
  %11706 = bitcast i16* %11705 to <16 x i16>*
  %11707 = load <16 x i16>, <16 x i16>* %11706, align 32, !tbaa !412
  %11708 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %11670, <16 x i16> %11707)
  %11709 = add <8 x i32> %11704, %11708
  %indvars.iv.next4509 = add nuw nsw i64 %indvars.iv4508, 1
  %.not1959.us.us.us = icmp eq i64 %indvars.iv.next4509, %10667
  br i1 %.not1959.us.us.us, label %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us", label %"for convolved.s1.r19$z.r1151455.us.us.us"

"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us": ; preds = %"for convolved.s1.r19$z.r1151455.us.us.us"
  %indvars.iv.next4511 = add nuw nsw i64 %indvars.iv4510, 1
  %.not1958.us.us.us = icmp eq i64 %indvars.iv.next4511, %10673
  br i1 %.not1958.us.us.us, label %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us", label %"for convolved.s1.r19$x1446.us.us.us"

"end for convolved.s1.r19$x1447.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r1151456.loopexit.us.us.us"
  %indvars.iv.next4518 = add nuw nsw i64 %indvars.iv4517, 1
  %.not1957.us.us = icmp eq i64 %indvars.iv.next4518, %10675
  br i1 %.not1957.us.us, label %"consume convolved1458", label %"for convolved.s1.r19$y1438.us.us"

"end for output.s0.c.co1430":                     ; preds = %"consume convolved1458", %"for output.s0.x.xo1423"
  %indvars.iv.next4524 = add nuw nsw i64 %indvars.iv4523, 1
  %.not1955 = icmp eq i64 %indvars.iv.next4524, %10679
  br i1 %.not1955, label %"end for output.s0.x.xo1424", label %"for output.s0.x.xo1423"

"consume convolved1458":                          ; preds = %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us", %"for convolved.s1.r19$y1438.preheader.split.us", %"for convolved.s1.r19$y1438.preheader", %"for output.s0.c.co1429"
  %convolved1914.sroa.142.47 = phi <8 x i32> [ %11630, %"for output.s0.c.co1429" ], [ %11630, %"for convolved.s1.r19$y1438.preheader" ], [ %11630, %"for convolved.s1.r19$y1438.preheader.split.us" ], [ %11709, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ]
  %convolved1914.sroa.102.47 = phi <8 x i32> [ %11627, %"for output.s0.c.co1429" ], [ %11627, %"for convolved.s1.r19$y1438.preheader" ], [ %11627, %"for convolved.s1.r19$y1438.preheader.split.us" ], [ %11698, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ]
  %convolved1914.sroa.62.47 = phi <8 x i32> [ %11624, %"for output.s0.c.co1429" ], [ %11624, %"for convolved.s1.r19$y1438.preheader" ], [ %11624, %"for convolved.s1.r19$y1438.preheader.split.us" ], [ %11687, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ]
  %convolved1914.sroa.0.93 = phi <8 x i32> [ %11621, %"for output.s0.c.co1429" ], [ %11621, %"for convolved.s1.r19$y1438.preheader" ], [ %11621, %"for convolved.s1.r19$y1438.preheader.split.us" ], [ %11675, %"end for convolved.s1.r19$x1447.loopexit.split.us.us.us" ]
  %11710 = shufflevector <8 x i32> %convolved1914.sroa.0.93, <8 x i32> %convolved1914.sroa.62.47, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11711 = shufflevector <8 x i32> %convolved1914.sroa.102.47, <8 x i32> %convolved1914.sroa.142.47, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11712 = shufflevector <16 x i32> %11710, <16 x i32> %11711, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11713 = sext <32 x i32> %11712 to <32 x i64>
  %11714 = mul nsw <32 x i64> %11713, %10622
  %11715 = ashr <32 x i64> %11714, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %11716 = add nsw <32 x i64> %11715, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a430 = ashr <32 x i64> %11716, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %11717 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %11718 = icmp slt <4 x i64> %11717, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11719 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %11720 = icmp slt <4 x i64> %11719, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11721 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 8, i32 9, i32 10, i32 11>
  %11722 = icmp slt <4 x i64> %11721, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11723 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 12, i32 13, i32 14, i32 15>
  %11724 = icmp slt <4 x i64> %11723, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11725 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 16, i32 17, i32 18, i32 19>
  %11726 = icmp slt <4 x i64> %11725, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11727 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 20, i32 21, i32 22, i32 23>
  %11728 = icmp slt <4 x i64> %11727, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11729 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 24, i32 25, i32 26, i32 27>
  %11730 = icmp slt <4 x i64> %11729, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11731 = shufflevector <32 x i64> %a430, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11732 = icmp slt <4 x i64> %11731, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11733 = shufflevector <4 x i1> %11732, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %11734 = shufflevector <8 x i1> %11733, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %11735 = shufflevector <16 x i1> %11734, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11736 = select <4 x i1> %11718, <4 x i64> %11717, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11737 = select <4 x i1> %11720, <4 x i64> %11719, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11738 = select <4 x i1> %11722, <4 x i64> %11721, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11739 = select <4 x i1> %11724, <4 x i64> %11723, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11740 = select <4 x i1> %11726, <4 x i64> %11725, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11741 = select <4 x i1> %11728, <4 x i64> %11727, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11742 = select <4 x i1> %11730, <4 x i64> %11729, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11743 = shufflevector <32 x i1> %11735, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11744 = select <4 x i1> %11743, <4 x i64> %11731, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %11745 = shufflevector <4 x i64> %11744, <4 x i64> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %11746 = shufflevector <8 x i64> %11745, <8 x i64> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %a429 = shufflevector <16 x i64> %11746, <16 x i64> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11747 = icmp sgt <4 x i64> %11736, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11748 = icmp sgt <4 x i64> %11737, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11749 = icmp sgt <4 x i64> %11738, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11750 = icmp sgt <4 x i64> %11739, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11751 = icmp sgt <4 x i64> %11740, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11752 = icmp sgt <4 x i64> %11741, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11753 = icmp sgt <4 x i64> %11742, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11754 = shufflevector <32 x i64> %a429, <32 x i64> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11755 = icmp sgt <4 x i64> %11754, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11756 = shufflevector <4 x i1> %11755, <4 x i1> poison, <8 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 0, i32 1, i32 2, i32 3>
  %11757 = shufflevector <8 x i1> %11756, <8 x i1> poison, <16 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 4, i32 5, i32 6, i32 7>
  %11758 = shufflevector <16 x i1> %11757, <16 x i1> poison, <32 x i32> <i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 12, i32 13, i32 14, i32 15>
  %11759 = select <4 x i1> %11747, <4 x i64> %11736, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11760 = select <4 x i1> %11748, <4 x i64> %11737, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11761 = select <4 x i1> %11749, <4 x i64> %11738, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11762 = select <4 x i1> %11750, <4 x i64> %11739, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11763 = select <4 x i1> %11751, <4 x i64> %11740, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11764 = select <4 x i1> %11752, <4 x i64> %11741, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11765 = select <4 x i1> %11753, <4 x i64> %11742, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11766 = shufflevector <32 x i1> %11758, <32 x i1> undef, <4 x i32> <i32 28, i32 29, i32 30, i32 31>
  %11767 = select <4 x i1> %11766, <4 x i64> %11754, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %11768 = shufflevector <4 x i64> %11759, <4 x i64> %11760, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11769 = shufflevector <4 x i64> %11761, <4 x i64> %11762, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11770 = shufflevector <4 x i64> %11763, <4 x i64> %11764, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11771 = shufflevector <4 x i64> %11765, <4 x i64> %11767, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11772 = shufflevector <8 x i64> %11768, <8 x i64> %11769, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11773 = shufflevector <8 x i64> %11770, <8 x i64> %11771, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11774 = shufflevector <16 x i64> %11772, <16 x i64> %11773, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %t4659 = trunc <32 x i64> %11774 to <32 x i32>
  %11775 = ashr <32 x i32> %t4659, %t4660
  %11776 = shl <32 x i32> %t4659, %t4660
  %11777 = shufflevector <32 x i32> %11775, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11778 = shufflevector <32 x i32> %11776, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11779 = select <8 x i1> %10631, <8 x i32> %11777, <8 x i32> %11778
  %11780 = shufflevector <32 x i32> %11775, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11781 = shufflevector <32 x i32> %11776, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11782 = select <8 x i1> %10632, <8 x i32> %11780, <8 x i32> %11781
  %11783 = shufflevector <32 x i32> %11775, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11784 = shufflevector <32 x i32> %11776, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11785 = select <8 x i1> %10633, <8 x i32> %11783, <8 x i32> %11784
  %11786 = shufflevector <32 x i32> %11775, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11787 = shufflevector <32 x i32> %11776, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11788 = select <8 x i1> %10634, <8 x i32> %11786, <8 x i32> %11787
  %11789 = shufflevector <8 x i32> %11779, <8 x i32> %11782, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11790 = shufflevector <8 x i32> %11785, <8 x i32> %11788, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11791 = shufflevector <16 x i32> %11789, <16 x i32> %11790, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11792 = ashr <32 x i32> %t4659, %t4662
  %11793 = shl <32 x i32> %t4659, %t4662
  %11794 = shufflevector <32 x i32> %11792, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11795 = shufflevector <32 x i32> %11793, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %11796 = select <8 x i1> %10646, <8 x i32> %11794, <8 x i32> %11795
  %11797 = shufflevector <32 x i32> %11792, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11798 = shufflevector <32 x i32> %11793, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11799 = select <8 x i1> %10647, <8 x i32> %11797, <8 x i32> %11798
  %11800 = shufflevector <32 x i32> %11792, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11801 = shufflevector <32 x i32> %11793, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11802 = select <8 x i1> %10648, <8 x i32> %11800, <8 x i32> %11801
  %11803 = shufflevector <32 x i32> %11792, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11804 = shufflevector <32 x i32> %11793, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11805 = select <8 x i1> %10649, <8 x i32> %11803, <8 x i32> %11804
  %11806 = shufflevector <8 x i32> %11796, <8 x i32> %11799, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11807 = shufflevector <8 x i32> %11802, <8 x i32> %11805, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11808 = shufflevector <16 x i32> %11806, <16 x i32> %11807, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11809 = and <32 x i32> %11808, %10636
  %11810 = add nsw <32 x i32> %11809, %11791
  %11811 = shufflevector <32 x i32> %11810, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %11812 = shufflevector <32 x i32> %11810, <32 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %11813 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %11811, <8 x i32> %11812) #11
  %11814 = shufflevector <32 x i32> %11810, <32 x i32> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11815 = shufflevector <16 x i32> %11814, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %11816 = shufflevector <16 x i32> %11814, <16 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 12, i32 13, i32 14, i32 15>
  %11817 = call <16 x i16> @llvm.x86.avx2.packssdw(<8 x i32> %11815, <8 x i32> %11816) #11
  %11818 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %11813, <16 x i16> %10652)
  %11819 = call <16 x i16> @llvm.sadd.sat.v16i16(<16 x i16> %11817, <16 x i16> %10652)
  %11820 = shufflevector <16 x i16> %11818, <16 x i16> %11819, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %11821 = shufflevector <16 x i16> %11818, <16 x i16> %11819, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11822 = call <32 x i8> @llvm.x86.avx2.packuswb(<16 x i16> %11820, <16 x i16> %11821) #11
  %11823 = icmp ugt <32 x i8> %b430, %11822
  %a427 = select <32 x i1> %11823, <32 x i8> %11822, <32 x i8> %b430
  %11824 = icmp ugt <32 x i8> %a427, %b429
  %11825 = select <32 x i1> %11824, <32 x i8> %a427, <32 x i8> %b429
  %11826 = add nsw i64 %11618, %11616
  %11827 = getelementptr inbounds i8, i8* %182, i64 %11826
  %11828 = bitcast i8* %11827 to <32 x i8>*
  store <32 x i8> %11825, <32 x i8>* %11828, align 1, !tbaa !414
  %indvars.iv.next4521 = add nuw nsw i64 %indvars.iv4520, 1
  %.not1956 = icmp eq i64 %indvars.iv.next4521, %10677
  br i1 %.not1956, label %"end for output.s0.c.co1430", label %"for output.s0.c.co1429"

"for output.s0.b.rebased1486":                    ; preds = %"for output.s0.b.rebased1486.preheader", %"end for output.s0.y.rebased1499"
  %indvars.iv4441 = phi i64 [ 0, %"for output.s0.b.rebased1486.preheader" ], [ %indvars.iv.next4442, %"end for output.s0.y.rebased1499" ]
  %convolved1914.sroa.0.94 = phi <8 x i32> [ %convolved1914.sroa.0.0, %"for output.s0.b.rebased1486.preheader" ], [ %convolved1914.sroa.0.96, %"end for output.s0.y.rebased1499" ]
  %11829 = add nuw i64 %indvars.iv4441, %10862
  %11830 = trunc i64 %11829 to i32
  %11831 = mul i32 %181, %11830
  br i1 %10767, label %"for output.s0.y.rebased1498.preheader", label %"end for output.s0.y.rebased1499", !prof !387

"for output.s0.y.rebased1498.preheader":          ; preds = %"for output.s0.b.rebased1486"
  %t43641495 = sub i32 %11831, %10763
  %t43551496 = add i32 %t43181485.neg, %11831
  %11832 = sext i32 %t43641495 to i64
  %11833 = trunc i64 %11829 to i32
  %11834 = mul i32 %190, %11833
  br label %"for output.s0.y.rebased1498"

"for output.s0.y.rebased1498":                    ; preds = %"for output.s0.y.rebased1498.preheader", %call_destructor.exit2476
  %indvars.iv4436 = phi i64 [ 0, %"for output.s0.y.rebased1498.preheader" ], [ %indvars.iv.next4437, %call_destructor.exit2476 ]
  %convolved1914.sroa.0.95 = phi <8 x i32> [ %convolved1914.sroa.0.94, %"for output.s0.y.rebased1498.preheader" ], [ %convolved1914.sroa.0.98, %call_destructor.exit2476 ]
  %11835 = add nsw i64 %indvars.iv4436, %10859
  %11836 = mul nsw i64 %11835, %10860
  %11837 = add nsw i64 %11836, %10861
  %11838 = call i8* @halide_malloc(i8* null, i64 %10866)
  %input_wrapper1502 = bitcast i8* %11838 to i16*
  br i1 %t43461469, label %then_bb1505, label %next_bb1506

"end for output.s0.y.rebased1499":                ; preds = %call_destructor.exit2476, %"for output.s0.b.rebased1486"
  %convolved1914.sroa.0.96 = phi <8 x i32> [ %convolved1914.sroa.0.94, %"for output.s0.b.rebased1486" ], [ %convolved1914.sroa.0.98, %call_destructor.exit2476 ]
  %indvars.iv.next4442 = add nuw nsw i64 %indvars.iv4441, 1
  %11839 = icmp eq i64 %indvars.iv.next4442, %zext4445
  br i1 %11839, label %if.then.i2454, label %"for output.s0.b.rebased1486"

then_bb1505:                                      ; preds = %"for output.s0.y.rebased1498"
  br i1 %10863, label %"for input_wrapper.s0.y.rebased1510", label %"consume input_wrapper1636", !prof !387

next_bb1506:                                      ; preds = %"for output.s0.y.rebased1498"
  br i1 %10720, label %next_bb1548, label %then_bb1547

"for input_wrapper.s0.y.rebased1510":             ; preds = %then_bb1505, %"end for input_wrapper.s0.x.x.rebased1534"
  %indvars.iv4406 = phi i64 [ %indvars.iv.next4407, %"end for input_wrapper.s0.x.x.rebased1534" ], [ 0, %then_bb1505 ]
  %11840 = mul nsw i64 %indvars.iv4406, %10845
  %11841 = add nsw i64 %indvars.iv4406, %11837
  %11842 = trunc i64 %11841 to i32
  %11843 = mul i32 %178, %11842
  %t43821514 = add i32 %t43551496, %11843
  br i1 %10761, label %"for input_wrapper.s0.x.x1515.preheader", label %"end for input_wrapper.s0.x.x1516", !prof !387

"for input_wrapper.s0.x.x1515.preheader":         ; preds = %"for input_wrapper.s0.y.rebased1510"
  %11844 = sext i32 %t43821514 to i64
  br i1 %10741, label %"for input_wrapper.s0.x.x1515.us.preheader", label %"end for input_wrapper.s0.x.x.rebased1534", !prof !387

"for input_wrapper.s0.x.x1515.us.preheader":      ; preds = %"for input_wrapper.s0.x.x1515.preheader"
  %11845 = trunc i64 %11840 to i32
  br label %"for input_wrapper.s0.x.x1515.us"

"for input_wrapper.s0.x.x1515.us":                ; preds = %"for input_wrapper.s0.x.x1515.us.preheader", %"end for input_wrapper.s0.c.c1528.loopexit.us"
  %indvars.iv4396 = phi i64 [ 0, %"for input_wrapper.s0.x.x1515.us.preheader" ], [ %indvars.iv.next4397, %"end for input_wrapper.s0.c.c1528.loopexit.us" ]
  %11846 = trunc i64 %indvars.iv4396 to i32
  %t43891518.us = mul i32 %10790, %11846
  %11847 = shl nsw i64 %indvars.iv4396, 3
  %11848 = add nsw i64 %11847, %10830
  br label %"for input_wrapper.s0.c.c1527.us"

"for input_wrapper.s0.c.c1527.us":                ; preds = %"for input_wrapper.s0.x.x1515.us", %"for input_wrapper.s0.c.c1527.us"
  %indvars.iv4393 = phi i64 [ 0, %"for input_wrapper.s0.x.x1515.us" ], [ %indvars.iv.next4394, %"for input_wrapper.s0.c.c1527.us" ]
  %11849 = add nsw i64 %indvars.iv4393, %11848
  %11850 = shl nsw i64 %11849, 2
  %11851 = add nsw i64 %11850, %11844
  %11852 = getelementptr inbounds i8, i8* %172, i64 %11851
  %11853 = bitcast i8* %11852 to <32 x i8>*
  %11854 = load <32 x i8>, <32 x i8>* %11853, align 4, !tbaa !397
  %11855 = zext <32 x i8> %11854 to <32 x i16>
  %11856 = sub nsw <32 x i16> %11855, %10799
  %11857 = trunc i64 %indvars.iv4393 to i32
  %11858 = add i32 %t43891518.us, %11857
  %11859 = shl nsw i32 %11858, 2
  %11860 = add i32 %11859, %11845
  %11861 = insertelement <4 x i32> undef, i32 %11860, i32 0
  %11862 = shufflevector <4 x i32> %11861, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11863 = add <4 x i32> %11862, <i32 poison, i32 1, i32 2, i32 3>
  %11864 = add i32 %11860, 1
  %11865 = add i32 %11864, %a453
  %11866 = insertelement <4 x i32> undef, i32 %11865, i32 0
  %11867 = shufflevector <4 x i32> %11866, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11868 = add <4 x i32> %11867, <i32 poison, i32 1, i32 2, i32 3>
  %11869 = add i32 %11860, 2
  %11870 = add i32 %11869, %10796
  %11871 = insertelement <4 x i32> undef, i32 %11870, i32 0
  %11872 = shufflevector <4 x i32> %11871, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11873 = add <4 x i32> %11872, <i32 poison, i32 1, i32 2, i32 3>
  %11874 = add i32 %11860, 3
  %11875 = add i32 %11874, %10795
  %11876 = insertelement <4 x i32> undef, i32 %11875, i32 0
  %11877 = shufflevector <4 x i32> %11876, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11878 = add <4 x i32> %11877, <i32 poison, i32 1, i32 2, i32 3>
  %11879 = add i32 %11860, 4
  %11880 = add i32 %11879, %10794
  %11881 = insertelement <4 x i32> undef, i32 %11880, i32 0
  %11882 = shufflevector <4 x i32> %11881, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11883 = add <4 x i32> %11882, <i32 poison, i32 1, i32 2, i32 3>
  %11884 = add i32 %11860, 5
  %11885 = add i32 %11884, %10793
  %11886 = insertelement <4 x i32> undef, i32 %11885, i32 0
  %11887 = shufflevector <4 x i32> %11886, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11888 = add <4 x i32> %11887, <i32 poison, i32 1, i32 2, i32 3>
  %11889 = add i32 %11860, 6
  %11890 = add i32 %11889, %10792
  %11891 = insertelement <4 x i32> undef, i32 %11890, i32 0
  %11892 = shufflevector <4 x i32> %11891, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11893 = add <4 x i32> %11892, <i32 poison, i32 1, i32 2, i32 3>
  %11894 = add i32 %11860, 7
  %11895 = add i32 %11894, %10791
  %11896 = insertelement <4 x i32> undef, i32 %11895, i32 0
  %11897 = shufflevector <4 x i32> %11896, <4 x i32> undef, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>
  %11898 = add <4 x i32> %11897, <i32 poison, i32 1, i32 2, i32 3>
  %11899 = extractelement <32 x i16> %11856, i32 0
  %11900 = sext i32 %11860 to i64
  %11901 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11900
  store i16 %11899, i16* %11901, align 2, !tbaa !399
  %11902 = extractelement <4 x i32> %11863, i32 1
  %11903 = extractelement <32 x i16> %11856, i32 1
  %11904 = sext i32 %11902 to i64
  %11905 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11904
  store i16 %11903, i16* %11905, align 2, !tbaa !399
  %11906 = extractelement <4 x i32> %11863, i32 2
  %11907 = extractelement <32 x i16> %11856, i32 2
  %11908 = sext i32 %11906 to i64
  %11909 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11908
  store i16 %11907, i16* %11909, align 2, !tbaa !399
  %11910 = extractelement <4 x i32> %11863, i32 3
  %11911 = extractelement <32 x i16> %11856, i32 3
  %11912 = sext i32 %11910 to i64
  %11913 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11912
  store i16 %11911, i16* %11913, align 2, !tbaa !399
  %11914 = extractelement <32 x i16> %11856, i32 4
  %11915 = sext i32 %11865 to i64
  %11916 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11915
  store i16 %11914, i16* %11916, align 2, !tbaa !399
  %11917 = extractelement <4 x i32> %11868, i32 1
  %11918 = extractelement <32 x i16> %11856, i32 5
  %11919 = sext i32 %11917 to i64
  %11920 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11919
  store i16 %11918, i16* %11920, align 2, !tbaa !399
  %11921 = extractelement <4 x i32> %11868, i32 2
  %11922 = extractelement <32 x i16> %11856, i32 6
  %11923 = sext i32 %11921 to i64
  %11924 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11923
  store i16 %11922, i16* %11924, align 2, !tbaa !399
  %11925 = extractelement <4 x i32> %11868, i32 3
  %11926 = extractelement <32 x i16> %11856, i32 7
  %11927 = sext i32 %11925 to i64
  %11928 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11927
  store i16 %11926, i16* %11928, align 2, !tbaa !399
  %11929 = extractelement <32 x i16> %11856, i32 8
  %11930 = sext i32 %11870 to i64
  %11931 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11930
  store i16 %11929, i16* %11931, align 2, !tbaa !399
  %11932 = extractelement <4 x i32> %11873, i32 1
  %11933 = extractelement <32 x i16> %11856, i32 9
  %11934 = sext i32 %11932 to i64
  %11935 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11934
  store i16 %11933, i16* %11935, align 2, !tbaa !399
  %11936 = extractelement <4 x i32> %11873, i32 2
  %11937 = extractelement <32 x i16> %11856, i32 10
  %11938 = sext i32 %11936 to i64
  %11939 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11938
  store i16 %11937, i16* %11939, align 2, !tbaa !399
  %11940 = extractelement <4 x i32> %11873, i32 3
  %11941 = extractelement <32 x i16> %11856, i32 11
  %11942 = sext i32 %11940 to i64
  %11943 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11942
  store i16 %11941, i16* %11943, align 2, !tbaa !399
  %11944 = extractelement <32 x i16> %11856, i32 12
  %11945 = sext i32 %11875 to i64
  %11946 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11945
  store i16 %11944, i16* %11946, align 2, !tbaa !399
  %11947 = extractelement <4 x i32> %11878, i32 1
  %11948 = extractelement <32 x i16> %11856, i32 13
  %11949 = sext i32 %11947 to i64
  %11950 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11949
  store i16 %11948, i16* %11950, align 2, !tbaa !399
  %11951 = extractelement <4 x i32> %11878, i32 2
  %11952 = extractelement <32 x i16> %11856, i32 14
  %11953 = sext i32 %11951 to i64
  %11954 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11953
  store i16 %11952, i16* %11954, align 2, !tbaa !399
  %11955 = extractelement <4 x i32> %11878, i32 3
  %11956 = extractelement <32 x i16> %11856, i32 15
  %11957 = sext i32 %11955 to i64
  %11958 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11957
  store i16 %11956, i16* %11958, align 2, !tbaa !399
  %11959 = extractelement <32 x i16> %11856, i32 16
  %11960 = sext i32 %11880 to i64
  %11961 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11960
  store i16 %11959, i16* %11961, align 2, !tbaa !399
  %11962 = extractelement <4 x i32> %11883, i32 1
  %11963 = extractelement <32 x i16> %11856, i32 17
  %11964 = sext i32 %11962 to i64
  %11965 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11964
  store i16 %11963, i16* %11965, align 2, !tbaa !399
  %11966 = extractelement <4 x i32> %11883, i32 2
  %11967 = extractelement <32 x i16> %11856, i32 18
  %11968 = sext i32 %11966 to i64
  %11969 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11968
  store i16 %11967, i16* %11969, align 2, !tbaa !399
  %11970 = extractelement <4 x i32> %11883, i32 3
  %11971 = extractelement <32 x i16> %11856, i32 19
  %11972 = sext i32 %11970 to i64
  %11973 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11972
  store i16 %11971, i16* %11973, align 2, !tbaa !399
  %11974 = extractelement <32 x i16> %11856, i32 20
  %11975 = sext i32 %11885 to i64
  %11976 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11975
  store i16 %11974, i16* %11976, align 2, !tbaa !399
  %11977 = extractelement <4 x i32> %11888, i32 1
  %11978 = extractelement <32 x i16> %11856, i32 21
  %11979 = sext i32 %11977 to i64
  %11980 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11979
  store i16 %11978, i16* %11980, align 2, !tbaa !399
  %11981 = extractelement <4 x i32> %11888, i32 2
  %11982 = extractelement <32 x i16> %11856, i32 22
  %11983 = sext i32 %11981 to i64
  %11984 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11983
  store i16 %11982, i16* %11984, align 2, !tbaa !399
  %11985 = extractelement <4 x i32> %11888, i32 3
  %11986 = extractelement <32 x i16> %11856, i32 23
  %11987 = sext i32 %11985 to i64
  %11988 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11987
  store i16 %11986, i16* %11988, align 2, !tbaa !399
  %11989 = extractelement <32 x i16> %11856, i32 24
  %11990 = sext i32 %11890 to i64
  %11991 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11990
  store i16 %11989, i16* %11991, align 2, !tbaa !399
  %11992 = extractelement <4 x i32> %11893, i32 1
  %11993 = extractelement <32 x i16> %11856, i32 25
  %11994 = sext i32 %11992 to i64
  %11995 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11994
  store i16 %11993, i16* %11995, align 2, !tbaa !399
  %11996 = extractelement <4 x i32> %11893, i32 2
  %11997 = extractelement <32 x i16> %11856, i32 26
  %11998 = sext i32 %11996 to i64
  %11999 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %11998
  store i16 %11997, i16* %11999, align 2, !tbaa !399
  %12000 = extractelement <4 x i32> %11893, i32 3
  %12001 = extractelement <32 x i16> %11856, i32 27
  %12002 = sext i32 %12000 to i64
  %12003 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12002
  store i16 %12001, i16* %12003, align 2, !tbaa !399
  %12004 = extractelement <32 x i16> %11856, i32 28
  %12005 = sext i32 %11895 to i64
  %12006 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12005
  store i16 %12004, i16* %12006, align 2, !tbaa !399
  %12007 = extractelement <4 x i32> %11898, i32 1
  %12008 = extractelement <32 x i16> %11856, i32 29
  %12009 = sext i32 %12007 to i64
  %12010 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12009
  store i16 %12008, i16* %12010, align 2, !tbaa !399
  %12011 = extractelement <4 x i32> %11898, i32 2
  %12012 = extractelement <32 x i16> %11856, i32 30
  %12013 = sext i32 %12011 to i64
  %12014 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12013
  store i16 %12012, i16* %12014, align 2, !tbaa !399
  %12015 = extractelement <4 x i32> %11898, i32 3
  %12016 = extractelement <32 x i16> %11856, i32 31
  %12017 = sext i32 %12015 to i64
  %12018 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12017
  store i16 %12016, i16* %12018, align 2, !tbaa !399
  %indvars.iv.next4394 = add nuw nsw i64 %indvars.iv4393, 1
  %.not1952.us = icmp eq i64 %indvars.iv.next4394, %10841
  br i1 %.not1952.us, label %"end for input_wrapper.s0.c.c1528.loopexit.us", label %"for input_wrapper.s0.c.c1527.us"

"end for input_wrapper.s0.c.c1528.loopexit.us":   ; preds = %"for input_wrapper.s0.c.c1527.us"
  %indvars.iv.next4397 = add nuw nsw i64 %indvars.iv4396, 1
  %.not1951.us = icmp eq i64 %indvars.iv.next4397, %10842
  br i1 %.not1951.us, label %"end for input_wrapper.s0.x.x1516", label %"for input_wrapper.s0.x.x1515.us"

"end for input_wrapper.s0.x.x1516":               ; preds = %"end for input_wrapper.s0.c.c1528.loopexit.us", %"for input_wrapper.s0.y.rebased1510"
  br i1 %10800, label %"for input_wrapper.s0.x.x.rebased1533.preheader", label %"end for input_wrapper.s0.x.x.rebased1534", !prof !387

"for input_wrapper.s0.x.x.rebased1533.preheader": ; preds = %"end for input_wrapper.s0.x.x1516"
  %12019 = sext i32 %t43821514 to i64
  br i1 %10741, label %"for input_wrapper.s0.x.x.rebased1533.us", label %"end for input_wrapper.s0.x.x.rebased1534", !prof !387

"for input_wrapper.s0.x.x.rebased1533.us":        ; preds = %"for input_wrapper.s0.x.x.rebased1533.preheader", %"end for input_wrapper.s0.x.v211539.us"
  %indvars.iv4404 = phi i64 [ %indvars.iv.next4405, %"end for input_wrapper.s0.x.v211539.us" ], [ 0, %"for input_wrapper.s0.x.x.rebased1533.preheader" ]
  %12020 = trunc i64 %indvars.iv4404 to i32
  %12021 = add i32 %t43691489, %12020
  %12022 = shl nsw i32 %12021, 3
  %a457.us = sub nsw i32 %a445, %12022
  %12023 = icmp slt i32 %a457.us, 7
  %t44001536.us = select i1 %12023, i32 %a457.us, i32 7
  %12024 = icmp sgt i32 %t44001536.us, -1
  br i1 %12024, label %"for input_wrapper.s0.x.v211538.us.us.preheader", label %"end for input_wrapper.s0.x.v211539.us", !prof !387

"for input_wrapper.s0.x.v211538.us.us.preheader": ; preds = %"for input_wrapper.s0.x.x.rebased1533.us"
  %12025 = sext i32 %12022 to i64
  %12026 = zext i32 %t44001536.us to i64
  br label %"for input_wrapper.s0.x.v211538.us.us"

"end for input_wrapper.s0.x.v211539.us":          ; preds = %"end for input_wrapper.s0.c.c1545.loopexit.us.us", %"for input_wrapper.s0.x.x.rebased1533.us"
  %indvars.iv.next4405 = add nuw nsw i64 %indvars.iv4404, 1
  %.not1948.us = icmp eq i64 %indvars.iv4404, %10844
  br i1 %.not1948.us, label %"end for input_wrapper.s0.x.x.rebased1534", label %"for input_wrapper.s0.x.x.rebased1533.us"

"for input_wrapper.s0.x.v211538.us.us":           ; preds = %"for input_wrapper.s0.x.v211538.us.us.preheader", %"end for input_wrapper.s0.c.c1545.loopexit.us.us"
  %indvars.iv4401 = phi i64 [ 0, %"for input_wrapper.s0.x.v211538.us.us.preheader" ], [ %indvars.iv.next4402, %"end for input_wrapper.s0.c.c1545.loopexit.us.us" ]
  %12027 = add nsw i64 %indvars.iv4401, %12025
  %12028 = mul nsw i64 %12027, %10843
  %12029 = add nsw i64 %12028, %11840
  %12030 = trunc i64 %12027 to i32
  %t44021543.us.us = add i32 %b448, %12030
  %12031 = sext i32 %t44021543.us.us to i64
  br i1 %10890, label %"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c1544.us.us"

"for input_wrapper.s0.c.c1544.us.us":             ; preds = %"for input_wrapper.s0.x.v211538.us.us", %"for input_wrapper.s0.c.c1544.us.us"
  %indvars.iv4399 = phi i64 [ %indvars.iv.next4400.3, %"for input_wrapper.s0.c.c1544.us.us" ], [ 0, %"for input_wrapper.s0.x.v211538.us.us" ]
  %niter5997 = phi i64 [ %niter5997.nsub.3, %"for input_wrapper.s0.c.c1544.us.us" ], [ %unroll_iter5996, %"for input_wrapper.s0.x.v211538.us.us" ]
  %12032 = add nsw i64 %indvars.iv4399, %12031
  %12033 = shl nsw i64 %12032, 2
  %12034 = add nsw i64 %12033, %12019
  %12035 = getelementptr inbounds i8, i8* %172, i64 %12034
  %12036 = bitcast i8* %12035 to <4 x i8>*
  %12037 = load <4 x i8>, <4 x i8>* %12036, align 4, !tbaa !397
  %12038 = zext <4 x i8> %12037 to <4 x i16>
  %12039 = sub nsw <4 x i16> %12038, %10788
  %12040 = shl nuw nsw i64 %indvars.iv4399, 2
  %12041 = add nsw i64 %12040, %12029
  %12042 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12041
  %12043 = bitcast i16* %12042 to <4 x i16>*
  store <4 x i16> %12039, <4 x i16>* %12043, align 8, !tbaa !399
  %indvars.iv.next4400 = or i64 %indvars.iv4399, 1
  %12044 = add nsw i64 %indvars.iv.next4400, %12031
  %12045 = shl nsw i64 %12044, 2
  %12046 = add nsw i64 %12045, %12019
  %12047 = getelementptr inbounds i8, i8* %172, i64 %12046
  %12048 = bitcast i8* %12047 to <4 x i8>*
  %12049 = load <4 x i8>, <4 x i8>* %12048, align 4, !tbaa !397
  %12050 = zext <4 x i8> %12049 to <4 x i16>
  %12051 = sub nsw <4 x i16> %12050, %10788
  %12052 = shl nuw nsw i64 %indvars.iv.next4400, 2
  %12053 = add nsw i64 %12052, %12029
  %12054 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12053
  %12055 = bitcast i16* %12054 to <4 x i16>*
  store <4 x i16> %12051, <4 x i16>* %12055, align 8, !tbaa !399
  %indvars.iv.next4400.1 = or i64 %indvars.iv4399, 2
  %12056 = add nsw i64 %indvars.iv.next4400.1, %12031
  %12057 = shl nsw i64 %12056, 2
  %12058 = add nsw i64 %12057, %12019
  %12059 = getelementptr inbounds i8, i8* %172, i64 %12058
  %12060 = bitcast i8* %12059 to <4 x i8>*
  %12061 = load <4 x i8>, <4 x i8>* %12060, align 4, !tbaa !397
  %12062 = zext <4 x i8> %12061 to <4 x i16>
  %12063 = sub nsw <4 x i16> %12062, %10788
  %12064 = shl nuw nsw i64 %indvars.iv.next4400.1, 2
  %12065 = add nsw i64 %12064, %12029
  %12066 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12065
  %12067 = bitcast i16* %12066 to <4 x i16>*
  store <4 x i16> %12063, <4 x i16>* %12067, align 8, !tbaa !399
  %indvars.iv.next4400.2 = or i64 %indvars.iv4399, 3
  %12068 = add nsw i64 %indvars.iv.next4400.2, %12031
  %12069 = shl nsw i64 %12068, 2
  %12070 = add nsw i64 %12069, %12019
  %12071 = getelementptr inbounds i8, i8* %172, i64 %12070
  %12072 = bitcast i8* %12071 to <4 x i8>*
  %12073 = load <4 x i8>, <4 x i8>* %12072, align 4, !tbaa !397
  %12074 = zext <4 x i8> %12073 to <4 x i16>
  %12075 = sub nsw <4 x i16> %12074, %10788
  %12076 = shl nuw nsw i64 %indvars.iv.next4400.2, 2
  %12077 = add nsw i64 %12076, %12029
  %12078 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12077
  %12079 = bitcast i16* %12078 to <4 x i16>*
  store <4 x i16> %12075, <4 x i16>* %12079, align 8, !tbaa !399
  %indvars.iv.next4400.3 = add nuw nsw i64 %indvars.iv4399, 4
  %niter5997.nsub.3 = add i64 %niter5997, -4
  %niter5997.ncmp.3 = icmp eq i64 %niter5997.nsub.3, 0
  br i1 %niter5997.ncmp.3, label %"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa", label %"for input_wrapper.s0.c.c1544.us.us"

"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1544.us.us", %"for input_wrapper.s0.x.v211538.us.us"
  %indvars.iv4399.unr = phi i64 [ 0, %"for input_wrapper.s0.x.v211538.us.us" ], [ %indvars.iv.next4400.3, %"for input_wrapper.s0.c.c1544.us.us" ]
  br i1 %lcmp.mod5995.not, label %"end for input_wrapper.s0.c.c1545.loopexit.us.us", label %"for input_wrapper.s0.c.c1544.us.us.epil"

"for input_wrapper.s0.c.c1544.us.us.epil":        ; preds = %"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa", %"for input_wrapper.s0.c.c1544.us.us.epil"
  %indvars.iv4399.epil = phi i64 [ %indvars.iv.next4400.epil, %"for input_wrapper.s0.c.c1544.us.us.epil" ], [ %indvars.iv4399.unr, %"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa" ]
  %epil.iter5994 = phi i64 [ %epil.iter5994.sub, %"for input_wrapper.s0.c.c1544.us.us.epil" ], [ %xtraiter5993, %"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa" ]
  %12080 = add nsw i64 %indvars.iv4399.epil, %12031
  %12081 = shl nsw i64 %12080, 2
  %12082 = add nsw i64 %12081, %12019
  %12083 = getelementptr inbounds i8, i8* %172, i64 %12082
  %12084 = bitcast i8* %12083 to <4 x i8>*
  %12085 = load <4 x i8>, <4 x i8>* %12084, align 4, !tbaa !397
  %12086 = zext <4 x i8> %12085 to <4 x i16>
  %12087 = sub nsw <4 x i16> %12086, %10788
  %12088 = shl nuw nsw i64 %indvars.iv4399.epil, 2
  %12089 = add nsw i64 %12088, %12029
  %12090 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12089
  %12091 = bitcast i16* %12090 to <4 x i16>*
  store <4 x i16> %12087, <4 x i16>* %12091, align 8, !tbaa !399
  %indvars.iv.next4400.epil = add nuw nsw i64 %indvars.iv4399.epil, 1
  %epil.iter5994.sub = add i64 %epil.iter5994, -1
  %epil.iter5994.cmp.not = icmp eq i64 %epil.iter5994.sub, 0
  br i1 %epil.iter5994.cmp.not, label %"end for input_wrapper.s0.c.c1545.loopexit.us.us", label %"for input_wrapper.s0.c.c1544.us.us.epil", !llvm.loop !491

"end for input_wrapper.s0.c.c1545.loopexit.us.us": ; preds = %"for input_wrapper.s0.c.c1544.us.us.epil", %"end for input_wrapper.s0.c.c1545.loopexit.us.us.unr-lcssa"
  %indvars.iv.next4402 = add nuw nsw i64 %indvars.iv4401, 1
  %.not1949.us.us = icmp eq i64 %indvars.iv4401, %12026
  br i1 %.not1949.us.us, label %"end for input_wrapper.s0.x.v211539.us", label %"for input_wrapper.s0.x.v211538.us.us"

"end for input_wrapper.s0.x.x.rebased1534":       ; preds = %"end for input_wrapper.s0.x.v211539.us", %"for input_wrapper.s0.x.x1515.preheader", %"for input_wrapper.s0.x.x.rebased1533.preheader", %"end for input_wrapper.s0.x.x1516"
  %indvars.iv.next4407 = add nuw nsw i64 %indvars.iv4406, 1
  %.not1947 = icmp eq i64 %indvars.iv4406, %10871
  br i1 %.not1947, label %"consume input_wrapper1636", label %"for input_wrapper.s0.y.rebased1510"

then_bb1547:                                      ; preds = %next_bb1506
  br i1 %10883, label %"consume input_wrapper1636", label %"for input_wrapper.s0.y.rebased1552.us", !prof !402

"for input_wrapper.s0.y.rebased1552.us":          ; preds = %then_bb1547, %"end for input_wrapper.s0.x.rebased1558.loopexit.us"
  %indvars.iv4359 = phi i64 [ %indvars.iv.next4360, %"end for input_wrapper.s0.x.rebased1558.loopexit.us" ], [ 0, %then_bb1547 ]
  %12092 = trunc i64 %indvars.iv4359 to i32
  %t44091555.us = mul i32 %10760, %12092
  %12093 = add nsw i64 %indvars.iv4359, %11837
  %12094 = mul nsw i64 %12093, %10835
  %12095 = add nsw i64 %12094, %11832
  br i1 %10777, label %"for input_wrapper.s0.x.rebased1557.us.us", label %"for input_wrapper.s0.x.rebased1557.preheader.split.us3338", !prof !387

"for input_wrapper.s0.x.rebased1557.preheader.split.us3338": ; preds = %"for input_wrapper.s0.y.rebased1552.us"
  br i1 %10715, label %"for input_wrapper.s0.x.rebased1557.us3322.us", label %"end for input_wrapper.s0.x.rebased1558.loopexit.us", !prof !387

"end for input_wrapper.s0.x.rebased1558.loopexit.us": ; preds = %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us", %"end for input_wrapper.s0.c.c.rebased1568.loopexit.us.us", %"for input_wrapper.s0.x.rebased1557.preheader.split.us3338"
  %indvars.iv.next4360 = add nuw nsw i64 %indvars.iv4359, 1
  %.not1942.us = icmp eq i64 %indvars.iv4359, %10867
  br i1 %.not1942.us, label %"consume input_wrapper1636", label %"for input_wrapper.s0.y.rebased1552.us"

"for input_wrapper.s0.x.rebased1557.us.us":       ; preds = %"for input_wrapper.s0.y.rebased1552.us", %"end for input_wrapper.s0.c.c.rebased1568.loopexit.us.us"
  %indvars.iv4356 = phi i64 [ %indvars.iv.next4357, %"end for input_wrapper.s0.c.c.rebased1568.loopexit.us.us" ], [ 0, %"for input_wrapper.s0.y.rebased1552.us" ]
  %12096 = trunc i64 %indvars.iv4356 to i32
  %reass.add2750.us.us = add i32 %t44091555.us, %12096
  %reass.mul2751.us.us = mul i32 %reass.add2750.us.us, %10773
  %12097 = add nsw i64 %indvars.iv4356, %10830
  %12098 = mul nsw i64 %12097, %10831
  %12099 = add nsw i64 %12095, %12098
  %12100 = sext i32 %reass.mul2751.us.us to i64
  br i1 %10715, label %"for input_wrapper.s0.c.c1562.us.us.preheader", label %"end for input_wrapper.s0.c.c1563.us.us", !prof !387

"for input_wrapper.s0.c.c1562.us.us.preheader":   ; preds = %"for input_wrapper.s0.x.rebased1557.us.us"
  br i1 %10885, label %"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1562.us.us"

"for input_wrapper.s0.c.c1562.us.us":             ; preds = %"for input_wrapper.s0.c.c1562.us.us.preheader", %"for input_wrapper.s0.c.c1562.us.us"
  %indvars.iv4352 = phi i64 [ %indvars.iv.next4353.3, %"for input_wrapper.s0.c.c1562.us.us" ], [ 0, %"for input_wrapper.s0.c.c1562.us.us.preheader" ]
  %niter5973 = phi i64 [ %niter5973.nsub.3, %"for input_wrapper.s0.c.c1562.us.us" ], [ %unroll_iter5972, %"for input_wrapper.s0.c.c1562.us.us.preheader" ]
  %12101 = shl nuw nsw i64 %indvars.iv4352, 4
  %12102 = add nsw i64 %12101, %12099
  %12103 = getelementptr inbounds i8, i8* %172, i64 %12102
  %12104 = bitcast i8* %12103 to <16 x i8>*
  %12105 = load <16 x i8>, <16 x i8>* %12104, align 4, !tbaa !397
  %12106 = zext <16 x i8> %12105 to <16 x i16>
  %12107 = sub nsw <16 x i16> %12106, %10776
  %12108 = add nsw i64 %12101, %12100
  %12109 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12108
  %12110 = bitcast i16* %12109 to <16 x i16>*
  store <16 x i16> %12107, <16 x i16>* %12110, align 8, !tbaa !399
  %indvars.iv.next4353 = shl i64 %indvars.iv4352, 4
  %12111 = or i64 %indvars.iv.next4353, 16
  %12112 = add nsw i64 %12111, %12099
  %12113 = getelementptr inbounds i8, i8* %172, i64 %12112
  %12114 = bitcast i8* %12113 to <16 x i8>*
  %12115 = load <16 x i8>, <16 x i8>* %12114, align 4, !tbaa !397
  %12116 = zext <16 x i8> %12115 to <16 x i16>
  %12117 = sub nsw <16 x i16> %12116, %10776
  %12118 = add nsw i64 %12111, %12100
  %12119 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12118
  %12120 = bitcast i16* %12119 to <16 x i16>*
  store <16 x i16> %12117, <16 x i16>* %12120, align 8, !tbaa !399
  %indvars.iv.next4353.1 = shl i64 %indvars.iv4352, 4
  %12121 = or i64 %indvars.iv.next4353.1, 32
  %12122 = add nsw i64 %12121, %12099
  %12123 = getelementptr inbounds i8, i8* %172, i64 %12122
  %12124 = bitcast i8* %12123 to <16 x i8>*
  %12125 = load <16 x i8>, <16 x i8>* %12124, align 4, !tbaa !397
  %12126 = zext <16 x i8> %12125 to <16 x i16>
  %12127 = sub nsw <16 x i16> %12126, %10776
  %12128 = add nsw i64 %12121, %12100
  %12129 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12128
  %12130 = bitcast i16* %12129 to <16 x i16>*
  store <16 x i16> %12127, <16 x i16>* %12130, align 8, !tbaa !399
  %indvars.iv.next4353.2 = shl i64 %indvars.iv4352, 4
  %12131 = or i64 %indvars.iv.next4353.2, 48
  %12132 = add nsw i64 %12131, %12099
  %12133 = getelementptr inbounds i8, i8* %172, i64 %12132
  %12134 = bitcast i8* %12133 to <16 x i8>*
  %12135 = load <16 x i8>, <16 x i8>* %12134, align 4, !tbaa !397
  %12136 = zext <16 x i8> %12135 to <16 x i16>
  %12137 = sub nsw <16 x i16> %12136, %10776
  %12138 = add nsw i64 %12131, %12100
  %12139 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12138
  %12140 = bitcast i16* %12139 to <16 x i16>*
  store <16 x i16> %12137, <16 x i16>* %12140, align 8, !tbaa !399
  %indvars.iv.next4353.3 = add nuw nsw i64 %indvars.iv4352, 4
  %niter5973.nsub.3 = add i64 %niter5973, -4
  %niter5973.ncmp.3 = icmp eq i64 %niter5973.nsub.3, 0
  br i1 %niter5973.ncmp.3, label %"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1562.us.us"

"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1562.us.us", %"for input_wrapper.s0.c.c1562.us.us.preheader"
  %indvars.iv4352.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c1562.us.us.preheader" ], [ %indvars.iv.next4353.3, %"for input_wrapper.s0.c.c1562.us.us" ]
  br i1 %lcmp.mod5971.not, label %"end for input_wrapper.s0.c.c1563.us.us", label %"for input_wrapper.s0.c.c1562.us.us.epil"

"for input_wrapper.s0.c.c1562.us.us.epil":        ; preds = %"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1562.us.us.epil"
  %indvars.iv4352.epil = phi i64 [ %indvars.iv.next4353.epil, %"for input_wrapper.s0.c.c1562.us.us.epil" ], [ %indvars.iv4352.unr, %"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa" ]
  %epil.iter5970 = phi i64 [ %epil.iter5970.sub, %"for input_wrapper.s0.c.c1562.us.us.epil" ], [ %xtraiter5969, %"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa" ]
  %12141 = shl nuw nsw i64 %indvars.iv4352.epil, 4
  %12142 = add nsw i64 %12141, %12099
  %12143 = getelementptr inbounds i8, i8* %172, i64 %12142
  %12144 = bitcast i8* %12143 to <16 x i8>*
  %12145 = load <16 x i8>, <16 x i8>* %12144, align 4, !tbaa !397
  %12146 = zext <16 x i8> %12145 to <16 x i16>
  %12147 = sub nsw <16 x i16> %12146, %10776
  %12148 = add nsw i64 %12141, %12100
  %12149 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12148
  %12150 = bitcast i16* %12149 to <16 x i16>*
  store <16 x i16> %12147, <16 x i16>* %12150, align 8, !tbaa !399
  %indvars.iv.next4353.epil = add nuw nsw i64 %indvars.iv4352.epil, 1
  %epil.iter5970.sub = add i64 %epil.iter5970, -1
  %epil.iter5970.cmp.not = icmp eq i64 %epil.iter5970.sub, 0
  br i1 %epil.iter5970.cmp.not, label %"end for input_wrapper.s0.c.c1563.us.us", label %"for input_wrapper.s0.c.c1562.us.us.epil", !llvm.loop !492

"end for input_wrapper.s0.c.c1563.us.us":         ; preds = %"end for input_wrapper.s0.c.c1563.us.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1562.us.us.epil", %"for input_wrapper.s0.x.rebased1557.us.us"
  br label %"for input_wrapper.s0.c.c.rebased1567.us.us"

"for input_wrapper.s0.c.c.rebased1567.us.us":     ; preds = %after_bb1570.us.us, %"end for input_wrapper.s0.c.c1563.us.us"
  %indvars.iv4354 = phi i64 [ %indvars.iv.next4355, %after_bb1570.us.us ], [ 0, %"end for input_wrapper.s0.c.c1563.us.us" ]
  %12151 = add nsw i64 %indvars.iv4354, %10833
  %12152 = trunc i64 %12151 to i32
  %12153 = shl nsw i32 %12152, 4
  %12154 = add nsw i32 %12153, 16
  %.not1944.us.us = icmp sgt i32 %12154, %t44071550
  br i1 %.not1944.us.us, label %next_bb1572.us.us, label %then_bb1571.us.us

then_bb1571.us.us:                                ; preds = %"for input_wrapper.s0.c.c.rebased1567.us.us"
  %12155 = shl nsw i64 %12151, 4
  %12156 = add nsw i64 %12155, %12099
  %12157 = getelementptr inbounds i8, i8* %172, i64 %12156
  %12158 = bitcast i8* %12157 to <16 x i8>*
  %12159 = load <16 x i8>, <16 x i8>* %12158, align 4, !tbaa !397
  %12160 = zext <16 x i8> %12159 to <16 x i16>
  %12161 = sub nsw <16 x i16> %12160, %10776
  %12162 = add nsw i64 %12155, %12100
  %12163 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12162
  %12164 = bitcast i16* %12163 to <16 x i16>*
  store <16 x i16> %12161, <16 x i16>* %12164, align 8, !tbaa !399
  br label %after_bb1570.us.us

next_bb1572.us.us:                                ; preds = %"for input_wrapper.s0.c.c.rebased1567.us.us"
  %12165 = or i32 %12153, 1
  %12166 = insertelement <16 x i32> undef, i32 %12165, i32 0
  %12167 = shufflevector <16 x i32> %12166, <16 x i32> undef, <16 x i32> zeroinitializer
  %12168 = add nsw <16 x i32> %12167, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12169 = shufflevector <16 x i32> %12168, <16 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12170 = icmp sgt <8 x i32> %12169, %10779
  %12171 = shufflevector <16 x i32> %12168, <16 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12172 = icmp sgt <8 x i32> %12171, %10779
  %12173 = shufflevector <8 x i1> %12170, <8 x i1> %12172, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12174 = xor <16 x i1> %12173, <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>
  %12175 = shl nsw i64 %12151, 4
  %12176 = add nsw i64 %12175, %12099
  %12177 = getelementptr inbounds i8, i8* %172, i64 %12176
  %12178 = bitcast i8* %12177 to <16 x i8>*
  %12179 = call <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>* %12178, i32 4, <16 x i1> %12174, <16 x i8> undef), !tbaa !397
  %12180 = zext <16 x i8> %12179 to <16 x i16>
  %12181 = sub nsw <16 x i16> %12180, %10776
  %12182 = add nsw i64 %12175, %12100
  %12183 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12182
  %12184 = bitcast i16* %12183 to <16 x i16>*
  call void @llvm.masked.store.v16i16.p0v16i16(<16 x i16> %12181, <16 x i16>* %12184, i32 8, <16 x i1> %12174), !tbaa !399
  br label %after_bb1570.us.us

after_bb1570.us.us:                               ; preds = %next_bb1572.us.us, %then_bb1571.us.us
  %indvars.iv.next4355 = add nuw nsw i64 %indvars.iv4354, 1
  %.not1945.us.us = icmp eq i64 %indvars.iv.next4355, %10834
  br i1 %.not1945.us.us, label %"end for input_wrapper.s0.c.c.rebased1568.loopexit.us.us", label %"for input_wrapper.s0.c.c.rebased1567.us.us"

"end for input_wrapper.s0.c.c.rebased1568.loopexit.us.us": ; preds = %after_bb1570.us.us
  %indvars.iv.next4357 = add nuw nsw i64 %indvars.iv4356, 1
  %.not1943.us.us = icmp eq i64 %indvars.iv4356, %10832
  br i1 %.not1943.us.us, label %"end for input_wrapper.s0.x.rebased1558.loopexit.us", label %"for input_wrapper.s0.x.rebased1557.us.us"

"for input_wrapper.s0.x.rebased1557.us3322.us":   ; preds = %"for input_wrapper.s0.x.rebased1557.preheader.split.us3338", %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us"
  %indvars.iv4349 = phi i64 [ %indvars.iv.next4350, %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us" ], [ 0, %"for input_wrapper.s0.x.rebased1557.preheader.split.us3338" ]
  %12185 = trunc i64 %indvars.iv4349 to i32
  %reass.add2750.us3324.us = add i32 %t44091555.us, %12185
  %reass.mul2751.us3325.us = mul i32 %reass.add2750.us3324.us, %10773
  %12186 = add nsw i64 %indvars.iv4349, %10830
  %12187 = mul nsw i64 %12186, %10831
  %12188 = add nsw i64 %12095, %12187
  %12189 = sext i32 %reass.mul2751.us3325.us to i64
  br i1 %10884, label %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa", label %"for input_wrapper.s0.c.c1562.us3327.us"

"for input_wrapper.s0.c.c1562.us3327.us":         ; preds = %"for input_wrapper.s0.x.rebased1557.us3322.us", %"for input_wrapper.s0.c.c1562.us3327.us"
  %indvars.iv4347 = phi i64 [ %indvars.iv.next4348.3, %"for input_wrapper.s0.c.c1562.us3327.us" ], [ 0, %"for input_wrapper.s0.x.rebased1557.us3322.us" ]
  %niter5968 = phi i64 [ %niter5968.nsub.3, %"for input_wrapper.s0.c.c1562.us3327.us" ], [ %unroll_iter5967, %"for input_wrapper.s0.x.rebased1557.us3322.us" ]
  %12190 = shl nuw nsw i64 %indvars.iv4347, 4
  %12191 = add nsw i64 %12190, %12188
  %12192 = getelementptr inbounds i8, i8* %172, i64 %12191
  %12193 = bitcast i8* %12192 to <16 x i8>*
  %12194 = load <16 x i8>, <16 x i8>* %12193, align 4, !tbaa !397
  %12195 = zext <16 x i8> %12194 to <16 x i16>
  %12196 = sub nsw <16 x i16> %12195, %10776
  %12197 = add nsw i64 %12190, %12189
  %12198 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12197
  %12199 = bitcast i16* %12198 to <16 x i16>*
  store <16 x i16> %12196, <16 x i16>* %12199, align 8, !tbaa !399
  %indvars.iv.next4348 = shl i64 %indvars.iv4347, 4
  %12200 = or i64 %indvars.iv.next4348, 16
  %12201 = add nsw i64 %12200, %12188
  %12202 = getelementptr inbounds i8, i8* %172, i64 %12201
  %12203 = bitcast i8* %12202 to <16 x i8>*
  %12204 = load <16 x i8>, <16 x i8>* %12203, align 4, !tbaa !397
  %12205 = zext <16 x i8> %12204 to <16 x i16>
  %12206 = sub nsw <16 x i16> %12205, %10776
  %12207 = add nsw i64 %12200, %12189
  %12208 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12207
  %12209 = bitcast i16* %12208 to <16 x i16>*
  store <16 x i16> %12206, <16 x i16>* %12209, align 8, !tbaa !399
  %indvars.iv.next4348.1 = shl i64 %indvars.iv4347, 4
  %12210 = or i64 %indvars.iv.next4348.1, 32
  %12211 = add nsw i64 %12210, %12188
  %12212 = getelementptr inbounds i8, i8* %172, i64 %12211
  %12213 = bitcast i8* %12212 to <16 x i8>*
  %12214 = load <16 x i8>, <16 x i8>* %12213, align 4, !tbaa !397
  %12215 = zext <16 x i8> %12214 to <16 x i16>
  %12216 = sub nsw <16 x i16> %12215, %10776
  %12217 = add nsw i64 %12210, %12189
  %12218 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12217
  %12219 = bitcast i16* %12218 to <16 x i16>*
  store <16 x i16> %12216, <16 x i16>* %12219, align 8, !tbaa !399
  %indvars.iv.next4348.2 = shl i64 %indvars.iv4347, 4
  %12220 = or i64 %indvars.iv.next4348.2, 48
  %12221 = add nsw i64 %12220, %12188
  %12222 = getelementptr inbounds i8, i8* %172, i64 %12221
  %12223 = bitcast i8* %12222 to <16 x i8>*
  %12224 = load <16 x i8>, <16 x i8>* %12223, align 4, !tbaa !397
  %12225 = zext <16 x i8> %12224 to <16 x i16>
  %12226 = sub nsw <16 x i16> %12225, %10776
  %12227 = add nsw i64 %12220, %12189
  %12228 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12227
  %12229 = bitcast i16* %12228 to <16 x i16>*
  store <16 x i16> %12226, <16 x i16>* %12229, align 8, !tbaa !399
  %indvars.iv.next4348.3 = add nuw nsw i64 %indvars.iv4347, 4
  %niter5968.nsub.3 = add i64 %niter5968, -4
  %niter5968.ncmp.3 = icmp eq i64 %niter5968.nsub.3, 0
  br i1 %niter5968.ncmp.3, label %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa", label %"for input_wrapper.s0.c.c1562.us3327.us"

"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1562.us3327.us", %"for input_wrapper.s0.x.rebased1557.us3322.us"
  %indvars.iv4347.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1557.us3322.us" ], [ %indvars.iv.next4348.3, %"for input_wrapper.s0.c.c1562.us3327.us" ]
  br i1 %lcmp.mod5966.not, label %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us", label %"for input_wrapper.s0.c.c1562.us3327.us.epil"

"for input_wrapper.s0.c.c1562.us3327.us.epil":    ; preds = %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa", %"for input_wrapper.s0.c.c1562.us3327.us.epil"
  %indvars.iv4347.epil = phi i64 [ %indvars.iv.next4348.epil, %"for input_wrapper.s0.c.c1562.us3327.us.epil" ], [ %indvars.iv4347.unr, %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa" ]
  %epil.iter5965 = phi i64 [ %epil.iter5965.sub, %"for input_wrapper.s0.c.c1562.us3327.us.epil" ], [ %xtraiter5964, %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa" ]
  %12230 = shl nuw nsw i64 %indvars.iv4347.epil, 4
  %12231 = add nsw i64 %12230, %12188
  %12232 = getelementptr inbounds i8, i8* %172, i64 %12231
  %12233 = bitcast i8* %12232 to <16 x i8>*
  %12234 = load <16 x i8>, <16 x i8>* %12233, align 4, !tbaa !397
  %12235 = zext <16 x i8> %12234 to <16 x i16>
  %12236 = sub nsw <16 x i16> %12235, %10776
  %12237 = add nsw i64 %12230, %12189
  %12238 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12237
  %12239 = bitcast i16* %12238 to <16 x i16>*
  store <16 x i16> %12236, <16 x i16>* %12239, align 8, !tbaa !399
  %indvars.iv.next4348.epil = add nuw nsw i64 %indvars.iv4347.epil, 1
  %epil.iter5965.sub = add i64 %epil.iter5965, -1
  %epil.iter5965.cmp.not = icmp eq i64 %epil.iter5965.sub, 0
  br i1 %epil.iter5965.cmp.not, label %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us", label %"for input_wrapper.s0.c.c1562.us3327.us.epil", !llvm.loop !493

"end for input_wrapper.s0.c.c1563.loopexit.us3333.us": ; preds = %"for input_wrapper.s0.c.c1562.us3327.us.epil", %"end for input_wrapper.s0.c.c1563.loopexit.us3333.us.unr-lcssa"
  %indvars.iv.next4350 = add nuw nsw i64 %indvars.iv4349, 1
  %.not1943.us3331.us = icmp eq i64 %indvars.iv4349, %10832
  br i1 %.not1943.us3331.us, label %"end for input_wrapper.s0.x.rebased1558.loopexit.us", label %"for input_wrapper.s0.x.rebased1557.us3322.us"

next_bb1548:                                      ; preds = %next_bb1506
  br i1 %10721, label %next_bb1576, label %then_bb1575

then_bb1575:                                      ; preds = %next_bb1548
  br i1 %10863, label %"for input_wrapper.s0.y.rebased1580", label %"consume input_wrapper1636", !prof !387

next_bb1576:                                      ; preds = %next_bb1548
  br i1 %10722, label %next_bb1604, label %then_bb1603

"for input_wrapper.s0.y.rebased1580":             ; preds = %then_bb1575, %"end for input_wrapper.s0.x.rebased1586"
  %indvars.iv4374 = phi i64 [ %indvars.iv.next4375, %"end for input_wrapper.s0.x.rebased1586" ], [ 0, %then_bb1575 ]
  %12240 = trunc i64 %indvars.iv4374 to i32
  %t44181583 = mul i32 %10760, %12240
  %12241 = add nsw i64 %indvars.iv4374, %11837
  %12242 = mul nsw i64 %12241, %10835
  %12243 = add nsw i64 %12242, %11832
  br i1 %10769, label %"for input_wrapper.s0.x.rebased1585.preheader", label %"end for input_wrapper.s0.x.rebased1586", !prof !387

"for input_wrapper.s0.x.rebased1585.preheader":   ; preds = %"for input_wrapper.s0.y.rebased1580"
  br i1 %10783, label %"for input_wrapper.s0.x.rebased1585.us", label %"for input_wrapper.s0.x.rebased1585.preheader.split", !prof !387

"for input_wrapper.s0.x.rebased1585.us":          ; preds = %"for input_wrapper.s0.x.rebased1585.preheader", %"end for input_wrapper.s0.c.c.rebased1596.loopexit.us"
  %indvars.iv4371 = phi i64 [ %indvars.iv.next4372, %"end for input_wrapper.s0.c.c.rebased1596.loopexit.us" ], [ 0, %"for input_wrapper.s0.x.rebased1585.preheader" ]
  %12244 = trunc i64 %indvars.iv4371 to i32
  %reass.add2752.us = add i32 %t44181583, %12244
  %reass.mul2753.us = mul i32 %reass.add2752.us, %10773
  %12245 = add nsw i64 %indvars.iv4371, %10830
  %12246 = mul nsw i64 %12245, %10831
  %12247 = add nsw i64 %12243, %12246
  %12248 = sext i32 %reass.mul2753.us to i64
  br i1 %10714, label %"for input_wrapper.s0.c.c1590.us.preheader", label %"end for input_wrapper.s0.c.c1591.us", !prof !387

"for input_wrapper.s0.c.c1590.us.preheader":      ; preds = %"for input_wrapper.s0.x.rebased1585.us"
  br i1 %10887, label %"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1590.us"

"for input_wrapper.s0.c.c1590.us":                ; preds = %"for input_wrapper.s0.c.c1590.us.preheader", %"for input_wrapper.s0.c.c1590.us"
  %indvars.iv4367 = phi i64 [ %indvars.iv.next4368.3, %"for input_wrapper.s0.c.c1590.us" ], [ 0, %"for input_wrapper.s0.c.c1590.us.preheader" ]
  %niter5983 = phi i64 [ %niter5983.nsub.3, %"for input_wrapper.s0.c.c1590.us" ], [ %unroll_iter5982, %"for input_wrapper.s0.c.c1590.us.preheader" ]
  %12249 = shl nuw nsw i64 %indvars.iv4367, 3
  %12250 = add nsw i64 %12249, %12247
  %12251 = getelementptr inbounds i8, i8* %172, i64 %12250
  %12252 = bitcast i8* %12251 to <8 x i8>*
  %12253 = load <8 x i8>, <8 x i8>* %12252, align 4, !tbaa !397
  %12254 = zext <8 x i8> %12253 to <8 x i16>
  %12255 = sub nsw <8 x i16> %12254, %10782
  %12256 = add nsw i64 %12249, %12248
  %12257 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12256
  %12258 = bitcast i16* %12257 to <8 x i16>*
  store <8 x i16> %12255, <8 x i16>* %12258, align 8, !tbaa !399
  %indvars.iv.next4368 = shl i64 %indvars.iv4367, 3
  %12259 = or i64 %indvars.iv.next4368, 8
  %12260 = add nsw i64 %12259, %12247
  %12261 = getelementptr inbounds i8, i8* %172, i64 %12260
  %12262 = bitcast i8* %12261 to <8 x i8>*
  %12263 = load <8 x i8>, <8 x i8>* %12262, align 4, !tbaa !397
  %12264 = zext <8 x i8> %12263 to <8 x i16>
  %12265 = sub nsw <8 x i16> %12264, %10782
  %12266 = add nsw i64 %12259, %12248
  %12267 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12266
  %12268 = bitcast i16* %12267 to <8 x i16>*
  store <8 x i16> %12265, <8 x i16>* %12268, align 8, !tbaa !399
  %indvars.iv.next4368.1 = shl i64 %indvars.iv4367, 3
  %12269 = or i64 %indvars.iv.next4368.1, 16
  %12270 = add nsw i64 %12269, %12247
  %12271 = getelementptr inbounds i8, i8* %172, i64 %12270
  %12272 = bitcast i8* %12271 to <8 x i8>*
  %12273 = load <8 x i8>, <8 x i8>* %12272, align 4, !tbaa !397
  %12274 = zext <8 x i8> %12273 to <8 x i16>
  %12275 = sub nsw <8 x i16> %12274, %10782
  %12276 = add nsw i64 %12269, %12248
  %12277 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12276
  %12278 = bitcast i16* %12277 to <8 x i16>*
  store <8 x i16> %12275, <8 x i16>* %12278, align 8, !tbaa !399
  %indvars.iv.next4368.2 = shl i64 %indvars.iv4367, 3
  %12279 = or i64 %indvars.iv.next4368.2, 24
  %12280 = add nsw i64 %12279, %12247
  %12281 = getelementptr inbounds i8, i8* %172, i64 %12280
  %12282 = bitcast i8* %12281 to <8 x i8>*
  %12283 = load <8 x i8>, <8 x i8>* %12282, align 4, !tbaa !397
  %12284 = zext <8 x i8> %12283 to <8 x i16>
  %12285 = sub nsw <8 x i16> %12284, %10782
  %12286 = add nsw i64 %12279, %12248
  %12287 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12286
  %12288 = bitcast i16* %12287 to <8 x i16>*
  store <8 x i16> %12285, <8 x i16>* %12288, align 8, !tbaa !399
  %indvars.iv.next4368.3 = add nuw nsw i64 %indvars.iv4367, 4
  %niter5983.nsub.3 = add i64 %niter5983, -4
  %niter5983.ncmp.3 = icmp eq i64 %niter5983.nsub.3, 0
  br i1 %niter5983.ncmp.3, label %"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa", label %"for input_wrapper.s0.c.c1590.us"

"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1590.us", %"for input_wrapper.s0.c.c1590.us.preheader"
  %indvars.iv4367.unr = phi i64 [ 0, %"for input_wrapper.s0.c.c1590.us.preheader" ], [ %indvars.iv.next4368.3, %"for input_wrapper.s0.c.c1590.us" ]
  br i1 %lcmp.mod5981.not, label %"end for input_wrapper.s0.c.c1591.us", label %"for input_wrapper.s0.c.c1590.us.epil"

"for input_wrapper.s0.c.c1590.us.epil":           ; preds = %"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1590.us.epil"
  %indvars.iv4367.epil = phi i64 [ %indvars.iv.next4368.epil, %"for input_wrapper.s0.c.c1590.us.epil" ], [ %indvars.iv4367.unr, %"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa" ]
  %epil.iter5980 = phi i64 [ %epil.iter5980.sub, %"for input_wrapper.s0.c.c1590.us.epil" ], [ %xtraiter5979, %"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa" ]
  %12289 = shl nuw nsw i64 %indvars.iv4367.epil, 3
  %12290 = add nsw i64 %12289, %12247
  %12291 = getelementptr inbounds i8, i8* %172, i64 %12290
  %12292 = bitcast i8* %12291 to <8 x i8>*
  %12293 = load <8 x i8>, <8 x i8>* %12292, align 4, !tbaa !397
  %12294 = zext <8 x i8> %12293 to <8 x i16>
  %12295 = sub nsw <8 x i16> %12294, %10782
  %12296 = add nsw i64 %12289, %12248
  %12297 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12296
  %12298 = bitcast i16* %12297 to <8 x i16>*
  store <8 x i16> %12295, <8 x i16>* %12298, align 8, !tbaa !399
  %indvars.iv.next4368.epil = add nuw nsw i64 %indvars.iv4367.epil, 1
  %epil.iter5980.sub = add i64 %epil.iter5980, -1
  %epil.iter5980.cmp.not = icmp eq i64 %epil.iter5980.sub, 0
  br i1 %epil.iter5980.cmp.not, label %"end for input_wrapper.s0.c.c1591.us", label %"for input_wrapper.s0.c.c1590.us.epil", !llvm.loop !494

"end for input_wrapper.s0.c.c1591.us":            ; preds = %"end for input_wrapper.s0.c.c1591.us.loopexit.unr-lcssa", %"for input_wrapper.s0.c.c1590.us.epil", %"for input_wrapper.s0.x.rebased1585.us"
  br label %"for input_wrapper.s0.c.c.rebased1595.us"

"for input_wrapper.s0.c.c.rebased1595.us":        ; preds = %"end for input_wrapper.s0.c.c1591.us", %after_bb1598.us
  %indvars.iv4369 = phi i64 [ 0, %"end for input_wrapper.s0.c.c1591.us" ], [ %indvars.iv.next4370, %after_bb1598.us ]
  %12299 = add nsw i64 %indvars.iv4369, %10837
  %12300 = trunc i64 %12299 to i32
  %12301 = shl nsw i32 %12300, 3
  %12302 = add nsw i32 %12301, 8
  %.not1939.us = icmp sgt i32 %12302, %t44071550
  br i1 %.not1939.us, label %next_bb1600.us, label %then_bb1599.us

then_bb1599.us:                                   ; preds = %"for input_wrapper.s0.c.c.rebased1595.us"
  %12303 = shl nsw i64 %12299, 3
  %12304 = add nsw i64 %12303, %12247
  %12305 = getelementptr inbounds i8, i8* %172, i64 %12304
  %12306 = bitcast i8* %12305 to <8 x i8>*
  %12307 = load <8 x i8>, <8 x i8>* %12306, align 4, !tbaa !397
  %12308 = zext <8 x i8> %12307 to <8 x i16>
  %12309 = sub nsw <8 x i16> %12308, %10782
  %12310 = add nsw i64 %12303, %12248
  %12311 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12310
  %12312 = bitcast i16* %12311 to <8 x i16>*
  store <8 x i16> %12309, <8 x i16>* %12312, align 8, !tbaa !399
  br label %after_bb1598.us

next_bb1600.us:                                   ; preds = %"for input_wrapper.s0.c.c.rebased1595.us"
  %12313 = or i32 %12301, 1
  %12314 = insertelement <8 x i32> undef, i32 %12313, i32 0
  %12315 = shufflevector <8 x i32> %12314, <8 x i32> undef, <8 x i32> zeroinitializer
  %12316 = add nsw <8 x i32> %12315, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12317 = icmp sle <8 x i32> %12316, %10785
  %12318 = shl nsw i64 %12299, 3
  %12319 = add nsw i64 %12318, %12247
  %12320 = getelementptr inbounds i8, i8* %172, i64 %12319
  %12321 = bitcast i8* %12320 to <8 x i8>*
  %12322 = call <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>* %12321, i32 4, <8 x i1> %12317, <8 x i8> undef), !tbaa !397
  %12323 = zext <8 x i8> %12322 to <8 x i16>
  %12324 = sub nsw <8 x i16> %12323, %10782
  %12325 = add nsw i64 %12318, %12248
  %12326 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12325
  %12327 = bitcast i16* %12326 to <8 x i16>*
  call void @llvm.masked.store.v8i16.p0v8i16(<8 x i16> %12324, <8 x i16>* %12327, i32 8, <8 x i1> %12317), !tbaa !399
  br label %after_bb1598.us

after_bb1598.us:                                  ; preds = %next_bb1600.us, %then_bb1599.us
  %indvars.iv.next4370 = add nuw nsw i64 %indvars.iv4369, 1
  %.not1940.us = icmp eq i64 %indvars.iv.next4370, %10838
  br i1 %.not1940.us, label %"end for input_wrapper.s0.c.c.rebased1596.loopexit.us", label %"for input_wrapper.s0.c.c.rebased1595.us"

"end for input_wrapper.s0.c.c.rebased1596.loopexit.us": ; preds = %after_bb1598.us
  %indvars.iv.next4372 = add nuw nsw i64 %indvars.iv4371, 1
  %.not1938.us = icmp eq i64 %indvars.iv4371, %10832
  br i1 %.not1938.us, label %"end for input_wrapper.s0.x.rebased1586", label %"for input_wrapper.s0.x.rebased1585.us"

"for input_wrapper.s0.x.rebased1585.preheader.split": ; preds = %"for input_wrapper.s0.x.rebased1585.preheader"
  br i1 %10714, label %"for input_wrapper.s0.x.rebased1585.us3341", label %"end for input_wrapper.s0.x.rebased1586", !prof !387

"for input_wrapper.s0.x.rebased1585.us3341":      ; preds = %"for input_wrapper.s0.x.rebased1585.preheader.split", %"end for input_wrapper.s0.c.c1591.loopexit.us3352"
  %indvars.iv4364 = phi i64 [ %indvars.iv.next4365, %"end for input_wrapper.s0.c.c1591.loopexit.us3352" ], [ 0, %"for input_wrapper.s0.x.rebased1585.preheader.split" ]
  %12328 = trunc i64 %indvars.iv4364 to i32
  %reass.add2752.us3343 = add i32 %t44181583, %12328
  %reass.mul2753.us3344 = mul i32 %reass.add2752.us3343, %10773
  %12329 = add nsw i64 %indvars.iv4364, %10830
  %12330 = mul nsw i64 %12329, %10831
  %12331 = add nsw i64 %12243, %12330
  %12332 = sext i32 %reass.mul2753.us3344 to i64
  br i1 %10886, label %"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa", label %"for input_wrapper.s0.c.c1590.us3346"

"for input_wrapper.s0.c.c1590.us3346":            ; preds = %"for input_wrapper.s0.x.rebased1585.us3341", %"for input_wrapper.s0.c.c1590.us3346"
  %indvars.iv4362 = phi i64 [ %indvars.iv.next4363.3, %"for input_wrapper.s0.c.c1590.us3346" ], [ 0, %"for input_wrapper.s0.x.rebased1585.us3341" ]
  %niter5978 = phi i64 [ %niter5978.nsub.3, %"for input_wrapper.s0.c.c1590.us3346" ], [ %unroll_iter5977, %"for input_wrapper.s0.x.rebased1585.us3341" ]
  %12333 = shl nuw nsw i64 %indvars.iv4362, 3
  %12334 = add nsw i64 %12333, %12331
  %12335 = getelementptr inbounds i8, i8* %172, i64 %12334
  %12336 = bitcast i8* %12335 to <8 x i8>*
  %12337 = load <8 x i8>, <8 x i8>* %12336, align 4, !tbaa !397
  %12338 = zext <8 x i8> %12337 to <8 x i16>
  %12339 = sub nsw <8 x i16> %12338, %10782
  %12340 = add nsw i64 %12333, %12332
  %12341 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12340
  %12342 = bitcast i16* %12341 to <8 x i16>*
  store <8 x i16> %12339, <8 x i16>* %12342, align 8, !tbaa !399
  %indvars.iv.next4363 = shl i64 %indvars.iv4362, 3
  %12343 = or i64 %indvars.iv.next4363, 8
  %12344 = add nsw i64 %12343, %12331
  %12345 = getelementptr inbounds i8, i8* %172, i64 %12344
  %12346 = bitcast i8* %12345 to <8 x i8>*
  %12347 = load <8 x i8>, <8 x i8>* %12346, align 4, !tbaa !397
  %12348 = zext <8 x i8> %12347 to <8 x i16>
  %12349 = sub nsw <8 x i16> %12348, %10782
  %12350 = add nsw i64 %12343, %12332
  %12351 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12350
  %12352 = bitcast i16* %12351 to <8 x i16>*
  store <8 x i16> %12349, <8 x i16>* %12352, align 8, !tbaa !399
  %indvars.iv.next4363.1 = shl i64 %indvars.iv4362, 3
  %12353 = or i64 %indvars.iv.next4363.1, 16
  %12354 = add nsw i64 %12353, %12331
  %12355 = getelementptr inbounds i8, i8* %172, i64 %12354
  %12356 = bitcast i8* %12355 to <8 x i8>*
  %12357 = load <8 x i8>, <8 x i8>* %12356, align 4, !tbaa !397
  %12358 = zext <8 x i8> %12357 to <8 x i16>
  %12359 = sub nsw <8 x i16> %12358, %10782
  %12360 = add nsw i64 %12353, %12332
  %12361 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12360
  %12362 = bitcast i16* %12361 to <8 x i16>*
  store <8 x i16> %12359, <8 x i16>* %12362, align 8, !tbaa !399
  %indvars.iv.next4363.2 = shl i64 %indvars.iv4362, 3
  %12363 = or i64 %indvars.iv.next4363.2, 24
  %12364 = add nsw i64 %12363, %12331
  %12365 = getelementptr inbounds i8, i8* %172, i64 %12364
  %12366 = bitcast i8* %12365 to <8 x i8>*
  %12367 = load <8 x i8>, <8 x i8>* %12366, align 4, !tbaa !397
  %12368 = zext <8 x i8> %12367 to <8 x i16>
  %12369 = sub nsw <8 x i16> %12368, %10782
  %12370 = add nsw i64 %12363, %12332
  %12371 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12370
  %12372 = bitcast i16* %12371 to <8 x i16>*
  store <8 x i16> %12369, <8 x i16>* %12372, align 8, !tbaa !399
  %indvars.iv.next4363.3 = add nuw nsw i64 %indvars.iv4362, 4
  %niter5978.nsub.3 = add i64 %niter5978, -4
  %niter5978.ncmp.3 = icmp eq i64 %niter5978.nsub.3, 0
  br i1 %niter5978.ncmp.3, label %"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa", label %"for input_wrapper.s0.c.c1590.us3346"

"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1590.us3346", %"for input_wrapper.s0.x.rebased1585.us3341"
  %indvars.iv4362.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1585.us3341" ], [ %indvars.iv.next4363.3, %"for input_wrapper.s0.c.c1590.us3346" ]
  br i1 %lcmp.mod5976.not, label %"end for input_wrapper.s0.c.c1591.loopexit.us3352", label %"for input_wrapper.s0.c.c1590.us3346.epil"

"for input_wrapper.s0.c.c1590.us3346.epil":       ; preds = %"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa", %"for input_wrapper.s0.c.c1590.us3346.epil"
  %indvars.iv4362.epil = phi i64 [ %indvars.iv.next4363.epil, %"for input_wrapper.s0.c.c1590.us3346.epil" ], [ %indvars.iv4362.unr, %"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa" ]
  %epil.iter5975 = phi i64 [ %epil.iter5975.sub, %"for input_wrapper.s0.c.c1590.us3346.epil" ], [ %xtraiter5974, %"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa" ]
  %12373 = shl nuw nsw i64 %indvars.iv4362.epil, 3
  %12374 = add nsw i64 %12373, %12331
  %12375 = getelementptr inbounds i8, i8* %172, i64 %12374
  %12376 = bitcast i8* %12375 to <8 x i8>*
  %12377 = load <8 x i8>, <8 x i8>* %12376, align 4, !tbaa !397
  %12378 = zext <8 x i8> %12377 to <8 x i16>
  %12379 = sub nsw <8 x i16> %12378, %10782
  %12380 = add nsw i64 %12373, %12332
  %12381 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12380
  %12382 = bitcast i16* %12381 to <8 x i16>*
  store <8 x i16> %12379, <8 x i16>* %12382, align 8, !tbaa !399
  %indvars.iv.next4363.epil = add nuw nsw i64 %indvars.iv4362.epil, 1
  %epil.iter5975.sub = add i64 %epil.iter5975, -1
  %epil.iter5975.cmp.not = icmp eq i64 %epil.iter5975.sub, 0
  br i1 %epil.iter5975.cmp.not, label %"end for input_wrapper.s0.c.c1591.loopexit.us3352", label %"for input_wrapper.s0.c.c1590.us3346.epil", !llvm.loop !495

"end for input_wrapper.s0.c.c1591.loopexit.us3352": ; preds = %"for input_wrapper.s0.c.c1590.us3346.epil", %"end for input_wrapper.s0.c.c1591.loopexit.us3352.unr-lcssa"
  %indvars.iv.next4365 = add nuw nsw i64 %indvars.iv4364, 1
  %.not1938.us3350 = icmp eq i64 %indvars.iv4364, %10832
  br i1 %.not1938.us3350, label %"end for input_wrapper.s0.x.rebased1586", label %"for input_wrapper.s0.x.rebased1585.us3341"

"end for input_wrapper.s0.x.rebased1586":         ; preds = %"end for input_wrapper.s0.c.c1591.loopexit.us3352", %"end for input_wrapper.s0.c.c.rebased1596.loopexit.us", %"for input_wrapper.s0.x.rebased1585.preheader.split", %"for input_wrapper.s0.y.rebased1580"
  %indvars.iv.next4375 = add nuw nsw i64 %indvars.iv4374, 1
  %.not1937 = icmp eq i64 %indvars.iv4374, %10868
  br i1 %.not1937, label %"consume input_wrapper1636", label %"for input_wrapper.s0.y.rebased1580"

then_bb1603:                                      ; preds = %next_bb1576
  br i1 %10863, label %"for input_wrapper.s0.y.rebased1607", label %"consume input_wrapper1636", !prof !387

next_bb1604:                                      ; preds = %next_bb1576
  br i1 %10863, label %"for input_wrapper.s0.y.rebased1623", label %"consume input_wrapper1636", !prof !387

"for input_wrapper.s0.y.rebased1607":             ; preds = %then_bb1603, %"end for input_wrapper.s0.x.rebased1613"
  %indvars.iv4382 = phi i64 [ %indvars.iv.next4383, %"end for input_wrapper.s0.x.rebased1613" ], [ 0, %then_bb1603 ]
  %12383 = trunc i64 %indvars.iv4382 to i32
  %t44261610 = mul i32 %10760, %12383
  %12384 = add nsw i64 %indvars.iv4382, %11837
  %12385 = mul nsw i64 %12384, %10835
  %12386 = add nsw i64 %12385, %11832
  br i1 %brmerge5075.demorgan, label %"for input_wrapper.s0.x.rebased1612.us", label %"end for input_wrapper.s0.x.rebased1613", !prof !407

"for input_wrapper.s0.x.rebased1612.us":          ; preds = %"for input_wrapper.s0.y.rebased1607", %"end for input_wrapper.s0.c.c1618.loopexit.us"
  %indvars.iv4379 = phi i64 [ %indvars.iv.next4380, %"end for input_wrapper.s0.c.c1618.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased1607" ]
  %12387 = trunc i64 %indvars.iv4379 to i32
  %reass.add2754.us = add i32 %t44261610, %12387
  %reass.mul2755.us = mul i32 %reass.add2754.us, %10773
  %12388 = add nsw i64 %indvars.iv4379, %10830
  %12389 = mul nsw i64 %12388, %10831
  %12390 = add nsw i64 %12386, %12389
  %12391 = sext i32 %reass.mul2755.us to i64
  br i1 %10888, label %"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c1617.us"

"for input_wrapper.s0.c.c1617.us":                ; preds = %"for input_wrapper.s0.x.rebased1612.us", %"for input_wrapper.s0.c.c1617.us"
  %indvars.iv4377 = phi i64 [ %indvars.iv.next4378.3, %"for input_wrapper.s0.c.c1617.us" ], [ 0, %"for input_wrapper.s0.x.rebased1612.us" ]
  %niter5988 = phi i64 [ %niter5988.nsub.3, %"for input_wrapper.s0.c.c1617.us" ], [ %unroll_iter5987, %"for input_wrapper.s0.x.rebased1612.us" ]
  %12392 = shl nuw nsw i64 %indvars.iv4377, 2
  %12393 = add nsw i64 %12392, %12390
  %12394 = getelementptr inbounds i8, i8* %172, i64 %12393
  %12395 = bitcast i8* %12394 to <4 x i8>*
  %12396 = load <4 x i8>, <4 x i8>* %12395, align 4, !tbaa !397
  %12397 = zext <4 x i8> %12396 to <4 x i16>
  %12398 = sub nsw <4 x i16> %12397, %10788
  %12399 = add nsw i64 %12392, %12391
  %12400 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12399
  %12401 = bitcast i16* %12400 to <4 x i16>*
  store <4 x i16> %12398, <4 x i16>* %12401, align 8, !tbaa !399
  %indvars.iv.next4378 = shl i64 %indvars.iv4377, 2
  %12402 = or i64 %indvars.iv.next4378, 4
  %12403 = add nsw i64 %12402, %12390
  %12404 = getelementptr inbounds i8, i8* %172, i64 %12403
  %12405 = bitcast i8* %12404 to <4 x i8>*
  %12406 = load <4 x i8>, <4 x i8>* %12405, align 4, !tbaa !397
  %12407 = zext <4 x i8> %12406 to <4 x i16>
  %12408 = sub nsw <4 x i16> %12407, %10788
  %12409 = add nsw i64 %12402, %12391
  %12410 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12409
  %12411 = bitcast i16* %12410 to <4 x i16>*
  store <4 x i16> %12408, <4 x i16>* %12411, align 8, !tbaa !399
  %indvars.iv.next4378.1 = shl i64 %indvars.iv4377, 2
  %12412 = or i64 %indvars.iv.next4378.1, 8
  %12413 = add nsw i64 %12412, %12390
  %12414 = getelementptr inbounds i8, i8* %172, i64 %12413
  %12415 = bitcast i8* %12414 to <4 x i8>*
  %12416 = load <4 x i8>, <4 x i8>* %12415, align 4, !tbaa !397
  %12417 = zext <4 x i8> %12416 to <4 x i16>
  %12418 = sub nsw <4 x i16> %12417, %10788
  %12419 = add nsw i64 %12412, %12391
  %12420 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12419
  %12421 = bitcast i16* %12420 to <4 x i16>*
  store <4 x i16> %12418, <4 x i16>* %12421, align 8, !tbaa !399
  %indvars.iv.next4378.2 = shl i64 %indvars.iv4377, 2
  %12422 = or i64 %indvars.iv.next4378.2, 12
  %12423 = add nsw i64 %12422, %12390
  %12424 = getelementptr inbounds i8, i8* %172, i64 %12423
  %12425 = bitcast i8* %12424 to <4 x i8>*
  %12426 = load <4 x i8>, <4 x i8>* %12425, align 4, !tbaa !397
  %12427 = zext <4 x i8> %12426 to <4 x i16>
  %12428 = sub nsw <4 x i16> %12427, %10788
  %12429 = add nsw i64 %12422, %12391
  %12430 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12429
  %12431 = bitcast i16* %12430 to <4 x i16>*
  store <4 x i16> %12428, <4 x i16>* %12431, align 8, !tbaa !399
  %indvars.iv.next4378.3 = add nuw nsw i64 %indvars.iv4377, 4
  %niter5988.nsub.3 = add i64 %niter5988, -4
  %niter5988.ncmp.3 = icmp eq i64 %niter5988.nsub.3, 0
  br i1 %niter5988.ncmp.3, label %"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa", label %"for input_wrapper.s0.c.c1617.us"

"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa": ; preds = %"for input_wrapper.s0.c.c1617.us", %"for input_wrapper.s0.x.rebased1612.us"
  %indvars.iv4377.unr = phi i64 [ 0, %"for input_wrapper.s0.x.rebased1612.us" ], [ %indvars.iv.next4378.3, %"for input_wrapper.s0.c.c1617.us" ]
  br i1 %lcmp.mod5986.not, label %"end for input_wrapper.s0.c.c1618.loopexit.us", label %"for input_wrapper.s0.c.c1617.us.epil"

"for input_wrapper.s0.c.c1617.us.epil":           ; preds = %"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa", %"for input_wrapper.s0.c.c1617.us.epil"
  %indvars.iv4377.epil = phi i64 [ %indvars.iv.next4378.epil, %"for input_wrapper.s0.c.c1617.us.epil" ], [ %indvars.iv4377.unr, %"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa" ]
  %epil.iter5985 = phi i64 [ %epil.iter5985.sub, %"for input_wrapper.s0.c.c1617.us.epil" ], [ %xtraiter5984, %"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa" ]
  %12432 = shl nuw nsw i64 %indvars.iv4377.epil, 2
  %12433 = add nsw i64 %12432, %12390
  %12434 = getelementptr inbounds i8, i8* %172, i64 %12433
  %12435 = bitcast i8* %12434 to <4 x i8>*
  %12436 = load <4 x i8>, <4 x i8>* %12435, align 4, !tbaa !397
  %12437 = zext <4 x i8> %12436 to <4 x i16>
  %12438 = sub nsw <4 x i16> %12437, %10788
  %12439 = add nsw i64 %12432, %12391
  %12440 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12439
  %12441 = bitcast i16* %12440 to <4 x i16>*
  store <4 x i16> %12438, <4 x i16>* %12441, align 8, !tbaa !399
  %indvars.iv.next4378.epil = add nuw nsw i64 %indvars.iv4377.epil, 1
  %epil.iter5985.sub = add i64 %epil.iter5985, -1
  %epil.iter5985.cmp.not = icmp eq i64 %epil.iter5985.sub, 0
  br i1 %epil.iter5985.cmp.not, label %"end for input_wrapper.s0.c.c1618.loopexit.us", label %"for input_wrapper.s0.c.c1617.us.epil", !llvm.loop !496

"end for input_wrapper.s0.c.c1618.loopexit.us":   ; preds = %"for input_wrapper.s0.c.c1617.us.epil", %"end for input_wrapper.s0.c.c1618.loopexit.us.unr-lcssa"
  %indvars.iv.next4380 = add nuw nsw i64 %indvars.iv4379, 1
  %.not1935.us = icmp eq i64 %indvars.iv4379, %10832
  br i1 %.not1935.us, label %"end for input_wrapper.s0.x.rebased1613", label %"for input_wrapper.s0.x.rebased1612.us"

"end for input_wrapper.s0.x.rebased1613":         ; preds = %"end for input_wrapper.s0.c.c1618.loopexit.us", %"for input_wrapper.s0.y.rebased1607"
  %indvars.iv.next4383 = add nuw nsw i64 %indvars.iv4382, 1
  %.not1934 = icmp eq i64 %indvars.iv4382, %10869
  br i1 %.not1934, label %"consume input_wrapper1636", label %"for input_wrapper.s0.y.rebased1607"

"for input_wrapper.s0.y.rebased1623":             ; preds = %next_bb1604, %"end for input_wrapper.s0.x.rebased1629"
  %indvars.iv4390 = phi i64 [ %indvars.iv.next4391, %"end for input_wrapper.s0.x.rebased1629" ], [ 0, %next_bb1604 ]
  %12442 = trunc i64 %indvars.iv4390 to i32
  %t44331626 = mul i32 %10760, %12442
  %12443 = add nsw i64 %indvars.iv4390, %11837
  %12444 = mul nsw i64 %12443, %10835
  %12445 = add nsw i64 %12444, %11832
  br i1 %brmerge5078.demorgan, label %iter.check5442, label %"end for input_wrapper.s0.x.rebased1629", !prof !407

iter.check5442:                                   ; preds = %"for input_wrapper.s0.y.rebased1623", %"end for input_wrapper.s0.c1634.loopexit.us"
  %indvars.iv4387 = phi i64 [ %indvars.iv.next4388, %"end for input_wrapper.s0.c1634.loopexit.us" ], [ 0, %"for input_wrapper.s0.y.rebased1623" ]
  %12446 = trunc i64 %indvars.iv4387 to i32
  %reass.add2756.us = add i32 %t44331626, %12446
  %reass.mul2757.us = mul i32 %reass.add2756.us, %10773
  %12447 = add nsw i64 %indvars.iv4387, %10830
  %12448 = mul nsw i64 %12447, %10831
  %12449 = add nsw i64 %12445, %12448
  %12450 = sext i32 %reass.mul2757.us to i64
  br i1 %min.iters.check5440, label %"for input_wrapper.s0.c1633.us.preheader", label %vector.main.loop.iter.check5444

vector.main.loop.iter.check5444:                  ; preds = %iter.check5442
  br i1 %min.iters.check5443, label %vec.epilog.ph5467, label %vector.ph5445

vector.ph5445:                                    ; preds = %vector.main.loop.iter.check5444
  br i1 %10889, label %middle.block5437.unr-lcssa, label %vector.body5439

vector.body5439:                                  ; preds = %vector.ph5445, %vector.body5439
  %index5448 = phi i64 [ %index.next5449.1, %vector.body5439 ], [ 0, %vector.ph5445 ]
  %niter5992 = phi i64 [ %niter5992.nsub.1, %vector.body5439 ], [ %unroll_iter5991, %vector.ph5445 ]
  %12451 = add nsw i64 %index5448, %12449
  %12452 = getelementptr inbounds i8, i8* %172, i64 %12451
  %12453 = bitcast i8* %12452 to <16 x i8>*
  %wide.load5451 = load <16 x i8>, <16 x i8>* %12453, align 1, !tbaa !397
  %12454 = getelementptr inbounds i8, i8* %12452, i64 16
  %12455 = bitcast i8* %12454 to <16 x i8>*
  %wide.load5452 = load <16 x i8>, <16 x i8>* %12455, align 1, !tbaa !397
  %12456 = getelementptr inbounds i8, i8* %12452, i64 32
  %12457 = bitcast i8* %12456 to <16 x i8>*
  %wide.load5453 = load <16 x i8>, <16 x i8>* %12457, align 1, !tbaa !397
  %12458 = getelementptr inbounds i8, i8* %12452, i64 48
  %12459 = bitcast i8* %12458 to <16 x i8>*
  %wide.load5454 = load <16 x i8>, <16 x i8>* %12459, align 1, !tbaa !397
  %12460 = zext <16 x i8> %wide.load5451 to <16 x i16>
  %12461 = zext <16 x i8> %wide.load5452 to <16 x i16>
  %12462 = zext <16 x i8> %wide.load5453 to <16 x i16>
  %12463 = zext <16 x i8> %wide.load5454 to <16 x i16>
  %12464 = sub nsw <16 x i16> %12460, %broadcast.splat5456
  %12465 = sub nsw <16 x i16> %12461, %broadcast.splat5458
  %12466 = sub nsw <16 x i16> %12462, %broadcast.splat5460
  %12467 = sub nsw <16 x i16> %12463, %broadcast.splat5462
  %12468 = add nsw i64 %index5448, %12450
  %12469 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12468
  %12470 = bitcast i16* %12469 to <16 x i16>*
  store <16 x i16> %12464, <16 x i16>* %12470, align 2, !tbaa !399
  %12471 = getelementptr inbounds i16, i16* %12469, i64 16
  %12472 = bitcast i16* %12471 to <16 x i16>*
  store <16 x i16> %12465, <16 x i16>* %12472, align 2, !tbaa !399
  %12473 = getelementptr inbounds i16, i16* %12469, i64 32
  %12474 = bitcast i16* %12473 to <16 x i16>*
  store <16 x i16> %12466, <16 x i16>* %12474, align 2, !tbaa !399
  %12475 = getelementptr inbounds i16, i16* %12469, i64 48
  %12476 = bitcast i16* %12475 to <16 x i16>*
  store <16 x i16> %12467, <16 x i16>* %12476, align 2, !tbaa !399
  %index.next5449 = or i64 %index5448, 64
  %12477 = add nsw i64 %index.next5449, %12449
  %12478 = getelementptr inbounds i8, i8* %172, i64 %12477
  %12479 = bitcast i8* %12478 to <16 x i8>*
  %wide.load5451.1 = load <16 x i8>, <16 x i8>* %12479, align 1, !tbaa !397
  %12480 = getelementptr inbounds i8, i8* %12478, i64 16
  %12481 = bitcast i8* %12480 to <16 x i8>*
  %wide.load5452.1 = load <16 x i8>, <16 x i8>* %12481, align 1, !tbaa !397
  %12482 = getelementptr inbounds i8, i8* %12478, i64 32
  %12483 = bitcast i8* %12482 to <16 x i8>*
  %wide.load5453.1 = load <16 x i8>, <16 x i8>* %12483, align 1, !tbaa !397
  %12484 = getelementptr inbounds i8, i8* %12478, i64 48
  %12485 = bitcast i8* %12484 to <16 x i8>*
  %wide.load5454.1 = load <16 x i8>, <16 x i8>* %12485, align 1, !tbaa !397
  %12486 = zext <16 x i8> %wide.load5451.1 to <16 x i16>
  %12487 = zext <16 x i8> %wide.load5452.1 to <16 x i16>
  %12488 = zext <16 x i8> %wide.load5453.1 to <16 x i16>
  %12489 = zext <16 x i8> %wide.load5454.1 to <16 x i16>
  %12490 = sub nsw <16 x i16> %12486, %broadcast.splat5456
  %12491 = sub nsw <16 x i16> %12487, %broadcast.splat5458
  %12492 = sub nsw <16 x i16> %12488, %broadcast.splat5460
  %12493 = sub nsw <16 x i16> %12489, %broadcast.splat5462
  %12494 = add nsw i64 %index.next5449, %12450
  %12495 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12494
  %12496 = bitcast i16* %12495 to <16 x i16>*
  store <16 x i16> %12490, <16 x i16>* %12496, align 2, !tbaa !399
  %12497 = getelementptr inbounds i16, i16* %12495, i64 16
  %12498 = bitcast i16* %12497 to <16 x i16>*
  store <16 x i16> %12491, <16 x i16>* %12498, align 2, !tbaa !399
  %12499 = getelementptr inbounds i16, i16* %12495, i64 32
  %12500 = bitcast i16* %12499 to <16 x i16>*
  store <16 x i16> %12492, <16 x i16>* %12500, align 2, !tbaa !399
  %12501 = getelementptr inbounds i16, i16* %12495, i64 48
  %12502 = bitcast i16* %12501 to <16 x i16>*
  store <16 x i16> %12493, <16 x i16>* %12502, align 2, !tbaa !399
  %index.next5449.1 = add i64 %index5448, 128
  %niter5992.nsub.1 = add i64 %niter5992, -2
  %niter5992.ncmp.1 = icmp eq i64 %niter5992.nsub.1, 0
  br i1 %niter5992.ncmp.1, label %middle.block5437.unr-lcssa, label %vector.body5439, !llvm.loop !497

middle.block5437.unr-lcssa:                       ; preds = %vector.body5439, %vector.ph5445
  %index5448.unr = phi i64 [ 0, %vector.ph5445 ], [ %index.next5449.1, %vector.body5439 ]
  br i1 %lcmp.mod5990.not, label %middle.block5437, label %vector.body5439.epil

vector.body5439.epil:                             ; preds = %middle.block5437.unr-lcssa
  %12503 = add nsw i64 %index5448.unr, %12449
  %12504 = getelementptr inbounds i8, i8* %172, i64 %12503
  %12505 = bitcast i8* %12504 to <16 x i8>*
  %wide.load5451.epil = load <16 x i8>, <16 x i8>* %12505, align 1, !tbaa !397
  %12506 = getelementptr inbounds i8, i8* %12504, i64 16
  %12507 = bitcast i8* %12506 to <16 x i8>*
  %wide.load5452.epil = load <16 x i8>, <16 x i8>* %12507, align 1, !tbaa !397
  %12508 = getelementptr inbounds i8, i8* %12504, i64 32
  %12509 = bitcast i8* %12508 to <16 x i8>*
  %wide.load5453.epil = load <16 x i8>, <16 x i8>* %12509, align 1, !tbaa !397
  %12510 = getelementptr inbounds i8, i8* %12504, i64 48
  %12511 = bitcast i8* %12510 to <16 x i8>*
  %wide.load5454.epil = load <16 x i8>, <16 x i8>* %12511, align 1, !tbaa !397
  %12512 = zext <16 x i8> %wide.load5451.epil to <16 x i16>
  %12513 = zext <16 x i8> %wide.load5452.epil to <16 x i16>
  %12514 = zext <16 x i8> %wide.load5453.epil to <16 x i16>
  %12515 = zext <16 x i8> %wide.load5454.epil to <16 x i16>
  %12516 = sub nsw <16 x i16> %12512, %broadcast.splat5456
  %12517 = sub nsw <16 x i16> %12513, %broadcast.splat5458
  %12518 = sub nsw <16 x i16> %12514, %broadcast.splat5460
  %12519 = sub nsw <16 x i16> %12515, %broadcast.splat5462
  %12520 = add nsw i64 %index5448.unr, %12450
  %12521 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12520
  %12522 = bitcast i16* %12521 to <16 x i16>*
  store <16 x i16> %12516, <16 x i16>* %12522, align 2, !tbaa !399
  %12523 = getelementptr inbounds i16, i16* %12521, i64 16
  %12524 = bitcast i16* %12523 to <16 x i16>*
  store <16 x i16> %12517, <16 x i16>* %12524, align 2, !tbaa !399
  %12525 = getelementptr inbounds i16, i16* %12521, i64 32
  %12526 = bitcast i16* %12525 to <16 x i16>*
  store <16 x i16> %12518, <16 x i16>* %12526, align 2, !tbaa !399
  %12527 = getelementptr inbounds i16, i16* %12521, i64 48
  %12528 = bitcast i16* %12527 to <16 x i16>*
  store <16 x i16> %12519, <16 x i16>* %12528, align 2, !tbaa !399
  br label %middle.block5437

middle.block5437:                                 ; preds = %middle.block5437.unr-lcssa, %vector.body5439.epil
  br i1 %cmp.n5450, label %"end for input_wrapper.s0.c1634.loopexit.us", label %vec.epilog.iter.check5466

vec.epilog.iter.check5466:                        ; preds = %middle.block5437
  br i1 %min.epilog.iters.check5469, label %"for input_wrapper.s0.c1633.us.preheader", label %vec.epilog.ph5467

vec.epilog.ph5467:                                ; preds = %vector.main.loop.iter.check5444, %vec.epilog.iter.check5466
  %vec.epilog.resume.val5470 = phi i64 [ %n.vec5447, %vec.epilog.iter.check5466 ], [ 0, %vector.main.loop.iter.check5444 ]
  br label %vec.epilog.vector.body5465

vec.epilog.vector.body5465:                       ; preds = %vec.epilog.vector.body5465, %vec.epilog.ph5467
  %index5473 = phi i64 [ %vec.epilog.resume.val5470, %vec.epilog.ph5467 ], [ %index.next5474, %vec.epilog.vector.body5465 ]
  %12529 = add nsw i64 %index5473, %12449
  %12530 = getelementptr inbounds i8, i8* %172, i64 %12529
  %12531 = bitcast i8* %12530 to <8 x i8>*
  %wide.load5477 = load <8 x i8>, <8 x i8>* %12531, align 1, !tbaa !397
  %12532 = zext <8 x i8> %wide.load5477 to <8 x i16>
  %12533 = sub nsw <8 x i16> %12532, %broadcast.splat5479
  %12534 = add nsw i64 %index5473, %12450
  %12535 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12534
  %12536 = bitcast i16* %12535 to <8 x i16>*
  store <8 x i16> %12533, <8 x i16>* %12536, align 2, !tbaa !399
  %index.next5474 = add i64 %index5473, 8
  %12537 = icmp eq i64 %index.next5474, %n.vec5472
  br i1 %12537, label %vec.epilog.middle.block5463, label %vec.epilog.vector.body5465, !llvm.loop !498

vec.epilog.middle.block5463:                      ; preds = %vec.epilog.vector.body5465
  br i1 %cmp.n5476, label %"end for input_wrapper.s0.c1634.loopexit.us", label %"for input_wrapper.s0.c1633.us.preheader"

"for input_wrapper.s0.c1633.us.preheader":        ; preds = %iter.check5442, %vec.epilog.iter.check5466, %vec.epilog.middle.block5463
  %indvars.iv4385.ph = phi i64 [ 0, %iter.check5442 ], [ %n.vec5447, %vec.epilog.iter.check5466 ], [ %n.vec5472, %vec.epilog.middle.block5463 ]
  br label %"for input_wrapper.s0.c1633.us"

"for input_wrapper.s0.c1633.us":                  ; preds = %"for input_wrapper.s0.c1633.us.preheader", %"for input_wrapper.s0.c1633.us"
  %indvars.iv4385 = phi i64 [ %indvars.iv.next4386, %"for input_wrapper.s0.c1633.us" ], [ %indvars.iv4385.ph, %"for input_wrapper.s0.c1633.us.preheader" ]
  %12538 = add nsw i64 %indvars.iv4385, %12449
  %12539 = getelementptr inbounds i8, i8* %172, i64 %12538
  %12540 = load i8, i8* %12539, align 1, !tbaa !397
  %12541 = zext i8 %12540 to i16
  %12542 = sub nsw i16 %12541, %10789
  %12543 = add nsw i64 %indvars.iv4385, %12450
  %12544 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12543
  store i16 %12542, i16* %12544, align 2, !tbaa !399
  %indvars.iv.next4386 = add nuw nsw i64 %indvars.iv4385, 1
  %.not1933.us = icmp eq i64 %indvars.iv.next4386, %10840
  br i1 %.not1933.us, label %"end for input_wrapper.s0.c1634.loopexit.us", label %"for input_wrapper.s0.c1633.us", !llvm.loop !499

"end for input_wrapper.s0.c1634.loopexit.us":     ; preds = %"for input_wrapper.s0.c1633.us", %vec.epilog.middle.block5463, %middle.block5437
  %indvars.iv.next4388 = add nuw nsw i64 %indvars.iv4387, 1
  %.not1932.us = icmp eq i64 %indvars.iv4387, %10832
  br i1 %.not1932.us, label %"end for input_wrapper.s0.x.rebased1629", label %iter.check5442

"end for input_wrapper.s0.x.rebased1629":         ; preds = %"end for input_wrapper.s0.c1634.loopexit.us", %"for input_wrapper.s0.y.rebased1623"
  %indvars.iv.next4391 = add nuw nsw i64 %indvars.iv4390, 1
  %.not1931 = icmp eq i64 %indvars.iv4390, %10870
  br i1 %.not1931, label %"consume input_wrapper1636", label %"for input_wrapper.s0.y.rebased1623"

"consume input_wrapper1636":                      ; preds = %"end for input_wrapper.s0.x.rebased1558.loopexit.us", %"end for input_wrapper.s0.x.rebased1586", %"end for input_wrapper.s0.x.rebased1613", %"end for input_wrapper.s0.x.rebased1629", %"end for input_wrapper.s0.x.x.rebased1534", %then_bb1547, %next_bb1604, %then_bb1603, %then_bb1575, %then_bb1505
  br i1 %208, label %"for output.s0.x.xo1641.preheader", label %"end for output.s0.x.xo1642", !prof !387

"for output.s0.x.xo1641.preheader":               ; preds = %"consume input_wrapper1636"
  %12545 = trunc i64 %11835 to i32
  %12546 = mul i32 %189, %12545
  %t43661494 = add i32 %12546, %11834
  br label %"for output.s0.x.xo1641"

"for output.s0.x.xo1641":                         ; preds = %"for output.s0.x.xo1641.preheader", %"end for output.s0.c.co.rebased1673"
  %indvars.iv4432 = phi i64 [ 0, %"for output.s0.x.xo1641.preheader" ], [ %indvars.iv.next4433, %"end for output.s0.c.co.rebased1673" ]
  %convolved1914.sroa.0.97 = phi <8 x i32> [ %convolved1914.sroa.0.95, %"for output.s0.x.xo1641.preheader" ], [ %convolved1914.sroa.0.108, %"end for output.s0.c.co.rebased1673" ]
  %12547 = add nuw i64 %indvars.iv4432, %10855
  %12548 = mul i64 %12547, %10856
  %12549 = sub i64 %12548, %10830
  %12550 = trunc i64 %12547 to i32
  %12551 = mul i32 %186, %12550
  %t44381640 = add i32 %t43661494, %12551
  %t44411646 = sub i32 %t44381640, %reass.add2759
  br i1 %10713, label %"for output.s0.c.co1647.preheader", label %"end for output.s0.c.co1648", !prof !387

"for output.s0.c.co1647.preheader":               ; preds = %"for output.s0.x.xo1641"
  %12552 = sext i32 %t44411646 to i64
  %12553 = trunc i64 %12549 to i32
  br label %"for output.s0.c.co1647"

"end for output.s0.x.xo1642":                     ; preds = %"end for output.s0.c.co.rebased1673", %"consume input_wrapper1636"
  %convolved1914.sroa.0.98 = phi <8 x i32> [ %convolved1914.sroa.0.95, %"consume input_wrapper1636" ], [ %convolved1914.sroa.0.108, %"end for output.s0.c.co.rebased1673" ]
  %tobool.not.i2473.not = icmp eq i8* %11838, null
  br i1 %tobool.not.i2473.not, label %call_destructor.exit2476, label %if.then.i2474

if.then.i2474:                                    ; preds = %"end for output.s0.x.xo1642"
  call void @halide_free(i8* null, i8* nonnull %11838) #17
  br label %call_destructor.exit2476

call_destructor.exit2476:                         ; preds = %"end for output.s0.x.xo1642", %if.then.i2474
  %indvars.iv.next4437 = add nuw nsw i64 %indvars.iv4436, 1
  %12554 = icmp eq i64 %indvars.iv.next4437, %zext4440
  br i1 %12554, label %"end for output.s0.y.rebased1499", label %"for output.s0.y.rebased1498"

"for output.s0.c.co1647":                         ; preds = %"for output.s0.c.co1647.preheader", %"consume convolved1668"
  %indvars.iv4417 = phi i64 [ 0, %"for output.s0.c.co1647.preheader" ], [ %indvars.iv.next4418, %"consume convolved1668" ]
  %convolved1914.sroa.0.99 = phi <8 x i32> [ %convolved1914.sroa.0.97, %"for output.s0.c.co1647.preheader" ], [ %convolved1914.sroa.0.106, %"consume convolved1668" ]
  %12555 = trunc i64 %indvars.iv4417 to i32
  %12556 = shl nsw i32 %12555, 3
  %12557 = icmp sgt i32 %163, %12556
  %12558 = shl nuw nsw i64 %indvars.iv4417, 3
  br i1 %12557, label %"produce convolved1653", label %"consume convolved1668"

"end for output.s0.c.co1648":                     ; preds = %"consume convolved1668", %"for output.s0.x.xo1641"
  %convolved1914.sroa.0.100 = phi <8 x i32> [ %convolved1914.sroa.0.97, %"for output.s0.x.xo1641" ], [ %convolved1914.sroa.0.106, %"consume convolved1668" ]
  br i1 %10825, label %"for output.s0.c.co.rebased1672.preheader", label %"end for output.s0.c.co.rebased1673", !prof !387

"for output.s0.c.co.rebased1672.preheader":       ; preds = %"end for output.s0.c.co1648"
  %12559 = sext i32 %t44411646 to i64
  %12560 = trunc i64 %12549 to i32
  br label %"for output.s0.c.co.rebased1672"

"produce convolved1653":                          ; preds = %"for output.s0.c.co1647"
  %12561 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %12558
  %12562 = bitcast i32* %12561 to <8 x i32>*
  %12563 = load <8 x i32>, <8 x i32>* %12562, align 32, !tbaa !391
  %12564 = mul nsw i64 %indvars.iv4417, %10850
  br i1 %brmerge5083.demorgan, label %"for convolved.s1.r19$y1655.us.us", label %"consume convolved1668", !prof !407

"for convolved.s1.r19$y1655.us.us":               ; preds = %"produce convolved1653", %"end for convolved.s1.r19$x1661.loopexit.split.us.us.us"
  %indvars.iv4414 = phi i64 [ %indvars.iv.next4415, %"end for convolved.s1.r19$x1661.loopexit.split.us.us.us" ], [ 0, %"produce convolved1653" ]
  %convolved1914.sroa.0.101.us.us = phi <8 x i32> [ %.lcssa5713, %"end for convolved.s1.r19$x1661.loopexit.split.us.us.us" ], [ %12563, %"produce convolved1653" ]
  %12565 = trunc i64 %indvars.iv4414 to i32
  %12566 = mul i32 %12565, %dilation_y
  %12567 = sub i32 %12566, %t43071473
  %t44441658.us.us = mul nsw i32 %12567, %t43731508
  %12568 = mul nsw i64 %indvars.iv4414, %10848
  %12569 = add nsw i64 %12568, %12564
  br label %"for convolved.s1.r19$x1660.us.us.us"

"for convolved.s1.r19$x1660.us.us.us":            ; preds = %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us", %"for convolved.s1.r19$y1655.us.us"
  %indvars.iv4411 = phi i64 [ %indvars.iv.next4412, %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y1655.us.us" ]
  %convolved1914.sroa.0.102.us.us.us = phi <8 x i32> [ %.lcssa5713, %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us" ], [ %convolved1914.sroa.0.101.us.us, %"for convolved.s1.r19$y1655.us.us" ]
  %"convolved.s1.r19$x1662.us.us.us" = phi i32 [ %12648, %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y1655.us.us" ]
  %12570 = mul nsw i32 %"convolved.s1.r19$x1662.us.us.us", %dilation_x
  %12571 = add nsw i32 %12570, %12553
  %12572 = mul nsw i32 %12571, %10773
  %t44461663.us.us.us = add nsw i32 %12572, %t44441658.us.us
  %12573 = mul nsw i64 %indvars.iv4411, %10846
  %12574 = add nsw i64 %12569, %12573
  %12575 = sext i32 %t44461663.us.us.us to i64
  br i1 %10891, label %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r1151665.us.us.us"

"for convolved.s1.r19$z.r1151665.us.us.us":       ; preds = %"for convolved.s1.r19$x1660.us.us.us", %"for convolved.s1.r19$z.r1151665.us.us.us"
  %indvars.iv4409 = phi i64 [ %indvars.iv.next4410.1, %"for convolved.s1.r19$z.r1151665.us.us.us" ], [ 0, %"for convolved.s1.r19$x1660.us.us.us" ]
  %convolved1914.sroa.0.104.us.us.us = phi <8 x i32> [ %12623, %"for convolved.s1.r19$z.r1151665.us.us.us" ], [ %convolved1914.sroa.0.102.us.us.us, %"for convolved.s1.r19$x1660.us.us.us" ]
  %niter6001 = phi i64 [ %niter6001.nsub.1, %"for convolved.s1.r19$z.r1151665.us.us.us" ], [ %unroll_iter6000, %"for convolved.s1.r19$x1660.us.us.us" ]
  %12576 = shl nuw nsw i64 %indvars.iv4409, 2
  %12577 = add nsw i64 %12576, %12575
  %12578 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12577
  %12579 = bitcast i16* %12578 to <1 x i32>*
  %12580 = load <1 x i32>, <1 x i32>* %12579, align 8, !tbaa !399
  %12581 = shufflevector <1 x i32> %12580, <1 x i32> undef, <8 x i32> zeroinitializer
  %12582 = bitcast <8 x i32> %12581 to <16 x i16>
  %12583 = shl nuw nsw i64 %indvars.iv4409, 5
  %12584 = add nsw i64 %12583, %12574
  %12585 = getelementptr inbounds i16, i16* %10803, i64 %12584
  %12586 = bitcast i16* %12585 to <16 x i16>*
  %12587 = load <16 x i16>, <16 x i16>* %12586, align 32, !tbaa !412
  %12588 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12582, <16 x i16> %12587)
  %12589 = add <8 x i32> %12588, %convolved1914.sroa.0.104.us.us.us
  %12590 = getelementptr inbounds i16, i16* %12578, i64 2
  %12591 = bitcast i16* %12590 to <1 x i32>*
  %12592 = load <1 x i32>, <1 x i32>* %12591, align 4, !tbaa !399
  %12593 = shufflevector <1 x i32> %12592, <1 x i32> undef, <8 x i32> zeroinitializer
  %12594 = bitcast <8 x i32> %12593 to <16 x i16>
  %12595 = getelementptr inbounds i16, i16* %12585, i64 16
  %12596 = bitcast i16* %12595 to <16 x i16>*
  %12597 = load <16 x i16>, <16 x i16>* %12596, align 32, !tbaa !412
  %12598 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12594, <16 x i16> %12597)
  %12599 = add <8 x i32> %12589, %12598
  %indvars.iv.next4410 = or i64 %indvars.iv4409, 1
  %12600 = shl nuw nsw i64 %indvars.iv.next4410, 2
  %12601 = add nsw i64 %12600, %12575
  %12602 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12601
  %12603 = bitcast i16* %12602 to <1 x i32>*
  %12604 = load <1 x i32>, <1 x i32>* %12603, align 8, !tbaa !399
  %12605 = shufflevector <1 x i32> %12604, <1 x i32> undef, <8 x i32> zeroinitializer
  %12606 = bitcast <8 x i32> %12605 to <16 x i16>
  %12607 = shl nuw nsw i64 %indvars.iv.next4410, 5
  %12608 = add nsw i64 %12607, %12574
  %12609 = getelementptr inbounds i16, i16* %10803, i64 %12608
  %12610 = bitcast i16* %12609 to <16 x i16>*
  %12611 = load <16 x i16>, <16 x i16>* %12610, align 32, !tbaa !412
  %12612 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12606, <16 x i16> %12611)
  %12613 = add <8 x i32> %12612, %12599
  %12614 = getelementptr inbounds i16, i16* %12602, i64 2
  %12615 = bitcast i16* %12614 to <1 x i32>*
  %12616 = load <1 x i32>, <1 x i32>* %12615, align 4, !tbaa !399
  %12617 = shufflevector <1 x i32> %12616, <1 x i32> undef, <8 x i32> zeroinitializer
  %12618 = bitcast <8 x i32> %12617 to <16 x i16>
  %12619 = getelementptr inbounds i16, i16* %12609, i64 16
  %12620 = bitcast i16* %12619 to <16 x i16>*
  %12621 = load <16 x i16>, <16 x i16>* %12620, align 32, !tbaa !412
  %12622 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12618, <16 x i16> %12621)
  %12623 = add <8 x i32> %12613, %12622
  %indvars.iv.next4410.1 = add nuw nsw i64 %indvars.iv4409, 2
  %niter6001.nsub.1 = add i64 %niter6001, -2
  %niter6001.ncmp.1 = icmp eq i64 %niter6001.nsub.1, 0
  br i1 %niter6001.ncmp.1, label %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r1151665.us.us.us"

"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r1151665.us.us.us", %"for convolved.s1.r19$x1660.us.us.us"
  %.lcssa5713.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$x1660.us.us.us" ], [ %12623, %"for convolved.s1.r19$z.r1151665.us.us.us" ]
  %indvars.iv4409.unr = phi i64 [ 0, %"for convolved.s1.r19$x1660.us.us.us" ], [ %indvars.iv.next4410.1, %"for convolved.s1.r19$z.r1151665.us.us.us" ]
  %convolved1914.sroa.0.104.us.us.us.unr = phi <8 x i32> [ %convolved1914.sroa.0.102.us.us.us, %"for convolved.s1.r19$x1660.us.us.us" ], [ %12623, %"for convolved.s1.r19$z.r1151665.us.us.us" ]
  br i1 %lcmp.mod5999.not, label %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us", label %"for convolved.s1.r19$z.r1151665.us.us.us.epil"

"for convolved.s1.r19$z.r1151665.us.us.us.epil":  ; preds = %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us.unr-lcssa"
  %12624 = shl nuw nsw i64 %indvars.iv4409.unr, 2
  %12625 = add nsw i64 %12624, %12575
  %12626 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12625
  %12627 = shl nuw nsw i64 %indvars.iv4409.unr, 5
  %12628 = add nsw i64 %12627, %12574
  %12629 = getelementptr inbounds i16, i16* %10803, i64 %12628
  %12630 = bitcast i16* %12626 to <1 x i32>*
  %12631 = load <1 x i32>, <1 x i32>* %12630, align 8, !tbaa !399
  %12632 = shufflevector <1 x i32> %12631, <1 x i32> undef, <8 x i32> zeroinitializer
  %12633 = bitcast <8 x i32> %12632 to <16 x i16>
  %12634 = bitcast i16* %12629 to <16 x i16>*
  %12635 = load <16 x i16>, <16 x i16>* %12634, align 32, !tbaa !412
  %12636 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12633, <16 x i16> %12635)
  %12637 = add <8 x i32> %12636, %convolved1914.sroa.0.104.us.us.us.unr
  %12638 = getelementptr inbounds i16, i16* %12626, i64 2
  %12639 = bitcast i16* %12638 to <1 x i32>*
  %12640 = load <1 x i32>, <1 x i32>* %12639, align 4, !tbaa !399
  %12641 = shufflevector <1 x i32> %12640, <1 x i32> undef, <8 x i32> zeroinitializer
  %12642 = bitcast <8 x i32> %12641 to <16 x i16>
  %12643 = getelementptr inbounds i16, i16* %12629, i64 16
  %12644 = bitcast i16* %12643 to <16 x i16>*
  %12645 = load <16 x i16>, <16 x i16>* %12644, align 32, !tbaa !412
  %12646 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12642, <16 x i16> %12645)
  %12647 = add <8 x i32> %12637, %12646
  br label %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us"

"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r1151665.us.us.us.epil"
  %.lcssa5713 = phi <8 x i32> [ %.lcssa5713.ph, %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us.unr-lcssa" ], [ %12647, %"for convolved.s1.r19$z.r1151665.us.us.us.epil" ]
  %indvars.iv.next4412 = add nuw nsw i64 %indvars.iv4411, 1
  %12648 = add nuw nsw i32 %"convolved.s1.r19$x1662.us.us.us", 1
  %.not1929.us.us.us = icmp eq i64 %indvars.iv.next4412, %10847
  br i1 %.not1929.us.us.us, label %"end for convolved.s1.r19$x1661.loopexit.split.us.us.us", label %"for convolved.s1.r19$x1660.us.us.us"

"end for convolved.s1.r19$x1661.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r1151666.loopexit.us.us.us"
  %indvars.iv.next4415 = add nuw nsw i64 %indvars.iv4414, 1
  %.not1928.us.us = icmp eq i64 %indvars.iv.next4415, %10849
  br i1 %.not1928.us.us, label %"consume convolved1668", label %"for convolved.s1.r19$y1655.us.us"

"consume convolved1668":                          ; preds = %"end for convolved.s1.r19$x1661.loopexit.split.us.us.us", %"for output.s0.c.co1647", %"produce convolved1653"
  %convolved1914.sroa.0.106 = phi <8 x i32> [ %12563, %"produce convolved1653" ], [ %convolved1914.sroa.0.99, %"for output.s0.c.co1647" ], [ %.lcssa5713, %"end for convolved.s1.r19$x1661.loopexit.split.us.us.us" ]
  %12649 = sext <8 x i32> %convolved1914.sroa.0.106 to <8 x i64>
  %12650 = mul nsw <8 x i64> %12649, %10806
  %12651 = ashr <8 x i64> %12650, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %12652 = add nsw <8 x i64> %12651, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a461 = ashr <8 x i64> %12652, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %12653 = shufflevector <8 x i64> %a461, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12654 = icmp slt <4 x i64> %12653, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12655 = shufflevector <8 x i64> %a461, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12656 = icmp slt <4 x i64> %12655, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12657 = select <4 x i1> %12654, <4 x i64> %12653, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12658 = select <4 x i1> %12656, <4 x i64> %12655, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12659 = icmp sgt <4 x i64> %12657, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12660 = icmp sgt <4 x i64> %12658, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12661 = select <4 x i1> %12659, <4 x i64> %12657, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12662 = select <4 x i1> %12660, <4 x i64> %12658, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12663 = shufflevector <4 x i64> %12661, <4 x i64> %12662, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4670 = trunc <8 x i64> %12663 to <8 x i32>
  %12664 = ashr <8 x i32> %t4670, %10809
  %12665 = shl <8 x i32> %t4670, %10809
  %12666 = select <8 x i1> %10810, <8 x i32> %12664, <8 x i32> %12665
  %12667 = lshr <8 x i32> %t4670, %10816
  %12668 = shl <8 x i32> %t4670, %10816
  %12669 = select <8 x i1> %10817, <8 x i32> %12667, <8 x i32> %12668
  %12670 = and <8 x i32> %12669, %10812
  %12671 = add nsw <8 x i32> %12670, %12666
  %12672 = shufflevector <8 x i32> %12671, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12673 = shufflevector <8 x i32> %12671, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12674 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %12672, <4 x i32> %12673) #11
  %12675 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %12674, <8 x i16> %10820)
  %12676 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %12675, <8 x i16> undef) #11
  %12677 = shufflevector <16 x i8> %12676, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12678 = icmp ugt <16 x i8> %10822, %12677
  %12679 = select <16 x i1> %12678, <16 x i8> %12677, <16 x i8> %10822
  %12680 = shufflevector <16 x i8> %12679, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12681 = icmp ugt <16 x i8> %12680, %10824
  %12682 = select <16 x i1> %12681, <16 x i8> %12680, <16 x i8> %10824
  %12683 = shufflevector <16 x i8> %12682, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12684 = add nsw i64 %12558, %12552
  %12685 = getelementptr inbounds i8, i8* %182, i64 %12684
  %12686 = bitcast i8* %12685 to <8 x i8>*
  store <8 x i8> %12683, <8 x i8>* %12686, align 1, !tbaa !414
  %indvars.iv.next4418 = add nuw nsw i64 %indvars.iv4417, 1
  %.not1927 = icmp eq i64 %indvars.iv.next4418, %10851
  br i1 %.not1927, label %"end for output.s0.c.co1648", label %"for output.s0.c.co1647"

"for output.s0.c.co.rebased1672":                 ; preds = %"for output.s0.c.co.rebased1672.preheader", %after_bb1703
  %indvars.iv4428 = phi i64 [ 0, %"for output.s0.c.co.rebased1672.preheader" ], [ %indvars.iv.next4429, %after_bb1703 ]
  %convolved1914.sroa.0.107 = phi <8 x i32> [ %convolved1914.sroa.0.100, %"for output.s0.c.co.rebased1672.preheader" ], [ %convolved1914.sroa.0.114, %after_bb1703 ]
  %12687 = add nsw i64 %indvars.iv4428, %10852
  %12688 = icmp sgt i64 %12687, %10853
  %12689 = trunc i64 %12687 to i32
  %12690 = shl nsw i32 %12689, 3
  %12691 = icmp sle i32 %163, %12690
  %.not2224 = or i1 %12688, %12691
  %12692 = add nsw i64 %indvars.iv4428, %10826
  %.not1923 = icmp sgt i64 %12692, %10853
  %or.cond2225 = or i1 %.not1923, %.not2224
  br i1 %or.cond2225, label %"consume convolved1702", label %then_bb1681

"end for output.s0.c.co.rebased1673":             ; preds = %after_bb1703, %"end for output.s0.c.co1648"
  %convolved1914.sroa.0.108 = phi <8 x i32> [ %convolved1914.sroa.0.100, %"end for output.s0.c.co1648" ], [ %convolved1914.sroa.0.114, %after_bb1703 ]
  %indvars.iv.next4433 = add nuw nsw i64 %indvars.iv4432, 1
  %.not1920 = icmp eq i64 %indvars.iv.next4433, %10857
  br i1 %.not1920, label %"end for output.s0.x.xo1642", label %"for output.s0.x.xo1641"

then_bb1681:                                      ; preds = %"for output.s0.c.co.rebased1672"
  %12693 = shl nsw i64 %12692, 3
  %12694 = getelementptr inbounds i32, i32* %"bias_im_global_wrapper$0541", i64 %12693
  %12695 = bitcast i32* %12694 to <8 x i32>*
  %12696 = load <8 x i32>, <8 x i32>* %12695, align 32, !tbaa !391
  %12697 = mul nsw i64 %12692, %10850
  br i1 %brmerge5088.demorgan, label %"for convolved.s1.r19$y1689.us.us", label %"consume convolved1702", !prof !407

"for convolved.s1.r19$y1689.us.us":               ; preds = %then_bb1681, %"end for convolved.s1.r19$x1695.loopexit.split.us.us.us"
  %indvars.iv4425 = phi i64 [ %indvars.iv.next4426, %"end for convolved.s1.r19$x1695.loopexit.split.us.us.us" ], [ 0, %then_bb1681 ]
  %convolved1914.sroa.0.109.us.us = phi <8 x i32> [ %.lcssa5714, %"end for convolved.s1.r19$x1695.loopexit.split.us.us.us" ], [ %12696, %then_bb1681 ]
  %12698 = trunc i64 %indvars.iv4425 to i32
  %12699 = mul i32 %12698, %dilation_y
  %12700 = sub i32 %12699, %t43071473
  %t44541692.us.us = mul nsw i32 %12700, %t43731508
  %12701 = mul nsw i64 %indvars.iv4425, %10848
  %12702 = add nsw i64 %12701, %12697
  br label %"for convolved.s1.r19$x1694.us.us.us"

"for convolved.s1.r19$x1694.us.us.us":            ; preds = %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us", %"for convolved.s1.r19$y1689.us.us"
  %indvars.iv4422 = phi i64 [ %indvars.iv.next4423, %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y1689.us.us" ]
  %convolved1914.sroa.0.110.us.us.us = phi <8 x i32> [ %.lcssa5714, %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us" ], [ %convolved1914.sroa.0.109.us.us, %"for convolved.s1.r19$y1689.us.us" ]
  %"convolved.s1.r19$x1696.us.us.us" = phi i32 [ %12781, %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us" ], [ 0, %"for convolved.s1.r19$y1689.us.us" ]
  %12703 = mul nsw i32 %"convolved.s1.r19$x1696.us.us.us", %dilation_x
  %12704 = add nsw i32 %12703, %12560
  %12705 = mul nsw i32 %12704, %10773
  %t44561697.us.us.us = add nsw i32 %12705, %t44541692.us.us
  %12706 = mul nsw i64 %indvars.iv4422, %10846
  %12707 = add nsw i64 %12702, %12706
  %12708 = sext i32 %t44561697.us.us.us to i64
  br i1 %10892, label %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r1151699.us.us.us"

"for convolved.s1.r19$z.r1151699.us.us.us":       ; preds = %"for convolved.s1.r19$x1694.us.us.us", %"for convolved.s1.r19$z.r1151699.us.us.us"
  %indvars.iv4420 = phi i64 [ %indvars.iv.next4421.1, %"for convolved.s1.r19$z.r1151699.us.us.us" ], [ 0, %"for convolved.s1.r19$x1694.us.us.us" ]
  %convolved1914.sroa.0.112.us.us.us = phi <8 x i32> [ %12756, %"for convolved.s1.r19$z.r1151699.us.us.us" ], [ %convolved1914.sroa.0.110.us.us.us, %"for convolved.s1.r19$x1694.us.us.us" ]
  %niter6005 = phi i64 [ %niter6005.nsub.1, %"for convolved.s1.r19$z.r1151699.us.us.us" ], [ %unroll_iter6004, %"for convolved.s1.r19$x1694.us.us.us" ]
  %12709 = shl nuw nsw i64 %indvars.iv4420, 2
  %12710 = add nsw i64 %12709, %12708
  %12711 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12710
  %12712 = bitcast i16* %12711 to <1 x i32>*
  %12713 = load <1 x i32>, <1 x i32>* %12712, align 8, !tbaa !399
  %12714 = shufflevector <1 x i32> %12713, <1 x i32> undef, <8 x i32> zeroinitializer
  %12715 = bitcast <8 x i32> %12714 to <16 x i16>
  %12716 = shl nuw nsw i64 %indvars.iv4420, 5
  %12717 = add nsw i64 %12716, %12707
  %12718 = getelementptr inbounds i16, i16* %10803, i64 %12717
  %12719 = bitcast i16* %12718 to <16 x i16>*
  %12720 = load <16 x i16>, <16 x i16>* %12719, align 32, !tbaa !412
  %12721 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12715, <16 x i16> %12720)
  %12722 = add <8 x i32> %12721, %convolved1914.sroa.0.112.us.us.us
  %12723 = getelementptr inbounds i16, i16* %12711, i64 2
  %12724 = bitcast i16* %12723 to <1 x i32>*
  %12725 = load <1 x i32>, <1 x i32>* %12724, align 4, !tbaa !399
  %12726 = shufflevector <1 x i32> %12725, <1 x i32> undef, <8 x i32> zeroinitializer
  %12727 = bitcast <8 x i32> %12726 to <16 x i16>
  %12728 = getelementptr inbounds i16, i16* %12718, i64 16
  %12729 = bitcast i16* %12728 to <16 x i16>*
  %12730 = load <16 x i16>, <16 x i16>* %12729, align 32, !tbaa !412
  %12731 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12727, <16 x i16> %12730)
  %12732 = add <8 x i32> %12722, %12731
  %indvars.iv.next4421 = or i64 %indvars.iv4420, 1
  %12733 = shl nuw nsw i64 %indvars.iv.next4421, 2
  %12734 = add nsw i64 %12733, %12708
  %12735 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12734
  %12736 = bitcast i16* %12735 to <1 x i32>*
  %12737 = load <1 x i32>, <1 x i32>* %12736, align 8, !tbaa !399
  %12738 = shufflevector <1 x i32> %12737, <1 x i32> undef, <8 x i32> zeroinitializer
  %12739 = bitcast <8 x i32> %12738 to <16 x i16>
  %12740 = shl nuw nsw i64 %indvars.iv.next4421, 5
  %12741 = add nsw i64 %12740, %12707
  %12742 = getelementptr inbounds i16, i16* %10803, i64 %12741
  %12743 = bitcast i16* %12742 to <16 x i16>*
  %12744 = load <16 x i16>, <16 x i16>* %12743, align 32, !tbaa !412
  %12745 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12739, <16 x i16> %12744)
  %12746 = add <8 x i32> %12745, %12732
  %12747 = getelementptr inbounds i16, i16* %12735, i64 2
  %12748 = bitcast i16* %12747 to <1 x i32>*
  %12749 = load <1 x i32>, <1 x i32>* %12748, align 4, !tbaa !399
  %12750 = shufflevector <1 x i32> %12749, <1 x i32> undef, <8 x i32> zeroinitializer
  %12751 = bitcast <8 x i32> %12750 to <16 x i16>
  %12752 = getelementptr inbounds i16, i16* %12742, i64 16
  %12753 = bitcast i16* %12752 to <16 x i16>*
  %12754 = load <16 x i16>, <16 x i16>* %12753, align 32, !tbaa !412
  %12755 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12751, <16 x i16> %12754)
  %12756 = add <8 x i32> %12746, %12755
  %indvars.iv.next4421.1 = add nuw nsw i64 %indvars.iv4420, 2
  %niter6005.nsub.1 = add i64 %niter6005, -2
  %niter6005.ncmp.1 = icmp eq i64 %niter6005.nsub.1, 0
  br i1 %niter6005.ncmp.1, label %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us.unr-lcssa", label %"for convolved.s1.r19$z.r1151699.us.us.us"

"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us.unr-lcssa": ; preds = %"for convolved.s1.r19$z.r1151699.us.us.us", %"for convolved.s1.r19$x1694.us.us.us"
  %.lcssa5714.ph = phi <8 x i32> [ undef, %"for convolved.s1.r19$x1694.us.us.us" ], [ %12756, %"for convolved.s1.r19$z.r1151699.us.us.us" ]
  %indvars.iv4420.unr = phi i64 [ 0, %"for convolved.s1.r19$x1694.us.us.us" ], [ %indvars.iv.next4421.1, %"for convolved.s1.r19$z.r1151699.us.us.us" ]
  %convolved1914.sroa.0.112.us.us.us.unr = phi <8 x i32> [ %convolved1914.sroa.0.110.us.us.us, %"for convolved.s1.r19$x1694.us.us.us" ], [ %12756, %"for convolved.s1.r19$z.r1151699.us.us.us" ]
  br i1 %lcmp.mod6003.not, label %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us", label %"for convolved.s1.r19$z.r1151699.us.us.us.epil"

"for convolved.s1.r19$z.r1151699.us.us.us.epil":  ; preds = %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us.unr-lcssa"
  %12757 = shl nuw nsw i64 %indvars.iv4420.unr, 2
  %12758 = add nsw i64 %12757, %12708
  %12759 = getelementptr inbounds i16, i16* %input_wrapper1502, i64 %12758
  %12760 = shl nuw nsw i64 %indvars.iv4420.unr, 5
  %12761 = add nsw i64 %12760, %12707
  %12762 = getelementptr inbounds i16, i16* %10803, i64 %12761
  %12763 = bitcast i16* %12759 to <1 x i32>*
  %12764 = load <1 x i32>, <1 x i32>* %12763, align 8, !tbaa !399
  %12765 = shufflevector <1 x i32> %12764, <1 x i32> undef, <8 x i32> zeroinitializer
  %12766 = bitcast <8 x i32> %12765 to <16 x i16>
  %12767 = bitcast i16* %12762 to <16 x i16>*
  %12768 = load <16 x i16>, <16 x i16>* %12767, align 32, !tbaa !412
  %12769 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12766, <16 x i16> %12768)
  %12770 = add <8 x i32> %12769, %convolved1914.sroa.0.112.us.us.us.unr
  %12771 = getelementptr inbounds i16, i16* %12759, i64 2
  %12772 = bitcast i16* %12771 to <1 x i32>*
  %12773 = load <1 x i32>, <1 x i32>* %12772, align 4, !tbaa !399
  %12774 = shufflevector <1 x i32> %12773, <1 x i32> undef, <8 x i32> zeroinitializer
  %12775 = bitcast <8 x i32> %12774 to <16 x i16>
  %12776 = getelementptr inbounds i16, i16* %12762, i64 16
  %12777 = bitcast i16* %12776 to <16 x i16>*
  %12778 = load <16 x i16>, <16 x i16>* %12777, align 32, !tbaa !412
  %12779 = call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %12775, <16 x i16> %12778)
  %12780 = add <8 x i32> %12770, %12779
  br label %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us"

"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us": ; preds = %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us.unr-lcssa", %"for convolved.s1.r19$z.r1151699.us.us.us.epil"
  %.lcssa5714 = phi <8 x i32> [ %.lcssa5714.ph, %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us.unr-lcssa" ], [ %12780, %"for convolved.s1.r19$z.r1151699.us.us.us.epil" ]
  %indvars.iv.next4423 = add nuw nsw i64 %indvars.iv4422, 1
  %12781 = add nuw nsw i32 %"convolved.s1.r19$x1696.us.us.us", 1
  %.not1925.us.us.us = icmp eq i64 %indvars.iv.next4423, %10847
  br i1 %.not1925.us.us.us, label %"end for convolved.s1.r19$x1695.loopexit.split.us.us.us", label %"for convolved.s1.r19$x1694.us.us.us"

"end for convolved.s1.r19$x1695.loopexit.split.us.us.us": ; preds = %"end for convolved.s1.r19$z.r1151700.loopexit.us.us.us"
  %indvars.iv.next4426 = add nuw nsw i64 %indvars.iv4425, 1
  %.not1924.us.us = icmp eq i64 %indvars.iv.next4426, %10849
  br i1 %.not1924.us.us, label %"consume convolved1702", label %"for convolved.s1.r19$y1689.us.us"

"consume convolved1702":                          ; preds = %"end for convolved.s1.r19$x1695.loopexit.split.us.us.us", %then_bb1681, %"for output.s0.c.co.rebased1672"
  %convolved1914.sroa.0.114 = phi <8 x i32> [ %convolved1914.sroa.0.107, %"for output.s0.c.co.rebased1672" ], [ %12696, %then_bb1681 ], [ %.lcssa5714, %"end for convolved.s1.r19$x1695.loopexit.split.us.us.us" ]
  %12782 = add nsw i32 %12690, 8
  %.not1921 = icmp sgt i32 %12782, %163
  br i1 %.not1921, label %next_bb1705, label %then_bb1704

after_bb1703:                                     ; preds = %next_bb1705, %then_bb1704
  %indvars.iv.next4429 = add nuw nsw i64 %indvars.iv4428, 1
  %.not1922 = icmp eq i64 %indvars.iv.next4429, %10854
  br i1 %.not1922, label %"end for output.s0.c.co.rebased1673", label %"for output.s0.c.co.rebased1672"

then_bb1704:                                      ; preds = %"consume convolved1702"
  %12783 = sext <8 x i32> %convolved1914.sroa.0.114 to <8 x i64>
  %12784 = mul nsw <8 x i64> %12783, %10806
  %12785 = ashr <8 x i64> %12784, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %12786 = add nsw <8 x i64> %12785, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a467 = ashr <8 x i64> %12786, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %12787 = shufflevector <8 x i64> %a467, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12788 = icmp slt <4 x i64> %12787, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12789 = shufflevector <8 x i64> %a467, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12790 = icmp slt <4 x i64> %12789, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12791 = select <4 x i1> %12788, <4 x i64> %12787, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12792 = select <4 x i1> %12790, <4 x i64> %12789, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12793 = icmp sgt <4 x i64> %12791, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12794 = icmp sgt <4 x i64> %12792, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12795 = select <4 x i1> %12793, <4 x i64> %12791, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12796 = select <4 x i1> %12794, <4 x i64> %12792, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12797 = shufflevector <4 x i64> %12795, <4 x i64> %12796, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4674 = trunc <8 x i64> %12797 to <8 x i32>
  %12798 = ashr <8 x i32> %t4674, %10809
  %12799 = shl <8 x i32> %t4674, %10809
  %12800 = select <8 x i1> %10810, <8 x i32> %12798, <8 x i32> %12799
  %12801 = lshr <8 x i32> %t4674, %10816
  %12802 = shl <8 x i32> %t4674, %10816
  %12803 = select <8 x i1> %10817, <8 x i32> %12801, <8 x i32> %12802
  %12804 = and <8 x i32> %12803, %10812
  %12805 = add nsw <8 x i32> %12804, %12800
  %12806 = shufflevector <8 x i32> %12805, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12807 = shufflevector <8 x i32> %12805, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12808 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %12806, <4 x i32> %12807) #11
  %12809 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %12808, <8 x i16> %10820)
  %12810 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %12809, <8 x i16> undef) #11
  %12811 = shufflevector <16 x i8> %12810, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12812 = icmp ugt <16 x i8> %10822, %12811
  %12813 = select <16 x i1> %12812, <16 x i8> %12811, <16 x i8> %10822
  %12814 = shufflevector <16 x i8> %12813, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12815 = icmp ugt <16 x i8> %12814, %10824
  %12816 = select <16 x i1> %12815, <16 x i8> %12814, <16 x i8> %10824
  %12817 = shufflevector <16 x i8> %12816, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12818 = shl nsw i64 %12692, 3
  %12819 = add nsw i64 %12818, %12559
  %12820 = getelementptr inbounds i8, i8* %182, i64 %12819
  %12821 = bitcast i8* %12820 to <8 x i8>*
  store <8 x i8> %12817, <8 x i8>* %12821, align 1, !tbaa !414
  br label %after_bb1703

next_bb1705:                                      ; preds = %"consume convolved1702"
  %12822 = or i32 %12690, 1
  %12823 = insertelement <8 x i32> undef, i32 %12822, i32 0
  %12824 = shufflevector <8 x i32> %12823, <8 x i32> undef, <8 x i32> zeroinitializer
  %12825 = add nsw <8 x i32> %12824, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12826 = icmp sle <8 x i32> %12825, %10828
  %12827 = select <8 x i1> %12826, <8 x i32> %convolved1914.sroa.0.114, <8 x i32> undef
  %12828 = sext <8 x i32> %12827 to <8 x i64>
  %12829 = mul nsw <8 x i64> %12828, %10806
  %12830 = ashr <8 x i64> %12829, <i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1, i64 1>
  %12831 = add nsw <8 x i64> %12830, <i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912, i64 536870912>
  %a473 = ashr <8 x i64> %12831, <i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30, i64 30>
  %12832 = shufflevector <8 x i64> %a473, <8 x i64> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12833 = icmp slt <4 x i64> %12832, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12834 = shufflevector <8 x i64> %a473, <8 x i64> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12835 = icmp slt <4 x i64> %12834, <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12836 = select <4 x i1> %12833, <4 x i64> %12832, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12837 = select <4 x i1> %12835, <4 x i64> %12834, <4 x i64> <i64 2147483647, i64 2147483647, i64 2147483647, i64 2147483647>
  %12838 = icmp sgt <4 x i64> %12836, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12839 = icmp sgt <4 x i64> %12837, <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12840 = select <4 x i1> %12838, <4 x i64> %12836, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12841 = select <4 x i1> %12839, <4 x i64> %12837, <4 x i64> <i64 -2147483648, i64 -2147483648, i64 -2147483648, i64 -2147483648>
  %12842 = shufflevector <4 x i64> %12840, <4 x i64> %12841, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %t4678 = trunc <8 x i64> %12842 to <8 x i32>
  %12843 = ashr <8 x i32> %t4678, %10809
  %12844 = shl <8 x i32> %t4678, %10809
  %12845 = select <8 x i1> %10810, <8 x i32> %12843, <8 x i32> %12844
  %12846 = lshr <8 x i32> %t4678, %10816
  %12847 = shl <8 x i32> %t4678, %10816
  %12848 = select <8 x i1> %10817, <8 x i32> %12846, <8 x i32> %12847
  %12849 = and <8 x i32> %12848, %10812
  %12850 = add nsw <8 x i32> %12849, %12845
  %12851 = shufflevector <8 x i32> %12850, <8 x i32> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %12852 = shufflevector <8 x i32> %12850, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %12853 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %12851, <4 x i32> %12852) #11
  %12854 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %12853, <8 x i16> %10820)
  %12855 = call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %12854, <8 x i16> undef) #11
  %12856 = shufflevector <16 x i8> %12855, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12857 = icmp ugt <16 x i8> %10822, %12856
  %12858 = select <16 x i1> %12857, <16 x i8> %12856, <16 x i8> %10822
  %12859 = shufflevector <16 x i8> %12858, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %12860 = icmp ugt <16 x i8> %12859, %10824
  %12861 = select <16 x i1> %12860, <16 x i8> %12859, <16 x i8> %10824
  %12862 = shufflevector <16 x i8> %12861, <16 x i8> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %12863 = shl nsw i64 %12687, 3
  %12864 = add nsw i64 %12863, %12559
  %12865 = getelementptr inbounds i8, i8* %182, i64 %12864
  %12866 = bitcast i8* %12865 to <8 x i8>*
  call void @llvm.masked.store.v8i8.p0v8i8(<8 x i8> %12862, <8 x i8>* %12866, i32 1, <8 x i1> %12826), !tbaa !414
  br label %after_bb1703
}

; Function Attrs: nounwind
define i32 @conv_nn_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  %6 = getelementptr i8*, i8** %0, i64 2
  %7 = bitcast i8** %6 to %struct.halide_buffer_t**
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %7, align 8
  %9 = getelementptr i8*, i8** %0, i64 4
  %10 = bitcast i8** %9 to %struct.halide_buffer_t**
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %10, align 8
  %12 = getelementptr i8*, i8** %0, i64 5
  %13 = bitcast i8** %12 to i32**
  %14 = load i32*, i32** %13, align 8
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr i8*, i8** %0, i64 6
  %17 = bitcast i8** %16 to i32**
  %18 = load i32*, i32** %17, align 8
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr i8*, i8** %0, i64 7
  %21 = bitcast i8** %20 to i32**
  %22 = load i32*, i32** %21, align 8
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr i8*, i8** %0, i64 8
  %25 = bitcast i8** %24 to i32**
  %26 = load i32*, i32** %25, align 8
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr i8*, i8** %0, i64 9
  %29 = bitcast i8** %28 to i32**
  %30 = load i32*, i32** %29, align 8
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr i8*, i8** %0, i64 10
  %33 = bitcast i8** %32 to i32**
  %34 = load i32*, i32** %33, align 8
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr i8*, i8** %0, i64 11
  %37 = load i8*, i8** %36, align 8
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr i8*, i8** %0, i64 12
  %40 = load i8*, i8** %39, align 8
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr i8*, i8** %0, i64 13
  %43 = load i8*, i8** %42, align 8
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr i8*, i8** %0, i64 14
  %46 = bitcast i8** %45 to %struct.halide_buffer_t**
  %47 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %46, align 8
  %48 = tail call i32 @conv_nn(%struct.halide_buffer_t* %2, i8 %5, %struct.halide_buffer_t* %8, i8 undef, %struct.halide_buffer_t* %11, i32 %15, i32 %19, i32 %23, i32 %27, i32 %31, i32 %35, i8 %38, i8 %41, i8 %44, %struct.halide_buffer_t* %47) #19
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @conv_nn_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @conv_nn_metadata_storage
}

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <16 x i8> @llvm.masked.load.v16i8.p0v16i8(<16 x i8>*, i32 immarg, <16 x i1>, <16 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v16i16.p0v16i16(<16 x i16>, <16 x i16>*, i32 immarg, <16 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind readonly willreturn
declare <8 x i8> @llvm.masked.load.v8i8.p0v8i8(<8 x i8>*, i32 immarg, <8 x i1>, <8 x i8>) #13

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v8i16.p0v8i16(<8 x i16>, <8 x i16>*, i32 immarg, <8 x i1>) #5

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.store.v8i8.p0v8i8(<8 x i8>, <8 x i8>*, i32 immarg, <8 x i1>) #5

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare <8 x i32> @llvm.abs.v8i32(<8 x i32>, i1 immarg) #7

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #14

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #15

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #16

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind readnone }
attributes #9 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { argmemonly nofree nosync nounwind readonly willreturn }
attributes #14 = { nofree nosync nounwind willreturn writeonly }
attributes #15 = { nofree nosync nounwind readonly willreturn }
attributes #16 = { nofree nosync nounwind readnone willreturn }
attributes #17 = { nobuiltin nounwind "no-builtins" }
attributes #18 = { nobuiltin "no-builtins" }
attributes #19 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 0, i32 1073741824}
!387 = !{!"branch_weights", i32 1073741824, i32 0}
!388 = !{!389, !389, i64 0}
!389 = !{!"bias", !390, i64 0}
!390 = !{!"Halide buffer"}
!391 = !{!392, !392, i64 0}
!392 = !{!"bias_im_global_wrapper$0", !390, i64 0}
!393 = distinct !{!393, !184}
!394 = distinct !{!394, !186}
!395 = distinct !{!395, !188, !184}
!396 = !{!"branch_weights", i32 1, i32 2000}
!397 = !{!398, !398, i64 0}
!398 = !{!"input", !390, i64 0}
!399 = !{!400, !400, i64 0}
!400 = !{!"input_wrapper", !390, i64 0}
!401 = distinct !{!401, !186}
!402 = !{!"branch_weights", i32 0, i32 -2147483648}
!403 = distinct !{!403, !186}
!404 = distinct !{!404, !186}
!405 = distinct !{!405, !186}
!406 = distinct !{!406, !186}
!407 = !{!"branch_weights", i32 -2147483648, i32 0}
!408 = distinct !{!408, !186}
!409 = distinct !{!409, !184}
!410 = distinct !{!410, !188, !184}
!411 = distinct !{!411, !188, !184}
!412 = !{!413, !413, i64 0}
!413 = !{!"filter", !390, i64 0}
!414 = !{!415, !415, i64 0}
!415 = !{!"output", !390, i64 0}
!416 = distinct !{!416, !186}
!417 = distinct !{!417, !186}
!418 = distinct !{!418, !186}
!419 = distinct !{!419, !186}
!420 = distinct !{!420, !186}
!421 = distinct !{!421, !186}
!422 = distinct !{!422, !184}
!423 = distinct !{!423, !188, !184}
!424 = distinct !{!424, !188, !184}
!425 = distinct !{!425, !186}
!426 = distinct !{!426, !186}
!427 = distinct !{!427, !186}
!428 = distinct !{!428, !186}
!429 = distinct !{!429, !186}
!430 = distinct !{!430, !186}
!431 = distinct !{!431, !184}
!432 = distinct !{!432, !188, !184}
!433 = distinct !{!433, !188, !184}
!434 = distinct !{!434, !186}
!435 = distinct !{!435, !186}
!436 = distinct !{!436, !186}
!437 = distinct !{!437, !186}
!438 = distinct !{!438, !186}
!439 = distinct !{!439, !184}
!440 = distinct !{!440, !188, !184}
!441 = distinct !{!441, !188, !184}
!442 = distinct !{!442, !186}
!443 = distinct !{!443, !186}
!444 = distinct !{!444, !186}
!445 = distinct !{!445, !186}
!446 = distinct !{!446, !186}
!447 = distinct !{!447, !186}
!448 = distinct !{!448, !184}
!449 = distinct !{!449, !188, !184}
!450 = distinct !{!450, !188, !184}
!451 = distinct !{!451, !186}
!452 = distinct !{!452, !184}
!453 = distinct !{!453, !186}
!454 = distinct !{!454, !188, !184}
!455 = distinct !{!455, !186}
!456 = distinct !{!456, !186}
!457 = distinct !{!457, !186}
!458 = distinct !{!458, !186}
!459 = distinct !{!459, !186}
!460 = distinct !{!460, !186}
!461 = distinct !{!461, !184}
!462 = distinct !{!462, !188, !184}
!463 = distinct !{!463, !188, !184}
!464 = distinct !{!464, !186}
!465 = distinct !{!465, !186}
!466 = distinct !{!466, !186}
!467 = distinct !{!467, !186}
!468 = distinct !{!468, !186}
!469 = distinct !{!469, !186}
!470 = distinct !{!470, !184}
!471 = distinct !{!471, !188, !184}
!472 = distinct !{!472, !188, !184}
!473 = distinct !{!473, !186}
!474 = distinct !{!474, !186}
!475 = distinct !{!475, !186}
!476 = distinct !{!476, !186}
!477 = distinct !{!477, !186}
!478 = distinct !{!478, !186}
!479 = distinct !{!479, !184}
!480 = distinct !{!480, !188, !184}
!481 = distinct !{!481, !188, !184}
!482 = distinct !{!482, !186}
!483 = distinct !{!483, !186}
!484 = distinct !{!484, !186}
!485 = distinct !{!485, !186}
!486 = distinct !{!486, !186}
!487 = distinct !{!487, !186}
!488 = distinct !{!488, !184}
!489 = distinct !{!489, !188, !184}
!490 = distinct !{!490, !188, !184}
!491 = distinct !{!491, !186}
!492 = distinct !{!492, !186}
!493 = distinct !{!493, !186}
!494 = distinct !{!494, !186}
!495 = distinct !{!495, !186}
!496 = distinct !{!496, !186}
!497 = distinct !{!497, !184}
!498 = distinct !{!498, !188, !184}
!499 = distinct !{!499, !188, !184}
