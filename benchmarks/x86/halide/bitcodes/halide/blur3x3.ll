; ModuleID = 'blur3x3'
source_filename = "/home/muchenx2/Hydride/frontends/halide/src/runtime/posix_allocator.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64--linux-gnu"

%struct.timespec = type { i64, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::hash_table" = type { [1024 x %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"] }
%"struct.Halide::Runtime::Internal::Synchronization::hash_bucket" = type { %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* }
%"class.Halide::Runtime::Internal::Synchronization::word_lock" = type { i64 }
%"struct.Halide::Runtime::Internal::Synchronization::queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", i64, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, i64 }
%"struct.Halide::Runtime::Internal::Synchronization::thread_parker" = type <{ %struct.pthread_mutex_t, %struct.pthread_mutex_t, i8, [7 x i8] }>
%struct.pthread_mutex_t = type { [8 x i64] }
%"struct.Halide::Runtime::Internal::work_queue_t" = type { %struct.halide_mutex, i32, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i32, i32, [4 x i8], %struct.halide_mutex, %struct.halide_mutex, %struct.halide_mutex, i32, i32, [256 x %struct.halide_thread*], i8, i8, i32 }
%"struct.Halide::Runtime::Internal::work" = type { %struct.halide_parallel_task_t, i32 (i8*, i32, i8*)*, %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"*, i32, %"struct.Halide::Runtime::Internal::work"*, i32, i8*, i32, i32, i32, i8 }
%struct.halide_parallel_task_t = type { i32 (i8*, i32, i32, i8*, i8*)*, i8*, i8*, %struct.halide_semaphore_acquire_t*, i32, i32, i32, i32, i8, [7 x i8] }
%struct.halide_semaphore_acquire_t = type { %struct.halide_semaphore_t*, i32, [4 x i8] }
%struct.halide_semaphore_t = type { [2 x i64] }
%struct.halide_mutex = type { [1 x i64] }
%struct.halide_thread = type opaque
%"class.Halide::Runtime::Internal::TraceBuffer" = type { %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock", i32, i32, [1048576 x i8] }
%"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" = type { i32 }
%struct.halide_trace_event_t = type <{ i8*, i8*, i32*, i8*, %struct.halide_type_t, i32, i32, i32, i32, [4 x i8] }>
%struct.halide_type_t = type { i8, i8, i16 }
%"struct.Halide::Runtime::Internal::CacheEntry" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"*, i8*, i64, i8*, i32, i32, i32, i32, %struct.halide_dimension_t*, %struct.halide_buffer_t*, i64, i8, [7 x i8] }
%struct.halide_dimension_t = type { i32, i32, i32, i32 }
%struct.halide_buffer_t = type { i64, %struct.halide_device_interface_t*, i8*, i64, %struct.halide_type_t, i32, %struct.halide_dimension_t*, i8* }
%struct.halide_device_interface_t = type { i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, void (i8*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64, %struct.halide_device_interface_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, i32*, i32*)*, %struct.halide_device_interface_impl_t* }
%struct.halide_device_interface_impl_t = type { void ()*, void ()*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*)* }
%struct.halide_device_allocation_pool = type { i32 (i8*)*, %struct.halide_device_allocation_pool* }
%struct.halide_profiler_state = type { %struct.halide_mutex, i32, i32, i32, i32, %struct.halide_profiler_pipeline_stats*, void (i32*, i32*)*, %struct.halide_thread* }
%struct.halide_profiler_pipeline_stats = type { i64, i64, i64, i64, i64, i64, i8*, %struct.halide_profiler_func_stats*, i8*, i32, i32, i32, i32, i32, [4 x i8] }
%struct.halide_profiler_func_stats = type { i64, i64, i64, i64, i64, i64, i64, i8*, i32, [4 x i8] }
%struct.halide_filter_argument_t = type { i8*, i32, i32, %struct.halide_type_t, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, %struct.halide_scalar_value_t*, i64** }
%struct.halide_scalar_value_t = type { %union.anon.28 }
%union.anon.28 = type { double }
%struct.halide_filter_metadata_t = type { i32, i32, %struct.halide_filter_argument_t*, i8*, i8* }
%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64* }
%"struct.Halide::Runtime::Internal::Synchronization::parking_control" = type { i32 (...)** }
%"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data" = type { %"struct.Halide::Runtime::Internal::Synchronization::thread_parker", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* }
%"struct.Halide::Runtime::Internal::Synchronization::validate_action" = type { i8, [7 x i8], i64 }
%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control" = type { %"struct.Halide::Runtime::Internal::Synchronization::parking_control", i64*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"* }
%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair" = type { %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* }
%"struct.Halide::Runtime::Internal::spawned_thread" = type { void (i8*)*, i8*, i64 }
%struct.halide_mutex_array = type { %struct.halide_mutex* }
%"struct.Halide::Runtime::Internal::halide_tiff_header" = type <{ i16, i16, i32, i16, [15 x %"struct.Halide::Runtime::Internal::tiff_tag"], i32, [2 x i32], [2 x i32] }>
%"struct.Halide::Runtime::Internal::tiff_tag" = type { i16, i16, i32, %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock" }
%"struct.Halide::Runtime::Internal::CacheBlockHeader" = type { %"struct.Halide::Runtime::Internal::CacheEntry"*, i32, [4 x i8] }
%"struct.Halide::Runtime::Internal::device_copy" = type { i64, i64, i64, [16 x i64], [16 x i64], [16 x i64], i64 }
%"struct.Halide::Runtime::Internal::CpuFeatures" = type { [2 x i64], [2 x i64] }
%struct.halide_pseudostack_slot_t = type { i8*, i64, i64 }

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE = comdat any

$_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = comdat any

$_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = comdat any

@_ZN6Halide7Runtime8Internal13custom_mallocE = linkonce local_unnamed_addr global i8* (i8*, i64)* @halide_default_malloc, align 8
@_ZN6Halide7Runtime8Internal11custom_freeE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_free, align 8
@_ZN6Halide7Runtime8Internal13error_handlerE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_error, align 8
@.str = private unnamed_addr constant [8 x i8] c"Error: \00", align 1
@_ZN6Halide7Runtime8Internal12custom_printE = linkonce local_unnamed_addr global void (i8*, i8*)* @halide_default_print, align 8
@halide_reference_clock_inited = linkonce local_unnamed_addr global i8 0, align 1
@halide_reference_clock = linkonce global %struct.timespec zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal15Synchronization5tableE = linkonce global %"struct.Halide::Runtime::Internal::Synchronization::hash_table" zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal10work_queueE = linkonce global %"struct.Halide::Runtime::Internal::work_queue_t" { %struct.halide_mutex zeroinitializer, i32 0, i32 0, %"struct.Halide::Runtime::Internal::work"* null, i32 0, i32 0, i32 0, [4 x i8] undef, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, %struct.halide_mutex zeroinitializer, i32 0, i32 0, [256 x %struct.halide_thread*] zeroinitializer, i8 0, i8 0, i32 0 }, align 8
@_ZN6Halide7Runtime8Internal14custom_do_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_default_do_task, align 8
@_ZN6Halide7Runtime8Internal19custom_do_loop_taskE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_default_do_loop_task, align 8
@_ZN6Halide7Runtime8Internal17custom_do_par_forE = linkonce local_unnamed_addr global i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_default_do_par_for, align 8
@_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5 = private unnamed_addr constant [130 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:386 halide_abort_if_false() failed: next != nullptr\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.5.6 = private unnamed_addr constant [124 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/synchronization_common.h:994 halide_abort_if_false() failed: val & 0x1\0A\00", align 1
@_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.6 = private unnamed_addr constant [186 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:155 halide_abort_if_false() failed: bytes == limit && \22Logic error in thread pool work queue initialization.\\n\22\0A\00", align 1
@.str.3 = private unnamed_addr constant [263 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/thread_pool_common.h:527 halide_abort_if_false() failed: (min_threads <= ((task_parent->task.min_threads * task_parent->active_workers) - task_parent->threads_reserved)) && \22Logic error: thread over commit.\\n\22\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"HL_NUM_THREADS\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"HL_NUMTHREADS\00", align 1
@_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE = linkonce local_unnamed_addr global i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* @halide_default_do_parallel_tasks, align 8
@_ZN6Halide7Runtime8Internal21custom_semaphore_initE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_init, align 8
@_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE = linkonce local_unnamed_addr global i1 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_try_acquire, align 8
@_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE = linkonce local_unnamed_addr global i32 (%struct.halide_semaphore_t*, i32)* @halide_default_semaphore_release, align 8
@llvm.global_dtors = appending global [4 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @halide_thread_pool_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_trace_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_cache_cleanup, i8* null }, { i32, void ()*, i8* } { i32 65535, void ()* @halide_profiler_shutdown, i8* null }]
@_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE = linkonce_odr unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv to i8*), i8* bitcast (i64 (%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"*, i32, i1)* @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib to i8*), i8* bitcast (void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)* @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb to i8*)] }, comdat, align 8
@.str.4 = private unnamed_addr constant [38 x i8] c"halide_set_num_threads: must be >= 0.\00", align 1
@_ZN6Halide7Runtime8Internal17custom_get_symbolE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_get_symbol, align 8
@_ZN6Halide7Runtime8Internal19custom_load_libraryE = linkonce local_unnamed_addr global i8* (i8*)* @halide_default_load_library, align 8
@_ZN6Halide7Runtime8Internal25custom_get_library_symbolE = linkonce local_unnamed_addr global i8* (i8*, i8*)* @halide_default_get_library_symbol, align 8
@_ZN6Halide7Runtime8Internal17halide_gpu_deviceE = linkonce local_unnamed_addr global i32 0, align 4
@_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"HL_GPU_DEVICE\00", align 1
@_ZN6Halide7Runtime8Internal19halide_trace_bufferE = linkonce local_unnamed_addr global %"class.Halide::Runtime::Internal::TraceBuffer"* null, align 8
@_ZN6Halide7Runtime8Internal17halide_trace_fileE = linkonce local_unnamed_addr global i32 -1, align 4
@_ZN6Halide7Runtime8Internal22halide_trace_file_lockE = linkonce global i8 0, align 1
@_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE = linkonce local_unnamed_addr global i8* null, align 8
@_ZN6Halide7Runtime8Internal19halide_custom_traceE = linkonce local_unnamed_addr global i32 (i8*, %struct.halide_trace_event_t*)* @halide_default_trace, align 8
@_ZZ20halide_default_traceE3ids = internal global i32 1, align 4
@.str.32 = private unnamed_addr constant [144 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:115 halide_abort_if_false() failed: success && \22Could not write to trace file\22\0A\00", align 1
@.str.31 = private unnamed_addr constant [120 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:87 halide_abort_if_false() failed: size <= buffer_size\0A\00", align 1
@.str.1.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.11 = private unnamed_addr constant [140 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:218 halide_abort_if_false() failed: print_bits <= 64 && \22Tracing bad type\22\0A\00", align 1
@__const.halide_default_trace.event_types = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.13, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.15, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.16, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.17, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i32 0, i32 0)], align 8
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.20 = private unnamed_addr constant [3 x i8] c">)\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c">, <\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c" = <\00", align 1
@.str.23 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.24 = private unnamed_addr constant [142 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:287 halide_abort_if_false() failed: print_bits >= 16 && \22Tracing a bad type\22\0A\00", align 1
@.str.25 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.26 = private unnamed_addr constant [9 x i8] c" tag = \22\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.3.12 = private unnamed_addr constant [5 x i8] c"Load\00", align 1
@.str.4.13 = private unnamed_addr constant [6 x i8] c"Store\00", align 1
@.str.5.14 = private unnamed_addr constant [18 x i8] c"Begin realization\00", align 1
@.str.6.15 = private unnamed_addr constant [16 x i8] c"End realization\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"Produce\00", align 1
@.str.8.16 = private unnamed_addr constant [12 x i8] c"End produce\00", align 1
@.str.9.17 = private unnamed_addr constant [8 x i8] c"Consume\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"End consume\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"Begin pipeline\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"End pipeline\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"HL_TRACE_FILE\00", align 1
@.str.29 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.30 = private unnamed_addr constant [139 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/tracing.cpp:351 halide_abort_if_false() failed: file && \22Failed to open trace file\\n\22\0A\00", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE = linkonce local_unnamed_addr global [10 x i16] [i16 3, i16 3, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2, i16 1, i16 2], align 2
@_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\06\09\08\0B\0A\0D\0C\0F\0E", align 1
@_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE = linkonce local_unnamed_addr global [10 x i8] c"\07\09\02\01\04\03\06\05\0D\0C", align 1
@.str.34 = private unnamed_addr constant [51 x i8] c"Bounds query buffer passed to halide_debug_to_file\00", align 1
@.str.1.35 = private unnamed_addr constant [59 x i8] c"Can't debug_to_file a Func with more than four dimensions\0A\00", align 1
@.str.2.36 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3.37 = private unnamed_addr constant [6 x i8] c".tiff\00", align 1
@.str.4.38 = private unnamed_addr constant [5 x i8] c".tif\00", align 1
@.str.5.39 = private unnamed_addr constant [5 x i8] c".mat\00", align 1
@__const.halide_debug_to_file.header = private unnamed_addr constant [129 x i8] c"MATLAB 5.0 MAT-file, produced by Halide                                                                                     \00\01IM\00", align 1
@.str.6.40 = private unnamed_addr constant [53 x i8] c"Can't debug_to_file to a .mat file greater than 4GB\0A\00", align 1
@_ZN6Halide7Runtime8Internal16memoization_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal13cache_entriesE = linkonce global [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*] zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal18most_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal19least_recently_usedE = linkonce local_unnamed_addr global %"struct.Halide::Runtime::Internal::CacheEntry"* null, align 8
@_ZN6Halide7Runtime8Internal14max_cache_sizeE = linkonce local_unnamed_addr global i64 1048576, align 8
@_ZN6Halide7Runtime8Internal18current_cache_sizeE = linkonce local_unnamed_addr global i64 0, align 8
@.str.2.42 = private unnamed_addr constant [126 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:284 halide_abort_if_false() failed: prev_hash_entry != nullptr\0A\00", align 1
@.str.3.43 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:373 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.4.44 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:377 halide_abort_if_false() failed: least_recently_used == entry\0A\00", align 1
@.str.5.45 = private unnamed_addr constant [129 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:380 halide_abort_if_false() failed: entry->more_recent != nullptr\0A\00", align 1
@.str.9.46 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:472 halide_abort_if_false() failed: no_host_pointers_equal\0A\00", align 1
@.str.12.47 = private unnamed_addr constant [123 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/cache.cpp:550 halide_abort_if_false() failed: entry->in_use_count > 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [10 x i8] c"<nullptr>\00", align 1
@.str.1.57 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.2.58 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.str.3.59 = private unnamed_addr constant [5 x i8] c"-inf\00", align 1
@.str.4.60 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.5.61 = private unnamed_addr constant [14 x i8] c"-0.000000e+00\00", align 1
@.str.6.62 = private unnamed_addr constant [13 x i8] c"0.000000e+00\00", align 1
@.str.7.63 = private unnamed_addr constant [10 x i8] c"-0.000000\00", align 1
@.str.8.64 = private unnamed_addr constant [9 x i8] c"0.000000\00", align 1
@.str.9.65 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.11.67 = private unnamed_addr constant [3 x i8] c"e+\00", align 1
@.str.12.68 = private unnamed_addr constant [3 x i8] c"e-\00", align 1
@.str.13.71 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@.str.18.72 = private unnamed_addr constant [14 x i8] c"bad_type_code\00", align 1
@.str.17.73 = private unnamed_addr constant [7 x i8] c"handle\00", align 1
@.str.16.74 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@.str.15.75 = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@.str.14.76 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@.str.19.77 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.20.78 = private unnamed_addr constant [8 x i8] c"nullptr\00", align 1
@.str.21.79 = private unnamed_addr constant [8 x i8] c"buffer(\00", align 1
@.str.23.82 = private unnamed_addr constant [4 x i8] c", {\00", align 1
@.str.24.83 = private unnamed_addr constant [2 x i8] c"}\00", align 1
@_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE = linkonce local_unnamed_addr global i8 1, align 1
@_ZN6Halide7Runtime8Internal21allocation_pools_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal23device_allocation_poolsE = linkonce local_unnamed_addr global %struct.halide_device_allocation_pool* null, align 8
@_ZN6Halide7Runtime8Internal17device_copy_mutexE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@.str.6.88 = private unnamed_addr constant [20 x i8] c"halide_copy_to_host\00", align 1
@.str.7.89 = private unnamed_addr constant [22 x i8] c"halide_copy_to_device\00", align 1
@.str.9.90 = private unnamed_addr constant [61 x i8] c"halide_copy_to_device does not support switching interfaces\0A\00", align 1
@.str.17.91 = private unnamed_addr constant [21 x i8] c"halide_device_malloc\00", align 1
@.str.20.92 = private unnamed_addr constant [59 x i8] c"halide_device_malloc doesn't support switching interfaces\0A\00", align 1
@.str.16.93 = private unnamed_addr constant [19 x i8] c"halide_device_sync\00", align 1
@.str.21.96 = private unnamed_addr constant [19 x i8] c"halide_device_free\00", align 1
@.str.22.97 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:252 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.23.98 = private unnamed_addr constant [30 x i8] c"halide_device_and_host_malloc\00", align 1
@.str.25.99 = private unnamed_addr constant [68 x i8] c"halide_device_and_host_malloc doesn't support switching interfaces\0A\00", align 1
@.str.26.100 = private unnamed_addr constant [42 x i8] c"allocating host and device memory failed\0A\00", align 1
@.str.27.101 = private unnamed_addr constant [28 x i8] c"halide_device_and_host_free\00", align 1
@.str.28.102 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:317 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.29.103 = private unnamed_addr constant [38 x i8] c"halide_default_device_and_host_malloc\00", align 1
@.str.30.104 = private unnamed_addr constant [36 x i8] c"halide_default_device_and_host_free\00", align 1
@.str.31.105 = private unnamed_addr constant [26 x i8] c"halide_device_wrap_native\00", align 1
@.str.32.106 = private unnamed_addr constant [64 x i8] c"halide_device_wrap_native doesn't support switching interfaces\0A\00", align 1
@.str.33.107 = private unnamed_addr constant [28 x i8] c"halide_device_detach_native\00", align 1
@.str.34.108 = private unnamed_addr constant [127 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/device_interface.cpp:403 halide_abort_if_false() failed: buf->device == 0\0A\00", align 1
@.str.35 = private unnamed_addr constant [36 x i8] c"halide_default_device_detach_native\00", align 1
@.str.41 = private unnamed_addr constant [64 x i8] c"halide_buffer_copy does not support switching device interfaces\00", align 1
@.str.58 = private unnamed_addr constant [44 x i8] c"device_interface does not support cropping\0A\00", align 1
@.str.59 = private unnamed_addr constant [43 x i8] c"device_interface does not support slicing\0A\00", align 1
@.str.60 = private unnamed_addr constant [52 x i8] c"destination buffer already has a device allocation\0A\00", align 1
@.str.61 = private unnamed_addr constant [48 x i8] c"src and dst must have identical dimensionality\0A\00", align 1
@.str.64 = private unnamed_addr constant [52 x i8] c"dst must have exactly one fewer dimension than src\0A\00", align 1
@.str.111 = private unnamed_addr constant [41 x i8] c"Bounds inference call to external stage \00", align 1
@.str.1.112 = private unnamed_addr constant [27 x i8] c" returned non-zero value: \00", align 1
@.str.2.113 = private unnamed_addr constant [24 x i8] c"Call to external stage \00", align 1
@.str.3.114 = private unnamed_addr constant [18 x i8] c"Bounds given for \00", align 1
@.str.4.115 = private unnamed_addr constant [5 x i8] c" in \00", align 1
@.str.5.116 = private unnamed_addr constant [8 x i8] c" (from \00", align 1
@.str.6.117 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.7.118 = private unnamed_addr constant [38 x i8] c") do not cover required region (from \00", align 1
@.str.8.119 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.9.120 = private unnamed_addr constant [11 x i8] c" has type \00", align 1
@.str.10.121 = private unnamed_addr constant [38 x i8] c" but type of the buffer passed in is \00", align 1
@.str.11.122 = private unnamed_addr constant [31 x i8] c" requires a buffer of exactly \00", align 1
@.str.12.123 = private unnamed_addr constant [43 x i8] c" dimensions, but the buffer passed in has \00", align 1
@.str.13.124 = private unnamed_addr constant [12 x i8] c" dimensions\00", align 1
@.str.14.125 = private unnamed_addr constant [17 x i8] c" is accessed at \00", align 1
@.str.15.126 = private unnamed_addr constant [28 x i8] c", which is before the min (\00", align 1
@.str.16.127 = private unnamed_addr constant [16 x i8] c") in dimension \00", align 1
@.str.17.128 = private unnamed_addr constant [28 x i8] c", which is beyond the max (\00", align 1
@.str.18.129 = private unnamed_addr constant [29 x i8] c"Total allocation for buffer \00", align 1
@.str.19.130 = private unnamed_addr constant [5 x i8] c" is \00", align 1
@.str.20.131 = private unnamed_addr constant [37 x i8] c", which exceeds the maximum size of \00", align 1
@.str.21.132 = private unnamed_addr constant [24 x i8] c"The extents for buffer \00", align 1
@.str.22.133 = private unnamed_addr constant [12 x i8] c" dimension \00", align 1
@.str.23.134 = private unnamed_addr constant [15 x i8] c" is negative (\00", align 1
@.str.24.135 = private unnamed_addr constant [31 x i8] c"Product of extents for buffer \00", align 1
@.str.25.136 = private unnamed_addr constant [29 x i8] c"Applying the constraints on \00", align 1
@.str.26.137 = private unnamed_addr constant [54 x i8] c" to the required region made it smaller in dimension \00", align 1
@.str.27.138 = private unnamed_addr constant [3 x i8] c". \00", align 1
@.str.28.139 = private unnamed_addr constant [16 x i8] c"Required size: \00", align 1
@.str.29.140 = private unnamed_addr constant [19 x i8] c"Constrained size: \00", align 1
@.str.30.141 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.31.142 = private unnamed_addr constant [22 x i8] c"Constraint violated: \00", align 1
@.str.32.143 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.33.144 = private unnamed_addr constant [6 x i8] c") == \00", align 1
@.str.34.145 = private unnamed_addr constant [11 x i8] c"Parameter \00", align 1
@.str.35.146 = private unnamed_addr constant [23 x i8] c" but must be at least \00", align 1
@.str.36 = private unnamed_addr constant [22 x i8] c" but must be at most \00", align 1
@.str.37 = private unnamed_addr constant [47 x i8] c"Out of memory (halide_malloc returned nullptr)\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"Buffer argument \00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" is nullptr\00", align 1
@.str.40 = private unnamed_addr constant [25 x i8] c"Failed to dump function \00", align 1
@.str.41.147 = private unnamed_addr constant [10 x i8] c" to file \00", align 1
@.str.42 = private unnamed_addr constant [13 x i8] c" with error \00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"The host pointer of \00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c" is not aligned to a \00", align 1
@.str.45 = private unnamed_addr constant [17 x i8] c" bytes boundary.\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"The buffer \00", align 1
@.str.47 = private unnamed_addr constant [53 x i8] c" is dirty on device, but this pipeline was compiled \00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"with no support for device to host copies.\00", align 1
@.str.49 = private unnamed_addr constant [55 x i8] c" is null, but the pipeline will access it on the host.\00", align 1
@.str.50.148 = private unnamed_addr constant [30 x i8] c"The folded storage dimension \00", align 1
@.str.51 = private unnamed_addr constant [5 x i8] c" of \00", align 1
@.str.52 = private unnamed_addr constant [36 x i8] c" was accessed out of order by loop \00", align 1
@.str.53 = private unnamed_addr constant [23 x i8] c"Cannot fold dimension \00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c" because an extern stage accesses [\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.56 = private unnamed_addr constant [3 x i8] c"],\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c" which is outside the range currently valid: [\00", align 1
@.str.58.149 = private unnamed_addr constant [3 x i8] c"].\00", align 1
@.str.59.150 = private unnamed_addr constant [47 x i8] c" which wraps around the boundary of the fold, \00", align 1
@.str.60.151 = private unnamed_addr constant [30 x i8] c"which occurs at multiples of \00", align 1
@.str.61.152 = private unnamed_addr constant [18 x i8] c"The fold factor (\00", align 1
@.str.62 = private unnamed_addr constant [16 x i8] c") of dimension \00", align 1
@.str.63 = private unnamed_addr constant [61 x i8] c" is too small to store the required region accessed by loop \00", align 1
@.str.64.153 = private unnamed_addr constant [3 x i8] c").\00", align 1
@.str.65 = private unnamed_addr constant [22 x i8] c"Requirement Failed: (\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.67 = private unnamed_addr constant [59 x i8] c"A schedule specialized with specialize_fail() was chosen: \00", align 1
@.str.68 = private unnamed_addr constant [55 x i8] c"Buffer has a non-zero device but no device interface.\0A\00", align 1
@.str.69 = private unnamed_addr constant [57 x i8] c"Buffer has a non-null device_interface but device is 0.\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"Buffer has both host and device dirty bits set.\0A\00", align 1
@.str.71 = private unnamed_addr constant [26 x i8] c"Buffer pointer passed to \00", align 1
@.str.72 = private unnamed_addr constant [11 x i8] c" is null.\0A\00", align 1
@.str.73 = private unnamed_addr constant [32 x i8] c"The explicit allocation bound (\00", align 1
@.str.74 = private unnamed_addr constant [45 x i8] c" is too small to store the required region (\00", align 1
@.str.75 = private unnamed_addr constant [77 x i8] c"Buffer could not be cropped (runtime error or unimplemented device option).\0A\00", align 1
@.str.29.163 = private unnamed_addr constant [35 x i8] c"Printer buffer allocation failed.\0A\00", align 1
@.str.7.164 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8.165 = private unnamed_addr constant [14 x i8] c" total time: \00", align 1
@.str.9.166 = private unnamed_addr constant [4 x i8] c" ms\00", align 1
@.str.10.167 = private unnamed_addr constant [12 x i8] c"  samples: \00", align 1
@.str.11.168 = private unnamed_addr constant [9 x i8] c"  runs: \00", align 1
@.str.12.169 = private unnamed_addr constant [13 x i8] c"  time/run: \00", align 1
@.str.13.170 = private unnamed_addr constant [5 x i8] c" ms\0A\00", align 1
@.str.14.171 = private unnamed_addr constant [24 x i8] c" average threads used: \00", align 1
@.str.15.172 = private unnamed_addr constant [20 x i8] c" heap allocations: \00", align 1
@.str.16.173 = private unnamed_addr constant [20 x i8] c"  peak heap usage: \00", align 1
@.str.17.174 = private unnamed_addr constant [8 x i8] c" bytes\0A\00", align 1
@.str.18.175 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.19.176 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.20.177 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.21.178 = private unnamed_addr constant [3 x i8] c"ms\00", align 1
@.str.22.179 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.23.180 = private unnamed_addr constant [3 x i8] c"%)\00", align 1
@.str.24.181 = private unnamed_addr constant [10 x i8] c"threads: \00", align 1
@.str.25.182 = private unnamed_addr constant [8 x i8] c" peak: \00", align 1
@.str.26.183 = private unnamed_addr constant [7 x i8] c" num: \00", align 1
@.str.27.184 = private unnamed_addr constant [7 x i8] c" avg: \00", align 1
@.str.28.185 = private unnamed_addr constant [9 x i8] c" stack: \00", align 1
@_ZZ25halide_profiler_get_stateE1s = internal global %struct.halide_profiler_state { %struct.halide_mutex zeroinitializer, i32 1, i32 0, i32 0, i32 0, %struct.halide_profiler_pipeline_stats* null, void (i32*, i32*)* null, %struct.halide_thread* null }, align 8
@.str.186 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:246 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.1.187 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:273 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.2.188 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:274 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.3.189 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:275 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@.str.4.190 = private unnamed_addr constant [128 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:309 halide_abort_if_false() failed: p_stats != nullptr\0A\00", align 1
@.str.5.191 = private unnamed_addr constant [122 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:310 halide_abort_if_false() failed: func_id >= 0\0A\00", align 1
@.str.6.192 = private unnamed_addr constant [138 x i8] c"/home/muchenx2/Hydride/frontends/halide/src/runtime/profiler_common.cpp:311 halide_abort_if_false() failed: func_id < p_stats->num_funcs\0A\00", align 1
@_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE = linkonce local_unnamed_addr global i32 (i32, i64*)* @halide_default_can_use_target_features, align 8
@_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE = linkonce global %struct.halide_mutex zeroinitializer, align 8
@_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE = linkonce local_unnamed_addr global i8 0, align 1
@_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE = linkonce global [4 x i64] zeroinitializer, align 8
@.str.197 = private unnamed_addr constant [81 x i8] c"Internal error: wrong structure size passed to halide_can_use_target_features()\0A\00", align 1
@0 = private constant [4 x i64*] zeroinitializer
@str = private constant [6 x i8] c"input\00", align 32
@1 = private constant [4 x i64*] zeroinitializer
@str.200 = private constant [7 x i8] c"blur_y\00", align 32
@2 = private constant [2 x %struct.halide_filter_argument_t] [%struct.halide_filter_argument_t { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0), i32 1, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @0, i32 0, i32 0) }, %struct.halide_filter_argument_t { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.200, i32 0, i32 0), i32 2, i32 2, %struct.halide_type_t { i8 1, i8 16, i16 1 }, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, %struct.halide_scalar_value_t* null, i64** getelementptr inbounds ([4 x i64*], [4 x i64*]* @1, i32 0, i32 0) }]
@str.201 = private constant [64 x i8] c"x86-64-linux-avx-avx2-f16c-fma-no_asserts-no_bounds_query-sse41\00", align 32
@str.202 = private constant [8 x i8] c"blur3x3\00", align 32
@blur3x3_metadata_storage = private constant %struct.halide_filter_metadata_t { i32 1, i32 2, %struct.halide_filter_argument_t* getelementptr inbounds ([2 x %struct.halide_filter_argument_t], [2 x %struct.halide_filter_argument_t]* @2, i32 0, i32 0), i8* getelementptr inbounds ([64 x i8], [64 x i8]* @str.201, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.202, i32 0, i32 0) }
@switch.table.halide_type_to_string = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.76, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.75, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16.74, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.17.73, i64 0, i64 0)], align 8

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_malloc(i8* %user_context, i64 %x) #0 {
entry:
  %add = add i64 %x, 64
  %call1 = tail call i8* @malloc(i64 %add) #16
  %cmp = icmp eq i8* %call1, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %0 = ptrtoint i8* %call1 to i64
  %sub = add i64 %0, 71
  %and = and i64 %sub, -64
  %1 = inttoptr i64 %and to i8*
  %2 = inttoptr i64 %and to i8**
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 -1
  store i8* %call1, i8** %arrayidx, align 8, !tbaa !10
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  %retval.0 = phi i8* [ %1, %if.end ], [ null, %entry ]
  ret i8* %retval.0
}

declare i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_free(i8* %user_context, i8* %ptr) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %ptr, i64 -8
  %0 = bitcast i8* %arrayidx to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !10
  tail call void @free(i8* %1) #16
  ret void
}

declare void @free(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i64)* @halide_set_custom_malloc(i8* (i8*, i64)* %user_malloc) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  store i8* (i8*, i64)* %user_malloc, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  ret i8* (i8*, i64)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_free(void (i8*, i8*)* %user_free) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  store void (i8*, i8*)* %user_free, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_malloc(i8* %user_context, i64 %x) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i64)*, i8* (i8*, i64)** @_ZN6Halide7Runtime8Internal13custom_mallocE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %user_context, i64 %x) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak void @halide_free(i8* %user_context, i8* %ptr) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal11custom_freeE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %ptr) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_default_error(i8* %user_context, i8* %msg) #0 {
entry:
  %buf = alloca [4096 x i8], align 1
  %0 = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %0) #11
  %add.ptr = getelementptr inbounds [4096 x i8], [4096 x i8]* %buf, i64 0, i64 4094
  %call = call i8* @halide_string_to_string(i8* nonnull %0, i8* nonnull %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0)) #16
  %add.ptr2 = getelementptr inbounds i8, i8* %call, i64 4094
  %call3 = call i8* @halide_string_to_string(i8* %call, i8* nonnull %add.ptr2, i8* %msg) #16
  %arrayidx = getelementptr inbounds i8, i8* %call3, i64 -1
  %1 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %cmp.not = icmp eq i8 %1, 10
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8 10, i8* %call3, align 1, !tbaa !14
  %arrayidx5 = getelementptr inbounds i8, i8* %call3, i64 1
  store i8 0, i8* %arrayidx5, align 1, !tbaa !14
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %dst.0 = phi i8* [ %arrayidx5, %if.then ], [ %call3, %entry ]
  %sub.ptr.lhs.cast = ptrtoint i8* %dst.0 to i64
  %sub.ptr.rhs.cast = ptrtoint [4096 x i8]* %buf to i64
  %sub.ptr.sub = sub i64 1, %sub.ptr.rhs.cast
  %add = add i64 %sub.ptr.sub, %sub.ptr.lhs.cast
  %call9 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 %add) #16
  call void @halide_print(i8* %user_context, i8* nonnull %0) #16
  call void @abort() #16
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @abort() local_unnamed_addr #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind mustprogress
define weak void @halide_error(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_error_handler(void (i8*, i8*)* %handler) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  store void (i8*, i8*)* %handler, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal13error_handlerE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_print(i8* %user_context, i8* %msg) local_unnamed_addr #0 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  tail call void %0(i8* %user_context, i8* %msg) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void (i8*, i8*)* @halide_set_custom_print(void (i8*, i8*)* %print) local_unnamed_addr #2 {
entry:
  %0 = load void (i8*, i8*)*, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  store void (i8*, i8*)* %print, void (i8*, i8*)** @_ZN6Halide7Runtime8Internal12custom_printE, align 8, !tbaa !10
  ret void (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_start_clock(i8* %user_context) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* @halide_reference_clock_inited, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i32 (i32, ...) @syscall(i32 228, i32 0, %struct.timespec* nonnull @halide_reference_clock) #16
  store i8 1, i8* @halide_reference_clock_inited, align 1, !tbaa !15
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i32 0
}

declare i32 @syscall(i32, ...) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i64 @halide_current_time_ns(i8* %user_context) local_unnamed_addr #0 {
entry:
  %now = alloca <2 x i64>, align 16
  %0 = bitcast <2 x i64>* %now to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  %call = call i32 (i32, ...) @syscall(i32 228, i32 0, <2 x i64>* nonnull %now) #16
  %1 = load <2 x i64>, <2 x i64>* %now, align 16, !tbaa !18
  %2 = load <2 x i64>, <2 x i64>* bitcast (%struct.timespec* @halide_reference_clock to <2 x i64>*), align 8, !tbaa !18
  %3 = sub <2 x i64> %1, %2
  %4 = extractelement <2 x i64> %3, i32 0
  %mul = mul nsw i64 %4, 1000000000
  %5 = extractelement <2 x i64> %3, i32 1
  %add = add nsw i64 %mul, %5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i64 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_sleep_ms(i8* %user_context, i32 %ms) local_unnamed_addr #0 {
entry:
  %mul = mul nsw i32 %ms, 1000
  %call = tail call i32 @usleep(i32 %mul) #16
  ret void
}

declare i32 @usleep(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_default_print(i8* %user_context, i8* %str) #0 {
entry:
  %call = tail call i64 @strlen(i8* %str) #16
  %call1 = tail call i64 @write(i32 1, i8* %str, i64 %call) #16
  ret void
}

declare i64 @strlen(i8*) local_unnamed_addr #1

declare i64 @write(i32, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_host_cpu_count() local_unnamed_addr #0 {
entry:
  %call = tail call i64 @sysconf(i32 84) #16
  %conv = trunc i64 %call to i32
  ret i32 %conv
}

declare i64 @sysconf(i32) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_yield() local_unnamed_addr #0 {
entry:
  %call = tail call i32 @sched_yield() #16
  ret void
}

declare i32 @sched_yield() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #0 {
entry:
  %call = tail call i32 %f(i8* %user_context, i32 %min, i32 %extent, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #0 {
entry:
  %job = alloca %"struct.Halide::Runtime::Internal::work", align 8
  %cmp = icmp slt i32 %size, 1
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %0 = bitcast %"struct.Halide::Runtime::Internal::work"* %job to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %0) #11
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 0
  store i32 (i8*, i32, i32, i8*, i8*)* null, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %min2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 5
  store i32 %min, i32* %min2, align 4, !tbaa !24
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 6
  store i32 %size, i32* %extent, align 8, !tbaa !25
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 8
  store i8 0, i8* %serial, align 8, !tbaa !26
  %semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 3
  store %struct.halide_semaphore_acquire_t* null, %struct.halide_semaphore_acquire_t** %semaphores, align 8, !tbaa !27
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 4
  store i32 0, i32* %num_semaphores, align 8, !tbaa !28
  %closure8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 1
  store i8* %closure, i8** %closure8, align 8, !tbaa !29
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 7
  store i32 0, i32* %min_threads, align 4, !tbaa !30
  %name = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 0, i32 2
  store i8* null, i8** %name, align 8, !tbaa !31
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 1
  store i32 (i8*, i32, i8*)* %f, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 7
  store i8* %user_context, i8** %user_context11, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %job, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 4
  store i32 0, i32* %sibling_count, align 8, !tbaa !39
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job, i64 0, i32 5
  store %"struct.Halide::Runtime::Internal::work"* null, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 1, %"struct.Halide::Runtime::Internal::work"* nonnull %job, %"struct.Halide::Runtime::Internal::work"* null) #17
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %job) #17
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* %exit_status, align 4, !tbaa !34
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %0) #11
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ %1, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_mutex_lock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = load atomic i64, i64* %state.i monotonic, align 8
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %6 = ptrtoint %struct.halide_mutex* %mutex to i64
  br label %while.cond.outer.i.i

while.cond.outer.i.i:                             ; preds = %while.cond.outer.i.i.backedge, %if.then.i
  %expected.0.ph.i.i = phi i64 [ %2, %if.then.i ], [ %expected.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i = phi i32 [ 40, %if.then.i ], [ %spinner.sroa.0.0.ph.i.i.be, %while.cond.outer.i.i.backedge ]
  %and55.i.i = and i64 %expected.0.ph.i.i, 1
  %tobool.not56.i.i = icmp eq i64 %and55.i.i, 0
  br i1 %tobool.not56.i.i, label %if.then.i.i, label %if.end4.i.i

if.then.i.i:                                      ; preds = %while.cond.outer.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %expected.057.i.i = phi i64 [ %9, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i ], [ %expected.0.ph.i.i, %while.cond.outer.i.i ]
  %or.i.i = or i64 %expected.057.i.i, 1
  %7 = cmpxchg weak i64* %state.i, i64 %expected.057.i.i, i64 %or.i.i acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then.i.i
  %9 = extractvalue { i64, i1 } %7, 0
  %and.i.i = and i64 %9, 1
  %tobool.not.i.i = icmp eq i64 %and.i.i, 0
  br i1 %tobool.not.i.i, label %if.then.i.i, label %if.end4.i.i.loopexit

if.end4.i.i.loopexit:                             ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i
  %10 = extractvalue { i64, i1 } %7, 0
  br label %if.end4.i.i

if.end4.i.i:                                      ; preds = %if.end4.i.i.loopexit, %while.cond.outer.i.i
  %expected.0.lcssa.i.i = phi i64 [ %expected.0.ph.i.i, %while.cond.outer.i.i ], [ %10, %if.end4.i.i.loopexit ]
  %cmp.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i, 0
  br i1 %cmp.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, label %if.end8.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i: ; preds = %if.end4.i.i
  %cmp4.i.not.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i, 1
  br i1 %cmp4.i.not.i.i, label %if.end8.i.i, label %if.then6.i.i

if.then6.i.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i
  %dec.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i, -1
  call void @halide_thread_yield() #16
  %11 = load atomic i64, i64* %state.i monotonic, align 8
  br label %while.cond.outer.i.i.backedge

if.end8.i.i:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i, %if.end4.i.i
  %spinner.sroa.0.152.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i ], [ %spinner.sroa.0.0.ph.i.i, %if.end4.i.i ]
  %and9.i.i = and i64 %expected.0.lcssa.i.i, 2
  %cmp.i.i = icmp eq i64 %and9.i.i, 0
  br i1 %cmp.i.i, label %if.then10.i.i, label %if.end19.i.i

if.then10.i.i:                                    ; preds = %if.end8.i.i
  %or12.i.i = or i64 %expected.0.lcssa.i.i, 2
  %12 = cmpxchg weak i64* %state.i, i64 %expected.0.lcssa.i.i, i64 %or12.i.i monotonic monotonic
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %if.end19.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i: ; preds = %if.then10.i.i
  %14 = extractvalue { i64, i1 } %12, 0
  br label %while.cond.outer.i.i.backedge

if.end19.i.i:                                     ; preds = %if.then10.i.i, %if.end8.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !tbaa !41
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %call21.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %5, i64 %6) #16
  %cmp22.i.i = icmp eq i64 %call21.i.i, %6
  br i1 %cmp22.i.i, label %cleanup30.critedge.i.i, label %if.end24.i.i

if.end24.i.i:                                     ; preds = %if.end19.i.i
  %15 = load atomic i64, i64* %state.i monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %while.cond.outer.i.i.backedge

while.cond.outer.i.i.backedge:                    ; preds = %if.end24.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i, %if.then6.i.i
  %expected.0.ph.i.i.be = phi i64 [ %14, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ %15, %if.end24.i.i ], [ %11, %if.then6.i.i ]
  %spinner.sroa.0.0.ph.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i ], [ 40, %if.end24.i.i ], [ %dec.i.i.i, %if.then6.i.i ]
  br label %while.cond.outer.i.i

cleanup30.critedge.i.i:                           ; preds = %if.end19.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex4lockEv.exit: ; preds = %if.then.i.i, %cleanup30.critedge.i.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_jobs, %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %land.rhs.i, label %if.end4

land.rhs.i:                                       ; preds = %entry, %while.body.i
  %bytes.011.i = phi i8* [ %incdec.ptr.i, %while.body.i ], [ bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), %entry ]
  %1 = load i8, i8* %bytes.011.i, align 1, !tbaa !14
  %cmp2.i = icmp eq i8 %1, 0
  br i1 %cmp2.i, label %while.body.i, label %do.body.i

while.body.i:                                     ; preds = %land.rhs.i
  %incdec.ptr.i = getelementptr inbounds i8, i8* %bytes.011.i, i64 1
  %exitcond.not.i = icmp eq i8* %incdec.ptr.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*)
  br i1 %exitcond.not.i, label %do.body.i, label %land.rhs.i, !llvm.loop !49

do.body.i:                                        ; preds = %while.body.i, %land.rhs.i
  %bytes.0.lcssa.i = phi i8* [ %bytes.011.i, %land.rhs.i ], [ bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* select (i1 icmp ugt (i8* bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*), i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1)), %"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1), %"struct.Halide::Runtime::Internal::work_queue_t"* bitcast (i8* getelementptr (i8, i8* bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i64 1) to %"struct.Halide::Runtime::Internal::work_queue_t"*)) to i8*), %while.body.i ]
  %cmp3.i = icmp eq i8* %bytes.0.lcssa.i, bitcast (%"struct.Halide::Runtime::Internal::work_queue_t"* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 1) to i8*)
  br i1 %cmp3.i, label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit, label %if.then.i

if.then.i:                                        ; preds = %do.body.i
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([186 x i8], [186 x i8]* @.str.6, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit

_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit: ; preds = %if.then.i, %do.body.i
  %2 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %tobool1.not = icmp eq i32 %2, 0
  br i1 %tobool1.not, label %if.then2, label %if.end

if.then2:                                         ; preds = %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end

if.end:                                           ; preds = %if.then2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit
  %3 = phi i32 [ %call, %if.then2 ], [ %2, %_ZNK6Halide7Runtime8Internal12work_queue_t13assert_zeroedEv.exit ]
  %4 = icmp sgt i32 %3, 1
  %spec.select.i = select i1 %4, i32 %3, i32 1
  %5 = icmp slt i32 %spec.select.i, 256
  %call3176 = select i1 %5, i32 %spec.select.i, i32 256
  store i32 %call3176, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45
  br label %if.end4

if.end4:                                          ; preds = %if.end, %entry
  %cmp181 = icmp sgt i32 %num_jobs, 0
  br i1 %cmp181, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:                               ; preds = %if.end4
  %wide.trip.count = zext i32 %num_jobs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %6 = icmp eq i32 %num_jobs, 1
  br i1 %6, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.inc.1, %for.body.preheader
  %workers_to_wake.1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %add.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %stealable_jobs.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %job_may_block.1.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %spec.select.lcssa.ph = phi i8 [ undef, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %indvars.iv193.unr = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187.unr = phi i32 [ 0, %for.body.preheader ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185.unr = phi i8 [ 0, %for.body.preheader ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184.unr = phi i8 [ 0, %for.body.preheader ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183.unr = phi i8 [ 0, %for.body.preheader ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182.unr = phi i32 [ -1, %for.body.preheader ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup.loopexit, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %min_threads5.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 7
  %7 = load i32, i32* %min_threads5.epil, align 4, !tbaa !30
  %cmp6.epil = icmp eq i32 %7, 0
  %add.epil = add i32 %7, %min_threads.0187.unr
  %stealable_jobs.1.epil = select i1 %cmp6.epil, i8 1, i8 %stealable_jobs.0183.unr
  %job_may_block.1.epil = select i1 %cmp6.epil, i8 %job_may_block.0185.unr, i8 1
  %num_semaphores.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 4
  %8 = load i32, i32* %num_semaphores.epil, align 8, !tbaa !28
  %cmp16.not.epil = icmp eq i32 %8, 0
  %spec.select.epil = select i1 %cmp16.not.epil, i8 %job_has_acquires.0184.unr, i8 1
  %serial.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 8
  %9 = load i8, i8* %serial.epil, align 8, !tbaa !26, !range !17
  %tobool22.not.epil = icmp eq i8 %9, 0
  br i1 %tobool22.not.epil, label %if.else24.epil, label %if.then23.epil

if.then23.epil:                                   ; preds = %for.body.epil
  %inc.epil = add nsw i32 %workers_to_wake.0182.unr, 1
  br label %for.cond.cleanup.loopexit

if.else24.epil:                                   ; preds = %for.body.epil
  %extent.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193.unr, i32 0, i32 6
  %10 = load i32, i32* %extent.epil, align 8, !tbaa !25
  %add28.epil = add nsw i32 %10, %workers_to_wake.0182.unr
  br label %for.cond.cleanup.loopexit

for.cond.cleanup.loopexit:                        ; preds = %if.else24.epil, %if.then23.epil, %for.cond.cleanup.loopexit.unr-lcssa
  %workers_to_wake.1.lcssa = phi i32 [ %workers_to_wake.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %inc.epil, %if.then23.epil ], [ %add28.epil, %if.else24.epil ]
  %add.lcssa = phi i32 [ %add.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add.epil, %if.then23.epil ], [ %add.epil, %if.else24.epil ]
  %stealable_jobs.1.lcssa = phi i8 [ %stealable_jobs.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %stealable_jobs.1.epil, %if.then23.epil ], [ %stealable_jobs.1.epil, %if.else24.epil ]
  %job_may_block.1.lcssa = phi i8 [ %job_may_block.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %job_may_block.1.epil, %if.then23.epil ], [ %job_may_block.1.epil, %if.else24.epil ]
  %spec.select.lcssa = phi i8 [ %spec.select.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %spec.select.epil, %if.then23.epil ], [ %spec.select.epil, %if.else24.epil ]
  %phi.bo = and i8 %stealable_jobs.1.lcssa, 1
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit, %if.end4
  %workers_to_wake.0.lcssa = phi i32 [ -1, %if.end4 ], [ %workers_to_wake.1.lcssa, %for.cond.cleanup.loopexit ]
  %stealable_jobs.0.lcssa = phi i8 [ 0, %if.end4 ], [ %phi.bo, %for.cond.cleanup.loopexit ]
  %job_has_acquires.0.lcssa = phi i8 [ 0, %if.end4 ], [ %spec.select.lcssa, %for.cond.cleanup.loopexit ]
  %job_may_block.0.lcssa = phi i8 [ 0, %if.end4 ], [ %job_may_block.1.lcssa, %for.cond.cleanup.loopexit ]
  %min_threads.0.lcssa = phi i32 [ 0, %if.end4 ], [ %add.lcssa, %for.cond.cleanup.loopexit ]
  %cmp31 = icmp eq %"struct.Halide::Runtime::Internal::work"* %task_parent, null
  br i1 %cmp31, label %if.then32, label %do.body61

for.body:                                         ; preds = %for.inc.1, %for.body.preheader.new
  %indvars.iv193 = phi i64 [ 0, %for.body.preheader.new ], [ %indvars.iv.next194.1, %for.inc.1 ]
  %min_threads.0187 = phi i32 [ 0, %for.body.preheader.new ], [ %add.1, %for.inc.1 ]
  %job_may_block.0185 = phi i8 [ 0, %for.body.preheader.new ], [ %job_may_block.1.1, %for.inc.1 ]
  %job_has_acquires.0184 = phi i8 [ 0, %for.body.preheader.new ], [ %spec.select.1, %for.inc.1 ]
  %stealable_jobs.0183 = phi i8 [ 0, %for.body.preheader.new ], [ %stealable_jobs.1.1, %for.inc.1 ]
  %workers_to_wake.0182 = phi i32 [ -1, %for.body.preheader.new ], [ %workers_to_wake.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.1, %for.inc.1 ]
  %min_threads5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 7
  %11 = load i32, i32* %min_threads5, align 4, !tbaa !30
  %cmp6 = icmp eq i32 %11, 0
  %add = add i32 %11, %min_threads.0187
  %num_semaphores = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 4
  %12 = load i32, i32* %num_semaphores, align 8, !tbaa !28
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 8
  %13 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool22.not = icmp eq i8 %13, 0
  br i1 %tobool22.not, label %if.else24, label %if.then23

if.then23:                                        ; preds = %for.body
  %inc = add nsw i32 %workers_to_wake.0182, 1
  br label %for.inc

if.else24:                                        ; preds = %for.body
  %extent = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv193, i32 0, i32 6
  %14 = load i32, i32* %extent, align 8, !tbaa !25
  %add28 = add nsw i32 %14, %workers_to_wake.0182
  br label %for.inc

for.inc:                                          ; preds = %if.else24, %if.then23
  %workers_to_wake.1 = phi i32 [ %inc, %if.then23 ], [ %add28, %if.else24 ]
  %indvars.iv.next194 = or i64 %indvars.iv193, 1
  %min_threads5.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 7
  %15 = load i32, i32* %min_threads5.1, align 4, !tbaa !30
  %cmp6.1 = icmp eq i32 %15, 0
  %add.1 = add i32 %15, %add
  %16 = or i1 %cmp6.1, %cmp6
  %stealable_jobs.1.1 = select i1 %16, i8 1, i8 %stealable_jobs.0183
  %17 = or i32 %15, %11
  %18 = icmp eq i32 %17, 0
  %job_may_block.1.1 = select i1 %18, i8 %job_may_block.0185, i8 1
  %num_semaphores.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 4
  %19 = load i32, i32* %num_semaphores.1, align 8, !tbaa !28
  %20 = or i32 %19, %12
  %21 = icmp eq i32 %20, 0
  %spec.select.1 = select i1 %21, i8 %job_has_acquires.0184, i8 1
  %serial.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 8
  %22 = load i8, i8* %serial.1, align 8, !tbaa !26, !range !17
  %tobool22.not.1 = icmp eq i8 %22, 0
  br i1 %tobool22.not.1, label %if.else24.1, label %if.then23.1

if.then32:                                        ; preds = %for.cond.cleanup
  %23 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %24 = and i8 %23, 1
  %25 = icmp eq i8 %24, 0
  %not. = xor i1 %25, true
  %add36 = zext i1 %not. to i32
  %min_threads.2 = add nsw i32 %min_threads.0.lcssa, %add36
  %26 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp38180 = icmp slt i32 %26, 256
  br i1 %cmp38180, label %land.rhs, label %do.end50

land.rhs:                                         ; preds = %if.then32, %while.body
  %27 = phi i32 [ %inc45, %while.body ], [ %26, %if.then32 ]
  %28 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %sub = add nsw i32 %28, -1
  %cmp39 = icmp slt i32 %27, %sub
  br i1 %cmp39, label %while.body, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %add40 = add nsw i32 %27, 1
  %29 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub41 = sub i32 %add40, %29
  %cmp42 = icmp slt i32 %sub41, %min_threads.2
  br i1 %cmp42, label %while.body, label %do.end50

while.body:                                       ; preds = %lor.rhs, %land.rhs
  %30 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc43 = add nsw i32 %30, 1
  store i32 %inc43, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %call44 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal13worker_threadEPv, i8* null) #17
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %inc45 = add nsw i32 %31, 1
  store i32 %inc45, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %idxprom46 = sext i32 %31 to i64
  %arrayidx47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %idxprom46
  store %struct.halide_thread* %call44, %struct.halide_thread** %arrayidx47, align 8, !tbaa !10
  %cmp38 = icmp slt i32 %31, 255
  br i1 %cmp38, label %land.rhs, label %do.end50, !llvm.loop !55

do.end50:                                         ; preds = %while.body, %lor.rhs, %if.then32
  br i1 %25, label %if.end77, label %if.then54

if.then54:                                        ; preds = %do.end50
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %inc55 = add nsw i32 %32, 1
  store i32 %inc55, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end77

do.body61:                                        ; preds = %for.cond.cleanup
  %min_threads63 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 0, i32 7
  %33 = load i32, i32* %min_threads63, align 4, !tbaa !30
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 8
  %34 = load i32, i32* %active_workers, align 8, !tbaa !35
  %mul = mul nsw i32 %34, %33
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub64 = sub nsw i32 %mul, %35
  %cmp65.not = icmp sgt i32 %min_threads.0.lcssa, %sub64
  br i1 %cmp65.not, label %if.then66, label %do.end69

if.then66:                                        ; preds = %do.body61
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.3, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end69

do.end69:                                         ; preds = %if.then66, %do.body61
  %36 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %37 = and i8 %36, 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %if.end77, label %if.then73

if.then73:                                        ; preds = %do.end69
  %39 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %inc75 = add nsw i32 %39, 1
  store i32 %inc75, i32* %threads_reserved, align 8, !tbaa !56
  br label %if.end77

if.end77:                                         ; preds = %if.then73, %do.end69, %if.then54, %do.end50
  br i1 %cmp181, label %for.body83.lr.ph, label %for.cond.cleanup82

for.body83.lr.ph:                                 ; preds = %if.end77
  %.promoted = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %40 = zext i32 %num_jobs to i64
  %xtraiter3 = and i64 %40, 1
  %lcmp.mod4.not = icmp eq i64 %xtraiter3, 0
  br i1 %lcmp.mod4.not, label %for.body83.prol.loopexit, label %for.body83.prol

for.body83.prol:                                  ; preds = %for.body83.lr.ph
  %indvars.iv.next.prol = add nsw i64 %40, -1
  %arrayidx85.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol
  %next_job.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %.promoted, %"struct.Halide::Runtime::Internal::work"** %next_job.prol, align 8, !tbaa !58
  %siblings.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.prol, align 8, !tbaa !38
  %sibling_count.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 4
  store i32 %num_jobs, i32* %sibling_count.prol, align 8, !tbaa !39
  %threads_reserved93.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.prol, i32 6
  store i32 0, i32* %threads_reserved93.prol, align 8, !tbaa !56
  br label %for.body83.prol.loopexit

for.body83.prol.loopexit:                         ; preds = %for.body83.prol, %for.body83.lr.ph
  %indvars.iv.unr = phi i64 [ %40, %for.body83.lr.ph ], [ %indvars.iv.next.prol, %for.body83.prol ]
  %arrayidx85192.unr = phi %"struct.Halide::Runtime::Internal::work"* [ %.promoted, %for.body83.lr.ph ], [ %arrayidx85.prol, %for.body83.prol ]
  %41 = icmp eq i32 %num_jobs, 1
  br i1 %41, label %for.cond80.for.cond.cleanup82_crit_edge, label %for.body83

for.cond80.for.cond.cleanup82_crit_edge:          ; preds = %for.body83, %for.body83.prol.loopexit
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %for.cond.cleanup82

for.cond.cleanup82:                               ; preds = %for.cond80.for.cond.cleanup82_crit_edge, %if.end77
  %42 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %tobool96 = icmp ne i32 %42, 0
  %43 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8
  %44 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8
  %cmp98 = icmp slt i32 %43, %44
  %45 = or i1 %tobool96, %cmp98
  %cmp102 = icmp sgt i32 %workers_to_wake.0.lcssa, %43
  %or.cond174 = or i1 %cmp102, %45
  %storemerge = select i1 %or.cond174, i32 %44, i32 %workers_to_wake.0.lcssa
  store i32 %storemerge, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  %46 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %47 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %cmp106 = icmp sgt i32 %46, %47
  br i1 %cmp106, label %if.then107, label %if.end111

for.body83:                                       ; preds = %for.body83.prol.loopexit, %for.body83
  %indvars.iv = phi i64 [ %indvars.iv.next.1, %for.body83 ], [ %indvars.iv.unr, %for.body83.prol.loopexit ]
  %arrayidx85192 = phi %"struct.Halide::Runtime::Internal::work"* [ %arrayidx85.1, %for.body83 ], [ %arrayidx85192.unr, %for.body83.prol.loopexit ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx85 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85192, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 4
  store i32 %num_jobs, i32* %sibling_count, align 8, !tbaa !39
  %threads_reserved93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next, i32 6
  store i32 0, i32* %threads_reserved93, align 8, !tbaa !56
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %arrayidx85.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1
  %next_job.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 2
  store %"struct.Halide::Runtime::Internal::work"* %arrayidx85, %"struct.Halide::Runtime::Internal::work"** %next_job.1, align 8, !tbaa !58
  %siblings.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 3
  store %"struct.Halide::Runtime::Internal::work"* %jobs, %"struct.Halide::Runtime::Internal::work"** %siblings.1, align 8, !tbaa !38
  %sibling_count.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 4
  store i32 %num_jobs, i32* %sibling_count.1, align 8, !tbaa !39
  %threads_reserved93.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next.1, i32 6
  store i32 0, i32* %threads_reserved93.1, align 8, !tbaa !56
  %cmp81.1 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp81.1, label %for.body83, label %for.cond80.for.cond.cleanup82_crit_edge, !llvm.loop !61

if.then107:                                       ; preds = %for.cond.cleanup82
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  %tobool108.not = icmp eq i8 %stealable_jobs.0.lcssa, 0
  br i1 %tobool108.not, label %if.end111, label %if.then109

if.then109:                                       ; preds = %if.then107
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %if.end111

if.end111:                                        ; preds = %if.then109, %if.then107, %for.cond.cleanup82
  %48 = or i8 %job_may_block.0.lcssa, %job_has_acquires.0.lcssa
  %49 = and i8 %48, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %if.end123, label %if.then115

if.then115:                                       ; preds = %if.end111
  br i1 %cmp31, label %if.else120, label %if.then117

if.then117:                                       ; preds = %if.then115
  %threads_reserved118 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %task_parent, i64 0, i32 6
  %51 = load i32, i32* %threads_reserved118, align 8, !tbaa !56
  %dec119 = add nsw i32 %51, -1
  store i32 %dec119, i32* %threads_reserved118, align 8, !tbaa !56
  br label %if.end123

if.else120:                                       ; preds = %if.then115
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %dec121 = add nsw i32 %52, -1
  store i32 %dec121, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end123

if.end123:                                        ; preds = %if.else120, %if.then117, %if.end111
  ret void

if.then23.1:                                      ; preds = %for.inc
  %inc.1 = add nsw i32 %workers_to_wake.1, 1
  br label %for.inc.1

if.else24.1:                                      ; preds = %for.inc
  %extent.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %jobs, i64 %indvars.iv.next194, i32 0, i32 6
  %53 = load i32, i32* %extent.1, align 8, !tbaa !25
  %add28.1 = add nsw i32 %53, %workers_to_wake.1
  br label %for.inc.1

for.inc.1:                                        ; preds = %if.else24.1, %if.then23.1
  %workers_to_wake.1.1 = phi i32 [ %inc.1, %if.then23.1 ], [ %add28.1, %if.else24.1 ]
  %indvars.iv.next194.1 = add nuw nsw i64 %indvars.iv193, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body, !llvm.loop !62
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %owned_job) local_unnamed_addr #0 {
entry:
  %active_workers.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 8
  %tobool.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %owned_job, null
  %extent.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 0, i32 6
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 9
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 5
  %siblings56 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 3
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 11
  %next_job10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %owned_job, i64 0, i32 2
  br label %while.cond

while.cond:                                       ; preds = %while.cond.backedge, %entry
  %spin_count.0 = phi i32 [ 0, %entry ], [ %spin_count.0.be, %while.cond.backedge ]
  br i1 %tobool.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %while.cond
  %0 = load i32, i32* %extent.i, align 8, !tbaa !25
  %tobool.not.i = icmp eq i32 %0, 0
  br i1 %tobool.not.i, label %cond.end, label %if.then

cond.false:                                       ; preds = %while.cond
  %1 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63, !range !17
  %tobool1.not = icmp eq i8 %1, 0
  br i1 %tobool1.not, label %do.end.thread, label %while.end316

cond.end:                                         ; preds = %cond.true
  %2 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %tobool2.i.not = icmp eq i32 %2, 0
  br i1 %tobool2.i.not, label %while.end316, label %if.then

if.then:                                          ; preds = %cond.end, %cond.true
  %3 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %4 = load i32, i32* %exit_status, align 4, !tbaa !34
  %cmp.not = icmp eq i32 %4, 0
  br i1 %cmp.not, label %if.else, label %if.then3

if.then3:                                         ; preds = %if.then
  %5 = load i32, i32* %active_workers.i, align 8, !tbaa !35
  %cmp4 = icmp eq i32 %5, 0
  br i1 %cmp4, label %while.cond6.preheader, label %do.end

while.cond6.preheader:                            ; preds = %if.then3
  %cmp7.not524 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, %owned_job
  br i1 %cmp7.not524, label %while.end, label %while.body8

while.body8:                                      ; preds = %while.cond6.preheader, %while.body8
  %job.0525 = phi %"struct.Halide::Runtime::Internal::work"* [ %6, %while.body8 ], [ %3, %while.cond6.preheader ]
  %next_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job, align 8, !tbaa !58
  %cmp7.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %6, %owned_job
  br i1 %cmp7.not, label %while.end.loopexit, label %while.body8, !llvm.loop !64

while.end.loopexit:                               ; preds = %while.body8
  %next_job.le = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.0525, i64 0, i32 2
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %while.cond6.preheader
  %prev_ptr.0.lcssa = phi %"struct.Halide::Runtime::Internal::work"** [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %while.cond6.preheader ], [ %next_job.le, %while.end.loopexit ]
  %7 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job10, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %7, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.0.lcssa, align 8, !tbaa !10
  store i32 0, i32* %extent.i, align 8, !tbaa !25
  br label %while.cond.backedge

if.else:                                          ; preds = %if.then
  %8 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job, align 8, !tbaa !40
  %tobool11.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %8, null
  br i1 %tobool11.not, label %do.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.else
  %exit_status13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %8, i64 0, i32 9
  %9 = load i32, i32* %exit_status13, align 4, !tbaa !34
  %cmp14.not = icmp eq i32 %9, 0
  br i1 %cmp14.not, label %do.end, label %if.then15

if.then15:                                        ; preds = %land.lhs.true
  store i32 %9, i32* %exit_status, align 4, !tbaa !34
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

do.end:                                           ; preds = %land.lhs.true, %if.else, %if.then3
  %tobool23.not527 = icmp eq %"struct.Halide::Runtime::Internal::work"* %3, null
  br i1 %tobool23.not527, label %if.then105, label %do.end27

do.end.thread:                                    ; preds = %cond.false
  %10 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  %tobool23.not527563 = icmp eq %"struct.Halide::Runtime::Internal::work"* %10, null
  br i1 %tobool23.not527563, label %if.else112, label %do.end27.us

do.end27.us:                                      ; preds = %do.end.thread, %cleanup.us
  %job.1529.us = phi %"struct.Halide::Runtime::Internal::work"* [ %29, %cleanup.us ], [ %10, %do.end.thread ]
  %prev_ptr.1528.us = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95.us, %cleanup.us ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end.thread ]
  %parent_job29.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 5
  %11 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29.us, align 8, !tbaa !40
  %cmp30.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %11, null
  br i1 %cmp30.us, label %if.then31.us, label %if.else32.us

if.else32.us:                                     ; preds = %do.end27.us
  %active_workers33.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 8
  %12 = load i32, i32* %active_workers33.us, align 8, !tbaa !35
  %cmp34.us = icmp eq i32 %12, 0
  %min_threads.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 0, i32 7
  %13 = load i32, i32* %min_threads.us, align 4, !tbaa !30
  br i1 %cmp34.us, label %if.then35.us, label %if.else38.us

if.else38.us:                                     ; preds = %if.else32.us
  %mul.us = mul nsw i32 %13, %12
  %threads_reserved42.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %14 = load i32, i32* %threads_reserved42.us, align 8, !tbaa !56
  %sub43.us = sub nsw i32 %mul.us, %14
  br label %if.end45.us

if.then35.us:                                     ; preds = %if.else32.us
  %threads_reserved.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %11, i64 0, i32 6
  %15 = load i32, i32* %threads_reserved.us, align 8, !tbaa !56
  %sub37.us = sub nsw i32 %13, %15
  br label %if.end45.us

if.then31.us:                                     ; preds = %do.end27.us
  %16 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add.us = add nsw i32 %16, 1
  %17 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub.us = sub i32 %add.us, %17
  br label %if.end45.us

if.end45.us:                                      ; preds = %if.then31.us, %if.then35.us, %if.else38.us
  %threads_available.0.us = phi i32 [ %sub.us, %if.then31.us ], [ %sub37.us, %if.then35.us ], [ %sub43.us, %if.else38.us ]
  %min_threads47.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 7
  %18 = load i32, i32* %min_threads47.us, align 4, !tbaa !30
  %cmp48.not.us = icmp sge i32 %threads_available.0.us, %18
  %serial.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 8
  %19 = load i8, i8* %serial.us, align 8, !tbaa !26, !range !17
  %tobool69.not.us = icmp eq i8 %19, 0
  br i1 %tobool69.not.us, label %if.end45.us.lor.end73.us_crit_edge, label %lor.rhs70.us

if.end45.us.lor.end73.us_crit_edge:               ; preds = %if.end45.us
  %.0 = and i1 %cmp48.not.us, true
  br label %lor.end73.us

lor.rhs70.us:                                     ; preds = %if.end45.us
  %active_workers71.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 8
  %20 = load i32, i32* %active_workers71.us, align 8, !tbaa !35
  %cmp72.us = icmp eq i32 %20, 0
  %.1 = and i1 %cmp48.not.us, %cmp72.us
  br label %lor.end73.us

lor.end73.us:                                     ; preds = %if.end45.us.lor.end73.us_crit_edge, %lor.rhs70.us
  %.phi = phi i1 [ %.0, %if.end45.us.lor.end73.us_crit_edge ], [ %.1, %lor.rhs70.us ]
  br i1 %.phi, label %if.then86.us, label %cleanup.us

if.then86.us:                                     ; preds = %lor.end73.us
  %next_semaphore.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 10
  %21 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %num_semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 4
  %22 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp14.i.us = icmp slt i32 %21, %22
  br i1 %cmp14.i.us, label %for.body.lr.ph.i.us, label %if.else127

for.body.lr.ph.i.us:                              ; preds = %if.then86.us
  %semaphores.i.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 0, i32 3
  br label %for.body.i.us

for.body.i.us:                                    ; preds = %for.inc.i.us, %for.body.lr.ph.i.us
  %23 = phi i32 [ %21, %for.body.lr.ph.i.us ], [ %inc.i.us, %for.inc.i.us ]
  %24 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i.us, align 8, !tbaa !27
  %idxprom.i.us = sext i32 %23 to i64
  %semaphore.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 0
  %25 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i.us, align 8, !tbaa !65
  %count.i.us = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %24, i64 %idxprom.i.us, i32 1
  %26 = load i32, i32* %count.i.us, align 8, !tbaa !67
  %call.i.us = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %25, i32 %26) #16
  br i1 %call.i.us, label %for.inc.i.us, label %cleanup.us

for.inc.i.us:                                     ; preds = %for.body.i.us
  %27 = load i32, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %inc.i.us = add nsw i32 %27, 1
  store i32 %inc.i.us, i32* %next_semaphore.i.us, align 8, !tbaa !36
  %28 = load i32, i32* %num_semaphores.i.us, align 8, !tbaa !28
  %cmp.i.us = icmp slt i32 %inc.i.us, %28
  br i1 %cmp.i.us, label %for.body.i.us, label %if.else127, !llvm.loop !68

cleanup.us:                                       ; preds = %for.body.i.us, %lor.end73.us
  %next_job95.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529.us, i64 0, i32 2
  %29 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95.us, align 8, !tbaa !58
  %tobool23.not.us = icmp eq %"struct.Halide::Runtime::Internal::work"* %29, null
  br i1 %tobool23.not.us, label %if.then103, label %do.end27.us

do.end27:                                         ; preds = %do.end, %cleanup
  %job.1529 = phi %"struct.Halide::Runtime::Internal::work"* [ %50, %cleanup ], [ %3, %do.end ]
  %prev_ptr.1528 = phi %"struct.Halide::Runtime::Internal::work"** [ %next_job95, %cleanup ], [ getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), %do.end ]
  %parent_job29 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 5
  %30 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job29, align 8, !tbaa !40
  %cmp30 = icmp eq %"struct.Halide::Runtime::Internal::work"* %30, null
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %do.end27
  %31 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %add = add nsw i32 %31, 1
  %32 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub = sub i32 %add, %32
  br label %if.end45

if.else32:                                        ; preds = %do.end27
  %active_workers33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 8
  %33 = load i32, i32* %active_workers33, align 8, !tbaa !35
  %cmp34 = icmp eq i32 %33, 0
  %min_threads = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 0, i32 7
  %34 = load i32, i32* %min_threads, align 4, !tbaa !30
  br i1 %cmp34, label %if.then35, label %if.else38

if.then35:                                        ; preds = %if.else32
  %threads_reserved = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %35 = load i32, i32* %threads_reserved, align 8, !tbaa !56
  %sub37 = sub nsw i32 %34, %35
  br label %if.end45

if.else38:                                        ; preds = %if.else32
  %mul = mul nsw i32 %34, %33
  %threads_reserved42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %30, i64 0, i32 6
  %36 = load i32, i32* %threads_reserved42, align 8, !tbaa !56
  %sub43 = sub nsw i32 %mul, %36
  br label %if.end45

if.end45:                                         ; preds = %if.else38, %if.then35, %if.then31
  %threads_available.0 = phi i32 [ %sub, %if.then31 ], [ %sub37, %if.then35 ], [ %sub43, %if.else38 ]
  %min_threads47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 7
  %37 = load i32, i32* %min_threads47, align 4, !tbaa !30
  %cmp48.not = icmp slt i32 %threads_available.0, %37
  %siblings = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 3
  %38 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings, align 8, !tbaa !38
  %39 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings56, align 8, !tbaa !38
  %cmp57 = icmp ne %"struct.Halide::Runtime::Internal::work"* %38, %39
  %cmp60 = icmp ne i32 %37, 0
  %serial = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 8
  %40 = load i8, i8* %serial, align 8, !tbaa !26, !range !17
  %tobool69.not = icmp eq i8 %40, 0
  br i1 %tobool69.not, label %if.end45.lor.end73_crit_edge, label %lor.rhs70

if.end45.lor.end73_crit_edge:                     ; preds = %if.end45
  %.not472.0 = xor i1 true, true
  br label %lor.end73

lor.rhs70:                                        ; preds = %if.end45
  %active_workers71 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 8
  %41 = load i32, i32* %active_workers71, align 8, !tbaa !35
  %cmp72 = icmp eq i32 %41, 0
  %.not472.1 = xor i1 %cmp72, true
  br label %lor.end73

lor.end73:                                        ; preds = %if.end45.lor.end73_crit_edge, %lor.rhs70
  %.not472.phi = phi i1 [ %.not472.0, %if.end45.lor.end73_crit_edge ], [ %.not472.1, %lor.rhs70 ]
  %.not = and i1 %cmp60, %cmp57
  %brmerge = or i1 %cmp48.not, %.not
  %brmerge473 = or i1 %brmerge, %.not472.phi
  br i1 %brmerge473, label %cleanup, label %if.then86

if.then86:                                        ; preds = %lor.end73
  %next_semaphore.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 10
  %42 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %num_semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 4
  %43 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp14.i = icmp slt i32 %42, %43
  br i1 %cmp14.i, label %for.body.lr.ph.i, label %if.else127

for.body.lr.ph.i:                                 ; preds = %if.then86
  %semaphores.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 0, i32 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.inc.i, %for.body.lr.ph.i
  %44 = phi i32 [ %42, %for.body.lr.ph.i ], [ %inc.i, %for.inc.i ]
  %45 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i, align 8, !tbaa !27
  %idxprom.i = sext i32 %44 to i64
  %semaphore.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 0
  %46 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i, align 8, !tbaa !65
  %count.i = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %45, i64 %idxprom.i, i32 1
  %47 = load i32, i32* %count.i, align 8, !tbaa !67
  %call.i = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %46, i32 %47) #16
  br i1 %call.i, label %for.inc.i, label %cleanup

for.inc.i:                                        ; preds = %for.body.i
  %48 = load i32, i32* %next_semaphore.i, align 8, !tbaa !36
  %inc.i = add nsw i32 %48, 1
  store i32 %inc.i, i32* %next_semaphore.i, align 8, !tbaa !36
  %49 = load i32, i32* %num_semaphores.i, align 8, !tbaa !28
  %cmp.i = icmp slt i32 %inc.i, %49
  br i1 %cmp.i, label %for.body.i, label %if.else127, !llvm.loop !68

cleanup:                                          ; preds = %for.body.i, %lor.end73
  %next_job95 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1529, i64 0, i32 2
  %50 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job95, align 8, !tbaa !58
  %tobool23.not = icmp eq %"struct.Halide::Runtime::Internal::work"* %50, null
  br i1 %tobool23.not, label %if.then103, label %do.end27

if.then103:                                       ; preds = %cleanup, %cleanup.us
  br i1 %tobool.not, label %if.else112, label %if.then105

if.then105:                                       ; preds = %do.end, %if.then103
  %inc = add nsw i32 %spin_count.0, 1
  %cmp106 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp106, label %if.then107, label %if.else108

if.then107:                                       ; preds = %if.then105
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %while.cond.backedge

if.else108:                                       ; preds = %if.then105
  %51 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %inc109 = add nsw i32 %51, 1
  store i32 %inc109, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  store i8 1, i8* %owner_is_sleeping, align 4, !tbaa !37
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %52 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  %dec = add nsw i32 %52, -1
  store i32 %dec, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 12), align 4, !tbaa !59
  br label %while.cond.backedge

if.else112:                                       ; preds = %if.then103, %do.end.thread
  %53 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %inc113 = add nsw i32 %53, 1
  store i32 %inc113, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %54 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %55 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 6), align 8, !tbaa !60
  %cmp114 = icmp sgt i32 %54, %55
  br i1 %cmp114, label %if.then115, label %if.else118

if.then115:                                       ; preds = %if.else112
  %dec116 = add nsw i32 %54, -1
  store i32 %dec116, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %56 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  %inc117 = add nsw i32 %56, 1
  store i32 %inc117, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 5), align 4, !tbaa !54
  br label %if.end124

if.else118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %spin_count.0, 1
  %cmp120 = icmp slt i32 %spin_count.0, 40
  br i1 %cmp120, label %if.then121, label %if.else122

if.then121:                                       ; preds = %if.else118
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_thread_yield() #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.else122:                                       ; preds = %if.else118
  tail call void @halide_cond_wait(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8), %struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end124

if.end124:                                        ; preds = %if.else122, %if.then121, %if.then115
  %spin_count.1 = phi i32 [ %spin_count.0, %if.then115 ], [ %inc119, %if.then121 ], [ %inc119, %if.else122 ]
  %57 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  %dec125 = add nsw i32 %57, -1
  store i32 %dec125, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 11), align 8, !tbaa !69
  br label %while.cond.backedge

if.else127:                                       ; preds = %if.then86, %if.then86.us, %for.inc.i, %for.inc.i.us
  %next_semaphore.i521 = phi i32* [ %next_semaphore.i.us, %for.inc.i.us ], [ %next_semaphore.i, %for.inc.i ], [ %next_semaphore.i.us, %if.then86.us ], [ %next_semaphore.i, %if.then86 ]
  %prev_ptr.1519 = phi %"struct.Halide::Runtime::Internal::work"** [ %prev_ptr.1528.us, %for.inc.i.us ], [ %prev_ptr.1528, %for.inc.i ], [ %prev_ptr.1528.us, %if.then86.us ], [ %prev_ptr.1528, %if.then86 ]
  %job.1515 = phi %"struct.Halide::Runtime::Internal::work"* [ %job.1529.us, %for.inc.i.us ], [ %job.1529, %for.inc.i ], [ %job.1529.us, %if.then86.us ], [ %job.1529, %if.then86 ]
  store i32 0, i32* %next_semaphore.i521, align 8, !tbaa !36
  %active_workers132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 8
  %58 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %inc133 = add nsw i32 %58, 1
  store i32 %inc133, i32* %active_workers132, align 8, !tbaa !35
  %parent_job134 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 5
  %59 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp135 = icmp eq %"struct.Halide::Runtime::Internal::work"* %59, null
  %min_threads138 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 7
  %60 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp135, label %if.then136, label %if.else143

if.then136:                                       ; preds = %if.else127
  %61 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %add139 = add nsw i32 %61, %60
  store i32 %add139, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end152

if.else143:                                       ; preds = %if.else127
  %threads_reserved147 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %59, i64 0, i32 6
  %62 = load i32, i32* %threads_reserved147, align 8, !tbaa !56
  %add148 = add nsw i32 %62, %60
  store i32 %add148, i32* %threads_reserved147, align 8, !tbaa !56
  br label %if.end152

if.end152:                                        ; preds = %if.else143, %if.then136
  %serial154 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 8
  %63 = load i8, i8* %serial154, align 8, !tbaa !26, !range !17
  %tobool155.not = icmp eq i8 %63, 0
  br i1 %tobool155.not, label %if.else198, label %if.then156

if.then156:                                       ; preds = %if.end152
  %next_job157 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %64 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %64, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %extent163 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %next_semaphore.i474 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 10
  %num_semaphores.i475 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 4
  %semaphores.i477 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 3
  %user_context = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %min = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %closure = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %65 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  br label %while.cond161.preheader

while.cond161.preheader:                          ; preds = %if.end172, %if.then156
  %iters.0538 = phi i32 [ 1, %if.then156 ], [ 0, %if.end172 ]
  %total_iters.0537 = phi i32 [ 0, %if.then156 ], [ %add178, %if.end172 ]
  %66 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub164531 = sub nsw i32 %66, %total_iters.0537
  %cmp165532 = icmp sgt i32 %sub164531, %iters.0538
  br i1 %cmp165532, label %land.rhs.preheader, label %while.end169

land.rhs.preheader:                               ; preds = %while.cond161.preheader
  %.pre = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %.pre560 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  br label %land.rhs

land.rhs:                                         ; preds = %while.body167, %land.rhs.preheader
  %67 = phi i32 [ %76, %while.body167 ], [ %66, %land.rhs.preheader ]
  %68 = phi i32 [ %77, %while.body167 ], [ %.pre560, %land.rhs.preheader ]
  %69 = phi i32 [ 0, %while.body167 ], [ %.pre, %land.rhs.preheader ]
  %iters.1533 = phi i32 [ %inc168, %while.body167 ], [ %iters.0538, %land.rhs.preheader ]
  %cmp14.i476 = icmp slt i32 %69, %68
  br i1 %cmp14.i476, label %for.body.i483, label %while.body167

for.body.i483:                                    ; preds = %land.rhs, %for.inc.i486
  %70 = phi i32 [ %inc.i484, %for.inc.i486 ], [ %69, %land.rhs ]
  %71 = load %struct.halide_semaphore_acquire_t*, %struct.halide_semaphore_acquire_t** %semaphores.i477, align 8, !tbaa !27
  %idxprom.i479 = sext i32 %70 to i64
  %semaphore.i480 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 0
  %72 = load %struct.halide_semaphore_t*, %struct.halide_semaphore_t** %semaphore.i480, align 8, !tbaa !65
  %count.i481 = getelementptr inbounds %struct.halide_semaphore_acquire_t, %struct.halide_semaphore_acquire_t* %71, i64 %idxprom.i479, i32 1
  %73 = load i32, i32* %count.i481, align 8, !tbaa !67
  %call.i482 = tail call zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %72, i32 %73) #16
  br i1 %call.i482, label %for.inc.i486, label %while.end169

for.inc.i486:                                     ; preds = %for.body.i483
  %74 = load i32, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc.i484 = add nsw i32 %74, 1
  store i32 %inc.i484, i32* %next_semaphore.i474, align 8, !tbaa !36
  %75 = load i32, i32* %num_semaphores.i475, align 8, !tbaa !28
  %cmp.i485 = icmp slt i32 %inc.i484, %75
  br i1 %cmp.i485, label %for.body.i483, label %while.body167.loopexit, !llvm.loop !68

while.body167.loopexit:                           ; preds = %for.inc.i486
  %.pre561 = load i32, i32* %extent163, align 8, !tbaa !25
  br label %while.body167

while.body167:                                    ; preds = %while.body167.loopexit, %land.rhs
  %76 = phi i32 [ %.pre561, %while.body167.loopexit ], [ %67, %land.rhs ]
  %77 = phi i32 [ %75, %while.body167.loopexit ], [ %68, %land.rhs ]
  store i32 0, i32* %next_semaphore.i474, align 8, !tbaa !36
  %inc168 = add nuw nsw i32 %iters.1533, 1
  %sub164 = sub nsw i32 %76, %total_iters.0537
  %cmp165 = icmp sgt i32 %sub164, %inc168
  br i1 %cmp165, label %land.rhs, label %if.end172, !llvm.loop !70

while.end169:                                     ; preds = %for.body.i483, %while.cond161.preheader
  %iters.1523 = phi i32 [ %iters.0538, %while.cond161.preheader ], [ %iters.1533, %for.body.i483 ]
  %cmp170 = icmp eq i32 %iters.1523, 0
  br i1 %cmp170, label %while.end179, label %if.end172

if.end172:                                        ; preds = %while.body167, %while.end169
  %iters.1523566 = phi i32 [ %iters.1523, %while.end169 ], [ %inc168, %while.body167 ]
  %78 = load i8*, i8** %user_context, align 8, !tbaa !33
  %79 = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %fn, align 8, !tbaa !20
  %80 = load i32, i32* %min, align 4, !tbaa !24
  %add175 = add nsw i32 %80, %total_iters.0537
  %81 = load i8*, i8** %closure, align 8, !tbaa !29
  %call177 = tail call i32 @halide_do_loop_task(i8* %78, i32 (i8*, i32, i32, i8*, i8*)* %79, i32 %add175, i32 %iters.1523566, i8* %81, i8* nonnull %65) #17
  %add178 = add nuw nsw i32 %iters.1523566, %total_iters.0537
  %cmp159 = icmp eq i32 %call177, 0
  br i1 %cmp159, label %while.cond161.preheader, label %while.end179, !llvm.loop !71

while.end179:                                     ; preds = %if.end172, %while.end169
  %cmp170568 = phi i1 [ true, %while.end169 ], [ false, %if.end172 ]
  %result.0.lcssa = phi i32 [ 0, %while.end169 ], [ %call177, %if.end172 ]
  %total_iters.0.lcssa = phi i32 [ %total_iters.0537, %while.end169 ], [ %add178, %if.end172 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %82 = load i32, i32* %min, align 4, !tbaa !24
  %add182 = add nsw i32 %82, %total_iters.0.lcssa
  store i32 %add182, i32* %min, align 4, !tbaa !24
  %83 = load i32, i32* %extent163, align 8, !tbaa !25
  %sub185 = sub nsw i32 %83, %total_iters.0.lcssa
  store i32 %sub185, i32* %extent163, align 8, !tbaa !25
  br i1 %cmp170568, label %if.else190, label %if.end230.thread505

if.end230.thread505:                              ; preds = %while.end179
  store i32 0, i32* %extent163, align 8, !tbaa !25
  br label %if.then238

if.else190:                                       ; preds = %while.end179
  %cmp193 = icmp sgt i32 %sub185, 0
  br i1 %cmp193, label %if.then194, label %if.end271

if.then194:                                       ; preds = %if.else190
  %84 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  store %"struct.Halide::Runtime::Internal::work"* %84, %"struct.Halide::Runtime::Internal::work"** %next_job157, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %job.1515, %"struct.Halide::Runtime::Internal::work"** getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 3), align 8, !tbaa !57
  br label %if.end271

if.else198:                                       ; preds = %if.end152
  %myjob.sroa.0.0..sroa_idx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 0
  %myjob.sroa.0.0.copyload = load i32 (i8*, i32, i32, i8*, i8*)*, i32 (i8*, i32, i32, i8*, i8*)** %myjob.sroa.0.0..sroa_idx, align 8, !tbaa.struct !72
  %myjob.sroa.4.0..sroa_idx327 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 1
  %myjob.sroa.4.0.copyload = load i8*, i8** %myjob.sroa.4.0..sroa_idx327, align 8, !tbaa.struct !74
  %myjob.sroa.6333.0..sroa_idx334 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 5
  %myjob.sroa.6333.0.copyload = load i32, i32* %myjob.sroa.6333.0..sroa_idx334, align 4
  %myjob.sroa.8340.0..sroa_idx341 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 1
  %myjob.sroa.8340.0.copyload = load i32 (i8*, i32, i8*)*, i32 (i8*, i32, i8*)** %myjob.sroa.8340.0..sroa_idx341, align 8, !tbaa.struct !75
  %myjob.sroa.10347.0..sroa_idx348 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 7
  %myjob.sroa.10347.0.copyload = load i8*, i8** %myjob.sroa.10347.0..sroa_idx348, align 8, !tbaa.struct !76
  %inc201 = add nsw i32 %myjob.sroa.6333.0.copyload, 1
  store i32 %inc201, i32* %myjob.sroa.6333.0..sroa_idx334, align 4, !tbaa !24
  %extent203 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %85 = load i32, i32* %extent203, align 8, !tbaa !25
  %dec204 = add nsw i32 %85, -1
  store i32 %dec204, i32* %extent203, align 8, !tbaa !25
  %cmp207 = icmp eq i32 %dec204, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.else198
  %next_job209 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 2
  %86 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %next_job209, align 8, !tbaa !58
  store %"struct.Halide::Runtime::Internal::work"* %86, %"struct.Halide::Runtime::Internal::work"** %prev_ptr.1519, align 8, !tbaa !10
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.else198
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %tobool211.not = icmp eq i32 (i8*, i32, i8*)* %myjob.sroa.8340.0.copyload, null
  br i1 %tobool211.not, label %if.else220, label %if.then212

if.then212:                                       ; preds = %if.end210
  %call219 = tail call i32 @halide_do_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i8*)* nonnull %myjob.sroa.8340.0.copyload, i32 %myjob.sroa.6333.0.copyload, i8* %myjob.sroa.4.0.copyload) #17
  br label %if.end230

if.else220:                                       ; preds = %if.end210
  %87 = bitcast %"struct.Halide::Runtime::Internal::work"* %job.1515 to i8*
  %call228 = tail call i32 @halide_do_loop_task(i8* %myjob.sroa.10347.0.copyload, i32 (i8*, i32, i32, i8*, i8*)* %myjob.sroa.0.0.copyload, i32 %myjob.sroa.6333.0.copyload, i32 1, i8* %myjob.sroa.4.0.copyload, i8* %87) #17
  br label %if.end230

if.end230:                                        ; preds = %if.else220, %if.then212
  %result.1 = phi i32 [ %call219, %if.then212 ], [ %call228, %if.else220 ]
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp237.not = icmp eq i32 %result.1, 0
  br i1 %cmp237.not, label %if.end271, label %if.then238

if.then238:                                       ; preds = %if.end230, %if.end230.thread505
  %result.2510 = phi i32 [ %result.0.lcssa, %if.end230.thread505 ], [ %result.1, %if.end230 ]
  %exit_status239 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  store i32 %result.2510, i32* %exit_status239, align 4, !tbaa !34
  %sibling_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 4
  %88 = load i32, i32* %sibling_count, align 8, !tbaa !39
  %cmp240540 = icmp sgt i32 %88, 0
  br i1 %cmp240540, label %do.end243.lr.ph, label %if.end271

do.end243.lr.ph:                                  ; preds = %if.then238
  %siblings244 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 3
  %89 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %siblings244, align 8, !tbaa !38
  %wide.trip.count = zext i32 %88 to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %90 = icmp eq i32 %88, 1
  br i1 %90, label %if.end271.loopexit.unr-lcssa, label %do.end243.lr.ph.new

do.end243.lr.ph.new:                              ; preds = %do.end243.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %do.end243

do.end243:                                        ; preds = %for.inc.1, %do.end243.lr.ph.new
  %indvars.iv = phi i64 [ 0, %do.end243.lr.ph.new ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541 = phi i8 [ 0, %do.end243.lr.ph.new ], [ %wake_owners.1.1, %for.inc.1 ]
  %niter = phi i64 [ %unroll_iter, %do.end243.lr.ph.new ], [ %niter.nsub.1, %for.inc.1 ]
  %exit_status245 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 9
  %91 = load i32, i32* %exit_status245, align 4, !tbaa !34
  %cmp246 = icmp eq i32 %91, 0
  br i1 %cmp246, label %if.then247, label %for.inc

if.then247:                                       ; preds = %do.end243
  store i32 %result.2510, i32* %exit_status245, align 4, !tbaa !34
  %92 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253 = icmp eq i32 %92, 0
  br i1 %cmp253, label %land.rhs254, label %land.end260

land.rhs254:                                      ; preds = %if.then247
  %owner_is_sleeping258 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv, i32 11
  %93 = load i8, i8* %owner_is_sleeping258, align 4, !tbaa !37, !range !17
  br label %land.end260

land.end260:                                      ; preds = %land.rhs254, %if.then247
  %94 = phi i8 [ 0, %if.then247 ], [ %93, %land.rhs254 ]
  %95 = and i8 %wake_owners.0541, 1
  %or = or i8 %94, %95
  br label %for.inc

for.inc:                                          ; preds = %land.end260, %do.end243
  %wake_owners.1 = phi i8 [ %or, %land.end260 ], [ %wake_owners.0541, %do.end243 ]
  %indvars.iv.next = or i64 %indvars.iv, 1
  %exit_status245.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 9
  %96 = load i32, i32* %exit_status245.1, align 4, !tbaa !34
  %cmp246.1 = icmp eq i32 %96, 0
  br i1 %cmp246.1, label %if.then247.1, label %for.inc.1

if.end271.loopexit.unr-lcssa:                     ; preds = %for.inc.1, %do.end243.lr.ph
  %wake_owners.1.lcssa.ph = phi i8 [ undef, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %indvars.iv.unr = phi i64 [ 0, %do.end243.lr.ph ], [ %indvars.iv.next.1, %for.inc.1 ]
  %wake_owners.0541.unr = phi i8 [ 0, %do.end243.lr.ph ], [ %wake_owners.1.1, %for.inc.1 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %if.end271, label %do.end243.epil

do.end243.epil:                                   ; preds = %if.end271.loopexit.unr-lcssa
  %exit_status245.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 9
  %97 = load i32, i32* %exit_status245.epil, align 4, !tbaa !34
  %cmp246.epil = icmp eq i32 %97, 0
  br i1 %cmp246.epil, label %if.then247.epil, label %if.end271

if.then247.epil:                                  ; preds = %do.end243.epil
  store i32 %result.2510, i32* %exit_status245.epil, align 4, !tbaa !34
  %98 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.epil = icmp eq i32 %98, 0
  br i1 %cmp253.epil, label %land.rhs254.epil, label %land.end260.epil

land.rhs254.epil:                                 ; preds = %if.then247.epil
  %owner_is_sleeping258.epil = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.unr, i32 11
  %99 = load i8, i8* %owner_is_sleeping258.epil, align 4, !tbaa !37, !range !17
  br label %land.end260.epil

land.end260.epil:                                 ; preds = %land.rhs254.epil, %if.then247.epil
  %100 = phi i8 [ 0, %if.then247.epil ], [ %99, %land.rhs254.epil ]
  %101 = and i8 %wake_owners.0541.unr, 1
  %or.epil = or i8 %100, %101
  br label %if.end271

if.end271:                                        ; preds = %if.end271.loopexit.unr-lcssa, %do.end243.epil, %land.end260.epil, %if.then238, %if.end230, %if.then194, %if.else190
  %wake_owners.2 = phi i8 [ 0, %if.end230 ], [ 0, %if.else190 ], [ 0, %if.then194 ], [ 0, %if.then238 ], [ %wake_owners.1.lcssa.ph, %if.end271.loopexit.unr-lcssa ], [ %or.epil, %land.end260.epil ], [ %wake_owners.0541.unr, %do.end243.epil ]
  %102 = load %"struct.Halide::Runtime::Internal::work"*, %"struct.Halide::Runtime::Internal::work"** %parent_job134, align 8, !tbaa !40
  %cmp273 = icmp eq %"struct.Halide::Runtime::Internal::work"* %102, null
  %103 = load i32, i32* %min_threads138, align 4, !tbaa !30
  br i1 %cmp273, label %if.then274, label %if.else281

if.then274:                                       ; preds = %if.end271
  %104 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  %sub277 = sub nsw i32 %104, %103
  store i32 %sub277, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 16), align 4, !tbaa !53
  br label %if.end290

if.else281:                                       ; preds = %if.end271
  %threads_reserved285 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %102, i64 0, i32 6
  %105 = load i32, i32* %threads_reserved285, align 8, !tbaa !56
  %sub286 = sub nsw i32 %105, %103
  store i32 %sub286, i32* %threads_reserved285, align 8, !tbaa !56
  br label %if.end290

if.end290:                                        ; preds = %if.else281, %if.then274
  %106 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %dec292 = add nsw i32 %106, -1
  store i32 %dec292, i32* %active_workers132, align 8, !tbaa !35
  %107 = and i8 %wake_owners.2, 1
  %tobool296.not = icmp eq i8 %107, 0
  br i1 %tobool296.not, label %lor.lhs.false297, label %if.then310

lor.lhs.false297:                                 ; preds = %if.end290
  %cmp299 = icmp eq i32 %dec292, 0
  br i1 %cmp299, label %land.lhs.true300, label %while.cond.backedge

land.lhs.true300:                                 ; preds = %lor.lhs.false297
  %extent302 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 0, i32 6
  %108 = load i32, i32* %extent302, align 8, !tbaa !25
  %cmp303 = icmp eq i32 %108, 0
  br i1 %cmp303, label %land.lhs.true307, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %land.lhs.true300
  %exit_status305 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 9
  %109 = load i32, i32* %exit_status305, align 4, !tbaa !34
  %cmp306.not = icmp eq i32 %109, 0
  br i1 %cmp306.not, label %while.cond.backedge, label %land.lhs.true307

land.lhs.true307:                                 ; preds = %lor.lhs.false304, %land.lhs.true300
  %owner_is_sleeping308 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %job.1515, i64 0, i32 11
  %110 = load i8, i8* %owner_is_sleeping308, align 4, !tbaa !37, !range !17
  %tobool309.not = icmp eq i8 %110, 0
  br i1 %tobool309.not, label %while.cond.backedge, label %if.then310

if.then310:                                       ; preds = %land.lhs.true307, %if.end290
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %if.then310, %land.lhs.true307, %lor.lhs.false304, %lor.lhs.false297, %if.end124, %if.else108, %if.then107, %if.then15, %while.end
  %spin_count.0.be = phi i32 [ %spin_count.0, %while.end ], [ %spin_count.0, %if.then15 ], [ %inc, %if.then107 ], [ %inc, %if.else108 ], [ %spin_count.1, %if.end124 ], [ 0, %if.then310 ], [ 0, %land.lhs.true307 ], [ 0, %lor.lhs.false304 ], [ 0, %lor.lhs.false297 ]
  br label %while.cond, !llvm.loop !77

while.end316:                                     ; preds = %cond.end, %cond.false
  ret void

if.then247.1:                                     ; preds = %for.inc
  store i32 %result.2510, i32* %exit_status245.1, align 4, !tbaa !34
  %111 = load i32, i32* %active_workers132, align 8, !tbaa !35
  %cmp253.1 = icmp eq i32 %111, 0
  br i1 %cmp253.1, label %land.rhs254.1, label %land.end260.1

land.rhs254.1:                                    ; preds = %if.then247.1
  %owner_is_sleeping258.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %89, i64 %indvars.iv.next, i32 11
  %112 = load i8, i8* %owner_is_sleeping258.1, align 4, !tbaa !37, !range !17
  br label %land.end260.1

land.end260.1:                                    ; preds = %land.rhs254.1, %if.then247.1
  %113 = phi i8 [ 0, %if.then247.1 ], [ %112, %land.rhs254.1 ]
  %114 = and i8 %wake_owners.1, 1
  %or.1 = or i8 %113, %114
  br label %for.inc.1

for.inc.1:                                        ; preds = %land.end260.1, %for.inc
  %wake_owners.1.1 = phi i8 [ %or.1, %land.end260.1 ], [ %wake_owners.1, %for.inc ]
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %if.end271.loopexit.unr-lcssa, label %do.end243, !llvm.loop !78
}

; Function Attrs: nounwind
define weak void @halide_mutex_unlock(%struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  %0 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %2 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %4 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #11
  %5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %7 = ptrtoint %struct.halide_mutex* %mutex to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %6, i64 %7) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #0 align 2 {
entry:
  %call = tail call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)***
  %state.i60 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  br label %while.cond

while.cond:                                       ; preds = %cleanup, %entry
  %data_location.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %head, %entry ], [ %data_location.1, %cleanup ]
  %prev.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ null, %entry ], [ %prev.1, %cleanup ]
  %data.0 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %0, %entry ], [ %data.1, %cleanup ]
  %retval.0 = phi i64 [ undef, %entry ], [ %retval.1, %cleanup ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, null
  br i1 %cmp.not, label %while.end22, label %while.body

while.body:                                       ; preds = %while.cond
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 1
  %2 = load atomic i64, i64* %sleep_address monotonic, align 8
  %cmp2 = icmp eq i64 %2, %addr
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 2
  %3 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next3, align 8, !tbaa !79
  br i1 %cmp2, label %if.then, label %cleanup

if.then:                                          ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.0, align 8, !tbaa !10
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp4 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %4, %data.0
  br i1 %cmp4, label %if.then5, label %while.cond7.preheader

while.cond7.preheader:                            ; preds = %if.then
  %cmp872.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %3, null
  br i1 %cmp872.not, label %if.end, label %while.body9

if.then5:                                         ; preds = %if.then
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.0, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end

while.body9:                                      ; preds = %while.cond7.preheader, %while.body9
  %data2.073 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %6, %while.body9 ], [ %3, %while.cond7.preheader ]
  %sleep_address10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 1
  %5 = load atomic i64, i64* %sleep_address10 monotonic, align 8
  %cmp11 = icmp eq i64 %5, %addr
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data2.073, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next12, align 8, !tbaa !79
  %cmp8 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, null
  %7 = or i1 %cmp11, %cmp8
  br i1 %7, label %if.end.loopexit, label %while.body9, !llvm.loop !88

if.end.loopexit:                                  ; preds = %while.body9
  %frombool = zext i1 %cmp11 to i8
  br label %if.end

if.end:                                           ; preds = %if.end.loopexit, %if.then5, %while.cond7.preheader
  %more_waiters.1 = phi i8 [ 0, %if.then5 ], [ 0, %while.cond7.preheader ], [ %frombool, %if.end.loopexit ]
  %tobool13 = icmp ne i8 %more_waiters.1, 0
  %vtable = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable, i64 2
  %8 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn, align 8
  %call14 = tail call i64 %8(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 1, i1 zeroext %tobool13) #16
  %unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 3
  store i64 %call14, i64* %unpark_info, align 8, !tbaa !89
  %mutex.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 0
  %call.i = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %9 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i61 = and i64 %9, 2
  %cmp.i62 = icmp ne i64 %and.i61, 0
  %cmp3.not.i63 = icmp ult i64 %9, 4
  %or.cond.i64 = or i1 %cmp3.not.i63, %cmp.i62
  br i1 %or.cond.i64, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, label %if.then.i65

if.then.i65:                                      ; preds = %if.end
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66: ; preds = %if.then.i65, %if.end
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.0, i64 0, i32 0, i32 1
  %call.i67 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i69 = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i) #16
  %10 = zext i8 %more_waiters.1 to i64
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %next3, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %data.0, %while.body ]
  %data.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.0, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %3, %while.body ]
  %retval.1 = phi i64 [ %10, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit66 ], [ %retval.0, %while.body ]
  br i1 %cmp2, label %cleanup27, label %while.cond, !llvm.loop !91

while.end22:                                      ; preds = %while.cond
  %vtable23 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)**, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*** %1, align 8, !tbaa !41
  %vfn24 = getelementptr inbounds i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vtable23, i64 2
  %11 = load i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)*, i64 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, i32, i1)** %vfn24, align 8
  %call25 = tail call i64 %11(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 0, i1 zeroext false) #16
  %12 = atomicrmw and i64* %state.i60, i64 -2 release
  %and.i = and i64 %12, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %12, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup27, label %if.then.i

if.then.i:                                        ; preds = %while.end22
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup27

cleanup27:                                        ; preds = %cleanup, %if.then.i, %while.end22
  %retval.2 = phi i64 [ 0, %while.end22 ], [ 0, %if.then.i ], [ %retval.1, %cleanup ]
  ret i64 %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) local_unnamed_addr #0 {
entry:
  %mul.i = mul i64 %addr, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit: ; preds = %if.then.i, %entry
  ret %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx
}

declare i32 @pthread_mutex_lock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %expected.0 = phi i64 [ %0, %entry ], [ %3, %if.end ]
  %and = and i64 %expected.0, 2
  %tobool.not = icmp ne i64 %and, 0
  %cmp = icmp ult i64 %expected.0, 4
  %or.cond = or i1 %cmp, %tobool.not
  br i1 %or.cond, label %cleanup75, label %if.end

if.end:                                           ; preds = %while.cond
  %or = or i64 %expected.0, 2
  %1 = cmpxchg weak i64* %state, i64 %expected.0, i64 %or acquire monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  %3 = extractvalue { i64, i1 } %1, 0
  br i1 %2, label %while.cond11, label %while.cond

while.cond11:                                     ; preds = %if.end, %cleanup70
  %.pn.pn = phi { i64, i1 } [ %.pn, %cleanup70 ], [ %1, %if.end ]
  %expected.3 = extractvalue { i64, i1 } %.pn.pn, 0
  %and13 = and i64 %expected.3, -4
  %4 = inttoptr i64 %and13 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  %tail14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %4, i64 0, i32 3
  %tail.0143 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %cmp16144 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0143, null
  br i1 %cmp16144, label %while.body17, label %while.end23

while.body17:                                     ; preds = %while.cond11, %do.end
  %current.0145 = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %5, %do.end ], [ %4, %while.cond11 ]
  %next18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next18, align 8, !tbaa !94
  %cmp19.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, null
  br i1 %cmp19.not, label %if.then20, label %do.end

if.then20:                                        ; preds = %while.body17
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.5, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then20, %while.body17
  %prev = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %current.0145, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev, align 8, !tbaa !95
  %tail22 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %5, i64 0, i32 3
  %tail.0 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail22, align 8, !tbaa !92
  %cmp16 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0, null
  br i1 %cmp16, label %while.body17, label %while.end23, !llvm.loop !96

while.end23:                                      ; preds = %do.end, %while.cond11
  %tail.0.lcssa = phi %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* [ %tail.0143, %while.cond11 ], [ %tail.0, %do.end ]
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %and25 = and i64 %expected.3, 1
  %tobool26.not = icmp eq i64 %and25, 0
  br i1 %tobool26.not, label %if.end35, label %if.then27

if.then27:                                        ; preds = %while.end23
  %and29 = and i64 %expected.3, -3
  %6 = cmpxchg weak i64* %state, i64 %expected.3, i64 %and29 acq_rel monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %cleanup75, label %cleanup70

if.end35:                                         ; preds = %while.end23
  %prev36 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 2
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %prev36, align 8, !tbaa !95
  %cmp37 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, null
  br i1 %cmp37, label %while.body41, label %if.else62

while.body41:                                     ; preds = %if.end35, %if.end47
  %expected.5146 = phi i64 [ %11, %if.end47 ], [ %expected.3, %if.end35 ]
  %and43 = and i64 %expected.5146, 1
  %9 = cmpxchg weak i64* %state, i64 %expected.5146, i64 %and43 acq_rel monotonic
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %if.end66, label %if.end47

if.end47:                                         ; preds = %while.body41
  %11 = extractvalue { i64, i1 } %9, 0
  %cmp49 = icmp ult i64 %11, 4
  br i1 %cmp49, label %while.body41, label %cleanup70, !llvm.loop !97

if.else62:                                        ; preds = %if.end35
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %8, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail14, align 8, !tbaa !92
  %12 = atomicrmw and i64* %state, i64 -3 release
  br label %if.end66

if.end66:                                         ; preds = %while.body41, %if.else62
  %mutex.i103 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 0
  %call.i104 = tail call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %tail.0.lcssa, i64 0, i32 0, i32 1
  %call.i101 = tail call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = tail call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i103) #16
  br label %cleanup75

cleanup70:                                        ; preds = %if.end47, %if.then27
  %.pn = phi { i64, i1 } [ %6, %if.then27 ], [ %9, %if.end47 ]
  fence acquire
  br label %while.cond11

cleanup75:                                        ; preds = %while.cond, %if.then27, %if.end66
  ret void
}

declare i32 @pthread_cond_signal(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_unlock(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %this) local_unnamed_addr #4 align 2 {
entry:
  %node = alloca %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", align 8
  %state = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %this, i64 0, i32 0
  %0 = load atomic i64, i64* %state monotonic, align 8
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i8*
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 2
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 0
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 0, i32 1
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 1
  %tail.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data", %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, i64 0, i32 3
  %2 = ptrtoint %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node to i64
  %3 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i to <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>*
  br label %while.cond.outer

while.cond.outer:                                 ; preds = %while.cond.outer.backedge, %entry
  %expected.0.ph = phi i64 [ %0, %entry ], [ %expected.0.ph.be, %while.cond.outer.backedge ]
  %spinner.sroa.0.0.ph = phi i32 [ 40, %entry ], [ %spinner.sroa.0.0.ph.be, %while.cond.outer.backedge ]
  %and46 = and i64 %expected.0.ph, 1
  %tobool.not47 = icmp eq i64 %and46, 0
  br i1 %tobool.not47, label %if.then, label %if.end4

if.then:                                          ; preds = %while.cond.outer, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %expected.048 = phi i64 [ %6, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit ], [ %expected.0.ph, %while.cond.outer ]
  %or = or i64 %expected.048, 1
  %4 = cmpxchg weak i64* %state, i64 %expected.048, i64 %or acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup23, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit: ; preds = %if.then
  %6 = extractvalue { i64, i1 } %4, 0
  %and = and i64 %6, 1
  %tobool.not = icmp eq i64 %and, 0
  br i1 %tobool.not, label %if.then, label %if.end4.loopexit

if.end4.loopexit:                                 ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit
  %7 = extractvalue { i64, i1 } %4, 0
  br label %if.end4

if.end4:                                          ; preds = %if.end4.loopexit, %while.cond.outer
  %expected.0.lcssa = phi i64 [ %expected.0.ph, %while.cond.outer ], [ %7, %if.end4.loopexit ]
  %cmp.not = icmp ugt i64 %expected.0.lcssa, 3
  %cmp.i = icmp sgt i32 %spinner.sroa.0.0.ph, 0
  %or.cond = and i1 %cmp.i, %cmp.not
  br i1 %or.cond, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, label %if.end9

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit: ; preds = %if.end4
  %cmp4.i = icmp sgt i32 %spinner.sroa.0.0.ph, 1
  br i1 %cmp4.i, label %if.then7, label %if.end9

if.then7:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit
  %dec.i = add nsw i32 %spinner.sroa.0.0.ph, -1
  call void @halide_thread_yield() #16
  %8 = load atomic i64, i64* %state monotonic, align 8
  br label %while.cond.outer.backedge

if.end9:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit, %if.end4
  %spinner.sroa.0.2 = phi i32 [ %spinner.sroa.0.0.ph, %if.end4 ], [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit ]
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1) #11
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %call.i.i29 = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  store <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*>* %3, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %and10 = and i64 %expected.0.lcssa, -4
  %cmp11 = icmp eq i64 %and10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.end9
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %node, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %tail.i, align 8, !tbaa !92
  br label %if.end13

if.else:                                          ; preds = %if.end9
  %9 = inttoptr i64 %and10 to %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"*
  store %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"* %9, %"struct.Halide::Runtime::Internal::Synchronization::word_lock_queue_data"** %next.i, align 8, !tbaa !94
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then12
  %and15 = and i64 %expected.0.lcssa, 3
  %or16 = or i64 %and15, %2
  %10 = cmpxchg weak i64* %state, i64 %expected.0.lcssa, i64 %or16 release monotonic
  %11 = extractvalue { i64, i1 } %10, 1
  br i1 %11, label %if.then19, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit: ; preds = %if.end13
  %12 = extractvalue { i64, i1 } %10, 0
  br label %if.end22

if.then19:                                        ; preds = %if.end13
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %13 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %13, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %if.then19, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %14 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %14, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %if.then19
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %15 = load atomic i64, i64* %state monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit
  %expected.3 = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %12, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %spinner.sroa.0.3 = phi i32 [ 40, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %spinner.sroa.0.2, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_release_relaxedEPyS4_S4_.exit ]
  %call.i.i = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1) #11
  br label %while.cond.outer.backedge

while.cond.outer.backedge:                        ; preds = %if.end22, %if.then7
  %expected.0.ph.be = phi i64 [ %8, %if.then7 ], [ %expected.3, %if.end22 ]
  %spinner.sroa.0.0.ph.be = phi i32 [ %dec.i, %if.then7 ], [ %spinner.sroa.0.3, %if.end22 ]
  br label %while.cond.outer

cleanup23:                                        ; preds = %if.then
  ret void
}

declare i32 @pthread_mutex_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_init(%struct.pthread_mutex_t*, i8*) local_unnamed_addr #1

declare i32 @pthread_cond_wait(%struct.pthread_mutex_t*, %struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_cond_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

declare i32 @pthread_mutex_destroy(%struct.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %lock_state, align 8, !tbaa !43
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 3
  ret i1 %cmp
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization21mutex_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* nonnull dereferenceable(16) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  %0 = select i1 %more_waiters, i64 2, i64 0
  %lock_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %this, i64 0, i32 1
  %1 = load i64*, i64** %lock_state, align 8, !tbaa !43
  store atomic i64 %0, i64* %1 release, align 8
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization15parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak void @halide_cond_broadcast(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !99
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !101
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5, i64 %0, i64 0) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond9broadcastEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_default_semaphore_try_acquire(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = load atomic i32, i32* %value acquire, align 4
  %sub12 = sub nsw i32 %0, %n
  %cmp113 = icmp sgt i32 %sub12, -1
  br i1 %cmp113, label %land.rhs, label %return

land.rhs:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit
  %sub15 = phi i32 [ %sub, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %sub12, %if.end ]
  %expected.014 = phi i32 [ %3, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit ], [ %0, %if.end ]
  %1 = cmpxchg weak i32* %value, i32 %expected.014, i32 %sub15 acq_rel monotonic
  %2 = extractvalue { i32, i1 } %1, 1
  br i1 %2, label %return.loopexit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit: ; preds = %land.rhs
  %3 = extractvalue { i32, i1 } %1, 0
  %sub = sub nsw i32 %3, %n
  %cmp1 = icmp sgt i32 %sub, -1
  br i1 %cmp1, label %land.rhs, label %return.loopexit

return.loopexit:                                  ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_130atomic_cas_weak_relacq_relaxedIiEEbPT_S6_S6_.exit, %land.rhs
  %4 = extractvalue { i32, i1 } %1, 1
  br label %return

return:                                           ; preds = %return.loopexit, %if.end, %entry
  %retval.0 = phi i1 [ true, %entry ], [ false, %if.end ], [ %4, %return.loopexit ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak void @halide_cond_wait(%struct.halide_mutex* %cond, %struct.halide_mutex* %mutex) local_unnamed_addr #4 {
entry:
  %control.i.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #11
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %1, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !102
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  %2 = bitcast %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i to %struct.halide_mutex**
  store %struct.halide_mutex* %mutex, %struct.halide_mutex** %2, align 8, !tbaa !104
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %4 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %3, i64 %4) #16
  %5 = ptrtoint %struct.halide_mutex* %mutex to i64
  %cmp.not.i = icmp eq i64 %call.i, %5
  %6 = getelementptr %struct.halide_mutex, %struct.halide_mutex* %mutex, i64 0, i32 0, i64 0
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %entry
  %7 = cmpxchg weak i64* %6, i64 0, i64 1 acquire monotonic
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.then.i
  %9 = load atomic i64, i64* %6 monotonic, align 8
  %10 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i to i8*
  %11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0, i32 0
  %lock_state2.i.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 1
  %12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i.i, i64 0, i32 0
  br label %while.cond.outer.i.i.i

while.cond.outer.i.i.i:                           ; preds = %while.cond.outer.i.i.i.backedge, %if.then.i.i
  %expected.0.ph.i.i.i = phi i64 [ %9, %if.then.i.i ], [ %expected.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %spinner.sroa.0.0.ph.i.i.i = phi i32 [ 40, %if.then.i.i ], [ %spinner.sroa.0.0.ph.i.i.i.be, %while.cond.outer.i.i.i.backedge ]
  %and55.i.i.i = and i64 %expected.0.ph.i.i.i, 1
  %tobool.not56.i.i.i = icmp eq i64 %and55.i.i.i, 0
  br i1 %tobool.not56.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i

if.then.i.i.i:                                    ; preds = %while.cond.outer.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %expected.057.i.i.i = phi i64 [ %15, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i ], [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ]
  %or.i.i.i = or i64 %expected.057.i.i.i, 1
  %13 = cmpxchg weak i64* %6, i64 %expected.057.i.i.i, i64 %or.i.i.i acquire monotonic
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then.i.i.i
  %15 = extractvalue { i64, i1 } %13, 0
  %and.i.i.i = and i64 %15, 1
  %tobool.not.i.i.i = icmp eq i64 %and.i.i.i, 0
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i, label %if.end4.i.i.i.loopexit

if.end4.i.i.i.loopexit:                           ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_acquire_relaxedEPyS4_S4_.exit.i.i.i
  %16 = extractvalue { i64, i1 } %13, 0
  br label %if.end4.i.i.i

if.end4.i.i.i:                                    ; preds = %if.end4.i.i.i.loopexit, %while.cond.outer.i.i.i
  %expected.0.lcssa.i.i.i = phi i64 [ %expected.0.ph.i.i.i, %while.cond.outer.i.i.i ], [ %16, %if.end4.i.i.i.loopexit ]
  %cmp.i.i.i.i = icmp sgt i32 %spinner.sroa.0.0.ph.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, label %if.end8.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i: ; preds = %if.end4.i.i.i
  %cmp4.i.not.i.i.i = icmp eq i32 %spinner.sroa.0.0.ph.i.i.i, 1
  br i1 %cmp4.i.not.i.i.i, label %if.end8.i.i.i, label %if.then6.i.i.i

if.then6.i.i.i:                                   ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i
  %dec.i.i.i.i = add nsw i32 %spinner.sroa.0.0.ph.i.i.i, -1
  call void @halide_thread_yield() #16
  %17 = load atomic i64, i64* %6 monotonic, align 8
  br label %while.cond.outer.i.i.i.backedge

if.end8.i.i.i:                                    ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i, %if.end4.i.i.i
  %spinner.sroa.0.152.i.i.i = phi i32 [ 0, %_ZN6Halide7Runtime8Internal15Synchronization12spin_control11should_spinEv.exit.i.i.i ], [ %spinner.sroa.0.0.ph.i.i.i, %if.end4.i.i.i ]
  %and9.i.i.i = and i64 %expected.0.lcssa.i.i.i, 2
  %cmp.i.i.i = icmp eq i64 %and9.i.i.i, 0
  br i1 %cmp.i.i.i, label %if.then10.i.i.i, label %if.end19.i.i.i

if.then10.i.i.i:                                  ; preds = %if.end8.i.i.i
  %or12.i.i.i = or i64 %expected.0.lcssa.i.i.i, 2
  %18 = cmpxchg weak i64* %6, i64 %expected.0.lcssa.i.i.i, i64 %or12.i.i.i monotonic monotonic
  %19 = extractvalue { i64, i1 } %18, 1
  br i1 %19, label %if.end19.i.i.i, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i: ; preds = %if.then10.i.i.i
  %20 = extractvalue { i64, i1 } %18, 0
  br label %while.cond.outer.i.i.i.backedge

if.end19.i.i.i:                                   ; preds = %if.then10.i.i.i, %if.end8.i.i.i
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #11
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8, !tbaa !41
  store i64* %6, i64** %lock_state2.i.i.i.i, align 8, !tbaa !43
  %call21.i.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %12, i64 %5) #16
  %cmp22.i.i.i = icmp eq i64 %call21.i.i.i, %5
  br i1 %cmp22.i.i.i, label %cleanup30.critedge.i.i.i, label %if.end24.i.i.i

if.end24.i.i.i:                                   ; preds = %if.end19.i.i.i
  %21 = load atomic i64, i64* %6 monotonic, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %while.cond.outer.i.i.i.backedge

while.cond.outer.i.i.i.backedge:                  ; preds = %if.end24.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i, %if.then6.i.i.i
  %expected.0.ph.i.i.i.be = phi i64 [ %20, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ %21, %if.end24.i.i.i ], [ %17, %if.then6.i.i.i ]
  %spinner.sroa.0.0.ph.i.i.i.be = phi i32 [ %spinner.sroa.0.152.i.i.i, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i.i.i ], [ 40, %if.end24.i.i.i ], [ %dec.i.i.i.i, %if.then6.i.i.i ]
  br label %while.cond.outer.i.i.i

cleanup30.critedge.i.i.i:                         ; preds = %if.end19.i.i.i
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.else.i:                                        ; preds = %entry
  %22 = load atomic i64, i64* %6 monotonic, align 8
  %and.i = and i64 %22, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %if.then2.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

if.then2.i:                                       ; preds = %if.else.i
  call void @halide_print(i8* null, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.5.6, i64 0, i64 0)) #16
  call void @abort() #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond4waitEPNS2_10fast_mutexE.exit: ; preds = %if.then.i.i.i, %if.then2.i, %if.else.i, %cleanup30.critedge.i.i.i, %if.then.i
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #11
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_loop_task(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i32, i8*, i8*)* %f, i32 %min, i32 %size, i8* %closure, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_task(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %idx, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control4parkEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr) local_unnamed_addr #4 align 2 {
entry:
  %queue_data = alloca %"struct.Halide::Runtime::Internal::Synchronization::queue_data", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %0) #11
  %should_park.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i.i, align 8, !tbaa !90
  %mutex2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 0
  %call.i.i = call i32 @pthread_mutex_init(%struct.pthread_mutex_t* nonnull %mutex2.i.i, i8* null) #16
  %condvar3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 0, i32 1
  %call4.i.i = call i32 @pthread_cond_init(%struct.pthread_mutex_t* nonnull %condvar3.i.i, i8* null) #16
  %sleep_address.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 1
  store i64 0, i64* %sleep_address.i, align 8, !tbaa !105
  %next.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  %unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, i64 0, i32 3
  store i64 0, i64* %unpark_info.i, align 8, !tbaa !89
  %call = call nonnull align 8 dereferenceable(24) %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* @_ZN6Halide7Runtime8Internal15Synchronization11lock_bucketEy(i64 %addr) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call2 = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %4 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %4, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %4, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.end:                                           ; preds = %entry
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next.i, align 8, !tbaa !79
  store i64 %addr, i64* %sleep_address.i, align 8, !tbaa !105
  store i8 1, i8* %should_park.i.i, align 8, !tbaa !90
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !109
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 2
  %6 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %6, i64 0, i32 2
  %head.sink = select i1 %cmp.not, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head.sink, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %queue_data, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %state.i23 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0, i32 0
  %7 = atomicrmw and i64* %state.i23, i64 -2 release
  %and.i24 = and i64 %7, 2
  %cmp.i25 = icmp ne i64 %and.i24, 0
  %cmp3.not.i26 = icmp ult i64 %7, 4
  %or.cond.i27 = or i1 %cmp3.not.i26, %cmp.i25
  br i1 %or.cond.i27, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, label %if.then.i28

if.then.i28:                                      ; preds = %if.end
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %call, i64 0, i32 0
  call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29: ; preds = %if.then.i28, %if.end
  %8 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)***
  %vtable9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*** %8, align 8, !tbaa !41
  %vfn10 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vtable9, i64 1
  %9 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*)** %vfn10, align 8
  call void %9(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this) #16
  %call.i = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %10 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not6.i = icmp eq i8 %10, 0
  br i1 %tobool.not6.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i

while.body.i:                                     ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29, %while.body.i
  %call3.i = call i32 @pthread_cond_wait(%struct.pthread_mutex_t* nonnull %condvar3.i.i, %struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  %11 = load i8, i8* %should_park.i.i, align 8, !tbaa !90, !range !17
  %tobool.not.i = icmp eq i8 %11, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, label %while.body.i, !llvm.loop !98

_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit: ; preds = %while.body.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit29
  %call5.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit, %if.then.i, %if.then
  %unpark_info.i.sink = phi i64* [ %unpark_info.i, %_ZN6Halide7Runtime8Internal15Synchronization13thread_parker4parkEv.exit ], [ %invalid_unpark_info.i, %if.then ], [ %invalid_unpark_info.i, %if.then.i ]
  %12 = load i64, i64* %unpark_info.i.sink, align 8, !tbaa !110
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  %call.i.i22 = call i32 @pthread_cond_destroy(%struct.pthread_mutex_t* nonnull %condvar3.i.i) #16
  %call2.i.i = call i32 @pthread_mutex_destroy(%struct.pthread_mutex_t* nonnull %mutex2.i.i) #16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %0) #11
  ret i64 %12
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %cmp = icmp eq i64 %1, 0
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store atomic i64 %3, i64* %0 monotonic, align 8
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp4.not = icmp eq i64 %1, %3
  br i1 %cmp4.not, label %cleanup, label %if.then5

if.then5:                                         ; preds = %if.else
  %invalid_unpark_info = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 %3, i64* %invalid_unpark_info, align 8, !tbaa !108
  br label %cleanup

cleanup:                                          ; preds = %if.then5, %if.else, %if.then
  %retval.0 = phi i1 [ false, %if.then5 ], [ true, %if.else ], [ true, %if.then ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control12before_sleepEv(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this) unnamed_addr #4 comdat align 2 {
entry:
  %control.i.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %0 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !104
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0, i64 0, i32 0
  %1 = cmpxchg weak i64* %state.i, i64 1, i64 0 release monotonic
  %2 = extractvalue { i64, i1 } %1, 1
  br i1 %2, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %3 = cmpxchg i64* %state.i, i64 1, i64 0 release monotonic
  %4 = extractvalue { i64, i1 } %3, 1
  br i1 %4, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit, label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i
  %5 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #11
  %6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !tbaa !41
  %lock_state2.i.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 1
  store i64* %state.i, i64** %lock_state2.i.i.i, align 8, !tbaa !43
  %7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::mutex_parking_control"* %control.i.i, i64 0, i32 0
  %8 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %0 to i64
  %call3.i.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %7, i64 %8) #16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex6unlockEv.exit: ; preds = %if.end.i.i, %if.then.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization20wait_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !102
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind
define linkonce i32 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control14unpark_requeueEyyy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i64 %addr_from, i64 %addr_to, i64 %unpark_info) local_unnamed_addr #4 align 2 {
entry:
  %buckets = alloca %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", align 8
  %action = alloca %"struct.Halide::Runtime::Internal::Synchronization::validate_action", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #11
  call void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %buckets, i64 %addr_from, i64 %addr_to) #17
  %1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  store i8 0, i8* %1, align 8, !tbaa !106
  %invalid_unpark_info.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 2
  store i64 0, i64* %invalid_unpark_info.i, align 8, !tbaa !108
  %2 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)***
  %vtable = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)**, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*** %2, align 8, !tbaa !41
  %3 = load i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)*, i1 (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*)** %vtable, align 8
  %call = call zeroext i1 %3(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) #16
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %cleanup

if.end:                                           ; preds = %entry
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %head = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 1
  %5 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head, align 8, !tbaa !10
  %cmp.not92 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %5, null
  br i1 %cmp.not92, label %if.end38, label %while.body

while.body:                                       ; preds = %if.end, %if.end22
  %wakeup.098 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end22 ], [ null, %if.end ]
  %requeue_tail.097 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.2, %if.end22 ], [ null, %if.end ]
  %requeue.096 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.3, %if.end22 ], [ null, %if.end ]
  %data.095 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %7, %if.end22 ], [ %5, %if.end ]
  %prev.094 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.1, %if.end22 ], [ null, %if.end ]
  %data_location.093 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.1, %if.end22 ], [ %head, %if.end ]
  %sleep_address = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 1
  %6 = load atomic i64, i64* %sleep_address monotonic, align 8
  %next2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, i64 0, i32 2
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next2, align 8, !tbaa !79
  %cmp3 = icmp eq i64 %6, %addr_from
  br i1 %cmp3, label %if.then4, label %if.end22

if.then4:                                         ; preds = %while.body
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %data_location.093, align 8, !tbaa !10
  %8 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %tail = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %8, i64 0, i32 2
  %9 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  %cmp6 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %9, %data.095
  br i1 %cmp6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.then4
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %prev.094, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail, align 8, !tbaa !85
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.then4
  %10 = load i8, i8* %1, align 8, !tbaa !106, !range !17
  %tobool = icmp ne i8 %10, 0
  %cmp11 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.098, null
  %or.cond = and i1 %cmp11, %tobool
  br i1 %or.cond, label %if.end22, label %if.else

if.else:                                          ; preds = %if.end10
  %cmp13 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.096, null
  br i1 %cmp13, label %if.end17, label %if.else15

if.else15:                                        ; preds = %if.else
  %next16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.097, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %data.095, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next16, align 8, !tbaa !79
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.else
  %requeue.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.else15 ], [ %data.095, %if.else ]
  store atomic i64 %addr_to, i64* %sleep_address monotonic, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.end17, %if.end10, %while.body
  %data_location.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %data_location.093, %if.end10 ], [ %data_location.093, %if.end17 ], [ %next2, %while.body ]
  %prev.1 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %prev.094, %if.end10 ], [ %prev.094, %if.end17 ], [ %data.095, %while.body ]
  %requeue.3 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue.096, %if.end10 ], [ %requeue.1, %if.end17 ], [ %requeue.096, %while.body ]
  %requeue_tail.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %requeue_tail.097, %if.end10 ], [ %data.095, %if.end17 ], [ %requeue_tail.097, %while.body ]
  %wakeup.2 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %data.095, %if.end10 ], [ %wakeup.098, %if.end17 ], [ %wakeup.098, %while.body ]
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %7, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !113

while.end:                                        ; preds = %if.end22
  %cmp23.not = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, null
  br i1 %cmp23.not, label %if.end38, label %if.then24

if.then24:                                        ; preds = %while.end
  %next25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* null, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next25, align 8, !tbaa !79
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %11 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %head26 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 1
  %12 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %head26, align 8, !tbaa !109
  %cmp27 = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %12, null
  br i1 %cmp27, label %if.end35, label %if.else31

if.else31:                                        ; preds = %if.then24
  %tail33 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  %13 = load %"struct.Halide::Runtime::Internal::Synchronization::queue_data"*, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail33, align 8, !tbaa !85
  %next34 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %13, i64 0, i32 2
  br label %if.end35

if.end35:                                         ; preds = %if.else31, %if.then24
  %next34.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** [ %next34, %if.else31 ], [ %head26, %if.then24 ]
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue.3, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %next34.sink, align 8, !tbaa !10
  %tail37 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %11, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %requeue_tail.2, %"struct.Halide::Runtime::Internal::Synchronization::queue_data"** %tail37, align 8, !tbaa !85
  br label %if.end38

if.end38:                                         ; preds = %if.end35, %while.end, %if.end
  %cmp23106 = phi i1 [ true, %if.end35 ], [ false, %while.end ], [ false, %if.end ]
  %wakeup.0.lcssa105 = phi %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* [ %wakeup.2, %if.end35 ], [ %wakeup.2, %while.end ], [ null, %if.end ]
  %cmp39 = icmp ne %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, null
  %14 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::parking_control"* %this to void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)***
  %vtable41 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)**, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*** %14, align 8, !tbaa !41
  %vfn42 = getelementptr inbounds void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vtable41, i64 3
  %15 = load void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)*, void (%"struct.Halide::Runtime::Internal::Synchronization::parking_control"*, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"*, i1, i1)** %vfn42, align 8
  call void %15(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %cmp39, i1 zeroext %cmp23106) #16
  br i1 %cmp39, label %if.then44, label %if.else48

if.then44:                                        ; preds = %if.end38
  %unpark_info45 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 3
  store i64 %unpark_info, i64* %unpark_info45, align 8, !tbaa !89
  %mutex.i89 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 0
  %call.i90 = call i32 @pthread_mutex_lock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  %should_park.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 2
  store i8 0, i8* %should_park.i, align 8, !tbaa !90
  %condvar.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::queue_data", %"struct.Halide::Runtime::Internal::Synchronization::queue_data"* %wakeup.0.lcssa105, i64 0, i32 0, i32 1
  %call.i88 = call i32 @pthread_cond_signal(%struct.pthread_mutex_t* nonnull %condvar.i) #16
  %call.i = call i32 @pthread_mutex_unlock(%struct.pthread_mutex_t* nonnull %mutex.i89) #16
  br label %if.end49

if.else48:                                        ; preds = %if.end38
  call void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) #17
  br label %if.end49

if.end49:                                         ; preds = %if.else48, %if.then44
  %16 = load i8, i8* %1, align 8
  %17 = and i8 %16, 1
  %tobool52 = icmp ne i8 %17, 0
  %18 = and i1 %cmp39, %tobool52
  %conv = zext i1 %18 to i32
  br label %cleanup

cleanup:                                          ; preds = %if.end49, %if.then
  %retval.0 = phi i32 [ %conv, %if.end49 ], [ 0, %if.then ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization16lock_bucket_pairEyy(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* noalias sret(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair") align 8 %agg.result, i64 %addr_from, i64 %addr_to) local_unnamed_addr #4 {
entry:
  %mul.i = mul i64 %addr_from, -7046029254386353131
  %shr.i = lshr i64 %mul.i, 54
  %mul.i37 = mul i64 %addr_to, -7046029254386353131
  %shr.i38 = lshr i64 %mul.i37, 54
  %cmp = icmp eq i64 %shr.i, %shr.i38
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i42 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0, i32 0
  %0 = cmpxchg weak i64* %state.i42, i64 0, i64 1 acquire monotonic
  %1 = extractvalue { i64, i1 } %0, 1
  br i1 %1, label %cleanup, label %if.then.i43

if.then.i43:                                      ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %cleanup

if.else:                                          ; preds = %entry
  %cmp2 = icmp ult i64 %shr.i, %shr.i38
  br i1 %cmp2, label %if.then3, label %if.else9

if.then3:                                         ; preds = %if.else
  %arrayidx5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %state.i52 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0, i32 0
  %2 = cmpxchg weak i64* %state.i52, i64 0, i64 1 acquire monotonic
  %3 = extractvalue { i64, i1 } %2, 1
  br i1 %3, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, label %if.then.i53

if.then.i53:                                      ; preds = %if.then3
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx5, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54: ; preds = %if.then.i53, %if.then3
  %state.i49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0, i32 0
  %4 = cmpxchg weak i64* %state.i49, i64 0, i64 1 acquire monotonic
  %5 = extractvalue { i64, i1 } %4, 1
  br i1 %5, label %cleanup, label %if.then.i50

if.then.i50:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54
  %mutex8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx6, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex8) #16
  br label %cleanup

if.else9:                                         ; preds = %if.else
  %arrayidx11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i38
  %arrayidx13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_table", %"struct.Halide::Runtime::Internal::Synchronization::hash_table"* @_ZN6Halide7Runtime8Internal15Synchronization5tableE, i64 0, i32 0, i64 %shr.i
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0, i32 0
  %6 = cmpxchg weak i64* %state.i39, i64 0, i64 1 acquire monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, label %if.then.i40

if.then.i40:                                      ; preds = %if.else9
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41

_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41: ; preds = %if.then.i40, %if.else9
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0, i32 0
  %8 = cmpxchg weak i64* %state.i, i64 0, i64 1 acquire monotonic
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %cleanup, label %if.then.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41
  %mutex15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock9lock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex15) #16
  br label %cleanup

cleanup:                                          ; preds = %if.then.i, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41, %if.then.i50, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54, %if.then.i43, %if.then
  %arrayidx13.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx5, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx5, %if.then.i50 ], [ %arrayidx13, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx13, %if.then.i ]
  %arrayidx11.sink = phi %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* [ %arrayidx, %if.then ], [ %arrayidx, %if.then.i43 ], [ %arrayidx6, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit54 ], [ %arrayidx6, %if.then.i50 ], [ %arrayidx11, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock4lockEv.exit41 ], [ %arrayidx11, %if.then.i ]
  %from2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx13.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from2.i, align 8, !tbaa !10
  %to3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %agg.result, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %arrayidx11.sink, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to3.i, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal15Synchronization18unlock_bucket_pairERNS2_11bucket_pairE(%"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* nonnull align 8 dereferenceable(16) %buckets) local_unnamed_addr #0 {
entry:
  %from = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %to = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair", %"struct.Halide::Runtime::Internal::Synchronization::bucket_pair"* %buckets, i64 0, i32 1
  %1 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %state.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %2 = atomicrmw and i64* %state.i, i64 -2 release
  %and.i = and i64 %2, 2
  %cmp.i = icmp ne i64 %and.i, 0
  %cmp3.not.i = icmp ult i64 %2, 4
  %or.cond.i = or i1 %cmp3.not.i, %cmp.i
  br i1 %or.cond.i, label %if.end15, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex) #16
  br label %if.end15

if.else:                                          ; preds = %entry
  %cmp4 = icmp ugt %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, %1
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %state.i25 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0, i32 0
  %3 = atomicrmw and i64* %state.i25, i64 -2 release
  %and.i26 = and i64 %3, 2
  %cmp.i27 = icmp ne i64 %and.i26, 0
  %cmp3.not.i28 = icmp ult i64 %3, 4
  %or.cond.i29 = or i1 %cmp3.not.i28, %cmp.i27
  br i1 %or.cond.i29, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, label %if.then.i30

if.then.i30:                                      ; preds = %if.then5
  %mutex7 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %0, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex7) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31: ; preds = %if.then.i30, %if.then5
  %4 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %to, align 8, !tbaa !114
  %state.i32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0, i32 0
  %5 = atomicrmw and i64* %state.i32, i64 -2 release
  %and.i33 = and i64 %5, 2
  %cmp.i34 = icmp ne i64 %and.i33, 0
  %cmp3.not.i35 = icmp ult i64 %5, 4
  %or.cond.i36 = or i1 %cmp3.not.i35, %cmp.i34
  br i1 %or.cond.i36, label %if.end15, label %if.then.i37

if.then.i37:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31
  %mutex9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %4, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex9) #16
  br label %if.end15

if.else10:                                        ; preds = %if.else
  %state.i39 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0, i32 0
  %6 = atomicrmw and i64* %state.i39, i64 -2 release
  %and.i40 = and i64 %6, 2
  %cmp.i41 = icmp ne i64 %and.i40, 0
  %cmp3.not.i42 = icmp ult i64 %6, 4
  %or.cond.i43 = or i1 %cmp3.not.i42, %cmp.i41
  br i1 %or.cond.i43, label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, label %if.then.i44

if.then.i44:                                      ; preds = %if.else10
  %mutex12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %1, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex12) #16
  br label %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45

_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45: ; preds = %if.then.i44, %if.else10
  %7 = load %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"*, %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"** %from, align 8, !tbaa !111
  %state.i46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0, i32 0
  %8 = atomicrmw and i64* %state.i46, i64 -2 release
  %and.i47 = and i64 %8, 2
  %cmp.i48 = icmp ne i64 %and.i47, 0
  %cmp3.not.i49 = icmp ult i64 %8, 4
  %or.cond.i50 = or i1 %cmp3.not.i49, %cmp.i48
  br i1 %or.cond.i50, label %if.end15, label %if.then.i51

if.then.i51:                                      ; preds = %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45
  %mutex14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket", %"struct.Halide::Runtime::Internal::Synchronization::hash_bucket"* %7, i64 0, i32 0
  tail call void @_ZN6Halide7Runtime8Internal15Synchronization9word_lock11unlock_fullEv(%"class.Halide::Runtime::Internal::Synchronization::word_lock"* nonnull dereferenceable(8) %mutex14) #16
  br label %if.end15

if.end15:                                         ; preds = %if.then.i51, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit45, %if.then.i37, %_ZN6Halide7Runtime8Internal15Synchronization9word_lock6unlockEv.exit31, %if.then.i, %if.then
  ret void
}

; Function Attrs: nounwind
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #4 comdat align 2 {
entry:
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !99
  %1 = load atomic i64, i64* %0 monotonic, align 8
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %3 = ptrtoint %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2 to i64
  %cmp.not = icmp eq i64 %1, %3
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  store atomic i64 0, i64* %0 monotonic, align 8
  %4 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %4, i64 0, i32 0
  %5 = load atomic i64, i64* %state.i monotonic, align 8
  %and11.i = and i64 %5, 1
  %tobool.not12.i = icmp eq i64 %and11.i, 0
  br i1 %tobool.not12.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

if.end.i:                                         ; preds = %if.end, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i
  %val.013.i = phi i64 [ %8, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ %5, %if.end ]
  %or.i = or i64 %val.013.i, 2
  %6 = cmpxchg weak i64* %state.i, i64 %val.013.i, i64 %or.i monotonic monotonic
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i

_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i: ; preds = %if.end.i
  %8 = extractvalue { i64, i1 } %6, 0
  %and.i = and i64 %8, 1
  %tobool.not.i = icmp eq i64 %and.i, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, label %if.end.i

_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit: ; preds = %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i, %if.end.i, %if.end
  %tobool.not.lcssa.i = phi i8 [ 1, %if.end ], [ 1, %_ZN6Halide7Runtime8Internal15Synchronization12_GLOBAL__N_131atomic_cas_weak_relaxed_relaxedEPyS4_S4_.exit.i ], [ 0, %if.end.i ]
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  store i8 %tobool.not.lcssa.i, i8* %unpark_one, align 8, !tbaa !106
  br label %cleanup

cleanup:                                          ; preds = %_ZN6Halide7Runtime8Internal15Synchronization10fast_mutex21make_parked_if_lockedEv.exit, %entry
  ret i1 %cmp.not
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  ret i64 0
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr void @_ZN6Halide7Runtime8Internal15Synchronization25broadcast_parking_control16requeue_callbackERKNS2_15validate_actionEbb(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action, i1 zeroext %one_to_wake, i1 zeroext %some_requeued) unnamed_addr #2 comdat align 2 {
entry:
  %unpark_one = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::validate_action", %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* %action, i64 0, i32 0
  %0 = load i8, i8* %unpark_one, align 8, !tbaa !106, !range !17
  %tobool.not = icmp ne i8 %0, 0
  %1 = and i1 %tobool.not, %some_requeued
  br i1 %1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %mutex = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 2
  %2 = load %"class.Halide::Runtime::Internal::Synchronization::word_lock"*, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex, align 8, !tbaa !101
  %state.i = getelementptr inbounds %"class.Halide::Runtime::Internal::Synchronization::word_lock", %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, i64 0, i32 0
  %3 = atomicrmw or i64* %state.i, i64 2 monotonic
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() local_unnamed_addr #0 {
entry:
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.end, label %cond.true

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #16
  %tobool2.not = icmp eq i8* %call1, null
  br i1 %tobool2.not, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.end, %entry
  %threads_str.010 = phi i8* [ %call1, %if.end ], [ %call, %entry ]
  %call3 = tail call i32 @atoi(i8* nonnull %threads_str.010) #16
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = tail call i32 @halide_host_cpu_count() #16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call3, %cond.true ], [ %call4, %cond.false ]
  ret i32 %cond
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal13worker_threadEPv(i8* %arg) #0 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = bitcast i8* %arg to %"struct.Halide::Runtime::Internal::work"*
  tail call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* %0) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_thread* @halide_spawn_thread(void (i8*)* %f, i8* %closure) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @malloc(i64 24) #16
  %f1 = bitcast i8* %call to void (i8*)**
  store void (i8*)* %f, void (i8*)** %f1, align 8, !tbaa !115
  %closure2 = getelementptr inbounds i8, i8* %call, i64 8
  %0 = bitcast i8* %closure2 to i8**
  store i8* %closure, i8** %0, align 8, !tbaa !117
  %handle = getelementptr inbounds i8, i8* %call, i64 16
  %1 = bitcast i8* %handle to i64*
  store i64 0, i64* %1, align 8, !tbaa !118
  %call4 = tail call i32 @pthread_create(i64* nonnull %1, i8* null, i8* (i8*)* nonnull @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv, i8* %call) #16
  %2 = bitcast i8* %call to %struct.halide_thread*
  ret %struct.halide_thread* %2
}

; Function Attrs: nounwind mustprogress
define linkonce i8* @_ZN6Halide7Runtime8Internal19spawn_thread_helperEPv(i8* %arg) #0 {
entry:
  %f = bitcast i8* %arg to void (i8*)**
  %0 = load void (i8*)*, void (i8*)** %f, align 8, !tbaa !115
  %closure = getelementptr inbounds i8, i8* %arg, i64 8
  %1 = bitcast i8* %closure to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !117
  tail call void %0(i8* %2) #16
  ret i8* null
}

declare i32 @pthread_create(i64*, i8*, i8* (i8*)*, i8*) local_unnamed_addr #1

declare i8* @getenv(i8*) local_unnamed_addr #1

declare i32 @atoi(i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #0 {
entry:
  %conv = sext i32 %num_tasks to i64
  %0 = alloca %"struct.Halide::Runtime::Internal::work", i64 %conv, align 8
  %cmp76 = icmp sgt i32 %num_tasks, 0
  br i1 %cmp76, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  %num_tasks.addr.0.lcssa = phi i32 [ %num_tasks, %entry ], [ %num_tasks.addr.1, %for.inc ]
  %cmp17 = icmp eq i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp17, label %cleanup, label %if.end19

for.body:                                         ; preds = %entry, %for.inc
  %indvars.iv82 = phi i64 [ %indvars.iv.next83, %for.inc ], [ 0, %entry ]
  %num_tasks.addr.078 = phi i32 [ %num_tasks.addr.1, %for.inc ], [ %num_tasks, %entry ]
  %tasks.addr.077 = phi %struct.halide_parallel_task_t* [ %tasks.addr.1, %for.inc ], [ %tasks, %entry ]
  %extent = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 0, i32 6
  %1 = load i32, i32* %extent, align 8, !tbaa !119
  %cmp1 = icmp slt i32 %1, 1
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %dec = add nsw i32 %num_tasks.addr.078, -1
  br label %for.inc

if.end:                                           ; preds = %for.body
  %incdec.ptr = getelementptr inbounds %struct.halide_parallel_task_t, %struct.halide_parallel_task_t* %tasks.addr.077, i64 1
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82
  %2 = bitcast %"struct.Halide::Runtime::Internal::work"* %arrayidx to i8*
  %3 = bitcast %struct.halide_parallel_task_t* %tasks.addr.077 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %2, i8* nonnull align 8 dereferenceable(56) %3, i64 56, i1 false), !tbaa.struct !120
  %task_fn = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 1
  store i32 (i8*, i32, i8*)* null, i32 (i8*, i32, i8*)** %task_fn, align 8, !tbaa !32
  %user_context6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 7
  store i8* %user_context, i8** %user_context6, align 8, !tbaa !33
  %exit_status = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 9
  store i32 0, i32* %exit_status, align 4, !tbaa !34
  %active_workers = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 8
  store i32 0, i32* %active_workers, align 8, !tbaa !35
  %next_semaphore = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 10
  store i32 0, i32* %next_semaphore, align 8, !tbaa !36
  %owner_is_sleeping = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 11
  store i8 0, i8* %owner_is_sleeping, align 4, !tbaa !37
  %parent_job = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv82, i32 5
  %4 = bitcast %"struct.Halide::Runtime::Internal::work"** %parent_job to i8**
  store i8* %task_parent, i8** %4, align 8, !tbaa !40
  br label %for.inc

for.inc:                                          ; preds = %if.end, %if.then
  %tasks.addr.1 = phi %struct.halide_parallel_task_t* [ %tasks.addr.077, %if.then ], [ %incdec.ptr, %if.end ]
  %num_tasks.addr.1 = phi i32 [ %dec, %if.then ], [ %num_tasks.addr.078, %if.end ]
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %5 = sext i32 %num_tasks.addr.1 to i64
  %cmp = icmp slt i64 %indvars.iv.next83, %5
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !121

if.end19:                                         ; preds = %for.cond.cleanup
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %6 = bitcast i8* %task_parent to %"struct.Halide::Runtime::Internal::work"*
  call void @_ZN6Halide7Runtime8Internal27enqueue_work_already_lockedEiPNS1_4workES3_(i32 %num_tasks.addr.0.lcssa, %"struct.Halide::Runtime::Internal::work"* nonnull %0, %"struct.Halide::Runtime::Internal::work"* %6) #17
  %cmp2373 = icmp sgt i32 %num_tasks.addr.0.lcssa, 0
  br i1 %cmp2373, label %for.body25.preheader, label %for.cond.cleanup24

for.body25.preheader:                             ; preds = %if.end19
  %wide.trip.count = zext i32 %num_tasks.addr.0.lcssa to i64
  br label %for.body25

for.cond.cleanup24:                               ; preds = %for.body25, %if.end19
  %exit_status20.0.lcssa = phi i32 [ 0, %if.end19 ], [ %spec.select, %for.body25 ]
  call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %cleanup

for.body25:                                       ; preds = %for.body25, %for.body25.preheader
  %indvars.iv = phi i64 [ 0, %for.body25.preheader ], [ %indvars.iv.next, %for.body25 ]
  %exit_status20.074 = phi i32 [ 0, %for.body25.preheader ], [ %spec.select, %for.body25 ]
  %add.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv
  call void @_ZN6Halide7Runtime8Internal28worker_thread_already_lockedEPNS1_4workE(%"struct.Halide::Runtime::Internal::work"* nonnull %add.ptr) #17
  %exit_status28 = getelementptr inbounds %"struct.Halide::Runtime::Internal::work", %"struct.Halide::Runtime::Internal::work"* %0, i64 %indvars.iv, i32 9
  %7 = load i32, i32* %exit_status28, align 4, !tbaa !34
  %cmp29.not = icmp eq i32 %7, 0
  %spec.select = select i1 %cmp29.not, i32 %exit_status20.074, i32 %7
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup24, label %for.body25, !llvm.loop !122

cleanup:                                          ; preds = %for.cond.cleanup24, %for.cond.cleanup
  %retval.0 = phi i32 [ %exit_status20.0.lcssa, %for.cond.cleanup24 ], [ 0, %for.cond.cleanup ]
  ret i32 %retval.0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_semaphore_init(%struct.halide_semaphore_t* %s, i32 %n) #2 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  store atomic i32 %n, i32* %value release, align 4
  ret i32 %n
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_semaphore_release(%struct.halide_semaphore_t* %s, i32 %n) #0 {
entry:
  %value = bitcast %struct.halide_semaphore_t* %s to i32*
  %0 = atomicrmw add i32* %value, i32 %n acq_rel
  %cmp = icmp eq i32 %0, 0
  %cmp1 = icmp ne i32 %n, 0
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %add = add nsw i32 %0, %n
  ret i32 %add
}

; Function Attrs: nounwind mustprogress
define weak void @halide_thread_pool_cleanup() #0 {
entry:
  tail call void @halide_shutdown_thread_pool() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_shutdown_thread_pool() local_unnamed_addr #0 {
entry:
  %0 = load i8, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 15), align 1, !tbaa !45, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  store i8 1, i8* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 14), align 8, !tbaa !63
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 10)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 8)) #17
  tail call void @halide_cond_broadcast(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 9)) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %cmp4 = icmp sgt i32 %1, 0
  br i1 %cmp4, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %call.i = tail call i8* @memset(i8* nonnull bitcast (i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 2) to i8*), i32 0, i64 2116) #16
  br label %if.end

for.body:                                         ; preds = %if.then, %for.body
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.then ]
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 13, i64 %indvars.iv
  %2 = load %struct.halide_thread*, %struct.halide_thread** %arrayidx, align 8, !tbaa !10
  tail call void @halide_join_thread(%struct.halide_thread* %2) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %3 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 4), align 8, !tbaa !52
  %4 = sext i32 %3 to i64
  %cmp = icmp slt i64 %indvars.iv.next, %4
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !123

if.end:                                           ; preds = %for.cond.cleanup, %entry
  ret void
}

declare i8* @memset(i8*, i32, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_join_thread(%struct.halide_thread* %thread_arg) local_unnamed_addr #0 {
entry:
  %ret = alloca i8*, align 8
  %0 = bitcast %struct.halide_thread* %thread_arg to %"struct.Halide::Runtime::Internal::spawned_thread"*
  %1 = bitcast i8** %ret to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #11
  store i8* null, i8** %ret, align 8, !tbaa !10
  %handle = getelementptr inbounds %"struct.Halide::Runtime::Internal::spawned_thread", %"struct.Halide::Runtime::Internal::spawned_thread"* %0, i64 0, i32 2
  %2 = load i64, i64* %handle, align 8, !tbaa !118
  %call = call i32 @pthread_join(i64 %2, i8** nonnull %ret) #16
  %3 = bitcast %struct.halide_thread* %thread_arg to i8*
  call void @free(i8* %3) #16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #11
  ret void
}

declare i32 @pthread_join(i64, i8**) local_unnamed_addr #1

; Function Attrs: nounwind
define weak void @halide_cond_signal(%struct.halide_mutex* %cond) local_unnamed_addr #4 {
entry:
  %control.i = alloca %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", align 8
  %state.i = getelementptr %struct.halide_mutex, %struct.halide_mutex* %cond, i64 0, i32 0, i64 0
  %0 = load atomic i64, i64* %state.i monotonic, align 8
  %cmp.i = icmp eq i64 %0, 0
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit, label %if.end.i

if.end.i:                                         ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #11
  %2 = inttoptr i64 %0 to %"class.Halide::Runtime::Internal::Synchronization::word_lock"*
  %3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8, !tbaa !41
  %cond_state2.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 1
  store i64* %state.i, i64** %cond_state2.i.i, align 8, !tbaa !124
  %mutex3.i.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 2
  store %"class.Halide::Runtime::Internal::Synchronization::word_lock"* %2, %"class.Halide::Runtime::Internal::Synchronization::word_lock"** %mutex3.i.i, align 8, !tbaa !126
  %4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %control.i, i64 0, i32 0
  %5 = ptrtoint %struct.halide_mutex* %cond to i64
  %call.i = call i64 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control10unpark_oneEy(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %4, i64 %5) #16
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #11
  br label %_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit

_ZN6Halide7Runtime8Internal15Synchronization9fast_cond6signalEv.exit: ; preds = %if.end.i, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr zeroext i1 @_ZN6Halide7Runtime8Internal15Synchronization15parking_control8validateERNS2_15validate_actionE(%"struct.Halide::Runtime::Internal::Synchronization::parking_control"* nonnull dereferenceable(8) %this, %"struct.Halide::Runtime::Internal::Synchronization::validate_action"* nonnull align 8 dereferenceable(16) %action) unnamed_addr #2 comdat align 2 {
entry:
  ret i1 true
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce_odr i64 @_ZN6Halide7Runtime8Internal15Synchronization22signal_parking_control6unparkEib(%"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* nonnull dereferenceable(24) %this, i32 %unparked, i1 zeroext %more_waiters) unnamed_addr #2 comdat align 2 {
entry:
  br i1 %more_waiters, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %cond_state = getelementptr inbounds %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control", %"struct.Halide::Runtime::Internal::Synchronization::wait_parking_control"* %this, i64 0, i32 1
  %0 = load i64*, i64** %cond_state, align 8, !tbaa !124
  store atomic i64 0, i64* %0 monotonic, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i64 0
}

; Function Attrs: nounwind mustprogress
define weak %struct.halide_mutex_array* @halide_mutex_array_create(i32 %sz) local_unnamed_addr #0 {
entry:
  %call = tail call i8* @halide_malloc(i8* null, i64 8) #16
  %0 = bitcast i8* %call to %struct.halide_mutex_array*
  %cmp = icmp eq i8* %call, null
  br i1 %cmp, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %conv = sext i32 %sz to i64
  %mul = shl nsw i64 %conv, 3
  %call1 = tail call i8* @halide_malloc(i8* null, i64 %mul) #16
  %1 = bitcast i8* %call to i8**
  store i8* %call1, i8** %1, align 8, !tbaa !127
  %cmp4 = icmp eq i8* %call1, null
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  tail call void @halide_free(i8* null, i8* nonnull %call) #16
  br label %cleanup

if.end6:                                          ; preds = %if.end
  %call10 = tail call i8* @memset(i8* nonnull %call1, i32 0, i64 %mul) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end6, %if.then5, %entry
  %retval.0 = phi %struct.halide_mutex_array* [ null, %if.then5 ], [ %0, %if.end6 ], [ null, %entry ]
  ret %struct.halide_mutex_array* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_mutex_array_destroy(i8* %user_context, i8* %array) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %array to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !127
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  tail call void @halide_free(i8* %user_context, i8* %array) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_lock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_lock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_mutex_array_unlock(%struct.halide_mutex_array* %array, i32 %entry1) local_unnamed_addr #0 {
entry:
  %array2 = getelementptr inbounds %struct.halide_mutex_array, %struct.halide_mutex_array* %array, i64 0, i32 0
  %0 = load %struct.halide_mutex*, %struct.halide_mutex** %array2, align 8, !tbaa !127
  %idxprom = sext i32 %entry1 to i64
  %arrayidx = getelementptr inbounds %struct.halide_mutex, %struct.halide_mutex* %0, i64 %idxprom
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %arrayidx) #17
  ret i32 0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_set_num_threads(i32 %n) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i32 %n, 0
  br i1 %cmp, label %if.end3.thread, label %if.end

if.end3.thread:                                   ; preds = %entry
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #16
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %0 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  br label %if.else.i

if.end:                                           ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  %cmp1 = icmp eq i32 %n, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %call = tail call i32 @_ZN6Halide7Runtime8Internal27default_desired_num_threadsEv() #17
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %n.addr.0 = phi i32 [ %call, %if.then2 ], [ %n, %if.end ]
  %1 = load i32, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  %cmp.i = icmp sgt i32 %n.addr.0, 256
  br i1 %cmp.i, label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit, label %if.else.i

if.else.i:                                        ; preds = %if.end3, %if.end3.thread
  %2 = phi i32 [ %0, %if.end3.thread ], [ %1, %if.end3 ]
  %n.addr.012 = phi i32 [ %n, %if.end3.thread ], [ %n.addr.0, %if.end3 ]
  %3 = icmp sgt i32 %n.addr.012, 1
  %spec.select.i = select i1 %3, i32 %n.addr.012, i32 1
  br label %_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit

_ZN6Halide7Runtime8Internal17clamp_num_threadsEi.exit: ; preds = %if.else.i, %if.end3
  %4 = phi i32 [ %2, %if.else.i ], [ %1, %if.end3 ]
  %call48 = phi i32 [ %spec.select.i, %if.else.i ], [ 256, %if.end3 ]
  store i32 %call48, i32* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 1), align 8, !tbaa !51
  tail call void @halide_mutex_unlock(%struct.halide_mutex* getelementptr inbounds (%"struct.Halide::Runtime::Internal::work_queue_t", %"struct.Halide::Runtime::Internal::work_queue_t"* @_ZN6Halide7Runtime8Internal10work_queueE, i64 0, i32 0)) #17
  ret i32 %4
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* @halide_set_custom_do_task(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* @halide_set_custom_do_loop_task(i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)*, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %f, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* @halide_set_custom_do_par_for(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %f, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  ret i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_custom_parallel_runtime(i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release) local_unnamed_addr #2 {
entry:
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)* %do_par_for, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)* %do_task, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i8*)** @_ZN6Halide7Runtime8Internal14custom_do_taskE, align 8, !tbaa !10
  store i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)* %do_loop_task, i32 (i8*, i32 (i8*, i32, i32, i8*, i8*)*, i32, i32, i8*, i8*)** @_ZN6Halide7Runtime8Internal19custom_do_loop_taskE, align 8, !tbaa !10
  store i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)* %do_parallel_tasks, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_init, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  store i1 (%struct.halide_semaphore_t*, i32)* %semaphore_try_acquire, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  store i32 (%struct.halide_semaphore_t*, i32)* %semaphore_release, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_par_for(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)*, i32 (i8*, i32 (i8*, i32, i8*)*, i32, i32, i8*)** @_ZN6Halide7Runtime8Internal17custom_do_par_forE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 (i8*, i32, i8*)* %f, i32 %min, i32 %size, i8* %closure) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_do_parallel_tasks(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)*, i32 (i8*, i32, %struct.halide_parallel_task_t*, i8*)** @_ZN6Halide7Runtime8Internal24custom_do_parallel_tasksE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, i32 %num_tasks, %struct.halide_parallel_task_t* %tasks, i8* %task_parent) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_init(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal21custom_semaphore_initE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_semaphore_release(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i32 (%struct.halide_semaphore_t*, i32)*, i32 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal24custom_semaphore_releaseE, align 8, !tbaa !10
  %call = tail call i32 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak zeroext i1 @halide_semaphore_try_acquire(%struct.halide_semaphore_t* %sema, i32 %count) local_unnamed_addr #0 {
entry:
  %0 = load i1 (%struct.halide_semaphore_t*, i32)*, i1 (%struct.halide_semaphore_t*, i32)** @_ZN6Halide7Runtime8Internal28custom_semaphore_try_acquireE, align 8, !tbaa !10
  %call = tail call zeroext i1 %0(%struct.halide_semaphore_t* %sema, i32 %count) #16
  ret i1 %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_symbol(i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* null, i8* %name) #16
  ret i8* %call
}

declare i8* @dlsym(i8*, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_load_library(i8* %name) #0 {
entry:
  %call = tail call i8* @dlopen(i8* %name, i32 1) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call3 = tail call i8* @dlerror() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret i8* %call
}

declare i8* @dlopen(i8*, i32) local_unnamed_addr #1

declare i8* @dlerror() local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak i8* @halide_default_get_library_symbol(i8* %lib, i8* %name) #0 {
entry:
  %call = tail call i8* @dlsym(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_get_symbol(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*)* @halide_set_custom_load_library(i8* (i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  store i8* (i8*)* %f, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  ret i8* (i8*)* %0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i8* (i8*, i8*)* @halide_set_custom_get_library_symbol(i8* (i8*, i8*)* %f) local_unnamed_addr #2 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  store i8* (i8*, i8*)* %f, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  ret i8* (i8*, i8*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_symbol(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal17custom_get_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_load_library(i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*)*, i8* (i8*)** @_ZN6Halide7Runtime8Internal19custom_load_libraryE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_get_library_symbol(i8* %lib, i8* %name) local_unnamed_addr #0 {
entry:
  %0 = load i8* (i8*, i8*)*, i8* (i8*, i8*)** @_ZN6Halide7Runtime8Internal25custom_get_library_symbolE, align 8, !tbaa !10
  %call = tail call i8* %0(i8* %lib, i8* %name) #16
  ret i8* %call
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_gpu_device(i32 %d) local_unnamed_addr #2 {
entry:
  store i32 %d, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_get_gpu_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !129

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i8, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %1, 0
  br i1 %tobool.not, label %if.then, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge: ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %.pre = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  br label %if.end4

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #16
  %tobool1.not = icmp eq i8* %call, null
  br i1 %tobool1.not, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %call3 = tail call i32 @atoi(i8* nonnull %call) #16
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  %storemerge = phi i32 [ %call3, %if.then2 ], [ -1, %if.then ]
  store i32 %storemerge, i32* @_ZN6Halide7Runtime8Internal17halide_gpu_deviceE, align 4, !tbaa !73
  store i8 1, i8* @_ZN6Halide7Runtime8Internal29halide_gpu_device_initializedE, align 1, !tbaa !15
  br label %if.end4

if.end4:                                          ; preds = %if.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge
  %2 = phi i32 [ %.pre, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit.if.end4_crit_edge ], [ %storemerge, %if.end ]
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_gpu_device_lockE release, align 1
  ret i32 %2
}

; Function Attrs: nounwind
define weak i32 @halide_default_trace(i8* %user_context, %struct.halide_trace_event_t* %e) #4 {
entry:
  %0 = atomicrmw add i32* @_ZZ20halide_default_traceE3ids, i32 1 seq_cst
  %call = tail call i32 @halide_get_trace_file(i8* %user_context) #17
  %cmp = icmp sgt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4
  %lanes = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %1 = load i16, i16* %lanes, align 2, !tbaa !130
  %conv = zext i16 %1 to i32
  %bits.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %2 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %2 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %mul = mul nuw nsw i32 %div.i, %conv
  %dimensions = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %3 = load i32, i32* %dimensions, align 8, !tbaa !137
  %mul3 = shl i32 %3, 2
  %func = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %4 = load i8*, i8** %func, align 8, !tbaa !138
  %call4 = tail call i64 @strlen(i8* %4) #16
  %5 = trunc i64 %call4 to i32
  %conv5 = add i32 %5, 1
  %trace_tag = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %6 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool.not = icmp eq i8* %6, null
  br i1 %tobool.not, label %cond.end, label %cond.true

cond.true:                                        ; preds = %if.then
  %call7 = tail call i64 @strlen(i8* nonnull %6) #16
  %7 = trunc i64 %call7 to i32
  %phi.cast = add i32 %7, 1
  br label %cond.end

cond.end:                                         ; preds = %cond.true, %if.then
  %cond = phi i32 [ %phi.cast, %cond.true ], [ 1, %if.then ]
  %add11 = add i32 %mul3, 31
  %add12 = add i32 %add11, %mul
  %add13 = add i32 %add12, %conv5
  %add14 = add i32 %add13, %cond
  %and = and i32 %add14, -4
  %8 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 0, i32 0
  %cmp.i.i = icmp ult i32 %and, 1048577
  %cursor.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 1
  %overage.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 2
  %arraydecay.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 0
  br i1 %cmp.i.i, label %while.body.i.i.us.i, label %while.body.i.i.i

while.body.i.i.us.i:                              ; preds = %cond.end, %while.body.i.i.us.i.backedge
  %9 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.us.i = and i32 %9, 1073741823
  %add.i.i.us.i = add nuw nsw i32 %and.i.i.us.i, 1
  %10 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.us.i, i32 %add.i.i.us.i seq_cst seq_cst
  %11 = extractvalue { i32, i1 } %10, 1
  br i1 %11, label %do.end.i.us.i, label %while.body.i.i.us.i.backedge

do.end.i.us.i:                                    ; preds = %while.body.i.i.us.i
  %12 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.us.i = add i32 %12, %and
  %cmp2.i.us.i = icmp ugt i32 %add.i.us.i, 1048576
  br i1 %cmp2.i.us.i, label %while.body.us.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.us.i:                                  ; preds = %do.end.i.us.i
  %13 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %14 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.us.i

while.body.i.i5.us.i:                             ; preds = %while.body.i.i5.us.i, %while.body.us.i
  %15 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %16 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %17 = extractvalue { i32, i1 } %16, 1
  br i1 %17, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i, label %while.body.i.i5.us.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i: ; preds = %while.body.i.i5.us.i
  %18 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.us.i = icmp eq i32 %18, 0
  br i1 %tobool.not.i.us.i, label %do.end.critedge.i.us.i, label %if.then.i9.us.i

if.then.i9.us.i:                                  ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %19 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.us.i = sub i32 %18, %19
  store i32 %sub.i.us.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.us.i = zext i32 %sub.i.us.i to i64
  %call.i.us.i = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.us.i) #16
  %conv5.i.us.i = trunc i64 %call.i.us.i to i32
  %cmp.i8.us.i = icmp eq i32 %sub.i.us.i, %conv5.i.us.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %20 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.us.i, label %while.body.i.i.us.i.backedge, label %if.then10.i.us.i

if.then10.i.us.i:                                 ; preds = %if.then.i9.us.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.us.i.backedge

do.end.critedge.i.us.i:                           ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.us.i
  %21 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.us.i.backedge

while.body.i.i.us.i.backedge:                     ; preds = %do.end.critedge.i.us.i, %if.then10.i.us.i, %if.then.i9.us.i, %while.body.i.i.us.i
  br label %while.body.i.i.us.i, !llvm.loop !145

while.body.i.i.i:                                 ; preds = %cond.end, %while.body.i.i.i.backedge
  %22 = load volatile i32, i32* %lock.i.i.i, align 4, !tbaa !140
  %and.i.i.i = and i32 %22, 1073741823
  %add.i.i.i = add nuw nsw i32 %and.i.i.i, 1
  %23 = cmpxchg i32* %lock.i.i.i, i32 %and.i.i.i, i32 %add.i.i.i seq_cst seq_cst
  %24 = extractvalue { i32, i1 } %23, 1
  br i1 %24, label %if.then.i.i, label %while.body.i.i.i.backedge

if.then.i.i:                                      ; preds = %while.body.i.i.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([120 x i8], [120 x i8]* @.str.31, i64 0, i64 0)) #16
  tail call void @abort() #16
  %25 = atomicrmw add i32* %cursor.i.i, i32 %and seq_cst
  %add.i.i400 = add i32 %25, %and
  %cmp2.i.i = icmp ugt i32 %add.i.i400, 1048576
  br i1 %cmp2.i.i, label %while.body.i, label %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit

while.body.i:                                     ; preds = %if.then.i.i
  %26 = atomicrmw add i32* %overage.i.i, i32 %and seq_cst
  %27 = atomicrmw sub i32* %lock.i.i.i, i32 1 seq_cst
  br label %while.body.i.i5.i

while.body.i.i5.i:                                ; preds = %while.body.i.i5.i, %while.body.i
  %28 = atomicrmw or i32* %lock.i.i.i, i32 1073741824 seq_cst
  %29 = cmpxchg i32* %lock.i.i.i, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i, label %while.body.i.i5.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i: ; preds = %while.body.i.i5.i
  %31 = load i32, i32* %cursor.i.i, align 4, !tbaa !142
  %tobool.not.i.i = icmp eq i32 %31, 0
  br i1 %tobool.not.i.i, label %do.end.critedge.i.i, label %if.then.i9.i

if.then.i9.i:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %32 = load i32, i32* %overage.i.i, align 4, !tbaa !144
  %sub.i.i = sub i32 %31, %32
  store i32 %sub.i.i, i32* %cursor.i.i, align 4, !tbaa !142
  %conv.i.i = zext i32 %sub.i.i to i64
  %call.i.i401 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i.i, i64 %conv.i.i) #16
  %conv5.i.i = trunc i64 %call.i.i401 to i32
  %cmp.i8.i = icmp eq i32 %sub.i.i, %conv5.i.i
  store i32 0, i32* %cursor.i.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i.i, align 4, !tbaa !144
  %33 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br i1 %cmp.i8.i, label %while.body.i.i.i.backedge, label %if.then10.i.i

if.then10.i.i:                                    ; preds = %if.then.i9.i
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %while.body.i.i.i.backedge

do.end.critedge.i.i:                              ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i.i
  %34 = atomicrmw and i32* %lock.i.i.i, i32 2147483647 seq_cst
  br label %while.body.i.i.i.backedge

while.body.i.i.i.backedge:                        ; preds = %do.end.critedge.i.i, %if.then10.i.i, %if.then.i9.i, %while.body.i.i.i
  br label %while.body.i.i.i, !llvm.loop !145

_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit: ; preds = %if.then.i.i, %do.end.i.us.i
  %.lcssa.i = phi i32 [ %12, %do.end.i.us.i ], [ %25, %if.then.i.i ]
  %idx.ext.i.i = zext i32 %.lcssa.i to i64
  %add.ptr.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %8, i64 0, i32 3, i64 %idx.ext.i.i
  %cmp16 = icmp ugt i32 %and, 4096
  br i1 %cmp16, label %if.then17, label %if.end

if.then17:                                        ; preds = %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i404 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i404, label %if.then.i415, label %if.else.i421

if.then.i415:                                     ; preds = %if.then17
  %conv.i4071 = zext i32 %and to i64
  %call.i4082 = tail call i8* @halide_uint64_to_string(i8* null, i8* null, i64 %conv.i4071, i32 1) #16
  %call.i41117 = tail call i8* @halide_string_to_string(i8* %call.i4082, i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  tail call void @halide_error(i8* null, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

if.else.i421:                                     ; preds = %if.then17
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %conv.i4073 = zext i32 %and to i64
  %call.i4084 = tail call i8* @halide_uint64_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i64 %conv.i4073, i32 1) #16
  %call.i411 = tail call i8* @halide_string_to_string(i8* %call.i4084, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i416 = ptrtoint i8* %call.i411 to i64
  %sub.ptr.rhs.cast.i.i417 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i418 = sub i64 1, %sub.ptr.rhs.cast.i.i417
  %add.i.i419 = add i64 %sub.ptr.sub.i.i418, %sub.ptr.lhs.cast.i.i416
  %call.i.i420 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* null, i8* nonnull %call.i, i64 %add.i.i419) #16
  tail call void @halide_print(i8* null, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit: ; preds = %if.else.i421, %if.then.i415
  tail call void @free(i8* %call.i) #16
  br label %if.end

if.end:                                           ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE0ELy1024EED2Ev.exit, %_ZN6Halide7Runtime8Internal11TraceBuffer14acquire_packetEPvij.exit
  %size = bitcast i8* %add.ptr.i.i to i32*
  store i32 %and, i32* %size, align 4, !tbaa !146
  %id = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 4
  %35 = bitcast i8* %id to i32*
  store i32 %0, i32* %35, align 4, !tbaa !148
  %36 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 8
  %37 = bitcast %struct.halide_type_t* %type to i32*
  %38 = bitcast i8* %36 to i32*
  %39 = load i32, i32* %37, align 8
  store i32 %39, i32* %38, align 4
  %event = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %event22 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 12
  %40 = bitcast i32* %event to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !tbaa !14
  %dimensions26 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 24
  %42 = bitcast i8* %dimensions26 to i32*
  %43 = bitcast i8* %event22 to <4 x i32>*
  store <4 x i32> %41, <4 x i32>* %43, align 4, !tbaa !14
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %44 = load i32*, i32** %coordinates, align 8, !tbaa !149
  %tobool27.not = icmp eq i32* %44, null
  br i1 %tobool27.not, label %if.end33, label %if.then28

if.then28:                                        ; preds = %if.end
  %45 = bitcast i32* %44 to i8*
  %46 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %conv31 = zext i32 %mul3 to i64
  %call32 = tail call i8* @memcpy(i8* nonnull %46, i8* nonnull %45, i64 %conv31) #16
  br label %if.end33

if.end33:                                         ; preds = %if.then28, %if.end
  %value = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %47 = load i8*, i8** %value, align 8, !tbaa !150
  %tobool34.not = icmp eq i8* %47, null
  br i1 %tobool34.not, label %if.end40, label %if.then35

if.then35:                                        ; preds = %if.end33
  %48 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %49 = bitcast i8* %48 to i32*
  %50 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i = sext i32 %50 to i64
  %add.ptr.i424 = getelementptr inbounds i32, i32* %49, i64 %idx.ext.i
  %51 = bitcast i32* %add.ptr.i424 to i8*
  %conv38 = zext i32 %mul to i64
  %call39 = tail call i8* @memcpy(i8* nonnull %51, i8* nonnull %47, i64 %conv38) #16
  br label %if.end40

if.end40:                                         ; preds = %if.end33, %if.then35
  %52 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 28
  %53 = bitcast i8* %52 to i32*
  %54 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i425 = sext i32 %54 to i64
  %add.ptr.i.i426 = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i425
  %55 = bitcast i32* %add.ptr.i.i426 to i8*
  %lanes.i = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 10
  %56 = bitcast i8* %lanes.i to i16*
  %57 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i427 = zext i16 %57 to i32
  %58 = getelementptr inbounds i8, i8* %add.ptr.i.i, i64 9
  %59 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i428 = zext i8 %59 to i32
  %add.i.i429 = add nuw nsw i32 %conv.i.i428, 7
  %div.i.i = lshr i32 %add.i.i429, 3
  %mul.i = mul nuw nsw i32 %div.i.i, %conv.i427
  %idx.ext.i430 = zext i32 %mul.i to i64
  %add.ptr.i431 = getelementptr inbounds i8, i8* %55, i64 %idx.ext.i430
  %60 = load i8*, i8** %func, align 8, !tbaa !138
  %conv43 = zext i32 %conv5 to i64
  %call44 = tail call i8* @memcpy(i8* nonnull %add.ptr.i431, i8* %60, i64 %conv43) #16
  %61 = load i32, i32* %42, align 4, !tbaa !151
  %idx.ext.i.i.i = sext i32 %61 to i64
  %add.ptr.i.i.i = getelementptr inbounds i32, i32* %53, i64 %idx.ext.i.i.i
  %62 = bitcast i32* %add.ptr.i.i.i to i8*
  %63 = load i16, i16* %56, align 2, !tbaa !152
  %conv.i.i432 = zext i16 %63 to i32
  %64 = load i8, i8* %58, align 1, !tbaa !136
  %conv.i.i.i = zext i8 %64 to i32
  %add.i.i.i433 = add nuw nsw i32 %conv.i.i.i, 7
  %div.i.i.i = lshr i32 %add.i.i.i433, 3
  %mul.i.i = mul nuw nsw i32 %div.i.i.i, %conv.i.i432
  %idx.ext.i.i434 = zext i32 %mul.i.i to i64
  %add.ptr.i.i435 = getelementptr inbounds i8, i8* %62, i64 %idx.ext.i.i434
  br label %while.cond.i437

while.cond.i437:                                  ; preds = %while.cond.i437, %if.end40
  %f.0.i = phi i8* [ %add.ptr.i.i435, %if.end40 ], [ %incdec.ptr.i, %while.cond.i437 ]
  %incdec.ptr.i = getelementptr inbounds i8, i8* %f.0.i, i64 1
  %65 = load i8, i8* %f.0.i, align 1, !tbaa !14
  %tobool.not.i436 = icmp eq i8 %65, 0
  br i1 %tobool.not.i436, label %_ZN21halide_trace_packet_t9trace_tagEv.exit, label %while.cond.i437, !llvm.loop !153

_ZN21halide_trace_packet_t9trace_tagEv.exit:      ; preds = %while.cond.i437
  %66 = load i8*, i8** %trace_tag, align 8, !tbaa !139
  %tobool47.not = icmp eq i8* %66, null
  %spec.select = select i1 %tobool47.not, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.10, i64 0, i64 0), i8* %66
  %conv53 = zext i32 %cond to i64
  %call54 = tail call i8* @memcpy(i8* nonnull %incdec.ptr.i, i8* %spec.select, i64 %conv53) #16
  %67 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  fence seq_cst
  %lock.i.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %67, i64 0, i32 0, i32 0
  %68 = atomicrmw sub i32* %lock.i.i, i32 1 seq_cst
  %69 = load i32, i32* %event, align 4, !tbaa !154
  %cmp56 = icmp eq i32 %69, 9
  br i1 %cmp56, label %if.then57, label %if.end277

if.then57:                                        ; preds = %_ZN21halide_trace_packet_t9trace_tagEv.exit
  %70 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %lock.i.i438 = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 0, i32 0
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %if.then57
  %71 = atomicrmw or i32* %lock.i.i438, i32 1073741824 seq_cst
  %72 = cmpxchg i32* %lock.i.i438, i32 1073741824, i32 -2147483648 seq_cst seq_cst
  %73 = extractvalue { i32, i1 } %72, 1
  br i1 %73, label %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i, label %while.body.i.i

_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i: ; preds = %while.body.i.i
  %cursor.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 1
  %74 = load i32, i32* %cursor.i, align 4, !tbaa !142
  %tobool.not.i439 = icmp eq i32 %74, 0
  br i1 %tobool.not.i439, label %do.end.critedge.i, label %if.then.i442

if.then.i442:                                     ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %overage.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 2
  %75 = load i32, i32* %overage.i, align 4, !tbaa !144
  %sub.i = sub i32 %74, %75
  store i32 %sub.i, i32* %cursor.i, align 4, !tbaa !142
  %arraydecay.i = getelementptr inbounds %"class.Halide::Runtime::Internal::TraceBuffer", %"class.Halide::Runtime::Internal::TraceBuffer"* %70, i64 0, i32 3, i64 0
  %conv.i440 = zext i32 %sub.i to i64
  %call.i441 = tail call i64 @write(i32 %call, i8* nonnull %arraydecay.i, i64 %conv.i440) #16
  %conv5.i = trunc i64 %call.i441 to i32
  %cmp.i = icmp eq i32 %sub.i, %conv5.i
  store i32 0, i32* %cursor.i, align 4, !tbaa !142
  store i32 0, i32* %overage.i, align 4, !tbaa !144
  %76 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br i1 %cmp.i, label %if.end277, label %if.then10.i

if.then10.i:                                      ; preds = %if.then.i442
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.32, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %if.end277

do.end.critedge.i:                                ; preds = %_ZN6Halide7Runtime8Internal23SharedExclusiveSpinLock17acquire_exclusiveEv.exit.i
  %77 = atomicrmw and i32* %lock.i.i438, i32 2147483647 seq_cst
  br label %if.end277

if.else:                                          ; preds = %entry
  %call.i445 = tail call i8* @malloc(i64 4096) #16
  %tobool.not.i448 = icmp eq i8* %call.i445, null
  br i1 %tobool.not.i448, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit, label %if.then6.i451

if.then6.i451:                                    ; preds = %if.else
  %add.ptr.i449 = getelementptr inbounds i8, i8* %call.i445, i64 4095
  store i8 0, i8* %add.ptr.i449, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit: ; preds = %if.then6.i451, %if.else
  %ss.sroa.74.0 = phi i8* [ %add.ptr.i449, %if.then6.i451 ], [ null, %if.else ]
  %bits = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 1
  %78 = load i8, i8* %bits, align 1, !tbaa !155
  %conv60 = zext i8 %78 to i32
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit
  %print_bits.0 = phi i32 [ 8, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EEC2EPvPc.exit ], [ %shl, %while.cond ]
  %cmp61 = icmp slt i32 %print_bits.0, %conv60
  %shl = shl i32 %print_bits.0, 1
  br i1 %cmp61, label %while.cond, label %do.body, !llvm.loop !156

do.body:                                          ; preds = %while.cond
  %cmp62 = icmp slt i32 %print_bits.0, 65
  br i1 %cmp62, label %do.end, label %if.then63

if.then63:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([140 x i8], [140 x i8]* @.str.2.11, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then63, %do.body
  %event65 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 5
  %79 = load i32, i32* %event65, align 4, !tbaa !154
  %cmp66 = icmp slt i32 %79, 2
  %idxprom = zext i32 %79 to i64
  %arrayidx = getelementptr inbounds [11 x i8*], [11 x i8*]* @__const.halide_default_trace.event_types, i64 0, i64 %idxprom
  %80 = load i8*, i8** %arrayidx, align 8, !tbaa !10
  %call.i456 = tail call i8* @halide_string_to_string(i8* %call.i445, i8* %ss.sroa.74.0, i8* %80) #16
  %call.i459 = tail call i8* @halide_string_to_string(i8* %call.i456, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %func70 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 0
  %81 = load i8*, i8** %func70, align 8, !tbaa !138
  %call.i462 = tail call i8* @halide_string_to_string(i8* %call.i459, i8* %ss.sroa.74.0, i8* %81) #16
  %call.i465 = tail call i8* @halide_string_to_string(i8* %call.i462, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  %value_index73 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 7
  %82 = load i32, i32* %value_index73, align 4, !tbaa !157
  %conv.i468 = sext i32 %82 to i64
  %call.i469 = tail call i8* @halide_int64_to_string(i8* %call.i465, i8* %ss.sroa.74.0, i64 %conv.i468, i32 1) #16
  %call.i472 = tail call i8* @halide_string_to_string(i8* %call.i469, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %lanes77 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 2
  %83 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp79 = icmp ugt i16 %83, 1
  br i1 %cmp79, label %if.then80, label %if.end82

if.then80:                                        ; preds = %do.end
  %call.i475 = tail call i8* @halide_string_to_string(i8* %call.i472, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0)) #16
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %do.end
  %ss.sroa.7.0 = phi i8* [ %call.i475, %if.then80 ], [ %call.i472, %do.end ]
  %dimensions83 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 8
  %84 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84660 = icmp sgt i32 %84, 0
  br i1 %cmp84660, label %if.end100.peel, label %for.cond.cleanup

if.end100.peel:                                   ; preds = %if.end82
  %coordinates101 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 2
  %.pre = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %.pre673 = load i32, i32* %.pre, align 4, !tbaa !73
  %conv.i484.peel = sext i32 %.pre673 to i64
  %call.i485.peel = tail call i8* @halide_int64_to_string(i8* %ss.sroa.7.0, i8* %ss.sroa.74.0, i64 %conv.i484.peel, i32 1) #16
  %85 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %cmp84.peel = icmp sgt i32 %85, 1
  br i1 %cmp84.peel, label %if.then86, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %if.end100, %if.end100.peel, %if.end82
  %ss.sroa.7.1.lcssa = phi i8* [ %ss.sroa.7.0, %if.end82 ], [ %call.i485.peel, %if.end100.peel ], [ %call.i485, %if.end100 ]
  %86 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp108 = icmp ugt i16 %86, 1
  %.sink684 = select i1 %cmp108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)
  %call.i491 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1.lcssa, i8* %ss.sroa.74.0, i8* %.sink684) #16
  br i1 %cmp66, label %if.then115, label %if.end263

if.then86:                                        ; preds = %if.end100.peel, %if.end100
  %indvars.iv670 = phi i64 [ %indvars.iv.next671, %if.end100 ], [ 1, %if.end100.peel ]
  %ss.sroa.7.1661 = phi i8* [ %call.i485, %if.end100 ], [ %call.i485.peel, %if.end100.peel ]
  %87 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp90 = icmp ugt i16 %87, 1
  br i1 %cmp90, label %land.lhs.true, label %if.else97.split

land.lhs.true:                                    ; preds = %if.then86
  %conv89 = zext i16 %87 to i32
  %88 = trunc i64 %indvars.iv670 to i32
  %rem = urem i32 %88, %conv89
  %cmp94 = icmp eq i32 %rem, 0
  br i1 %cmp94, label %if.end100, label %if.else97.split

if.else97.split:                                  ; preds = %if.then86, %land.lhs.true
  br label %if.end100

if.end100:                                        ; preds = %land.lhs.true, %if.else97.split
  %.sink = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0), %if.else97.split ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %land.lhs.true ]
  %call.i4786 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.1661, i8* %ss.sroa.74.0, i8* %.sink) #16
  %89 = load i32*, i32** %coordinates101, align 8, !tbaa !149
  %arrayidx103 = getelementptr inbounds i32, i32* %89, i64 %indvars.iv670
  %90 = load i32, i32* %arrayidx103, align 4, !tbaa !73
  %conv.i484 = sext i32 %90 to i64
  %call.i485 = tail call i8* @halide_int64_to_string(i8* %call.i4786, i8* %ss.sroa.74.0, i64 %conv.i484, i32 1) #16
  %indvars.iv.next671 = add nuw nsw i64 %indvars.iv670, 1
  %91 = load i32, i32* %dimensions83, align 8, !tbaa !137
  %92 = sext i32 %91 to i64
  %cmp84 = icmp slt i64 %indvars.iv.next671, %92
  br i1 %cmp84, label %if.then86, label %for.cond.cleanup, !llvm.loop !158

if.then115:                                       ; preds = %for.cond.cleanup
  %93 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp119 = icmp ugt i16 %93, 1
  %.sink685 = select i1 %cmp119, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)
  %call.i497 = tail call i8* @halide_string_to_string(i8* %call.i491, i8* %ss.sroa.74.0, i8* %.sink685) #16
  %94 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130655.not = icmp eq i16 %94, 0
  br i1 %cmp130655.not, label %if.end263, label %if.end136.peel

if.end136.peel:                                   ; preds = %if.then115
  %code = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 4, i32 0
  %value245 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 1
  %95 = bitcast i8** %value245 to i8***
  %cmp214 = icmp sgt i32 %print_bits.0, 15
  %96 = bitcast i8** %value245 to i16**
  %97 = bitcast i8** %value245 to float**
  %98 = bitcast i8** %value245 to double**
  %99 = bitcast i8** %value245 to i32**
  %100 = bitcast i8** %value245 to i64**
  %.pre674 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %.pre674, label %for.inc253.peel [
    i8 0, label %if.then140.peel
    i8 1, label %if.then176.peel
    i8 2, label %do.body213.peel
    i8 3, label %if.then244.peel
  ]

if.then244.peel:                                  ; preds = %if.end136.peel
  %101 = load i8**, i8*** %95, align 8, !tbaa !150
  %102 = load i8*, i8** %101, align 8, !tbaa !10
  %call.i543.peel = tail call i8* @halide_pointer_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i8* %102) #16
  br label %for.inc253.peel

do.body213.peel:                                  ; preds = %if.end136.peel
  br i1 %cmp214, label %do.end218.peel, label %if.then215.peel

if.then215.peel:                                  ; preds = %do.body213.peel
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218.peel

do.end218.peel:                                   ; preds = %if.then215.peel, %do.body213.peel
  switch i32 %print_bits.0, label %if.else232.peel [
    i32 32, label %if.then220.peel
    i32 16, label %if.then227.peel
  ]

if.then227.peel:                                  ; preds = %do.end218.peel
  %103 = load i16*, i16** %96, align 8, !tbaa !150
  %104 = load i16, i16* %103, align 2, !tbaa !161
  %call.i535.peel = tail call double @halide_float16_bits_to_double(i16 zeroext %104) #16
  %call2.i.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %call.i535.peel, i32 1) #16
  br label %for.inc253.peel

if.then220.peel:                                  ; preds = %do.end218.peel
  %105 = load float*, float** %97, align 8, !tbaa !150
  %106 = load float, float* %105, align 4, !tbaa !162
  %conv.i533.peel = fpext float %106 to double
  %call.i534.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %conv.i533.peel, i32 0) #16
  br label %for.inc253.peel

if.else232.peel:                                  ; preds = %do.end218.peel
  %107 = load double*, double** %98, align 8, !tbaa !150
  %108 = load double, double* %107, align 8, !tbaa !164
  %call.i540.peel = tail call i8* @halide_double_to_string(i8* %call.i497, i8* %ss.sroa.74.0, double %108, i32 1) #16
  br label %for.inc253.peel

if.then176.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else199.peel [
    i32 8, label %if.then178.peel
    i32 16, label %if.then186.peel
    i32 32, label %if.then194.peel
  ]

if.then194.peel:                                  ; preds = %if.then176.peel
  %109 = load i32*, i32** %99, align 8, !tbaa !150
  %110 = load i32, i32* %109, align 4, !tbaa !73
  %conv.i526.peel = zext i32 %110 to i64
  %call.i527.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i526.peel, i32 1) #16
  br label %for.inc253.peel

if.then186.peel:                                  ; preds = %if.then176.peel
  %111 = load i16*, i16** %96, align 8, !tbaa !150
  %112 = load i16, i16* %111, align 2, !tbaa !161
  %conv.i522.peel = zext i16 %112 to i64
  %call.i523.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i522.peel, i32 1) #16
  br label %for.inc253.peel

if.then178.peel:                                  ; preds = %if.then176.peel
  %113 = load i8*, i8** %value245, align 8, !tbaa !150
  %114 = load i8, i8* %113, align 1, !tbaa !14
  %conv.i518.peel = zext i8 %114 to i64
  %call.i519.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i518.peel, i32 1) #16
  br label %for.inc253.peel

if.else199.peel:                                  ; preds = %if.then176.peel
  %115 = load i64*, i64** %100, align 8, !tbaa !150
  %116 = load i64, i64* %115, align 8, !tbaa !110
  %call.i530.peel = tail call i8* @halide_uint64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %116, i32 1) #16
  br label %for.inc253.peel

if.then140.peel:                                  ; preds = %if.end136.peel
  switch i32 %print_bits.0, label %if.else163.peel [
    i32 8, label %if.then142.peel
    i32 16, label %if.then150.peel
    i32 32, label %if.then158.peel
  ]

if.then158.peel:                                  ; preds = %if.then140.peel
  %117 = load i32*, i32** %99, align 8, !tbaa !150
  %118 = load i32, i32* %117, align 4, !tbaa !73
  %conv.i511.peel = sext i32 %118 to i64
  %call.i512.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i511.peel, i32 1) #16
  br label %for.inc253.peel

if.then150.peel:                                  ; preds = %if.then140.peel
  %119 = load i16*, i16** %96, align 8, !tbaa !150
  %120 = load i16, i16* %119, align 2, !tbaa !161
  %conv.i507.peel = sext i16 %120 to i64
  %call.i508.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i507.peel, i32 1) #16
  br label %for.inc253.peel

if.then142.peel:                                  ; preds = %if.then140.peel
  %121 = load i8*, i8** %value245, align 8, !tbaa !150
  %122 = load i8, i8* %121, align 1, !tbaa !14
  %conv.i503.peel = sext i8 %122 to i64
  %call.i504.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %conv.i503.peel, i32 1) #16
  br label %for.inc253.peel

if.else163.peel:                                  ; preds = %if.then140.peel
  %123 = load i64*, i64** %100, align 8, !tbaa !150
  %124 = load i64, i64* %123, align 8, !tbaa !110
  %call.i515.peel = tail call i8* @halide_int64_to_string(i8* %call.i497, i8* %ss.sroa.74.0, i64 %124, i32 1) #16
  br label %for.inc253.peel

for.inc253.peel:                                  ; preds = %if.else163.peel, %if.then142.peel, %if.then150.peel, %if.then158.peel, %if.else199.peel, %if.then178.peel, %if.then186.peel, %if.then194.peel, %if.else232.peel, %if.then220.peel, %if.then227.peel, %if.then244.peel, %if.end136.peel
  %ss.sroa.7.7.peel = phi i8* [ %call.i497, %if.end136.peel ], [ %call.i543.peel, %if.then244.peel ], [ %call.i540.peel, %if.else232.peel ], [ %call2.i.peel, %if.then227.peel ], [ %call.i534.peel, %if.then220.peel ], [ %call.i530.peel, %if.else199.peel ], [ %call.i527.peel, %if.then194.peel ], [ %call.i523.peel, %if.then186.peel ], [ %call.i519.peel, %if.then178.peel ], [ %call.i515.peel, %if.else163.peel ], [ %call.i512.peel, %if.then158.peel ], [ %call.i508.peel, %if.then150.peel ], [ %call.i504.peel, %if.then142.peel ]
  %125 = load i16, i16* %lanes77, align 2, !tbaa !130
  %cmp130.peel = icmp ugt i16 %125, 1
  br i1 %cmp130.peel, label %if.end136, label %if.end263

for.cond.cleanup131:                              ; preds = %for.inc253
  %cmp259 = icmp ugt i16 %151, 1
  br i1 %cmp259, label %if.then260, label %if.end263

if.end136:                                        ; preds = %for.inc253.peel, %for.inc253
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc253 ], [ 1, %for.inc253.peel ]
  %ss.sroa.7.5656 = phi i8* [ %ss.sroa.7.7, %for.inc253 ], [ %ss.sroa.7.7.peel, %for.inc253.peel ]
  %call.i500 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.5656, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %126 = load i8, i8* %code, align 8, !tbaa !160
  switch i8 %126, label %for.inc253 [
    i8 0, label %if.then140
    i8 1, label %if.then176
    i8 2, label %do.body213
    i8 3, label %if.then244
  ]

if.then140:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else163 [
    i32 8, label %if.then142
    i32 16, label %if.then150
    i32 32, label %if.then158
  ]

if.then142:                                       ; preds = %if.then140
  %127 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx145 = getelementptr inbounds i8, i8* %127, i64 %indvars.iv
  %128 = load i8, i8* %arrayidx145, align 1, !tbaa !14
  %conv.i503 = sext i8 %128 to i64
  %call.i504 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i503, i32 1) #16
  br label %for.inc253

if.then150:                                       ; preds = %if.then140
  %129 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx153 = getelementptr inbounds i16, i16* %129, i64 %indvars.iv
  %130 = load i16, i16* %arrayidx153, align 2, !tbaa !161
  %conv.i507 = sext i16 %130 to i64
  %call.i508 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i507, i32 1) #16
  br label %for.inc253

if.then158:                                       ; preds = %if.then140
  %131 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx161 = getelementptr inbounds i32, i32* %131, i64 %indvars.iv
  %132 = load i32, i32* %arrayidx161, align 4, !tbaa !73
  %conv.i511 = sext i32 %132 to i64
  %call.i512 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i511, i32 1) #16
  br label %for.inc253

if.else163:                                       ; preds = %if.then140
  %133 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx166 = getelementptr inbounds i64, i64* %133, i64 %indvars.iv
  %134 = load i64, i64* %arrayidx166, align 8, !tbaa !110
  %call.i515 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %134, i32 1) #16
  br label %for.inc253

if.then176:                                       ; preds = %if.end136
  switch i32 %print_bits.0, label %if.else199 [
    i32 8, label %if.then178
    i32 16, label %if.then186
    i32 32, label %if.then194
  ]

if.then178:                                       ; preds = %if.then176
  %135 = load i8*, i8** %value245, align 8, !tbaa !150
  %arrayidx181 = getelementptr inbounds i8, i8* %135, i64 %indvars.iv
  %136 = load i8, i8* %arrayidx181, align 1, !tbaa !14
  %conv.i518 = zext i8 %136 to i64
  %call.i519 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i518, i32 1) #16
  br label %for.inc253

if.then186:                                       ; preds = %if.then176
  %137 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx189 = getelementptr inbounds i16, i16* %137, i64 %indvars.iv
  %138 = load i16, i16* %arrayidx189, align 2, !tbaa !161
  %conv.i522 = zext i16 %138 to i64
  %call.i523 = tail call i8* @halide_int64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i522, i32 1) #16
  br label %for.inc253

if.then194:                                       ; preds = %if.then176
  %139 = load i32*, i32** %99, align 8, !tbaa !150
  %arrayidx197 = getelementptr inbounds i32, i32* %139, i64 %indvars.iv
  %140 = load i32, i32* %arrayidx197, align 4, !tbaa !73
  %conv.i526 = zext i32 %140 to i64
  %call.i527 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %conv.i526, i32 1) #16
  br label %for.inc253

if.else199:                                       ; preds = %if.then176
  %141 = load i64*, i64** %100, align 8, !tbaa !150
  %arrayidx202 = getelementptr inbounds i64, i64* %141, i64 %indvars.iv
  %142 = load i64, i64* %arrayidx202, align 8, !tbaa !110
  %call.i530 = tail call i8* @halide_uint64_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i64 %142, i32 1) #16
  br label %for.inc253

do.body213:                                       ; preds = %if.end136
  br i1 %cmp214, label %do.end218, label %if.then215

if.then215:                                       ; preds = %do.body213
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.24, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end218

do.end218:                                        ; preds = %if.then215, %do.body213
  switch i32 %print_bits.0, label %if.else232 [
    i32 32, label %if.then220
    i32 16, label %if.then227
  ]

if.then220:                                       ; preds = %do.end218
  %143 = load float*, float** %97, align 8, !tbaa !150
  %arrayidx223 = getelementptr inbounds float, float* %143, i64 %indvars.iv
  %144 = load float, float* %arrayidx223, align 4, !tbaa !162
  %conv.i533 = fpext float %144 to double
  %call.i534 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %conv.i533, i32 0) #16
  br label %for.inc253

if.then227:                                       ; preds = %do.end218
  %145 = load i16*, i16** %96, align 8, !tbaa !150
  %arrayidx230 = getelementptr inbounds i16, i16* %145, i64 %indvars.iv
  %146 = load i16, i16* %arrayidx230, align 2, !tbaa !161
  %call.i535 = tail call double @halide_float16_bits_to_double(i16 zeroext %146) #16
  %call2.i = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %call.i535, i32 1) #16
  br label %for.inc253

if.else232:                                       ; preds = %do.end218
  %147 = load double*, double** %98, align 8, !tbaa !150
  %arrayidx235 = getelementptr inbounds double, double* %147, i64 %indvars.iv
  %148 = load double, double* %arrayidx235, align 8, !tbaa !164
  %call.i540 = tail call i8* @halide_double_to_string(i8* %call.i500, i8* %ss.sroa.74.0, double %148, i32 1) #16
  br label %for.inc253

if.then244:                                       ; preds = %if.end136
  %149 = load i8**, i8*** %95, align 8, !tbaa !150
  %arrayidx247 = getelementptr inbounds i8*, i8** %149, i64 %indvars.iv
  %150 = load i8*, i8** %arrayidx247, align 8, !tbaa !10
  %call.i543 = tail call i8* @halide_pointer_to_string(i8* %call.i500, i8* %ss.sroa.74.0, i8* %150) #16
  br label %for.inc253

for.inc253:                                       ; preds = %if.then244, %if.else232, %if.then227, %if.then220, %if.else199, %if.then194, %if.then186, %if.then178, %if.else163, %if.then158, %if.then150, %if.then142, %if.end136
  %ss.sroa.7.7 = phi i8* [ %call.i500, %if.end136 ], [ %call.i543, %if.then244 ], [ %call.i540, %if.else232 ], [ %call2.i, %if.then227 ], [ %call.i534, %if.then220 ], [ %call.i530, %if.else199 ], [ %call.i527, %if.then194 ], [ %call.i523, %if.then186 ], [ %call.i519, %if.then178 ], [ %call.i515, %if.else163 ], [ %call.i512, %if.then158 ], [ %call.i508, %if.then150 ], [ %call.i504, %if.then142 ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %151 = load i16, i16* %lanes77, align 2, !tbaa !130
  %152 = zext i16 %151 to i64
  %cmp130 = icmp ult i64 %indvars.iv.next, %152
  br i1 %cmp130, label %if.end136, label %for.cond.cleanup131, !llvm.loop !166

if.then260:                                       ; preds = %for.cond.cleanup131
  %call.i546 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.7, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i64 0, i64 0)) #16
  br label %if.end263

if.end263:                                        ; preds = %if.then260, %for.cond.cleanup131, %for.inc253.peel, %if.then115, %for.cond.cleanup
  %ss.sroa.7.8 = phi i8* [ %call.i546, %if.then260 ], [ %ss.sroa.7.7, %for.cond.cleanup131 ], [ %call.i491, %for.cond.cleanup ], [ %ss.sroa.7.7.peel, %for.inc253.peel ], [ %call.i497, %if.then115 ]
  %trace_tag264 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %e, i64 0, i32 3
  %153 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %tobool265.not = icmp eq i8* %153, null
  br i1 %tobool265.not, label %if.end274, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end263
  %154 = load i8, i8* %153, align 1, !tbaa !14
  %tobool268.not = icmp eq i8 %154, 0
  br i1 %tobool268.not, label %if.end274, label %if.then269

if.then269:                                       ; preds = %land.lhs.true266
  %call.i549 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.8, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.26, i64 0, i64 0)) #16
  %155 = load i8*, i8** %trace_tag264, align 8, !tbaa !139
  %call.i552 = tail call i8* @halide_string_to_string(i8* %call.i549, i8* %ss.sroa.74.0, i8* %155) #16
  %call.i555 = tail call i8* @halide_string_to_string(i8* %call.i552, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #16
  br label %if.end274

if.end274:                                        ; preds = %if.then269, %land.lhs.true266, %if.end263
  %ss.sroa.7.9 = phi i8* [ %ss.sroa.7.8, %if.end263 ], [ %ss.sroa.7.8, %land.lhs.true266 ], [ %call.i555, %if.then269 ]
  %call.i558 = tail call i8* @halide_string_to_string(i8* %ss.sroa.7.9, i8* %ss.sroa.74.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %while.cond.i560

while.cond.i560:                                  ; preds = %while.cond.i560, %if.end274
  %156 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i559 = icmp eq i8 %156, 0
  br i1 %tobool.not.i559, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i560, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i560
  br i1 %tobool.not.i448, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %sub.ptr.lhs.cast.i.i563 = ptrtoint i8* %call.i558 to i64
  %sub.ptr.rhs.cast.i.i564 = ptrtoint i8* %call.i445 to i64
  %sub.ptr.sub.i.i565 = sub i64 1, %sub.ptr.rhs.cast.i.i564
  %add.i.i566 = add i64 %sub.ptr.sub.i.i565, %sub.ptr.lhs.cast.i.i563
  %call.i.i567 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  tail call void @halide_print(i8* %user_context, i8* nonnull %call.i445) #16
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i445, i64 %add.i.i566) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i445) #16
  br label %if.end277

if.end277:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy4096EED2Ev.exit, %do.end.critedge.i, %if.then10.i, %if.then.i442, %_ZN21halide_trace_packet_t9trace_tagEv.exit
  ret i32 %0
}

; Function Attrs: nounwind
define weak i32 @halide_get_trace_file(i8* %user_context) local_unnamed_addr #4 {
entry:
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.cond.i, %entry
  %0 = atomicrmw volatile xchg i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE, i8 1 acquire
  %tobool.not.i = icmp eq i8 %0, 0
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit, label %while.cond.i, !llvm.loop !167

_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit: ; preds = %while.cond.i
  %1 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %call = tail call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0)) #16
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %if.else, label %if.then1

if.then1:                                         ; preds = %if.then
  %call2 = tail call i8* @fopen(i8* nonnull %call, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29, i64 0, i64 0)) #16
  %tobool3.not = icmp eq i8* %call2, null
  br i1 %tobool3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.then1
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([139 x i8], [139 x i8]* @.str.30, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.then1
  %call5 = tail call i32 @fileno(i8* %call2) #16
  tail call void @halide_set_trace_file(i32 %call5) #17
  store i8* %call2, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %2 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool6.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %2, null
  br i1 %tobool6.not, label %if.then7, label %if.end11

if.then7:                                         ; preds = %do.end
  %call8 = tail call i8* @malloc(i64 1048588) #16
  store i8* %call8, i8** bitcast (%"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE to i8**), align 8, !tbaa !10
  %cursor.i = getelementptr inbounds i8, i8* %call8, i64 4
  %3 = bitcast i8* %cursor.i to i32*
  store i32 0, i32* %3, align 4, !tbaa !142
  %overage.i = getelementptr inbounds i8, i8* %call8, i64 8
  %4 = bitcast i8* %overage.i to i32*
  store i32 0, i32* %4, align 4, !tbaa !144
  %lock.i.i = bitcast i8* %call8 to i32*
  store volatile i32 0, i32* %lock.i.i, align 4, !tbaa !140
  br label %if.end11

if.else:                                          ; preds = %if.then
  tail call void @halide_set_trace_file(i32 0) #17
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then7, %do.end, %_ZN6Halide7Runtime8Internal14ScopedSpinLockC2EPVc.exit
  %5 = load i32, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store atomic volatile i8 0, i8* @_ZN6Halide7Runtime8Internal22halide_trace_file_lockE release, align 1
  ret i32 %5
}

declare i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #1

declare i8* @fopen(i8*, i8*) local_unnamed_addr #1

declare i32 @fileno(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_set_trace_file(i32 %fd) local_unnamed_addr #2 {
entry:
  store i32 %fd, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_trace_cleanup() #0 {
entry:
  %call = tail call i32 @halide_shutdown_trace() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_shutdown_trace() local_unnamed_addr #0 {
entry:
  %0 = load i8*, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %tobool.not = icmp eq i8* %0, null
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  %call = tail call i32 @fclose(i8* nonnull %0) #16
  store i32 0, i32* @_ZN6Halide7Runtime8Internal17halide_trace_fileE, align 4, !tbaa !73
  store i8 0, i8* @_ZN6Halide7Runtime8Internal29halide_trace_file_initializedE, align 1, !tbaa !15
  store i8* null, i8** @_ZN6Halide7Runtime8Internal35halide_trace_file_internally_openedE, align 8, !tbaa !10
  %1 = load %"class.Halide::Runtime::Internal::TraceBuffer"*, %"class.Halide::Runtime::Internal::TraceBuffer"** @_ZN6Halide7Runtime8Internal19halide_trace_bufferE, align 8, !tbaa !10
  %tobool1.not = icmp eq %"class.Halide::Runtime::Internal::TraceBuffer"* %1, null
  br i1 %tobool1.not, label %return, label %if.then2

if.then2:                                         ; preds = %if.then
  %2 = bitcast %"class.Halide::Runtime::Internal::TraceBuffer"* %1 to i8*
  tail call void @free(i8* nonnull %2) #16
  br label %return

return:                                           ; preds = %if.then2, %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then2 ], [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

declare i32 @fclose(i8*) local_unnamed_addr #1

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i8*, %struct.halide_trace_event_t*)* @halide_set_custom_trace(i32 (i8*, %struct.halide_trace_event_t*)* %t) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  store i32 (i8*, %struct.halide_trace_event_t*)* %t, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  ret i32 (i8*, %struct.halide_trace_event_t*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* %e) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i8*, %struct.halide_trace_event_t*)*, i32 (i8*, %struct.halide_trace_event_t*)** @_ZN6Halide7Runtime8Internal19halide_custom_traceE, align 8, !tbaa !10
  %call = tail call i32 %0(i8* %user_context, %struct.halide_trace_event_t* %e) #16
  ret i32 %call
}

; Function Attrs: nounwind
define weak i32 @halide_trace_helper(i8* %user_context, i8* %func, i8* %value, i32* %coords, i32 %type_code, i32 %type_bits, i32 %type_lanes, i32 %code, i32 %parent_id, i32 %value_index, i32 %dimensions, i8* %trace_tag) local_unnamed_addr #4 {
entry:
  %event = alloca %struct.halide_trace_event_t, align 8
  %0 = bitcast %struct.halide_trace_event_t* %event to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #11
  %code.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 0
  %bits.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 1
  %lanes.i.i = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 4, i32 2
  %func1 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 0
  store i8* %func, i8** %func1, align 8, !tbaa !138
  %value2 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 1
  store i8* %value, i8** %value2, align 8, !tbaa !150
  %coordinates = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 2
  store i32* %coords, i32** %coordinates, align 8, !tbaa !149
  %trace_tag3 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 3
  store i8* %trace_tag, i8** %trace_tag3, align 8, !tbaa !139
  %conv = trunc i32 %type_code to i8
  store i8 %conv, i8* %code.i.i, align 8, !tbaa !160
  %conv5 = trunc i32 %type_bits to i8
  store i8 %conv5, i8* %bits.i.i, align 1, !tbaa !155
  %conv7 = trunc i32 %type_lanes to i16
  store i16 %conv7, i16* %lanes.i.i, align 2, !tbaa !130
  %event9 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 5
  store i32 %code, i32* %event9, align 4, !tbaa !154
  %parent_id10 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 6
  store i32 %parent_id, i32* %parent_id10, align 8, !tbaa !168
  %value_index11 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 7
  store i32 %value_index, i32* %value_index11, align 4, !tbaa !157
  %dimensions12 = getelementptr inbounds %struct.halide_trace_event_t, %struct.halide_trace_event_t* %event, i64 0, i32 8
  store i32 %dimensions, i32* %dimensions12, align 8, !tbaa !137
  %call = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %0, i64 56) #16
  %add = add nsw i32 %type_bits, 7
  %div = sdiv i32 %add, 8
  %mul = mul nsw i32 %div, %type_lanes
  %conv13 = sext i32 %mul to i64
  %call14 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %value, i64 %conv13) #16
  %1 = bitcast i32* %coords to i8*
  %conv15 = sext i32 %dimensions to i64
  %mul16 = shl nsw i64 %conv15, 2
  %call17 = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %1, i64 %mul16) #16
  %call18 = call i32 @halide_trace(i8* %user_context, %struct.halide_trace_event_t* nonnull %event) #16
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #11
  ret i32 %call18
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* %suffix) local_unnamed_addr #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %while.cond, %entry
  %f.0 = phi i8* [ %filename, %entry ], [ %incdec.ptr, %while.cond ]
  %0 = load i8, i8* %f.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %0, 0
  %incdec.ptr = getelementptr inbounds i8, i8* %f.0, i64 1
  br i1 %tobool.not, label %while.cond1, label %while.cond, !llvm.loop !169

while.cond1:                                      ; preds = %while.cond, %while.cond1
  %s.0 = phi i8* [ %incdec.ptr4, %while.cond1 ], [ %suffix, %while.cond ]
  %1 = load i8, i8* %s.0, align 1, !tbaa !14
  %tobool2.not = icmp eq i8 %1, 0
  %incdec.ptr4 = getelementptr inbounds i8, i8* %s.0, i64 1
  br i1 %tobool2.not, label %while.cond6.preheader, label %while.cond1, !llvm.loop !170

while.cond6.preheader:                            ; preds = %while.cond1
  %cmp34 = icmp ne i8* %s.0, %suffix
  %cmp735 = icmp ne i8* %f.0, %filename
  %2 = and i1 %cmp735, %cmp34
  br i1 %2, label %if.end, label %while.end13

if.end:                                           ; preds = %while.cond6.preheader, %if.end.while.body8_crit_edge
  %f.13649 = phi i8* [ %incdec.ptr11, %if.end.while.body8_crit_edge ], [ %f.0, %while.cond6.preheader ]
  %s.13748 = phi i8* [ %incdec.ptr12, %if.end.while.body8_crit_edge ], [ %s.0, %while.cond6.preheader ]
  %incdec.ptr11 = getelementptr inbounds i8, i8* %f.13649, i64 -1
  %incdec.ptr12 = getelementptr inbounds i8, i8* %s.13748, i64 -1
  %cmp = icmp ne i8* %incdec.ptr12, %suffix
  %cmp7 = icmp ne i8* %incdec.ptr11, %filename
  %3 = and i1 %cmp7, %cmp
  %.pre = load i8, i8* %incdec.ptr11, align 1, !tbaa !14
  %.pre45 = load i8, i8* %incdec.ptr12, align 1, !tbaa !14
  br i1 %3, label %if.end.while.body8_crit_edge, label %while.end13, !llvm.loop !171

if.end.while.body8_crit_edge:                     ; preds = %if.end
  %cmp10.not = icmp eq i8 %.pre, %.pre45
  br i1 %cmp10.not, label %if.end, label %cleanup

while.end13:                                      ; preds = %if.end, %while.cond6.preheader
  %4 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre45, %if.end ]
  %5 = phi i8 [ 0, %while.cond6.preheader ], [ %.pre, %if.end ]
  %cmp16 = icmp eq i8 %5, %4
  br label %cleanup

cleanup:                                          ; preds = %if.end.while.body8_crit_edge, %while.end13
  %retval.0 = phi i1 [ %cmp16, %while.end13 ], [ false, %if.end.while.body8_crit_edge ]
  ret i1 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_debug_to_file(i8* %user_context, i8* %filename, i32 %type_code, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %shape = alloca [4 x %struct.halide_dimension_t], align 4
  %header = alloca %"struct.Halide::Runtime::Internal::halide_tiff_header", align 2
  %offset = alloca i32, align 4
  %count = alloca i32, align 4
  %array_name = alloca [256 x i8], align 1
  %array_name42 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  %header198 = alloca [129 x i8], align 1
  %tags = alloca [8 x i32], align 4
  %extents = alloca [4 x i32], align 4
  %name_header = alloca [2 x i32], align 4
  %payload_header = alloca [2 x i32], align 4
  %header289 = alloca [5 x i32], align 4
  %temp = alloca [4096 x i8], align 1
  %idx = alloca [4 x i32], align 4
  %zero = alloca i64, align 8
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %0 = load i8*, i8** %host.i, align 8, !tbaa !172
  %cmp.i = icmp eq i8* %0, null
  br i1 %cmp.i, label %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, label %if.end

_ZNK15halide_buffer_t15is_bounds_queryEv.exit:    ; preds = %entry
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp2.i = icmp eq i64 %1, 0
  br i1 %cmp2.i, label %if.then, label %if.end

if.then:                                          ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.34, i64 0, i64 0)) #16
  br label %return

if.end:                                           ; preds = %_ZNK15halide_buffer_t15is_bounds_queryEv.exit, %entry
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp = icmp sgt i32 %2, 4
  br i1 %cmp, label %if.then1, label %if.end2

if.then1:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1.35, i64 0, i64 0)) #16
  br label %return

if.end2:                                          ; preds = %if.end
  %call3 = tail call i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp4.not = icmp eq i32 %call3, 0
  br i1 %cmp4.not, label %if.end6, label %return

if.end6:                                          ; preds = %if.end2
  %call.i598 = tail call i8* @fopen(i8* %filename, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.36, i64 0, i64 0)) #16
  %cmp.i601.not = icmp eq i8* %call.i598, null
  br i1 %cmp.i601.not, label %return, label %if.end9

if.end9:                                          ; preds = %if.end6
  %3 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %3) #11
  %min.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 0
  %extent.i = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %min.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 0
  %extent.i.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %4 = bitcast [4 x %struct.halide_dimension_t]* %shape to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %4, align 4, !tbaa !73
  %min.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 0
  %extent.i.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %min.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 0
  %extent.i.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %5 = bitcast i32* %min.i.2 to <8 x i32>*
  store <8 x i32> zeroinitializer, <8 x i32>* %5, align 4, !tbaa !73
  %6 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp11875 = icmp sgt i32 %6, 0
  br i1 %cmp11875, label %for.body.lr.ph, label %for.body22.preheader

for.body.lr.ph:                                   ; preds = %if.end9
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %7 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %8 = zext i32 %6 to i64
  %9 = add nsw i64 %8, -1
  %10 = icmp ult i64 %9, 3
  %11 = select i1 %10, i64 %8, i64 4
  %12 = bitcast [4 x %struct.halide_dimension_t]* %shape to i8*
  %13 = bitcast %struct.halide_dimension_t* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %12, i8* nonnull align 4 dereferenceable(16) %13, i64 16, i1 false), !tbaa.struct !177
  %extent = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 0, i32 1
  %14 = load i32, i32* %extent, align 4, !tbaa !178
  %conv903 = zext i32 %14 to i64
  %exitcond.not17 = icmp eq i64 %11, 1
  br i1 %exitcond.not17, label %for.cond19.preheader, label %for.body.1, !llvm.loop !180

for.cond19.preheader:                             ; preds = %for.body.3, %for.body.2, %for.body.1, %for.body.lr.ph
  %mul.lcssa = phi i64 [ %conv903, %for.body.lr.ph ], [ %mul.1, %for.body.1 ], [ %mul.2, %for.body.2 ], [ %mul.3, %for.body.3 ]
  %cmp20873 = icmp slt i32 %6, 4
  br i1 %cmp20873, label %for.body22.preheader, label %for.cond.cleanup21

for.body22.preheader:                             ; preds = %for.cond19.preheader, %if.end9
  %elts.0.lcssa907 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ 1, %if.end9 ]
  %15 = sext i32 %6 to i64
  %16 = sub i32 3, %6
  %17 = zext i32 %16 to i64
  %18 = add nuw nsw i64 %17, 1
  %min.iters.check = icmp ult i32 %16, 7
  br i1 %min.iters.check, label %for.body22.preheader214, label %vector.ph

vector.ph:                                        ; preds = %for.body22.preheader
  %n.vec = and i64 %18, 8589934584
  %ind.end = add nsw i64 %n.vec, %15
  %.splatinsert = insertelement <8 x i64> poison, i64 %15, i32 0
  %.splat = shufflevector <8 x i64> %.splatinsert, <8 x i64> poison, <8 x i32> zeroinitializer
  %induction = add <8 x i64> %.splat, <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
  %19 = add nsw i64 %n.vec, -8
  %20 = lshr exact i64 %19, 3
  %21 = add nuw nsw i64 %20, 1
  %xtraiter = and i64 %21, 3
  %22 = icmp ult i64 %19, 24
  br i1 %22, label %middle.block.unr-lcssa, label %vector.ph.new

vector.ph.new:                                    ; preds = %vector.ph
  %unroll_iter = and i64 %21, 4611686018427387900
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph.new
  %vec.ind = phi <8 x i64> [ %induction, %vector.ph.new ], [ %vec.ind.next.3, %vector.body ]
  %niter = phi i64 [ %unroll_iter, %vector.ph.new ], [ %niter.nsub.3, %vector.body ]
  %23 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %23, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %24 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %24, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %25 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %25, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next = add <8 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %26 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %26, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %27, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %28 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %28, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.1 = add <8 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %29 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %29, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %30 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %30, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %31 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.1, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %31, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.2 = add <8 x i64> %vec.ind, <i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24, i64 24>
  %32 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %32, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %33 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %33, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %34 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.next.2, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %34, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.3 = add <8 x i64> %vec.ind, <i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32, i64 32>
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %middle.block.unr-lcssa, label %vector.body, !llvm.loop !183

middle.block.unr-lcssa:                           ; preds = %vector.body, %vector.ph
  %vec.ind.unr = phi <8 x i64> [ %induction, %vector.ph ], [ %vec.ind.next.3, %vector.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %middle.block, label %vector.body.epil

vector.body.epil:                                 ; preds = %middle.block.unr-lcssa, %vector.body.epil
  %vec.ind.epil = phi <8 x i64> [ %vec.ind.next.epil, %vector.body.epil ], [ %vec.ind.unr, %middle.block.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %vector.body.epil ], [ %xtraiter, %middle.block.unr-lcssa ]
  %35 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 0
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %35, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !181
  %36 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 1
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, <8 x i32*> %36, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !178
  %37 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, <8 x i64> %vec.ind.epil, i32 2
  call void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32> zeroinitializer, <8 x i32*> %37, i32 4, <8 x i1> <i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true>), !tbaa !182
  %vec.ind.next.epil = add <8 x i64> %vec.ind.epil, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %middle.block, label %vector.body.epil, !llvm.loop !185

middle.block:                                     ; preds = %vector.body.epil, %middle.block.unr-lcssa
  %cmp.n = icmp eq i64 %18, %n.vec
  br i1 %cmp.n, label %for.cond.cleanup21, label %for.body22.preheader214

for.body22.preheader214:                          ; preds = %for.body22.preheader, %middle.block
  %indvars.iv.ph = phi i64 [ %15, %for.body22.preheader ], [ %ind.end, %middle.block ]
  br label %for.body22

for.cond.cleanup21:                               ; preds = %for.body22, %middle.block, %for.cond19.preheader
  %elts.0.lcssa906 = phi i64 [ %mul.lcssa, %for.cond19.preheader ], [ %elts.0.lcssa907, %middle.block ], [ %elts.0.lcssa907, %for.body22 ]
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %38 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %38 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %call34 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.37, i64 0, i64 0)) #17
  br i1 %call34, label %if.then36, label %lor.lhs.false

for.body22:                                       ; preds = %for.body22.preheader214, %for.body22
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body22 ], [ %indvars.iv.ph, %for.body22.preheader214 ]
  %min = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 0
  store i32 0, i32* %min, align 4, !tbaa !181
  %extent27 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 1
  store i32 1, i32* %extent27, align 4, !tbaa !178
  %stride = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 %indvars.iv, i32 2
  store i32 0, i32* %stride, align 4, !tbaa !182
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32
  %exitcond886.not = icmp eq i32 %lftr.wideiv, 4
  br i1 %exitcond886.not, label %for.cond.cleanup21, label %for.body22, !llvm.loop !187

lor.lhs.false:                                    ; preds = %for.cond.cleanup21
  %call35 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.38, i64 0, i64 0)) #17
  br i1 %call35, label %if.then36, label %if.else164

if.then36:                                        ; preds = %lor.lhs.false, %for.cond.cleanup21
  %39 = load i32, i32* %extent.i, align 4, !tbaa !178
  %40 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %41 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %switch = icmp ult i32 %41, 2
  %42 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %cmp50 = icmp slt i32 %42, 5
  %or.cond = and i1 %switch, %cmp50
  %depth.0 = select i1 %or.cond, i32 1, i32 %42
  %channels.0 = select i1 %or.cond, i32 %42, i32 %41
  %43 = bitcast %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header to i8*
  call void @llvm.lifetime.start.p0i8(i64 210, i8* nonnull %43) #11
  %byte_order_marker = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 0
  store i16 18761, i16* %byte_order_marker, align 2, !tbaa !189
  %version = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 1
  store i16 42, i16* %version, align 2, !tbaa !191
  %ifd0_offset = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 2
  store i32 8, i32* %ifd0_offset, align 2, !tbaa !192
  %entry_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 3
  store i16 15, i16* %entry_count, align 2, !tbaa !193
  %tag_code2.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 0
  store i16 256, i16* %tag_code2.i, align 2, !tbaa !194
  %type_code.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 1
  store i16 4, i16* %type_code.i, align 2, !tbaa !196
  %count3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 2
  store i32 1, i32* %count3.i, align 2, !tbaa !197
  %i32.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 0, i32 3, i32 0
  store i32 %39, i32* %i32.i, align 2, !tbaa !14
  %tag_code2.i632 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 0
  store i16 257, i16* %tag_code2.i632, align 2, !tbaa !194
  %type_code.i633 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 1
  store i16 4, i16* %type_code.i633, align 2, !tbaa !196
  %count3.i634 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 2
  store i32 1, i32* %count3.i634, align 2, !tbaa !197
  %i32.i635 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 1, i32 3, i32 0
  store i32 %40, i32* %i32.i635, align 2, !tbaa !14
  %44 = trunc i32 %add.i to i16
  %conv68 = and i16 %44, 504
  %tag_code2.i643 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 0
  store i16 258, i16* %tag_code2.i643, align 2, !tbaa !194
  %type_code.i644 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 1
  store i16 3, i16* %type_code.i644, align 2, !tbaa !196
  %count3.i645 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 2
  store i32 1, i32* %count3.i645, align 2, !tbaa !197
  %value4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 2, i32 3
  %i16.i = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i to i16*
  store i16 %conv68, i16* %i16.i, align 2, !tbaa !14
  %tag_code2.i653 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 0
  store i16 259, i16* %tag_code2.i653, align 2, !tbaa !194
  %type_code.i654 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 1
  store i16 3, i16* %type_code.i654, align 2, !tbaa !196
  %count3.i655 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 2
  store i32 1, i32* %count3.i655, align 2, !tbaa !197
  %value4.i656 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 3, i32 3
  %i16.i657 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i656 to i16*
  store i16 1, i16* %i16.i657, align 2, !tbaa !14
  %cmp71 = icmp sgt i32 %channels.0, 2
  %conv72 = select i1 %cmp71, i16 2, i16 1
  %tag_code2.i665 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 0
  store i16 262, i16* %tag_code2.i665, align 2, !tbaa !194
  %type_code.i666 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 1
  store i16 3, i16* %type_code.i666, align 2, !tbaa !196
  %count3.i667 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 2
  store i32 1, i32* %count3.i667, align 2, !tbaa !197
  %value4.i668 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 4, i32 3
  %i16.i669 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i668 to i16*
  store i16 %conv72, i16* %i16.i669, align 2, !tbaa !14
  %tag_code2.i677 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 0
  store i16 273, i16* %tag_code2.i677, align 2, !tbaa !194
  %type_code.i678 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 1
  store i16 4, i16* %type_code.i678, align 2, !tbaa !196
  %count3.i679 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 2
  store i32 %channels.0, i32* %count3.i679, align 2, !tbaa !197
  %i32.i680 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 5, i32 3, i32 0
  store i32 210, i32* %i32.i680, align 2, !tbaa !14
  %conv75 = trunc i32 %channels.0 to i16
  %tag_code2.i688 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 0
  store i16 277, i16* %tag_code2.i688, align 2, !tbaa !194
  %type_code.i689 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 1
  store i16 3, i16* %type_code.i689, align 2, !tbaa !196
  %count3.i690 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 2
  store i32 1, i32* %count3.i690, align 2, !tbaa !197
  %value4.i691 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 6, i32 3
  %i16.i692 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i691 to i16*
  store i16 %conv75, i16* %i16.i692, align 2, !tbaa !14
  %tag_code2.i706 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 0
  store i16 278, i16* %tag_code2.i706, align 2, !tbaa !194
  %type_code.i707 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 1
  store i16 4, i16* %type_code.i707, align 2, !tbaa !196
  %count3.i708 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 2
  store i32 1, i32* %count3.i708, align 2, !tbaa !197
  %i32.i709 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 7, i32 3, i32 0
  store i32 %40, i32* %i32.i709, align 2, !tbaa !14
  %cmp80 = icmp eq i32 %channels.0, 1
  %45 = trunc i64 %elts.0.lcssa906 to i32
  %conv86595 = mul i32 %div.i, %45
  %mul84 = shl i32 %channels.0, 2
  %add = add i32 %mul84, 210
  %add.sink = select i1 %cmp80, i32 %conv86595, i32 %add
  %46 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 0
  store i16 279, i16* %46, align 2
  %47 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 1
  store i16 4, i16* %47, align 2
  %48 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 2
  store i32 %channels.0, i32* %48, align 2
  %49 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 8, i32 3, i32 0
  store i32 %add.sink, i32* %49, align 2
  %tag_code2.i732 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 0
  store i16 282, i16* %tag_code2.i732, align 2, !tbaa !194
  %type_code3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 1
  store i16 5, i16* %type_code3.i, align 2, !tbaa !196
  %count4.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 2
  store i32 1, i32* %count4.i, align 2, !tbaa !197
  %i32.i733 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 9, i32 3, i32 0
  store i32 194, i32* %i32.i733, align 2, !tbaa !14
  %tag_code2.i741 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 0
  store i16 283, i16* %tag_code2.i741, align 2, !tbaa !194
  %type_code3.i742 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 1
  store i16 5, i16* %type_code3.i742, align 2, !tbaa !196
  %count4.i743 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 2
  store i32 1, i32* %count4.i743, align 2, !tbaa !197
  %i32.i744 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 10, i32 3, i32 0
  store i32 202, i32* %i32.i744, align 2, !tbaa !14
  %tag_code2.i759 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 0
  store i16 284, i16* %tag_code2.i759, align 2, !tbaa !194
  %type_code.i760 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 1
  store i16 3, i16* %type_code.i760, align 2, !tbaa !196
  %count3.i761 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 2
  store i32 1, i32* %count3.i761, align 2, !tbaa !197
  %value4.i762 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 11, i32 3
  %i16.i763 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i762 to i16*
  store i16 2, i16* %i16.i763, align 2, !tbaa !14
  %tag_code2.i754 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 0
  store i16 296, i16* %tag_code2.i754, align 2, !tbaa !194
  %type_code.i755 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 1
  store i16 3, i16* %type_code.i755, align 2, !tbaa !196
  %count3.i756 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 2
  store i32 1, i32* %count3.i756, align 2, !tbaa !197
  %value4.i757 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 12, i32 3
  %i16.i758 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i757 to i16*
  store i16 1, i16* %i16.i758, align 2, !tbaa !14
  %idxprom92 = sext i32 %type_code to i64
  %arrayidx93 = getelementptr inbounds [10 x i16], [10 x i16]* @_ZN6Halide7Runtime8Internal30pixel_type_to_tiff_sample_typeE, i64 0, i64 %idxprom92
  %50 = load i16, i16* %arrayidx93, align 2, !tbaa !161
  %tag_code2.i749 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 0
  store i16 339, i16* %tag_code2.i749, align 2, !tbaa !194
  %type_code.i750 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 1
  store i16 3, i16* %type_code.i750, align 2, !tbaa !196
  %count3.i751 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 2
  store i32 1, i32* %count3.i751, align 2, !tbaa !197
  %value4.i752 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 13, i32 3
  %i16.i753 = bitcast %"class.Halide::Runtime::Internal::SharedExclusiveSpinLock"* %value4.i752 to i16*
  store i16 %50, i16* %i16.i753, align 2, !tbaa !14
  %tag_code2.i745 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 0
  store i16 -32539, i16* %tag_code2.i745, align 2, !tbaa !194
  %type_code.i746 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 1
  store i16 4, i16* %type_code.i746, align 2, !tbaa !196
  %count3.i747 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 2
  store i32 1, i32* %count3.i747, align 2, !tbaa !197
  %i32.i748 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 4, i64 14, i32 3, i32 0
  store i32 %depth.0, i32* %i32.i748, align 2, !tbaa !14
  %ifd0_end = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 5
  %51 = bitcast i32* %ifd0_end to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %51, align 2, !tbaa !73
  %arrayidx100 = getelementptr inbounds %"struct.Halide::Runtime::Internal::halide_tiff_header", %"struct.Halide::Runtime::Internal::halide_tiff_header"* %header, i64 0, i32 7, i64 1
  store i32 1, i32* %arrayidx100, align 2, !tbaa !73
  %call.i736 = call i64 @fwrite(i8* nonnull %43, i64 210, i64 1, i8* nonnull %call.i598) #16
  %cmp.i737.not = icmp eq i64 %call.i736, 0
  br i1 %cmp.i737.not, label %cleanup154, label %if.end103

if.end103:                                        ; preds = %if.then36
  %cmp104 = icmp sgt i32 %channels.0, 1
  br i1 %cmp104, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph, label %cleanup154.thread

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph: ; preds = %if.end103
  %52 = bitcast i32* %offset to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #11
  %mul108 = shl i32 %channels.0, 3
  %add109 = add i32 %mul108, 210
  store i32 %add109, i32* %offset, align 4, !tbaa !73
  %mul123 = mul i32 %depth.0, %div.i
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731: ; preds = %if.end118, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph
  %i111.0865 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731.lr.ph ], [ %inc128, %if.end118 ]
  %call.i727 = call i64 @fwrite(i8* nonnull %52, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i728.not = icmp eq i64 %call.i727, 0
  br i1 %cmp.i728.not, label %cleanup151.thread, label %if.end118

if.end118:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731
  %53 = load i32, i32* %extent.i, align 4, !tbaa !178
  %54 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %mul124 = mul i32 %mul123, %53
  %mul125 = mul i32 %mul124, %54
  %55 = load i32, i32* %offset, align 4, !tbaa !73
  %add126 = add nsw i32 %mul125, %55
  store i32 %add126, i32* %offset, align 4, !tbaa !73
  %inc128 = add nuw nsw i32 %i111.0865, 1
  %exitcond881.not = icmp eq i32 %inc128, %channels.0
  br i1 %exitcond881.not, label %for.end129, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, !llvm.loop !198

for.end129:                                       ; preds = %if.end118
  %56 = bitcast i32* %count to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #11
  store i32 %mul125, i32* %count, align 4, !tbaa !73
  br label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720

for.cond138:                                      ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  %exitcond.not = icmp eq i32 %inc146, %channels.0
  br i1 %exitcond.not, label %cleanup151, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720, !llvm.loop !199

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720: ; preds = %for.end129, %for.cond138
  %i137.0863 = phi i32 [ %inc146, %for.cond138 ], [ 0, %for.end129 ]
  %call.i716 = call i64 @fwrite(i8* nonnull %56, i64 4, i64 1, i8* nonnull %call.i598) #16
  %cmp.i717.not = icmp eq i64 %call.i716, 0
  %inc146 = add nuw nsw i32 %i137.0863, 1
  br i1 %cmp.i717.not, label %select.unfold, label %for.cond138

select.unfold:                                    ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit720
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  br label %cleanup151.thread

cleanup151.thread:                                ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731, %select.unfold
  %retval.2.ph = phi i32 [ -5, %select.unfold ], [ -4, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit731 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154

cleanup151:                                       ; preds = %for.cond138
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %56) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #11
  br label %cleanup154.thread

cleanup154.thread:                                ; preds = %cleanup151, %if.end103
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %if.end311

cleanup154:                                       ; preds = %cleanup151.thread, %if.then36
  %retval.4 = phi i32 [ -3, %if.then36 ], [ %retval.2.ph, %cleanup151.thread ]
  call void @llvm.lifetime.end.p0i8(i64 210, i8* nonnull %43) #11
  br label %cleanup433

if.else164:                                       ; preds = %lor.lhs.false
  %call165 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal9ends_withEPKcS3_(i8* %filename, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.39, i64 0, i64 0)) #17
  br i1 %call165, label %while.cond, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631

while.cond:                                       ; preds = %if.else164, %while.cond
  %end.0 = phi i8* [ %incdec.ptr167, %while.cond ], [ %filename, %if.else164 ]
  %57 = load i8, i8* %end.0, align 1, !tbaa !14
  %tobool.not = icmp eq i8 %57, 0
  %incdec.ptr167 = getelementptr inbounds i8, i8* %end.0, i64 1
  br i1 %tobool.not, label %while.body171, label %while.cond, !llvm.loop !200

while.cond174.preheader:                          ; preds = %while.body171
  %end.1872.lcssa883 = ptrtoint i8* %end.1872 to i64
  %58 = ptrtoint i8* %filename to i64
  %59 = sub i64 %58, %end.1872.lcssa883
  br label %while.cond174

while.body171:                                    ; preds = %while.cond, %while.body171
  %end.1872 = phi i8* [ %incdec.ptr172.ptr, %while.body171 ], [ %end.0, %while.cond ]
  %incdec.ptr172.ptr = getelementptr inbounds i8, i8* %end.1872, i64 -1
  %.pr = load i8, i8* %incdec.ptr172.ptr, align 1, !tbaa !14
  %cmp170.not = icmp eq i8 %.pr, 46
  br i1 %cmp170.not, label %while.cond174.preheader, label %while.body171, !llvm.loop !201

while.cond174:                                    ; preds = %land.rhs176, %while.cond174.preheader
  %start.0.idx = phi i64 [ %start.0.add, %land.rhs176 ], [ -1, %while.cond174.preheader ]
  %start.0.ptr.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.idx
  %cmp175.not = icmp eq i8* %start.0.ptr.ptr, %filename
  br i1 %cmp175.not, label %while.end183, label %land.rhs176

land.rhs176:                                      ; preds = %while.cond174
  %start.0.add = add nsw i64 %start.0.idx, -1
  %arrayidx177.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.0.add
  %60 = load i8, i8* %arrayidx177.ptr, align 1, !tbaa !14
  %cmp179.not = icmp eq i8 %60, 47
  br i1 %cmp179.not, label %while.end183, label %while.cond174, !llvm.loop !202

while.end183:                                     ; preds = %land.rhs176, %while.cond174
  %start.0.idx.lcssa = phi i64 [ %59, %while.cond174 ], [ %start.0.idx, %land.rhs176 ]
  %61 = trunc i64 %start.0.idx.lcssa to i32
  %conv184 = xor i32 %61, -1
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %62) #11
  %cmp186.not868 = icmp eq i64 %start.0.idx.lcssa, -1
  br i1 %cmp186.not868, label %iter.check, label %while.body187.preheader

while.body187.preheader:                          ; preds = %while.end183
  %63 = xor i64 %start.0.idx.lcssa, -1
  %min.iters.check39 = icmp ugt i64 %start.0.idx.lcssa, -129
  br i1 %min.iters.check39, label %while.body187.preheader212, label %vector.memcheck

vector.memcheck:                                  ; preds = %while.body187.preheader
  %64 = xor i64 %start.0.idx.lcssa, -1
  %scevgep43 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %64
  %scevgep44 = getelementptr i8, i8* %end.1872, i64 %start.0.idx.lcssa
  %scevgep45 = getelementptr i8, i8* %end.1872, i64 -1
  %bound0 = icmp ult i8* %array_name42, %scevgep45
  %bound1 = icmp ult i8* %scevgep44, %scevgep43
  %found.conflict = and i1 %bound0, %bound1
  br i1 %found.conflict, label %while.body187.preheader212, label %vector.ph41

vector.ph41:                                      ; preds = %vector.memcheck
  %n.vec47 = and i64 %63, -128
  %ind.end51 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %n.vec47
  %ind.end53 = add i64 %start.0.idx.lcssa, %n.vec47
  %65 = add i64 %n.vec47, -128
  %66 = lshr exact i64 %65, 7
  %67 = add nuw nsw i64 %66, 1
  %xtraiter215 = and i64 %67, 3
  %68 = icmp ult i64 %65, 384
  br i1 %68, label %middle.block36.unr-lcssa, label %vector.ph41.new

vector.ph41.new:                                  ; preds = %vector.ph41
  %unroll_iter218 = and i64 %67, 288230376151711740
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph41.new
  %index48 = phi i64 [ 0, %vector.ph41.new ], [ %index.next49.3, %vector.body38 ]
  %niter219 = phi i64 [ %unroll_iter218, %vector.ph41.new ], [ %niter219.nsub.3, %vector.body38 ]
  %next.gep = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48
  %offset.idx = add i64 %start.0.idx.lcssa, %index48
  %69 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx
  %70 = bitcast i8* %69 to <32 x i8>*
  %wide.load = load <32 x i8>, <32 x i8>* %70, align 1, !tbaa !14, !alias.scope !203
  %71 = getelementptr inbounds i8, i8* %69, i64 32
  %72 = bitcast i8* %71 to <32 x i8>*
  %wide.load58 = load <32 x i8>, <32 x i8>* %72, align 1, !tbaa !14, !alias.scope !203
  %73 = getelementptr inbounds i8, i8* %69, i64 64
  %74 = bitcast i8* %73 to <32 x i8>*
  %wide.load59 = load <32 x i8>, <32 x i8>* %74, align 1, !tbaa !14, !alias.scope !203
  %75 = getelementptr inbounds i8, i8* %69, i64 96
  %76 = bitcast i8* %75 to <32 x i8>*
  %wide.load60 = load <32 x i8>, <32 x i8>* %76, align 1, !tbaa !14, !alias.scope !203
  %77 = bitcast i8* %next.gep to <32 x i8>*
  store <32 x i8> %wide.load, <32 x i8>* %77, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %78 = getelementptr i8, i8* %next.gep, i64 32
  %79 = bitcast i8* %78 to <32 x i8>*
  store <32 x i8> %wide.load58, <32 x i8>* %79, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %80 = getelementptr i8, i8* %next.gep, i64 64
  %81 = bitcast i8* %80 to <32 x i8>*
  store <32 x i8> %wide.load59, <32 x i8>* %81, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %82 = getelementptr i8, i8* %next.gep, i64 96
  %83 = bitcast i8* %82 to <32 x i8>*
  store <32 x i8> %wide.load60, <32 x i8>* %83, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49 = or i64 %index48, 128
  %next.gep.1 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49
  %offset.idx.1 = add i64 %start.0.idx.lcssa, %index.next49
  %84 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.1
  %85 = bitcast i8* %84 to <32 x i8>*
  %wide.load.1 = load <32 x i8>, <32 x i8>* %85, align 1, !tbaa !14, !alias.scope !203
  %86 = getelementptr inbounds i8, i8* %84, i64 32
  %87 = bitcast i8* %86 to <32 x i8>*
  %wide.load58.1 = load <32 x i8>, <32 x i8>* %87, align 1, !tbaa !14, !alias.scope !203
  %88 = getelementptr inbounds i8, i8* %84, i64 64
  %89 = bitcast i8* %88 to <32 x i8>*
  %wide.load59.1 = load <32 x i8>, <32 x i8>* %89, align 1, !tbaa !14, !alias.scope !203
  %90 = getelementptr inbounds i8, i8* %84, i64 96
  %91 = bitcast i8* %90 to <32 x i8>*
  %wide.load60.1 = load <32 x i8>, <32 x i8>* %91, align 1, !tbaa !14, !alias.scope !203
  %92 = bitcast i8* %next.gep.1 to <32 x i8>*
  store <32 x i8> %wide.load.1, <32 x i8>* %92, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %93 = getelementptr i8, i8* %next.gep.1, i64 32
  %94 = bitcast i8* %93 to <32 x i8>*
  store <32 x i8> %wide.load58.1, <32 x i8>* %94, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %95 = getelementptr i8, i8* %next.gep.1, i64 64
  %96 = bitcast i8* %95 to <32 x i8>*
  store <32 x i8> %wide.load59.1, <32 x i8>* %96, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %97 = getelementptr i8, i8* %next.gep.1, i64 96
  %98 = bitcast i8* %97 to <32 x i8>*
  store <32 x i8> %wide.load60.1, <32 x i8>* %98, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.1 = or i64 %index48, 256
  %next.gep.2 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.1
  %offset.idx.2 = add i64 %start.0.idx.lcssa, %index.next49.1
  %99 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.2
  %100 = bitcast i8* %99 to <32 x i8>*
  %wide.load.2 = load <32 x i8>, <32 x i8>* %100, align 1, !tbaa !14, !alias.scope !203
  %101 = getelementptr inbounds i8, i8* %99, i64 32
  %102 = bitcast i8* %101 to <32 x i8>*
  %wide.load58.2 = load <32 x i8>, <32 x i8>* %102, align 1, !tbaa !14, !alias.scope !203
  %103 = getelementptr inbounds i8, i8* %99, i64 64
  %104 = bitcast i8* %103 to <32 x i8>*
  %wide.load59.2 = load <32 x i8>, <32 x i8>* %104, align 1, !tbaa !14, !alias.scope !203
  %105 = getelementptr inbounds i8, i8* %99, i64 96
  %106 = bitcast i8* %105 to <32 x i8>*
  %wide.load60.2 = load <32 x i8>, <32 x i8>* %106, align 1, !tbaa !14, !alias.scope !203
  %107 = bitcast i8* %next.gep.2 to <32 x i8>*
  store <32 x i8> %wide.load.2, <32 x i8>* %107, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %108 = getelementptr i8, i8* %next.gep.2, i64 32
  %109 = bitcast i8* %108 to <32 x i8>*
  store <32 x i8> %wide.load58.2, <32 x i8>* %109, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %110 = getelementptr i8, i8* %next.gep.2, i64 64
  %111 = bitcast i8* %110 to <32 x i8>*
  store <32 x i8> %wide.load59.2, <32 x i8>* %111, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %112 = getelementptr i8, i8* %next.gep.2, i64 96
  %113 = bitcast i8* %112 to <32 x i8>*
  store <32 x i8> %wide.load60.2, <32 x i8>* %113, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.2 = or i64 %index48, 384
  %next.gep.3 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index.next49.2
  %offset.idx.3 = add i64 %start.0.idx.lcssa, %index.next49.2
  %114 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.3
  %115 = bitcast i8* %114 to <32 x i8>*
  %wide.load.3 = load <32 x i8>, <32 x i8>* %115, align 1, !tbaa !14, !alias.scope !203
  %116 = getelementptr inbounds i8, i8* %114, i64 32
  %117 = bitcast i8* %116 to <32 x i8>*
  %wide.load58.3 = load <32 x i8>, <32 x i8>* %117, align 1, !tbaa !14, !alias.scope !203
  %118 = getelementptr inbounds i8, i8* %114, i64 64
  %119 = bitcast i8* %118 to <32 x i8>*
  %wide.load59.3 = load <32 x i8>, <32 x i8>* %119, align 1, !tbaa !14, !alias.scope !203
  %120 = getelementptr inbounds i8, i8* %114, i64 96
  %121 = bitcast i8* %120 to <32 x i8>*
  %wide.load60.3 = load <32 x i8>, <32 x i8>* %121, align 1, !tbaa !14, !alias.scope !203
  %122 = bitcast i8* %next.gep.3 to <32 x i8>*
  store <32 x i8> %wide.load.3, <32 x i8>* %122, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %123 = getelementptr i8, i8* %next.gep.3, i64 32
  %124 = bitcast i8* %123 to <32 x i8>*
  store <32 x i8> %wide.load58.3, <32 x i8>* %124, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %125 = getelementptr i8, i8* %next.gep.3, i64 64
  %126 = bitcast i8* %125 to <32 x i8>*
  store <32 x i8> %wide.load59.3, <32 x i8>* %126, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %127 = getelementptr i8, i8* %next.gep.3, i64 96
  %128 = bitcast i8* %127 to <32 x i8>*
  store <32 x i8> %wide.load60.3, <32 x i8>* %128, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.3 = add i64 %index48, 512
  %niter219.nsub.3 = add i64 %niter219, -4
  %niter219.ncmp.3 = icmp eq i64 %niter219.nsub.3, 0
  br i1 %niter219.ncmp.3, label %middle.block36.unr-lcssa, label %vector.body38, !llvm.loop !208

middle.block36.unr-lcssa:                         ; preds = %vector.body38, %vector.ph41
  %index48.unr = phi i64 [ 0, %vector.ph41 ], [ %index.next49.3, %vector.body38 ]
  %lcmp.mod217.not = icmp eq i64 %xtraiter215, 0
  br i1 %lcmp.mod217.not, label %middle.block36, label %vector.body38.epil

vector.body38.epil:                               ; preds = %middle.block36.unr-lcssa, %vector.body38.epil
  %index48.epil = phi i64 [ %index.next49.epil, %vector.body38.epil ], [ %index48.unr, %middle.block36.unr-lcssa ]
  %epil.iter216 = phi i64 [ %epil.iter216.sub, %vector.body38.epil ], [ %xtraiter215, %middle.block36.unr-lcssa ]
  %next.gep.epil = getelementptr [256 x i8], [256 x i8]* %array_name, i64 0, i64 %index48.epil
  %offset.idx.epil = add i64 %start.0.idx.lcssa, %index48.epil
  %129 = getelementptr inbounds i8, i8* %end.1872, i64 %offset.idx.epil
  %130 = bitcast i8* %129 to <32 x i8>*
  %wide.load.epil = load <32 x i8>, <32 x i8>* %130, align 1, !tbaa !14, !alias.scope !203
  %131 = getelementptr inbounds i8, i8* %129, i64 32
  %132 = bitcast i8* %131 to <32 x i8>*
  %wide.load58.epil = load <32 x i8>, <32 x i8>* %132, align 1, !tbaa !14, !alias.scope !203
  %133 = getelementptr inbounds i8, i8* %129, i64 64
  %134 = bitcast i8* %133 to <32 x i8>*
  %wide.load59.epil = load <32 x i8>, <32 x i8>* %134, align 1, !tbaa !14, !alias.scope !203
  %135 = getelementptr inbounds i8, i8* %129, i64 96
  %136 = bitcast i8* %135 to <32 x i8>*
  %wide.load60.epil = load <32 x i8>, <32 x i8>* %136, align 1, !tbaa !14, !alias.scope !203
  %137 = bitcast i8* %next.gep.epil to <32 x i8>*
  store <32 x i8> %wide.load.epil, <32 x i8>* %137, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %138 = getelementptr i8, i8* %next.gep.epil, i64 32
  %139 = bitcast i8* %138 to <32 x i8>*
  store <32 x i8> %wide.load58.epil, <32 x i8>* %139, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %140 = getelementptr i8, i8* %next.gep.epil, i64 64
  %141 = bitcast i8* %140 to <32 x i8>*
  store <32 x i8> %wide.load59.epil, <32 x i8>* %141, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %142 = getelementptr i8, i8* %next.gep.epil, i64 96
  %143 = bitcast i8* %142 to <32 x i8>*
  store <32 x i8> %wide.load60.epil, <32 x i8>* %143, align 1, !tbaa !14, !alias.scope !206, !noalias !203
  %index.next49.epil = add i64 %index48.epil, 128
  %epil.iter216.sub = add i64 %epil.iter216, -1
  %epil.iter216.cmp.not = icmp eq i64 %epil.iter216.sub, 0
  br i1 %epil.iter216.cmp.not, label %middle.block36, label %vector.body38.epil, !llvm.loop !209

middle.block36:                                   ; preds = %vector.body38.epil, %middle.block36.unr-lcssa
  %cmp.n54 = icmp eq i64 %n.vec47, %63
  br i1 %cmp.n54, label %while.cond191.preheader, label %while.body187.preheader212

while.body187.preheader212:                       ; preds = %vector.memcheck, %while.body187.preheader, %middle.block36
  %dst.0870.ph = phi i8* [ %62, %vector.memcheck ], [ %62, %while.body187.preheader ], [ %ind.end51, %middle.block36 ]
  %start.1869.idx.ph = phi i64 [ %start.0.idx.lcssa, %vector.memcheck ], [ %start.0.idx.lcssa, %while.body187.preheader ], [ %ind.end53, %middle.block36 ]
  %144 = sub i64 -2, %start.1869.idx.ph
  %145 = and i64 %start.1869.idx.ph, 7
  %xtraiter220 = xor i64 %145, 7
  %lcmp.mod221.not = icmp eq i64 %xtraiter220, 0
  br i1 %lcmp.mod221.not, label %while.body187.prol.loopexit, label %while.body187.prol

while.body187.prol:                               ; preds = %while.body187.preheader212, %while.body187.prol
  %dst.0870.prol = phi i8* [ %incdec.ptr189.prol, %while.body187.prol ], [ %dst.0870.ph, %while.body187.preheader212 ]
  %start.1869.idx.prol = phi i64 [ %start.1869.add.prol, %while.body187.prol ], [ %start.1869.idx.ph, %while.body187.preheader212 ]
  %prol.iter = phi i64 [ %prol.iter.sub, %while.body187.prol ], [ %xtraiter220, %while.body187.preheader212 ]
  %start.1869.ptr.prol = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx.prol
  %start.1869.add.prol = add nuw nsw i64 %start.1869.idx.prol, 1
  %146 = load i8, i8* %start.1869.ptr.prol, align 1, !tbaa !14
  %incdec.ptr189.prol = getelementptr inbounds i8, i8* %dst.0870.prol, i64 1
  store i8 %146, i8* %dst.0870.prol, align 1, !tbaa !14
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %while.body187.prol.loopexit, label %while.body187.prol, !llvm.loop !210

while.body187.prol.loopexit:                      ; preds = %while.body187.prol, %while.body187.preheader212
  %incdec.ptr189.lcssa213.unr = phi i8* [ undef, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %dst.0870.unr = phi i8* [ %dst.0870.ph, %while.body187.preheader212 ], [ %incdec.ptr189.prol, %while.body187.prol ]
  %start.1869.idx.unr = phi i64 [ %start.1869.idx.ph, %while.body187.preheader212 ], [ %start.1869.add.prol, %while.body187.prol ]
  %147 = icmp ult i64 %144, 7
  br i1 %147, label %while.cond191.preheader, label %while.body187

while.cond191.preheader:                          ; preds = %while.body187.prol.loopexit, %while.body187, %middle.block36
  %incdec.ptr189.lcssa = phi i8* [ %ind.end51, %middle.block36 ], [ %incdec.ptr189.lcssa213.unr, %while.body187.prol.loopexit ], [ %incdec.ptr189.7, %while.body187 ]
  %add.ptr = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 0, i64 256
  %cmp193866 = icmp ult i8* %incdec.ptr189.lcssa, %add.ptr
  br i1 %cmp193866, label %iter.check, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705

iter.check:                                       ; preds = %while.cond191.preheader, %while.end183
  %dst.0.lcssa911 = phi i8* [ %incdec.ptr189.lcssa, %while.cond191.preheader ], [ %62, %while.end183 ]
  %dst.0.lcssa91164 = ptrtoint i8* %dst.0.lcssa911 to i64
  %scevgep = getelementptr inbounds [256 x i8], [256 x i8]* %array_name, i64 1, i64 0
  %148 = sub i64 0, %dst.0.lcssa91164
  %scevgep65 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %148
  %exitcount.ptrcnt.to.int = ptrtoint i8* %scevgep65 to i64
  %min.iters.check67 = icmp ult i8* %scevgep65, inttoptr (i64 4 to i8*)
  br i1 %min.iters.check67, label %while.body194.preheader, label %vector.main.loop.iter.check

vector.main.loop.iter.check:                      ; preds = %iter.check
  %min.iters.check69 = icmp ult i8* %scevgep65, inttoptr (i64 128 to i8*)
  br i1 %min.iters.check69, label %vec.epilog.ph, label %vector.ph70

vector.ph70:                                      ; preds = %vector.main.loop.iter.check
  %n.vec72 = and i64 %exitcount.ptrcnt.to.int, -128
  %149 = add i64 %n.vec72, -128
  %150 = lshr exact i64 %149, 7
  %151 = add nuw nsw i64 %150, 1
  %xtraiter222 = and i64 %151, 7
  %152 = icmp ult i64 %149, 896
  br i1 %152, label %middle.block61.unr-lcssa, label %vector.ph70.new

vector.ph70.new:                                  ; preds = %vector.ph70
  %unroll_iter225 = and i64 %151, 288230376151711736
  br label %vector.body63

vector.body63:                                    ; preds = %vector.body63, %vector.ph70.new
  %index73 = phi i64 [ 0, %vector.ph70.new ], [ %index.next74.7, %vector.body63 ]
  %niter226 = phi i64 [ %unroll_iter225, %vector.ph70.new ], [ %niter226.nsub.7, %vector.body63 ]
  %next.gep76 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73
  %153 = bitcast i8* %next.gep76 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %153, align 1, !tbaa !14
  %154 = getelementptr i8, i8* %next.gep76, i64 32
  %155 = bitcast i8* %154 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %155, align 1, !tbaa !14
  %156 = getelementptr i8, i8* %next.gep76, i64 64
  %157 = bitcast i8* %156 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %157, align 1, !tbaa !14
  %158 = getelementptr i8, i8* %next.gep76, i64 96
  %159 = bitcast i8* %158 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %159, align 1, !tbaa !14
  %index.next74 = or i64 %index73, 128
  %next.gep76.1 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74
  %160 = bitcast i8* %next.gep76.1 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %160, align 1, !tbaa !14
  %161 = getelementptr i8, i8* %next.gep76.1, i64 32
  %162 = bitcast i8* %161 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %162, align 1, !tbaa !14
  %163 = getelementptr i8, i8* %next.gep76.1, i64 64
  %164 = bitcast i8* %163 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %164, align 1, !tbaa !14
  %165 = getelementptr i8, i8* %next.gep76.1, i64 96
  %166 = bitcast i8* %165 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %166, align 1, !tbaa !14
  %index.next74.1 = or i64 %index73, 256
  %next.gep76.2 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.1
  %167 = bitcast i8* %next.gep76.2 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %167, align 1, !tbaa !14
  %168 = getelementptr i8, i8* %next.gep76.2, i64 32
  %169 = bitcast i8* %168 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %169, align 1, !tbaa !14
  %170 = getelementptr i8, i8* %next.gep76.2, i64 64
  %171 = bitcast i8* %170 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %171, align 1, !tbaa !14
  %172 = getelementptr i8, i8* %next.gep76.2, i64 96
  %173 = bitcast i8* %172 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %173, align 1, !tbaa !14
  %index.next74.2 = or i64 %index73, 384
  %next.gep76.3 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.2
  %174 = bitcast i8* %next.gep76.3 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %174, align 1, !tbaa !14
  %175 = getelementptr i8, i8* %next.gep76.3, i64 32
  %176 = bitcast i8* %175 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %176, align 1, !tbaa !14
  %177 = getelementptr i8, i8* %next.gep76.3, i64 64
  %178 = bitcast i8* %177 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %178, align 1, !tbaa !14
  %179 = getelementptr i8, i8* %next.gep76.3, i64 96
  %180 = bitcast i8* %179 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %180, align 1, !tbaa !14
  %index.next74.3 = or i64 %index73, 512
  %next.gep76.4 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.3
  %181 = bitcast i8* %next.gep76.4 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %181, align 1, !tbaa !14
  %182 = getelementptr i8, i8* %next.gep76.4, i64 32
  %183 = bitcast i8* %182 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %183, align 1, !tbaa !14
  %184 = getelementptr i8, i8* %next.gep76.4, i64 64
  %185 = bitcast i8* %184 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %185, align 1, !tbaa !14
  %186 = getelementptr i8, i8* %next.gep76.4, i64 96
  %187 = bitcast i8* %186 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %187, align 1, !tbaa !14
  %index.next74.4 = or i64 %index73, 640
  %next.gep76.5 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.4
  %188 = bitcast i8* %next.gep76.5 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %188, align 1, !tbaa !14
  %189 = getelementptr i8, i8* %next.gep76.5, i64 32
  %190 = bitcast i8* %189 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %190, align 1, !tbaa !14
  %191 = getelementptr i8, i8* %next.gep76.5, i64 64
  %192 = bitcast i8* %191 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %192, align 1, !tbaa !14
  %193 = getelementptr i8, i8* %next.gep76.5, i64 96
  %194 = bitcast i8* %193 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %194, align 1, !tbaa !14
  %index.next74.5 = or i64 %index73, 768
  %next.gep76.6 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.5
  %195 = bitcast i8* %next.gep76.6 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %195, align 1, !tbaa !14
  %196 = getelementptr i8, i8* %next.gep76.6, i64 32
  %197 = bitcast i8* %196 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %197, align 1, !tbaa !14
  %198 = getelementptr i8, i8* %next.gep76.6, i64 64
  %199 = bitcast i8* %198 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %199, align 1, !tbaa !14
  %200 = getelementptr i8, i8* %next.gep76.6, i64 96
  %201 = bitcast i8* %200 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %201, align 1, !tbaa !14
  %index.next74.6 = or i64 %index73, 896
  %next.gep76.7 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index.next74.6
  %202 = bitcast i8* %next.gep76.7 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %202, align 1, !tbaa !14
  %203 = getelementptr i8, i8* %next.gep76.7, i64 32
  %204 = bitcast i8* %203 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %204, align 1, !tbaa !14
  %205 = getelementptr i8, i8* %next.gep76.7, i64 64
  %206 = bitcast i8* %205 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %206, align 1, !tbaa !14
  %207 = getelementptr i8, i8* %next.gep76.7, i64 96
  %208 = bitcast i8* %207 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %208, align 1, !tbaa !14
  %index.next74.7 = add i64 %index73, 1024
  %niter226.nsub.7 = add i64 %niter226, -8
  %niter226.ncmp.7 = icmp eq i64 %niter226.nsub.7, 0
  br i1 %niter226.ncmp.7, label %middle.block61.unr-lcssa, label %vector.body63, !llvm.loop !211

middle.block61.unr-lcssa:                         ; preds = %vector.body63, %vector.ph70
  %index73.unr = phi i64 [ 0, %vector.ph70 ], [ %index.next74.7, %vector.body63 ]
  %lcmp.mod224.not = icmp eq i64 %xtraiter222, 0
  br i1 %lcmp.mod224.not, label %middle.block61, label %vector.body63.epil

vector.body63.epil:                               ; preds = %middle.block61.unr-lcssa, %vector.body63.epil
  %index73.epil = phi i64 [ %index.next74.epil, %vector.body63.epil ], [ %index73.unr, %middle.block61.unr-lcssa ]
  %epil.iter223 = phi i64 [ %epil.iter223.sub, %vector.body63.epil ], [ %xtraiter222, %middle.block61.unr-lcssa ]
  %next.gep76.epil = getelementptr i8, i8* %dst.0.lcssa911, i64 %index73.epil
  %209 = bitcast i8* %next.gep76.epil to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %209, align 1, !tbaa !14
  %210 = getelementptr i8, i8* %next.gep76.epil, i64 32
  %211 = bitcast i8* %210 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %211, align 1, !tbaa !14
  %212 = getelementptr i8, i8* %next.gep76.epil, i64 64
  %213 = bitcast i8* %212 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %213, align 1, !tbaa !14
  %214 = getelementptr i8, i8* %next.gep76.epil, i64 96
  %215 = bitcast i8* %214 to <32 x i8>*
  store <32 x i8> zeroinitializer, <32 x i8>* %215, align 1, !tbaa !14
  %index.next74.epil = add i64 %index73.epil, 128
  %epil.iter223.sub = add i64 %epil.iter223, -1
  %epil.iter223.cmp.not = icmp eq i64 %epil.iter223.sub, 0
  br i1 %epil.iter223.cmp.not, label %middle.block61, label %vector.body63.epil, !llvm.loop !212

middle.block61:                                   ; preds = %vector.body63.epil, %middle.block61.unr-lcssa
  %cmp.n75 = icmp eq i64 %n.vec72, %exitcount.ptrcnt.to.int
  br i1 %cmp.n75, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %vec.epilog.iter.check

vec.epilog.iter.check:                            ; preds = %middle.block61
  %ind.end89 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec72
  %n.vec.remaining = and i64 %exitcount.ptrcnt.to.int, 124
  %min.epilog.iters.check = icmp eq i64 %n.vec.remaining, 0
  br i1 %min.epilog.iters.check, label %while.body194.preheader, label %vec.epilog.ph

vec.epilog.ph:                                    ; preds = %vector.main.loop.iter.check, %vec.epilog.iter.check
  %vec.epilog.resume.val = phi i64 [ %n.vec72, %vec.epilog.iter.check ], [ 0, %vector.main.loop.iter.check ]
  %216 = sub i64 0, %dst.0.lcssa91164
  %scevgep80 = getelementptr [256 x i8], [256 x i8]* %array_name, i64 1, i64 %216
  %exitcount.ptrcnt.to.int82 = ptrtoint i8* %scevgep80 to i64
  %n.vec84 = and i64 %exitcount.ptrcnt.to.int82, -4
  %ind.end88 = getelementptr i8, i8* %dst.0.lcssa911, i64 %n.vec84
  br label %vec.epilog.vector.body

vec.epilog.vector.body:                           ; preds = %vec.epilog.vector.body, %vec.epilog.ph
  %index85 = phi i64 [ %vec.epilog.resume.val, %vec.epilog.ph ], [ %index.next86, %vec.epilog.vector.body ]
  %next.gep91 = getelementptr i8, i8* %dst.0.lcssa911, i64 %index85
  %217 = bitcast i8* %next.gep91 to <4 x i8>*
  store <4 x i8> zeroinitializer, <4 x i8>* %217, align 1, !tbaa !14
  %index.next86 = add i64 %index85, 4
  %218 = icmp eq i64 %index.next86, %n.vec84
  br i1 %218, label %vec.epilog.middle.block, label %vec.epilog.vector.body, !llvm.loop !213

vec.epilog.middle.block:                          ; preds = %vec.epilog.vector.body
  %cmp.n90 = icmp eq i64 %n.vec84, %exitcount.ptrcnt.to.int82
  br i1 %cmp.n90, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194.preheader

while.body194.preheader:                          ; preds = %iter.check, %vec.epilog.iter.check, %vec.epilog.middle.block
  %dst.1867.ph = phi i8* [ %dst.0.lcssa911, %iter.check ], [ %ind.end89, %vec.epilog.iter.check ], [ %ind.end88, %vec.epilog.middle.block ]
  br label %while.body194

while.body187:                                    ; preds = %while.body187.prol.loopexit, %while.body187
  %dst.0870 = phi i8* [ %incdec.ptr189.7, %while.body187 ], [ %dst.0870.unr, %while.body187.prol.loopexit ]
  %start.1869.idx = phi i64 [ %start.1869.add.7, %while.body187 ], [ %start.1869.idx.unr, %while.body187.prol.loopexit ]
  %start.1869.ptr = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.idx
  %start.1869.add = add nuw nsw i64 %start.1869.idx, 1
  %219 = load i8, i8* %start.1869.ptr, align 1, !tbaa !14
  %incdec.ptr189 = getelementptr inbounds i8, i8* %dst.0870, i64 1
  store i8 %219, i8* %dst.0870, align 1, !tbaa !14
  %start.1869.ptr.1 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add
  %start.1869.add.1 = add nuw nsw i64 %start.1869.idx, 2
  %220 = load i8, i8* %start.1869.ptr.1, align 1, !tbaa !14
  %incdec.ptr189.1 = getelementptr inbounds i8, i8* %dst.0870, i64 2
  store i8 %220, i8* %incdec.ptr189, align 1, !tbaa !14
  %start.1869.ptr.2 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.1
  %start.1869.add.2 = add nuw nsw i64 %start.1869.idx, 3
  %221 = load i8, i8* %start.1869.ptr.2, align 1, !tbaa !14
  %incdec.ptr189.2 = getelementptr inbounds i8, i8* %dst.0870, i64 3
  store i8 %221, i8* %incdec.ptr189.1, align 1, !tbaa !14
  %start.1869.ptr.3 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.2
  %start.1869.add.3 = add nuw nsw i64 %start.1869.idx, 4
  %222 = load i8, i8* %start.1869.ptr.3, align 1, !tbaa !14
  %incdec.ptr189.3 = getelementptr inbounds i8, i8* %dst.0870, i64 4
  store i8 %222, i8* %incdec.ptr189.2, align 1, !tbaa !14
  %start.1869.ptr.4 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.3
  %start.1869.add.4 = add nuw nsw i64 %start.1869.idx, 5
  %223 = load i8, i8* %start.1869.ptr.4, align 1, !tbaa !14
  %incdec.ptr189.4 = getelementptr inbounds i8, i8* %dst.0870, i64 5
  store i8 %223, i8* %incdec.ptr189.3, align 1, !tbaa !14
  %start.1869.ptr.5 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.4
  %start.1869.add.5 = add nuw nsw i64 %start.1869.idx, 6
  %224 = load i8, i8* %start.1869.ptr.5, align 1, !tbaa !14
  %incdec.ptr189.5 = getelementptr inbounds i8, i8* %dst.0870, i64 6
  store i8 %224, i8* %incdec.ptr189.4, align 1, !tbaa !14
  %start.1869.ptr.6 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.5
  %start.1869.add.6 = add nuw nsw i64 %start.1869.idx, 7
  %225 = load i8, i8* %start.1869.ptr.6, align 1, !tbaa !14
  %incdec.ptr189.6 = getelementptr inbounds i8, i8* %dst.0870, i64 7
  store i8 %225, i8* %incdec.ptr189.5, align 1, !tbaa !14
  %start.1869.ptr.7 = getelementptr inbounds i8, i8* %end.1872, i64 %start.1869.add.6
  %start.1869.add.7 = add nuw nsw i64 %start.1869.idx, 8
  %226 = load i8, i8* %start.1869.ptr.7, align 1, !tbaa !14
  %incdec.ptr189.7 = getelementptr inbounds i8, i8* %dst.0870, i64 8
  store i8 %226, i8* %incdec.ptr189.6, align 1, !tbaa !14
  %cmp186.not.7 = icmp eq i64 %start.1869.add.7, -1
  br i1 %cmp186.not.7, label %while.cond191.preheader, label %while.body187, !llvm.loop !214

while.body194:                                    ; preds = %while.body194.preheader, %while.body194
  %dst.1867 = phi i8* [ %incdec.ptr195, %while.body194 ], [ %dst.1867.ph, %while.body194.preheader ]
  %incdec.ptr195 = getelementptr inbounds i8, i8* %dst.1867, i64 1
  store i8 0, i8* %dst.1867, align 1, !tbaa !14
  %exitcond882.not = icmp eq i8* %incdec.ptr195, %scevgep
  br i1 %exitcond882.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705, label %while.body194, !llvm.loop !215

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705: ; preds = %while.body194, %middle.block61, %vec.epilog.middle.block, %while.cond191.preheader
  %add197 = sub i32 6, %61
  %and = and i32 %add197, -8
  %227 = getelementptr inbounds [129 x i8], [129 x i8]* %header198, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(129) %227, i8* nonnull align 1 dereferenceable(129) getelementptr inbounds ([129 x i8], [129 x i8]* @__const.halide_debug_to_file.header, i64 0, i64 0), i64 129, i1 false)
  %call.i701 = call i64 @fwrite(i8* nonnull %227, i64 128, i64 1, i8* nonnull %call.i598) #16
  %228 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %228, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %229 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %228 to i64
  %min.iters.check95 = icmp ult i32 %228, 17
  br i1 %min.iters.check95, label %for.body.i.i.preheader, label %vector.ph96

vector.ph96:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf97 = and i64 %wide.trip.count.i.i, 15
  %230 = icmp eq i64 %n.mod.vf97, 0
  %231 = select i1 %230, i64 16, i64 %n.mod.vf97
  %n.vec98 = sub nsw i64 %wide.trip.count.i.i, %231
  br label %vector.body94

vector.body94:                                    ; preds = %vector.body94, %vector.ph96
  %index99 = phi i64 [ 0, %vector.ph96 ], [ %index.next100, %vector.body94 ]
  %vec.ind103 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph96 ], [ %vec.ind.next107, %vector.body94 ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi, %vector.body94 ]
  %vec.phi108 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi120, %vector.body94 ]
  %vec.phi109 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi121, %vector.body94 ]
  %vec.phi110 = phi <4 x i64> [ zeroinitializer, %vector.ph96 ], [ %predphi122, %vector.body94 ]
  %step.add = add <4 x i64> %vec.ind103, <i64 4, i64 4, i64 4, i64 4>
  %step.add104 = add <4 x i64> %vec.ind103, <i64 8, i64 8, i64 8, i64 8>
  %step.add105 = add <4 x i64> %vec.ind103, <i64 12, i64 12, i64 12, i64 12>
  %232 = or i64 %index99, 4
  %233 = or i64 %index99, 8
  %234 = or i64 %index99, 12
  %235 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index99, i32 2
  %236 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %232, i32 2
  %237 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %233, i32 2
  %238 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %234, i32 2
  %239 = bitcast i32* %235 to <16 x i32>*
  %240 = bitcast i32* %236 to <16 x i32>*
  %241 = bitcast i32* %237 to <16 x i32>*
  %242 = bitcast i32* %238 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %239, align 4, !tbaa !182
  %wide.vec111 = load <16 x i32>, <16 x i32>* %240, align 4, !tbaa !182
  %wide.vec112 = load <16 x i32>, <16 x i32>* %241, align 4, !tbaa !182
  %wide.vec113 = load <16 x i32>, <16 x i32>* %242, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec114 = shufflevector <16 x i32> %wide.vec111, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec115 = shufflevector <16 x i32> %wide.vec112, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec116 = shufflevector <16 x i32> %wide.vec113, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %243 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %244 = icmp sgt <4 x i32> %strided.vec114, zeroinitializer
  %245 = icmp sgt <4 x i32> %strided.vec115, zeroinitializer
  %246 = icmp sgt <4 x i32> %strided.vec116, zeroinitializer
  %247 = zext <4 x i32> %strided.vec to <4 x i64>
  %248 = zext <4 x i32> %strided.vec114 to <4 x i64>
  %249 = zext <4 x i32> %strided.vec115 to <4 x i64>
  %250 = zext <4 x i32> %strided.vec116 to <4 x i64>
  %251 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind103, i32 1
  %252 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add, i32 1
  %253 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add104, i32 1
  %254 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add105, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %251, i32 4, <4 x i1> %243, <4 x i32> undef), !tbaa !178
  %wide.masked.gather117 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %252, i32 4, <4 x i1> %244, <4 x i32> undef), !tbaa !178
  %wide.masked.gather118 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %253, i32 4, <4 x i1> %245, <4 x i32> undef), !tbaa !178
  %wide.masked.gather119 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %254, i32 4, <4 x i1> %246, <4 x i32> undef), !tbaa !178
  %255 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %256 = add nsw <4 x i32> %wide.masked.gather117, <i32 -1, i32 -1, i32 -1, i32 -1>
  %257 = add nsw <4 x i32> %wide.masked.gather118, <i32 -1, i32 -1, i32 -1, i32 -1>
  %258 = add nsw <4 x i32> %wide.masked.gather119, <i32 -1, i32 -1, i32 -1, i32 -1>
  %259 = sext <4 x i32> %255 to <4 x i64>
  %260 = sext <4 x i32> %256 to <4 x i64>
  %261 = sext <4 x i32> %257 to <4 x i64>
  %262 = sext <4 x i32> %258 to <4 x i64>
  %263 = mul nsw <4 x i64> %259, %247
  %264 = mul nsw <4 x i64> %260, %248
  %265 = mul nsw <4 x i64> %261, %249
  %266 = mul nsw <4 x i64> %262, %250
  %267 = select <4 x i1> %243, <4 x i64> %263, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %267
  %268 = select <4 x i1> %244, <4 x i64> %264, <4 x i64> zeroinitializer
  %predphi120 = add <4 x i64> %vec.phi108, %268
  %269 = select <4 x i1> %245, <4 x i64> %265, <4 x i64> zeroinitializer
  %predphi121 = add <4 x i64> %vec.phi109, %269
  %270 = select <4 x i1> %246, <4 x i64> %266, <4 x i64> zeroinitializer
  %predphi122 = add <4 x i64> %vec.phi110, %270
  %index.next100 = add i64 %index99, 16
  %vec.ind.next107 = add <4 x i64> %vec.ind103, <i64 16, i64 16, i64 16, i64 16>
  %271 = icmp eq i64 %index.next100, %n.vec98
  br i1 %271, label %middle.block92, label %vector.body94, !llvm.loop !216

middle.block92:                                   ; preds = %vector.body94
  %bin.rdx = add <4 x i64> %predphi120, %predphi
  %bin.rdx123 = add <4 x i64> %predphi121, %bin.rdx
  %bin.rdx124 = add <4 x i64> %predphi122, %bin.rdx123
  %272 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx124)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block92, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec98, %middle.block92 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %272, %middle.block92 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 2
  %273 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %273, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %273 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i.i, i32 1
  %274 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %274, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i693 = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i693, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !217

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check128 = icmp ult i32 %228, 17
  br i1 %min.iters.check128, label %for.body.i13.i.preheader211, label %vector.ph129

vector.ph129:                                     ; preds = %for.body.i13.i.preheader
  %n.mod.vf130 = and i64 %wide.trip.count.i.i, 15
  %275 = icmp eq i64 %n.mod.vf130, 0
  %276 = select i1 %275, i64 16, i64 %n.mod.vf130
  %n.vec131 = sub nsw i64 %wide.trip.count.i.i, %276
  br label %vector.body127

vector.body127:                                   ; preds = %vector.body127, %vector.ph129
  %index132 = phi i64 [ 0, %vector.ph129 ], [ %index.next133, %vector.body127 ]
  %vec.ind136 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph129 ], [ %vec.ind.next141, %vector.body127 ]
  %vec.phi142 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi158, %vector.body127 ]
  %vec.phi143 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi159, %vector.body127 ]
  %vec.phi144 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi160, %vector.body127 ]
  %vec.phi145 = phi <4 x i64> [ zeroinitializer, %vector.ph129 ], [ %predphi161, %vector.body127 ]
  %step.add137 = add <4 x i64> %vec.ind136, <i64 4, i64 4, i64 4, i64 4>
  %step.add138 = add <4 x i64> %vec.ind136, <i64 8, i64 8, i64 8, i64 8>
  %step.add139 = add <4 x i64> %vec.ind136, <i64 12, i64 12, i64 12, i64 12>
  %277 = or i64 %index132, 4
  %278 = or i64 %index132, 8
  %279 = or i64 %index132, 12
  %280 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %index132, i32 2
  %281 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %277, i32 2
  %282 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %278, i32 2
  %283 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %279, i32 2
  %284 = bitcast i32* %280 to <16 x i32>*
  %285 = bitcast i32* %281 to <16 x i32>*
  %286 = bitcast i32* %282 to <16 x i32>*
  %287 = bitcast i32* %283 to <16 x i32>*
  %wide.vec146 = load <16 x i32>, <16 x i32>* %284, align 4, !tbaa !182
  %wide.vec147 = load <16 x i32>, <16 x i32>* %285, align 4, !tbaa !182
  %wide.vec148 = load <16 x i32>, <16 x i32>* %286, align 4, !tbaa !182
  %wide.vec149 = load <16 x i32>, <16 x i32>* %287, align 4, !tbaa !182
  %strided.vec150 = shufflevector <16 x i32> %wide.vec146, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec151 = shufflevector <16 x i32> %wide.vec147, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec152 = shufflevector <16 x i32> %wide.vec148, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec153 = shufflevector <16 x i32> %wide.vec149, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %288 = icmp slt <4 x i32> %strided.vec150, zeroinitializer
  %289 = icmp slt <4 x i32> %strided.vec151, zeroinitializer
  %290 = icmp slt <4 x i32> %strided.vec152, zeroinitializer
  %291 = icmp slt <4 x i32> %strided.vec153, zeroinitializer
  %292 = sext <4 x i32> %strided.vec150 to <4 x i64>
  %293 = sext <4 x i32> %strided.vec151 to <4 x i64>
  %294 = sext <4 x i32> %strided.vec152 to <4 x i64>
  %295 = sext <4 x i32> %strided.vec153 to <4 x i64>
  %296 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %vec.ind136, i32 1
  %297 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add137, i32 1
  %298 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add138, i32 1
  %299 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, <4 x i64> %step.add139, i32 1
  %wide.masked.gather154 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %296, i32 4, <4 x i1> %288, <4 x i32> undef), !tbaa !178
  %wide.masked.gather155 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %297, i32 4, <4 x i1> %289, <4 x i32> undef), !tbaa !178
  %wide.masked.gather156 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %298, i32 4, <4 x i1> %290, <4 x i32> undef), !tbaa !178
  %wide.masked.gather157 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %299, i32 4, <4 x i1> %291, <4 x i32> undef), !tbaa !178
  %300 = add nsw <4 x i32> %wide.masked.gather154, <i32 -1, i32 -1, i32 -1, i32 -1>
  %301 = add nsw <4 x i32> %wide.masked.gather155, <i32 -1, i32 -1, i32 -1, i32 -1>
  %302 = add nsw <4 x i32> %wide.masked.gather156, <i32 -1, i32 -1, i32 -1, i32 -1>
  %303 = add nsw <4 x i32> %wide.masked.gather157, <i32 -1, i32 -1, i32 -1, i32 -1>
  %304 = sext <4 x i32> %300 to <4 x i64>
  %305 = sext <4 x i32> %301 to <4 x i64>
  %306 = sext <4 x i32> %302 to <4 x i64>
  %307 = sext <4 x i32> %303 to <4 x i64>
  %308 = mul nsw <4 x i64> %304, %292
  %309 = mul nsw <4 x i64> %305, %293
  %310 = mul nsw <4 x i64> %306, %294
  %311 = mul nsw <4 x i64> %307, %295
  %312 = select <4 x i1> %288, <4 x i64> %308, <4 x i64> zeroinitializer
  %predphi158 = add <4 x i64> %vec.phi142, %312
  %313 = select <4 x i1> %289, <4 x i64> %309, <4 x i64> zeroinitializer
  %predphi159 = add <4 x i64> %vec.phi143, %313
  %314 = select <4 x i1> %290, <4 x i64> %310, <4 x i64> zeroinitializer
  %predphi160 = add <4 x i64> %vec.phi144, %314
  %315 = select <4 x i1> %291, <4 x i64> %311, <4 x i64> zeroinitializer
  %predphi161 = add <4 x i64> %vec.phi145, %315
  %index.next133 = add i64 %index132, 16
  %vec.ind.next141 = add <4 x i64> %vec.ind136, <i64 16, i64 16, i64 16, i64 16>
  %316 = icmp eq i64 %index.next133, %n.vec131
  br i1 %316, label %middle.block125, label %vector.body127, !llvm.loop !218

middle.block125:                                  ; preds = %vector.body127
  %bin.rdx162 = add <4 x i64> %predphi159, %predphi158
  %bin.rdx163 = add <4 x i64> %predphi160, %bin.rdx162
  %bin.rdx164 = add <4 x i64> %predphi161, %bin.rdx163
  %317 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx164)
  br label %for.body.i13.i.preheader211

for.body.i13.i.preheader211:                      ; preds = %middle.block125, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec131, %middle.block125 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %317, %middle.block125 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader211, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader211 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader211 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 2
  %318 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %318, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %318 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %229, i64 %indvars.iv.i10.i, i32 1
  %319 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %319, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !219

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705
  %add8.i27.i = phi i64 [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit705 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i694 = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %320 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i696 = zext i8 %320 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i696, 7
  %div.i.i697 = lshr i64 %add.i4.i, 3
  %mul.i698 = mul i64 %div.i.i697, %sub.i694
  %321 = trunc i64 %mul.i698 to i32
  %322 = add i32 %321, 7
  %323 = and i32 %322, 7
  %conv204 = xor i32 %323, 7
  %conv205 = zext i32 %conv204 to i64
  %add206 = add i64 %mul.i698, %conv205
  %tobool207.not = icmp ult i64 %add206, 4294967296
  br i1 %tobool207.not, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687, label %cleanup278.thread

cleanup278.thread:                                ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6.40, i64 0, i64 0)) #16
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  br label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687: ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %324 = icmp sgt i32 %228, 2
  %spec.store.select = select i1 %324, i32 %228, i32 2
  %325 = bitcast [8 x i32]* %tags to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %325) #11
  %arrayinit.begin = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 0
  store i32 14, i32* %arrayinit.begin, align 4, !tbaa !73
  %arrayinit.element = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 1
  %add214 = shl i32 %spec.store.select, 2
  %and215 = add i32 %add214, 4
  %mul216 = and i32 %and215, -8
  %add217 = add i32 %and, 40
  %add218 = add i32 %add217, %mul216
  %add220 = add i32 %add218, %321
  %add221 = add i32 %add220, %conv204
  store i32 %add221, i32* %arrayinit.element, align 4, !tbaa !73
  %arrayinit.element222 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 2
  store i32 6, i32* %arrayinit.element222, align 4, !tbaa !73
  %arrayinit.element223 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 3
  store i32 8, i32* %arrayinit.element223, align 4, !tbaa !73
  %arrayinit.element224 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 4
  %idxprom225 = sext i32 %type_code to i64
  %arrayidx226 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal31pixel_type_to_matlab_class_codeE, i64 0, i64 %idxprom225
  %326 = load i8, i8* %arrayidx226, align 1, !tbaa !14
  %conv227 = zext i8 %326 to i32
  store i32 %conv227, i32* %arrayinit.element224, align 4, !tbaa !73
  %arrayinit.element228 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 5
  store i32 1, i32* %arrayinit.element228, align 4, !tbaa !73
  %arrayinit.element229 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 6
  store i32 5, i32* %arrayinit.element229, align 4, !tbaa !73
  %arrayinit.element230 = getelementptr inbounds [8 x i32], [8 x i32]* %tags, i64 0, i64 7
  store i32 %add214, i32* %arrayinit.element230, align 4, !tbaa !73
  %call.i683 = call i64 @fwrite(i8* nonnull %325, i64 32, i64 1, i8* nonnull %call.i598) #16
  %cmp.i684.not = icmp eq i64 %call.i683, 0
  br i1 %cmp.i684.not, label %cleanup278, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %327 = bitcast [4 x i32]* %extents to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %327) #11
  %arrayinit.begin235 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 0
  %328 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %328, i32* %arrayinit.begin235, align 4, !tbaa !73
  %arrayinit.element238 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 1
  %329 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %329, i32* %arrayinit.element238, align 4, !tbaa !73
  %arrayinit.element241 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 2
  %330 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %330, i32* %arrayinit.element241, align 4, !tbaa !73
  %arrayinit.element244 = getelementptr inbounds [4 x i32], [4 x i32]* %extents, i64 0, i64 3
  %331 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %331, i32* %arrayinit.element244, align 4, !tbaa !73
  %conv248 = sext i32 %mul216 to i64
  %call.i672 = call i64 @fwrite(i8* nonnull %327, i64 %conv248, i64 1, i8* nonnull %call.i598) #16
  %cmp.i673.not = icmp eq i64 %call.i672, 0
  br i1 %cmp.i673.not, label %cleanup274, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %332 = bitcast [2 x i32]* %name_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %332) #11
  %arrayinit.begin252 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 0
  store i32 1, i32* %arrayinit.begin252, align 4, !tbaa !73
  %arrayinit.element253 = getelementptr inbounds [2 x i32], [2 x i32]* %name_header, i64 0, i64 1
  store i32 %conv184, i32* %arrayinit.element253, align 4, !tbaa !73
  %call.i660 = call i64 @fwrite(i8* nonnull %332, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i661.not = icmp eq i64 %call.i660, 0
  br i1 %cmp.i661.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %conv258 = zext i32 %and to i64
  %call.i648 = call i64 @fwrite(i8* nonnull %62, i64 %conv258, i64 1, i8* nonnull %call.i598) #16
  %cmp.i649.not = icmp eq i64 %call.i648, 0
  br i1 %cmp.i649.not, label %cleanup273, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642: ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652
  %333 = bitcast [2 x i32]* %payload_header to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %333) #11
  %arrayinit.begin262 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 0
  %arrayidx264 = getelementptr inbounds [10 x i8], [10 x i8]* @_ZN6Halide7Runtime8Internal30pixel_type_to_matlab_type_codeE, i64 0, i64 %idxprom225
  %334 = load i8, i8* %arrayidx264, align 1, !tbaa !14
  %conv265 = zext i8 %334 to i32
  store i32 %conv265, i32* %arrayinit.begin262, align 4, !tbaa !73
  %arrayinit.element266 = getelementptr inbounds [2 x i32], [2 x i32]* %payload_header, i64 0, i64 1
  store i32 %321, i32* %arrayinit.element266, align 4, !tbaa !73
  %call.i638 = call i64 @fwrite(i8* nonnull %333, i64 8, i64 1, i8* nonnull %call.i598) #16
  %cmp.i639.not = icmp eq i64 %call.i638, 0
  %cleanup.dest.slot.5 = zext i1 %cmp.i639.not to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %333) #11
  br label %cleanup273

cleanup273:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664
  %cleanup.dest.slot.6 = phi i32 [ %cleanup.dest.slot.5, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  %retval.6 = phi i32 [ -11, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit642 ], [ -9, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit664 ], [ -10, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit652 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %332) #11
  br label %cleanup274

cleanup274:                                       ; preds = %cleanup273, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676
  %cleanup.dest.slot.7 = phi i32 [ %cleanup.dest.slot.6, %cleanup273 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  %retval.7 = phi i32 [ %retval.6, %cleanup273 ], [ -8, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit676 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %327) #11
  br label %cleanup278

cleanup278:                                       ; preds = %cleanup274, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687
  %cleanup.dest.slot.8 = phi i32 [ %cleanup.dest.slot.7, %cleanup274 ], [ 1, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  %retval.8 = phi i32 [ %retval.7, %cleanup274 ], [ -7, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit687 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %325) #11
  call void @llvm.lifetime.end.p0i8(i64 129, i8* nonnull %227) #11
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %62) #11
  %cond442 = icmp eq i32 %cleanup.dest.slot.8, 0
  br i1 %cond442, label %if.end311, label %cleanup433

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631: ; preds = %if.else164
  %335 = bitcast [5 x i32]* %header289 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %335) #11
  %arrayinit.begin290 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 0
  %336 = load i32, i32* %extent.i, align 4, !tbaa !178
  store i32 %336, i32* %arrayinit.begin290, align 4, !tbaa !73
  %arrayinit.element293 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 1
  %337 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  store i32 %337, i32* %arrayinit.element293, align 4, !tbaa !73
  %arrayinit.element296 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 2
  %338 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  store i32 %338, i32* %arrayinit.element296, align 4, !tbaa !73
  %arrayinit.element299 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 3
  %339 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  store i32 %339, i32* %arrayinit.element299, align 4, !tbaa !73
  %arrayinit.element302 = getelementptr inbounds [5 x i32], [5 x i32]* %header289, i64 0, i64 4
  store i32 %type_code, i32* %arrayinit.element302, align 4, !tbaa !73
  %call.i627 = call i64 @fwrite(i8* nonnull %335, i64 20, i64 1, i8* nonnull %call.i598) #16
  %cmp.i628.not = icmp eq i64 %call.i627, 0
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %335) #11
  br i1 %cmp.i628.not, label %cleanup433, label %if.end311

if.end311:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup154.thread
  %final_padding_bytes.0 = phi i32 [ %conv204, %cleanup278 ], [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ 0, %cleanup154.thread ]
  %340 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %340) #11
  %div = udiv i32 4096, %div.i
  %341 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %cmp320856 = icmp sgt i32 %341, 0
  br i1 %cmp320856, label %for.body322.lr.ph, label %if.end412

for.body322.lr.ph:                                ; preds = %if.end311
  %342 = load i32, i32* %min.i.3, align 4, !tbaa !181
  %343 = bitcast [4 x i32]* %idx to i8*
  %arrayinit.begin357 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 0
  %arrayinit.element358 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 1
  %arrayinit.element359 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 2
  %arrayinit.element360 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 3
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %conv368 = zext i32 %div.i to i64
  %mul373 = mul nuw nsw i32 %div, %div.i
  %conv374 = zext i32 %mul373 to i64
  %.pre891 = load i32, i32* %min.i.2, align 4, !tbaa !181
  %.pre892 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  br label %for.body322

for.body322:                                      ; preds = %for.inc399, %for.body322.lr.ph
  %344 = phi i32 [ %342, %for.body322.lr.ph ], [ %430, %for.inc399 ]
  %345 = phi i32 [ %341, %for.body322.lr.ph ], [ %431, %for.inc399 ]
  %346 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %432, %for.inc399 ]
  %347 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %433, %for.inc399 ]
  %348 = phi i32 [ %.pre892, %for.body322.lr.ph ], [ %434, %for.inc399 ]
  %349 = phi i32 [ %.pre891, %for.body322.lr.ph ], [ %435, %for.inc399 ]
  %dim3.0858 = phi i32 [ %342, %for.body322.lr.ph ], [ %inc400, %for.inc399 ]
  %counter.0857 = phi i32 [ 0, %for.body322.lr.ph ], [ %counter.1.lcssa, %for.inc399 ]
  %cmp331848 = icmp sgt i32 %348, 0
  br i1 %cmp331848, label %for.body333.preheader, label %for.inc399

for.body333.preheader:                            ; preds = %for.body322
  %.pre893 = load i32, i32* %min.i.1, align 4, !tbaa !181
  %.pre894 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  br label %for.body333

for.body333:                                      ; preds = %for.inc394, %for.body333.preheader
  %350 = phi i32 [ %424, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %351 = phi i32 [ %425, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %352 = phi i32 [ %426, %for.inc394 ], [ %346, %for.body333.preheader ]
  %353 = phi i32 [ %427, %for.inc394 ], [ %347, %for.body333.preheader ]
  %354 = phi i32 [ %428, %for.inc394 ], [ %.pre894, %for.body333.preheader ]
  %355 = phi i32 [ %429, %for.inc394 ], [ %.pre893, %for.body333.preheader ]
  %dim2.0850 = phi i32 [ %inc395, %for.inc394 ], [ %349, %for.body333.preheader ]
  %counter.1849 = phi i32 [ %counter.2.lcssa, %for.inc394 ], [ %counter.0857, %for.body333.preheader ]
  %cmp342839 = icmp sgt i32 %354, 0
  br i1 %cmp342839, label %for.body344.preheader, label %for.inc394

for.body344.preheader:                            ; preds = %for.body333
  %.pre = load i32, i32* %extent.i, align 4, !tbaa !178
  br label %for.body344

for.body344:                                      ; preds = %for.body344.preheader, %for.inc389
  %356 = phi i32 [ %421, %for.inc389 ], [ %350, %for.body344.preheader ]
  %357 = phi i32 [ %422, %for.inc389 ], [ %351, %for.body344.preheader ]
  %358 = phi i32 [ %423, %for.inc389 ], [ %.pre, %for.body344.preheader ]
  %dim1.0841 = phi i32 [ %inc390, %for.inc389 ], [ %355, %for.body344.preheader ]
  %counter.2840 = phi i32 [ %counter.6797, %for.inc389 ], [ %counter.1849, %for.body344.preheader ]
  %cmp353834 = icmp sgt i32 %358, 0
  br i1 %cmp353834, label %for.body355.preheader, label %for.inc389

for.body355.preheader:                            ; preds = %for.body344
  %359 = load i32, i32* %min.i, align 4, !tbaa !181
  br label %for.body355

for.body355:                                      ; preds = %for.inc384, %for.body355.preheader
  %dim0.0836 = phi i32 [ %inc385, %for.inc384 ], [ %359, %for.body355.preheader ]
  %counter.3835 = phi i32 [ %counter.4, %for.inc384 ], [ %counter.2840, %for.body355.preheader ]
  %inc356 = add nsw i32 %counter.3835, 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %343) #11
  store i32 %dim0.0836, i32* %arrayinit.begin357, align 4, !tbaa !73
  store i32 %dim1.0841, i32* %arrayinit.element358, align 4, !tbaa !73
  store i32 %dim2.0850, i32* %arrayinit.element359, align 4, !tbaa !73
  store i32 %dim3.0858, i32* %arrayinit.element360, align 4, !tbaa !73
  %360 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17.i = icmp sgt i32 %360, 0
  br i1 %cmp17.i, label %for.body.lr.ph.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit

for.body.lr.ph.i:                                 ; preds = %for.body355
  %361 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %wide.trip.count.i = zext i32 %360 to i64
  %stride.i621920 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 2
  %362 = load i32, i32* %stride.i621920, align 4, !tbaa !182
  %conv.i622921 = sext i32 %362 to i64
  %min.i623922 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 0, i32 0
  %363 = load i32, i32* %min.i623922, align 4, !tbaa !181
  %sub.i923 = sub nsw i32 %dim0.0836, %363
  %conv7.i924 = sext i32 %sub.i923 to i64
  %mul.i925 = mul nsw i64 %conv7.i924, %conv.i622921
  %exitcond.not.i927 = icmp eq i32 %360, 1
  br i1 %exitcond.not.i927, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.preheader, !llvm.loop !220

for.body.i.for.body.i_crit_edge.preheader:        ; preds = %for.body.lr.ph.i
  %stride.i62126 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 2
  %364 = load i32, i32* %stride.i62126, align 4, !tbaa !182
  %conv.i62227 = sext i32 %364 to i64
  %min.i62328 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 1, i32 0
  %365 = load i32, i32* %min.i62328, align 4, !tbaa !181
  %sub.i29 = sub nsw i32 %dim1.0841, %365
  %conv7.i30 = sext i32 %sub.i29 to i64
  %mul.i31 = mul nsw i64 %conv7.i30, %conv.i62227
  %add.i62432 = add nsw i64 %mul.i31, %mul.i925
  %exitcond.not.i33 = icmp eq i32 %360, 2
  br i1 %exitcond.not.i33, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph, !llvm.loop !220

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph: ; preds = %for.body.i.for.body.i_crit_edge.preheader
  %366 = add nsw i64 %wide.trip.count.i, -2
  %min.iters.check169 = icmp ult i64 %366, 17
  br i1 %min.iters.check169, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, label %vector.ph170

vector.ph170:                                     ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %n.mod.vf171 = and i64 %366, 15
  %367 = icmp eq i64 %n.mod.vf171, 0
  %368 = select i1 %367, i64 16, i64 %n.mod.vf171
  %n.vec172 = sub nsw i64 %366, %368
  %ind.end176 = add nsw i64 %n.vec172, 2
  %369 = insertelement <4 x i64> <i64 poison, i64 0, i64 0, i64 0>, i64 %add.i62432, i32 0
  br label %vector.body168

vector.body168:                                   ; preds = %vector.body168, %vector.ph170
  %index173 = phi i64 [ 0, %vector.ph170 ], [ %index.next174, %vector.body168 ]
  %vec.phi179 = phi <4 x i64> [ %369, %vector.ph170 ], [ %409, %vector.body168 ]
  %vec.phi180 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %410, %vector.body168 ]
  %vec.phi181 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %411, %vector.body168 ]
  %vec.phi182 = phi <4 x i64> [ zeroinitializer, %vector.ph170 ], [ %412, %vector.body168 ]
  %offset.idx178 = or i64 %index173, 2
  %370 = or i64 %index173, 6
  %371 = or i64 %index173, 10
  %372 = or i64 %index173, 14
  %373 = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %offset.idx178
  %374 = bitcast i32* %373 to <4 x i32>*
  %wide.load183 = load <4 x i32>, <4 x i32>* %374, align 4, !tbaa !73
  %375 = getelementptr inbounds i32, i32* %373, i64 4
  %376 = bitcast i32* %375 to <4 x i32>*
  %wide.load184 = load <4 x i32>, <4 x i32>* %376, align 4, !tbaa !73
  %377 = getelementptr inbounds i32, i32* %373, i64 8
  %378 = bitcast i32* %377 to <4 x i32>*
  %wide.load185 = load <4 x i32>, <4 x i32>* %378, align 4, !tbaa !73
  %379 = getelementptr inbounds i32, i32* %373, i64 12
  %380 = bitcast i32* %379 to <4 x i32>*
  %wide.load186 = load <4 x i32>, <4 x i32>* %380, align 4, !tbaa !73
  %381 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %offset.idx178, i32 2
  %382 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %370, i32 2
  %383 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %371, i32 2
  %384 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %372, i32 2
  %385 = getelementptr inbounds i32, i32* %381, i64 -2
  %386 = bitcast i32* %385 to <16 x i32>*
  %387 = getelementptr inbounds i32, i32* %382, i64 -2
  %388 = bitcast i32* %387 to <16 x i32>*
  %389 = getelementptr inbounds i32, i32* %383, i64 -2
  %390 = bitcast i32* %389 to <16 x i32>*
  %391 = getelementptr inbounds i32, i32* %384, i64 -2
  %392 = bitcast i32* %391 to <16 x i32>*
  %wide.vec187 = load <16 x i32>, <16 x i32>* %386, align 4, !tbaa !73
  %wide.vec188 = load <16 x i32>, <16 x i32>* %388, align 4, !tbaa !73
  %wide.vec189 = load <16 x i32>, <16 x i32>* %390, align 4, !tbaa !73
  %wide.vec190 = load <16 x i32>, <16 x i32>* %392, align 4, !tbaa !73
  %strided.vec191 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec192 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec193 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec194 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec195 = shufflevector <16 x i32> %wide.vec187, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec196 = shufflevector <16 x i32> %wide.vec188, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec197 = shufflevector <16 x i32> %wide.vec189, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec198 = shufflevector <16 x i32> %wide.vec190, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %393 = sext <4 x i32> %strided.vec195 to <4 x i64>
  %394 = sext <4 x i32> %strided.vec196 to <4 x i64>
  %395 = sext <4 x i32> %strided.vec197 to <4 x i64>
  %396 = sext <4 x i32> %strided.vec198 to <4 x i64>
  %397 = sub nsw <4 x i32> %wide.load183, %strided.vec191
  %398 = sub nsw <4 x i32> %wide.load184, %strided.vec192
  %399 = sub nsw <4 x i32> %wide.load185, %strided.vec193
  %400 = sub nsw <4 x i32> %wide.load186, %strided.vec194
  %401 = sext <4 x i32> %397 to <4 x i64>
  %402 = sext <4 x i32> %398 to <4 x i64>
  %403 = sext <4 x i32> %399 to <4 x i64>
  %404 = sext <4 x i32> %400 to <4 x i64>
  %405 = mul nsw <4 x i64> %401, %393
  %406 = mul nsw <4 x i64> %402, %394
  %407 = mul nsw <4 x i64> %403, %395
  %408 = mul nsw <4 x i64> %404, %396
  %409 = add <4 x i64> %405, %vec.phi179
  %410 = add <4 x i64> %406, %vec.phi180
  %411 = add <4 x i64> %407, %vec.phi181
  %412 = add <4 x i64> %408, %vec.phi182
  %index.next174 = add i64 %index173, 16
  %413 = icmp eq i64 %index.next174, %n.vec172
  br i1 %413, label %middle.block166, label %vector.body168, !llvm.loop !221

middle.block166:                                  ; preds = %vector.body168
  %bin.rdx199 = add <4 x i64> %410, %409
  %bin.rdx200 = add <4 x i64> %411, %bin.rdx199
  %bin.rdx201 = add <4 x i64> %412, %bin.rdx200
  %414 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx201)
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader: ; preds = %middle.block166, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph
  %indvars.iv.next.i35.ph = phi i64 [ 2, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %ind.end176, %middle.block166 ]
  %add.i62434.ph = phi i64 [ %add.i62432, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.lr.ph ], [ %414, %middle.block166 ]
  br label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge

for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge: ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge
  %indvars.iv.next.i35 = phi i64 [ %indvars.iv.next.i, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %indvars.iv.next.i35.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %add.i62434 = phi i64 [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ], [ %add.i62434.ph, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge.preheader ]
  %arrayidx3.i.phi.trans.insert.phi.trans.insert = getelementptr inbounds [4 x i32], [4 x i32]* %idx, i64 0, i64 %indvars.iv.next.i35
  %.pre895.pre = load i32, i32* %arrayidx3.i.phi.trans.insert.phi.trans.insert, align 4, !tbaa !73
  %stride.i621 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 2
  %415 = load i32, i32* %stride.i621, align 4, !tbaa !182
  %conv.i622 = sext i32 %415 to i64
  %min.i623 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %361, i64 %indvars.iv.next.i35, i32 0
  %416 = load i32, i32* %min.i623, align 4, !tbaa !181
  %sub.i = sub nsw i32 %.pre895.pre, %416
  %conv7.i = sext i32 %sub.i to i64
  %mul.i = mul nsw i64 %conv7.i, %conv.i622
  %add.i624 = add nsw i64 %mul.i, %add.i62434
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.next.i35, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %_ZNK15halide_buffer_t10address_ofEPKi.exit, label %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, !llvm.loop !222

_ZNK15halide_buffer_t10address_ofEPKi.exit:       ; preds = %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge, %for.body.i.for.body.i_crit_edge.preheader, %for.body.lr.ph.i, %for.body355
  %index.0.lcssa.i = phi i64 [ 0, %for.body355 ], [ %mul.i925, %for.body.lr.ph.i ], [ %add.i62432, %for.body.i.for.body.i_crit_edge.preheader ], [ %add.i624, %for.body.i.for.body.i_crit_edge.for.body.i.for.body.i_crit_edge_crit_edge ]
  %417 = load i8*, i8** %host.i, align 8, !tbaa !172
  %418 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %418 to i64
  %add.i.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i.i, 3
  %mul9.i = mul nsw i64 %div.i.i, %index.0.lcssa.i
  %add.ptr.i = getelementptr inbounds i8, i8* %417, i64 %mul9.i
  %mul366 = mul nsw i32 %counter.3835, %div.i
  %idx.ext = sext i32 %mul366 to i64
  %add.ptr367 = getelementptr inbounds [4096 x i8], [4096 x i8]* %temp, i64 0, i64 %idx.ext
  %call369 = call i8* @memcpy(i8* nonnull %add.ptr367, i8* %add.ptr.i, i64 %conv368) #16
  %cmp370 = icmp eq i32 %inc356, %div
  br i1 %cmp370, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, label %for.inc384

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619: ; preds = %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %call.i615 = call i64 @fwrite(i8* nonnull %340, i64 %conv374, i64 1, i8* nonnull %call.i598) #16
  %cmp.i616.not = icmp eq i64 %call.i615, 0
  br i1 %cmp.i616.not, label %cleanup425.loopexit, label %for.inc384

for.inc384:                                       ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619, %_ZNK15halide_buffer_t10address_ofEPKi.exit
  %counter.4 = phi i32 [ 0, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619 ], [ %inc356, %_ZNK15halide_buffer_t10address_ofEPKi.exit ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  %inc385 = add nsw i32 %dim0.0836, 1
  %419 = load i32, i32* %extent.i, align 4, !tbaa !178
  %420 = load i32, i32* %min.i, align 4, !tbaa !181
  %add352 = add nsw i32 %420, %419
  %cmp353 = icmp slt i32 %inc385, %add352
  br i1 %cmp353, label %for.body355, label %for.inc389.loopexit, !llvm.loop !223

for.inc389.loopexit:                              ; preds = %for.inc384
  %.pre15 = load i32, i32* %extent.i.1, align 4, !tbaa !178
  %.pre16 = load i32, i32* %min.i.1, align 4, !tbaa !181
  br label %for.inc389

for.inc389:                                       ; preds = %for.inc389.loopexit, %for.body344
  %421 = phi i32 [ %356, %for.body344 ], [ %.pre16, %for.inc389.loopexit ]
  %422 = phi i32 [ %357, %for.body344 ], [ %.pre15, %for.inc389.loopexit ]
  %423 = phi i32 [ %358, %for.body344 ], [ %419, %for.inc389.loopexit ]
  %counter.6797 = phi i32 [ %counter.2840, %for.body344 ], [ %counter.4, %for.inc389.loopexit ]
  %inc390 = add nsw i32 %dim1.0841, 1
  %add341 = add nsw i32 %421, %422
  %cmp342 = icmp slt i32 %inc390, %add341
  br i1 %cmp342, label %for.body344, label %for.inc394.loopexit, !llvm.loop !224

for.inc394.loopexit:                              ; preds = %for.inc389
  %.pre896 = load i32, i32* %extent.i.2, align 4, !tbaa !178
  %.pre897 = load i32, i32* %min.i.2, align 4, !tbaa !181
  br label %for.inc394

for.inc394:                                       ; preds = %for.inc394.loopexit, %for.body333
  %424 = phi i32 [ %350, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %425 = phi i32 [ %351, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %426 = phi i32 [ %352, %for.body333 ], [ %.pre897, %for.inc394.loopexit ]
  %427 = phi i32 [ %353, %for.body333 ], [ %.pre896, %for.inc394.loopexit ]
  %428 = phi i32 [ %354, %for.body333 ], [ %422, %for.inc394.loopexit ]
  %429 = phi i32 [ %355, %for.body333 ], [ %421, %for.inc394.loopexit ]
  %counter.2.lcssa = phi i32 [ %counter.1849, %for.body333 ], [ %counter.6797, %for.inc394.loopexit ]
  %inc395 = add nsw i32 %dim2.0850, 1
  %add330 = add nsw i32 %427, %426
  %cmp331 = icmp slt i32 %inc395, %add330
  br i1 %cmp331, label %for.body333, label %for.inc399.loopexit, !llvm.loop !225

for.inc399.loopexit:                              ; preds = %for.inc394
  %.pre898 = load i32, i32* %extent.i.3, align 4, !tbaa !178
  %.pre899 = load i32, i32* %min.i.3, align 4, !tbaa !181
  br label %for.inc399

for.inc399:                                       ; preds = %for.inc399.loopexit, %for.body322
  %430 = phi i32 [ %344, %for.body322 ], [ %.pre899, %for.inc399.loopexit ]
  %431 = phi i32 [ %345, %for.body322 ], [ %.pre898, %for.inc399.loopexit ]
  %432 = phi i32 [ %346, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %433 = phi i32 [ %347, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %434 = phi i32 [ %348, %for.body322 ], [ %427, %for.inc399.loopexit ]
  %435 = phi i32 [ %349, %for.body322 ], [ %426, %for.inc399.loopexit ]
  %counter.1.lcssa = phi i32 [ %counter.0857, %for.body322 ], [ %counter.2.lcssa, %for.inc399.loopexit ]
  %inc400 = add nsw i32 %dim3.0858, 1
  %add319 = add nsw i32 %431, %430
  %cmp320 = icmp slt i32 %inc400, %add319
  br i1 %cmp320, label %for.body322, label %for.end403, !llvm.loop !226

for.end403:                                       ; preds = %for.inc399
  %cmp404 = icmp sgt i32 %counter.1.lcssa, 0
  br i1 %cmp404, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, label %if.end412

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612: ; preds = %for.end403
  %mul407 = mul nsw i32 %counter.1.lcssa, %div.i
  %conv408 = sext i32 %mul407 to i64
  %call.i608 = call i64 @fwrite(i8* nonnull %340, i64 %conv408, i64 1, i8* nonnull %call.i598) #16
  %cmp.i609.not = icmp eq i64 %call.i608, 0
  br i1 %cmp.i609.not, label %cleanup425, label %if.end412

if.end412:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612, %for.end403, %if.end311
  %436 = bitcast i64* %zero to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %436) #11
  store i64 0, i64* %zero, align 8, !tbaa !110
  %tobool413.not = icmp eq i32 %final_padding_bytes.0, 0
  br i1 %tobool413.not, label %if.end423, label %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit

_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit: ; preds = %if.end412
  %conv415 = zext i32 %final_padding_bytes.0 to i64
  %call.i604 = call i64 @fwrite(i8* nonnull %436, i64 %conv415, i64 1, i8* nonnull %call.i598) #16
  %cmp.i605.not = icmp eq i64 %call.i604, 0
  br i1 %cmp.i605.not, label %cleanup424, label %if.end423

if.end423:                                        ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit, %if.end412
  br label %cleanup424

cleanup424:                                       ; preds = %if.end423, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit
  %retval.21 = phi i32 [ 0, %if.end423 ], [ -16, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %436) #11
  br label %cleanup425

cleanup425.loopexit:                              ; preds = %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit619
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %343) #11
  br label %cleanup425

cleanup425:                                       ; preds = %cleanup425.loopexit, %cleanup424, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612
  %retval.22 = phi i32 [ %retval.21, %cleanup424 ], [ -14, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit612 ], [ -13, %cleanup425.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %340) #11
  br label %cleanup433

cleanup433:                                       ; preds = %cleanup425, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631, %cleanup278, %cleanup278.thread, %cleanup154
  %retval.23 = phi i32 [ %retval.22, %cleanup425 ], [ %retval.4, %cleanup154 ], [ %retval.8, %cleanup278 ], [ -12, %_ZN6Halide7Runtime8Internal10ScopedFile5writeEPKvm.exit631 ], [ -6, %cleanup278.thread ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %3) #11
  %call.i = call i32 @fclose(i8* nonnull %call.i598) #16
  br label %return

return:                                           ; preds = %cleanup433, %if.end6, %if.end2, %if.then1, %if.then
  %retval.26 = phi i32 [ -1, %if.then ], [ -1, %if.then1 ], [ %call3, %if.end2 ], [ %retval.23, %cleanup433 ], [ -2, %if.end6 ]
  ret i32 %retval.26

for.body.1:                                       ; preds = %for.body.lr.ph
  %arrayidx.1 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 1
  %arrayidx14.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1
  %437 = bitcast %struct.halide_dimension_t* %arrayidx14.1 to i8*
  %438 = bitcast %struct.halide_dimension_t* %arrayidx.1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %437, i8* nonnull align 4 dereferenceable(16) %438, i64 16, i1 false), !tbaa.struct !177
  %extent.1 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 1, i32 1
  %439 = load i32, i32* %extent.1, align 4, !tbaa !178
  %conv903.1 = zext i32 %439 to i64
  %mul.1 = mul nuw i64 %conv903, %conv903.1
  %exitcond.not17.1 = icmp eq i64 %11, 2
  br i1 %exitcond.not17.1, label %for.cond19.preheader, label %for.body.2, !llvm.loop !180

for.body.2:                                       ; preds = %for.body.1
  %arrayidx.2 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 2
  %arrayidx14.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2
  %440 = bitcast %struct.halide_dimension_t* %arrayidx14.2 to i8*
  %441 = bitcast %struct.halide_dimension_t* %arrayidx.2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %440, i8* nonnull align 4 dereferenceable(16) %441, i64 16, i1 false), !tbaa.struct !177
  %extent.2 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 2, i32 1
  %442 = load i32, i32* %extent.2, align 4, !tbaa !178
  %conv903.2 = zext i32 %442 to i64
  %mul.2 = mul i64 %mul.1, %conv903.2
  %exitcond.not17.2 = icmp eq i64 %11, 3
  br i1 %exitcond.not17.2, label %for.cond19.preheader, label %for.body.3, !llvm.loop !180

for.body.3:                                       ; preds = %for.body.2
  %arrayidx.3 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %7, i64 3
  %arrayidx14.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3
  %443 = bitcast %struct.halide_dimension_t* %arrayidx14.3 to i8*
  %444 = bitcast %struct.halide_dimension_t* %arrayidx.3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %443, i8* nonnull align 4 dereferenceable(16) %444, i64 16, i1 false), !tbaa.struct !177
  %extent.3 = getelementptr inbounds [4 x %struct.halide_dimension_t], [4 x %struct.halide_dimension_t]* %shape, i64 0, i64 3, i32 1
  %445 = load i32, i32* %extent.3, align 4, !tbaa !178
  %conv903.3 = zext i32 %445 to i64
  %mul.3 = mul i64 %mul.2, %conv903.3
  br label %for.cond19.preheader
}

declare i64 @fwrite(i8*, i64, i64, i8*) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define weak void @halide_cache_cleanup() #0 {
entry:
  tail call void @halide_memoization_cache_cleanup() #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_memoization_cache_cleanup() local_unnamed_addr #0 {
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %while.end
  store i64 0, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  ret void

for.body:                                         ; preds = %while.end, %entry
  %__begin1.018 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %while.end ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, align 8, !tbaa !10
  %cmp2.not16 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not16, label %while.end, label %while.body

while.body:                                       ; preds = %for.body, %while.body
  %entry1.017 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %while.body ], [ %0, %for.body ]
  %next3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next3, align 8, !tbaa !227
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.017) #17
  %2 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.017 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %2) #16
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp2.not, label %while.end, label %while.body, !llvm.loop !229

while.end:                                        ; preds = %while.body, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.018, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this) local_unnamed_addr #0 align 2 {
entry:
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  %0 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp11.not = icmp eq i32 %0, 0
  br i1 %cmp11.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  %1 = load i8*, i8** %metadata_storage, align 8, !tbaa !231
  tail call void @halide_free(i8* null, i8* %1) #16
  ret void

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %2, i64 %indvars.iv
  %call = tail call i32 @halide_device_free(i8* null, %struct.halide_buffer_t* %arrayidx) #16
  %3 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %3, i64 %indvars.iv, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %4) #17
  %5 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call6 to i8*
  tail call void @halide_free(i8* null, i8* %5) #16
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %6 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %7 = zext i32 %6 to i64
  %cmp = icmp ult i64 %indvars.iv.next, %7
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !233
}

; Function Attrs: nounwind willreturn mustprogress
define linkonce %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) local_unnamed_addr #2 {
entry:
  %add.ptr = getelementptr inbounds i8, i8* %host, i64 -64
  %0 = bitcast i8* %add.ptr to %"struct.Halide::Runtime::Internal::CacheBlockHeader"*
  ret %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %0
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %d, i64 %src_off, i64 %dst_off) local_unnamed_addr #0 {
entry:
  %cmp41 = icmp sgt i32 %d, -1
  br i1 %cmp41, label %land.rhs, label %while.end

land.rhs:                                         ; preds = %entry, %while.body
  %d.addr.042 = phi i32 [ %dec, %while.body ], [ %d, %entry ]
  %idxprom36 = zext i32 %d.addr.042 to i64
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom36
  %0 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp1 = icmp eq i64 %0, 1
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %dec = add nsw i32 %d.addr.042, -1
  %cmp = icmp sgt i32 %d.addr.042, 0
  br i1 %cmp, label %land.rhs, label %if.then, !llvm.loop !234

while.end:                                        ; preds = %land.rhs, %entry
  %d.addr.0.lcssa = phi i32 [ %d, %entry ], [ %d.addr.042, %land.rhs ]
  %cmp2 = icmp eq i32 %d.addr.0.lcssa, -1
  br i1 %cmp2, label %if.then, label %for.cond.preheader

for.cond.preheader:                               ; preds = %while.end
  %idxprom5 = sext i32 %d.addr.0.lcssa to i64
  %arrayidx6 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 3, i64 %idxprom5
  %1 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp737.not = icmp eq i64 %1, 0
  br i1 %cmp737.not, label %if.end, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %for.cond.preheader
  %sub = add nsw i32 %d.addr.0.lcssa, -1
  %arrayidx9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 4, i64 %idxprom5
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 5, i64 %idxprom5
  br label %for.body

if.then:                                          ; preds = %while.body, %while.end
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %2 = load i64, i64* %src, align 8, !tbaa !235
  %add = add i64 %2, %src_off
  %3 = inttoptr i64 %add to i8*
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %4 = load i64, i64* %dst, align 8, !tbaa !237
  %add3 = add i64 %4, %dst_off
  %5 = inttoptr i64 %add3 to i8*
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 6
  %6 = load i64, i64* %chunk_size, align 8, !tbaa !238
  %call = tail call i8* @memcpy(i8* %5, i8* %3, i64 %6) #16
  br label %if.end

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %i.040 = phi i64 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %src_off.addr.039 = phi i64 [ %src_off, %for.body.lr.ph ], [ %add10, %for.body ]
  %dst_off.addr.038 = phi i64 [ %dst_off, %for.body.lr.ph ], [ %add13, %for.body ]
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 %sub, i64 %src_off.addr.039, i64 %dst_off.addr.038) #17
  %7 = load i64, i64* %arrayidx9, align 8, !tbaa !110
  %add10 = add i64 %7, %src_off.addr.039
  %8 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %add13 = add i64 %8, %dst_off.addr.038
  %inc = add nuw i64 %i.040, 1
  %9 = load i64, i64* %arrayidx6, align 8, !tbaa !110
  %cmp7 = icmp ult i64 %inc, %9
  br i1 %cmp7, label %for.body, label %if.end, !llvm.loop !239

if.end:                                           ; preds = %for.body, %if.then, %for.cond.preheader
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i8* %user_context) local_unnamed_addr #0 {
entry:
  %src = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 0
  %0 = load i64, i64* %src, align 8, !tbaa !235
  %dst = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 1
  %1 = load i64, i64* %dst, align 8, !tbaa !237
  %cmp.not = icmp eq i64 %0, %1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %copy, i64 0, i32 2
  %2 = load i64, i64* %src_begin, align 8, !tbaa !240
  tail call void @_ZN6Halide7Runtime8Internal18copy_memory_helperERKNS1_11device_copyEixx(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %copy, i32 15, i64 %2, i64 0) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* noalias sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %agg.result, %struct.halide_buffer_t* %src, i1 zeroext %src_host, %struct.halide_buffer_t* %dst, i1 zeroext %dst_host) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %0 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %0) #11
  br i1 %src_host, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %2 = ptrtoint i8* %1 to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %3 = load i64, i64* %device, align 8, !tbaa !174
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %2, %cond.true ], [ %3, %cond.false ]
  %src2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 0
  store i64 %cond, i64* %src2, align 8, !tbaa !235
  br i1 %dst_host, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %host5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %4 = load i8*, i8** %host5, align 8, !tbaa !172
  %5 = ptrtoint i8* %4 to i64
  br label %cond.end8

cond.false6:                                      ; preds = %cond.end
  %device7 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %6 = load i64, i64* %device7, align 8, !tbaa !174
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false6, %cond.true4
  %cond9 = phi i64 [ %5, %cond.true4 ], [ %6, %cond.false6 ]
  %dst10 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 1
  store i64 %cond9, i64* %dst10, align 8, !tbaa !237
  %bits.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 4, i32 1
  %7 = load i8, i8* %bits.i, align 1, !tbaa !136
  %conv.i = zext i8 %7 to i32
  %add.i = add nuw nsw i32 %conv.i, 7
  %div.i = lshr i32 %add.i, 3
  %conv = zext i32 %div.i to i64
  %chunk_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 6
  store i64 %conv, i64* %chunk_size, align 8, !tbaa !238
  %arrayidx = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 0
  %arrayidx12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 0
  %arrayidx14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 0
  %arrayidx.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 1
  %arrayidx12.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 1
  %arrayidx14.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 1
  %8 = bitcast i64* %arrayidx to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %8, align 8, !tbaa !110
  %9 = bitcast i64* %arrayidx12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %9, align 8, !tbaa !110
  %10 = bitcast i64* %arrayidx14 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %10, align 8, !tbaa !110
  %arrayidx.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 4
  %arrayidx12.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 4
  %arrayidx14.4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 4
  %arrayidx.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 5
  %arrayidx12.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 5
  %arrayidx14.5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 5
  %11 = bitcast i64* %arrayidx.4 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %11, align 8, !tbaa !110
  %12 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %12, align 8, !tbaa !110
  %13 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %arrayidx.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 8
  %arrayidx12.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 8
  %arrayidx14.8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 8
  %arrayidx.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 9
  %arrayidx12.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 9
  %arrayidx14.9 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 9
  %14 = bitcast i64* %arrayidx.8 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %14, align 8, !tbaa !110
  %15 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %15, align 8, !tbaa !110
  %16 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %16, align 8, !tbaa !110
  %arrayidx.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 12
  %arrayidx12.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 12
  %arrayidx14.12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 12
  %arrayidx.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 13
  %arrayidx12.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 13
  %arrayidx14.13 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 13
  %arrayidx.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 14
  %arrayidx12.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 14
  %arrayidx14.14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 14
  %arrayidx.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 15
  %17 = bitcast i64* %arrayidx.12 to <4 x i64>*
  store <4 x i64> <i64 1, i64 1, i64 1, i64 1>, <4 x i64>* %17, align 8, !tbaa !110
  %arrayidx12.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 15
  %18 = bitcast i64* %arrayidx12.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %18, align 8, !tbaa !110
  %arrayidx14.15 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 15
  %19 = bitcast i64* %arrayidx14.12 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %19, align 8, !tbaa !110
  %src_begin = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 2
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %20 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp17272 = icmp sgt i32 %20, 0
  br i1 %cmp17272, label %for.body19.lr.ph, label %for.cond.cleanup18

for.body19.lr.ph:                                 ; preds = %cond.end8
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %21 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %dim23 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim23, align 8, !tbaa !176
  %wide.trip.count = zext i32 %20 to i64
  %min.iters.check = icmp ult i32 %20, 17
  br i1 %min.iters.check, label %for.body19.preheader, label %vector.ph

for.body19.preheader:                             ; preds = %middle.block, %for.body19.lr.ph
  %indvars.iv284.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %n.vec, %middle.block ]
  %.ph = phi i64 [ 0, %for.body19.lr.ph ], [ %73, %middle.block ]
  br label %for.body19

vector.ph:                                        ; preds = %for.body19.lr.ph
  %n.mod.vf = and i64 %wide.trip.count, 15
  %23 = icmp eq i64 %n.mod.vf, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count, %24
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %68, %vector.body ]
  %vec.phi2 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %69, %vector.body ]
  %vec.phi3 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %70, %vector.body ]
  %vec.phi4 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %71, %vector.body ]
  %25 = or i64 %index, 4
  %26 = or i64 %index, 8
  %27 = or i64 %index, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %index, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %27, i32 2
  %32 = getelementptr inbounds i32, i32* %28, i64 -2
  %33 = bitcast i32* %32 to <16 x i32>*
  %34 = getelementptr inbounds i32, i32* %29, i64 -2
  %35 = bitcast i32* %34 to <16 x i32>*
  %36 = getelementptr inbounds i32, i32* %30, i64 -2
  %37 = bitcast i32* %36 to <16 x i32>*
  %38 = getelementptr inbounds i32, i32* %31, i64 -2
  %39 = bitcast i32* %38 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !73
  %wide.vec5 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !73
  %wide.vec6 = load <16 x i32>, <16 x i32>* %37, align 4, !tbaa !73
  %wide.vec7 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !73
  %strided.vec11 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec5, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec6, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec7, <16 x i32> poison, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %40 = sext <4 x i32> %strided.vec11 to <4 x i64>
  %41 = sext <4 x i32> %strided.vec12 to <4 x i64>
  %42 = sext <4 x i32> %strided.vec13 to <4 x i64>
  %43 = sext <4 x i32> %strided.vec14 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 0
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 0
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 0
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 0
  %48 = bitcast i32* %44 to <16 x i32>*
  %49 = bitcast i32* %45 to <16 x i32>*
  %50 = bitcast i32* %46 to <16 x i32>*
  %51 = bitcast i32* %47 to <16 x i32>*
  %wide.vec15 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !181
  %wide.vec16 = load <16 x i32>, <16 x i32>* %49, align 4, !tbaa !181
  %wide.vec17 = load <16 x i32>, <16 x i32>* %50, align 4, !tbaa !181
  %wide.vec18 = load <16 x i32>, <16 x i32>* %51, align 4, !tbaa !181
  %52 = sub nsw <16 x i32> %wide.vec15, %wide.vec
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %54 = sub nsw <16 x i32> %wide.vec16, %wide.vec5
  %55 = shufflevector <16 x i32> %54, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %56 = sub nsw <16 x i32> %wide.vec17, %wide.vec6
  %57 = shufflevector <16 x i32> %56, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %58 = sub nsw <16 x i32> %wide.vec18, %wide.vec7
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = sext <4 x i32> %53 to <4 x i64>
  %61 = sext <4 x i32> %55 to <4 x i64>
  %62 = sext <4 x i32> %57 to <4 x i64>
  %63 = sext <4 x i32> %59 to <4 x i64>
  %64 = mul nsw <4 x i64> %60, %40
  %65 = mul nsw <4 x i64> %61, %41
  %66 = mul nsw <4 x i64> %62, %42
  %67 = mul nsw <4 x i64> %63, %43
  %68 = add <4 x i64> %64, %vec.phi
  %69 = add <4 x i64> %65, %vec.phi2
  %70 = add <4 x i64> %66, %vec.phi3
  %71 = add <4 x i64> %67, %vec.phi4
  %index.next = add i64 %index, 16
  %72 = icmp eq i64 %index.next, %n.vec
  br i1 %72, label %middle.block, label %vector.body, !llvm.loop !241

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %69, %68
  %bin.rdx23 = add <4 x i64> %70, %bin.rdx
  %bin.rdx24 = add <4 x i64> %71, %bin.rdx23
  %73 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx24)
  br label %for.body19.preheader

for.cond.cleanup18:                               ; preds = %for.body19, %cond.end8
  %74 = phi i64 [ 0, %cond.end8 ], [ %add, %for.body19 ]
  %mul37 = mul i64 %74, %conv
  store i64 %mul37, i64* %src_begin, align 8, !tbaa !240
  %dimensions39 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %75 = load i32, i32* %dimensions39, align 4, !tbaa !175
  %cmp40.not = icmp eq i32 %20, %75
  br i1 %cmp40.not, label %lor.lhs.false, label %if.then

for.body19:                                       ; preds = %for.body19.preheader, %for.body19
  %indvars.iv284 = phi i64 [ %indvars.iv.next285, %for.body19 ], [ %indvars.iv284.ph, %for.body19.preheader ]
  %76 = phi i64 [ %add, %for.body19 ], [ %.ph, %for.body19.preheader ]
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 2
  %77 = load i32, i32* %stride, align 4, !tbaa !182
  %conv22 = sext i32 %77 to i64
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv284, i32 0
  %78 = load i32, i32* %min, align 4, !tbaa !181
  %min29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %21, i64 %indvars.iv284, i32 0
  %79 = load i32, i32* %min29, align 4, !tbaa !181
  %sub = sub nsw i32 %78, %79
  %conv30 = sext i32 %sub to i64
  %mul = mul nsw i64 %conv30, %conv22
  %add = add i64 %mul, %76
  %indvars.iv.next285 = add nuw nsw i64 %indvars.iv284, 1
  %exitcond286.not = icmp eq i64 %indvars.iv.next285, %wide.trip.count
  br i1 %exitcond286.not, label %for.cond.cleanup18, label %for.body19, !llvm.loop !242

lor.lhs.false:                                    ; preds = %for.cond.cleanup18
  %bits.i253 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 4, i32 1
  %80 = load i8, i8* %bits.i253, align 1, !tbaa !136
  %conv.i254 = zext i8 %80 to i32
  %add.i255 = add nuw nsw i32 %conv.i254, 7
  %div.i256 = lshr i32 %add.i255, 3
  %cmp45.not = icmp ne i32 %div.i, %div.i256
  %cmp48 = icmp sgt i32 %20, 16
  %or.cond261 = or i1 %cmp48, %cmp45.not
  br i1 %or.cond261, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %for.cond.cleanup18
  %81 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %81, i8 0, i64 416, i1 false)
  br label %cleanup

if.end:                                           ; preds = %lor.lhs.false
  %cmp50 = icmp eq i32 %div.i, 0
  br i1 %cmp50, label %if.then51, label %for.cond54.preheader

for.cond54.preheader:                             ; preds = %if.end
  br i1 %cmp17272, label %for.body58.lr.ph, label %while.end

for.body58.lr.ph:                                 ; preds = %for.cond54.preheader
  %dim60 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 6
  %82 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim60, align 8, !tbaa !176
  %dim70 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 6
  %83 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim70, align 8, !tbaa !176
  %wide.trip.count282 = zext i32 %20 to i64
  br label %for.body58

if.then51:                                        ; preds = %if.end
  %84 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %84, i8 0, i64 416, i1 false)
  br label %cleanup

while.cond.preheader:                             ; preds = %for.cond.cleanup94
  %.pre = load i64, i64* %chunk_size, align 8, !tbaa !238
  %.pre290 = load i64, i64* %arrayidx12, align 8, !tbaa !110
  %cmp139263 = icmp eq i64 %.pre, %.pre290
  br i1 %cmp139263, label %land.rhs.lr.ph, label %while.end

land.rhs.lr.ph:                                   ; preds = %while.cond.preheader
  %.pre291 = load i64, i64* %arrayidx14, align 8, !tbaa !110
  %85 = bitcast i64* %arrayidx.1 to <4 x i64>*
  %86 = bitcast i64* %arrayidx to <4 x i64>*
  %87 = bitcast i64* %arrayidx12.1 to <4 x i64>*
  %88 = bitcast i64* %arrayidx12 to <4 x i64>*
  %89 = bitcast i64* %arrayidx14.1 to <4 x i64>*
  %90 = bitcast i64* %arrayidx14 to <4 x i64>*
  %91 = bitcast i64* %arrayidx.5 to <4 x i64>*
  %92 = bitcast i64* %arrayidx.4 to <4 x i64>*
  %93 = bitcast i64* %arrayidx12.5 to <4 x i64>*
  %94 = bitcast i64* %arrayidx12.4 to <4 x i64>*
  %95 = bitcast i64* %arrayidx14.5 to <4 x i64>*
  %96 = bitcast i64* %arrayidx14.4 to <4 x i64>*
  %97 = bitcast i64* %arrayidx.9 to <4 x i64>*
  %98 = bitcast i64* %arrayidx.8 to <4 x i64>*
  %99 = bitcast i64* %arrayidx12.9 to <4 x i64>*
  %100 = bitcast i64* %arrayidx12.8 to <4 x i64>*
  %101 = bitcast i64* %arrayidx14.9 to <4 x i64>*
  %102 = bitcast i64* %arrayidx14.8 to <4 x i64>*
  %103 = bitcast i64* %arrayidx.13 to <2 x i64>*
  %104 = bitcast i64* %arrayidx.12 to <2 x i64>*
  %105 = bitcast i64* %arrayidx12.13 to <2 x i64>*
  %106 = bitcast i64* %arrayidx12.12 to <2 x i64>*
  %107 = bitcast i64* %arrayidx14.13 to <2 x i64>*
  %108 = bitcast i64* %arrayidx14.12 to <2 x i64>*
  br label %land.rhs

for.body58:                                       ; preds = %for.cond.cleanup94, %for.body58.lr.ph
  %indvars.iv278 = phi i64 [ 0, %for.body58.lr.ph ], [ %indvars.iv.next279, %for.cond.cleanup94 ]
  %stride63 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 2
  %109 = load i32, i32* %stride63, align 4, !tbaa !182
  %conv64 = sext i32 %109 to i64
  %mul68 = mul nsw i64 %conv64, %conv
  %stride73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %83, i64 %indvars.iv278, i32 2
  %110 = load i32, i32* %stride73, align 4, !tbaa !182
  %conv74 = sext i32 %110 to i64
  %mul78 = mul nsw i64 %conv74, %conv
  %cmp80264.not = icmp eq i64 %indvars.iv278, 0
  br i1 %cmp80264.not, label %for.end91, label %for.body81.lr.ph

for.body81.lr.ph:                                 ; preds = %for.body58
  %cmp86.not = icmp eq i64 %mul68, 0
  br i1 %cmp86.not, label %for.body81.preheader, label %for.body81.us

for.body81.preheader:                             ; preds = %for.body81.lr.ph
  %111 = trunc i64 %indvars.iv278 to i32
  br label %for.end91

for.body81.us:                                    ; preds = %for.body81.lr.ph, %for.inc89.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc89.us ], [ 0, %for.body81.lr.ph ]
  %arrayidx84.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv
  %112 = load i64, i64* %arrayidx84.us, align 8, !tbaa !110
  %cmp85.us = icmp ult i64 %mul68, %112
  br i1 %cmp85.us, label %for.end91.loopexit, label %for.inc89.us

for.inc89.us:                                     ; preds = %for.body81.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %indvars.iv278
  br i1 %exitcond.not, label %for.end91.loopexit, label %for.body81.us, !llvm.loop !243

for.end91.loopexit:                               ; preds = %for.inc89.us, %for.body81.us
  %insert.0.lcssa.ph.in = phi i64 [ %indvars.iv278, %for.inc89.us ], [ %indvars.iv, %for.body81.us ]
  %insert.0.lcssa.ph = trunc i64 %insert.0.lcssa.ph.in to i32
  br label %for.end91

for.end91:                                        ; preds = %for.end91.loopexit, %for.body81.preheader, %for.body58
  %insert.0.lcssa = phi i32 [ 0, %for.body58 ], [ %insert.0.lcssa.ph, %for.end91.loopexit ], [ %111, %for.body81.preheader ]
  %113 = zext i32 %insert.0.lcssa to i64
  %cmp93267 = icmp ugt i64 %indvars.iv278, %113
  br i1 %cmp93267, label %for.body95.preheader, label %for.cond.cleanup94

for.body95.preheader:                             ; preds = %for.end91
  %114 = sext i32 %insert.0.lcssa to i64
  %115 = sub i64 %indvars.iv278, %114
  %116 = xor i64 %114, -1
  %117 = add i64 %indvars.iv278, %116
  %xtraiter = and i64 %115, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.body95.prol.loopexit, label %for.body95.prol

for.body95.prol:                                  ; preds = %for.body95.preheader, %for.body95.prol
  %indvars.iv280.prol = phi i64 [ %indvars.iv.next281.prol, %for.body95.prol ], [ %indvars.iv278, %for.body95.preheader ]
  %prol.iter = phi i64 [ %prol.iter.sub, %for.body95.prol ], [ %xtraiter, %for.body95.preheader ]
  %indvars.iv.next281.prol = add nsw i64 %indvars.iv280.prol, -1
  %arrayidx99.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.prol
  %118 = load i64, i64* %arrayidx99.prol, align 8, !tbaa !110
  %arrayidx102.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280.prol
  store i64 %118, i64* %arrayidx102.prol, align 8, !tbaa !110
  %arrayidx106.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.prol
  %119 = load i64, i64* %arrayidx106.prol, align 8, !tbaa !110
  %arrayidx109.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280.prol
  store i64 %119, i64* %arrayidx109.prol, align 8, !tbaa !110
  %arrayidx113.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.prol
  %120 = load i64, i64* %arrayidx113.prol, align 8, !tbaa !110
  %arrayidx116.prol = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280.prol
  store i64 %120, i64* %arrayidx116.prol, align 8, !tbaa !110
  %prol.iter.sub = add i64 %prol.iter, -1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.sub, 0
  br i1 %prol.iter.cmp.not, label %for.body95.prol.loopexit, label %for.body95.prol, !llvm.loop !244

for.body95.prol.loopexit:                         ; preds = %for.body95.prol, %for.body95.preheader
  %indvars.iv280.unr = phi i64 [ %indvars.iv278, %for.body95.preheader ], [ %indvars.iv.next281.prol, %for.body95.prol ]
  %121 = icmp ult i64 %117, 3
  br i1 %121, label %for.cond.cleanup94, label %for.body95

for.cond.cleanup94:                               ; preds = %for.body95.prol.loopexit, %for.body95, %for.end91
  %extent122 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %82, i64 %indvars.iv278, i32 1
  %122 = load i32, i32* %extent122, align 4, !tbaa !178
  %conv123 = sext i32 %122 to i64
  %arrayidx126 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %113
  store i64 %conv123, i64* %arrayidx126, align 8, !tbaa !110
  %arrayidx129 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %113
  store i64 %mul68, i64* %arrayidx129, align 8, !tbaa !110
  %arrayidx132 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %113
  store i64 %mul78, i64* %arrayidx132, align 8, !tbaa !110
  %indvars.iv.next279 = add nuw nsw i64 %indvars.iv278, 1
  %exitcond283.not = icmp eq i64 %indvars.iv.next279, %wide.trip.count282
  br i1 %exitcond283.not, label %while.cond.preheader, label %for.body58, !llvm.loop !245

for.body95:                                       ; preds = %for.body95.prol.loopexit, %for.body95
  %indvars.iv280 = phi i64 [ %indvars.iv.next281.3, %for.body95 ], [ %indvars.iv280.unr, %for.body95.prol.loopexit ]
  %indvars.iv.next281 = add nsw i64 %indvars.iv280, -1
  %arrayidx99 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  %123 = load i64, i64* %arrayidx99, align 8, !tbaa !110
  %arrayidx102 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv280
  store i64 %123, i64* %arrayidx102, align 8, !tbaa !110
  %arrayidx106 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  %124 = load i64, i64* %arrayidx106, align 8, !tbaa !110
  %arrayidx109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv280
  store i64 %124, i64* %arrayidx109, align 8, !tbaa !110
  %arrayidx113 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  %125 = load i64, i64* %arrayidx113, align 8, !tbaa !110
  %arrayidx116 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv280
  store i64 %125, i64* %arrayidx116, align 8, !tbaa !110
  %indvars.iv.next281.1 = add nsw i64 %indvars.iv280, -2
  %arrayidx99.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  %126 = load i64, i64* %arrayidx99.1, align 8, !tbaa !110
  %arrayidx102.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281
  store i64 %126, i64* %arrayidx102.1, align 8, !tbaa !110
  %arrayidx106.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  %127 = load i64, i64* %arrayidx106.1, align 8, !tbaa !110
  %arrayidx109.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281
  store i64 %127, i64* %arrayidx109.1, align 8, !tbaa !110
  %arrayidx113.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  %128 = load i64, i64* %arrayidx113.1, align 8, !tbaa !110
  %arrayidx116.1 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281
  store i64 %128, i64* %arrayidx116.1, align 8, !tbaa !110
  %indvars.iv.next281.2 = add nsw i64 %indvars.iv280, -3
  %arrayidx99.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  %129 = load i64, i64* %arrayidx99.2, align 8, !tbaa !110
  %arrayidx102.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.1
  store i64 %129, i64* %arrayidx102.2, align 8, !tbaa !110
  %arrayidx106.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  %130 = load i64, i64* %arrayidx106.2, align 8, !tbaa !110
  %arrayidx109.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.1
  store i64 %130, i64* %arrayidx109.2, align 8, !tbaa !110
  %arrayidx113.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  %131 = load i64, i64* %arrayidx113.2, align 8, !tbaa !110
  %arrayidx116.2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.1
  store i64 %131, i64* %arrayidx116.2, align 8, !tbaa !110
  %indvars.iv.next281.3 = add nsw i64 %indvars.iv280, -4
  %arrayidx99.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.3
  %132 = load i64, i64* %arrayidx99.3, align 8, !tbaa !110
  %arrayidx102.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 3, i64 %indvars.iv.next281.2
  store i64 %132, i64* %arrayidx102.3, align 8, !tbaa !110
  %arrayidx106.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.3
  %133 = load i64, i64* %arrayidx106.3, align 8, !tbaa !110
  %arrayidx109.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 5, i64 %indvars.iv.next281.2
  store i64 %133, i64* %arrayidx109.3, align 8, !tbaa !110
  %arrayidx113.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.3
  %134 = load i64, i64* %arrayidx113.3, align 8, !tbaa !110
  %arrayidx116.3 = getelementptr inbounds %"struct.Halide::Runtime::Internal::device_copy", %"struct.Halide::Runtime::Internal::device_copy"* %c, i64 0, i32 4, i64 %indvars.iv.next281.2
  store i64 %134, i64* %arrayidx116.3, align 8, !tbaa !110
  %cmp93.3 = icmp sgt i64 %indvars.iv.next281.3, %114
  br i1 %cmp93.3, label %for.body95, label %for.cond.cleanup94, !llvm.loop !246

land.rhs:                                         ; preds = %while.body, %land.rhs.lr.ph
  %135 = phi i64 [ %.pre291, %land.rhs.lr.ph ], [ %154, %while.body ]
  %136 = phi i64 [ %.pre, %land.rhs.lr.ph ], [ %mul147, %while.body ]
  %cmp143 = icmp eq i64 %136, %135
  br i1 %cmp143, label %while.body, label %while.end

while.body:                                       ; preds = %land.rhs
  %137 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %mul147 = mul i64 %137, %135
  store i64 %mul147, i64* %chunk_size, align 8, !tbaa !238
  %138 = load <4 x i64>, <4 x i64>* %85, align 8, !tbaa !110
  store <4 x i64> %138, <4 x i64>* %86, align 8, !tbaa !110
  %139 = load <4 x i64>, <4 x i64>* %87, align 8, !tbaa !110
  store <4 x i64> %139, <4 x i64>* %88, align 8, !tbaa !110
  %140 = load <4 x i64>, <4 x i64>* %89, align 8, !tbaa !110
  store <4 x i64> %140, <4 x i64>* %90, align 8, !tbaa !110
  %141 = load <4 x i64>, <4 x i64>* %91, align 8, !tbaa !110
  store <4 x i64> %141, <4 x i64>* %92, align 8, !tbaa !110
  %142 = load <4 x i64>, <4 x i64>* %93, align 8, !tbaa !110
  store <4 x i64> %142, <4 x i64>* %94, align 8, !tbaa !110
  %143 = load <4 x i64>, <4 x i64>* %95, align 8, !tbaa !110
  store <4 x i64> %143, <4 x i64>* %96, align 8, !tbaa !110
  %144 = load <4 x i64>, <4 x i64>* %97, align 8, !tbaa !110
  store <4 x i64> %144, <4 x i64>* %98, align 8, !tbaa !110
  %145 = load <4 x i64>, <4 x i64>* %99, align 8, !tbaa !110
  store <4 x i64> %145, <4 x i64>* %100, align 8, !tbaa !110
  %146 = load <4 x i64>, <4 x i64>* %101, align 8, !tbaa !110
  store <4 x i64> %146, <4 x i64>* %102, align 8, !tbaa !110
  %147 = load <2 x i64>, <2 x i64>* %103, align 8, !tbaa !110
  store <2 x i64> %147, <2 x i64>* %104, align 8, !tbaa !110
  %148 = load <2 x i64>, <2 x i64>* %105, align 8, !tbaa !110
  store <2 x i64> %148, <2 x i64>* %106, align 8, !tbaa !110
  %149 = load <2 x i64>, <2 x i64>* %107, align 8, !tbaa !110
  store <2 x i64> %149, <2 x i64>* %108, align 8, !tbaa !110
  %150 = load i64, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 %150, i64* %arrayidx.14, align 8, !tbaa !110
  %151 = load i64, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 %151, i64* %arrayidx12.14, align 8, !tbaa !110
  %152 = load i64, i64* %arrayidx14.15, align 8, !tbaa !110
  store i64 %152, i64* %arrayidx14.14, align 8, !tbaa !110
  store i64 1, i64* %arrayidx.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx12.15, align 8, !tbaa !110
  store i64 0, i64* %arrayidx14.15, align 8, !tbaa !110
  %153 = extractelement <4 x i64> %139, i32 0
  %cmp139 = icmp eq i64 %mul147, %153
  %154 = extractelement <4 x i64> %140, i32 0
  br i1 %cmp139, label %land.rhs, label %while.end, !llvm.loop !247

while.end:                                        ; preds = %while.body, %land.rhs, %while.cond.preheader, %for.cond54.preheader
  %155 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(416) %155, i8* nonnull align 8 dereferenceable(416) %0, i64 416, i1 false), !tbaa.struct !248
  br label %cleanup

cleanup:                                          ; preds = %while.end, %if.then51, %if.then
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %0) #11
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %key1, i8* %key2, i64 %key_size) local_unnamed_addr #0 {
entry:
  %call = tail call i32 @memcmp(i8* %key1, i8* %key2, i64 %key_size) #16
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}

declare i32 @memcmp(i8*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %buf, %struct.halide_dimension_t* %shape) local_unnamed_addr #0 {
entry:
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %0 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp9 = icmp sgt i32 %0, 0
  br i1 %cmp9, label %for.body.lr.ph, label %return

for.body.lr.ph:                                   ; preds = %entry
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %1 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %2 = zext i32 %0 to i64
  br label %for.body

for.cond:                                         ; preds = %_ZNK18halide_dimension_tneERKS_.exit
  %exitcond.not = icmp eq i64 %indvars.iv.next, %2
  br i1 %exitcond.not, label %return, label %for.body, !llvm.loop !249

for.body:                                         ; preds = %for.cond, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.cond ]
  %min.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 0
  %3 = load i32, i32* %min.i.i, align 4, !tbaa !181
  %min2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %min2.i.i, align 4, !tbaa !181
  %cmp.i.i = icmp eq i32 %3, %4
  br i1 %cmp.i.i, label %land.lhs.true.i.i, label %return

land.lhs.true.i.i:                                ; preds = %for.body
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 1
  %5 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %extent3.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 1
  %6 = load i32, i32* %extent3.i.i, align 4, !tbaa !178
  %cmp4.i.i = icmp eq i32 %5, %6
  br i1 %cmp4.i.i, label %land.lhs.true5.i.i, label %return

land.lhs.true5.i.i:                               ; preds = %land.lhs.true.i.i
  %stride.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 2
  %7 = load i32, i32* %stride.i.i, align 4, !tbaa !182
  %stride6.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 2
  %8 = load i32, i32* %stride6.i.i, align 4, !tbaa !182
  %cmp7.i.i = icmp eq i32 %7, %8
  br i1 %cmp7.i.i, label %_ZNK18halide_dimension_tneERKS_.exit, label %return

_ZNK18halide_dimension_tneERKS_.exit:             ; preds = %land.lhs.true5.i.i
  %flags.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %1, i64 %indvars.iv, i32 3
  %9 = load i32, i32* %flags.i.i, align 4, !tbaa !250
  %flags8.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %shape, i64 %indvars.iv, i32 3
  %10 = load i32, i32* %flags8.i.i, align 4, !tbaa !250
  %cmp9.i.i.not = icmp eq i32 %9, %10
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %cmp9.i.i.not, label %for.cond, label %return

return:                                           ; preds = %_ZNK18halide_dimension_tneERKS_.exit, %land.lhs.true5.i.i, %land.lhs.true.i.i, %for.body, %for.cond, %entry
  %cmp.lcssa = phi i1 [ true, %entry ], [ false, %_ZNK18halide_dimension_tneERKS_.exit ], [ true, %for.cond ], [ false, %land.lhs.true5.i.i ], [ false, %land.lhs.true.i.i ], [ false, %for.body ]
  ret i1 %cmp.lcssa
}

; Function Attrs: nounwind mustprogress
define linkonce zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %this, i8* %cache_key, i64 %cache_key_size, i32 %key_hash, %struct.halide_buffer_t* %computed_bounds_buf, i32 %tuples, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key_arg, i64 %eviction_key_arg) local_unnamed_addr #0 align 2 {
entry:
  %frombool = zext i1 %has_eviction_key_arg to i8
  %0 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %this to <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>*
  store <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*> zeroinitializer, <2 x %"struct.Halide::Runtime::Internal::CacheEntry"*>* %0, align 8, !tbaa !10
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 4
  store i64 %cache_key_size, i64* %key_size, align 8, !tbaa !252
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 6
  store i32 %key_hash, i32* %hash, align 8, !tbaa !253
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 7
  store i32 0, i32* %in_use_count, align 4, !tbaa !254
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 8
  store i32 %tuples, i32* %tuple_count, align 8, !tbaa !230
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 5
  %1 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 9
  store i32 %1, i32* %dimensions2, align 4, !tbaa !255
  %conv = zext i32 %tuples to i64
  %mul = mul nuw nsw i64 %conv, 56
  %conv5 = sext i32 %1 to i64
  %add8 = add i32 %tuples, 1
  %conv9 = zext i32 %add8 to i64
  %mul6 = shl nuw nsw i64 %conv9, 4
  %mul10 = mul i64 %mul6, %conv5
  %add11 = add i64 %mul10, %mul
  %add13 = add i64 %add11, %cache_key_size
  %call = tail call i8* @halide_malloc(i8* null, i64 %add13) #16
  %metadata_storage = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 3
  store i8* %call, i8** %metadata_storage, align 8, !tbaa !231
  %tobool.not = icmp eq i8* %call, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 11
  %2 = bitcast %struct.halide_buffer_t** %buf to i8**
  store i8* %call, i8** %2, align 8, !tbaa !232
  %add.ptr = getelementptr inbounds i8, i8* %call, i64 %mul
  %computed_bounds = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 10
  %3 = bitcast %struct.halide_dimension_t** %computed_bounds to i8**
  store i8* %add.ptr, i8** %3, align 8, !tbaa !256
  %add.ptr18 = getelementptr inbounds i8, i8* %call, i64 %add11
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 5
  store i8* %add.ptr18, i8** %key, align 8, !tbaa !257
  %4 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp117.not = icmp eq i64 %4, 0
  br i1 %cmp117.not, label %for.cond23.preheader, label %for.body.preheader

for.body.preheader:                               ; preds = %if.end
  %5 = load i8, i8* %cache_key, align 1, !tbaa !14
  store i8 %5, i8* %add.ptr18, align 1, !tbaa !14
  %6 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp130 = icmp ugt i64 %6, 1
  br i1 %cmp130, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond23.preheader:                             ; preds = %for.body.for.body_crit_edge, %for.body.preheader, %if.end
  %7 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp25115 = icmp sgt i32 %7, 0
  br i1 %cmp25115, label %for.body27.lr.ph, label %for.cond36.preheader

for.body27.lr.ph:                                 ; preds = %for.cond23.preheader
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %computed_bounds_buf, i64 0, i32 6
  br label %for.body27

for.body.for.body_crit_edge:                      ; preds = %for.body.preheader, %for.body.for.body_crit_edge
  %inc131 = phi i64 [ %inc, %for.body.for.body_crit_edge ], [ 1, %for.body.preheader ]
  %.pre = load i8*, i8** %key, align 8, !tbaa !257
  %arrayidx = getelementptr inbounds i8, i8* %cache_key, i64 %inc131
  %8 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %arrayidx21 = getelementptr inbounds i8, i8* %.pre, i64 %inc131
  store i8 %8, i8* %arrayidx21, align 1, !tbaa !14
  %inc = add nuw i64 %inc131, 1
  %9 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp = icmp ult i64 %inc, %9
  br i1 %cmp, label %for.body.for.body_crit_edge, label %for.cond23.preheader, !llvm.loop !258

for.cond36.preheader:                             ; preds = %for.body27, %for.cond23.preheader
  %10 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp38113.not = icmp eq i32 %10, 0
  br i1 %cmp38113.not, label %for.cond.cleanup39, label %for.body40

for.body27:                                       ; preds = %for.body27, %for.body27.lr.ph
  %indvars.iv121 = phi i64 [ 0, %for.body27.lr.ph ], [ %indvars.iv.next122, %for.body27 ]
  %11 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %arrayidx28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %11, i64 %indvars.iv121
  %12 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %arrayidx31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %12, i64 %indvars.iv121
  %13 = bitcast %struct.halide_dimension_t* %arrayidx31 to i8*
  %14 = bitcast %struct.halide_dimension_t* %arrayidx28 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %13, i8* nonnull align 4 dereferenceable(16) %14, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next122 = add nuw nsw i64 %indvars.iv121, 1
  %15 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %16 = sext i32 %15 to i64
  %cmp25 = icmp slt i64 %indvars.iv.next122, %16
  br i1 %cmp25, label %for.body27, label %for.cond36.preheader, !llvm.loop !259

for.cond36.loopexit:                              ; preds = %for.body59.for.body59_crit_edge, %for.body59.preheader, %for.body40
  %17 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %18 = zext i32 %17 to i64
  %cmp38 = icmp ult i64 %indvars.iv.next120, %18
  br i1 %cmp38, label %for.body40, label %for.cond.cleanup39, !llvm.loop !260

for.cond.cleanup39:                               ; preds = %for.cond36.loopexit, %for.cond36.preheader
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 13
  store i8 %frombool, i8* %has_eviction_key, align 8, !tbaa !261
  %eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %this, i64 0, i32 12
  store i64 %eviction_key_arg, i64* %eviction_key, align 8, !tbaa !262
  br label %cleanup

for.body40:                                       ; preds = %for.cond36.preheader, %for.cond36.loopexit
  %indvars.iv119 = phi i64 [ %indvars.iv.next120, %for.cond36.loopexit ], [ 0, %for.cond36.preheader ]
  %arrayidx42 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv119
  %19 = bitcast %struct.halide_buffer_t** %arrayidx42 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !10
  %21 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %arrayidx45 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %21, i64 %indvars.iv119
  %22 = bitcast %struct.halide_buffer_t* %arrayidx45 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %22, i8* nonnull align 8 dereferenceable(56) %20, i64 56, i1 false), !tbaa.struct !263
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds, align 8, !tbaa !256
  %indvars.iv.next120 = add nuw nsw i64 %indvars.iv119, 1
  %24 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %25 = trunc i64 %indvars.iv.next120 to i32
  %mul49 = mul i32 %24, %25
  %idx.ext = zext i32 %mul49 to i64
  %add.ptr50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %23, i64 %idx.ext
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim54 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 %indvars.iv119, i32 6
  store %struct.halide_dimension_t* %add.ptr50, %struct.halide_dimension_t** %dim54, align 8, !tbaa !176
  %cmp57111 = icmp sgt i32 %24, 0
  br i1 %cmp57111, label %for.body59.preheader, label %for.cond36.loopexit

for.body59.preheader:                             ; preds = %for.body40
  %27 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62125 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %27, i64 0, i32 6
  %28 = bitcast %struct.halide_dimension_t** %dim62125 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !176
  %30 = bitcast %struct.halide_dimension_t* %add.ptr50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %30, i8* nonnull align 4 dereferenceable(16) %29, i64 16, i1 false), !tbaa.struct !177
  %31 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %cmp57128 = icmp sgt i32 %31, 1
  br i1 %cmp57128, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

for.body59.for.body59_crit_edge:                  ; preds = %for.body59.preheader, %for.body59.for.body59_crit_edge
  %indvars.iv.next129 = phi i64 [ %indvars.iv.next, %for.body59.for.body59_crit_edge ], [ 1, %for.body59.preheader ]
  %.pre123 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %dim68.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %.pre123, i64 %indvars.iv119, i32 6
  %.pre124 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim68.phi.trans.insert, align 8, !tbaa !176
  %32 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx42, align 8, !tbaa !10
  %dim62 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %32, i64 0, i32 6
  %33 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim62, align 8, !tbaa !176
  %arrayidx64 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %33, i64 %indvars.iv.next129
  %arrayidx70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %.pre124, i64 %indvars.iv.next129
  %34 = bitcast %struct.halide_dimension_t* %arrayidx70 to i8*
  %35 = bitcast %struct.halide_dimension_t* %arrayidx64 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %34, i8* nonnull align 4 dereferenceable(16) %35, i64 16, i1 false), !tbaa.struct !177
  %indvars.iv.next = add nuw nsw i64 %indvars.iv.next129, 1
  %36 = load i32, i32* %dimensions2, align 4, !tbaa !255
  %37 = sext i32 %36 to i64
  %cmp57 = icmp slt i64 %indvars.iv.next, %37
  br i1 %cmp57, label %for.body59.for.body59_crit_edge, label %for.cond36.loopexit, !llvm.loop !265

cleanup:                                          ; preds = %for.cond.cleanup39, %entry
  %38 = xor i1 %tobool.not, true
  ret i1 %38
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %key, i64 %key_size) local_unnamed_addr #0 {
entry:
  %cmp8.not = icmp eq i64 %key_size, 0
  br i1 %cmp8.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %entry
  %0 = add i64 %key_size, -1
  %xtraiter = and i64 %key_size, 7
  %1 = icmp ult i64 %0, 7
  br i1 %1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.preheader.new

for.body.preheader.new:                           ; preds = %for.body.preheader
  %unroll_iter = and i64 %key_size, -8
  %add.0 = mul i32 5381, 33
  br label %for.body

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %for.body, %for.body.preheader
  %add1.lcssa.ph = phi i32 [ undef, %for.body.preheader ], [ %add1.7, %for.body ]
  %i.010.unr = phi i64 [ 0, %for.body.preheader ], [ %inc.7, %for.body ]
  %h.09.unr = phi i32 [ 5381, %for.body.preheader ], [ %add1.7, %for.body ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.body.epil

for.body.epil:                                    ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil
  %i.010.epil = phi i64 [ %inc.epil, %for.body.epil ], [ %i.010.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %h.09.epil = phi i32 [ %add1.epil, %for.body.epil ], [ %h.09.unr, %for.cond.cleanup.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body.epil ], [ %xtraiter, %for.cond.cleanup.loopexit.unr-lcssa ]
  %add.epil = mul i32 %h.09.epil, 33
  %arrayidx.epil = getelementptr inbounds i8, i8* %key, i64 %i.010.epil
  %2 = load i8, i8* %arrayidx.epil, align 1, !tbaa !14
  %conv.epil = zext i8 %2 to i32
  %add1.epil = add i32 %add.epil, %conv.epil
  %inc.epil = add nuw i64 %i.010.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %for.cond.cleanup, label %for.body.epil, !llvm.loop !266

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.body.epil, %entry
  %h.0.lcssa = phi i32 [ 5381, %entry ], [ %add1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %add1.epil, %for.body.epil ]
  ret i32 %h.0.lcssa

for.body:                                         ; preds = %for.body.for.body_crit_edge, %for.body.preheader.new
  %i.010 = phi i64 [ 0, %for.body.preheader.new ], [ %inc.7, %for.body.for.body_crit_edge ]
  %add.phi = phi i32 [ %add.0, %for.body.preheader.new ], [ %add.12, %for.body.for.body_crit_edge ]
  %niter = phi i64 [ %unroll_iter, %for.body.preheader.new ], [ %niter.nsub.7, %for.body.for.body_crit_edge ]
  %arrayidx = getelementptr inbounds i8, i8* %key, i64 %i.010
  %3 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %conv = zext i8 %3 to i32
  %add1 = add i32 %add.phi, %conv
  %inc = or i64 %i.010, 1
  %add.1 = mul i32 %add1, 33
  %arrayidx.1 = getelementptr inbounds i8, i8* %key, i64 %inc
  %4 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %conv.1 = zext i8 %4 to i32
  %add1.1 = add i32 %add.1, %conv.1
  %inc.1 = or i64 %i.010, 2
  %add.2 = mul i32 %add1.1, 33
  %arrayidx.2 = getelementptr inbounds i8, i8* %key, i64 %inc.1
  %5 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %conv.2 = zext i8 %5 to i32
  %add1.2 = add i32 %add.2, %conv.2
  %inc.2 = or i64 %i.010, 3
  %add.3 = mul i32 %add1.2, 33
  %arrayidx.3 = getelementptr inbounds i8, i8* %key, i64 %inc.2
  %6 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %conv.3 = zext i8 %6 to i32
  %add1.3 = add i32 %add.3, %conv.3
  %inc.3 = or i64 %i.010, 4
  %add.4 = mul i32 %add1.3, 33
  %arrayidx.4 = getelementptr inbounds i8, i8* %key, i64 %inc.3
  %7 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %conv.4 = zext i8 %7 to i32
  %add1.4 = add i32 %add.4, %conv.4
  %inc.4 = or i64 %i.010, 5
  %add.5 = mul i32 %add1.4, 33
  %arrayidx.5 = getelementptr inbounds i8, i8* %key, i64 %inc.4
  %8 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %conv.5 = zext i8 %8 to i32
  %add1.5 = add i32 %add.5, %conv.5
  %inc.5 = or i64 %i.010, 6
  %add.6 = mul i32 %add1.5, 33
  %arrayidx.6 = getelementptr inbounds i8, i8* %key, i64 %inc.5
  %9 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %conv.6 = zext i8 %9 to i32
  %add1.6 = add i32 %add.6, %conv.6
  %inc.6 = or i64 %i.010, 7
  %add.7 = mul i32 %add1.6, 33
  %arrayidx.7 = getelementptr inbounds i8, i8* %key, i64 %inc.6
  %10 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %conv.7 = zext i8 %10 to i32
  %add1.7 = add i32 %add.7, %conv.7
  %inc.7 = add nuw i64 %i.010, 8
  %niter.nsub.7 = add i64 %niter, -8
  %niter.ncmp.7 = icmp eq i64 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.body.for.body_crit_edge, !llvm.loop !267

for.body.for.body_crit_edge:                      ; preds = %for.body
  %add.12 = mul i32 %add1.7, 33
  br label %for.body
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal11prune_cacheEv() local_unnamed_addr #0 {
entry:
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %1 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %2 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  %cmp84 = icmp sgt i64 %1, %2
  %cmp185 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  %3 = and i1 %cmp185, %cmp84
  br i1 %3, label %while.body, label %while.end42

while.body:                                       ; preds = %entry, %if.end41
  %4 = phi i64 [ %114, %if.end41 ], [ %2, %entry ]
  %5 = phi i64 [ %115, %if.end41 ], [ %1, %entry ]
  %prune_candidate.086 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %6, %if.end41 ], [ %0, %entry ]
  %more_recent2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 1
  %6 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent2, align 8, !tbaa !268
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 7
  %7 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3 = icmp eq i32 %7, 0
  br i1 %cmp3, label %if.then, label %if.end41

if.then:                                          ; preds = %while.body
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 6
  %8 = load i32, i32* %hash, align 8, !tbaa !253
  %9 = and i32 %8, 255
  %idxprom = zext i32 %9 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %10 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp5 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %10, %prune_candidate.086
  br i1 %cmp5, label %if.then6, label %while.cond9

if.then6:                                         ; preds = %if.then
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %11 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !227
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %11, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  br label %if.end21

while.cond9:                                      ; preds = %if.then, %land.rhs11
  %prev_hash_entry.0 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %12, %land.rhs11 ], [ %10, %if.then ]
  %cmp10.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, null
  br i1 %cmp10.not, label %if.then18, label %land.rhs11

land.rhs11:                                       ; preds = %while.cond9
  %next12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  %12 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next12, align 8, !tbaa !227
  %cmp13.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %12, %prune_candidate.086
  br i1 %cmp13.not, label %do.end, label %while.cond9, !llvm.loop !269

if.then18:                                        ; preds = %while.cond9
  tail call void @halide_print(i8* null, i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str.2.42, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %land.rhs11, %if.then18
  %next19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 0
  %13 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next19, align 8, !tbaa !227
  %next20 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prev_hash_entry.0, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %13, %"struct.Halide::Runtime::Internal::CacheEntry"** %next20, align 8, !tbaa !227
  br label %if.end21

if.end21:                                         ; preds = %do.end, %if.then6
  %14 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp22 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %14, %prune_candidate.086
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %cmp25.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  br i1 %cmp25.not, label %if.end28, label %if.then26

if.then26:                                        ; preds = %if.end24
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %15 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent27 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %15, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent27, align 8, !tbaa !251
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %if.end24
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp29 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %16, %prune_candidate.086
  %less_recent31 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 2
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br i1 %cmp29, label %if.then30, label %if.end32

if.then30:                                        ; preds = %if.end28
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %17, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end32

if.end32:                                         ; preds = %if.then30, %if.end28
  %cmp34.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp34.not, label %if.end37, label %if.then35

if.then35:                                        ; preds = %if.end32
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %6, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent31, align 8, !tbaa !251
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %if.end32
  %tuple_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 8
  %18 = load i32, i32* %tuple_count, align 8, !tbaa !230
  %cmp3882.not = icmp eq i32 %18, 0
  br i1 %cmp3882.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.end37
  %buf = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086, i64 0, i32 11
  %19 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf, align 8, !tbaa !232
  %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %wide.trip.count = zext i32 %18 to i64
  br label %for.body

for.cond.for.cond.cleanup_crit_edge:              ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.for.cond.cleanup_crit_edge, %if.end37
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %prune_candidate.086) #17
  %20 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %prune_candidate.086 to i8*
  tail call void @halide_free(i8* null, i8* nonnull %20) #16
  %.pre92 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %.pre93 = load i64, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  br label %if.end41

for.body:                                         ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %sub89 = phi i64 [ %_ZN6Halide7Runtime8Internal18current_cache_sizeE.promoted, %for.body.lr.ph ], [ %sub, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 5
  %21 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %21, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge

for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge: ; preds = %for.body
  %sub.i.neg.0 = add i64 0, -1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 6
  %22 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %21 to i64
  %min.iters.check43 = icmp ult i32 %21, 17
  br i1 %min.iters.check43, label %for.body.i.i.preheader, label %vector.ph44

vector.ph44:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf45 = and i64 %wide.trip.count.i.i, 15
  %23 = icmp eq i64 %n.mod.vf45, 0
  %24 = select i1 %23, i64 16, i64 %n.mod.vf45
  %n.vec46 = sub nsw i64 %wide.trip.count.i.i, %24
  br label %vector.body42

vector.body42:                                    ; preds = %vector.body42, %vector.ph44
  %index47 = phi i64 [ 0, %vector.ph44 ], [ %index.next48, %vector.body42 ]
  %vec.ind51 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph44 ], [ %vec.ind.next56, %vector.body42 ]
  %vec.phi57 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi73, %vector.body42 ]
  %vec.phi58 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi74, %vector.body42 ]
  %vec.phi59 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi75, %vector.body42 ]
  %vec.phi60 = phi <4 x i64> [ zeroinitializer, %vector.ph44 ], [ %predphi76, %vector.body42 ]
  %step.add52 = add <4 x i64> %vec.ind51, <i64 4, i64 4, i64 4, i64 4>
  %step.add53 = add <4 x i64> %vec.ind51, <i64 8, i64 8, i64 8, i64 8>
  %step.add54 = add <4 x i64> %vec.ind51, <i64 12, i64 12, i64 12, i64 12>
  %25 = or i64 %index47, 4
  %26 = or i64 %index47, 8
  %27 = or i64 %index47, 12
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index47, i32 2
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %25, i32 2
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %26, i32 2
  %31 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %27, i32 2
  %32 = bitcast i32* %28 to <16 x i32>*
  %33 = bitcast i32* %29 to <16 x i32>*
  %34 = bitcast i32* %30 to <16 x i32>*
  %35 = bitcast i32* %31 to <16 x i32>*
  %wide.vec61 = load <16 x i32>, <16 x i32>* %32, align 4, !tbaa !182
  %wide.vec62 = load <16 x i32>, <16 x i32>* %33, align 4, !tbaa !182
  %wide.vec63 = load <16 x i32>, <16 x i32>* %34, align 4, !tbaa !182
  %wide.vec64 = load <16 x i32>, <16 x i32>* %35, align 4, !tbaa !182
  %strided.vec65 = shufflevector <16 x i32> %wide.vec61, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec66 = shufflevector <16 x i32> %wide.vec62, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec67 = shufflevector <16 x i32> %wide.vec63, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec68 = shufflevector <16 x i32> %wide.vec64, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %36 = icmp sgt <4 x i32> %strided.vec65, zeroinitializer
  %37 = icmp sgt <4 x i32> %strided.vec66, zeroinitializer
  %38 = icmp sgt <4 x i32> %strided.vec67, zeroinitializer
  %39 = icmp sgt <4 x i32> %strided.vec68, zeroinitializer
  %40 = zext <4 x i32> %strided.vec65 to <4 x i64>
  %41 = zext <4 x i32> %strided.vec66 to <4 x i64>
  %42 = zext <4 x i32> %strided.vec67 to <4 x i64>
  %43 = zext <4 x i32> %strided.vec68 to <4 x i64>
  %44 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind51, i32 1
  %45 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add52, i32 1
  %46 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add53, i32 1
  %47 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add54, i32 1
  %wide.masked.gather69 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %44, i32 4, <4 x i1> %36, <4 x i32> undef), !tbaa !178
  %wide.masked.gather70 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %45, i32 4, <4 x i1> %37, <4 x i32> undef), !tbaa !178
  %wide.masked.gather71 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %46, i32 4, <4 x i1> %38, <4 x i32> undef), !tbaa !178
  %wide.masked.gather72 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %47, i32 4, <4 x i1> %39, <4 x i32> undef), !tbaa !178
  %48 = add nsw <4 x i32> %wide.masked.gather69, <i32 -1, i32 -1, i32 -1, i32 -1>
  %49 = add nsw <4 x i32> %wide.masked.gather70, <i32 -1, i32 -1, i32 -1, i32 -1>
  %50 = add nsw <4 x i32> %wide.masked.gather71, <i32 -1, i32 -1, i32 -1, i32 -1>
  %51 = add nsw <4 x i32> %wide.masked.gather72, <i32 -1, i32 -1, i32 -1, i32 -1>
  %52 = sext <4 x i32> %48 to <4 x i64>
  %53 = sext <4 x i32> %49 to <4 x i64>
  %54 = sext <4 x i32> %50 to <4 x i64>
  %55 = sext <4 x i32> %51 to <4 x i64>
  %56 = mul nsw <4 x i64> %52, %40
  %57 = mul nsw <4 x i64> %53, %41
  %58 = mul nsw <4 x i64> %54, %42
  %59 = mul nsw <4 x i64> %55, %43
  %60 = select <4 x i1> %36, <4 x i64> %56, <4 x i64> zeroinitializer
  %predphi73 = add <4 x i64> %vec.phi57, %60
  %61 = select <4 x i1> %37, <4 x i64> %57, <4 x i64> zeroinitializer
  %predphi74 = add <4 x i64> %vec.phi58, %61
  %62 = select <4 x i1> %38, <4 x i64> %58, <4 x i64> zeroinitializer
  %predphi75 = add <4 x i64> %vec.phi59, %62
  %63 = select <4 x i1> %39, <4 x i64> %59, <4 x i64> zeroinitializer
  %predphi76 = add <4 x i64> %vec.phi60, %63
  %index.next48 = add i64 %index47, 16
  %vec.ind.next56 = add <4 x i64> %vec.ind51, <i64 16, i64 16, i64 16, i64 16>
  %64 = icmp eq i64 %index.next48, %n.vec46
  br i1 %64, label %middle.block40, label %vector.body42, !llvm.loop !270

middle.block40:                                   ; preds = %vector.body42
  %bin.rdx77 = add <4 x i64> %predphi74, %predphi73
  %bin.rdx78 = add <4 x i64> %predphi75, %bin.rdx77
  %bin.rdx79 = add <4 x i64> %predphi76, %bin.rdx78
  %65 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx79)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block40, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec46, %middle.block40 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %65, %middle.block40 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 2
  %66 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %66, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %66 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i.i, i32 1
  %67 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %67, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !271

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %21, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader81, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %68 = icmp eq i64 %n.mod.vf, 0
  %69 = select i1 %68, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %69
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi23 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi35, %vector.body ]
  %vec.phi24 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi36, %vector.body ]
  %vec.phi25 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi37, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add20 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add21 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %70 = or i64 %index, 4
  %71 = or i64 %index, 8
  %72 = or i64 %index, 12
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %index, i32 2
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %70, i32 2
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %71, i32 2
  %76 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %72, i32 2
  %77 = bitcast i32* %73 to <16 x i32>*
  %78 = bitcast i32* %74 to <16 x i32>*
  %79 = bitcast i32* %75 to <16 x i32>*
  %80 = bitcast i32* %76 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %77, align 4, !tbaa !182
  %wide.vec26 = load <16 x i32>, <16 x i32>* %78, align 4, !tbaa !182
  %wide.vec27 = load <16 x i32>, <16 x i32>* %79, align 4, !tbaa !182
  %wide.vec28 = load <16 x i32>, <16 x i32>* %80, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec29 = shufflevector <16 x i32> %wide.vec26, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec30 = shufflevector <16 x i32> %wide.vec27, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec31 = shufflevector <16 x i32> %wide.vec28, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %81 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %82 = icmp slt <4 x i32> %strided.vec29, zeroinitializer
  %83 = icmp slt <4 x i32> %strided.vec30, zeroinitializer
  %84 = icmp slt <4 x i32> %strided.vec31, zeroinitializer
  %85 = sext <4 x i32> %strided.vec to <4 x i64>
  %86 = sext <4 x i32> %strided.vec29 to <4 x i64>
  %87 = sext <4 x i32> %strided.vec30 to <4 x i64>
  %88 = sext <4 x i32> %strided.vec31 to <4 x i64>
  %89 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %vec.ind, i32 1
  %90 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add, i32 1
  %91 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add20, i32 1
  %92 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, <4 x i64> %step.add21, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %89, i32 4, <4 x i1> %81, <4 x i32> undef), !tbaa !178
  %wide.masked.gather32 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %90, i32 4, <4 x i1> %82, <4 x i32> undef), !tbaa !178
  %wide.masked.gather33 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %91, i32 4, <4 x i1> %83, <4 x i32> undef), !tbaa !178
  %wide.masked.gather34 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %92, i32 4, <4 x i1> %84, <4 x i32> undef), !tbaa !178
  %93 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %94 = add nsw <4 x i32> %wide.masked.gather32, <i32 -1, i32 -1, i32 -1, i32 -1>
  %95 = add nsw <4 x i32> %wide.masked.gather33, <i32 -1, i32 -1, i32 -1, i32 -1>
  %96 = add nsw <4 x i32> %wide.masked.gather34, <i32 -1, i32 -1, i32 -1, i32 -1>
  %97 = sext <4 x i32> %93 to <4 x i64>
  %98 = sext <4 x i32> %94 to <4 x i64>
  %99 = sext <4 x i32> %95 to <4 x i64>
  %100 = sext <4 x i32> %96 to <4 x i64>
  %101 = mul nsw <4 x i64> %97, %85
  %102 = mul nsw <4 x i64> %98, %86
  %103 = mul nsw <4 x i64> %99, %87
  %104 = mul nsw <4 x i64> %100, %88
  %105 = select <4 x i1> %81, <4 x i64> %101, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %105
  %106 = select <4 x i1> %82, <4 x i64> %102, <4 x i64> zeroinitializer
  %predphi35 = add <4 x i64> %vec.phi23, %106
  %107 = select <4 x i1> %83, <4 x i64> %103, <4 x i64> zeroinitializer
  %predphi36 = add <4 x i64> %vec.phi24, %107
  %108 = select <4 x i1> %84, <4 x i64> %104, <4 x i64> zeroinitializer
  %predphi37 = add <4 x i64> %vec.phi25, %108
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %109 = icmp eq i64 %index.next, %n.vec
  br i1 %109, label %middle.block, label %vector.body, !llvm.loop !272

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi35, %predphi
  %bin.rdx38 = add <4 x i64> %predphi36, %bin.rdx
  %bin.rdx39 = add <4 x i64> %predphi37, %bin.rdx38
  %110 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx39)
  br label %for.body.i13.i.preheader81

for.body.i13.i.preheader81:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %110, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader81, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader81 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader81 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 2
  %111 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %111, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %111 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %22, i64 %indvars.iv.i10.i, i32 1
  %112 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %112, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !273

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i.neg = xor i64 %index.1.i.i, -1
  %sub.i.neg.1 = add i64 %index.1.i21.i, %add8.i.i.neg
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit
  %sub.i.neg.phi = phi i64 [ %sub.i.neg.0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %sub.i.neg.1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body._ZNK15halide_buffer_t13size_in_bytesEv.exit_crit_edge ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %19, i64 %indvars.iv, i32 4, i32 1
  %113 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %113 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i.neg = mul i64 %div.i.i, %sub.i.neg.phi
  %sub = add i64 %mul.i.neg, %sub89
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.for.cond.cleanup_crit_edge, label %for.body, !llvm.loop !274

if.end41:                                         ; preds = %for.cond.cleanup, %while.body
  %114 = phi i64 [ %.pre93, %for.cond.cleanup ], [ %4, %while.body ]
  %115 = phi i64 [ %.pre92, %for.cond.cleanup ], [ %5, %while.body ]
  %cmp = icmp sgt i64 %115, %114
  %cmp1 = icmp ne %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %116 = and i1 %cmp1, %cmp
  br i1 %116, label %while.body, label %while.end42, !llvm.loop !275

while.end42:                                      ; preds = %if.end41, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_set_size(i64 %size) local_unnamed_addr #4 {
entry:
  %cmp = icmp eq i64 %size, 0
  %spec.store.select = select i1 %cmp, i64 1048576, i64 %size
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  store i64 %spec.store.select, i64* @_ZN6Halide7Runtime8Internal14max_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_lookup(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers) local_unnamed_addr #4 {
entry:
  %conv = sext i32 %size to i64
  %call = tail call i32 @_ZN6Halide7Runtime8Internal8djb_hashEPKhm(i8* %cache_key, i64 %conv) #17
  %0 = and i32 %call, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %0 to i64
  %arrayidx = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry3.0220 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx, align 8, !tbaa !10
  %cmp.not221 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0220, null
  br i1 %cmp.not221, label %for.cond75.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %cmp16215 = icmp sgt i32 %tuple_count, 0
  %1 = sext i32 %tuple_count to i64
  br i1 %cmp16215, label %while.body.us, label %while.body

while.body.us:                                    ; preds = %while.body.lr.ph, %if.end73.us
  %entry3.0222.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0.us, %if.end73.us ], [ %entry3.0220, %while.body.lr.ph ]
  %hash.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 6
  %2 = load i32, i32* %hash.us, align 8, !tbaa !253
  %cmp4.us = icmp eq i32 %2, %call
  br i1 %cmp4.us, label %land.lhs.true.us, label %if.end73.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 4
  %3 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp6.us = icmp eq i64 %3, %conv
  br i1 %cmp6.us, label %land.lhs.true7.us, label %if.end73.us

land.lhs.true7.us:                                ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 5
  %4 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call9.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %4, i8* %cache_key, i64 %conv) #17
  br i1 %call9.us, label %land.lhs.true10.us, label %if.end73.us

land.lhs.true10.us:                               ; preds = %land.lhs.true7.us
  %computed_bounds11.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 10
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11.us, align 8, !tbaa !256
  %call12.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %5) #17
  br i1 %call12.us, label %land.lhs.true13.us, label %if.end73.us

land.lhs.true13.us:                               ; preds = %land.lhs.true10.us
  %tuple_count14.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 8
  %6 = load i32, i32* %tuple_count14.us, align 8, !tbaa !230
  %cmp15.us = icmp eq i32 %6, %tuple_count
  br i1 %cmp15.us, label %for.cond.preheader.us, label %if.end73.us

for.cond.preheader.us:                            ; preds = %land.lhs.true13.us
  %buf.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 11
  br label %for.body.us

for.body.us:                                      ; preds = %for.body.us, %for.cond.preheader.us
  %indvars.iv226.us = phi i64 [ 0, %for.cond.preheader.us ], [ %indvars.iv.next227.us, %for.body.us ]
  %arrayidx18.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv226.us
  %7 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx18.us, align 8, !tbaa !10
  %8 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf.us, align 8, !tbaa !232
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %8, i64 %indvars.iv226.us, i32 6
  %9 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call21.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %7, %struct.halide_dimension_t* %9) #17
  %indvars.iv.next227.us = add nuw nsw i64 %indvars.iv226.us, 1
  %cmp16.us = icmp slt i64 %indvars.iv.next227.us, %1
  %10 = and i1 %cmp16.us, %call21.us
  br i1 %10, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !276

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call21.us, label %if.then23, label %if.end73.us

if.end73.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true13.us, %land.lhs.true10.us, %land.lhs.true7.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222.us, i64 0, i32 0
  %entry3.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0.us, null
  br i1 %cmp.not.us, label %for.cond75.preheader, label %while.body.us, !llvm.loop !277

for.cond75.preheader:                             ; preds = %if.end73, %if.end73.us, %entry
  %cmp76210 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp76210, label %for.body78.preheader, label %cleanup119

for.body78.preheader:                             ; preds = %for.cond75.preheader
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body78

while.body:                                       ; preds = %while.body.lr.ph, %if.end73
  %entry3.0222 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0, %if.end73 ], [ %entry3.0220, %while.body.lr.ph ]
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 6
  %11 = load i32, i32* %hash, align 8, !tbaa !253
  %cmp4 = icmp eq i32 %11, %call
  br i1 %cmp4, label %land.lhs.true, label %if.end73

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 4
  %12 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp6 = icmp eq i64 %12, %conv
  br i1 %cmp6, label %land.lhs.true7, label %if.end73

land.lhs.true7:                                   ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 5
  %13 = load i8*, i8** %key, align 8, !tbaa !257
  %call9 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %13, i8* %cache_key, i64 %conv) #17
  br i1 %call9, label %land.lhs.true10, label %if.end73

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %computed_bounds11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 10
  %14 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds11, align 8, !tbaa !256
  %call12 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %14) #17
  br i1 %call12, label %land.lhs.true13, label %if.end73

land.lhs.true13:                                  ; preds = %land.lhs.true10
  %tuple_count14 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 8
  %15 = load i32, i32* %tuple_count14, align 8, !tbaa !230
  %cmp15 = icmp eq i32 %15, %tuple_count
  br i1 %cmp15, label %if.then23, label %if.end73

if.then23:                                        ; preds = %land.lhs.true13, %for.cond.cleanup.us
  %.us-phi = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry3.0222.us, %for.cond.cleanup.us ], [ %entry3.0222, %land.lhs.true13 ]
  %16 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %cmp24.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %16
  br i1 %cmp24.not, label %if.end57, label %do.body

do.body:                                          ; preds = %if.then23
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 1
  %17 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp26.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %17, null
  br i1 %cmp26.not, label %if.then27, label %do.end

if.then27:                                        ; preds = %do.body
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.3.43, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then27, %do.body
  %less_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 2
  %18 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp28.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %18, null
  br i1 %cmp28.not, label %do.body33, label %if.then29

if.then29:                                        ; preds = %do.end
  %19 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %more_recent32 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %18, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %19, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent32, align 8, !tbaa !268
  %.pr = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.body41

do.body33:                                        ; preds = %do.end
  %20 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp34 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %20, %.us-phi
  br i1 %cmp34, label %do.end38, label %if.then35

if.then35:                                        ; preds = %do.body33
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.44, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end38

do.end38:                                         ; preds = %if.then35, %do.body33
  %21 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %21, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  br label %do.body41

do.body41:                                        ; preds = %do.end38, %if.then29
  %22 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pr, %if.then29 ], [ %21, %do.end38 ]
  %cmp43.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %22, null
  br i1 %cmp43.not, label %if.then44, label %do.end47

if.then44:                                        ; preds = %do.body41
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.5.45, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  br label %do.end47

do.end47:                                         ; preds = %if.then44, %do.body41
  %23 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %.pre, %if.then44 ], [ %22, %do.body41 ]
  %24 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %less_recent50 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %23, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %24, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent50, align 8, !tbaa !251
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %25 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %25, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent, align 8, !tbaa !251
  %cmp53.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %25, null
  br i1 %cmp53.not, label %if.end56, label %if.then54

if.then54:                                        ; preds = %do.end47
  %more_recent55 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %25, i64 0, i32 1
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent55, align 8, !tbaa !268
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %do.end47
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then23
  br i1 %cmp16215, label %for.body62.lr.ph, label %cleanup119.loopexit223

for.body62.lr.ph:                                 ; preds = %if.end57
  %buf66 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 11
  %wide.trip.count230 = zext i32 %tuple_count to i64
  %26 = add nsw i64 %wide.trip.count230, -1
  %xtraiter = and i64 %wide.trip.count230, 3
  %27 = icmp ult i64 %26, 3
  br i1 %27, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62.lr.ph.new

for.body62.lr.ph.new:                             ; preds = %for.body62.lr.ph
  %unroll_iter = and i64 %wide.trip.count230, 4294967292
  br label %for.body62

for.body62:                                       ; preds = %for.body62, %for.body62.lr.ph.new
  %indvars.iv228 = phi i64 [ 0, %for.body62.lr.ph.new ], [ %indvars.iv.next229.3, %for.body62 ]
  %niter = phi i64 [ %unroll_iter, %for.body62.lr.ph.new ], [ %niter.nsub.3, %for.body62 ]
  %arrayidx65 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228
  %28 = bitcast %struct.halide_buffer_t** %arrayidx65 to i8**
  %29 = load i8*, i8** %28, align 8, !tbaa !10
  %30 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %30, i64 %indvars.iv228
  %31 = bitcast %struct.halide_buffer_t* %arrayidx68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %29, i8* nonnull align 8 dereferenceable(56) %31, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229 = or i64 %indvars.iv228, 1
  %arrayidx65.1 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229
  %32 = bitcast %struct.halide_buffer_t** %arrayidx65.1 to i8**
  %33 = load i8*, i8** %32, align 8, !tbaa !10
  %34 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %34, i64 %indvars.iv.next229
  %35 = bitcast %struct.halide_buffer_t* %arrayidx68.1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %33, i8* nonnull align 8 dereferenceable(56) %35, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.1 = or i64 %indvars.iv228, 2
  %arrayidx65.2 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.1
  %36 = bitcast %struct.halide_buffer_t** %arrayidx65.2 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !10
  %38 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.2 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %38, i64 %indvars.iv.next229.1
  %39 = bitcast %struct.halide_buffer_t* %arrayidx68.2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %37, i8* nonnull align 8 dereferenceable(56) %39, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.2 = or i64 %indvars.iv228, 3
  %arrayidx65.3 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv.next229.2
  %40 = bitcast %struct.halide_buffer_t** %arrayidx65.3 to i8**
  %41 = load i8*, i8** %40, align 8, !tbaa !10
  %42 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.3 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %42, i64 %indvars.iv.next229.2
  %43 = bitcast %struct.halide_buffer_t* %arrayidx68.3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %41, i8* nonnull align 8 dereferenceable(56) %43, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.3 = add nuw nsw i64 %indvars.iv228, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %cleanup119.loopexit223.loopexit.unr-lcssa, label %for.body62, !llvm.loop !278

if.end73:                                         ; preds = %land.lhs.true13, %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0222, i64 0, i32 0
  %entry3.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry3.0, null
  br i1 %cmp.not, label %for.cond75.preheader, label %while.body, !llvm.loop !277

for.body78:                                       ; preds = %for.inc114, %for.body78.preheader
  %indvars.iv = phi i64 [ 0, %for.body78.preheader ], [ %indvars.iv.next, %for.inc114 ]
  %arrayidx81 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %44 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx81, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 5
  %45 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %45, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body78
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 6
  %46 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %45 to i64
  %min.iters.check53 = icmp ult i32 %45, 17
  br i1 %min.iters.check53, label %for.body.i.i.preheader, label %vector.ph54

vector.ph54:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf55 = and i64 %wide.trip.count.i.i, 15
  %47 = icmp eq i64 %n.mod.vf55, 0
  %48 = select i1 %47, i64 16, i64 %n.mod.vf55
  %n.vec56 = sub nsw i64 %wide.trip.count.i.i, %48
  br label %vector.body52

vector.body52:                                    ; preds = %vector.body52, %vector.ph54
  %index57 = phi i64 [ 0, %vector.ph54 ], [ %index.next58, %vector.body52 ]
  %vec.ind61 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph54 ], [ %vec.ind.next66, %vector.body52 ]
  %vec.phi67 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi83, %vector.body52 ]
  %vec.phi68 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi84, %vector.body52 ]
  %vec.phi69 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi85, %vector.body52 ]
  %vec.phi70 = phi <4 x i64> [ zeroinitializer, %vector.ph54 ], [ %predphi86, %vector.body52 ]
  %step.add62 = add <4 x i64> %vec.ind61, <i64 4, i64 4, i64 4, i64 4>
  %step.add63 = add <4 x i64> %vec.ind61, <i64 8, i64 8, i64 8, i64 8>
  %step.add64 = add <4 x i64> %vec.ind61, <i64 12, i64 12, i64 12, i64 12>
  %49 = or i64 %index57, 4
  %50 = or i64 %index57, 8
  %51 = or i64 %index57, 12
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index57, i32 2
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %49, i32 2
  %54 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %50, i32 2
  %55 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %51, i32 2
  %56 = bitcast i32* %52 to <16 x i32>*
  %57 = bitcast i32* %53 to <16 x i32>*
  %58 = bitcast i32* %54 to <16 x i32>*
  %59 = bitcast i32* %55 to <16 x i32>*
  %wide.vec71 = load <16 x i32>, <16 x i32>* %56, align 4, !tbaa !182
  %wide.vec72 = load <16 x i32>, <16 x i32>* %57, align 4, !tbaa !182
  %wide.vec73 = load <16 x i32>, <16 x i32>* %58, align 4, !tbaa !182
  %wide.vec74 = load <16 x i32>, <16 x i32>* %59, align 4, !tbaa !182
  %strided.vec75 = shufflevector <16 x i32> %wide.vec71, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec76 = shufflevector <16 x i32> %wide.vec72, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec77 = shufflevector <16 x i32> %wide.vec73, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec78 = shufflevector <16 x i32> %wide.vec74, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %60 = icmp sgt <4 x i32> %strided.vec75, zeroinitializer
  %61 = icmp sgt <4 x i32> %strided.vec76, zeroinitializer
  %62 = icmp sgt <4 x i32> %strided.vec77, zeroinitializer
  %63 = icmp sgt <4 x i32> %strided.vec78, zeroinitializer
  %64 = zext <4 x i32> %strided.vec75 to <4 x i64>
  %65 = zext <4 x i32> %strided.vec76 to <4 x i64>
  %66 = zext <4 x i32> %strided.vec77 to <4 x i64>
  %67 = zext <4 x i32> %strided.vec78 to <4 x i64>
  %68 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind61, i32 1
  %69 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add62, i32 1
  %70 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add63, i32 1
  %71 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add64, i32 1
  %wide.masked.gather79 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %68, i32 4, <4 x i1> %60, <4 x i32> undef), !tbaa !178
  %wide.masked.gather80 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %69, i32 4, <4 x i1> %61, <4 x i32> undef), !tbaa !178
  %wide.masked.gather81 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %70, i32 4, <4 x i1> %62, <4 x i32> undef), !tbaa !178
  %wide.masked.gather82 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %71, i32 4, <4 x i1> %63, <4 x i32> undef), !tbaa !178
  %72 = add nsw <4 x i32> %wide.masked.gather79, <i32 -1, i32 -1, i32 -1, i32 -1>
  %73 = add nsw <4 x i32> %wide.masked.gather80, <i32 -1, i32 -1, i32 -1, i32 -1>
  %74 = add nsw <4 x i32> %wide.masked.gather81, <i32 -1, i32 -1, i32 -1, i32 -1>
  %75 = add nsw <4 x i32> %wide.masked.gather82, <i32 -1, i32 -1, i32 -1, i32 -1>
  %76 = sext <4 x i32> %72 to <4 x i64>
  %77 = sext <4 x i32> %73 to <4 x i64>
  %78 = sext <4 x i32> %74 to <4 x i64>
  %79 = sext <4 x i32> %75 to <4 x i64>
  %80 = mul nsw <4 x i64> %76, %64
  %81 = mul nsw <4 x i64> %77, %65
  %82 = mul nsw <4 x i64> %78, %66
  %83 = mul nsw <4 x i64> %79, %67
  %84 = select <4 x i1> %60, <4 x i64> %80, <4 x i64> zeroinitializer
  %predphi83 = add <4 x i64> %vec.phi67, %84
  %85 = select <4 x i1> %61, <4 x i64> %81, <4 x i64> zeroinitializer
  %predphi84 = add <4 x i64> %vec.phi68, %85
  %86 = select <4 x i1> %62, <4 x i64> %82, <4 x i64> zeroinitializer
  %predphi85 = add <4 x i64> %vec.phi69, %86
  %87 = select <4 x i1> %63, <4 x i64> %83, <4 x i64> zeroinitializer
  %predphi86 = add <4 x i64> %vec.phi70, %87
  %index.next58 = add i64 %index57, 16
  %vec.ind.next66 = add <4 x i64> %vec.ind61, <i64 16, i64 16, i64 16, i64 16>
  %88 = icmp eq i64 %index.next58, %n.vec56
  br i1 %88, label %middle.block50, label %vector.body52, !llvm.loop !279

middle.block50:                                   ; preds = %vector.body52
  %bin.rdx87 = add <4 x i64> %predphi84, %predphi83
  %bin.rdx88 = add <4 x i64> %predphi85, %bin.rdx87
  %bin.rdx89 = add <4 x i64> %predphi86, %bin.rdx88
  %89 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx89)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block50, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec56, %middle.block50 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %89, %middle.block50 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 2
  %90 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %90, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %90 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i.i, i32 1
  %91 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %91, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !280

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %45, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader91, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %92 = icmp eq i64 %n.mod.vf, 0
  %93 = select i1 %92, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %93
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi33 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi45, %vector.body ]
  %vec.phi34 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi46, %vector.body ]
  %vec.phi35 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi47, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add30 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add31 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %94 = or i64 %index, 4
  %95 = or i64 %index, 8
  %96 = or i64 %index, 12
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %index, i32 2
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %94, i32 2
  %99 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %95, i32 2
  %100 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %96, i32 2
  %101 = bitcast i32* %97 to <16 x i32>*
  %102 = bitcast i32* %98 to <16 x i32>*
  %103 = bitcast i32* %99 to <16 x i32>*
  %104 = bitcast i32* %100 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %101, align 4, !tbaa !182
  %wide.vec36 = load <16 x i32>, <16 x i32>* %102, align 4, !tbaa !182
  %wide.vec37 = load <16 x i32>, <16 x i32>* %103, align 4, !tbaa !182
  %wide.vec38 = load <16 x i32>, <16 x i32>* %104, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec39 = shufflevector <16 x i32> %wide.vec36, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec40 = shufflevector <16 x i32> %wide.vec37, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec41 = shufflevector <16 x i32> %wide.vec38, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %105 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %106 = icmp slt <4 x i32> %strided.vec39, zeroinitializer
  %107 = icmp slt <4 x i32> %strided.vec40, zeroinitializer
  %108 = icmp slt <4 x i32> %strided.vec41, zeroinitializer
  %109 = sext <4 x i32> %strided.vec to <4 x i64>
  %110 = sext <4 x i32> %strided.vec39 to <4 x i64>
  %111 = sext <4 x i32> %strided.vec40 to <4 x i64>
  %112 = sext <4 x i32> %strided.vec41 to <4 x i64>
  %113 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %vec.ind, i32 1
  %114 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add, i32 1
  %115 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add30, i32 1
  %116 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, <4 x i64> %step.add31, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %113, i32 4, <4 x i1> %105, <4 x i32> undef), !tbaa !178
  %wide.masked.gather42 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %114, i32 4, <4 x i1> %106, <4 x i32> undef), !tbaa !178
  %wide.masked.gather43 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %115, i32 4, <4 x i1> %107, <4 x i32> undef), !tbaa !178
  %wide.masked.gather44 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %116, i32 4, <4 x i1> %108, <4 x i32> undef), !tbaa !178
  %117 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %118 = add nsw <4 x i32> %wide.masked.gather42, <i32 -1, i32 -1, i32 -1, i32 -1>
  %119 = add nsw <4 x i32> %wide.masked.gather43, <i32 -1, i32 -1, i32 -1, i32 -1>
  %120 = add nsw <4 x i32> %wide.masked.gather44, <i32 -1, i32 -1, i32 -1, i32 -1>
  %121 = sext <4 x i32> %117 to <4 x i64>
  %122 = sext <4 x i32> %118 to <4 x i64>
  %123 = sext <4 x i32> %119 to <4 x i64>
  %124 = sext <4 x i32> %120 to <4 x i64>
  %125 = mul nsw <4 x i64> %121, %109
  %126 = mul nsw <4 x i64> %122, %110
  %127 = mul nsw <4 x i64> %123, %111
  %128 = mul nsw <4 x i64> %124, %112
  %129 = select <4 x i1> %105, <4 x i64> %125, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %129
  %130 = select <4 x i1> %106, <4 x i64> %126, <4 x i64> zeroinitializer
  %predphi45 = add <4 x i64> %vec.phi33, %130
  %131 = select <4 x i1> %107, <4 x i64> %127, <4 x i64> zeroinitializer
  %predphi46 = add <4 x i64> %vec.phi34, %131
  %132 = select <4 x i1> %108, <4 x i64> %128, <4 x i64> zeroinitializer
  %predphi47 = add <4 x i64> %vec.phi35, %132
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %133 = icmp eq i64 %index.next, %n.vec
  br i1 %133, label %middle.block, label %vector.body, !llvm.loop !281

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi45, %predphi
  %bin.rdx48 = add <4 x i64> %predphi46, %bin.rdx
  %bin.rdx49 = add <4 x i64> %predphi47, %bin.rdx48
  %134 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx49)
  br label %for.body.i13.i.preheader91

for.body.i13.i.preheader91:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %134, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader91, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader91 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader91 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 2
  %135 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %135, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %135 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %46, i64 %indvars.iv.i10.i, i32 1
  %136 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %136, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !282

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body78
  %add8.i27.i = phi i64 [ 1, %for.body78 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body78 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 4, i32 1
  %137 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %137 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add84 = add i64 %mul.i, 64
  %call85 = tail call i8* @halide_malloc(i8* %user_context, i64 %add84) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %44, i64 0, i32 2
  store i8* %call85, i8** %host, align 8, !tbaa !172
  %cmp87 = icmp eq i8* %call85, null
  br i1 %cmp87, label %for.cond89.preheader, label %for.inc114

for.cond89.preheader:                             ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %cmp90208.not = icmp eq i64 %indvars.iv, 0
  br i1 %cmp90208.not, label %cleanup119, label %for.body92

for.body92:                                       ; preds = %for.cond89.preheader, %for.body92
  %indvars.iv224 = phi i64 [ %indvars.iv.next225, %for.body92 ], [ %indvars.iv, %for.cond89.preheader ]
  %sub = add nuw nsw i64 %indvars.iv224, 4294967295
  %138 = and i64 %sub, 4294967295
  %arrayidx94 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %138
  %139 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host95 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %139, i64 0, i32 2
  %140 = load i8*, i8** %host95, align 8, !tbaa !172
  %call96 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %140) #17
  %141 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call96 to i8*
  tail call void @halide_free(i8* %user_context, i8* %141) #16
  %142 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx94, align 8, !tbaa !10
  %host100 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %142, i64 0, i32 2
  store i8* null, i8** %host100, align 8, !tbaa !172
  %143 = icmp sgt i64 %indvars.iv224, 1
  %indvars.iv.next225 = add nsw i64 %indvars.iv224, -1
  br i1 %143, label %for.body92, label %cleanup119, !llvm.loop !283

for.inc114:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %add.ptr = getelementptr inbounds i8, i8* %call85, i64 64
  store i8* %add.ptr, i8** %host, align 8, !tbaa !172
  %call108 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* nonnull %add.ptr) #17
  %hash109 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 1
  store i32 %call, i32* %hash109, align 8, !tbaa !284
  %entry110 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call108, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry110, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %cleanup119, label %for.body78, !llvm.loop !287

cleanup119.loopexit223.loopexit.unr-lcssa:        ; preds = %for.body62, %for.body62.lr.ph
  %indvars.iv228.unr = phi i64 [ 0, %for.body62.lr.ph ], [ %indvars.iv.next229.3, %for.body62 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %cleanup119.loopexit223, label %for.body62.epil

for.body62.epil:                                  ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil
  %indvars.iv228.epil = phi i64 [ %indvars.iv.next229.epil, %for.body62.epil ], [ %indvars.iv228.unr, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %for.body62.epil ], [ %xtraiter, %cleanup119.loopexit223.loopexit.unr-lcssa ]
  %arrayidx65.epil = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv228.epil
  %144 = bitcast %struct.halide_buffer_t** %arrayidx65.epil to i8**
  %145 = load i8*, i8** %144, align 8, !tbaa !10
  %146 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf66, align 8, !tbaa !232
  %arrayidx68.epil = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %146, i64 %indvars.iv228.epil
  %147 = bitcast %struct.halide_buffer_t* %arrayidx68.epil to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(56) %145, i8* nonnull align 8 dereferenceable(56) %147, i64 56, i1 false), !tbaa.struct !263
  %indvars.iv.next229.epil = add nuw nsw i64 %indvars.iv228.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %cleanup119.loopexit223, label %for.body62.epil, !llvm.loop !288

cleanup119.loopexit223:                           ; preds = %cleanup119.loopexit223.loopexit.unr-lcssa, %for.body62.epil, %if.end57
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %.us-phi, i64 0, i32 7
  %148 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %add = add i32 %148, %tuple_count
  store i32 %add, i32* %in_use_count, align 4, !tbaa !254
  br label %cleanup119

cleanup119:                                       ; preds = %for.inc114, %for.body92, %cleanup119.loopexit223, %for.cond89.preheader, %for.cond75.preheader
  %retval.6 = phi i32 [ 1, %for.cond75.preheader ], [ 0, %cleanup119.loopexit223 ], [ -1, %for.cond89.preheader ], [ -1, %for.body92 ], [ 1, %for.inc114 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 %retval.6
}

; Function Attrs: nounwind
define weak i32 @halide_memoization_cache_store(i8* %user_context, i8* %cache_key, i32 %size, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  %0 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, align 8, !tbaa !10
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %0, i64 0, i32 2
  %1 = load i8*, i8** %host, align 8, !tbaa !172
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %1) #17
  %hash = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 1
  %2 = load i32, i32* %hash, align 8, !tbaa !284
  %3 = and i32 %2, 255
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %idxprom = zext i32 %3 to i64
  %arrayidx7 = getelementptr inbounds [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 %idxprom
  %entry6.0228 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %cmp.not229 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0228, null
  br i1 %cmp.not229, label %for.cond61.preheader, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %conv10 = sext i32 %size to i64
  %cmp22221 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp22221, label %while.body.us.preheader, label %while.body

while.body.us.preheader:                          ; preds = %while.body.lr.ph
  %4 = zext i32 %tuple_count to i64
  br label %while.body.us

while.body.us:                                    ; preds = %if.end59.us, %while.body.us.preheader
  %entry6.0230.us = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0.us, %if.end59.us ], [ %entry6.0228, %while.body.us.preheader ]
  %hash8.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 6
  %5 = load i32, i32* %hash8.us, align 8, !tbaa !253
  %cmp9.us = icmp eq i32 %5, %2
  br i1 %cmp9.us, label %land.lhs.true.us, label %if.end59.us

land.lhs.true.us:                                 ; preds = %while.body.us
  %key_size.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 4
  %6 = load i64, i64* %key_size.us, align 8, !tbaa !252
  %cmp11.us = icmp eq i64 %6, %conv10
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end59.us

land.lhs.true12.us:                               ; preds = %land.lhs.true.us
  %key.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 5
  %7 = load i8*, i8** %key.us, align 8, !tbaa !257
  %call14.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %7, i8* %cache_key, i64 %conv10) #17
  br i1 %call14.us, label %land.lhs.true15.us, label %if.end59.us

land.lhs.true15.us:                               ; preds = %land.lhs.true12.us
  %computed_bounds16.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 10
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16.us, align 8, !tbaa !256
  %call17.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %8) #17
  br i1 %call17.us, label %land.lhs.true18.us, label %if.end59.us

land.lhs.true18.us:                               ; preds = %land.lhs.true15.us
  %tuple_count19.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 8
  %9 = load i32, i32* %tuple_count19.us, align 8, !tbaa !230
  %cmp20.us = icmp eq i32 %9, %tuple_count
  br i1 %cmp20.us, label %for.body.lr.ph.us, label %if.end59.us

for.cond.cleanup.us:                              ; preds = %for.body.us
  br i1 %call30.us, label %do.body.us, label %if.end59.us

do.body.us:                                       ; preds = %for.cond.cleanup.us
  %10 = and i8 %spec.select.us, 1
  %tobool41.not.us = icmp eq i8 %10, 0
  br i1 %tobool41.not.us, label %if.then42.us, label %for.body48.us.preheader

for.body48.us.preheader:                          ; preds = %if.then42.us, %do.body.us
  br label %for.body48.us

if.then42.us:                                     ; preds = %do.body.us
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.9.46, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %for.body48.us.preheader

if.end59.us:                                      ; preds = %for.cond.cleanup.us, %land.lhs.true18.us, %land.lhs.true15.us, %land.lhs.true12.us, %land.lhs.true.us, %while.body.us
  %next.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 0
  %entry6.0.us = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next.us, align 8, !tbaa !10
  %cmp.not.us = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0.us, null
  br i1 %cmp.not.us, label %for.cond61.preheader, label %while.body.us, !llvm.loop !289

for.body48.us:                                    ; preds = %for.body48.us.preheader, %for.body48.us
  %indvars.iv244 = phi i64 [ %indvars.iv.next245, %for.body48.us ], [ 0, %for.body48.us.preheader ]
  %arrayidx50.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv244
  %11 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx50.us, align 8, !tbaa !10
  %host51.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %11, i64 0, i32 2
  %12 = load i8*, i8** %host51.us, align 8, !tbaa !172
  %call52.us = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %12) #17
  %entry53.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call52.us, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry53.us, align 8, !tbaa !286
  %indvars.iv.next245 = add nuw nsw i64 %indvars.iv244, 1
  %exitcond247.not = icmp eq i64 %indvars.iv.next245, %4
  br i1 %exitcond247.not, label %cleanup132, label %for.body48.us, !llvm.loop !290

for.body.us:                                      ; preds = %for.body.lr.ph.us, %for.body.us
  %13 = phi %struct.halide_buffer_t* [ %.pre, %for.body.lr.ph.us ], [ %16, %for.body.us ]
  %indvars.iv242 = phi i64 [ 0, %for.body.lr.ph.us ], [ %indvars.iv.next243, %for.body.us ]
  %no_host_pointers_equal.0222.us = phi i8 [ 1, %for.body.lr.ph.us ], [ %spec.select.us, %for.body.us ]
  %arrayidx24.us = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv242
  %14 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx24.us, align 8, !tbaa !10
  %dim.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %13, i64 %indvars.iv242, i32 6
  %15 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.us, align 8, !tbaa !176
  %call30.us = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %14, %struct.halide_dimension_t* %15) #17
  %16 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  %host35.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %16, i64 %indvars.iv242, i32 2
  %17 = load i8*, i8** %host35.us, align 8, !tbaa !172
  %host36.us = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %14, i64 0, i32 2
  %18 = load i8*, i8** %host36.us, align 8, !tbaa !172
  %cmp37.us = icmp eq i8* %17, %18
  %spec.select.us = select i1 %cmp37.us, i8 0, i8 %no_host_pointers_equal.0222.us
  %indvars.iv.next243 = add nuw nsw i64 %indvars.iv242, 1
  %cmp22.us = icmp ult i64 %indvars.iv.next243, %4
  %19 = and i1 %cmp22.us, %call30.us
  br i1 %19, label %for.body.us, label %for.cond.cleanup.us, !llvm.loop !291

for.body.lr.ph.us:                                ; preds = %land.lhs.true18.us
  %buf27.us = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230.us, i64 0, i32 11
  %.pre = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %buf27.us, align 8, !tbaa !232
  br label %for.body.us

for.cond61.preheader:                             ; preds = %if.end59, %if.end59.us, %entry
  %cmp62218 = icmp sgt i32 %tuple_count, 0
  br i1 %cmp62218, label %for.body64.preheader, label %for.cond.cleanup63

for.body64.preheader:                             ; preds = %for.cond61.preheader
  %wide.trip.count240 = zext i32 %tuple_count to i64
  br label %for.body64

while.body:                                       ; preds = %while.body.lr.ph, %if.end59
  %entry6.0230 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %entry6.0, %if.end59 ], [ %entry6.0228, %while.body.lr.ph ]
  %hash8 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 6
  %20 = load i32, i32* %hash8, align 8, !tbaa !253
  %cmp9 = icmp eq i32 %20, %2
  br i1 %cmp9, label %land.lhs.true, label %if.end59

land.lhs.true:                                    ; preds = %while.body
  %key_size = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 4
  %21 = load i64, i64* %key_size, align 8, !tbaa !252
  %cmp11 = icmp eq i64 %21, %conv10
  br i1 %cmp11, label %land.lhs.true12, label %if.end59

land.lhs.true12:                                  ; preds = %land.lhs.true
  %key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 5
  %22 = load i8*, i8** %key, align 8, !tbaa !257
  %call14 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10keys_equalEPKhS3_m(i8* %22, i8* %cache_key, i64 %conv10) #17
  br i1 %call14, label %land.lhs.true15, label %if.end59

land.lhs.true15:                                  ; preds = %land.lhs.true12
  %computed_bounds16 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 10
  %23 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %computed_bounds16, align 8, !tbaa !256
  %call17 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal16buffer_has_shapeEPK15halide_buffer_tPK18halide_dimension_t(%struct.halide_buffer_t* %computed_bounds, %struct.halide_dimension_t* %23) #17
  br i1 %call17, label %land.lhs.true18, label %if.end59

land.lhs.true18:                                  ; preds = %land.lhs.true15
  %tuple_count19 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 8
  %24 = load i32, i32* %tuple_count19, align 8, !tbaa !230
  %cmp20 = icmp eq i32 %24, %tuple_count
  br i1 %cmp20, label %cleanup132, label %if.end59

if.end59:                                         ; preds = %land.lhs.true18, %land.lhs.true15, %land.lhs.true12, %land.lhs.true, %while.body
  %next = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0230, i64 0, i32 0
  %entry6.0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %entry6.0, null
  br i1 %cmp.not, label %for.cond61.preheader, label %while.body, !llvm.loop !289

for.cond.cleanup63:                               ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.cond61.preheader
  %added_size.0.lcssa = phi i64 [ 0, %for.cond61.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %25 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %add73 = add i64 %25, %added_size.0.lcssa
  store i64 %add73, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  tail call void @_ZN6Halide7Runtime8Internal11prune_cacheEv() #17
  %call74 = tail call i8* @halide_malloc(i8* null, i64 96) #16
  %tobool75.not = icmp eq i8* %call74, null
  br i1 %tobool75.not, label %if.then83, label %if.then76

for.body64:                                       ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %for.body64.preheader
  %indvars.iv238 = phi i64 [ 0, %for.body64.preheader ], [ %indvars.iv.next239, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %added_size.0219 = phi i64 [ 0, %for.body64.preheader ], [ %add, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ]
  %arrayidx67 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv238
  %26 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx67, align 8, !tbaa !10
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 5
  %27 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %27, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %for.body64
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 6
  %28 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %27 to i64
  %min.iters.check39 = icmp ult i32 %27, 17
  br i1 %min.iters.check39, label %for.body.i.i.preheader, label %vector.ph40

vector.ph40:                                      ; preds = %for.body.lr.ph.i.i
  %n.mod.vf41 = and i64 %wide.trip.count.i.i, 15
  %29 = icmp eq i64 %n.mod.vf41, 0
  %30 = select i1 %29, i64 16, i64 %n.mod.vf41
  %n.vec42 = sub nsw i64 %wide.trip.count.i.i, %30
  br label %vector.body38

vector.body38:                                    ; preds = %vector.body38, %vector.ph40
  %index43 = phi i64 [ 0, %vector.ph40 ], [ %index.next44, %vector.body38 ]
  %vec.ind47 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph40 ], [ %vec.ind.next52, %vector.body38 ]
  %vec.phi53 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi69, %vector.body38 ]
  %vec.phi54 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi70, %vector.body38 ]
  %vec.phi55 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi71, %vector.body38 ]
  %vec.phi56 = phi <4 x i64> [ zeroinitializer, %vector.ph40 ], [ %predphi72, %vector.body38 ]
  %step.add48 = add <4 x i64> %vec.ind47, <i64 4, i64 4, i64 4, i64 4>
  %step.add49 = add <4 x i64> %vec.ind47, <i64 8, i64 8, i64 8, i64 8>
  %step.add50 = add <4 x i64> %vec.ind47, <i64 12, i64 12, i64 12, i64 12>
  %31 = or i64 %index43, 4
  %32 = or i64 %index43, 8
  %33 = or i64 %index43, 12
  %34 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index43, i32 2
  %35 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %31, i32 2
  %36 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %32, i32 2
  %37 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %33, i32 2
  %38 = bitcast i32* %34 to <16 x i32>*
  %39 = bitcast i32* %35 to <16 x i32>*
  %40 = bitcast i32* %36 to <16 x i32>*
  %41 = bitcast i32* %37 to <16 x i32>*
  %wide.vec57 = load <16 x i32>, <16 x i32>* %38, align 4, !tbaa !182
  %wide.vec58 = load <16 x i32>, <16 x i32>* %39, align 4, !tbaa !182
  %wide.vec59 = load <16 x i32>, <16 x i32>* %40, align 4, !tbaa !182
  %wide.vec60 = load <16 x i32>, <16 x i32>* %41, align 4, !tbaa !182
  %strided.vec61 = shufflevector <16 x i32> %wide.vec57, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec62 = shufflevector <16 x i32> %wide.vec58, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec63 = shufflevector <16 x i32> %wide.vec59, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec64 = shufflevector <16 x i32> %wide.vec60, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %42 = icmp sgt <4 x i32> %strided.vec61, zeroinitializer
  %43 = icmp sgt <4 x i32> %strided.vec62, zeroinitializer
  %44 = icmp sgt <4 x i32> %strided.vec63, zeroinitializer
  %45 = icmp sgt <4 x i32> %strided.vec64, zeroinitializer
  %46 = zext <4 x i32> %strided.vec61 to <4 x i64>
  %47 = zext <4 x i32> %strided.vec62 to <4 x i64>
  %48 = zext <4 x i32> %strided.vec63 to <4 x i64>
  %49 = zext <4 x i32> %strided.vec64 to <4 x i64>
  %50 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind47, i32 1
  %51 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add48, i32 1
  %52 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add49, i32 1
  %53 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add50, i32 1
  %wide.masked.gather65 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %50, i32 4, <4 x i1> %42, <4 x i32> undef), !tbaa !178
  %wide.masked.gather66 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %51, i32 4, <4 x i1> %43, <4 x i32> undef), !tbaa !178
  %wide.masked.gather67 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %52, i32 4, <4 x i1> %44, <4 x i32> undef), !tbaa !178
  %wide.masked.gather68 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %53, i32 4, <4 x i1> %45, <4 x i32> undef), !tbaa !178
  %54 = add nsw <4 x i32> %wide.masked.gather65, <i32 -1, i32 -1, i32 -1, i32 -1>
  %55 = add nsw <4 x i32> %wide.masked.gather66, <i32 -1, i32 -1, i32 -1, i32 -1>
  %56 = add nsw <4 x i32> %wide.masked.gather67, <i32 -1, i32 -1, i32 -1, i32 -1>
  %57 = add nsw <4 x i32> %wide.masked.gather68, <i32 -1, i32 -1, i32 -1, i32 -1>
  %58 = sext <4 x i32> %54 to <4 x i64>
  %59 = sext <4 x i32> %55 to <4 x i64>
  %60 = sext <4 x i32> %56 to <4 x i64>
  %61 = sext <4 x i32> %57 to <4 x i64>
  %62 = mul nsw <4 x i64> %58, %46
  %63 = mul nsw <4 x i64> %59, %47
  %64 = mul nsw <4 x i64> %60, %48
  %65 = mul nsw <4 x i64> %61, %49
  %66 = select <4 x i1> %42, <4 x i64> %62, <4 x i64> zeroinitializer
  %predphi69 = add <4 x i64> %vec.phi53, %66
  %67 = select <4 x i1> %43, <4 x i64> %63, <4 x i64> zeroinitializer
  %predphi70 = add <4 x i64> %vec.phi54, %67
  %68 = select <4 x i1> %44, <4 x i64> %64, <4 x i64> zeroinitializer
  %predphi71 = add <4 x i64> %vec.phi55, %68
  %69 = select <4 x i1> %45, <4 x i64> %65, <4 x i64> zeroinitializer
  %predphi72 = add <4 x i64> %vec.phi56, %69
  %index.next44 = add i64 %index43, 16
  %vec.ind.next52 = add <4 x i64> %vec.ind47, <i64 16, i64 16, i64 16, i64 16>
  %70 = icmp eq i64 %index.next44, %n.vec42
  br i1 %70, label %middle.block36, label %vector.body38, !llvm.loop !292

middle.block36:                                   ; preds = %vector.body38
  %bin.rdx73 = add <4 x i64> %predphi70, %predphi69
  %bin.rdx74 = add <4 x i64> %predphi71, %bin.rdx73
  %bin.rdx75 = add <4 x i64> %predphi72, %bin.rdx74
  %71 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx75)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block36, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec42, %middle.block36 ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %71, %middle.block36 ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 2
  %72 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %72, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %72 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i.i, i32 1
  %73 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %73, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !293

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check = icmp ult i32 %27, 17
  br i1 %min.iters.check, label %for.body.i13.i.preheader77, label %vector.ph

vector.ph:                                        ; preds = %for.body.i13.i.preheader
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %74 = icmp eq i64 %n.mod.vf, 0
  %75 = select i1 %74, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %75
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi19 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi31, %vector.body ]
  %vec.phi20 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi32, %vector.body ]
  %vec.phi21 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi33, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add16 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add17 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %76 = or i64 %index, 4
  %77 = or i64 %index, 8
  %78 = or i64 %index, 12
  %79 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %index, i32 2
  %80 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %76, i32 2
  %81 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %77, i32 2
  %82 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %78, i32 2
  %83 = bitcast i32* %79 to <16 x i32>*
  %84 = bitcast i32* %80 to <16 x i32>*
  %85 = bitcast i32* %81 to <16 x i32>*
  %86 = bitcast i32* %82 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %83, align 4, !tbaa !182
  %wide.vec22 = load <16 x i32>, <16 x i32>* %84, align 4, !tbaa !182
  %wide.vec23 = load <16 x i32>, <16 x i32>* %85, align 4, !tbaa !182
  %wide.vec24 = load <16 x i32>, <16 x i32>* %86, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec25 = shufflevector <16 x i32> %wide.vec22, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec26 = shufflevector <16 x i32> %wide.vec23, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec27 = shufflevector <16 x i32> %wide.vec24, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %87 = icmp slt <4 x i32> %strided.vec, zeroinitializer
  %88 = icmp slt <4 x i32> %strided.vec25, zeroinitializer
  %89 = icmp slt <4 x i32> %strided.vec26, zeroinitializer
  %90 = icmp slt <4 x i32> %strided.vec27, zeroinitializer
  %91 = sext <4 x i32> %strided.vec to <4 x i64>
  %92 = sext <4 x i32> %strided.vec25 to <4 x i64>
  %93 = sext <4 x i32> %strided.vec26 to <4 x i64>
  %94 = sext <4 x i32> %strided.vec27 to <4 x i64>
  %95 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %vec.ind, i32 1
  %96 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add, i32 1
  %97 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add16, i32 1
  %98 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, <4 x i64> %step.add17, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %95, i32 4, <4 x i1> %87, <4 x i32> undef), !tbaa !178
  %wide.masked.gather28 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %96, i32 4, <4 x i1> %88, <4 x i32> undef), !tbaa !178
  %wide.masked.gather29 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %97, i32 4, <4 x i1> %89, <4 x i32> undef), !tbaa !178
  %wide.masked.gather30 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %98, i32 4, <4 x i1> %90, <4 x i32> undef), !tbaa !178
  %99 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %100 = add nsw <4 x i32> %wide.masked.gather28, <i32 -1, i32 -1, i32 -1, i32 -1>
  %101 = add nsw <4 x i32> %wide.masked.gather29, <i32 -1, i32 -1, i32 -1, i32 -1>
  %102 = add nsw <4 x i32> %wide.masked.gather30, <i32 -1, i32 -1, i32 -1, i32 -1>
  %103 = sext <4 x i32> %99 to <4 x i64>
  %104 = sext <4 x i32> %100 to <4 x i64>
  %105 = sext <4 x i32> %101 to <4 x i64>
  %106 = sext <4 x i32> %102 to <4 x i64>
  %107 = mul nsw <4 x i64> %103, %91
  %108 = mul nsw <4 x i64> %104, %92
  %109 = mul nsw <4 x i64> %105, %93
  %110 = mul nsw <4 x i64> %106, %94
  %111 = select <4 x i1> %87, <4 x i64> %107, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %111
  %112 = select <4 x i1> %88, <4 x i64> %108, <4 x i64> zeroinitializer
  %predphi31 = add <4 x i64> %vec.phi19, %112
  %113 = select <4 x i1> %89, <4 x i64> %109, <4 x i64> zeroinitializer
  %predphi32 = add <4 x i64> %vec.phi20, %113
  %114 = select <4 x i1> %90, <4 x i64> %110, <4 x i64> zeroinitializer
  %predphi33 = add <4 x i64> %vec.phi21, %114
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %115 = icmp eq i64 %index.next, %n.vec
  br i1 %115, label %middle.block, label %vector.body, !llvm.loop !294

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi31, %predphi
  %bin.rdx34 = add <4 x i64> %predphi32, %bin.rdx
  %bin.rdx35 = add <4 x i64> %predphi33, %bin.rdx34
  %116 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx35)
  br label %for.body.i13.i.preheader77

for.body.i13.i.preheader77:                       ; preds = %middle.block, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec, %middle.block ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %116, %middle.block ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader77, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader77 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader77 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 2
  %117 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %117, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %117 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %28, i64 %indvars.iv.i10.i, i32 1
  %118 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %118, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !295

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %for.body64
  %add8.i27.i = phi i64 [ 1, %for.body64 ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %for.body64 ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %26, i64 0, i32 4, i32 1
  %119 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %119 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %add = add i64 %mul.i, %added_size.0219
  %indvars.iv.next239 = add nuw nsw i64 %indvars.iv238, 1
  %exitcond241.not = icmp eq i64 %indvars.iv.next239, %wide.trip.count240
  br i1 %exitcond241.not, label %for.cond.cleanup63, label %for.body64, !llvm.loop !296

if.then76:                                        ; preds = %for.cond.cleanup63
  %120 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"*
  %conv77 = sext i32 %size to i64
  %call79 = tail call zeroext i1 @_ZN6Halide7Runtime8Internal10CacheEntry4initEPKhmjPK15halide_buffer_tiPPS5_by(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %120, i8* %cache_key, i64 %conv77, i32 %2, %struct.halide_buffer_t* %computed_bounds, i32 %tuple_count, %struct.halide_buffer_t** nonnull %tuple_buffers, i1 zeroext %has_eviction_key, i64 %eviction_key) #17
  br i1 %call79, label %if.end101, label %if.then83

if.then83:                                        ; preds = %if.then76, %for.cond.cleanup63
  %121 = load i64, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  %sub = sub i64 %121, %added_size.0.lcssa
  store i64 %sub, i64* @_ZN6Halide7Runtime8Internal18current_cache_sizeE, align 8, !tbaa !110
  br i1 %cmp62218, label %for.body88.preheader, label %for.cond.cleanup87

for.body88.preheader:                             ; preds = %if.then83
  %wide.trip.count = zext i32 %tuple_count to i64
  br label %for.body88

for.cond.cleanup87:                               ; preds = %for.body88, %if.then83
  br i1 %tobool75.not, label %cleanup132, label %if.then99

for.body88:                                       ; preds = %for.body88, %for.body88.preheader
  %indvars.iv = phi i64 [ 0, %for.body88.preheader ], [ %indvars.iv.next, %for.body88 ]
  %arrayidx90 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv
  %122 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx90, align 8, !tbaa !10
  %host91 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %122, i64 0, i32 2
  %123 = load i8*, i8** %host91, align 8, !tbaa !172
  %call92 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %123) #17
  %entry93 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call92, i64 0, i32 0
  store %"struct.Halide::Runtime::Internal::CacheEntry"* null, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry93, align 8, !tbaa !286
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup87, label %for.body88, !llvm.loop !297

if.then99:                                        ; preds = %for.cond.cleanup87
  tail call void @halide_free(i8* %user_context, i8* nonnull %call74) #16
  br label %cleanup132

if.end101:                                        ; preds = %if.then76
  %124 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7, align 8, !tbaa !10
  %next104 = bitcast i8* %call74 to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %124, %"struct.Halide::Runtime::Internal::CacheEntry"** %next104, align 8, !tbaa !227
  %125 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  %less_recent = getelementptr inbounds i8, i8* %call74, i64 16
  %126 = bitcast i8* %less_recent to %"struct.Halide::Runtime::Internal::CacheEntry"**
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %125, %"struct.Halide::Runtime::Internal::CacheEntry"** %126, align 8, !tbaa !251
  %cmp105.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %125, null
  br i1 %cmp105.not, label %if.end107, label %if.then106

if.then106:                                       ; preds = %if.end101
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %125, i64 0, i32 1
  %127 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent to i8**
  store i8* %call74, i8** %127, align 8, !tbaa !268
  br label %if.end107

if.end107:                                        ; preds = %if.then106, %if.end101
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE to i8**), align 8, !tbaa !10
  %128 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, align 8, !tbaa !10
  %cmp108 = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %128, null
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %if.end107
  store i8* %call74, i8** bitcast (%"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE to i8**), align 8, !tbaa !10
  br label %if.end110

if.end110:                                        ; preds = %if.then109, %if.end107
  %129 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"** %arrayidx7 to i8**
  store i8* %call74, i8** %129, align 8, !tbaa !10
  %in_use_count = getelementptr inbounds i8, i8* %call74, i64 52
  %130 = bitcast i8* %in_use_count to i32*
  store i32 %tuple_count, i32* %130, align 4, !tbaa !254
  br i1 %cmp62218, label %for.body117.preheader, label %cleanup132

for.body117.preheader:                            ; preds = %if.end110
  %wide.trip.count236 = zext i32 %tuple_count to i64
  br label %for.body117

for.body117:                                      ; preds = %for.body117, %for.body117.preheader
  %indvars.iv234 = phi i64 [ 0, %for.body117.preheader ], [ %indvars.iv.next235, %for.body117 ]
  %arrayidx119 = getelementptr inbounds %struct.halide_buffer_t*, %struct.halide_buffer_t** %tuple_buffers, i64 %indvars.iv234
  %131 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %arrayidx119, align 8, !tbaa !10
  %host120 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %131, i64 0, i32 2
  %132 = load i8*, i8** %host120, align 8, !tbaa !172
  %call121 = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %132) #17
  %133 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call121 to i8**
  store i8* %call74, i8** %133, align 8, !tbaa !286
  %indvars.iv.next235 = add nuw nsw i64 %indvars.iv234, 1
  %exitcond237.not = icmp eq i64 %indvars.iv.next235, %wide.trip.count236
  br i1 %exitcond237.not, label %cleanup132, label %for.body117, !llvm.loop !298

cleanup132:                                       ; preds = %land.lhs.true18, %for.body48.us, %for.body117, %if.end110, %if.then99, %for.cond.cleanup87
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret i32 0
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_release(i8* %user_context, i8* %host) local_unnamed_addr #4 {
entry:
  %call = tail call %"struct.Halide::Runtime::Internal::CacheBlockHeader"* @_ZN6Halide7Runtime8Internal21get_pointer_to_headerEPh(i8* %host) #17
  %entry2 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheBlockHeader", %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call, i64 0, i32 0
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %entry2, align 8, !tbaa !286
  %cmp = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CacheBlockHeader"* %call to i8*
  tail call void @halide_free(i8* %user_context, i8* %1) #16
  br label %if.end6

if.else:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  %in_use_count = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %0, i64 0, i32 7
  %2 = load i32, i32* %in_use_count, align 4, !tbaa !254
  %cmp3.not = icmp eq i32 %2, 0
  br i1 %cmp3.not, label %if.then4, label %do.end

if.then4:                                         ; preds = %if.else
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([123 x i8], [123 x i8]* @.str.12.47, i64 0, i64 0)) #16
  tail call void @abort() #16
  %.pre = load i32, i32* %in_use_count, align 4, !tbaa !254
  br label %do.end

do.end:                                           ; preds = %if.then4, %if.else
  %3 = phi i32 [ %.pre, %if.then4 ], [ %2, %if.else ]
  %dec = add i32 %3, -1
  store i32 %dec, i32* %in_use_count, align 4, !tbaa !254
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %if.end6

if.end6:                                          ; preds = %do.end, %if.then
  ret void
}

; Function Attrs: nounwind
define weak void @halide_memoization_cache_evict(i8* %user_context, i64 %eviction_key) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  br label %for.body

for.cond.cleanup:                                 ; preds = %if.end25
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal16memoization_lockE) #16
  ret void

for.body:                                         ; preds = %if.end25, %entry
  %__begin1.059 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 0, i64 0), %entry ], [ %incdec.ptr, %if.end25 ]
  %0 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, align 8, !tbaa !10
  %cmp2.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %0, null
  br i1 %cmp2.not, label %if.end25, label %while.body

while.body:                                       ; preds = %for.body, %if.end24
  %prev.058 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.1, %if.end24 ], [ %__begin1.059, %for.body ]
  %entry1.056 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %1, %if.end24 ], [ %0, %for.body ]
  %next4 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 0
  %1 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %next4, align 8, !tbaa !227
  %has_eviction_key = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 13
  %2 = load i8, i8* %has_eviction_key, align 8, !tbaa !261, !range !17
  %tobool.not = icmp eq i8 %2, 0
  br i1 %tobool.not, label %if.end24, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %eviction_key5 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 12
  %3 = load i64, i64* %eviction_key5, align 8, !tbaa !262
  %cmp6 = icmp eq i64 %3, %eviction_key
  br i1 %cmp6, label %if.then7, label %if.end24

if.then7:                                         ; preds = %land.lhs.true
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %1, %"struct.Halide::Runtime::Internal::CacheEntry"** %prev.058, align 8, !tbaa !10
  %more_recent = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 1
  %4 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent, align 8, !tbaa !268
  %cmp8.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %4, null
  %less_recent12 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056, i64 0, i32 2
  %5 = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br i1 %cmp8.not, label %if.else, label %if.then9

if.then9:                                         ; preds = %if.then7
  %less_recent11 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %4, i64 0, i32 2
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent11, align 8, !tbaa !251
  %.pre = load %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %less_recent12, align 8, !tbaa !251
  br label %if.end

if.else:                                          ; preds = %if.then7
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %5, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal18most_recently_usedE, align 8, !tbaa !10
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then9
  %6 = phi %"struct.Halide::Runtime::Internal::CacheEntry"* [ %5, %if.else ], [ %.pre, %if.then9 ]
  %cmp14.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %6, null
  %more_recent18 = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry", %"struct.Halide::Runtime::Internal::CacheEntry"* %6, i64 0, i32 1
  %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink = select i1 %cmp14.not, %"struct.Halide::Runtime::Internal::CacheEntry"** @_ZN6Halide7Runtime8Internal19least_recently_usedE, %"struct.Halide::Runtime::Internal::CacheEntry"** %more_recent18
  store %"struct.Halide::Runtime::Internal::CacheEntry"* %4, %"struct.Halide::Runtime::Internal::CacheEntry"** %_ZN6Halide7Runtime8Internal19least_recently_usedE.sink, align 8, !tbaa !10
  tail call void @_ZN6Halide7Runtime8Internal10CacheEntry7destroyEv(%"struct.Halide::Runtime::Internal::CacheEntry"* nonnull dereferenceable(96) %entry1.056) #17
  %7 = bitcast %"struct.Halide::Runtime::Internal::CacheEntry"* %entry1.056 to i8*
  tail call void @halide_free(i8* %user_context, i8* nonnull %7) #16
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %while.body
  %prev.1 = phi %"struct.Halide::Runtime::Internal::CacheEntry"** [ %prev.058, %if.end ], [ %next4, %land.lhs.true ], [ %next4, %while.body ]
  %cmp3.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"* %1, null
  br i1 %cmp3.not, label %if.end25, label %while.body, !llvm.loop !299

if.end25:                                         ; preds = %if.end24, %for.body
  %incdec.ptr = getelementptr inbounds %"struct.Halide::Runtime::Internal::CacheEntry"*, %"struct.Halide::Runtime::Internal::CacheEntry"** %__begin1.059, i64 1
  %cmp.not = icmp eq %"struct.Halide::Runtime::Internal::CacheEntry"** %incdec.ptr, getelementptr inbounds ([256 x %"struct.Halide::Runtime::Internal::CacheEntry"*], [256 x %"struct.Halide::Runtime::Internal::CacheEntry"*]* @_ZN6Halide7Runtime8Internal13cache_entriesE, i64 1, i64 0)
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body
}

; Function Attrs: nounwind
define weak i8* @halide_string_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #4 {
entry:
  %cmp.not = icmp ult i8* %dst, %end
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %tobool.not = icmp eq i8* %arg, null
  %spec.select = select i1 %tobool.not, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.50, i64 0, i64 0), i8* %arg
  br label %if.end5

if.then4:                                         ; preds = %if.end8
  store i8 0, i8* %dst.addr.023, align 1, !tbaa !14
  br label %return

if.end5:                                          ; preds = %if.end8, %if.end
  %arg.addr.124 = phi i8* [ %spec.select, %if.end ], [ %incdec.ptr9, %if.end8 ]
  %dst.addr.023 = phi i8* [ %dst, %if.end ], [ %incdec.ptr, %if.end8 ]
  %0 = load i8, i8* %arg.addr.124, align 1, !tbaa !14
  store i8 %0, i8* %dst.addr.023, align 1, !tbaa !14
  %cmp6 = icmp eq i8 %0, 0
  br i1 %cmp6, label %return, label %if.end8

if.end8:                                          ; preds = %if.end5
  %incdec.ptr = getelementptr inbounds i8, i8* %dst.addr.023, i64 1
  %incdec.ptr9 = getelementptr inbounds i8, i8* %arg.addr.124, i64 1
  %cmp3 = icmp eq i8* %incdec.ptr, %end
  br i1 %cmp3, label %if.then4, label %if.end5

return:                                           ; preds = %if.end5, %if.then4, %entry
  %retval.0 = phi i8* [ %end, %if.then4 ], [ %dst, %entry ], [ %dst.addr.023, %if.end5 ]
  ret i8* %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_uint64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %buf = alloca [32 x i8], align 1
  %0 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #11
  %arrayidx = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 31
  store i8 0, i8* %arrayidx, align 1, !tbaa !14
  %add.ptr = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i64 0, i64 30
  %cmp13 = icmp sgt i32 %min_digits, 0
  %tobool14 = icmp ne i64 %arg, 0
  %1 = or i1 %tobool14, %cmp13
  br i1 %1, label %for.body, label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %digits.0.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.body ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %digits.0.lcssa, i64 1
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #11
  ret i8* %call

for.body:                                         ; preds = %entry, %for.body
  %arg.addr.017 = phi i64 [ %div, %for.body ], [ %arg, %entry ]
  %digits.016 = phi i8* [ %incdec.ptr, %for.body ], [ %add.ptr, %entry ]
  %i.015 = phi i32 [ %inc, %for.body ], [ 0, %entry ]
  %div = udiv i64 %arg.addr.017, 10
  %mul.neg = mul i64 %div, -10
  %sub = add i64 %mul.neg, %arg.addr.017
  %2 = trunc i64 %sub to i8
  %conv = add i8 %2, 48
  store i8 %conv, i8* %digits.016, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds i8, i8* %digits.016, i64 -1
  %inc = add nuw nsw i32 %i.015, 1
  %cmp = icmp slt i32 %inc, %min_digits
  %3 = icmp ugt i64 %arg.addr.017, 9
  %4 = or i1 %3, %cmp
  br i1 %4, label %for.body, label %for.cond.cleanup, !llvm.loop !300
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_int64_to_string(i8* %dst, i8* %end, i64 %arg, i32 %min_digits) local_unnamed_addr #0 {
entry:
  %cmp = icmp slt i64 %arg, 0
  %cmp1 = icmp ult i8* %dst, %end
  %or.cond = and i1 %cmp1, %cmp
  br i1 %or.cond, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %dst, i64 1
  store i8 45, i8* %dst, align 1, !tbaa !14
  %sub = sub nsw i64 0, %arg
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %arg.addr.0 = phi i64 [ %sub, %if.then ], [ %arg, %entry ]
  %dst.addr.0 = phi i8* [ %incdec.ptr, %if.then ], [ %dst, %entry ]
  %call = tail call i8* @halide_uint64_to_string(i8* %dst.addr.0, i8* %end, i64 %arg.addr.0, i32 %min_digits) #17
  ret i8* %call
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_double_to_string(i8* %dst, i8* %end, double %arg, i32 %scientific) local_unnamed_addr #0 {
entry:
  %arg.addr = alloca double, align 8
  %bits = alloca i64, align 8
  %buf = alloca [512 x i8], align 1
  store double %arg, double* %arg.addr, align 8, !tbaa !164
  %0 = bitcast i64* %bits to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #11
  store i64 0, i64* %bits, align 8, !tbaa !110
  %1 = bitcast double* %arg.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %1, i64 8) #16
  %2 = load i64, i64* %bits, align 8, !tbaa !110
  %and = and i64 %2, 4503599627370495
  %shr = lshr i64 %2, 52
  %3 = trunc i64 %shr to i32
  %conv = and i32 %3, 2047
  %cmp = icmp eq i32 %conv, 2047
  br i1 %cmp, label %if.then, label %if.else15

if.then:                                          ; preds = %entry
  %tobool.not = icmp eq i64 %and, 0
  %tobool10.not = icmp sgt i64 %2, -1
  br i1 %tobool.not, label %if.else9, label %if.then4

if.then4:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else, label %if.then6

if.then6:                                         ; preds = %if.then4
  %call7 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.57, i64 0, i64 0)) #17
  br label %cleanup147

if.else:                                          ; preds = %if.then4
  %call8 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.58, i64 0, i64 0)) #17
  br label %cleanup147

if.else9:                                         ; preds = %if.then
  br i1 %tobool10.not, label %if.else13, label %if.then11

if.then11:                                        ; preds = %if.else9
  %call12 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.59, i64 0, i64 0)) #17
  br label %cleanup147

if.else13:                                        ; preds = %if.else9
  %call14 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.60, i64 0, i64 0)) #17
  br label %cleanup147

if.else15:                                        ; preds = %entry
  %cmp16 = icmp eq i32 %conv, 0
  %cmp17 = icmp eq i64 %and, 0
  %or.cond = and i1 %cmp17, %cmp16
  br i1 %or.cond, label %if.then18, label %if.end32

if.then18:                                        ; preds = %if.else15
  %tobool19.not = icmp eq i32 %scientific, 0
  %tobool27.not = icmp sgt i64 %2, -1
  br i1 %tobool19.not, label %if.else26, label %if.then20

if.then20:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %call23 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.61, i64 0, i64 0)) #17
  br label %cleanup147

if.else24:                                        ; preds = %if.then20
  %call25 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.62, i64 0, i64 0)) #17
  br label %cleanup147

if.else26:                                        ; preds = %if.then18
  br i1 %tobool27.not, label %if.else30, label %if.then28

if.then28:                                        ; preds = %if.else26
  %call29 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.63, i64 0, i64 0)) #17
  br label %cleanup147

if.else30:                                        ; preds = %if.else26
  %call31 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.64, i64 0, i64 0)) #17
  br label %cleanup147

if.end32:                                         ; preds = %if.else15
  %tobool33.not = icmp sgt i64 %2, -1
  br i1 %tobool33.not, label %if.end36, label %if.then34

if.then34:                                        ; preds = %if.end32
  %call35 = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9.65, i64 0, i64 0)) #17
  %4 = load double, double* %arg.addr, align 8, !tbaa !164
  %fneg = fneg double %4
  store double %fneg, double* %arg.addr, align 8, !tbaa !164
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end32
  %dst.addr.0 = phi i8* [ %call35, %if.then34 ], [ %dst, %if.end32 ]
  %tobool37.not = icmp eq i32 %scientific, 0
  br i1 %tobool37.not, label %if.else61, label %while.condthread-pre-split

while.condthread-pre-split:                       ; preds = %if.end36
  %.pr = load double, double* %arg.addr, align 8, !tbaa !164
  %cmp39276 = fcmp olt double %.pr, 1.000000e+00
  br i1 %cmp39276, label %while.body, label %while.cond40thread-pre-split

while.body:                                       ; preds = %while.condthread-pre-split, %while.body
  %exponent_base_10.0277 = phi i32 [ %dec, %while.body ], [ 0, %while.condthread-pre-split ]
  %5 = phi double [ %mul, %while.body ], [ %.pr, %while.condthread-pre-split ]
  %mul = fmul double %5, 1.000000e+01
  %dec = add nsw i32 %exponent_base_10.0277, -1
  %cmp39 = fcmp olt double %mul, 1.000000e+00
  br i1 %cmp39, label %while.body, label %while.cond.while.cond40thread-pre-split_crit_edge, !llvm.loop !301

while.cond.while.cond40thread-pre-split_crit_edge: ; preds = %while.body
  store double %mul, double* %arg.addr, align 8, !tbaa !164
  br label %while.cond40thread-pre-split

while.cond40thread-pre-split:                     ; preds = %while.cond.while.cond40thread-pre-split_crit_edge, %while.condthread-pre-split
  %.pr261 = phi double [ %mul, %while.cond.while.cond40thread-pre-split_crit_edge ], [ %.pr, %while.condthread-pre-split ]
  %exponent_base_10.0.lcssa = phi i32 [ %dec, %while.cond.while.cond40thread-pre-split_crit_edge ], [ 0, %while.condthread-pre-split ]
  %cmp41272 = fcmp ult double %.pr261, 1.000000e+01
  br i1 %cmp41272, label %while.end43, label %while.body42

while.body42:                                     ; preds = %while.cond40thread-pre-split, %while.body42
  %exponent_base_10.1273 = phi i32 [ %inc, %while.body42 ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %6 = phi double [ %div, %while.body42 ], [ %.pr261, %while.cond40thread-pre-split ]
  %div = fdiv double %6, 1.000000e+01
  %inc = add nsw i32 %exponent_base_10.1273, 1
  %cmp41 = fcmp ult double %div, 1.000000e+01
  br i1 %cmp41, label %while.cond40.while.end43_crit_edge, label %while.body42, !llvm.loop !302

while.cond40.while.end43_crit_edge:               ; preds = %while.body42
  store double %div, double* %arg.addr, align 8, !tbaa !164
  br label %while.end43

while.end43:                                      ; preds = %while.cond40.while.end43_crit_edge, %while.cond40thread-pre-split
  %.lcssa = phi double [ %div, %while.cond40.while.end43_crit_edge ], [ %.pr261, %while.cond40thread-pre-split ]
  %exponent_base_10.1.lcssa = phi i32 [ %inc, %while.cond40.while.end43_crit_edge ], [ %exponent_base_10.0.lcssa, %while.cond40thread-pre-split ]
  %mul44 = fmul double %.lcssa, 1.000000e+06
  %add = fadd double %mul44, 5.000000e-01
  %conv45 = fptoui double %add to i64
  %div46 = udiv i64 %conv45, 1000000
  %mul47.neg = mul i64 %div46, -1000000
  %sub48 = add i64 %mul47.neg, %conv45
  %call49 = call i8* @halide_int64_to_string(i8* %dst.addr.0, i8* %end, i64 %div46, i32 1) #17
  %call50 = call i8* @halide_string_to_string(i8* %call49, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call51 = call i8* @halide_int64_to_string(i8* %call50, i8* %end, i64 %sub48, i32 6) #17
  %cmp52 = icmp sgt i32 %exponent_base_10.1.lcssa, -1
  br i1 %cmp52, label %if.then53, label %if.else55

if.then53:                                        ; preds = %while.end43
  %call54 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11.67, i64 0, i64 0)) #17
  br label %if.end58

if.else55:                                        ; preds = %while.end43
  %call56 = call i8* @halide_string_to_string(i8* %call51, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.68, i64 0, i64 0)) #17
  %sub57 = sub nsw i32 0, %exponent_base_10.1.lcssa
  br label %if.end58

if.end58:                                         ; preds = %if.else55, %if.then53
  %exponent_base_10.2 = phi i32 [ %exponent_base_10.1.lcssa, %if.then53 ], [ %sub57, %if.else55 ]
  %dst.addr.1 = phi i8* [ %call54, %if.then53 ], [ %call56, %if.else55 ]
  %conv59262 = zext i32 %exponent_base_10.2 to i64
  %call60 = call i8* @halide_int64_to_string(i8* %dst.addr.1, i8* %end, i64 %conv59262, i32 2) #17
  br label %cleanup147

if.else61:                                        ; preds = %if.end36
  br i1 %cmp16, label %if.then63, label %if.end65

if.then63:                                        ; preds = %if.else61
  %call64 = call i8* @halide_double_to_string(i8* %dst.addr.0, i8* %end, double 0.000000e+00, i32 0) #17
  br label %cleanup147

if.end65:                                         ; preds = %if.else61
  %add67 = or i64 %and, 4503599627370496
  %sub69 = add nsw i32 %conv, -1075
  %cmp70 = icmp ult i32 %conv, 1075
  br i1 %cmp70, label %if.then71, label %if.end104

if.then71:                                        ; preds = %if.end65
  %cmp72 = icmp ult i32 %conv, 1023
  %sub76 = sub nuw nsw i32 1075, %conv
  %sh_prom = zext i32 %sub76 to i64
  %shr77 = lshr i64 %add67, %sh_prom
  %shl80 = shl i64 %shr77, %sh_prom
  %integer_part.0 = select i1 %cmp72, i64 0, i64 %shr77
  %sub81 = select i1 %cmp72, i64 0, i64 %shl80
  %f.0.in = sub i64 %add67, %sub81
  %f.0 = uitofp i64 %f.0.in to double
  %conv84258 = zext i32 %sub69 to i64
  %shl85 = shl i64 %conv84258, 52
  %add87 = add i64 %shl85, 4696837146684686336
  %7 = bitcast i64 %add87 to double
  %mul89 = fmul double %7, %f.0
  %add90 = fadd double %mul89, 5.000000e-01
  %conv91 = fptoui double %add90 to i64
  %conv92 = uitofp i64 %conv91 to double
  %cmp93 = fcmp oeq double %add90, %conv92
  %and95 = and i64 %conv91, 1
  %tobool96.not = icmp ne i64 %and95, 0
  %not.or.cond259 = and i1 %cmp93, %tobool96.not
  %dec98 = sext i1 %not.or.cond259 to i64
  %fractional_part.0 = add i64 %dec98, %conv91
  %cmp100 = icmp eq i64 %fractional_part.0, 1000000
  %inc102 = zext i1 %cmp100 to i64
  %spec.select = add nuw i64 %integer_part.0, %inc102
  %spec.select260 = select i1 %cmp100, i64 0, i64 %fractional_part.0
  br label %if.end104

if.end104:                                        ; preds = %if.then71, %if.end65
  %integer_part.2 = phi i64 [ %spec.select, %if.then71 ], [ %add67, %if.end65 ]
  %integer_exponent.0 = phi i32 [ 0, %if.then71 ], [ %sub69, %if.end65 ]
  %fractional_part.2 = phi i64 [ %spec.select260, %if.then71 ], [ 0, %if.end65 ]
  %8 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %8) #11
  %add.ptr = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 512
  %add.ptr105 = getelementptr inbounds [512 x i8], [512 x i8]* %buf, i64 0, i64 480
  %call108 = call i8* @halide_int64_to_string(i8* nonnull %add.ptr105, i8* nonnull %add.ptr, i64 %integer_part.2, i32 1) #17
  %cmp109267 = icmp sgt i32 %integer_exponent.0, 0
  br i1 %cmp109267, label %for.cond111.preheader.preheader, label %for.cond.cleanup

for.cond111.preheader.preheader:                  ; preds = %if.end104
  %xtraiter = and i32 %integer_exponent.0, 1
  %9 = icmp eq i32 %integer_exponent.0, 1
  br i1 %9, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader.preheader.new

for.cond111.preheader.preheader.new:              ; preds = %for.cond111.preheader.preheader
  %unroll_iter = and i32 %integer_exponent.0, -2
  br label %for.cond111.preheader

for.cond111.preheader:                            ; preds = %if.end137.1, %for.cond111.preheader.preheader.new
  %int_part_ptr.0268 = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader.new ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %niter = phi i32 [ %unroll_iter, %for.cond111.preheader.preheader.new ], [ %niter.nsub.1, %if.end137.1 ]
  %cmp113.not264 = icmp eq i8* %call108, %int_part_ptr.0268
  br i1 %cmp113.not264, label %if.end137, label %for.body115

for.cond.cleanup.loopexit.unr-lcssa:              ; preds = %if.end137.1, %for.cond111.preheader.preheader
  %int_part_ptr.1.lcssa.ph = phi i8* [ undef, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %int_part_ptr.0268.unr = phi i8* [ %add.ptr105, %for.cond111.preheader.preheader ], [ %int_part_ptr.1.1, %if.end137.1 ]
  %lcmp.mod.not = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup, label %for.cond111.preheader.epil

for.cond111.preheader.epil:                       ; preds = %for.cond.cleanup.loopexit.unr-lcssa
  %cmp113.not264.epil = icmp eq i8* %call108, %int_part_ptr.0268.unr
  br i1 %cmp113.not264.epil, label %for.cond.cleanup, label %for.body115.epil

for.body115.epil:                                 ; preds = %for.cond111.preheader.epil, %for.body115.epil
  %p.0266.pn.epil = phi i8* [ %p.0266.epil, %for.body115.epil ], [ %call108, %for.cond111.preheader.epil ]
  %carry.0265.epil = phi i32 [ %carry.1.epil, %for.body115.epil ], [ 0, %for.cond111.preheader.epil ]
  %p.0266.epil = getelementptr inbounds i8, i8* %p.0266.pn.epil, i64 -1
  %10 = load i8, i8* %p.0266.epil, align 1, !tbaa !14
  %sub117.epil = add i8 %10, -48
  %conv119.epil = sext i8 %sub117.epil to i32
  %mul120.epil = shl nsw i32 %conv119.epil, 1
  %add121.epil = or i32 %mul120.epil, %carry.0265.epil
  %11 = trunc i32 %add121.epil to i8
  %cmp124.epil = icmp sgt i8 %11, 9
  %sub127.epil = add nsw i32 %add121.epil, 246
  %carry.1.epil = zext i1 %cmp124.epil to i32
  %new_digit.0.in.epil = select i1 %cmp124.epil, i32 %sub127.epil, i32 %add121.epil
  %12 = trunc i32 %new_digit.0.in.epil to i8
  %conv133.epil = add i8 %12, 48
  store i8 %conv133.epil, i8* %p.0266.epil, align 1, !tbaa !14
  %cmp113.not.epil = icmp eq i8* %p.0266.epil, %int_part_ptr.0268.unr
  br i1 %cmp113.not.epil, label %for.cond.cleanup114.epil, label %for.body115.epil, !llvm.loop !303

for.cond.cleanup114.epil:                         ; preds = %for.body115.epil
  br i1 %cmp124.epil, label %if.then135.epil, label %for.cond.cleanup

if.then135.epil:                                  ; preds = %for.cond.cleanup114.epil
  %incdec.ptr136.epil = getelementptr inbounds i8, i8* %int_part_ptr.0268.unr, i64 -1
  store i8 49, i8* %incdec.ptr136.epil, align 1, !tbaa !14
  br label %for.cond.cleanup

for.cond.cleanup:                                 ; preds = %for.cond.cleanup.loopexit.unr-lcssa, %for.cond111.preheader.epil, %for.cond.cleanup114.epil, %if.then135.epil, %if.end104
  %int_part_ptr.0.lcssa = phi i8* [ %add.ptr105, %if.end104 ], [ %int_part_ptr.1.lcssa.ph, %for.cond.cleanup.loopexit.unr-lcssa ], [ %incdec.ptr136.epil, %if.then135.epil ], [ %int_part_ptr.0268.unr, %for.cond.cleanup114.epil ], [ %call108, %for.cond111.preheader.epil ]
  %call141 = call i8* @halide_string_to_string(i8* %dst.addr.0, i8* %end, i8* %int_part_ptr.0.lcssa) #17
  %call142 = call i8* @halide_string_to_string(i8* %call141, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #17
  %call143 = call i8* @halide_int64_to_string(i8* %call142, i8* %end, i64 %fractional_part.2, i32 6) #17
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %8) #11
  br label %cleanup147

for.cond.cleanup114:                              ; preds = %for.body115
  br i1 %cmp124, label %if.then135, label %if.end137

for.body115:                                      ; preds = %for.cond111.preheader, %for.body115
  %p.0266.pn = phi i8* [ %p.0266, %for.body115 ], [ %call108, %for.cond111.preheader ]
  %carry.0265 = phi i32 [ %carry.1, %for.body115 ], [ 0, %for.cond111.preheader ]
  %p.0266 = getelementptr inbounds i8, i8* %p.0266.pn, i64 -1
  %13 = load i8, i8* %p.0266, align 1, !tbaa !14
  %sub117 = add i8 %13, -48
  %conv119 = sext i8 %sub117 to i32
  %mul120 = shl nsw i32 %conv119, 1
  %add121 = or i32 %mul120, %carry.0265
  %14 = trunc i32 %add121 to i8
  %cmp124 = icmp sgt i8 %14, 9
  %sub127 = add nsw i32 %add121, 246
  %carry.1 = zext i1 %cmp124 to i32
  %new_digit.0.in = select i1 %cmp124, i32 %sub127, i32 %add121
  %15 = trunc i32 %new_digit.0.in to i8
  %conv133 = add i8 %15, 48
  store i8 %conv133, i8* %p.0266, align 1, !tbaa !14
  %cmp113.not = icmp eq i8* %p.0266, %int_part_ptr.0268
  br i1 %cmp113.not, label %for.cond.cleanup114, label %for.body115, !llvm.loop !303

if.then135:                                       ; preds = %for.cond.cleanup114
  %incdec.ptr136 = getelementptr inbounds i8, i8* %int_part_ptr.0268, i64 -1
  store i8 49, i8* %incdec.ptr136, align 1, !tbaa !14
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %for.cond.cleanup114, %for.cond111.preheader
  %int_part_ptr.1 = phi i8* [ %incdec.ptr136, %if.then135 ], [ %int_part_ptr.0268, %for.cond.cleanup114 ], [ %call108, %for.cond111.preheader ]
  %cmp113.not264.1 = icmp eq i8* %call108, %int_part_ptr.1
  br i1 %cmp113.not264.1, label %if.end137.1, label %for.body115.1

cleanup147:                                       ; preds = %for.cond.cleanup, %if.then63, %if.end58, %if.else30, %if.then28, %if.else24, %if.then22, %if.else13, %if.then11, %if.else, %if.then6
  %retval.1 = phi i8* [ %call7, %if.then6 ], [ %call8, %if.else ], [ %call12, %if.then11 ], [ %call14, %if.else13 ], [ %call23, %if.then22 ], [ %call25, %if.else24 ], [ %call29, %if.then28 ], [ %call31, %if.else30 ], [ %call64, %if.then63 ], [ %call60, %if.end58 ], [ %call143, %for.cond.cleanup ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #11
  ret i8* %retval.1

for.body115.1:                                    ; preds = %if.end137, %for.body115.1
  %p.0266.pn.1 = phi i8* [ %p.0266.1, %for.body115.1 ], [ %call108, %if.end137 ]
  %carry.0265.1 = phi i32 [ %carry.1.1, %for.body115.1 ], [ 0, %if.end137 ]
  %p.0266.1 = getelementptr inbounds i8, i8* %p.0266.pn.1, i64 -1
  %16 = load i8, i8* %p.0266.1, align 1, !tbaa !14
  %sub117.1 = add i8 %16, -48
  %conv119.1 = sext i8 %sub117.1 to i32
  %mul120.1 = shl nsw i32 %conv119.1, 1
  %add121.1 = or i32 %mul120.1, %carry.0265.1
  %17 = trunc i32 %add121.1 to i8
  %cmp124.1 = icmp sgt i8 %17, 9
  %sub127.1 = add nsw i32 %add121.1, 246
  %carry.1.1 = zext i1 %cmp124.1 to i32
  %new_digit.0.in.1 = select i1 %cmp124.1, i32 %sub127.1, i32 %add121.1
  %18 = trunc i32 %new_digit.0.in.1 to i8
  %conv133.1 = add i8 %18, 48
  store i8 %conv133.1, i8* %p.0266.1, align 1, !tbaa !14
  %cmp113.not.1 = icmp eq i8* %p.0266.1, %int_part_ptr.1
  br i1 %cmp113.not.1, label %for.cond.cleanup114.1, label %for.body115.1, !llvm.loop !303

for.cond.cleanup114.1:                            ; preds = %for.body115.1
  br i1 %cmp124.1, label %if.then135.1, label %if.end137.1

if.then135.1:                                     ; preds = %for.cond.cleanup114.1
  %incdec.ptr136.1 = getelementptr inbounds i8, i8* %int_part_ptr.1, i64 -1
  store i8 49, i8* %incdec.ptr136.1, align 1, !tbaa !14
  br label %if.end137.1

if.end137.1:                                      ; preds = %if.then135.1, %for.cond.cleanup114.1, %if.end137
  %int_part_ptr.1.1 = phi i8* [ %incdec.ptr136.1, %if.then135.1 ], [ %int_part_ptr.1, %for.cond.cleanup114.1 ], [ %call108, %if.end137 ]
  %niter.nsub.1 = add i32 %niter, -2
  %niter.ncmp.1 = icmp eq i32 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup.loopexit.unr-lcssa, label %for.cond111.preheader, !llvm.loop !304
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_pointer_to_string(i8* %dst, i8* %end, i8* %arg) local_unnamed_addr #0 {
entry:
  %buf = alloca [20 x i8], align 1
  %0 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %0) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(20) %0, i8 0, i64 20, i1 false)
  %add.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 18
  %1 = ptrtoint i8* %arg to i64
  %and = and i64 %1, 15
  %arrayidx = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and
  %2 = load i8, i8* %arrayidx, align 1, !tbaa !14
  %incdec.ptr = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 17
  store i8 %2, i8* %add.ptr, align 1, !tbaa !14
  %shr = lshr i64 %1, 4
  %tobool.not = icmp eq i64 %shr, 0
  br i1 %tobool.not, label %cleanup, label %for.cond

for.cond:                                         ; preds = %entry
  %and.1 = and i64 %shr, 15
  %arrayidx.1 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.1
  %3 = load i8, i8* %arrayidx.1, align 1, !tbaa !14
  %incdec.ptr.1 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 16
  store i8 %3, i8* %incdec.ptr, align 1, !tbaa !14
  %shr.1 = lshr i64 %1, 8
  %tobool.not.1 = icmp eq i64 %shr.1, 0
  br i1 %tobool.not.1, label %cleanup, label %for.cond.1

cleanup:                                          ; preds = %for.cond.14, %for.cond.13, %for.cond.12, %for.cond.11, %for.cond.10, %for.cond.9, %for.cond.8, %for.cond.7, %for.cond.6, %for.cond.5, %for.cond.4, %for.cond.3, %for.cond.2, %for.cond.1, %for.cond, %entry
  %buf_ptr.016.lcssa = phi i8* [ %add.ptr, %entry ], [ %incdec.ptr, %for.cond ], [ %incdec.ptr.1, %for.cond.1 ], [ %incdec.ptr.2, %for.cond.2 ], [ %incdec.ptr.3, %for.cond.3 ], [ %incdec.ptr.4, %for.cond.4 ], [ %incdec.ptr.5, %for.cond.5 ], [ %incdec.ptr.6, %for.cond.6 ], [ %incdec.ptr.7, %for.cond.7 ], [ %incdec.ptr.8, %for.cond.8 ], [ %incdec.ptr.9, %for.cond.9 ], [ %incdec.ptr.10, %for.cond.10 ], [ %incdec.ptr.11, %for.cond.11 ], [ %incdec.ptr.12, %for.cond.12 ], [ %incdec.ptr.13, %for.cond.13 ], [ %incdec.ptr.14, %for.cond.14 ]
  %incdec.ptr.lcssa = phi i8* [ %incdec.ptr, %entry ], [ %incdec.ptr.1, %for.cond ], [ %incdec.ptr.2, %for.cond.1 ], [ %incdec.ptr.3, %for.cond.2 ], [ %incdec.ptr.4, %for.cond.3 ], [ %incdec.ptr.5, %for.cond.4 ], [ %incdec.ptr.6, %for.cond.5 ], [ %incdec.ptr.7, %for.cond.6 ], [ %incdec.ptr.8, %for.cond.7 ], [ %incdec.ptr.9, %for.cond.8 ], [ %incdec.ptr.10, %for.cond.9 ], [ %incdec.ptr.11, %for.cond.10 ], [ %incdec.ptr.12, %for.cond.11 ], [ %incdec.ptr.13, %for.cond.12 ], [ %incdec.ptr.14, %for.cond.13 ], [ %incdec.ptr.15, %for.cond.14 ]
  %incdec.ptr1 = getelementptr inbounds i8, i8* %buf_ptr.016.lcssa, i64 -2
  store i8 120, i8* %incdec.ptr.lcssa, align 1, !tbaa !14
  store i8 48, i8* %incdec.ptr1, align 1, !tbaa !14
  %call = call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %incdec.ptr1) #17
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %0) #11
  ret i8* %call

for.cond.1:                                       ; preds = %for.cond
  %and.2 = and i64 %shr.1, 15
  %arrayidx.2 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.2
  %4 = load i8, i8* %arrayidx.2, align 1, !tbaa !14
  %incdec.ptr.2 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 15
  store i8 %4, i8* %incdec.ptr.1, align 1, !tbaa !14
  %shr.2 = lshr i64 %1, 12
  %tobool.not.2 = icmp eq i64 %shr.2, 0
  br i1 %tobool.not.2, label %cleanup, label %for.cond.2

for.cond.2:                                       ; preds = %for.cond.1
  %and.3 = and i64 %shr.2, 15
  %arrayidx.3 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.3
  %5 = load i8, i8* %arrayidx.3, align 1, !tbaa !14
  %incdec.ptr.3 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 14
  store i8 %5, i8* %incdec.ptr.2, align 1, !tbaa !14
  %shr.3 = lshr i64 %1, 16
  %tobool.not.3 = icmp eq i64 %shr.3, 0
  br i1 %tobool.not.3, label %cleanup, label %for.cond.3

for.cond.3:                                       ; preds = %for.cond.2
  %and.4 = and i64 %shr.3, 15
  %arrayidx.4 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.4
  %6 = load i8, i8* %arrayidx.4, align 1, !tbaa !14
  %incdec.ptr.4 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 13
  store i8 %6, i8* %incdec.ptr.3, align 1, !tbaa !14
  %shr.4 = lshr i64 %1, 20
  %tobool.not.4 = icmp eq i64 %shr.4, 0
  br i1 %tobool.not.4, label %cleanup, label %for.cond.4

for.cond.4:                                       ; preds = %for.cond.3
  %and.5 = and i64 %shr.4, 15
  %arrayidx.5 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.5
  %7 = load i8, i8* %arrayidx.5, align 1, !tbaa !14
  %incdec.ptr.5 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 12
  store i8 %7, i8* %incdec.ptr.4, align 1, !tbaa !14
  %shr.5 = lshr i64 %1, 24
  %tobool.not.5 = icmp eq i64 %shr.5, 0
  br i1 %tobool.not.5, label %cleanup, label %for.cond.5

for.cond.5:                                       ; preds = %for.cond.4
  %and.6 = and i64 %shr.5, 15
  %arrayidx.6 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.6
  %8 = load i8, i8* %arrayidx.6, align 1, !tbaa !14
  %incdec.ptr.6 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 11
  store i8 %8, i8* %incdec.ptr.5, align 1, !tbaa !14
  %shr.6 = lshr i64 %1, 28
  %tobool.not.6 = icmp eq i64 %shr.6, 0
  br i1 %tobool.not.6, label %cleanup, label %for.cond.6

for.cond.6:                                       ; preds = %for.cond.5
  %and.7 = and i64 %shr.6, 15
  %arrayidx.7 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.7
  %9 = load i8, i8* %arrayidx.7, align 1, !tbaa !14
  %incdec.ptr.7 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 10
  store i8 %9, i8* %incdec.ptr.6, align 1, !tbaa !14
  %shr.7 = lshr i64 %1, 32
  %tobool.not.7 = icmp eq i64 %shr.7, 0
  br i1 %tobool.not.7, label %cleanup, label %for.cond.7

for.cond.7:                                       ; preds = %for.cond.6
  %and.8 = and i64 %shr.7, 15
  %arrayidx.8 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.8
  %10 = load i8, i8* %arrayidx.8, align 1, !tbaa !14
  %incdec.ptr.8 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 9
  store i8 %10, i8* %incdec.ptr.7, align 1, !tbaa !14
  %shr.8 = lshr i64 %1, 36
  %tobool.not.8 = icmp eq i64 %shr.8, 0
  br i1 %tobool.not.8, label %cleanup, label %for.cond.8

for.cond.8:                                       ; preds = %for.cond.7
  %and.9 = and i64 %shr.8, 15
  %arrayidx.9 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.9
  %11 = load i8, i8* %arrayidx.9, align 1, !tbaa !14
  %incdec.ptr.9 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 8
  store i8 %11, i8* %incdec.ptr.8, align 1, !tbaa !14
  %shr.9 = lshr i64 %1, 40
  %tobool.not.9 = icmp eq i64 %shr.9, 0
  br i1 %tobool.not.9, label %cleanup, label %for.cond.9

for.cond.9:                                       ; preds = %for.cond.8
  %and.10 = and i64 %shr.9, 15
  %arrayidx.10 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.10
  %12 = load i8, i8* %arrayidx.10, align 1, !tbaa !14
  %incdec.ptr.10 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 7
  store i8 %12, i8* %incdec.ptr.9, align 1, !tbaa !14
  %shr.10 = lshr i64 %1, 44
  %tobool.not.10 = icmp eq i64 %shr.10, 0
  br i1 %tobool.not.10, label %cleanup, label %for.cond.10

for.cond.10:                                      ; preds = %for.cond.9
  %and.11 = and i64 %shr.10, 15
  %arrayidx.11 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.11
  %13 = load i8, i8* %arrayidx.11, align 1, !tbaa !14
  %incdec.ptr.11 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 6
  store i8 %13, i8* %incdec.ptr.10, align 1, !tbaa !14
  %shr.11 = lshr i64 %1, 48
  %tobool.not.11 = icmp eq i64 %shr.11, 0
  br i1 %tobool.not.11, label %cleanup, label %for.cond.11

for.cond.11:                                      ; preds = %for.cond.10
  %and.12 = and i64 %shr.11, 15
  %arrayidx.12 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.12
  %14 = load i8, i8* %arrayidx.12, align 1, !tbaa !14
  %incdec.ptr.12 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 5
  store i8 %14, i8* %incdec.ptr.11, align 1, !tbaa !14
  %shr.12 = lshr i64 %1, 52
  %tobool.not.12 = icmp eq i64 %shr.12, 0
  br i1 %tobool.not.12, label %cleanup, label %for.cond.12

for.cond.12:                                      ; preds = %for.cond.11
  %and.13 = and i64 %shr.12, 15
  %arrayidx.13 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.13
  %15 = load i8, i8* %arrayidx.13, align 1, !tbaa !14
  %incdec.ptr.13 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 4
  store i8 %15, i8* %incdec.ptr.12, align 1, !tbaa !14
  %shr.13 = lshr i64 %1, 56
  %tobool.not.13 = icmp eq i64 %shr.13, 0
  br i1 %tobool.not.13, label %cleanup, label %for.cond.13

for.cond.13:                                      ; preds = %for.cond.12
  %and.14 = and i64 %shr.13, 15
  %arrayidx.14 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %and.14
  %16 = load i8, i8* %arrayidx.14, align 1, !tbaa !14
  %incdec.ptr.14 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 3
  store i8 %16, i8* %incdec.ptr.13, align 1, !tbaa !14
  %shr.14 = lshr i64 %1, 60
  %tobool.not.14 = icmp eq i64 %shr.14, 0
  br i1 %tobool.not.14, label %cleanup, label %for.cond.14

for.cond.14:                                      ; preds = %for.cond.13
  %arrayidx.15 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.13.71, i64 0, i64 %shr.14
  %17 = load i8, i8* %arrayidx.15, align 1, !tbaa !14
  %incdec.ptr.15 = getelementptr inbounds [20 x i8], [20 x i8]* %buf, i64 0, i64 2
  store i8 %17, i8* %incdec.ptr.14, align 1, !tbaa !14
  br label %cleanup
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_type_to_string(i8* %dst, i8* %end, %struct.halide_type_t* %t) local_unnamed_addr #0 {
entry:
  %code = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 0
  %0 = load i8, i8* %code, align 2, !tbaa !305
  %1 = icmp ult i8 %0, 4
  br i1 %1, label %switch.lookup, label %sw.epilog

switch.lookup:                                    ; preds = %entry
  %2 = sext i8 %0 to i64
  %switch.gep = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.halide_type_to_string, i64 0, i64 %2
  %switch.load = load i8*, i8** %switch.gep, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %switch.lookup
  %code_name.0 = phi i8* [ %switch.load, %switch.lookup ], [ getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18.72, i64 0, i64 0), %entry ]
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* nonnull %code_name.0) #17
  %bits = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 1
  %3 = load i8, i8* %bits, align 1, !tbaa !136
  %conv4 = zext i8 %3 to i64
  %call5 = tail call i8* @halide_uint64_to_string(i8* %call, i8* %end, i64 %conv4, i32 1) #17
  %lanes = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %t, i64 0, i32 2
  %4 = load i16, i16* %lanes, align 2, !tbaa !306
  %cmp.not = icmp eq i16 %4, 1
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog
  %call7 = tail call i8* @halide_string_to_string(i8* %call5, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19.77, i64 0, i64 0)) #17
  %5 = load i16, i16* %lanes, align 2, !tbaa !306
  %conv9 = zext i16 %5 to i64
  %call10 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %conv9, i32 1) #17
  br label %if.end

if.end:                                           ; preds = %if.then, %sw.epilog
  %dst.addr.0 = phi i8* [ %call10, %if.then ], [ %call5, %sw.epilog ]
  ret i8* %dst.addr.0
}

; Function Attrs: nounwind mustprogress
define weak i8* @halide_buffer_to_string(i8* %dst, i8* %end, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.20.78, i64 0, i64 0)) #17
  br label %return

if.end:                                           ; preds = %entry
  %call1 = tail call i8* @halide_string_to_string(i8* %dst, i8* %end, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.21.79, i64 0, i64 0)) #17
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %call2 = tail call i8* @halide_uint64_to_string(i8* %call1, i8* %end, i64 %0, i32 1) #17
  %call3 = tail call i8* @halide_string_to_string(i8* %call2, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = bitcast %struct.halide_device_interface_t** %device_interface to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !307
  %call4 = tail call i8* @halide_pointer_to_string(i8* %call3, i8* %end, i8* %2) #17
  %call5 = tail call i8* @halide_string_to_string(i8* %call4, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %3 = load i8*, i8** %host, align 8, !tbaa !172
  %call6 = tail call i8* @halide_pointer_to_string(i8* %call5, i8* %end, i8* %3) #17
  %call7 = tail call i8* @halide_string_to_string(i8* %call6, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %flags = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %4 = load i64, i64* %flags, align 8, !tbaa !308
  %call8 = tail call i8* @halide_uint64_to_string(i8* %call7, i8* %end, i64 %4, i32 1) #17
  %call9 = tail call i8* @halide_string_to_string(i8* %call8, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %type = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4
  %call10 = tail call i8* @halide_type_to_string(i8* %call9, i8* %end, %struct.halide_type_t* nonnull %type) #17
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %5 = load i32, i32* %dimensions, align 4, !tbaa !175
  %cmp1179 = icmp sgt i32 %5, 0
  br i1 %cmp1179, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %if.end
  %dim = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.end
  %dst.addr.0.lcssa = phi i8* [ %call10, %if.end ], [ %call26, %for.body ]
  %call27 = tail call i8* @halide_string_to_string(i8* %dst.addr.0.lcssa, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #17
  br label %return

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %dst.addr.080 = phi i8* [ %call10, %for.body.lr.ph ], [ %call26, %for.body ]
  %call12 = tail call i8* @halide_string_to_string(i8* %dst.addr.080, i8* %end, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23.82, i64 0, i64 0)) #17
  %6 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %min = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %6, i64 %indvars.iv, i32 0
  %7 = load i32, i32* %min, align 4, !tbaa !181
  %conv = sext i32 %7 to i64
  %call13 = tail call i8* @halide_int64_to_string(i8* %call12, i8* %end, i64 %conv, i32 1) #17
  %call14 = tail call i8* @halide_string_to_string(i8* %call13, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %extent = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 %indvars.iv, i32 1
  %9 = load i32, i32* %extent, align 4, !tbaa !178
  %conv18 = sext i32 %9 to i64
  %call19 = tail call i8* @halide_int64_to_string(i8* %call14, i8* %end, i64 %conv18, i32 1) #17
  %call20 = tail call i8* @halide_string_to_string(i8* %call19, i8* %end, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #17
  %10 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim, align 8, !tbaa !176
  %stride = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %10, i64 %indvars.iv, i32 2
  %11 = load i32, i32* %stride, align 4, !tbaa !182
  %conv24 = sext i32 %11 to i64
  %call25 = tail call i8* @halide_int64_to_string(i8* %call20, i8* %end, i64 %conv24, i32 1) #17
  %call26 = tail call i8* @halide_string_to_string(i8* %call25, i8* %end, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.83, i64 0, i64 0)) #17
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %12 = load i32, i32* %dimensions, align 4, !tbaa !175
  %13 = sext i32 %12 to i64
  %cmp11 = icmp slt i64 %indvars.iv.next, %13
  br i1 %cmp11, label %for.body, label %for.cond.cleanup, !llvm.loop !309

return:                                           ; preds = %for.cond.cleanup, %if.then
  %retval.0 = phi i8* [ %call, %if.then ], [ %call27, %for.cond.cleanup ]
  ret i8* %retval.0
}

; Function Attrs: alwaysinline nounwind willreturn mustprogress
define weak i32 @halide_malloc_alignment() local_unnamed_addr #6 {
entry:
  ret i32 64
}

; Function Attrs: nounwind
define weak i32 @halide_reuse_device_allocations(i8* %user_context, i1 zeroext %flag) local_unnamed_addr #4 {
entry:
  %frombool = zext i1 %flag to i8
  store i8 %frombool, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15
  br i1 %flag, label %if.end5, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %p.014 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %cmp.not15 = icmp eq %struct.halide_device_allocation_pool* %p.014, null
  br i1 %cmp.not15, label %for.cond.cleanup, label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %if.then
  %err.0.lcssa = phi i32 [ 0, %if.then ], [ %spec.select, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  br label %if.end5

for.body:                                         ; preds = %if.then, %for.body
  %p.017 = phi %struct.halide_device_allocation_pool* [ %p.0, %for.body ], [ %p.014, %if.then ]
  %err.016 = phi i32 [ %spec.select, %for.body ], [ 0, %if.then ]
  %release_unused = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 0
  %0 = load i32 (i8*)*, i32 (i8*)** %release_unused, align 8, !tbaa !310
  %call = tail call i32 %0(i8* %user_context) #16
  %tobool3.not = icmp eq i32 %call, 0
  %spec.select = select i1 %tobool3.not, i32 %err.016, i32 %call
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %p.017, i64 0, i32 1
  %p.0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !10
  %cmp.not = icmp eq %struct.halide_device_allocation_pool* %p.0, null
  br i1 %cmp.not, label %for.cond.cleanup, label %for.body, !llvm.loop !312

if.end5:                                          ; preds = %for.cond.cleanup, %entry
  %err.2 = phi i32 [ 0, %entry ], [ %err.0.lcssa, %for.cond.cleanup ]
  ret i32 %err.2
}

; Function Attrs: nounwind willreturn mustprogress
define weak zeroext i1 @halide_can_reuse_device_allocations(i8* %user_context) local_unnamed_addr #2 {
entry:
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal36halide_reuse_device_allocations_flagE, align 1, !tbaa !15, !range !17
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: nounwind
define weak void @halide_register_device_allocation_pool(%struct.halide_device_allocation_pool* %pool) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  %0 = load %struct.halide_device_allocation_pool*, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  %next = getelementptr inbounds %struct.halide_device_allocation_pool, %struct.halide_device_allocation_pool* %pool, i64 0, i32 1
  store %struct.halide_device_allocation_pool* %0, %struct.halide_device_allocation_pool** %next, align 8, !tbaa !313
  store %struct.halide_device_allocation_pool* %pool, %struct.halide_device_allocation_pool** @_ZN6Halide7Runtime8Internal23device_allocation_poolsE, align 8, !tbaa !10
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal21allocation_pools_lockE) #16
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %0 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %0, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i, 0
  br i1 %cmp.i.i.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %and.i.i46 = and i64 %0, 1
  %cmp.i.i47.not = icmp eq i64 %and.i.i46, 0
  br i1 %cmp.i.i47.not, label %if.end9, label %return

if.end9:                                          ; preds = %if.end
  %cmp = icmp eq %struct.halide_device_interface_t* %1, null
  br i1 %cmp, label %return, label %if.end15

if.end15:                                         ; preds = %if.end9
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_host = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 6
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_host, align 8, !tbaa !316
  %call16 = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp17.not = icmp eq i32 %call16, 0
  br i1 %cmp17.not, label %if.end23, label %return

if.end23:                                         ; preds = %if.end15
  %4 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %and.i.i44 = and i64 %4, -3
  store i64 %and.i.i44, i64* %flags.i.i, align 8, !tbaa !308
  %call24 = tail call i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  br label %return

return:                                           ; preds = %if.end23, %if.end15, %if.end9, %if.end, %entry
  %retval.2 = phi i32 [ 0, %entry ], [ 0, %if.end23 ], [ -14, %if.end ], [ -19, %if.end9 ], [ -14, %if.end15 ]
  ret i32 %retval.2
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_release(i8* %user_context, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 5
  %1 = load i32 (i8*)*, i32 (i8*)** %device_release, align 8, !tbaa !318
  %call = tail call i32 %1(i8* %user_context) #16
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_host(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.88, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %cleanup

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end16.i.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define linkonce i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.89, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %cmp1 = icmp eq %struct.halide_device_interface_t* %device_interface, null
  br i1 %cmp1, label %if.then2, label %if.end11

if.then2:                                         ; preds = %if.end
  %device_interface5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface5, align 8, !tbaa !307
  %cmp6 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp6, label %if.then7, label %if.end11

if.then7:                                         ; preds = %if.then2
  %call8 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup

if.end11:                                         ; preds = %if.then2, %if.end
  %device_interface.addr.0 = phi %struct.halide_device_interface_t* [ %device_interface, %if.end ], [ %4, %if.then2 ]
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %5 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %5, 0
  br i1 %tobool.not, label %if.then18, label %land.lhs.true

land.lhs.true:                                    ; preds = %if.end11
  %device_interface12 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface12, align 8, !tbaa !307
  %cmp13.not = icmp eq %struct.halide_device_interface_t* %6, %device_interface.addr.0
  br i1 %cmp13.not, label %if.end27, label %if.then14

if.then14:                                        ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.9.90, i64 0, i64 0)) #16
  br label %cleanup

if.then18:                                        ; preds = %if.end11
  %call19 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* nonnull %device_interface.addr.0) #17
  %cmp20.not = icmp eq i32 %call19, 0
  br i1 %cmp20.not, label %if.end27, label %cleanup

if.end27:                                         ; preds = %if.then18, %land.lhs.true
  %flags.i.i97 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %7 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i98 = and i64 %7, 1
  %cmp.i.i99.not = icmp eq i64 %and.i.i98, 0
  br i1 %cmp.i.i99.not, label %cleanup, label %if.then29

if.then29:                                        ; preds = %if.end27
  %and.i.i96 = and i64 %7, 2
  %cmp.i.i.not = icmp eq i64 %and.i.i96, 0
  br i1 %cmp.i.i.not, label %if.else, label %cleanup

if.else:                                          ; preds = %if.then29
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface.addr.0, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %copy_to_device = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 7
  %9 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %copy_to_device, align 8, !tbaa !319
  %call44 = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %cmp45 = icmp eq i32 %call44, 0
  br i1 %cmp45, label %if.then46, label %cleanup

if.then46:                                        ; preds = %if.else
  %10 = load i64, i64* %flags.i.i97, align 8, !tbaa !308
  %and.i.i = and i64 %10, -2
  store i64 %and.i.i, i64* %flags.i.i97, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.then46, %if.else, %if.then29, %if.end27, %if.then18, %if.then14, %if.then7, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %call8, %if.then7 ], [ -42, %if.then14 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.then46 ], [ %call19, %if.then18 ], [ -15, %if.then29 ], [ -15, %if.else ], [ 0, %if.end27 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.17.91, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20.92, i64 0, i64 0)) #16
  br label %cleanup12

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 2
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_malloc, align 8, !tbaa !321
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call9, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_copy_to_device(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %call = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_sync(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16.93, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup8

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2 = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %call4 = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %cleanup8

if.end5:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_sync = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 4
  %6 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_sync, align 8, !tbaa !323
  %call6 = tail call i32 %6(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %tobool.not = icmp eq i32 %call6, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -17
  ret i32 %spec.select

cleanup8:                                         ; preds = %if.then3, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ %call4, %if.then3 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.21.96, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.end11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 3
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_free, align 8, !tbaa !324
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.22.97, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.end11:                                         ; preds = %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %12 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %12, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup12

cleanup12:                                        ; preds = %if.end11, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end11 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.23.98, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup14

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface3.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface3.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp4.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp5.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp4.not, %cmp5.not
  br i1 %or.cond, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.25.99, i64 0, i64 0)) #16
  br label %cleanup14

if.end7:                                          ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_malloc = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 8
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_malloc, align 8, !tbaa !325
  %call9 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %cmp11.not = icmp eq i32 %call9, 0
  br i1 %cmp11.not, label %cleanup14, label %if.then12

if.then12:                                        ; preds = %if.end7
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.26.100, i64 0, i64 0)) #16
  br label %cleanup14

cleanup14:                                        ; preds = %if.then12, %if.end7, %if.then6, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then6 ], [ -16, %if.then12 ], [ 0, %if.end7 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.27.101, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup18

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %if.else11, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_and_host_free = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 9
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_and_host_free, align 8, !tbaa !326
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.28.102, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -18
  ret i32 %spec.select

if.else11:                                        ; preds = %if.end
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %12 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool12.not = icmp eq i8* %12, null
  br i1 %tobool12.not, label %if.end17, label %if.then13

if.then13:                                        ; preds = %if.else11
  tail call void @halide_free(i8* %user_context, i8* nonnull %12) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end17

if.end17:                                         ; preds = %if.then13, %if.else11
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %13 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i = and i64 %13, -3
  store i64 %and.i.i, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup18

cleanup18:                                        ; preds = %if.end17, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end17 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_malloc(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.29.103, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %if.end, label %cleanup13

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit, %if.end16.i
  %dimensions.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 5
  %4 = load i32, i32* %dimensions.i.i, align 4, !tbaa !175
  %cmp19.i.i = icmp sgt i32 %4, 0
  br i1 %cmp19.i.i, label %for.body.lr.ph.i.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

for.body.lr.ph.i.i:                               ; preds = %if.end
  %dim.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 6
  %5 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i.i, align 8, !tbaa !176
  %wide.trip.count.i.i = zext i32 %4 to i64
  %min.iters.check = icmp ult i32 %4, 17
  br i1 %min.iters.check, label %for.body.i.i.preheader, label %vector.ph

vector.ph:                                        ; preds = %for.body.lr.ph.i.i
  %n.mod.vf = and i64 %wide.trip.count.i.i, 15
  %6 = icmp eq i64 %n.mod.vf, 0
  %7 = select i1 %6, i64 16, i64 %n.mod.vf
  %n.vec = sub nsw i64 %wide.trip.count.i.i, %7
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %vec.ind = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph ], [ %vec.ind.next, %vector.body ]
  %vec.phi = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi, %vector.body ]
  %vec.phi6 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi18, %vector.body ]
  %vec.phi7 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi19, %vector.body ]
  %vec.phi8 = phi <4 x i64> [ zeroinitializer, %vector.ph ], [ %predphi20, %vector.body ]
  %step.add = add <4 x i64> %vec.ind, <i64 4, i64 4, i64 4, i64 4>
  %step.add3 = add <4 x i64> %vec.ind, <i64 8, i64 8, i64 8, i64 8>
  %step.add4 = add <4 x i64> %vec.ind, <i64 12, i64 12, i64 12, i64 12>
  %8 = or i64 %index, 4
  %9 = or i64 %index, 8
  %10 = or i64 %index, 12
  %11 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index, i32 2
  %12 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %8, i32 2
  %13 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %9, i32 2
  %14 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %10, i32 2
  %15 = bitcast i32* %11 to <16 x i32>*
  %16 = bitcast i32* %12 to <16 x i32>*
  %17 = bitcast i32* %13 to <16 x i32>*
  %18 = bitcast i32* %14 to <16 x i32>*
  %wide.vec = load <16 x i32>, <16 x i32>* %15, align 4, !tbaa !182
  %wide.vec9 = load <16 x i32>, <16 x i32>* %16, align 4, !tbaa !182
  %wide.vec10 = load <16 x i32>, <16 x i32>* %17, align 4, !tbaa !182
  %wide.vec11 = load <16 x i32>, <16 x i32>* %18, align 4, !tbaa !182
  %strided.vec = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec12 = shufflevector <16 x i32> %wide.vec9, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec13 = shufflevector <16 x i32> %wide.vec10, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec14 = shufflevector <16 x i32> %wide.vec11, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %19 = icmp sgt <4 x i32> %strided.vec, zeroinitializer
  %20 = icmp sgt <4 x i32> %strided.vec12, zeroinitializer
  %21 = icmp sgt <4 x i32> %strided.vec13, zeroinitializer
  %22 = icmp sgt <4 x i32> %strided.vec14, zeroinitializer
  %23 = zext <4 x i32> %strided.vec to <4 x i64>
  %24 = zext <4 x i32> %strided.vec12 to <4 x i64>
  %25 = zext <4 x i32> %strided.vec13 to <4 x i64>
  %26 = zext <4 x i32> %strided.vec14 to <4 x i64>
  %27 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind, i32 1
  %28 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add, i32 1
  %29 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add3, i32 1
  %30 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add4, i32 1
  %wide.masked.gather = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %27, i32 4, <4 x i1> %19, <4 x i32> undef), !tbaa !178
  %wide.masked.gather15 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %28, i32 4, <4 x i1> %20, <4 x i32> undef), !tbaa !178
  %wide.masked.gather16 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %29, i32 4, <4 x i1> %21, <4 x i32> undef), !tbaa !178
  %wide.masked.gather17 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %30, i32 4, <4 x i1> %22, <4 x i32> undef), !tbaa !178
  %31 = add nsw <4 x i32> %wide.masked.gather, <i32 -1, i32 -1, i32 -1, i32 -1>
  %32 = add nsw <4 x i32> %wide.masked.gather15, <i32 -1, i32 -1, i32 -1, i32 -1>
  %33 = add nsw <4 x i32> %wide.masked.gather16, <i32 -1, i32 -1, i32 -1, i32 -1>
  %34 = add nsw <4 x i32> %wide.masked.gather17, <i32 -1, i32 -1, i32 -1, i32 -1>
  %35 = sext <4 x i32> %31 to <4 x i64>
  %36 = sext <4 x i32> %32 to <4 x i64>
  %37 = sext <4 x i32> %33 to <4 x i64>
  %38 = sext <4 x i32> %34 to <4 x i64>
  %39 = mul nsw <4 x i64> %35, %23
  %40 = mul nsw <4 x i64> %36, %24
  %41 = mul nsw <4 x i64> %37, %25
  %42 = mul nsw <4 x i64> %38, %26
  %43 = select <4 x i1> %19, <4 x i64> %39, <4 x i64> zeroinitializer
  %predphi = add <4 x i64> %vec.phi, %43
  %44 = select <4 x i1> %20, <4 x i64> %40, <4 x i64> zeroinitializer
  %predphi18 = add <4 x i64> %vec.phi6, %44
  %45 = select <4 x i1> %21, <4 x i64> %41, <4 x i64> zeroinitializer
  %predphi19 = add <4 x i64> %vec.phi7, %45
  %46 = select <4 x i1> %22, <4 x i64> %42, <4 x i64> zeroinitializer
  %predphi20 = add <4 x i64> %vec.phi8, %46
  %index.next = add i64 %index, 16
  %vec.ind.next = add <4 x i64> %vec.ind, <i64 16, i64 16, i64 16, i64 16>
  %47 = icmp eq i64 %index.next, %n.vec
  br i1 %47, label %middle.block, label %vector.body, !llvm.loop !327

middle.block:                                     ; preds = %vector.body
  %bin.rdx = add <4 x i64> %predphi18, %predphi
  %bin.rdx21 = add <4 x i64> %predphi19, %bin.rdx
  %bin.rdx22 = add <4 x i64> %predphi20, %bin.rdx21
  %48 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx22)
  br label %for.body.i.i.preheader

for.body.i.i.preheader:                           ; preds = %middle.block, %for.body.lr.ph.i.i
  %indvars.iv.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %n.vec, %middle.block ]
  %index.021.i.i.ph = phi i64 [ 0, %for.body.lr.ph.i.i ], [ %48, %middle.block ]
  br label %for.body.i.i

for.body.i.i:                                     ; preds = %for.body.i.i.preheader, %if.end.i.i
  %indvars.iv.i.i = phi i64 [ %indvars.iv.next.i.i, %if.end.i.i ], [ %indvars.iv.i.i.ph, %for.body.i.i.preheader ]
  %index.021.i.i = phi i64 [ %index.1.i.i, %if.end.i.i ], [ %index.021.i.i.ph, %for.body.i.i.preheader ]
  %stride2.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 2
  %49 = load i32, i32* %stride2.i.i, align 4, !tbaa !182
  %cmp3.i.i = icmp sgt i32 %49, 0
  br i1 %cmp3.i.i, label %if.then.i.i, label %if.end.i.i

if.then.i.i:                                      ; preds = %for.body.i.i
  %conv18.i.i = zext i32 %49 to i64
  %extent.i.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i.i, i32 1
  %50 = load i32, i32* %extent.i.i, align 4, !tbaa !178
  %sub.i.i = add nsw i32 %50, -1
  %conv7.i.i = sext i32 %sub.i.i to i64
  %mul.i.i = mul nsw i64 %conv7.i.i, %conv18.i.i
  %add.i.i = add nsw i64 %mul.i.i, %index.021.i.i
  br label %if.end.i.i

if.end.i.i:                                       ; preds = %if.then.i.i, %for.body.i.i
  %index.1.i.i = phi i64 [ %add.i.i, %if.then.i.i ], [ %index.021.i.i, %for.body.i.i ]
  %indvars.iv.next.i.i = add nuw nsw i64 %indvars.iv.i.i, 1
  %exitcond.not.i.i = icmp eq i64 %indvars.iv.next.i.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i.i, label %for.body.i13.i.preheader, label %for.body.i.i, !llvm.loop !328

for.body.i13.i.preheader:                         ; preds = %if.end.i.i
  %min.iters.check26 = icmp ult i32 %4, 17
  br i1 %min.iters.check26, label %for.body.i13.i.preheader64, label %vector.ph27

vector.ph27:                                      ; preds = %for.body.i13.i.preheader
  %n.mod.vf28 = and i64 %wide.trip.count.i.i, 15
  %51 = icmp eq i64 %n.mod.vf28, 0
  %52 = select i1 %51, i64 16, i64 %n.mod.vf28
  %n.vec29 = sub nsw i64 %wide.trip.count.i.i, %52
  br label %vector.body25

vector.body25:                                    ; preds = %vector.body25, %vector.ph27
  %index30 = phi i64 [ 0, %vector.ph27 ], [ %index.next31, %vector.body25 ]
  %vec.ind34 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %vector.ph27 ], [ %vec.ind.next39, %vector.body25 ]
  %vec.phi40 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi56, %vector.body25 ]
  %vec.phi41 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi57, %vector.body25 ]
  %vec.phi42 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi58, %vector.body25 ]
  %vec.phi43 = phi <4 x i64> [ zeroinitializer, %vector.ph27 ], [ %predphi59, %vector.body25 ]
  %step.add35 = add <4 x i64> %vec.ind34, <i64 4, i64 4, i64 4, i64 4>
  %step.add36 = add <4 x i64> %vec.ind34, <i64 8, i64 8, i64 8, i64 8>
  %step.add37 = add <4 x i64> %vec.ind34, <i64 12, i64 12, i64 12, i64 12>
  %53 = or i64 %index30, 4
  %54 = or i64 %index30, 8
  %55 = or i64 %index30, 12
  %56 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %index30, i32 2
  %57 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %53, i32 2
  %58 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %54, i32 2
  %59 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %55, i32 2
  %60 = bitcast i32* %56 to <16 x i32>*
  %61 = bitcast i32* %57 to <16 x i32>*
  %62 = bitcast i32* %58 to <16 x i32>*
  %63 = bitcast i32* %59 to <16 x i32>*
  %wide.vec44 = load <16 x i32>, <16 x i32>* %60, align 4, !tbaa !182
  %wide.vec45 = load <16 x i32>, <16 x i32>* %61, align 4, !tbaa !182
  %wide.vec46 = load <16 x i32>, <16 x i32>* %62, align 4, !tbaa !182
  %wide.vec47 = load <16 x i32>, <16 x i32>* %63, align 4, !tbaa !182
  %strided.vec48 = shufflevector <16 x i32> %wide.vec44, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec49 = shufflevector <16 x i32> %wide.vec45, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec50 = shufflevector <16 x i32> %wide.vec46, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %strided.vec51 = shufflevector <16 x i32> %wide.vec47, <16 x i32> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %64 = icmp slt <4 x i32> %strided.vec48, zeroinitializer
  %65 = icmp slt <4 x i32> %strided.vec49, zeroinitializer
  %66 = icmp slt <4 x i32> %strided.vec50, zeroinitializer
  %67 = icmp slt <4 x i32> %strided.vec51, zeroinitializer
  %68 = sext <4 x i32> %strided.vec48 to <4 x i64>
  %69 = sext <4 x i32> %strided.vec49 to <4 x i64>
  %70 = sext <4 x i32> %strided.vec50 to <4 x i64>
  %71 = sext <4 x i32> %strided.vec51 to <4 x i64>
  %72 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %vec.ind34, i32 1
  %73 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add35, i32 1
  %74 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add36, i32 1
  %75 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, <4 x i64> %step.add37, i32 1
  %wide.masked.gather52 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %72, i32 4, <4 x i1> %64, <4 x i32> undef), !tbaa !178
  %wide.masked.gather53 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %73, i32 4, <4 x i1> %65, <4 x i32> undef), !tbaa !178
  %wide.masked.gather54 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %74, i32 4, <4 x i1> %66, <4 x i32> undef), !tbaa !178
  %wide.masked.gather55 = call <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*> %75, i32 4, <4 x i1> %67, <4 x i32> undef), !tbaa !178
  %76 = add nsw <4 x i32> %wide.masked.gather52, <i32 -1, i32 -1, i32 -1, i32 -1>
  %77 = add nsw <4 x i32> %wide.masked.gather53, <i32 -1, i32 -1, i32 -1, i32 -1>
  %78 = add nsw <4 x i32> %wide.masked.gather54, <i32 -1, i32 -1, i32 -1, i32 -1>
  %79 = add nsw <4 x i32> %wide.masked.gather55, <i32 -1, i32 -1, i32 -1, i32 -1>
  %80 = sext <4 x i32> %76 to <4 x i64>
  %81 = sext <4 x i32> %77 to <4 x i64>
  %82 = sext <4 x i32> %78 to <4 x i64>
  %83 = sext <4 x i32> %79 to <4 x i64>
  %84 = mul nsw <4 x i64> %80, %68
  %85 = mul nsw <4 x i64> %81, %69
  %86 = mul nsw <4 x i64> %82, %70
  %87 = mul nsw <4 x i64> %83, %71
  %88 = select <4 x i1> %64, <4 x i64> %84, <4 x i64> zeroinitializer
  %predphi56 = add <4 x i64> %vec.phi40, %88
  %89 = select <4 x i1> %65, <4 x i64> %85, <4 x i64> zeroinitializer
  %predphi57 = add <4 x i64> %vec.phi41, %89
  %90 = select <4 x i1> %66, <4 x i64> %86, <4 x i64> zeroinitializer
  %predphi58 = add <4 x i64> %vec.phi42, %90
  %91 = select <4 x i1> %67, <4 x i64> %87, <4 x i64> zeroinitializer
  %predphi59 = add <4 x i64> %vec.phi43, %91
  %index.next31 = add i64 %index30, 16
  %vec.ind.next39 = add <4 x i64> %vec.ind34, <i64 16, i64 16, i64 16, i64 16>
  %92 = icmp eq i64 %index.next31, %n.vec29
  br i1 %92, label %middle.block23, label %vector.body25, !llvm.loop !329

middle.block23:                                   ; preds = %vector.body25
  %bin.rdx60 = add <4 x i64> %predphi57, %predphi56
  %bin.rdx61 = add <4 x i64> %predphi58, %bin.rdx60
  %bin.rdx62 = add <4 x i64> %predphi59, %bin.rdx61
  %93 = call i64 @llvm.vector.reduce.add.v4i64(<4 x i64> %bin.rdx62)
  br label %for.body.i13.i.preheader64

for.body.i13.i.preheader64:                       ; preds = %middle.block23, %for.body.i13.i.preheader
  %indvars.iv.i10.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %n.vec29, %middle.block23 ]
  %index.018.i.i.ph = phi i64 [ 0, %for.body.i13.i.preheader ], [ %93, %middle.block23 ]
  br label %for.body.i13.i

for.body.i13.i:                                   ; preds = %for.body.i13.i.preheader64, %if.end.i24.i
  %indvars.iv.i10.i = phi i64 [ %indvars.iv.next.i22.i, %if.end.i24.i ], [ %indvars.iv.i10.i.ph, %for.body.i13.i.preheader64 ]
  %index.018.i.i = phi i64 [ %index.1.i21.i, %if.end.i24.i ], [ %index.018.i.i.ph, %for.body.i13.i.preheader64 ]
  %stride2.i11.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 2
  %94 = load i32, i32* %stride2.i11.i, align 4, !tbaa !182
  %cmp3.i12.i = icmp slt i32 %94, 0
  br i1 %cmp3.i12.i, label %if.then.i20.i, label %if.end.i24.i

if.then.i20.i:                                    ; preds = %for.body.i13.i
  %conv.i14.i = sext i32 %94 to i64
  %extent.i15.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %5, i64 %indvars.iv.i10.i, i32 1
  %95 = load i32, i32* %extent.i15.i, align 4, !tbaa !178
  %sub.i16.i = add nsw i32 %95, -1
  %conv7.i17.i = sext i32 %sub.i16.i to i64
  %mul.i18.i = mul nsw i64 %conv7.i17.i, %conv.i14.i
  %add.i19.i = add nsw i64 %mul.i18.i, %index.018.i.i
  br label %if.end.i24.i

if.end.i24.i:                                     ; preds = %if.then.i20.i, %for.body.i13.i
  %index.1.i21.i = phi i64 [ %add.i19.i, %if.then.i20.i ], [ %index.018.i.i, %for.body.i13.i ]
  %indvars.iv.next.i22.i = add nuw nsw i64 %indvars.iv.i10.i, 1
  %exitcond.not.i23.i = icmp eq i64 %indvars.iv.next.i22.i, %wide.trip.count.i.i
  br i1 %exitcond.not.i23.i, label %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, label %for.body.i13.i, !llvm.loop !330

_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit: ; preds = %if.end.i24.i
  %add8.i.i = add nsw i64 %index.1.i.i, 1
  br label %_ZNK15halide_buffer_t13size_in_bytesEv.exit

_ZNK15halide_buffer_t13size_in_bytesEv.exit:      ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit, %if.end
  %add8.i27.i = phi i64 [ 1, %if.end ], [ %add8.i.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %index.0.lcssa.i9.i = phi i64 [ 0, %if.end ], [ %index.1.i21.i, %_ZNK15halide_buffer_t13size_in_bytesEv.exit.loopexit ]
  %sub.i = sub nsw i64 %add8.i27.i, %index.0.lcssa.i9.i
  %bits.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 4, i32 1
  %96 = load i8, i8* %bits.i.i, align 1, !tbaa !136
  %conv.i.i = zext i8 %96 to i64
  %add.i4.i = add nuw nsw i64 %conv.i.i, 7
  %div.i.i = lshr i64 %add.i4.i, 3
  %mul.i = mul i64 %div.i.i, %sub.i
  %call2 = tail call i8* @halide_malloc(i8* %user_context, i64 %mul.i) #16
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  store i8* %call2, i8** %host, align 8, !tbaa !172
  %cmp4 = icmp eq i8* %call2, null
  br i1 %cmp4, label %cleanup13, label %if.end6

if.end6:                                          ; preds = %_ZNK15halide_buffer_t13size_in_bytesEv.exit
  %call7 = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, %struct.halide_device_interface_t* %device_interface) #17
  %cmp8.not = icmp eq i32 %call7, 0
  br i1 %cmp8.not, label %cleanup13, label %if.then9

if.then9:                                         ; preds = %if.end6
  %97 = load i8*, i8** %host, align 8, !tbaa !172
  tail call void @halide_free(i8* %user_context, i8* %97) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %cleanup13

cleanup13:                                        ; preds = %if.then9, %if.end6, %_ZNK15halide_buffer_t13size_in_bytesEv.exit, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -1, %_ZNK15halide_buffer_t13size_in_bytesEv.exit ], [ %call7, %if.then9 ], [ 0, %if.end6 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %buf, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.30.104, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end16.i.split

if.end16.i.split:                                 ; preds = %if.end16.i
  %call11 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #17
  br label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %call12 = tail call i32 @halide_device_free(i8* %user_context, %struct.halide_buffer_t* %buf) #17
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split, %if.end16.i.split
  %phi.call = phi i32 [ %call11, %if.end16.i.split ], [ %call12, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.split ]
  %host = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 2
  %4 = load i8*, i8** %host, align 8, !tbaa !172
  %tobool.not = icmp eq i8* %4, null
  br i1 %tobool.not, label %if.end5, label %if.then2

if.then2:                                         ; preds = %if.end
  tail call void @halide_free(i8* %user_context, i8* nonnull %4) #16
  store i8* null, i8** %host, align 8, !tbaa !172
  br label %if.end5

if.end5:                                          ; preds = %if.then2, %if.end
  %flags3.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %5 = load i64, i64* %flags3.i.i, align 8, !tbaa !308
  %and.i.i18 = and i64 %5, -4
  store i64 %and.i.i18, i64* %flags3.i.i, align 8, !tbaa !308
  br label %cleanup

cleanup:                                          ; preds = %if.end5, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %phi.call, %if.end5 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle, %struct.halide_device_interface_t* %device_interface) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.31.105, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup12

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  %cmp3.not = icmp eq %struct.halide_device_interface_t* %4, %device_interface
  %or.cond = or i1 %cmp2.not, %cmp3.not
  br i1 %or.cond, label %if.end5, label %if.then4

if.then4:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32.106, i64 0, i64 0)) #16
  br label %cleanup12

if.end5:                                          ; preds = %if.end
  %device_interface1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  store %struct.halide_device_interface_t* %device_interface, %struct.halide_device_interface_t** %device_interface1, align 8, !tbaa !307
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %wrap_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 14
  %8 = load i32 (i8*, %struct.halide_buffer_t*, i64)*, i32 (i8*, %struct.halide_buffer_t*, i64)** %wrap_native, align 8, !tbaa !331
  %call8 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf, i64 %handle) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %tobool.not = icmp eq i32 %call8, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -16
  ret i32 %spec.select

cleanup12:                                        ; preds = %if.then4, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.1 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ -42, %if.then4 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.33.107, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device_interface1.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %.pre = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface1.phi.trans.insert, align 8, !tbaa !307
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi %struct.halide_device_interface_t* [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %0, %if.end16.i ]
  %cmp2.not = icmp eq %struct.halide_device_interface_t* %4, null
  br i1 %cmp2.not, label %cleanup, label %if.then3

if.then3:                                         ; preds = %if.end
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %detach_native = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %7, i64 0, i32 15
  %8 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %detach_native, align 8, !tbaa !332
  %call5 = tail call i32 %8(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  %9 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %9, i64 0, i32 1
  %10 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %10() #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %11 = load i64, i64* %device, align 8, !tbaa !174
  %cmp7 = icmp eq i64 %11, 0
  br i1 %cmp7, label %do.end, label %if.then8

if.then8:                                         ; preds = %if.then3
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([127 x i8], [127 x i8]* @.str.34.108, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then8, %if.then3
  %tobool.not = icmp eq i32 %call5, 0
  %spec.select = select i1 %tobool.not, i32 0, i32 -33
  ret i32 %spec.select

cleanup:                                          ; preds = %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_wrap_native(i8* %user_context, %struct.halide_buffer_t* %buf, i64 %handle) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %cmp.not = icmp eq i64 %0, 0
  br i1 %cmp.not, label %if.end, label %return

if.end:                                           ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 0
  %3 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %3() #16
  store i64 %handle, i64* %device, align 8, !tbaa !174
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ 0, %if.end ], [ -32, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_detach_native(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %cmp.i = icmp eq %struct.halide_buffer_t* %buf, null
  br i1 %cmp.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %entry
  %call.i = tail call i32 @halide_error_buffer_is_null(i8* %user_context, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.35, i64 0, i64 0)) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end.i:                                         ; preds = %entry
  %device_interface.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface.i, align 8, !tbaa !307
  %cmp4.not.i = icmp eq %struct.halide_device_interface_t* %0, null
  %device.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %1 = load i64, i64* %device.i, align 8, !tbaa !174
  %cmp5.not.i = icmp eq i64 %1, 0
  %cmp4.not.not.i = xor i1 %cmp4.not.i, true
  %brmerge.i = or i1 %cmp5.not.i, %cmp4.not.not.i
  br i1 %brmerge.i, label %if.end10.i, label %if.then8.i

if.then8.i:                                       ; preds = %if.end.i
  %call9.i = tail call i32 @halide_error_no_device_interface(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end10.i:                                       ; preds = %if.end.i
  %cmp5.not.not.i = xor i1 %cmp5.not.i, true
  %brmerge44.i = or i1 %cmp4.not.i, %cmp5.not.not.i
  br i1 %brmerge44.i, label %if.end16.i, label %if.then14.i

if.then14.i:                                      ; preds = %if.end10.i
  %call15.i = tail call i32 @halide_error_device_interface_no_device(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

if.end16.i:                                       ; preds = %if.end10.i
  %flags.i.i46.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 3
  %2 = load i64, i64* %flags.i.i46.i, align 8, !tbaa !308
  %3 = and i64 %2, 3
  %.not.i = icmp eq i64 %3, 3
  br i1 %.not.i, label %if.then24.i, label %if.end

if.then24.i:                                      ; preds = %if.end16.i
  %call25.i = tail call i32 @halide_error_host_and_device_dirty(i8* %user_context) #16
  br label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit: ; preds = %if.then24.i, %if.then14.i, %if.then8.i, %if.then.i
  %retval.2.i = phi i32 [ %call.i, %if.then.i ], [ %call15.i, %if.then14.i ], [ %call9.i, %if.then8.i ], [ %call25.i, %if.then24.i ]
  %cmp.not = icmp eq i32 %retval.2.i, 0
  br i1 %cmp.not, label %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, label %cleanup

_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge: ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %device.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %.pre = load i64, i64* %device.phi.trans.insert, align 8, !tbaa !174
  br label %if.end

if.end:                                           ; preds = %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge, %if.end16.i
  %4 = phi i64 [ %.pre, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit.if.end_crit_edge ], [ %1, %if.end16.i ]
  %cmp1 = icmp eq i64 %4, 0
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.end
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %5 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %5, i64 0, i32 15
  %6 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %6, i64 0, i32 1
  %7 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %7() #16
  store i64 0, i64* %device, align 8, !tbaa !174
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit
  %retval.0 = phi i32 [ 0, %if.end3 ], [ %retval.2.i, %_ZN12_GLOBAL__N_126debug_log_and_validate_bufEPvPK15halide_buffer_tPKc.exit ], [ 0, %if.end ]
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_device_and_host_free_as_destructor(i8* %user_context, i8* %obj) local_unnamed_addr #0 {
entry:
  %0 = bitcast i8* %obj to %struct.halide_buffer_t*
  %call = tail call i32 @halide_device_and_host_free(i8* %user_context, %struct.halide_buffer_t* %0) #17
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_device_host_nop_free(i8* %user_context, i8* %obj) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_default_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #2 {
entry:
  ret i32 -39
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  %c = alloca %"struct.Halide::Runtime::Internal::device_copy", align 8
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end13, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 1
  %0 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool1.not = icmp eq %struct.halide_device_interface_t* %0, null
  %cmp.not = icmp eq %struct.halide_device_interface_t* %0, %dst_device_interface
  %or.cond = or i1 %tobool1.not, %cmp.not
  br i1 %or.cond, label %land.lhs.true5, label %if.then

if.then:                                          ; preds = %land.lhs.true
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.41, i64 0, i64 0)) #16
  br label %cleanup143

land.lhs.true5:                                   ; preds = %land.lhs.true
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device, align 8, !tbaa !174
  %tobool6.not = icmp eq i64 %1, 0
  br i1 %tobool6.not, label %if.then7, label %if.end13

if.then7:                                         ; preds = %land.lhs.true5
  %call = tail call i32 @halide_device_malloc(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* nonnull %dst_device_interface) #17
  %tobool10.not = icmp eq i32 %call, 0
  br i1 %tobool10.not, label %if.end13, label %cleanup143

if.end13:                                         ; preds = %if.then7, %land.lhs.true5, %entry
  %device14 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %2 = load i64, i64* %device14, align 8, !tbaa !174
  %cmp15.not = icmp eq i64 %2, 0
  %host22.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 2
  %.pre = load i8*, i8** %host22.phi.trans.insert, align 8, !tbaa !172
  %cmp23.not = icmp eq i8* %.pre, null
  br i1 %cmp15.not, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.thread264

land.end.thread264:                               ; preds = %land.rhs
  %flags.i.i243 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %3 = load i64, i64* %flags.i.i243, align 8, !tbaa !308
  %and.i.i244 = and i64 %3, 1
  %cmp.i.i.not = icmp ne i64 %and.i.i244, 0
  br label %land.rhs26

land.end:                                         ; preds = %if.end13
  br i1 %cmp23.not, label %land.end32, label %land.end.land.rhs26_crit_edge

land.end.land.rhs26_crit_edge:                    ; preds = %land.end
  %flags.i.i247.phi.trans.insert = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 3
  %.pre1 = load i64, i64* %flags.i.i247.phi.trans.insert, align 8, !tbaa !308
  br label %land.rhs26

land.rhs26:                                       ; preds = %land.end.land.rhs26_crit_edge, %land.end.thread264
  %4 = phi i64 [ %3, %land.end.thread264 ], [ %.pre1, %land.end.land.rhs26_crit_edge ]
  %5 = phi i1 [ %cmp.i.i.not, %land.end.thread264 ], [ true, %land.end.land.rhs26_crit_edge ]
  %and.i.i248 = and i64 %4, 2
  %cmp.i.i249.not = icmp eq i64 %and.i.i248, 0
  br i1 %cmp.i.i249.not, label %land.end32, label %lor.rhs28

lor.rhs28:                                        ; preds = %land.rhs26
  %device_interface29 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %6 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface29, align 8, !tbaa !307
  %cmp30 = icmp ne %struct.halide_device_interface_t* %6, null
  br label %land.end32

land.end32:                                       ; preds = %lor.rhs28, %land.rhs26, %land.end, %land.rhs
  %cmp23.not263 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ false, %lor.rhs28 ], [ true, %land.rhs ]
  %7 = phi i1 [ true, %land.end ], [ %5, %land.rhs26 ], [ %5, %lor.rhs28 ], [ false, %land.rhs ]
  %8 = phi i1 [ true, %land.end ], [ false, %land.rhs26 ], [ %cmp30, %lor.rhs28 ], [ true, %land.rhs ]
  %host34 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 2
  %9 = load i8*, i8** %host34, align 8, !tbaa !172
  %cmp35.not = icmp eq i8* %9, null
  %cmp20.not = xor i1 %tobool.not, true
  %10 = and i1 %tobool.not, %cmp35.not
  br i1 %10, label %cleanup143, label %if.end41

if.end41:                                         ; preds = %land.end32
  %brmerge229 = or i1 %tobool.not, %7
  br i1 %brmerge229, label %if.then51, label %if.end49

if.end49:                                         ; preds = %if.end41
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %11 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %buffer_copy = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %11, i64 0, i32 10
  %12 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy, align 8, !tbaa !333
  %call48 = tail call i32 %12(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp50 = icmp eq i32 %call48, -42
  br i1 %cmp50, label %if.then51, label %if.end117

if.then51:                                        ; preds = %if.end49, %if.end41
  %brmerge231.demorgan = and i1 %cmp23.not263, %cmp35.not
  br i1 %brmerge231.demorgan, label %cleanup143, label %if.end58

if.end58:                                         ; preds = %if.then51
  %brmerge234 = or i1 %8, %cmp20.not
  br i1 %brmerge234, label %if.else, label %if.end117.thread258

if.end117.thread258:                              ; preds = %if.end58
  %13 = bitcast %"struct.Halide::Runtime::Internal::device_copy"* %c to i8*
  call void @llvm.lifetime.start.p0i8(i64 416, i8* nonnull %13) #11
  call void @_ZN6Halide7Runtime8Internal16make_buffer_copyEPK15halide_buffer_tbS4_b(%"struct.Halide::Runtime::Internal::device_copy"* nonnull sret(%"struct.Halide::Runtime::Internal::device_copy") align 8 %c, %struct.halide_buffer_t* nonnull %src, i1 zeroext true, %struct.halide_buffer_t* nonnull %dst, i1 zeroext true) #17
  call void @_ZN6Halide7Runtime8Internal11copy_memoryERKNS1_11device_copyEPv(%"struct.Halide::Runtime::Internal::device_copy"* nonnull align 8 dereferenceable(416) %c, i8* %user_context) #17
  call void @llvm.lifetime.end.p0i8(i64 416, i8* nonnull %13) #11
  br label %land.lhs.true126

if.else:                                          ; preds = %if.end58
  %brmerge237 = or i1 %7, %cmp20.not
  br i1 %brmerge237, label %if.else81, label %if.then66

if.then66:                                        ; preds = %if.else
  %device_interface69 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %14 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface69, align 8, !tbaa !307
  %impl70 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %14, i64 0, i32 15
  %15 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl70, align 8, !tbaa !314
  %buffer_copy71 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %15, i64 0, i32 10
  %16 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy71, align 8, !tbaa !333
  %call72 = tail call i32 %16(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp73 = icmp eq i32 %call72, -42
  br i1 %cmp73, label %if.then74, label %if.end117

if.then74:                                        ; preds = %if.then66
  %call75 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %tobool76.not = icmp eq i32 %call75, 0
  br i1 %tobool76.not, label %if.then77, label %cleanup143

if.then77:                                        ; preds = %if.then74
  %call78 = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #17
  br label %if.end117

if.else81:                                        ; preds = %if.else
  %brmerge239 = or i1 %7, %cmp35.not
  br i1 %brmerge239, label %if.else98, label %if.then85

if.then85:                                        ; preds = %if.else81
  %device_interface90 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %17 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface90, align 8, !tbaa !307
  %impl91 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %17, i64 0, i32 15
  %18 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl91, align 8, !tbaa !314
  %buffer_copy92 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %18, i64 0, i32 10
  %19 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy92, align 8, !tbaa !333
  %call93 = tail call i32 %19(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* null, %struct.halide_buffer_t* nonnull %dst) #16
  %cmp94 = icmp eq i32 %call93, 0
  br i1 %cmp94, label %if.then95, label %cleanup143

if.then95:                                        ; preds = %if.then85
  %flags.i.i245 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %20 = load i64, i64* %flags.i.i245, align 8, !tbaa !308
  %or.i.i246 = or i64 %20, 1
  store i64 %or.i.i246, i64* %flags.i.i245, align 8, !tbaa !308
  %call96 = tail call i32 @copy_to_device_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %dst, %struct.halide_device_interface_t* %dst_device_interface) #17
  br label %if.end117

if.else98:                                        ; preds = %if.else81
  br i1 %tobool.not, label %cleanup143, label %if.then100

if.then100:                                       ; preds = %if.else98
  %call103 = tail call i32 @_ZN6Halide7Runtime8Internal27copy_to_host_already_lockedEPvP15halide_buffer_t(i8* %user_context, %struct.halide_buffer_t* nonnull %src) #17
  %cmp104 = icmp eq i32 %call103, 0
  br i1 %cmp104, label %if.then105, label %cleanup143

if.then105:                                       ; preds = %if.then100
  %impl106 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %21 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl106, align 8, !tbaa !314
  %buffer_copy107 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %21, i64 0, i32 10
  %22 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_device_interface_t*, %struct.halide_buffer_t*)** %buffer_copy107, align 8, !tbaa !333
  %call108 = tail call i32 %22(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* nonnull %dst_device_interface, %struct.halide_buffer_t* nonnull %dst) #16
  br label %if.end117

if.end117:                                        ; preds = %if.then105, %if.then95, %if.then77, %if.then66, %if.end49
  %err.1 = phi i32 [ %call78, %if.then77 ], [ %call72, %if.then66 ], [ %call96, %if.then95 ], [ %call108, %if.then105 ], [ %call48, %if.end49 ]
  %cond = icmp eq i32 %err.1, 0
  br i1 %cond, label %land.lhs.true126, label %cleanup143

land.lhs.true126:                                 ; preds = %if.end117, %if.end117.thread258
  %cmp127.not.old = icmp eq %struct.halide_buffer_t* %dst, %src
  br i1 %cmp127.not.old, label %cleanup143, label %if.then128

if.then128:                                       ; preds = %land.lhs.true126
  %flags.i.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 3
  %23 = load i64, i64* %flags.i.i, align 8, !tbaa !308
  %or.i.i = and i64 %23, -4
  br i1 %tobool.not, label %if.else133, label %if.then130

if.then130:                                       ; preds = %if.then128
  %or.i.i242 = or i64 %or.i.i, 2
  store i64 %or.i.i242, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

if.else133:                                       ; preds = %if.then128
  %and.i.i251 = or i64 %or.i.i, 1
  store i64 %and.i.i251, i64* %flags.i.i, align 8, !tbaa !308
  br label %cleanup143

cleanup143:                                       ; preds = %if.else133, %if.then130, %land.lhs.true126, %if.end117, %if.then100, %if.else98, %if.then85, %if.then74, %if.then51, %land.end32, %if.then7, %if.then
  %retval.1 = phi i32 [ -42, %if.then ], [ %call, %if.then7 ], [ -34, %land.end32 ], [ 0, %if.then130 ], [ 0, %if.else133 ], [ 0, %land.lhs.true126 ], [ -42, %if.then51 ], [ %err.1, %if.end117 ], [ -42, %if.else98 ], [ %call103, %if.then100 ], [ %call93, %if.then85 ], [ %call75, %if.then74 ]
  ret i32 %retval.1
}

; Function Attrs: nounwind
define weak i32 @halide_buffer_copy(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %tobool.not = icmp eq %struct.halide_device_interface_t* %dst_device_interface, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %0 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %0, i64 0, i32 0
  %1 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %1() #16
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %2 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool11.not = icmp eq %struct.halide_device_interface_t* %2, null
  br i1 %tobool11.not, label %if.end16, label %if.then12

if.then12:                                        ; preds = %if.end
  %impl14 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %2, i64 0, i32 15
  %3 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl14, align 8, !tbaa !314
  %use_module15 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %3, i64 0, i32 0
  %4 = load void ()*, void ()** %use_module15, align 8, !tbaa !320
  tail call void %4() #16
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %if.end
  %call = tail call i32 @halide_buffer_copy_already_locked(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_device_interface_t* %dst_device_interface, %struct.halide_buffer_t* %dst) #17
  br i1 %tobool.not, label %if.end20, label %if.then18

if.then18:                                        ; preds = %if.end16
  %impl19 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %dst_device_interface, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl19, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 1
  %6 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %6() #16
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %tobool22.not = icmp eq %struct.halide_device_interface_t* %7, null
  br i1 %tobool22.not, label %if.end27, label %if.then23

if.then23:                                        ; preds = %if.end20
  %impl25 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl25, align 8, !tbaa !314
  %release_module26 = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 1
  %9 = load void ()*, void ()** %release_module26, align 8, !tbaa !322
  tail call void %9() #16
  br label %if.end27

if.end27:                                         ; preds = %if.then23, %if.end20
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %call
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.59, i64 0, i64 0)) #16
  ret i32 -40
}

; Function Attrs: nounwind
define weak i32 @halide_device_crop(i8* %user_context, %struct.halide_buffer_t* %src, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %cmp.not = icmp eq i32 %2, %3
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.61, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 11
  %9 = load i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, %struct.halide_buffer_t*)** %device_crop, align 8, !tbaa !334
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_slice(i8* %user_context, %struct.halide_buffer_t* %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* %dst) local_unnamed_addr #4 {
entry:
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %device1 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 0
  %1 = load i64, i64* %device1, align 8, !tbaa !174
  %tobool2.not = icmp eq i64 %1, 0
  br i1 %tobool2.not, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60, i64 0, i64 0)) #16
  br label %cleanup

if.end4:                                          ; preds = %if.end
  %dimensions = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 5
  %2 = load i32, i32* %dimensions, align 4, !tbaa !175
  %dimensions5 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %dst, i64 0, i32 5
  %3 = load i32, i32* %dimensions5, align 4, !tbaa !175
  %add = add nsw i32 %3, 1
  %cmp.not = icmp eq i32 %2, %add
  br i1 %cmp.not, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end4
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.64, i64 0, i64 0)) #16
  br label %cleanup

if.end7:                                          ; preds = %if.end4
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %src, i64 0, i32 1
  %4 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %4, i64 0, i32 15
  %5 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %use_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %5, i64 0, i32 0
  %6 = load void ()*, void ()** %use_module, align 8, !tbaa !320
  tail call void %6() #16
  %7 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl9 = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %7, i64 0, i32 15
  %8 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl9, align 8, !tbaa !314
  %device_slice = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %8, i64 0, i32 12
  %9 = load i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*, i32, i32, %struct.halide_buffer_t*)** %device_slice, align 8, !tbaa !335
  %call = tail call i32 %9(i8* %user_context, %struct.halide_buffer_t* nonnull %src, i32 %slice_dim, i32 %slice_pos, %struct.halide_buffer_t* nonnull %dst) #16
  br label %cleanup

cleanup:                                          ; preds = %if.end7, %if.then6, %if.then3, %entry
  %retval.0 = phi i32 [ -41, %if.then3 ], [ -41, %if.then6 ], [ %call, %if.end7 ], [ 0, %entry ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_default_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #0 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.end

if.end:                                           ; preds = %entry
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.58, i64 0, i64 0)) #16
  br label %return

return:                                           ; preds = %if.end, %entry
  %retval.0 = phi i32 [ -40, %if.end ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind
define weak i32 @halide_device_release_crop(i8* %user_context, %struct.halide_buffer_t* %buf) local_unnamed_addr #4 {
entry:
  %device = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 0
  %0 = load i64, i64* %device, align 8, !tbaa !174
  %tobool.not = icmp eq i64 %0, 0
  br i1 %tobool.not, label %return, label %if.then

if.then:                                          ; preds = %entry
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  %device_interface = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %buf, i64 0, i32 1
  %1 = load %struct.halide_device_interface_t*, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  %impl = getelementptr inbounds %struct.halide_device_interface_t, %struct.halide_device_interface_t* %1, i64 0, i32 15
  %2 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %device_release_crop = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %2, i64 0, i32 13
  %3 = load i32 (i8*, %struct.halide_buffer_t*)*, i32 (i8*, %struct.halide_buffer_t*)** %device_release_crop, align 8, !tbaa !336
  %call = tail call i32 %3(i8* %user_context, %struct.halide_buffer_t* nonnull %buf) #16
  store i64 0, i64* %device, align 8, !tbaa !174
  %4 = load %struct.halide_device_interface_impl_t*, %struct.halide_device_interface_impl_t** %impl, align 8, !tbaa !314
  %release_module = getelementptr inbounds %struct.halide_device_interface_impl_t, %struct.halide_device_interface_impl_t* %4, i64 0, i32 1
  %5 = load void ()*, void ()** %release_module, align 8, !tbaa !322
  tail call void %5() #16
  store %struct.halide_device_interface_t* null, %struct.halide_device_interface_t** %device_interface, align 8, !tbaa !307
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal17device_copy_mutexE) #16
  br label %return

return:                                           ; preds = %if.then, %entry
  %retval.0 = phi i32 [ %call, %if.then ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: nounwind willreturn mustprogress
define weak float @halide_float16_bits_to_float(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %conv = zext i16 %bits to i32
  %and2 = and i32 %conv, 1023
  %and4 = lshr i32 %conv, 10
  %0 = and i32 %and4, 31
  %cmp = icmp eq i32 %0, 0
  %cmp5 = icmp ne i32 %and2, 0
  %or.cond = and i1 %cmp5, %cmp
  br i1 %or.cond, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = tail call i32 @llvm.ctlz.i32(i32 %and2, i1 true), !range !337
  %sub6 = xor i32 %1, 31
  %shl7 = shl nuw i32 1, %sub6
  %neg = xor i32 %shl7, -1
  %and8 = and i32 %and2, %neg
  %sub9 = sub nsw i32 23, %sub6
  %shl10 = shl i32 %and8, %sub9
  %add11.neg = mul nsw i32 %1, -8388608
  %shl12 = add i32 %add11.neg, 1124073472
  br label %if.end28

if.else:                                          ; preds = %entry
  %shl14 = shl nuw nsw i32 %and2, 13
  br i1 %cmp, label %if.end28, label %if.else18

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq i32 %0, 31
  br i1 %cmp19, label %if.end28, label %if.else21

if.else21:                                        ; preds = %if.else18
  %add22 = shl nuw nsw i32 %0, 23
  %phi.bo = add nuw nsw i32 %add22, 939524096
  br label %if.end28

if.end28:                                         ; preds = %if.else21, %if.else18, %if.else, %if.then
  %shl14.sink = phi i32 [ %shl12, %if.then ], [ %shl14, %if.else18 ], [ %shl14, %if.else ], [ %shl14, %if.else21 ]
  %reEncodedExponent15.0.sink = phi i32 [ %shl10, %if.then ], [ 2139095040, %if.else18 ], [ 0, %if.else ], [ %phi.bo, %if.else21 ]
  %bits.signext = sext i16 %bits to i32
  %shl = and i32 %bits.signext, -2147483648
  %or25 = or i32 %shl14.sink, %shl
  %or26 = or i32 %or25, %reEncodedExponent15.0.sink
  %result.sroa.0.0 = bitcast i32 %or26 to float
  ret float %result.sroa.0.0
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #7

; Function Attrs: nounwind willreturn mustprogress
define weak double @halide_float16_bits_to_double(i16 zeroext %bits) local_unnamed_addr #2 {
entry:
  %call = tail call float @halide_float16_bits_to_float(i16 zeroext %bits) #17
  %conv = fpext float %call to double
  ret double %conv
}

; Function Attrs: nounwind
define weak i32 @halide_error_bounds_inference_call_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.111, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_extern_stage_failed(i8* %user_context, i8* %extern_stage_name, i32 %result) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.113, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %extern_stage_name) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.112, i64 0, i64 0)) #16
  %conv.i = sext i32 %result to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.16.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i16 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 %result
}

; Function Attrs: nounwind
define weak i32 @halide_error_explicit_bounds_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %min_bound, i32 %max_bound, i32 %min_required, i32 %max_required) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.114, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.34.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.34.0, i8* %var_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.115, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.34.0, i8* %func_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.116, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_bound to i64
  %call.i30 = tail call i8* @halide_int64_to_string(i8* %call.i27, i8* %ref.tmp.sroa.34.0, i64 %conv.i, i32 1) #16
  %call.i33 = tail call i8* @halide_string_to_string(i8* %call.i30, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i36 = sext i32 %max_bound to i64
  %call.i37 = tail call i8* @halide_int64_to_string(i8* %call.i33, i8* %ref.tmp.sroa.34.0, i64 %conv.i36, i32 1) #16
  %call.i40 = tail call i8* @halide_string_to_string(i8* %call.i37, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7.118, i64 0, i64 0)) #16
  %conv.i43 = sext i32 %min_required to i64
  %call.i44 = tail call i8* @halide_int64_to_string(i8* %call.i40, i8* %ref.tmp.sroa.34.0, i64 %conv.i43, i32 1) #16
  %call.i47 = tail call i8* @halide_string_to_string(i8* %call.i44, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i50 = sext i32 %max_required to i64
  %call.i51 = tail call i8* @halide_int64_to_string(i8* %call.i47, i8* %ref.tmp.sroa.34.0, i64 %conv.i50, i32 1) #16
  %call.i54 = tail call i8* @halide_string_to_string(i8* %call.i51, i8* %ref.tmp.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i54 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -2
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_type(i8* %user_context, i8* %func_name, i32 %type_given_bits, i32 %correct_type_bits) local_unnamed_addr #4 {
entry:
  %type_given_bits.addr = alloca i32, align 4
  %correct_type_bits.addr = alloca i32, align 4
  %correct_type = alloca %struct.halide_type_t, align 2
  %type_given = alloca %struct.halide_type_t, align 2
  store i32 %type_given_bits, i32* %type_given_bits.addr, align 4, !tbaa !73
  store i32 %correct_type_bits, i32* %correct_type_bits.addr, align 4, !tbaa !73
  %0 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  store i8 0, i8* %0, align 2, !tbaa !305
  %bits.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 1
  store i8 0, i8* %bits.i, align 1, !tbaa !136
  %lanes.i = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %correct_type, i64 0, i32 2
  store i16 0, i16* %lanes.i, align 2, !tbaa !306
  %1 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  store i8 0, i8* %1, align 2, !tbaa !305
  %bits.i8 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 1
  store i8 0, i8* %bits.i8, align 1, !tbaa !136
  %lanes.i9 = getelementptr inbounds %struct.halide_type_t, %struct.halide_type_t* %type_given, i64 0, i32 2
  store i16 0, i16* %lanes.i9, align 2, !tbaa !306
  %2 = bitcast i32* %correct_type_bits.addr to i8*
  %call = call i8* @memcpy(i8* nonnull %0, i8* nonnull %2, i64 4) #16
  %3 = bitcast i32* %type_given_bits.addr to i8*
  %call1 = call i8* @memcpy(i8* nonnull %1, i8* nonnull %3, i64 4) #16
  %call.i = call i8* @malloc(i64 1024) #16
  %tobool.not.i12 = icmp eq i8* %call.i, null
  br i1 %tobool.not.i12, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i151 = call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i152 = call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i151, %entry.split ], [ %call.i152, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i18 = call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.120, i64 0, i64 0)) #16
  %call.i21 = call i8* @halide_type_to_string(i8* %call.i18, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %correct_type) #16
  %call.i24 = call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10.121, i64 0, i64 0)) #16
  %call.i27 = call i8* @halide_type_to_string(i8* %call.i24, i8* %ref.tmp.sroa.18.0, %struct.halide_type_t* nonnull %type_given) #16
  br i1 %tobool.not.i12, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  call void @free(i8* %call.i) #16
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 -3
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_dimensions(i8* %user_context, i8* %func_name, i32 %dimensions_given, i32 %correct_dimensions) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11.122, i64 0, i64 0)) #16
  %conv.i = sext i32 %correct_dimensions to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.12.123, i64 0, i64 0)) #16
  %conv.i20 = sext i32 %dimensions_given to i64
  %call.i21 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i64 %conv.i20, i32 1) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.124, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i24 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -43
}

; Function Attrs: nounwind
define weak i32 @halide_error_access_out_of_bounds(i8* %user_context, i8* %func_name, i32 %dimension, i32 %min_touched, i32 %max_touched, i32 %min_valid, i32 %max_valid) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min_touched, %min_valid
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i271 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i272 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i271, %if.then.split ], [ %call.i272, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i30 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i = sext i32 %min_touched to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i30, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15.126, i64 0, i64 0)) #16
  %conv.i39 = sext i32 %min_valid to i64
  %call.i40 = tail call i8* @halide_int64_to_string(i8* %call.i36, i8* %ref.tmp.sroa.22.0, i64 %conv.i39, i32 1) #16
  %call.i43 = tail call i8* @halide_string_to_string(i8* %call.i40, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i46 = sext i32 %dimension to i64
  %call.i47 = tail call i8* @halide_int64_to_string(i8* %call.i43, i8* %ref.tmp.sroa.22.0, i64 %conv.i46, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i47 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end17.sink.split

if.else:                                          ; preds = %entry
  %cmp7 = icmp sgt i32 %max_touched, %max_valid
  br i1 %cmp7, label %if.then8, label %if.end17

if.then8:                                         ; preds = %if.else
  %call.i53 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i56 = icmp eq i8* %call.i53, null
  br i1 %tobool.not.i56, label %if.then8.split, label %if.then6.i59

if.then8.split:                                   ; preds = %if.then8
  %call.i653 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

if.then6.i59:                                     ; preds = %if.then8
  %add.ptr.i57 = getelementptr inbounds i8, i8* %call.i53, i64 1023
  store i8 0, i8* %add.ptr.i57, align 1, !tbaa !14
  %call.i654 = tail call i8* @halide_string_to_string(i8* nonnull %call.i53, i8* nonnull %add.ptr.i57, i8* %func_name) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62: ; preds = %if.then8.split, %if.then6.i59
  %phi.call5 = phi i8* [ %call.i653, %if.then8.split ], [ %call.i654, %if.then6.i59 ]
  %ref.tmp9.sroa.22.0 = phi i8* [ null, %if.then8.split ], [ %add.ptr.i57, %if.then6.i59 ]
  %call.i68 = tail call i8* @halide_string_to_string(i8* %phi.call5, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.125, i64 0, i64 0)) #16
  %conv.i71 = sext i32 %max_touched to i64
  %call.i72 = tail call i8* @halide_int64_to_string(i8* %call.i68, i8* %ref.tmp9.sroa.22.0, i64 %conv.i71, i32 1) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i72, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.17.128, i64 0, i64 0)) #16
  %conv.i78 = sext i32 %max_valid to i64
  %call.i79 = tail call i8* @halide_int64_to_string(i8* %call.i75, i8* %ref.tmp9.sroa.22.0, i64 %conv.i78, i32 1) #16
  %call.i82 = tail call i8* @halide_string_to_string(i8* %call.i79, i8* %ref.tmp9.sroa.22.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16.127, i64 0, i64 0)) #16
  %conv.i85 = sext i32 %dimension to i64
  %call.i86 = tail call i8* @halide_int64_to_string(i8* %call.i82, i8* %ref.tmp9.sroa.22.0, i64 %conv.i85, i32 1) #16
  br i1 %tobool.not.i56, label %if.then.i90, label %if.else.i100

if.then.i90:                                      ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end17.sink.split

if.else.i100:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit62
  %sub.ptr.lhs.cast.i.i95 = ptrtoint i8* %call.i86 to i64
  %sub.ptr.rhs.cast.i.i96 = ptrtoint i8* %call.i53 to i64
  %sub.ptr.sub.i.i97 = sub i64 1, %sub.ptr.rhs.cast.i.i96
  %add.i.i98 = add i64 %sub.ptr.sub.i.i97, %sub.ptr.lhs.cast.i.i95
  %call.i.i99 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i53, i64 %add.i.i98) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i53) #16
  br label %if.end17.sink.split

if.end17.sink.split:                              ; preds = %if.else.i100, %if.then.i90, %if.else.i, %if.then.i
  %call.i53.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i53, %if.else.i100 ], [ null, %if.then.i90 ]
  tail call void @free(i8* %call.i53.sink) #16
  br label %if.end17

if.end17:                                         ; preds = %if.end17.sink.split, %if.else
  ret i32 -4
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_allocation_too_large(i8* %user_context, i8* %buffer_name, i64 %allocation_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.18.129, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %allocation_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -5
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_negative(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21.132, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %buffer_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22.133, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i18 = tail call i8* @halide_int64_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i64 %conv.i, i32 1) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.134, i64 0, i64 0)) #16
  %conv.i24 = sext i32 %extent to i64
  %call.i25 = tail call i8* @halide_int64_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i64 %conv.i24, i32 1) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i28 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -28
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_extents_too_large(i8* %user_context, i8* %buffer_name, i64 %actual_size, i64 %max_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24.135, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %buffer_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %actual_size, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20.131, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_size, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -6
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraints_make_required_region_smaller(i8* %user_context, i8* %buffer_name, i32 %dimension, i32 %constrained_min, i32 %constrained_extent, i32 %required_min, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %add = add i32 %required_min, -1
  %sub = add i32 %add, %required_extent
  %add1 = add i32 %constrained_min, -1
  %sub2 = add i32 %add1, %constrained_extent
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i231 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i232 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25.136, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i231, %entry.split ], [ %call.i232, %if.then6.i ]
  %ref.tmp.sroa.38.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i26 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.38.0, i8* %buffer_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.26.137, i64 0, i64 0)) #16
  %conv.i = sext i32 %dimension to i64
  %call.i32 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.38.0, i64 %conv.i, i32 1) #16
  %call.i35 = tail call i8* @halide_string_to_string(i8* %call.i32, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i38 = tail call i8* @halide_string_to_string(i8* %call.i35, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28.139, i64 0, i64 0)) #16
  %conv.i41 = sext i32 %required_min to i64
  %call.i42 = tail call i8* @halide_int64_to_string(i8* %call.i38, i8* %ref.tmp.sroa.38.0, i64 %conv.i41, i32 1) #16
  %call.i45 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i48 = sext i32 %sub to i64
  %call.i49 = tail call i8* @halide_int64_to_string(i8* %call.i45, i8* %ref.tmp.sroa.38.0, i64 %conv.i48, i32 1) #16
  %call.i52 = tail call i8* @halide_string_to_string(i8* %call.i49, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.138, i64 0, i64 0)) #16
  %call.i55 = tail call i8* @halide_string_to_string(i8* %call.i52, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29.140, i64 0, i64 0)) #16
  %conv.i58 = sext i32 %constrained_min to i64
  %call.i59 = tail call i8* @halide_int64_to_string(i8* %call.i55, i8* %ref.tmp.sroa.38.0, i64 %conv.i58, i32 1) #16
  %call.i62 = tail call i8* @halide_string_to_string(i8* %call.i59, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.117, i64 0, i64 0)) #16
  %conv.i65 = sext i32 %sub2 to i64
  %call.i66 = tail call i8* @halide_int64_to_string(i8* %call.i62, i8* %ref.tmp.sroa.38.0, i64 %conv.i65, i32 1) #16
  %call.i69 = tail call i8* @halide_string_to_string(i8* %call.i66, i8* %ref.tmp.sroa.38.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i69 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -7
}

; Function Attrs: nounwind
define weak i32 @halide_error_constraint_violated(i8* %user_context, i8* %var, i32 %val, i8* %constrained_var, i32 %constrained_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.31.142, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i14 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i8* %var) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i = sext i32 %val to i64
  %call.i20 = tail call i8* @halide_int64_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33.144, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %constrained_var) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %constrained_val to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8.119, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -8
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_small_f64(i8* %user_context, i8* %param_name, double %val, double %min_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35.146, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %min_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -9
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_i64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_int64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_u64(i8* %user_context, i8* %param_name, i64 %val, i64 %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_uint64_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i64 %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_uint64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind
define weak i32 @halide_error_param_too_large_f64(i8* %user_context, i8* %param_name, double %val, double %max_val) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34.145, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %param_name) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.130, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_double_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, double %val, i32 1) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.36, i64 0, i64 0)) #16
  %call.i23 = tail call i8* @halide_double_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, double %max_val, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -10
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_error_out_of_memory(i8* %user_context) local_unnamed_addr #0 {
entry:
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.37, i64 0, i64 0)) #16
  ret i32 -11
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_argument_is_null(i8* %user_context, i8* %buffer_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %buffer_name) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -12
}

; Function Attrs: nounwind
define weak i32 @halide_error_debug_to_file_failed(i8* %user_context, i8* %func, i8* %filename, i32 %error_code) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i81 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i82 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.40, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i81, %entry.split ], [ %call.i82, %if.then6.i ]
  %ref.tmp.sroa.20.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i11 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.20.0, i8* %func) #16
  %call.i14 = tail call i8* @halide_string_to_string(i8* %call.i11, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41.147, i64 0, i64 0)) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.20.0, i8* %filename) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.20.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.42, i64 0, i64 0)) #16
  %conv.i = sext i32 %error_code to i64
  %call.i23 = tail call i8* @halide_int64_to_string(i8* %call.i20, i8* %ref.tmp.sroa.20.0, i64 %conv.i, i32 1) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i23 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -13
}

; Function Attrs: nounwind
define weak i32 @halide_error_unaligned_host_ptr(i8* %user_context, i8* %func, i32 %alignment) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i71 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i72 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i71, %entry.split ], [ %call.i72, %if.then6.i ]
  %ref.tmp.sroa.18.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i10 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.18.0, i8* %func) #16
  %call.i13 = tail call i8* @halide_string_to_string(i8* %call.i10, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #16
  %conv.i = sext i32 %alignment to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %call.i13, i8* %ref.tmp.sroa.18.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.18.0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.45, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i19 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -24
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_dirty_with_no_device_support(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %func) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.47, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -44
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_is_null(i8* %user_context, i8* %func) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.43, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %func) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.49, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -34
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_fold(i8* %user_context, i8* %func_name, i8* %var_name, i8* %loop_name) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i91 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i92 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.50.148, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i91, %entry.split ], [ %call.i92, %if.then6.i ]
  %ref.tmp.sroa.22.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i12 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.22.0, i8* %var_name) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i18 = tail call i8* @halide_string_to_string(i8* %call.i15, i8* %ref.tmp.sroa.22.0, i8* %func_name) #16
  %call.i21 = tail call i8* @halide_string_to_string(i8* %call.i18, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.52, i64 0, i64 0)) #16
  %call.i24 = tail call i8* @halide_string_to_string(i8* %call.i21, i8* %ref.tmp.sroa.22.0, i8* %loop_name) #16
  %call.i27 = tail call i8* @halide_string_to_string(i8* %call.i24, i8* %ref.tmp.sroa.22.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i27 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -25
}

; Function Attrs: nounwind
define weak i32 @halide_error_bad_extern_fold(i8* %user_context, i8* %func_name, i32 %dim, i32 %min, i32 %extent, i32 %valid_min, i32 %fold_factor) local_unnamed_addr #4 {
entry:
  %cmp = icmp slt i32 %min, %valid_min
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add = add nsw i32 %extent, %min
  %add1 = add nsw i32 %fold_factor, %valid_min
  %cmp2 = icmp sgt i32 %add, %add1
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.split, label %if.then6.i

if.then.split:                                    ; preds = %if.then
  %call.i521 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %if.then
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i522 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %if.then.split, %if.then6.i
  %phi.call = phi i8* [ %call.i521, %if.then.split ], [ %call.i522, %if.then6.i ]
  %ref.tmp.sroa.36.0 = phi i8* [ null, %if.then.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %dim to i64
  %call.i55 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.36.0, i64 %conv.i, i32 1) #16
  %call.i58 = tail call i8* @halide_string_to_string(i8* %call.i55, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i61 = tail call i8* @halide_string_to_string(i8* %call.i58, i8* %ref.tmp.sroa.36.0, i8* %func_name) #16
  %call.i64 = tail call i8* @halide_string_to_string(i8* %call.i61, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i67 = sext i32 %min to i64
  %call.i68 = tail call i8* @halide_int64_to_string(i8* %call.i64, i8* %ref.tmp.sroa.36.0, i64 %conv.i67, i32 1) #16
  %call.i71 = tail call i8* @halide_string_to_string(i8* %call.i68, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add9 = add nsw i32 %extent, %min
  %sub = add nsw i32 %add9, -1
  %conv.i74 = sext i32 %sub to i64
  %call.i75 = tail call i8* @halide_int64_to_string(i8* %call.i71, i8* %ref.tmp.sroa.36.0, i64 %conv.i74, i32 1) #16
  %call.i78 = tail call i8* @halide_string_to_string(i8* %call.i75, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i81 = tail call i8* @halide_string_to_string(i8* %call.i78, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0)) #16
  %conv.i84 = sext i32 %valid_min to i64
  %call.i85 = tail call i8* @halide_int64_to_string(i8* %call.i81, i8* %ref.tmp.sroa.36.0, i64 %conv.i84, i32 1) #16
  %call.i88 = tail call i8* @halide_string_to_string(i8* %call.i85, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %add15 = add nsw i32 %fold_factor, %valid_min
  %sub16 = add nsw i32 %add15, -1
  %conv.i91 = sext i32 %sub16 to i64
  %call.i92 = tail call i8* @halide_int64_to_string(i8* %call.i88, i8* %ref.tmp.sroa.36.0, i64 %conv.i91, i32 1) #16
  %call.i95 = tail call i8* @halide_string_to_string(i8* %call.i92, i8* %ref.tmp.sroa.36.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58.149, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i95 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %call.i101 = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i104 = icmp eq i8* %call.i101, null
  br i1 %tobool.not.i104, label %if.else.split, label %if.then6.i107

if.else.split:                                    ; preds = %if.else
  %call.i1133 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

if.then6.i107:                                    ; preds = %if.else
  %add.ptr.i105 = getelementptr inbounds i8, i8* %call.i101, i64 1023
  store i8 0, i8* %add.ptr.i105, align 1, !tbaa !14
  %call.i1134 = tail call i8* @halide_string_to_string(i8* nonnull %call.i101, i8* nonnull %add.ptr.i105, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.53, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110: ; preds = %if.else.split, %if.then6.i107
  %phi.call5 = phi i8* [ %call.i1133, %if.else.split ], [ %call.i1134, %if.then6.i107 ]
  %ref.tmp19.sroa.34.0 = phi i8* [ null, %if.else.split ], [ %add.ptr.i105, %if.then6.i107 ]
  %conv.i116 = sext i32 %dim to i64
  %call.i117 = tail call i8* @halide_int64_to_string(i8* %phi.call5, i8* %ref.tmp19.sroa.34.0, i64 %conv.i116, i32 1) #16
  %call.i120 = tail call i8* @halide_string_to_string(i8* %call.i117, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i123 = tail call i8* @halide_string_to_string(i8* %call.i120, i8* %ref.tmp19.sroa.34.0, i8* %func_name) #16
  %call.i126 = tail call i8* @halide_string_to_string(i8* %call.i123, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i64 0, i64 0)) #16
  %conv.i129 = sext i32 %min to i64
  %call.i130 = tail call i8* @halide_int64_to_string(i8* %call.i126, i8* %ref.tmp19.sroa.34.0, i64 %conv.i129, i32 1) #16
  %call.i133 = tail call i8* @halide_string_to_string(i8* %call.i130, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i64 0, i64 0)) #16
  %sub28 = add nsw i32 %add, -1
  %conv.i136 = sext i32 %sub28 to i64
  %call.i137 = tail call i8* @halide_int64_to_string(i8* %call.i133, i8* %ref.tmp19.sroa.34.0, i64 %conv.i136, i32 1) #16
  %call.i140 = tail call i8* @halide_string_to_string(i8* %call.i137, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.56, i64 0, i64 0)) #16
  %call.i143 = tail call i8* @halide_string_to_string(i8* %call.i140, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.59.150, i64 0, i64 0)) #16
  %call.i146 = tail call i8* @halide_string_to_string(i8* %call.i143, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.60.151, i64 0, i64 0)) #16
  %conv.i149 = sext i32 %fold_factor to i64
  %call.i150 = tail call i8* @halide_int64_to_string(i8* %call.i146, i8* %ref.tmp19.sroa.34.0, i64 %conv.i149, i32 1) #16
  %call.i153 = tail call i8* @halide_string_to_string(i8* %call.i150, i8* %ref.tmp19.sroa.34.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30.141, i64 0, i64 0)) #16
  br i1 %tobool.not.i104, label %if.then.i157, label %if.else.i167

if.then.i157:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %if.end

if.else.i167:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit110
  %sub.ptr.lhs.cast.i.i162 = ptrtoint i8* %call.i153 to i64
  %sub.ptr.rhs.cast.i.i163 = ptrtoint i8* %call.i101 to i64
  %sub.ptr.sub.i.i164 = sub i64 1, %sub.ptr.rhs.cast.i.i163
  %add.i.i165 = add i64 %sub.ptr.sub.i.i164, %sub.ptr.lhs.cast.i.i162
  %call.i.i166 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i101, i64 %add.i.i165) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i101) #16
  br label %if.end

if.end:                                           ; preds = %if.else.i167, %if.then.i157, %if.else.i, %if.then.i
  %call.i101.sink = phi i8* [ %call.i, %if.else.i ], [ null, %if.then.i ], [ %call.i101, %if.else.i167 ], [ null, %if.then.i157 ]
  tail call void @free(i8* %call.i101.sink) #16
  ret i32 -35
}

; Function Attrs: nounwind
define weak i32 @halide_error_fold_factor_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %fold_factor, i8* %loop_name, i32 %required_extent) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i131 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i132 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.61.152, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i131, %entry.split ], [ %call.i132, %if.then6.i ]
  %ref.tmp.sroa.30.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %fold_factor to i64
  %call.i16 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.30.0, i64 %conv.i, i32 1) #16
  %call.i19 = tail call i8* @halide_string_to_string(i8* %call.i16, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i22 = tail call i8* @halide_string_to_string(i8* %call.i19, i8* %ref.tmp.sroa.30.0, i8* %var_name) #16
  %call.i25 = tail call i8* @halide_string_to_string(i8* %call.i22, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i28 = tail call i8* @halide_string_to_string(i8* %call.i25, i8* %ref.tmp.sroa.30.0, i8* %func_name) #16
  %call.i31 = tail call i8* @halide_string_to_string(i8* %call.i28, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.63, i64 0, i64 0)) #16
  %call.i34 = tail call i8* @halide_string_to_string(i8* %call.i31, i8* %ref.tmp.sroa.30.0, i8* %loop_name) #16
  %call.i37 = tail call i8* @halide_string_to_string(i8* %call.i34, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.143, i64 0, i64 0)) #16
  %conv.i40 = sext i32 %required_extent to i64
  %call.i41 = tail call i8* @halide_int64_to_string(i8* %call.i37, i8* %ref.tmp.sroa.30.0, i64 %conv.i40, i32 1) #16
  %call.i44 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* %ref.tmp.sroa.30.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i44 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -26
}

; Function Attrs: nounwind
define weak i32 @halide_error_requirement_failed(i8* %user_context, i8* %condition, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i61 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i62 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.65, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i61, %entry.split ], [ %call.i62, %if.then6.i ]
  %ref.tmp.sroa.16.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i9 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.16.0, i8* %condition) #16
  %call.i12 = tail call i8* @halide_string_to_string(i8* %call.i9, i8* %ref.tmp.sroa.16.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0)) #16
  %call.i15 = tail call i8* @halide_string_to_string(i8* %call.i12, i8* %ref.tmp.sroa.16.0, i8* %message) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i15 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -27
}

; Function Attrs: nounwind
define weak i32 @halide_error_specialize_fail(i8* %user_context, i8* %message) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i41 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i75 = tail call i8* @halide_string_to_string(i8* %call.i41, i8* null, i8* %message) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i42 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.67, i64 0, i64 0)) #16
  %call.i7 = tail call i8* @halide_string_to_string(i8* %call.i42, i8* nonnull %add.ptr.i, i8* %message) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i7 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -31
}

; Function Attrs: nounwind
define weak i32 @halide_error_no_device_interface(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.68, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -19
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_interface_no_device(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.69, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -36
}

; Function Attrs: nounwind
define weak i32 @halide_error_host_and_device_dirty(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -37
}

; Function Attrs: nounwind
define weak i32 @halide_error_buffer_is_null(i8* %user_context, i8* %routine) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i51 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i52 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.71, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i51, %entry.split ], [ %call.i52, %if.then6.i ]
  %ref.tmp.sroa.14.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %call.i8 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %ref.tmp.sroa.14.0, i8* %routine) #16
  %call.i11 = tail call i8* @halide_string_to_string(i8* %call.i8, i8* %ref.tmp.sroa.14.0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.72, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i11 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -38
}

; Function Attrs: nounwind
define weak i32 @halide_error_storage_bound_too_small(i8* %user_context, i8* %func_name, i8* %var_name, i32 %provided_size, i32 %required_size) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %entry.split, label %if.then6.i

entry.split:                                      ; preds = %entry
  %call.i111 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i112 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.73, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit: ; preds = %entry.split, %if.then6.i
  %phi.call = phi i8* [ %call.i111, %entry.split ], [ %call.i112, %if.then6.i ]
  %ref.tmp.sroa.26.0 = phi i8* [ null, %entry.split ], [ %add.ptr.i, %if.then6.i ]
  %conv.i = sext i32 %provided_size to i64
  %call.i14 = tail call i8* @halide_int64_to_string(i8* %phi.call, i8* %ref.tmp.sroa.26.0, i64 %conv.i, i32 1) #16
  %call.i17 = tail call i8* @halide_string_to_string(i8* %call.i14, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.62, i64 0, i64 0)) #16
  %call.i20 = tail call i8* @halide_string_to_string(i8* %call.i17, i8* %ref.tmp.sroa.26.0, i8* %var_name) #16
  %call.i23 = tail call i8* @halide_string_to_string(i8* %call.i20, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.51, i64 0, i64 0)) #16
  %call.i26 = tail call i8* @halide_string_to_string(i8* %call.i23, i8* %ref.tmp.sroa.26.0, i8* %func_name) #16
  %call.i29 = tail call i8* @halide_string_to_string(i8* %call.i26, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.74, i64 0, i64 0)) #16
  %conv.i32 = sext i32 %required_size to i64
  %call.i33 = tail call i8* @halide_int64_to_string(i8* %call.i29, i8* %ref.tmp.sroa.26.0, i64 %conv.i32, i32 1) #16
  %call.i36 = tail call i8* @halide_string_to_string(i8* %call.i33, i8* %ref.tmp.sroa.26.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64.153, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EEC2EPvPc.exit
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i36 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -45
}

; Function Attrs: nounwind
define weak i32 @halide_error_device_crop_failed(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %call.i316 = tail call i8* @halide_string_to_string(i8* null, i8* null, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  %call.i3 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* nonnull %add.ptr.i, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.75, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %call.i3 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  tail call void @halide_error(i8* %user_context, i8* nonnull %call.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE1ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret i32 -41
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_shutdown() #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  store i32 -2, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_join_thread(%struct.halide_thread* nonnull %0) #16
  store %struct.halide_thread* null, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  store i32 -1, i32* %current_func, align 8, !tbaa !340
  tail call void @halide_profiler_report_unlocked(i8* null, %struct.halide_profiler_state* nonnull %call) #17
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* nonnull %call) #17
  br label %cleanup

cleanup:                                          ; preds = %if.end, %entry
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak %struct.halide_profiler_state* @halide_profiler_get_state() local_unnamed_addr #2 {
entry:
  ret %struct.halide_profiler_state* @_ZZ25halide_profiler_get_stateE1s
}

; Function Attrs: nounwind
define weak void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %s) local_unnamed_addr #4 {
entry:
  %call.i = tail call i8* @malloc(i64 1024) #16
  %tobool.not.i = icmp eq i8* %call.i, null
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit, label %if.then6.i

if.then6.i:                                       ; preds = %entry
  %add.ptr.i = getelementptr inbounds i8, i8* %call.i, i64 1023
  store i8 0, i8* %add.ptr.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit: ; preds = %if.then6.i, %entry
  %sstr.sroa.125.0 = phi i8* [ %add.ptr.i, %if.then6.i ], [ null, %entry ]
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.0624 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not625 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0624, null
  br i1 %tobool.not625, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sub.ptr.rhs.cast.i.i348 = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i349 = sub i64 1, %sub.ptr.rhs.cast.i.i348
  br label %for.body

for.cond.cleanup:                                 ; preds = %cleanup181, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit
  %sstr.sroa.19.0.lcssa = phi i8* [ %call.i, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EEC2EPvPc.exit ], [ %sstr.sroa.19.15, %cleanup181 ]
  br i1 %tobool.not.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.cond.cleanup
  tail call void @halide_error(i8* %user_context, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0)) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

if.else.i:                                        ; preds = %for.cond.cleanup
  %sub.ptr.lhs.cast.i.i = ptrtoint i8* %sstr.sroa.19.0.lcssa to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i8* %call.i to i64
  %sub.ptr.sub.i.i = sub i64 1, %sub.ptr.rhs.cast.i.i
  %add.i.i = add i64 %sub.ptr.sub.i.i, %sub.ptr.lhs.cast.i.i
  %call.i.i = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EED2Ev.exit: ; preds = %if.else.i, %if.then.i
  tail call void @free(i8* %call.i) #16
  ret void

for.body:                                         ; preds = %cleanup181, %for.body.lr.ph
  %p.0627 = phi %struct.halide_profiler_pipeline_stats* [ %p.0624, %for.body.lr.ph ], [ %p.0, %cleanup181 ]
  %sstr.sroa.19.0626 = phi i8* [ %call.i, %for.body.lr.ph ], [ %sstr.sroa.19.15, %cleanup181 ]
  %time = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 0
  %0 = load i64, i64* %time, align 8, !tbaa !341
  %conv = uitofp i64 %0 to float
  %div = fdiv float %conv, 1.000000e+06
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %tobool1.not = icmp eq i32 %1, 0
  br i1 %tobool1.not, label %cleanup181, label %if.end

if.end:                                           ; preds = %for.body
  br i1 %tobool.not.i, label %if.end.split, label %if.then.i278

if.end.split:                                     ; preds = %if.end
  %active_threads_numerator1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %2 = load i64, i64* %active_threads_numerator1, align 8, !tbaa !344
  %active_threads_denominator2 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %3 = load i64, i64* %active_threads_denominator2, align 8, !tbaa !345
  %cmp3 = icmp eq i64 %2, %3
  %name4 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %4 = load i8*, i8** %name4, align 8, !tbaa !346
  %call.i2825 = tail call i8* @halide_string_to_string(i8* null, i8* %sstr.sroa.125.0, i8* %4) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

if.then.i278:                                     ; preds = %if.end
  store i8 0, i8* %call.i, align 1, !tbaa !14
  %active_threads_numerator6 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 4
  %5 = load i64, i64* %active_threads_numerator6, align 8, !tbaa !344
  %active_threads_denominator7 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 5
  %6 = load i64, i64* %active_threads_denominator7, align 8, !tbaa !345
  %cmp8 = icmp eq i64 %5, %6
  %name9 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 6
  %7 = load i8*, i8** %name9, align 8, !tbaa !346
  %call.i28210 = tail call i8* @halide_string_to_string(i8* nonnull %call.i, i8* %sstr.sroa.125.0, i8* %7) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit: ; preds = %if.end.split, %if.then.i278
  %8 = phi i64 [ %2, %if.end.split ], [ %5, %if.then.i278 ]
  %9 = phi i64 [ %3, %if.end.split ], [ %6, %if.then.i278 ]
  %10 = phi i1 [ %cmp3, %if.end.split ], [ %cmp8, %if.then.i278 ]
  %phi.call = phi i8* [ %call.i2825, %if.end.split ], [ %call.i28210, %if.then.i278 ]
  %call.i285 = tail call i8* @halide_string_to_string(i8* %phi.call, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  %call.i288 = tail call i8* @halide_string_to_string(i8* %call.i285, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8.165, i64 0, i64 0)) #16
  %conv.i = fpext float %div to double
  %call.i291 = tail call i8* @halide_double_to_string(i8* %call.i288, i8* %sstr.sroa.125.0, double %conv.i, i32 0) #16
  %call.i294 = tail call i8* @halide_string_to_string(i8* %call.i291, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.166, i64 0, i64 0)) #16
  %call.i297 = tail call i8* @halide_string_to_string(i8* %call.i294, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.167, i64 0, i64 0)) #16
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 12
  %11 = load i32, i32* %samples, align 4, !tbaa !347
  %conv.i300 = sext i32 %11 to i64
  %call.i301 = tail call i8* @halide_int64_to_string(i8* %call.i297, i8* %sstr.sroa.125.0, i64 %conv.i300, i32 1) #16
  %call.i304 = tail call i8* @halide_string_to_string(i8* %call.i301, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.168, i64 0, i64 0)) #16
  %12 = load i32, i32* %runs, align 8, !tbaa !343
  %conv.i307 = sext i32 %12 to i64
  %call.i308 = tail call i8* @halide_int64_to_string(i8* %call.i304, i8* %sstr.sroa.125.0, i64 %conv.i307, i32 1) #16
  %call.i311 = tail call i8* @halide_string_to_string(i8* %call.i308, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.169, i64 0, i64 0)) #16
  %13 = load i32, i32* %runs, align 8, !tbaa !343
  %conv19 = sitofp i32 %13 to float
  %div20 = fdiv float %div, %conv19
  %conv.i314 = fpext float %div20 to double
  %call.i315 = tail call i8* @halide_double_to_string(i8* %call.i311, i8* %sstr.sroa.125.0, double %conv.i314, i32 0) #16
  %call.i318 = tail call i8* @halide_string_to_string(i8* %call.i315, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.170, i64 0, i64 0)) #16
  br i1 %10, label %if.end28, label %if.then24

if.then24:                                        ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %conv3 = uitofp i64 %8 to double
  %conv5 = uitofp i64 %9 to double
  %add = fadd double %conv5, 1.000000e-10
  %div6 = fdiv double %conv3, %add
  %conv7 = fptrunc double %div6 to float
  %call.i321 = tail call i8* @halide_string_to_string(i8* %call.i318, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.14.171, i64 0, i64 0)) #16
  %conv.i324 = fpext float %conv7 to double
  %call.i325 = tail call i8* @halide_double_to_string(i8* %call.i321, i8* %sstr.sroa.125.0, double %conv.i324, i32 0) #16
  %call.i328 = tail call i8* @halide_string_to_string(i8* %call.i325, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br label %if.end28

if.end28:                                         ; preds = %if.then24, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit
  %sstr.sroa.19.1 = phi i8* [ %call.i318, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit ], [ %call.i328, %if.then24 ]
  %call.i331 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.1, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15.172, i64 0, i64 0)) #16
  %num_allocs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 13
  %14 = load i32, i32* %num_allocs, align 8, !tbaa !348
  %conv.i334 = sext i32 %14 to i64
  %call.i335 = tail call i8* @halide_int64_to_string(i8* %call.i331, i8* %sstr.sroa.125.0, i64 %conv.i334, i32 1) #16
  %call.i338 = tail call i8* @halide_string_to_string(i8* %call.i335, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.16.173, i64 0, i64 0)) #16
  %memory_peak = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 2
  %15 = load i64, i64* %memory_peak, align 8, !tbaa !349
  %call.i341 = tail call i8* @halide_uint64_to_string(i8* %call.i338, i8* %sstr.sroa.125.0, i64 %15, i32 1) #16
  %call.i344 = tail call i8* @halide_string_to_string(i8* %call.i341, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.174, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit, label %if.then.i352

if.then.i352:                                     ; preds = %if.end28
  %sub.ptr.lhs.cast.i.i347 = ptrtoint i8* %call.i344 to i64
  %add.i.i350 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i347
  %call.i.i351 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i350) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit: ; preds = %if.then.i352, %if.end28
  %retval.0.i = phi i8* [ %call.i, %if.then.i352 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end28 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i) #16
  %16 = load i64, i64* %time, align 8, !tbaa !341
  %tobool36.not = icmp eq i64 %16, 0
  br i1 %tobool36.not, label %lor.end, label %for.cond53.preheader

lor.end:                                          ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %memory_total = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 3
  %17 = load i64, i64* %memory_total, align 8, !tbaa !350
  %tobool37.not = icmp eq i64 %17, 0
  br i1 %tobool37.not, label %for.cond41.preheader, label %for.cond53.preheader

for.cond41.preheader:                             ; preds = %lor.end
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %18 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %cmp42589 = icmp sgt i32 %18, 0
  br i1 %cmp42589, label %for.body44.lr.ph, label %cleanup181

for.body44.lr.ph:                                 ; preds = %for.cond41.preheader
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  %19 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %20 = zext i32 %18 to i64
  br label %for.body44

for.cond41:                                       ; preds = %for.body44
  %exitcond.not = icmp eq i64 %indvars.iv.next, %20
  br i1 %exitcond.not, label %cleanup181, label %for.body44, !llvm.loop !353

for.body44:                                       ; preds = %for.cond41, %for.body44.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body44.lr.ph ], [ %indvars.iv.next, %for.cond41 ]
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %19, i64 %indvars.iv, i32 4
  %21 = load i64, i64* %stack_peak, align 8, !tbaa !354
  %tobool45.not = icmp eq i64 %21, 0
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br i1 %tobool45.not, label %for.cond41, label %for.cond53.preheader

for.cond53.preheader:                             ; preds = %for.body44, %lor.end, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit
  %num_funcs54 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 9
  %22 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %cmp55621 = icmp sgt i32 %22, 0
  br i1 %cmp55621, label %for.body57.lr.ph, label %cleanup181

for.body57.lr.ph:                                 ; preds = %for.cond53.preheader
  %funcs59 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 7
  br label %for.body57

for.body57:                                       ; preds = %cleanup172, %for.body57.lr.ph
  %indvars.iv630 = phi i64 [ 0, %for.body57.lr.ph ], [ %indvars.iv.next631, %cleanup172 ]
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358, label %if.then.i356

if.then.i356:                                     ; preds = %for.body57
  store i8 0, i8* %call.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358: ; preds = %if.then.i356, %for.body57
  %23 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs59, align 8, !tbaa !352
  %add.ptr61 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630
  %cmp62 = icmp eq i64 %indvars.iv630, 0
  br i1 %cmp62, label %land.lhs.true, label %if.end66

land.lhs.true:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %time63 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %24 = load i64, i64* %time63, align 8, !tbaa !356
  %cmp64 = icmp eq i64 %24, 0
  br i1 %cmp64, label %cleanup172, label %if.end66

if.end66:                                         ; preds = %land.lhs.true, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5clearEv.exit358
  %call.i361 = tail call i8* @halide_string_to_string(i8* %call.i, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.175, i64 0, i64 0)) #16
  %name68 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 7
  %25 = load i8*, i8** %name68, align 8, !tbaa !357
  %call.i364 = tail call i8* @halide_string_to_string(i8* %call.i361, i8* %sstr.sroa.125.0, i8* %25) #16
  %call.i367 = tail call i8* @halide_string_to_string(i8* %call.i364, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19.176, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i591 = ptrtoint i8* %call.i367 to i64
  %sub.ptr.sub.i592 = sub i64 %sub.ptr.lhs.cast.i591, %sub.ptr.rhs.cast.i.i348
  %cmp73593 = icmp ult i64 %sub.ptr.sub.i592, 25
  br i1 %cmp73593, label %while.body, label %while.end

while.body:                                       ; preds = %if.end66, %while.body
  %sstr.sroa.19.3594 = phi i8* [ %call.i384, %while.body ], [ %call.i367, %if.end66 ]
  %call.i384 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.3594, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i = ptrtoint i8* %call.i384 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i.i348
  %cmp73 = icmp ult i64 %sub.ptr.sub.i, 25
  br i1 %cmp73, label %while.body, label %while.end, !llvm.loop !358

while.end:                                        ; preds = %while.body, %if.end66
  %sstr.sroa.19.3.lcssa = phi i8* [ %call.i367, %if.end66 ], [ %call.i384, %while.body ]
  %time75 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr61, i64 0, i32 0
  %26 = load i64, i64* %time75, align 8, !tbaa !356
  %conv76 = uitofp i64 %26 to float
  %27 = load i32, i32* %runs, align 8, !tbaa !343
  %conv78 = sitofp i32 %27 to float
  %mul = fmul float %conv78, 1.000000e+06
  %div79 = fdiv float %conv76, %mul
  %conv.i387 = fpext float %div79 to double
  %call.i388 = tail call i8* @halide_double_to_string(i8* %sstr.sroa.19.3.lcssa, i8* %sstr.sroa.125.0, double %conv.i387, i32 0) #16
  %tobool.not.i390 = icmp eq i8* %call.i388, null
  br i1 %tobool.not.i390, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, label %if.then.i393

if.then.i393:                                     ; preds = %while.end
  %add.ptr.i391 = getelementptr inbounds i8, i8* %call.i388, i64 -3
  %cmp.i = icmp ult i8* %add.ptr.i391, %call.i
  %spec.store.select.i = select i1 %cmp.i, i8* %call.i, i8* %add.ptr.i391
  store i8 0, i8* %spec.store.select.i, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit: ; preds = %if.then.i393, %while.end
  %sstr.sroa.19.4 = phi i8* [ null, %while.end ], [ %spec.store.select.i, %if.then.i393 ]
  %call.i399 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.4, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.178, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400596 = ptrtoint i8* %call.i399 to i64
  %sub.ptr.sub.i402597 = sub i64 %sub.ptr.lhs.cast.i400596, %sub.ptr.rhs.cast.i.i348
  %cmp85598 = icmp ult i64 %sub.ptr.sub.i402597, 35
  br i1 %cmp85598, label %while.body86, label %while.end88

while.body86:                                     ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit, %while.body86
  %sstr.sroa.19.5599 = phi i8* [ %call.i408, %while.body86 ], [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ]
  %call.i408 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5599, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i400 = ptrtoint i8* %call.i408 to i64
  %sub.ptr.sub.i402 = sub i64 %sub.ptr.lhs.cast.i400, %sub.ptr.rhs.cast.i.i348
  %cmp85 = icmp ult i64 %sub.ptr.sub.i402, 35
  br i1 %cmp85, label %while.body86, label %while.end88, !llvm.loop !359

while.end88:                                      ; preds = %while.body86, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit
  %sstr.sroa.19.5.lcssa = phi i8* [ %call.i399, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit ], [ %call.i408, %while.body86 ]
  %28 = load i64, i64* %time, align 8, !tbaa !341
  %cmp90.not = icmp eq i64 %28, 0
  br i1 %cmp90.not, label %if.end97, label %if.then91

if.then91:                                        ; preds = %while.end88
  %29 = load i64, i64* %time75, align 8, !tbaa !356
  %mul93 = mul i64 %29, 100
  %div95 = udiv i64 %mul93, %28
  br label %if.end97

if.end97:                                         ; preds = %if.then91, %while.end88
  %percent.0 = phi i64 [ %div95, %if.then91 ], [ 0, %while.end88 ]
  %call.i411 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.5.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22.179, i64 0, i64 0)) #16
  %sext = shl i64 %percent.0, 32
  %conv.i414 = ashr exact i64 %sext, 32
  %call.i415 = tail call i8* @halide_int64_to_string(i8* %call.i411, i8* %sstr.sroa.125.0, i64 %conv.i414, i32 1) #16
  %call.i418 = tail call i8* @halide_string_to_string(i8* %call.i415, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.180, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419601 = ptrtoint i8* %call.i418 to i64
  %sub.ptr.sub.i421602 = sub i64 %sub.ptr.lhs.cast.i419601, %sub.ptr.rhs.cast.i.i348
  %cmp104603 = icmp ult i64 %sub.ptr.sub.i421602, 43
  br i1 %cmp104603, label %while.body105, label %while.end107

while.body105:                                    ; preds = %if.end97, %while.body105
  %sstr.sroa.19.6604 = phi i8* [ %call.i427, %while.body105 ], [ %call.i418, %if.end97 ]
  %call.i427 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6604, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i419 = ptrtoint i8* %call.i427 to i64
  %sub.ptr.sub.i421 = sub i64 %sub.ptr.lhs.cast.i419, %sub.ptr.rhs.cast.i.i348
  %cmp104 = icmp ult i64 %sub.ptr.sub.i421, 43
  br i1 %cmp104, label %while.body105, label %while.end107, !llvm.loop !360

while.end107:                                     ; preds = %while.body105, %if.end97
  %sstr.sroa.19.6.lcssa = phi i8* [ %call.i418, %if.end97 ], [ %call.i427, %while.body105 ]
  br i1 %10, label %if.end127, label %if.then109

if.then109:                                       ; preds = %while.end107
  %active_threads_numerator111 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 5
  %30 = load i64, i64* %active_threads_numerator111, align 8, !tbaa !361
  %conv112 = uitofp i64 %30 to double
  %active_threads_denominator113 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 6
  %31 = load i64, i64* %active_threads_denominator113, align 8, !tbaa !362
  %conv114 = uitofp i64 %31 to double
  %add115 = fadd double %conv114, 1.000000e-10
  %div116 = fdiv double %conv112, %add115
  %conv117 = fptrunc double %div116 to float
  %call.i430 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.6.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.181, i64 0, i64 0)) #16
  %conv.i433 = fpext float %conv117 to double
  %call.i434 = tail call i8* @halide_double_to_string(i8* %call.i430, i8* %sstr.sroa.125.0, double %conv.i433, i32 0) #16
  %tobool.not.i436 = icmp eq i8* %call.i434, null
  br i1 %tobool.not.i436, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, label %if.then.i441

if.then.i441:                                     ; preds = %if.then109
  %add.ptr.i437 = getelementptr inbounds i8, i8* %call.i434, i64 -3
  %cmp.i439 = icmp ult i8* %add.ptr.i437, %call.i
  %spec.store.select.i440 = select i1 %cmp.i439, i8* %call.i, i8* %add.ptr.i437
  store i8 0, i8* %spec.store.select.i440, align 1, !tbaa !14
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442: ; preds = %if.then.i441, %if.then109
  %sstr.sroa.19.7 = phi i8* [ null, %if.then109 ], [ %spec.store.select.i440, %if.then.i441 ]
  %sub.ptr.lhs.cast.i447606 = ptrtoint i8* %sstr.sroa.19.7 to i64
  %sub.ptr.sub.i449607 = sub i64 %sub.ptr.lhs.cast.i447606, %sub.ptr.rhs.cast.i.i348
  %cmp123608 = icmp ult i64 %sub.ptr.sub.i449607, 58
  br i1 %cmp123608, label %while.body124, label %if.end127

while.body124:                                    ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.body124
  %sstr.sroa.19.8609 = phi i8* [ %call.i455, %while.body124 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ]
  %call.i455 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.8609, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i447 = ptrtoint i8* %call.i455 to i64
  %sub.ptr.sub.i449 = sub i64 %sub.ptr.lhs.cast.i447, %sub.ptr.rhs.cast.i.i348
  %cmp123 = icmp ult i64 %sub.ptr.sub.i449, 58
  br i1 %cmp123, label %while.body124, label %if.end127, !llvm.loop !363

if.end127:                                        ; preds = %while.body124, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442, %while.end107
  %sstr.sroa.19.9 = phi i8* [ %sstr.sroa.19.6.lcssa, %while.end107 ], [ %sstr.sroa.19.7, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ %call.i455, %while.body124 ]
  %cursor.0 = phi i64 [ 58, %while.end107 ], [ 73, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE5eraseEi.exit442 ], [ 73, %while.body124 ]
  %memory_peak128 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 2
  %32 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %tobool129.not = icmp eq i64 %32, 0
  br i1 %tobool129.not, label %if.end162, label %if.then130

if.then130:                                       ; preds = %if.end127
  %call.i458 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.9, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25.182, i64 0, i64 0)) #16
  %33 = load i64, i64* %memory_peak128, align 8, !tbaa !364
  %call.i461 = tail call i8* @halide_uint64_to_string(i8* %call.i458, i8* %sstr.sroa.125.0, i64 %33, i32 1) #16
  %sub.ptr.lhs.cast.i462611 = ptrtoint i8* %call.i461 to i64
  %sub.ptr.sub.i464612 = sub i64 %sub.ptr.lhs.cast.i462611, %sub.ptr.rhs.cast.i.i348
  %cmp137613 = icmp ult i64 %sub.ptr.sub.i464612, %cursor.0
  br i1 %cmp137613, label %while.body138, label %while.end140

while.body138:                                    ; preds = %if.then130, %while.body138
  %sstr.sroa.19.10614 = phi i8* [ %call.i470, %while.body138 ], [ %call.i461, %if.then130 ]
  %call.i470 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10614, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i462 = ptrtoint i8* %call.i470 to i64
  %sub.ptr.sub.i464 = sub i64 %sub.ptr.lhs.cast.i462, %sub.ptr.rhs.cast.i.i348
  %cmp137 = icmp ult i64 %sub.ptr.sub.i464, %cursor.0
  br i1 %cmp137, label %while.body138, label %while.end140, !llvm.loop !365

while.end140:                                     ; preds = %while.body138, %if.then130
  %sstr.sroa.19.10.lcssa = phi i8* [ %call.i461, %if.then130 ], [ %call.i470, %while.body138 ]
  %call.i473 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.10.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.183, i64 0, i64 0)) #16
  %num_allocs142 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 8
  %34 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %conv.i476 = sext i32 %34 to i64
  %call.i477 = tail call i8* @halide_int64_to_string(i8* %call.i473, i8* %sstr.sroa.125.0, i64 %conv.i476, i32 1) #16
  %add144 = add nuw nsw i64 %cursor.0, 15
  %sub.ptr.lhs.cast.i478616 = ptrtoint i8* %call.i477 to i64
  %sub.ptr.sub.i480617 = sub i64 %sub.ptr.lhs.cast.i478616, %sub.ptr.rhs.cast.i.i348
  %cmp147618 = icmp ult i64 %sub.ptr.sub.i480617, %add144
  br i1 %cmp147618, label %while.body148, label %while.end150

while.body148:                                    ; preds = %while.end140, %while.body148
  %sstr.sroa.19.11619 = phi i8* [ %call.i467, %while.body148 ], [ %call.i477, %while.end140 ]
  %call.i467 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11619, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20.177, i64 0, i64 0)) #16
  %sub.ptr.lhs.cast.i478 = ptrtoint i8* %call.i467 to i64
  %sub.ptr.sub.i480 = sub i64 %sub.ptr.lhs.cast.i478, %sub.ptr.rhs.cast.i.i348
  %cmp147 = icmp ult i64 %sub.ptr.sub.i480, %add144
  br i1 %cmp147, label %while.body148, label %while.end150, !llvm.loop !367

while.end150:                                     ; preds = %while.body148, %while.end140
  %sstr.sroa.19.11.lcssa = phi i8* [ %call.i477, %while.end140 ], [ %call.i467, %while.body148 ]
  %35 = load i32, i32* %num_allocs142, align 8, !tbaa !366
  %cmp152.not = icmp eq i32 %35, 0
  br i1 %cmp152.not, label %if.end159, label %if.then153

if.then153:                                       ; preds = %while.end150
  %memory_total154 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 3
  %36 = load i64, i64* %memory_total154, align 8, !tbaa !368
  %conv156 = sext i32 %35 to i64
  %div157 = udiv i64 %36, %conv156
  br label %if.end159

if.end159:                                        ; preds = %if.then153, %while.end150
  %alloc_avg.0 = phi i64 [ %div157, %if.then153 ], [ 0, %while.end150 ]
  %call.i452 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.11.lcssa, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.27.184, i64 0, i64 0)) #16
  %sext586 = shl i64 %alloc_avg.0, 32
  %conv.i445 = ashr exact i64 %sext586, 32
  %call.i446 = tail call i8* @halide_int64_to_string(i8* %call.i452, i8* %sstr.sroa.125.0, i64 %conv.i445, i32 1) #16
  br label %if.end162

if.end162:                                        ; preds = %if.end159, %if.end127
  %sstr.sroa.19.12 = phi i8* [ %sstr.sroa.19.9, %if.end127 ], [ %call.i446, %if.end159 ]
  %stack_peak163 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %23, i64 %indvars.iv630, i32 4
  %37 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %cmp164.not = icmp eq i64 %37, 0
  br i1 %cmp164.not, label %if.end169, label %if.then165

if.then165:                                       ; preds = %if.end162
  %call.i424 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.12, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28.185, i64 0, i64 0)) #16
  %38 = load i64, i64* %stack_peak163, align 8, !tbaa !354
  %call.i405 = tail call i8* @halide_uint64_to_string(i8* %call.i424, i8* %sstr.sroa.125.0, i64 %38, i32 1) #16
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %if.end162
  %sstr.sroa.19.13 = phi i8* [ %sstr.sroa.19.12, %if.end162 ], [ %call.i405, %if.then165 ]
  %call.i396 = tail call i8* @halide_string_to_string(i8* %sstr.sroa.19.13, i8* %sstr.sroa.125.0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7.164, i64 0, i64 0)) #16
  br i1 %tobool.not.i, label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, label %if.then.i379

if.then.i379:                                     ; preds = %if.end169
  %sub.ptr.lhs.cast.i.i374 = ptrtoint i8* %call.i396 to i64
  %add.i.i377 = add i64 %sub.ptr.sub.i.i349, %sub.ptr.lhs.cast.i.i374
  %call.i.i378 = tail call i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* nonnull %call.i, i64 %add.i.i377) #16
  br label %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381

_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381: ; preds = %if.then.i379, %if.end169
  %retval.0.i380 = phi i8* [ %call.i, %if.then.i379 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29.163, i64 0, i64 0), %if.end169 ]
  tail call void @halide_print(i8* %user_context, i8* nonnull %retval.0.i380) #16
  br label %cleanup172

cleanup172:                                       ; preds = %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381, %land.lhs.true
  %sstr.sroa.19.14 = phi i8* [ %call.i, %land.lhs.true ], [ %call.i396, %_ZN6Halide7Runtime8Internal12_GLOBAL__N_17PrinterILNS1_11PrinterTypeE2ELy1024EE3strEv.exit381 ]
  %indvars.iv.next631 = add nuw nsw i64 %indvars.iv630, 1
  %39 = load i32, i32* %num_funcs54, align 8, !tbaa !351
  %40 = sext i32 %39 to i64
  %cmp55 = icmp slt i64 %indvars.iv.next631, %40
  br i1 %cmp55, label %for.body57, label %cleanup181, !llvm.loop !369

cleanup181:                                       ; preds = %for.cond41, %cleanup172, %for.cond53.preheader, %for.cond41.preheader, %for.body
  %sstr.sroa.19.15 = phi i8* [ %sstr.sroa.19.0626, %for.body ], [ %call.i344, %for.cond53.preheader ], [ %call.i344, %for.cond41.preheader ], [ %sstr.sroa.19.14, %cleanup172 ], [ %call.i344, %for.cond41 ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0627, i64 0, i32 8
  %41 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %41, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.cond.cleanup, label %for.body, !llvm.loop !370
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %s) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not9 = icmp eq %struct.halide_profiler_pipeline_stats* %0, null
  br i1 %tobool.not9, label %while.end, label %while.body

while.body:                                       ; preds = %entry, %while.body
  %1 = phi %struct.halide_profiler_pipeline_stats* [ %7, %while.body ], [ %0, %entry ]
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %3 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %3, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %1, i64 0, i32 7
  %4 = bitcast %struct.halide_profiler_func_stats** %funcs to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !352
  tail call void @free(i8* %5) #16
  %6 = bitcast %struct.halide_profiler_pipeline_stats* %1 to i8*
  tail call void @free(i8* nonnull %6) #16
  %7 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %7, null
  br i1 %tobool.not, label %while.end, label %while.body, !llvm.loop !373

while.end:                                        ; preds = %while.body, %entry
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 2
  store i32 0, i32* %first_free_id, align 4, !tbaa !374
  ret void
}

; Function Attrs: nounwind mustprogress
define linkonce %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #0 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.0121 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not122 = icmp eq %struct.halide_profiler_pipeline_stats* %p.0121, null
  br i1 %tobool.not122, label %for.end, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.0123 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.0121, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %land.lhs.true, label %for.inc

land.lhs.true:                                    ; preds = %for.body
  %num_funcs1 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 9
  %1 = load i32, i32* %num_funcs1, align 8, !tbaa !351
  %cmp2 = icmp eq i32 %1, %num_funcs
  br i1 %cmp2, label %cleanup62, label %for.inc

for.inc:                                          ; preds = %land.lhs.true, %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.0123, i64 0, i32 8
  %2 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %2, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %for.end, label %for.body, !llvm.loop !375

for.end:                                          ; preds = %for.inc, %entry
  %call4 = tail call i8* @malloc(i64 96) #16
  %3 = bitcast i8* %call4 to %struct.halide_profiler_pipeline_stats*
  %tobool5.not = icmp eq i8* %call4, null
  br i1 %tobool5.not, label %cleanup62, label %if.end7

if.end7:                                          ; preds = %for.end
  %4 = bitcast %struct.halide_profiler_pipeline_stats** %pipelines to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !371
  %next9 = getelementptr inbounds i8, i8* %call4, i64 64
  %6 = bitcast i8* %next9 to i8**
  store i8* %5, i8** %6, align 8, !tbaa !372
  %name10 = getelementptr inbounds i8, i8* %call4, i64 48
  %7 = bitcast i8* %name10 to i8**
  store i8* %pipeline_name, i8** %7, align 8, !tbaa !346
  %first_free_id = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 2
  %8 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %first_func_id = getelementptr inbounds i8, i8* %call4, i64 76
  %9 = bitcast i8* %first_func_id to i32*
  store i32 %8, i32* %9, align 4, !tbaa !376
  %num_funcs11 = getelementptr inbounds i8, i8* %call4, i64 72
  %10 = bitcast i8* %num_funcs11 to i32*
  store i32 %num_funcs, i32* %10, align 8, !tbaa !351
  %runs = getelementptr inbounds i8, i8* %call4, i64 80
  %11 = bitcast i8* %runs to i32*
  store i32 0, i32* %11, align 8, !tbaa !343
  %samples = getelementptr inbounds i8, i8* %call4, i64 84
  %12 = bitcast i8* %samples to i32*
  store i32 0, i32* %12, align 4, !tbaa !347
  %13 = bitcast i8* %call4 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %13, align 8, !tbaa !110
  %num_allocs = getelementptr inbounds i8, i8* %call4, i64 88
  %14 = bitcast i8* %num_allocs to i32*
  store i32 0, i32* %14, align 8, !tbaa !348
  %active_threads_numerator = getelementptr inbounds i8, i8* %call4, i64 32
  %15 = bitcast i8* %active_threads_numerator to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %15, align 8, !tbaa !110
  %conv = sext i32 %num_funcs to i64
  %mul = mul nsw i64 %conv, 72
  %call12 = tail call i8* @malloc(i64 %mul) #16
  %funcs = getelementptr inbounds i8, i8* %call4, i64 56
  %16 = bitcast i8* %funcs to i8**
  store i8* %call12, i8** %16, align 8, !tbaa !352
  %tobool14.not = icmp eq i8* %call12, null
  %17 = bitcast i8* %call12 to %struct.halide_profiler_func_stats*
  br i1 %tobool14.not, label %if.then15, label %for.cond17.preheader

for.cond17.preheader:                             ; preds = %if.end7
  %cmp18119 = icmp sgt i32 %num_funcs, 0
  br i1 %cmp18119, label %for.body20.lr.ph, label %for.cond.cleanup19

for.body20.lr.ph:                                 ; preds = %for.cond17.preheader
  %wide.trip.count = zext i32 %num_funcs to i64
  %xtraiter = and i64 %wide.trip.count, 1
  %18 = icmp eq i32 %num_funcs, 1
  br i1 %18, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20.lr.ph.new

for.body20.lr.ph.new:                             ; preds = %for.body20.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 4294967294
  br label %for.body20

if.then15:                                        ; preds = %if.end7
  tail call void @free(i8* nonnull %call4) #16
  br label %cleanup62

for.cond.cleanup19.loopexit.unr-lcssa:            ; preds = %for.body20, %for.body20.lr.ph
  %indvars.iv.unr = phi i64 [ 0, %for.body20.lr.ph ], [ %indvars.iv.next.1, %for.body20 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %for.cond.cleanup19, label %for.body20.epil

for.body20.epil:                                  ; preds = %for.cond.cleanup19.loopexit.unr-lcssa
  %time22.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 0
  store i64 0, i64* %time22.epil, align 8, !tbaa !356
  %arrayidx24.epil = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.unr
  %19 = load i64, i64* %arrayidx24.epil, align 8, !tbaa !110
  %20 = inttoptr i64 %19 to i8*
  %name28.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 7
  store i8* %20, i8** %name28.epil, align 8, !tbaa !357
  %memory_current32.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 1
  %num_allocs44.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 8
  store i32 0, i32* %num_allocs44.epil, align 8, !tbaa !366
  %21 = bitcast i64* %memory_current32.epil to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %21, align 8, !tbaa !110
  %active_threads_numerator51.epil = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.unr, i32 5
  %22 = bitcast i64* %active_threads_numerator51.epil to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %22, align 8, !tbaa !110
  br label %for.cond.cleanup19

for.cond.cleanup19:                               ; preds = %for.body20.epil, %for.cond.cleanup19.loopexit.unr-lcssa, %for.cond17.preheader
  %23 = load i32, i32* %first_free_id, align 4, !tbaa !374
  %add = add nsw i32 %23, %num_funcs
  store i32 %add, i32* %first_free_id, align 4, !tbaa !374
  store i8* %call4, i8** %4, align 8, !tbaa !371
  br label %cleanup62

for.body20:                                       ; preds = %for.body20, %for.body20.lr.ph.new
  %indvars.iv = phi i64 [ 0, %for.body20.lr.ph.new ], [ %indvars.iv.next.1, %for.body20 ]
  %niter = phi i64 [ %unroll_iter, %for.body20.lr.ph.new ], [ %niter.nsub.1, %for.body20 ]
  %time22 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 0
  store i64 0, i64* %time22, align 8, !tbaa !356
  %arrayidx24 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv
  %24 = load i64, i64* %arrayidx24, align 8, !tbaa !110
  %25 = inttoptr i64 %24 to i8*
  %name28 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 7
  store i8* %25, i8** %name28, align 8, !tbaa !357
  %memory_current32 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 1
  %num_allocs44 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 8
  store i32 0, i32* %num_allocs44, align 8, !tbaa !366
  %26 = bitcast i64* %memory_current32 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %26, align 8, !tbaa !110
  %active_threads_numerator51 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv, i32 5
  %27 = bitcast i64* %active_threads_numerator51 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %27, align 8, !tbaa !110
  %indvars.iv.next = or i64 %indvars.iv, 1
  %time22.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 0
  store i64 0, i64* %time22.1, align 8, !tbaa !356
  %arrayidx24.1 = getelementptr inbounds i64, i64* %func_names, i64 %indvars.iv.next
  %28 = load i64, i64* %arrayidx24.1, align 8, !tbaa !110
  %29 = inttoptr i64 %28 to i8*
  %name28.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 7
  store i8* %29, i8** %name28.1, align 8, !tbaa !357
  %memory_current32.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 1
  %num_allocs44.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 8
  store i32 0, i32* %num_allocs44.1, align 8, !tbaa !366
  %30 = bitcast i64* %memory_current32.1 to <4 x i64>*
  store <4 x i64> zeroinitializer, <4 x i64>* %30, align 8, !tbaa !110
  %active_threads_numerator51.1 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %17, i64 %indvars.iv.next, i32 5
  %31 = bitcast i64* %active_threads_numerator51.1 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %31, align 8, !tbaa !110
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1 = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1, label %for.cond.cleanup19.loopexit.unr-lcssa, label %for.body20, !llvm.loop !377

cleanup62:                                        ; preds = %land.lhs.true, %for.cond.cleanup19, %if.then15, %for.end
  %retval.2 = phi %struct.halide_profiler_pipeline_stats* [ %3, %for.cond.cleanup19 ], [ null, %if.then15 ], [ null, %for.end ], [ %p.0123, %land.lhs.true ]
  ret %struct.halide_profiler_pipeline_stats* %retval.2
}

; Function Attrs: nounwind mustprogress
define linkonce void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* %s, i32 %func_id, i64 %time, i32 %active_threads) local_unnamed_addr #0 {
entry:
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 5
  %p.055 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not56 = icmp eq %struct.halide_profiler_pipeline_stats* %p.055, null
  br i1 %tobool.not56, label %cleanup25, label %for.body

for.body:                                         ; preds = %entry, %if.end23
  %p.058 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %if.end23 ], [ %p.055, %entry ]
  %p_prev.057 = phi %struct.halide_profiler_pipeline_stats* [ %p.058, %if.end23 ], [ null, %entry ]
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 10
  %0 = load i32, i32* %first_func_id, align 4, !tbaa !376
  %cmp.not = icmp sgt i32 %0, %func_id
  br i1 %cmp.not, label %if.end23, label %land.lhs.true

land.lhs.true:                                    ; preds = %for.body
  %num_funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 9
  %1 = load i32, i32* %num_funcs, align 8, !tbaa !351
  %add = add nsw i32 %1, %0
  %cmp2 = icmp sgt i32 %add, %func_id
  br i1 %cmp2, label %if.then, label %if.end23

if.then:                                          ; preds = %land.lhs.true
  %tobool3.not = icmp eq %struct.halide_profiler_pipeline_stats* %p_prev.057, null
  br i1 %tobool3.not, label %if.end, label %if.then4

if.then4:                                         ; preds = %if.then
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %2 = load i8*, i8** %next, align 8, !tbaa !372
  %next5 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p_prev.057, i64 0, i32 8
  store i8* %2, i8** %next5, align 8, !tbaa !372
  %3 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  store %struct.halide_profiler_pipeline_stats* %p.055, %struct.halide_profiler_pipeline_stats** %3, align 8, !tbaa !372
  store %struct.halide_profiler_pipeline_stats* %p.058, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !371
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %funcs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 7
  %4 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %funcs, align 8, !tbaa !352
  %idx.ext = sext i32 %func_id to i64
  %add.ptr = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %4, i64 %idx.ext
  %idx.ext10 = sext i32 %0 to i64
  %idx.neg = sub nsw i64 0, %idx.ext10
  %add.ptr11 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr, i64 %idx.neg
  %time12 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 0
  %5 = load i64, i64* %time12, align 8, !tbaa !356
  %add13 = add i64 %5, %time
  store i64 %add13, i64* %time12, align 8, !tbaa !356
  %conv = sext i32 %active_threads to i64
  %active_threads_numerator = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %add.ptr11, i64 0, i32 5
  %6 = bitcast i64* %active_threads_numerator to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 8, !tbaa !110
  %8 = insertelement <2 x i64> <i64 poison, i64 1>, i64 %conv, i32 0
  %9 = add <2 x i64> %7, %8
  %10 = bitcast i64* %active_threads_numerator to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 8, !tbaa !110
  %time16 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 0
  %11 = load i64, i64* %time16, align 8, !tbaa !341
  %add17 = add i64 %11, %time
  store i64 %add17, i64* %time16, align 8, !tbaa !341
  %samples = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 12
  %12 = load i32, i32* %samples, align 4, !tbaa !347
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %samples, align 4, !tbaa !347
  %active_threads_numerator19 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 4
  %13 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !tbaa !110
  %15 = add <2 x i64> %14, %8
  %16 = bitcast i64* %active_threads_numerator19 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %16, align 8, !tbaa !110
  ret void

if.end23:                                         ; preds = %land.lhs.true, %for.body
  %next24 = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.058, i64 0, i32 8
  %17 = bitcast i8** %next24 to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %17, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup25, label %for.body, !llvm.loop !378

cleanup25:                                        ; preds = %if.end23, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_profiler_sample(%struct.halide_profiler_state* %s, i64* %prev_t) local_unnamed_addr #0 {
entry:
  %func = alloca i32, align 4
  %active_threads = alloca i32, align 4
  %0 = bitcast i32* %func to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #11
  %1 = bitcast i32* %active_threads to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #11
  %get_remote_profiler_state = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 6
  %2 = load void (i32*, i32*)*, void (i32*, i32*)** %get_remote_profiler_state, align 8, !tbaa !379
  %tobool.not = icmp eq void (i32*, i32*)* %2, null
  br i1 %tobool.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  call void %2(i32* nonnull %func, i32* nonnull %active_threads) #16
  br label %if.end

if.else:                                          ; preds = %entry
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 3
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  store i32 %3, i32* %func, align 4, !tbaa !73
  %active_threads2 = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 4
  %4 = load i32, i32* %active_threads2, align 4, !tbaa !380
  store i32 %4, i32* %active_threads, align 4, !tbaa !73
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %call = call i64 @halide_current_time_ns(i8* null) #16
  %5 = load i32, i32* %func, align 4, !tbaa !73
  %cmp = icmp eq i32 %5, -2
  br i1 %cmp, label %cleanup, label %if.else4

if.else4:                                         ; preds = %if.end
  %cmp5 = icmp sgt i32 %5, -1
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.else4
  %6 = load i64, i64* %prev_t, align 8, !tbaa !110
  %sub = sub i64 %call, %6
  %7 = load i32, i32* %active_threads, align 4, !tbaa !73
  call void @_ZN6Halide7Runtime8Internal9bill_funcEP21halide_profiler_stateiyi(%struct.halide_profiler_state* nonnull %s, i32 %5, i64 %sub, i32 %7) #17
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %if.else4
  store i64 %call, i64* %prev_t, align 8, !tbaa !110
  %sleep_time = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %s, i64 0, i32 1
  %8 = load i32, i32* %sleep_time, align 8, !tbaa !381
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.end
  %retval.0 = phi i32 [ %8, %if.end8 ], [ -1, %if.end ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #11
  ret i32 %retval.0
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv(i8* %0) #4 {
entry:
  %t = alloca i64, align 8
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %current_func = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 3
  %1 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not23 = icmp eq i32 %1, -2
  br i1 %cmp.not23, label %while.end8, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %entry
  %2 = bitcast i64* %t to i8*
  br label %while.body

while.body:                                       ; preds = %while.end, %while.body.lr.ph
  %call1 = call i64 @halide_current_time_ns(i8* null) #16
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #11
  store i64 %call1, i64* %t, align 8, !tbaa !110
  %call420 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* nonnull %call, i64* nonnull %t) #17
  %cmp521 = icmp slt i32 %call420, 0
  br i1 %cmp521, label %while.end, label %if.end

if.end:                                           ; preds = %while.body, %if.end
  %call422 = phi i32 [ %call4, %if.end ], [ %call420, %while.body ]
  call void @halide_mutex_unlock(%struct.halide_mutex* %lock) #16
  call void @halide_sleep_ms(i8* null, i32 %call422) #16
  call void @halide_mutex_lock(%struct.halide_mutex* %lock) #16
  %call4 = call i32 @halide_profiler_sample(%struct.halide_profiler_state* %call, i64* nonnull %t) #17
  %cmp5 = icmp slt i32 %call4, 0
  br i1 %cmp5, label %while.end, label %if.end

while.end:                                        ; preds = %if.end, %while.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #11
  %3 = load i32, i32* %current_func, align 8, !tbaa !340
  %cmp.not = icmp eq i32 %3, -2
  br i1 %cmp.not, label %while.end8, label %while.body, !llvm.loop !382

while.end8:                                       ; preds = %while.end, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock) #16
  ret void
}

; Function Attrs: nounwind
define weak %struct.halide_profiler_pipeline_stats* @halide_profiler_get_pipeline_state(i8* %pipeline_name) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %pipelines = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 5
  %p.013 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %pipelines, align 8, !tbaa !10
  %tobool.not14 = icmp eq %struct.halide_profiler_pipeline_stats* %p.013, null
  br i1 %tobool.not14, label %cleanup, label %for.body

for.body:                                         ; preds = %entry, %for.inc
  %p.015 = phi %struct.halide_profiler_pipeline_stats* [ %p.0, %for.inc ], [ %p.013, %entry ]
  %name = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 6
  %0 = load i8*, i8** %name, align 8, !tbaa !346
  %cmp = icmp eq i8* %0, %pipeline_name
  br i1 %cmp, label %cleanup, label %for.inc

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %p.015, i64 0, i32 8
  %1 = bitcast i8** %next to %struct.halide_profiler_pipeline_stats**
  %p.0 = load %struct.halide_profiler_pipeline_stats*, %struct.halide_profiler_pipeline_stats** %1, align 8, !tbaa !10
  %tobool.not = icmp eq %struct.halide_profiler_pipeline_stats* %p.0, null
  br i1 %tobool.not, label %cleanup, label %for.body, !llvm.loop !383

cleanup:                                          ; preds = %for.inc, %for.body, %entry
  %p.0.lcssa = phi %struct.halide_profiler_pipeline_stats* [ null, %entry ], [ null, %for.inc ], [ %p.015, %for.body ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret %struct.halide_profiler_pipeline_stats* %p.0.lcssa
}

; Function Attrs: nounwind
define weak i32 @halide_profiler_pipeline_start(i8* %user_context, i8* %pipeline_name, i32 %num_funcs, i64* %func_names) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  %sampling_thread = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 7
  %0 = load %struct.halide_thread*, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  %tobool.not = icmp eq %struct.halide_thread* %0, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @halide_start_clock(i8* %user_context) #16
  %call2 = tail call %struct.halide_thread* @halide_spawn_thread(void (i8*)* nonnull @_ZN6Halide7Runtime8Internal24sampling_profiler_threadEPv, i8* null) #16
  store %struct.halide_thread* %call2, %struct.halide_thread** %sampling_thread, align 8, !tbaa !338
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %call4 = tail call %struct.halide_profiler_pipeline_stats* @_ZN6Halide7Runtime8Internal23find_or_create_pipelineEPKciPKy(i8* %pipeline_name, i32 %num_funcs, i64* %func_names) #17
  %tobool5.not = icmp eq %struct.halide_profiler_pipeline_stats* %call4, null
  br i1 %tobool5.not, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %call7 = tail call i32 @halide_error_out_of_memory(i8* %user_context) #16
  br label %cleanup

if.end8:                                          ; preds = %if.end
  %runs = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 11
  %1 = load i32, i32* %runs, align 8, !tbaa !343
  %inc = add nsw i32 %1, 1
  store i32 %inc, i32* %runs, align 8, !tbaa !343
  %first_func_id = getelementptr inbounds %struct.halide_profiler_pipeline_stats, %struct.halide_profiler_pipeline_stats* %call4, i64 0, i32 10
  %2 = load i32, i32* %first_func_id, align 4, !tbaa !376
  br label %cleanup

cleanup:                                          ; preds = %if.end8, %if.then6
  %retval.0 = phi i32 [ %2, %if.end8 ], [ %call7, %if.then6 ]
  tail call void @halide_mutex_unlock(%struct.halide_mutex* nonnull %lock.i) #16
  ret i32 %retval.0
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_stack_peak_update(i8* %user_context, i8* %pipeline_state, i64* %f_values) local_unnamed_addr #0 {
entry:
  %cmp.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp.not, label %if.then, label %do.end

if.then:                                          ; preds = %entry
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.186, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end

do.end:                                           ; preds = %if.then, %entry
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp118 = icmp sgt i32 %1, 0
  br i1 %cmp118, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %do.end
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %do.end
  ret void

for.body:                                         ; preds = %for.inc, %for.body.lr.ph
  %3 = phi i32 [ %1, %for.body.lr.ph ], [ %9, %for.inc ]
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i64, i64* %f_values, i64 %indvars.iv
  %4 = load i64, i64* %arrayidx, align 8, !tbaa !110
  %cmp2.not = icmp eq i64 %4, 0
  br i1 %cmp2.not, label %for.inc, label %if.then3

if.then3:                                         ; preds = %for.body
  %5 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %stack_peak = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %5, i64 %indvars.iv, i32 4
  %6 = load i64, i64* %stack_peak, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %if.then3
  %old_val.0.i = phi i64 [ %6, %if.then3 ], [ %8, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %4
  br i1 %cmp.i, label %while.body.i, label %for.inc.loopexit

while.body.i:                                     ; preds = %while.cond.i
  %7 = cmpxchg i64* %stack_peak, i64 %old_val.0.i, i64 %4 seq_cst seq_cst
  %8 = extractvalue { i64, i1 } %7, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %8
  br i1 %cmp1.i, label %for.inc.loopexit, label %while.cond.i, !llvm.loop !384

for.inc.loopexit:                                 ; preds = %while.body.i, %while.cond.i
  %.pre = load i32, i32* %0, align 8, !tbaa !351
  br label %for.inc

for.inc:                                          ; preds = %for.inc.loopexit, %for.body
  %9 = phi i32 [ %.pre, %for.inc.loopexit ], [ %3, %for.body ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %10 = sext i32 %9 to i64
  %cmp1 = icmp slt i64 %indvars.iv.next, %10
  br i1 %cmp1, label %for.body, label %for.cond.cleanup, !llvm.loop !385
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_allocate(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %incr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %incr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.1.187, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.2.188, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.3.189, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %num_allocs = getelementptr inbounds i8, i8* %pipeline_state, i64 88
  %4 = bitcast i8* %num_allocs to i32*
  %5 = atomicrmw add i32* %4, i32 1 seq_cst
  %memory_total = getelementptr inbounds i8, i8* %pipeline_state, i64 24
  %6 = bitcast i8* %memory_total to i64*
  %7 = atomicrmw add i64* %6, i64 %incr seq_cst
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %8 = bitcast i8* %memory_current to i64*
  %9 = atomicrmw add i64* %8, i64 %incr seq_cst
  %10 = add i64 %9, %incr
  %memory_peak = getelementptr inbounds i8, i8* %pipeline_state, i64 16
  %11 = bitcast i8* %memory_peak to i64*
  %12 = load i64, i64* %11, align 8, !tbaa !110
  br label %while.cond.i

while.cond.i:                                     ; preds = %while.body.i, %do.end15
  %old_val.0.i = phi i64 [ %12, %do.end15 ], [ %14, %while.body.i ]
  %cmp.i = icmp ult i64 %old_val.0.i, %10
  br i1 %cmp.i, label %while.body.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit

while.body.i:                                     ; preds = %while.cond.i
  %13 = cmpxchg i64* %11, i64 %old_val.0.i, i64 %10 seq_cst seq_cst
  %14 = extractvalue { i64, i1 } %13, 0
  %cmp1.i = icmp eq i64 %old_val.0.i, %14
  br i1 %cmp1.i, label %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit, label %while.cond.i, !llvm.loop !384

_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit: ; preds = %while.body.i, %while.cond.i
  %num_allocs16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 8
  %15 = atomicrmw add i32* %num_allocs16, i32 1 seq_cst
  %memory_total17 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 3
  %16 = atomicrmw add i64* %memory_total17, i64 %incr seq_cst
  %memory_current18 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %17 = atomicrmw add i64* %memory_current18, i64 %incr seq_cst
  %18 = add i64 %17, %incr
  %memory_peak19 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 2
  %19 = load i64, i64* %memory_peak19, align 8, !tbaa !110
  br label %while.cond.i43

while.cond.i43:                                   ; preds = %while.body.i45, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit
  %old_val.0.i41 = phi i64 [ %19, %_ZN12_GLOBAL__N_125sync_compare_max_and_swapIyEEvPT_S1_.exit ], [ %21, %while.body.i45 ]
  %cmp.i42 = icmp ult i64 %old_val.0.i41, %18
  br i1 %cmp.i42, label %while.body.i45, label %return

while.body.i45:                                   ; preds = %while.cond.i43
  %20 = cmpxchg i64* %memory_peak19, i64 %old_val.0.i41, i64 %18 seq_cst seq_cst
  %21 = extractvalue { i64, i1 } %20, 0
  %cmp1.i44 = icmp eq i64 %old_val.0.i41, %21
  br i1 %cmp1.i44, label %return, label %while.cond.i43, !llvm.loop !384

return:                                           ; preds = %while.body.i45, %while.cond.i43, %entry
  ret void
}

; Function Attrs: nounwind mustprogress
define weak void @halide_profiler_memory_free(i8* %user_context, i8* %pipeline_state, i32 %func_id, i64 %decr) local_unnamed_addr #0 {
entry:
  %cmp = icmp eq i64 %decr, 0
  br i1 %cmp, label %return, label %if.end

if.end:                                           ; preds = %entry
  %cmp1.not = icmp eq i8* %pipeline_state, null
  br i1 %cmp1.not, label %if.then2, label %do.body4

if.then2:                                         ; preds = %if.end
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.4.190, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body4

do.body4:                                         ; preds = %if.then2, %if.end
  %cmp5 = icmp sgt i32 %func_id, -1
  br i1 %cmp5, label %do.body10, label %if.then6

if.then6:                                         ; preds = %do.body4
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.5.191, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.body10

do.body10:                                        ; preds = %if.then6, %do.body4
  %num_funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 72
  %0 = bitcast i8* %num_funcs to i32*
  %1 = load i32, i32* %0, align 8, !tbaa !351
  %cmp11 = icmp sgt i32 %1, %func_id
  br i1 %cmp11, label %do.end15, label %if.then12

if.then12:                                        ; preds = %do.body10
  tail call void @halide_print(i8* %user_context, i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.6.192, i64 0, i64 0)) #16
  tail call void @abort() #16
  br label %do.end15

do.end15:                                         ; preds = %if.then12, %do.body10
  %funcs = getelementptr inbounds i8, i8* %pipeline_state, i64 56
  %2 = bitcast i8* %funcs to %struct.halide_profiler_func_stats**
  %3 = load %struct.halide_profiler_func_stats*, %struct.halide_profiler_func_stats** %2, align 8, !tbaa !352
  %idxprom = sext i32 %func_id to i64
  %memory_current = getelementptr inbounds i8, i8* %pipeline_state, i64 8
  %4 = bitcast i8* %memory_current to i64*
  %5 = atomicrmw sub i64* %4, i64 %decr seq_cst
  %memory_current16 = getelementptr inbounds %struct.halide_profiler_func_stats, %struct.halide_profiler_func_stats* %3, i64 %idxprom, i32 1
  %6 = atomicrmw sub i64* %memory_current16, i64 %decr seq_cst
  br label %return

return:                                           ; preds = %do.end15, %entry
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_report(i8* %user_context) local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_report_unlocked(i8* %user_context, %struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind
define weak void @halide_profiler_reset() local_unnamed_addr #4 {
entry:
  %call = tail call %struct.halide_profiler_state* @halide_profiler_get_state() #17
  %lock.i = getelementptr inbounds %struct.halide_profiler_state, %struct.halide_profiler_state* %call, i64 0, i32 0
  tail call void @halide_mutex_lock(%struct.halide_mutex* %lock.i) #16
  tail call void @halide_profiler_reset_unlocked(%struct.halide_profiler_state* %call) #17
  tail call void @halide_mutex_unlock(%struct.halide_mutex* %lock.i) #16
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_profiler_pipeline_end(i8* %user_context, i8* %state) local_unnamed_addr #2 {
entry:
  %current_func = getelementptr inbounds i8, i8* %state, i64 16
  %0 = bitcast i8* %current_func to i32*
  store i32 -1, i32* %0, align 8, !tbaa !340
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_memory_is_initialized(i8* %user_context, i8* %ptr, i64 %len, i8* %name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_check_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b, i8* %buf_name) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 @halide_msan_annotate_buffer_is_initialized(i8* %user_context, %struct.halide_buffer_t* %b) local_unnamed_addr #2 {
entry:
  ret i32 0
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_msan_annotate_buffer_is_initialized_as_destructor(i8* %user_context, i8* %b) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind
define weak i32 @halide_default_can_use_target_features(i32 %count, i64* %features) #4 {
entry:
  %tmp = alloca %"struct.Halide::Runtime::Internal::CpuFeatures", align 8
  tail call void @halide_mutex_lock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %0 = load i8, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15, !range !17
  %tobool.not = icmp eq i8 %0, 0
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #11
  call void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* nonnull sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %tmp) #16
  %call = call i8* @memcpy(i8* bitcast ([4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE to i8*), i8* nonnull %1, i64 32) #16
  store i8 1, i8* @_ZN6Halide7Runtime8Internal31halide_cpu_features_initializedE, align 1, !tbaa !15
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #11
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @halide_mutex_unlock(%struct.halide_mutex* nonnull @_ZN6Halide7Runtime8Internal36halide_cpu_features_initialized_lockE) #16
  %cmp.not = icmp eq i32 %count, 2
  br i1 %cmp.not, label %if.end2, label %if.then1

if.then1:                                         ; preds = %if.end
  call void @halide_error(i8* null, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.197, i64 0, i64 0)) #16
  br label %if.end2

if.end2:                                          ; preds = %if.then1, %if.end
  %2 = load i64, i64* %features, align 8, !tbaa !110
  %3 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 0), align 8, !tbaa !110
  %and = and i64 %3, %2
  %cmp6.not = icmp eq i64 %and, 0
  br i1 %cmp6.not, label %for.inc.critedge, label %if.then7

if.then7:                                         ; preds = %if.end2
  %4 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 2), align 8, !tbaa !110
  %and10 = and i64 %4, %and
  %cmp11.not = icmp eq i64 %and10, %and
  br i1 %cmp11.not, label %for.inc.critedge, label %cleanup15

for.inc.critedge:                                 ; preds = %if.then7, %if.end2
  %arrayidx.1 = getelementptr inbounds i64, i64* %features, i64 1
  %5 = load i64, i64* %arrayidx.1, align 8, !tbaa !110
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 1), align 8, !tbaa !110
  %and.1 = and i64 %6, %5
  %cmp6.not.1 = icmp eq i64 %and.1, 0
  br i1 %cmp6.not.1, label %for.inc.critedge.1, label %if.then7.1

cleanup15:                                        ; preds = %for.inc.critedge.1, %if.then7.1, %if.then7
  %cmp3.lcssa = phi i32 [ 0, %if.then7 ], [ 0, %if.then7.1 ], [ 1, %for.inc.critedge.1 ]
  ret i32 %cmp3.lcssa

if.then7.1:                                       ; preds = %for.inc.critedge
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZN6Halide7Runtime8Internal27halide_cpu_features_storageE, i64 0, i64 3), align 8, !tbaa !110
  %and10.1 = and i64 %7, %and.1
  %cmp11.not.1 = icmp eq i64 %and10.1, %and.1
  br i1 %cmp11.not.1, label %for.inc.critedge.1, label %cleanup15

for.inc.critedge.1:                               ; preds = %if.then7.1, %for.inc.critedge
  br label %cleanup15
}

; Function Attrs: nounwind willreturn mustprogress
define weak i32 (i32, i64*)* @halide_set_custom_can_use_target_features(i32 (i32, i64*)* %fn) local_unnamed_addr #2 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  store i32 (i32, i64*)* %fn, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  ret i32 (i32, i64*)* %0
}

; Function Attrs: nounwind mustprogress
define weak i32 @halide_can_use_target_features(i32 %count, i64* %features) local_unnamed_addr #0 {
entry:
  %0 = load i32 (i32, i64*)*, i32 (i32, i64*)** @_ZN6Halide7Runtime8Internal30custom_can_use_target_featuresE, align 8, !tbaa !10
  %call = tail call i32 %0(i32 %count, i64* %features) #16
  ret i32 %call
}

; Function Attrs: nounwind
define linkonce void @_ZN6Halide7Runtime8Internal23halide_get_cpu_featuresEv(%"struct.Halide::Runtime::Internal::CpuFeatures"* noalias sret(%"struct.Halide::Runtime::Internal::CpuFeatures") align 8 %agg.result) local_unnamed_addr #8 {
entry:
  %info = alloca [4 x i32], align 4
  %info2 = alloca [4 x i32], align 4
  %info3 = alloca [4 x i32], align 4
  %arrayidx3.i = getelementptr inbounds %"struct.Halide::Runtime::Internal::CpuFeatures", %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result, i64 0, i32 1, i64 0
  %0 = bitcast %"struct.Halide::Runtime::Internal::CpuFeatures"* %agg.result to <4 x i64>*
  store <4 x i64> <i64 34084860461808, i64 0, i64 0, i64 0>, <4 x i64>* %0, align 8, !tbaa !110
  %1 = bitcast [4 x i32]* %info to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #11
  %arraydecay = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 0
  store i32 1, i32* %arraydecay, align 4, !tbaa !73
  %arrayidx1.i110 = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i110, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay) #11
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %info, i64 0, i64 2
  %2 = load i32, i32* %arrayidx, align 4, !tbaa !73
  %and = lshr i32 %2, 15
  %3 = and i32 %and, 16
  %and2 = lshr i32 %2, 23
  %4 = and i32 %and2, 32
  %5 = or i32 %4, %3
  %and6 = lshr i32 %2, 20
  %6 = and i32 %and6, 512
  %7 = or i32 %5, %6
  %and14 = lshr i32 %2, 5
  %8 = and i32 %and14, 128
  %9 = or i32 %7, %8
  %10 = zext i32 %9 to i64
  %11 = and i32 %2, 805834752
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %entry
  store i64 %10, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %14

14:                                               ; preds = %13, %entry
  %15 = and i32 %2, 1879048192
  %.not = icmp eq i32 %15, 1879048192
  br i1 %.not, label %if.then30, label %if.end67

if.then30:                                        ; preds = %14
  %16 = bitcast [4 x i32]* %info2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %16) #11
  %arraydecay31 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 0
  store i32 7, i32* %arraydecay31, align 4, !tbaa !73
  %arrayidx1.i99 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 1
  store i32 0, i32* %arrayidx1.i99, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay31) #11
  %17 = load i32, i32* %arrayidx1.i99, align 4, !tbaa !73
  %and33 = and i32 %17, 32
  %cmp34.not = icmp eq i32 %and33, 0
  br i1 %cmp34.not, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.then30
  %or.i98 = or i64 %10, 64
  store i64 %or.i98, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %if.then30
  %18 = phi i64 [ %or.i98, %if.then35 ], [ %10, %if.then30 ]
  %and38 = and i32 %17, 268500992
  %cmp39 = icmp eq i32 %and38, 268500992
  br i1 %cmp39, label %if.then40, label %if.end66

if.then40:                                        ; preds = %if.end36
  %and42 = and i32 %17, 469827584
  %cmp43 = icmp eq i32 %and42, 469827584
  %spec.select.v = select i1 %cmp43, i64 3298534883328, i64 1099511627776
  %spec.select = or i64 %18, %spec.select.v
  %and47 = and i32 %17, -805109760
  %cmp48 = icmp eq i32 %and47, -805109760
  %or.i92 = or i64 %spec.select, 4398046511104
  %spec.select130 = select i1 %cmp48, i64 %or.i92, i64 %spec.select
  store i64 %spec.select130, i64* %arrayidx3.i, align 8, !tbaa !110
  %and52 = and i32 %17, -803012608
  %cmp53 = icmp eq i32 %and52, -803012608
  br i1 %cmp53, label %if.then54, label %if.end66

if.then54:                                        ; preds = %if.then40
  %or.i90 = or i64 %spec.select130, 8796093022208
  store i64 %or.i90, i64* %arrayidx3.i, align 8, !tbaa !110
  %19 = bitcast [4 x i32]* %info3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #11
  %arraydecay55 = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 0
  store i32 7, i32* %arraydecay55, align 4, !tbaa !73
  %arrayidx1.i = getelementptr inbounds [4 x i32], [4 x i32]* %info3, i64 0, i64 1
  store i32 1, i32* %arrayidx1.i, align 4, !tbaa !73
  call void asm sideeffect inteldialect "xchg rbx, rsi\0A\09mov eax, dword ptr $$0 $0\0A\09mov ecx, dword ptr $$4 $0\0A\09cpuid\0A\09mov dword ptr $$0 $0, eax\0A\09mov dword ptr $$4 $0, ebx\0A\09mov dword ptr $$8 $0, ecx\0A\09mov dword ptr $$12 $0, edx\0A\09xchg rbx, rsi", "=*m,~{eax},~{ebx},~{ecx},~{edx},~{esi},~{dirflag},~{fpsr},~{flags}"(i32* nonnull %arraydecay55) #11
  %arrayidx56 = getelementptr inbounds [4 x i32], [4 x i32]* %info2, i64 0, i64 2
  %20 = load i32, i32* %arrayidx56, align 4, !tbaa !73
  %and57 = and i32 %20, 2048
  %cmp58.not = icmp eq i32 %and57, 0
  br i1 %cmp58.not, label %if.end64, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %if.then54
  %21 = load i32, i32* %arraydecay55, align 4, !tbaa !73
  %and61 = and i32 %21, 32
  %cmp62.not = icmp eq i32 %and61, 0
  br i1 %cmp62.not, label %if.end64, label %if.then63

if.then63:                                        ; preds = %land.lhs.true59
  %or.i = or i64 %spec.select130, 26388279066624
  store i64 %or.i, i64* %arrayidx3.i, align 8, !tbaa !110
  br label %if.end64

if.end64:                                         ; preds = %if.then63, %land.lhs.true59, %if.then54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #11
  br label %if.end66

if.end66:                                         ; preds = %if.end64, %if.then40, %if.end36
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %16) #11
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %14
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #11
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_use_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind willreturn mustprogress
define weak void @halide_release_jit_module() local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16>, <16 x i16>) #9

; Function Attrs: nounwind
define i32 @blur3x3(%struct.halide_buffer_t* noalias nocapture readonly %input.buffer, %struct.halide_buffer_t* noalias nocapture readonly %blur_y.buffer) local_unnamed_addr #10 {
entry:
  %blur_x.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep2279 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 0
  %.fca.1.gep2280 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep2281 = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot, i64 0, i32 2
  %read_input.pseudostack_slot = alloca %struct.halide_pseudostack_slot_t, align 8
  %.fca.0.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 0
  %0 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %0, i8 0, i64 24, i1 false)
  %.fca.1.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 1
  %.fca.2.gep = getelementptr inbounds %struct.halide_pseudostack_slot_t, %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot, i64 0, i32 2
  %host.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 2
  %1 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %1, i8 0, i64 24, i1 false)
  %dim.i = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %blur_y.buffer, i64 0, i32 6
  %2 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 0
  %3 = load i32, i32* %min.i, align 4, !tbaa !181
  %extent.i = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 0, i32 1
  %4 = load i32, i32* %extent.i, align 4, !tbaa !178
  %min.i2600 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 0
  %5 = load i32, i32* %min.i2600, align 4, !tbaa !181
  %extent.i2602 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 1
  %6 = load i32, i32* %extent.i2602, align 4, !tbaa !178
  %stride.i2604 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %2, i64 1, i32 2
  %7 = load i32, i32* %stride.i2604, align 4, !tbaa !182
  %host.i2605 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 2
  %dim.i2606 = getelementptr inbounds %struct.halide_buffer_t, %struct.halide_buffer_t* %input.buffer, i64 0, i32 6
  %8 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2606, align 8, !tbaa !176
  %min.i2607 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 0
  %9 = load i32, i32* %min.i2607, align 4, !tbaa !181
  %extent.i2609 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 0, i32 1
  %10 = load i32, i32* %extent.i2609, align 4, !tbaa !178
  %min.i2613 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 0
  %11 = load i32, i32* %min.i2613, align 4, !tbaa !181
  %extent.i2615 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 1
  %12 = load i32, i32* %extent.i2615, align 4, !tbaa !178
  %stride.i2617 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %8, i64 1, i32 2
  %13 = load i32, i32* %stride.i2617, align 4, !tbaa !182
  %b22 = add nsw i32 %4, %3
  %t1590 = add nsw i32 %10, %9
  %14 = icmp slt i32 %4, 32
  %t1591 = select i1 %14, i32 %4, i32 32
  %15 = icmp sgt i32 %12, 0
  %16 = select i1 %15, i32 %12, i32 0
  %a40 = add nsw i32 %16, %11
  %t1593 = mul nsw i32 %7, %5
  %17 = add nsw i32 %4, 31
  %a3 = ashr i32 %17, 5
  %18 = icmp sgt i32 %4, 32
  %b21 = select i1 %18, i32 %4, i32 32
  %19 = add nuw nsw i32 %b21, 33
  %20 = lshr i32 %19, 5
  %21 = icmp slt i32 %a3, 1
  %b23 = select i1 %21, i32 %a3, i32 1
  %22 = sub i32 63, %3
  %23 = sub i32 %22, %t1591
  %24 = add i32 %23, %9
  %a5 = ashr i32 %24, 5
  %25 = icmp sgt i32 %a5, 0
  %a4 = select i1 %25, i32 %a5, i32 0
  %26 = icmp sgt i32 %20, %a4
  %b18 = select i1 %26, i32 %a4, i32 %20
  %b8 = add nsw i32 %t1591, -32
  %27 = icmp slt i32 %4, 0
  %28 = select i1 %27, i32 %4, i32 0
  %a6 = select i1 %18, i32 %28, i32 %b8
  %29 = icmp sgt i32 %b8, %a6
  %t1601 = select i1 %29, i32 %a6, i32 %b8
  %b19 = add nuw nsw i32 %b21, 1
  %a14 = add nsw i32 %4, -32
  %30 = add nsw i32 %4, -1
  %31 = and i32 %30, -32
  %a8 = select i1 %18, i32 %31, i32 %a14
  %32 = icmp sgt i32 %a8, %a14
  %33 = select i1 %32, i32 %a8, i32 %a14
  %34 = icmp sgt i32 %4, 0
  %35 = select i1 %34, i32 %4, i32 0
  %a9 = select i1 %18, i32 %35, i32 32
  %36 = icmp sgt i32 %a9, 32
  %37 = select i1 %36, i32 %a9, i32 32
  %38 = add nsw i32 %37, -1
  %39 = and i32 %38, -32
  %b16 = add nsw i32 %39, %33
  %a13 = add nsw i32 %b16, 32
  %40 = icmp sgt i32 %4, %a13
  %a12 = select i1 %40, i32 %a13, i32 %4
  %41 = icmp sgt i32 %b16, %a14
  %42 = select i1 %41, i32 %a14, i32 %b16
  %b14 = add nsw i32 %42, 33
  %43 = icmp sgt i32 %a12, %b14
  %a11 = select i1 %43, i32 %a12, i32 %b14
  %a15 = add nsw i32 %4, 2
  %44 = and i32 %b19, 2147483616
  %b17 = add nsw i32 %44, %t1591
  %45 = icmp sgt i32 %b17, %a15
  %46 = select i1 %45, i32 %a15, i32 %b17
  %b13 = add nsw i32 %46, -1
  %.not = icmp slt i32 %a11, %46
  %47 = select i1 %.not, i32 %b13, i32 %a11
  %48 = sub nsw i32 %47, %t1601
  %a24 = add nsw i32 %48, 1
  %49 = sub nsw i32 %t1590, %t1591
  %a18 = sub i32 %49, %3
  %a20 = add nsw i32 %t1590, 29
  %50 = icmp sgt i32 %b22, %a20
  %51 = select i1 %50, i32 %a20, i32 %b22
  %52 = sub i32 32, %3
  %53 = sub i32 %52, %t1591
  %a19 = add i32 %53, %51
  %54 = icmp sgt i32 %b21, %a19
  %55 = select i1 %54, i32 %a19, i32 %b21
  %b20 = add nsw i32 %55, -30
  %56 = icmp sgt i32 %b20, %a18
  %a17 = select i1 %56, i32 %a18, i32 %b20
  %.not2429 = icmp slt i32 %b21, %a17
  %57 = select i1 %.not2429, i32 %b19, i32 %a17
  %58 = ashr i32 %57, 5
  %a16 = add nsw i32 %58, 1
  %.not2430 = icmp slt i32 %58, %b18
  %t1580 = select i1 %.not2430, i32 %b18, i32 %a16
  %a21 = ashr i32 %4, 5
  %59 = icmp sgt i32 %a21, %b23
  %t1582 = select i1 %59, i32 %a21, i32 %b23
  %60 = add nsw i32 %6, 31
  %t1568 = ashr i32 %60, 5
  %61 = icmp sgt i32 %6, 0
  br i1 %61, label %"for blur_y.s0.y.y.preheader", label %"end for blur_y.s0.y.y", !prof !386

"for blur_y.s0.y.y.preheader":                    ; preds = %entry
  %62 = bitcast i8** %host.i2605 to i16**
  %63 = load i16*, i16** %62, align 8, !tbaa !172
  %64 = bitcast i8** %host.i to i16**
  %65 = load i16*, i16** %64, align 8, !tbaa !172
  %b24 = add nsw i32 %6, -32
  %.inv2515 = icmp slt i32 %48, 0
  %66 = select i1 %.inv2515, i32 0, i32 %a24
  %t2230 = zext i32 %66 to i64
  %67 = mul nuw nsw i64 %t2230, 68
  %68 = add nuw nsw i64 %67, 6
  %69 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b30 = add nsw i32 %12, %11
  %70 = sub nsw i32 %11, %5
  %71 = sub i32 %5, %11
  %t1608 = add nsw i32 %t1601, %3
  %t1606 = add nsw i32 %t1591, %3
  %b36 = add nsw i32 %12, -1
  %b37 = add nsw i32 %b22, 2
  %72 = add nsw i32 %t1590, -1
  %73 = insertelement <32 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <32 x i32> %73, <32 x i32> undef, <8 x i32> zeroinitializer
  %75 = insertelement <32 x i32> undef, i32 %9, i32 0
  %76 = shufflevector <32 x i32> %75, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1617 = sub nsw i32 %20, %t1580
  %77 = icmp sgt i32 %b18, 0
  %78 = sext i32 %11 to i64
  %79 = sext i32 %5 to i64
  %80 = sub nsw i64 %78, %79
  %81 = sext i32 %a24 to i64
  %82 = sext i32 %t1608 to i64
  %t1623 = sub nsw i32 %t1580, %b18
  %83 = icmp sgt i32 %t1623, 0
  %84 = icmp sgt i32 %t1617, 0
  %85 = sub nsw i32 %5, %a40
  %86 = sext i32 %a40 to i64
  %87 = sub nsw i64 %86, %79
  %a73 = sub nsw i32 %4, %t1601
  %88 = icmp sgt i32 %a73, 0
  %89 = select i1 %88, i32 %a73, i32 0
  %t2231 = zext i32 %89 to i64
  %90 = shl nuw nsw i64 %t2231, 3
  %91 = or i64 %90, 6
  %92 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t654 = sub i32 %t1591, %t1601
  %93 = sext i32 %t654 to i64
  %94 = zext i32 %4 to i64
  %95 = sext i32 %t1601 to i64
  %96 = sub nsw i64 %94, %95
  %97 = sext i32 %t1591 to i64
  %98 = sub nsw i64 %97, %95
  %t1636 = sub nsw i32 %t1582, %b23
  %99 = icmp sgt i32 %t1636, 0
  %100 = sext i32 %b23 to i64
  %t1639 = sub nsw i32 %a3, %t1582
  %101 = icmp sgt i32 %t1639, 0
  %102 = shl nsw i32 %a24, 1
  %a24.neg = xor i32 %48, -1
  %103 = add i32 %t654, %a24.neg
  %t660 = add i32 %103, %102
  %104 = sext i32 %t660 to i64
  %105 = sub nsw i32 %102, %t1601
  %t1643 = sub nsw i32 %105, %a24
  %106 = add nsw i32 %102, %t1591
  %t666 = sub i32 %106, %t1601
  %107 = sext i32 %t666 to i64
  %108 = sext i32 %a73 to i64
  %109 = sext i32 %7 to i64
  %110 = sext i32 %t1593 to i64
  %111 = sub nsw i64 %97, %110
  %t1653 = sub nsw i32 0, %t1593
  %112 = sext i32 %t1653 to i64
  %t682 = add nsw i32 %t666, %a24
  %113 = sext i32 %t682 to i64
  %t1665 = add nsw i32 %105, %a24
  %114 = shl nsw i32 %a24, 2
  %t698 = add i32 %t654, %114
  %115 = sext i32 %t698 to i64
  %t1681 = sub nsw i32 %114, %t1601
  %116 = mul nsw i32 %a24, 5
  %t714 = add i32 %t654, %116
  %117 = sext i32 %t714 to i64
  %t1697 = sub nsw i32 %116, %t1601
  %118 = mul nsw i32 %a24, 6
  %t730 = add i32 %t654, %118
  %119 = sext i32 %t730 to i64
  %t1713 = sub nsw i32 %118, %t1601
  %120 = mul nsw i32 %a24, 7
  %t746 = add i32 %t654, %120
  %121 = sext i32 %t746 to i64
  %t1729 = sub nsw i32 %120, %t1601
  %122 = shl nsw i32 %a24, 3
  %t762 = add i32 %t654, %122
  %123 = sext i32 %t762 to i64
  %t1745 = sub nsw i32 %122, %t1601
  %124 = mul nsw i32 %a24, 9
  %t778 = add i32 %t654, %124
  %125 = sext i32 %t778 to i64
  %t1761 = sub nsw i32 %124, %t1601
  %126 = mul nsw i32 %a24, 10
  %t794 = add i32 %t654, %126
  %127 = sext i32 %t794 to i64
  %t1777 = sub nsw i32 %126, %t1601
  %128 = mul nsw i32 %a24, 11
  %t810 = add i32 %t654, %128
  %129 = sext i32 %t810 to i64
  %t1793 = sub nsw i32 %128, %t1601
  %130 = mul nsw i32 %a24, 12
  %t826 = add i32 %t654, %130
  %131 = sext i32 %t826 to i64
  %t1809 = sub nsw i32 %130, %t1601
  %132 = mul nsw i32 %a24, 13
  %t842 = add i32 %t654, %132
  %133 = sext i32 %t842 to i64
  %t1825 = sub nsw i32 %132, %t1601
  %134 = mul nsw i32 %a24, 14
  %t858 = add i32 %t654, %134
  %135 = sext i32 %t858 to i64
  %t1841 = sub nsw i32 %134, %t1601
  %136 = mul nsw i32 %a24, 15
  %t874 = add i32 %t654, %136
  %137 = sext i32 %t874 to i64
  %t1857 = sub nsw i32 %136, %t1601
  %138 = shl nsw i32 %a24, 4
  %t890 = add i32 %t654, %138
  %139 = sext i32 %t890 to i64
  %t1873 = sub nsw i32 %138, %t1601
  %140 = mul nsw i32 %a24, 17
  %t906 = add i32 %t654, %140
  %141 = sext i32 %t906 to i64
  %t1889 = sub nsw i32 %140, %t1601
  %142 = mul nsw i32 %a24, 18
  %t922 = add i32 %t654, %142
  %143 = sext i32 %t922 to i64
  %t1905 = sub nsw i32 %142, %t1601
  %144 = mul nsw i32 %a24, 19
  %t938 = add i32 %t654, %144
  %145 = sext i32 %t938 to i64
  %t1921 = sub nsw i32 %144, %t1601
  %146 = mul nsw i32 %a24, 20
  %t954 = add i32 %t654, %146
  %147 = sext i32 %t954 to i64
  %t1937 = sub nsw i32 %146, %t1601
  %148 = mul nsw i32 %a24, 21
  %t970 = add i32 %t654, %148
  %149 = sext i32 %t970 to i64
  %t1953 = sub nsw i32 %148, %t1601
  %150 = mul nsw i32 %a24, 22
  %t986 = add i32 %t654, %150
  %151 = sext i32 %t986 to i64
  %t1969 = sub nsw i32 %150, %t1601
  %152 = mul nsw i32 %a24, 23
  %t1002 = add i32 %t654, %152
  %153 = sext i32 %t1002 to i64
  %t1985 = sub nsw i32 %152, %t1601
  %154 = mul nsw i32 %a24, 24
  %t1018 = add i32 %t654, %154
  %155 = sext i32 %t1018 to i64
  %t2001 = sub nsw i32 %154, %t1601
  %156 = mul nsw i32 %a24, 25
  %t1034 = add i32 %t654, %156
  %157 = sext i32 %t1034 to i64
  %t2017 = sub nsw i32 %156, %t1601
  %158 = mul nsw i32 %a24, 26
  %t1050 = add i32 %t654, %158
  %159 = sext i32 %t1050 to i64
  %t2033 = sub nsw i32 %158, %t1601
  %160 = mul nsw i32 %a24, 27
  %t1066 = add i32 %t654, %160
  %161 = sext i32 %t1066 to i64
  %t2049 = sub nsw i32 %160, %t1601
  %162 = mul nsw i32 %a24, 28
  %t1082 = add i32 %t654, %162
  %163 = sext i32 %t1082 to i64
  %t2065 = sub nsw i32 %162, %t1601
  %164 = mul nsw i32 %a24, 29
  %t1098 = add i32 %t654, %164
  %165 = sext i32 %t1098 to i64
  %t2081 = sub nsw i32 %164, %t1601
  %166 = mul nsw i32 %a24, 30
  %t1114 = add i32 %t654, %166
  %167 = sext i32 %t1114 to i64
  %t2097 = sub nsw i32 %166, %t1601
  %168 = mul nsw i32 %a24, 31
  %t1130 = add i32 %t654, %168
  %169 = sext i32 %t1130 to i64
  %t2113 = sub nsw i32 %168, %t1601
  %170 = shl nsw i32 %a24, 5
  %t1146 = add i32 %t654, %170
  %171 = sext i32 %t1146 to i64
  %t2129 = sub nsw i32 %170, %t1601
  %172 = mul nsw i32 %a24, 33
  %t1162 = add i32 %t654, %172
  %173 = sext i32 %t1162 to i64
  %t2145 = sub nsw i32 %172, %t1601
  %174 = sext i32 %b36 to i64
  %175 = zext i32 %b18 to i64
  %176 = sext i32 %t1606 to i64
  %177 = zext i32 %t1623 to i64
  %178 = sext i32 %13 to i64
  %179 = sext i32 %9 to i64
  %180 = zext i32 %t1636 to i64
  %181 = add nsw i64 %177, -1
  %xtraiter = and i64 %177, 3
  %182 = icmp ult i64 %181, 3
  %unroll_iter = and i64 %177, 4294967292
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br label %"for blur_y.s0.y.y"

"for blur_y.s0.y.y":                              ; preds = %"for blur_y.s0.y.y.preheader", %"end for blur_y.s0.x.x.rebased749"
  %blur_y.s0.y.y = phi i32 [ %10114, %"end for blur_y.s0.x.x.rebased749" ], [ 0, %"for blur_y.s0.y.y.preheader" ]
  %a22 = shl nsw i32 %blur_y.s0.y.y, 5
  %183 = icmp sgt i32 %b24, %a22
  %blur_y.s0.y.yi.base.s = select i1 %183, i32 %a22, i32 %b24
  %184 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i = icmp ult i64 %184, %68
  %185 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i, label %if.then.i, label %pseudostack_alloc.exit, !prof !390

if.then.i:                                        ; preds = %"for blur_y.s0.y.y"
  %tobool1.not.i = icmp ne i8* %185, null
  %186 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i = icmp ugt i64 %186, 16384
  %or.cond = and i1 %tobool1.not.i, %cmp2.i
  br i1 %or.cond, label %if.then3.i, label %if.end.i

if.then3.i:                                       ; preds = %if.then.i
  call void @halide_free(i8* null, i8* nonnull %185) #16
  %.pre = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i

if.end.i:                                         ; preds = %if.then3.i, %if.then.i
  %187 = phi i64 [ %.pre, %if.then3.i ], [ %186, %if.then.i ]
  %add.i = add i64 %187, %68
  store i64 %add.i, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i = icmp ugt i64 %add.i, 16384
  br i1 %cmp7.i, label %if.then8.i, label %if.end11.i

if.then8.i:                                       ; preds = %if.end.i
  %call.i = call i8* @halide_malloc(i8* null, i64 %68) #16
  br label %if.end11.i

if.end11.i:                                       ; preds = %if.then8.i, %if.end.i
  %storemerge.i = phi i8* [ %call.i, %if.then8.i ], [ null, %if.end.i ]
  store i8* %storemerge.i, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %68, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit

pseudostack_alloc.exit:                           ; preds = %"for blur_y.s0.y.y", %if.end11.i
  %188 = phi i8* [ %storemerge.i, %if.end11.i ], [ %185, %"for blur_y.s0.y.y" ]
  %189 = bitcast i8* %188 to i16*
  %.not2516 = icmp eq i8* %188, null
  br i1 %.not2516, label %then_bb, label %"produce read_input", !prof !392

"end for blur_y.s0.y.y.loopexit":                 ; preds = %"end for blur_y.s0.x.x.rebased749"
  %190 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %191 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %"end for blur_y.s0.y.y"

"end for blur_y.s0.y.y":                          ; preds = %"end for blur_y.s0.y.y.loopexit", %entry
  %.02722 = phi i8* [ null, %entry ], [ %191, %"end for blur_y.s0.y.y.loopexit" ]
  %.0 = phi i8* [ null, %entry ], [ %190, %"end for blur_y.s0.y.y.loopexit" ]
  %192 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i, align 8, !tbaa !176
  %min.i2620 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 0, i32 0
  %193 = load i32, i32* %min.i2620, align 4, !tbaa !181
  %extent.i2622 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 0, i32 1
  %194 = load i32, i32* %extent.i2622, align 4, !tbaa !178
  %min.i2626 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 0
  %195 = load i32, i32* %min.i2626, align 4, !tbaa !181
  %extent.i2628 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 1
  %196 = load i32, i32* %extent.i2628, align 4, !tbaa !178
  %stride.i2630 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %192, i64 1, i32 2
  %197 = load i32, i32* %stride.i2630, align 4, !tbaa !182
  %198 = load %struct.halide_dimension_t*, %struct.halide_dimension_t** %dim.i2606, align 8, !tbaa !176
  %min.i2633 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 0, i32 0
  %199 = load i32, i32* %min.i2633, align 4, !tbaa !181
  %extent.i2635 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 0, i32 1
  %200 = load i32, i32* %extent.i2635, align 4, !tbaa !178
  %min.i2639 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 0
  %201 = load i32, i32* %min.i2639, align 4, !tbaa !181
  %extent.i2641 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 1
  %202 = load i32, i32* %extent.i2641, align 4, !tbaa !178
  %stride.i2643 = getelementptr inbounds %struct.halide_dimension_t, %struct.halide_dimension_t* %198, i64 1, i32 2
  %203 = load i32, i32* %stride.i2643, align 4, !tbaa !182
  %b335 = add nsw i32 %194, %193
  %t1590769 = add nsw i32 %200, %199
  %204 = icmp slt i32 %194, 32
  %t1591770 = select i1 %204, i32 %194, i32 32
  %205 = icmp sgt i32 %202, 0
  %206 = select i1 %205, i32 %202, i32 0
  %a353 = add nsw i32 %206, %201
  %t1593771 = mul nsw i32 %197, %195
  %207 = add nsw i32 %194, 31
  %a316 = ashr i32 %207, 5
  %208 = icmp sgt i32 %194, 32
  %b334 = select i1 %208, i32 %194, i32 32
  %209 = add nuw nsw i32 %b334, 33
  %210 = lshr i32 %209, 5
  %211 = icmp slt i32 %a316, 1
  %b336 = select i1 %211, i32 %a316, i32 1
  %212 = sub i32 63, %193
  %213 = sub i32 %212, %t1591770
  %214 = add i32 %213, %199
  %a318 = ashr i32 %214, 5
  %215 = icmp sgt i32 %a318, 0
  %a317 = select i1 %215, i32 %a318, i32 0
  %216 = icmp sgt i32 %210, %a317
  %b331 = select i1 %216, i32 %a317, i32 %210
  %b321 = add nsw i32 %t1591770, -32
  %217 = icmp slt i32 %194, 0
  %218 = select i1 %217, i32 %194, i32 0
  %a319 = select i1 %208, i32 %218, i32 %b321
  %219 = icmp sgt i32 %b321, %a319
  %t1601773 = select i1 %219, i32 %a319, i32 %b321
  %b332 = add nuw nsw i32 %b334, 1
  %a327 = add nsw i32 %194, -32
  %220 = add nsw i32 %194, -1
  %221 = and i32 %220, -32
  %a321 = select i1 %208, i32 %221, i32 %a327
  %222 = icmp sgt i32 %a321, %a327
  %223 = select i1 %222, i32 %a321, i32 %a327
  %224 = icmp sgt i32 %194, 0
  %225 = select i1 %224, i32 %194, i32 0
  %a322 = select i1 %208, i32 %225, i32 32
  %226 = icmp sgt i32 %a322, 32
  %227 = select i1 %226, i32 %a322, i32 32
  %228 = add nsw i32 %227, -1
  %229 = and i32 %228, -32
  %b329 = add nsw i32 %229, %223
  %a326 = add nsw i32 %b329, 32
  %230 = icmp sgt i32 %194, %a326
  %a325 = select i1 %230, i32 %a326, i32 %194
  %231 = icmp sgt i32 %b329, %a327
  %232 = select i1 %231, i32 %a327, i32 %b329
  %b327 = add nsw i32 %232, 33
  %233 = icmp sgt i32 %a325, %b327
  %a324 = select i1 %233, i32 %a325, i32 %b327
  %a328 = add nsw i32 %194, 2
  %234 = and i32 %b332, 2147483616
  %b330 = add nsw i32 %234, %t1591770
  %235 = icmp sgt i32 %b330, %a328
  %236 = select i1 %235, i32 %a328, i32 %b330
  %b326 = add nsw i32 %236, -1
  %.not2431 = icmp slt i32 %a324, %236
  %237 = select i1 %.not2431, i32 %b326, i32 %a324
  %238 = sub nsw i32 %237, %t1601773
  %a337 = add nsw i32 %238, 1
  %239 = sub nsw i32 %t1590769, %t1591770
  %a331 = sub i32 %239, %193
  %a333 = add nsw i32 %t1590769, 29
  %240 = icmp sgt i32 %b335, %a333
  %241 = select i1 %240, i32 %a333, i32 %b335
  %242 = sub i32 32, %193
  %243 = sub i32 %242, %t1591770
  %a332 = add i32 %243, %241
  %244 = icmp sgt i32 %b334, %a332
  %245 = select i1 %244, i32 %a332, i32 %b334
  %b333 = add nsw i32 %245, -30
  %246 = icmp sgt i32 %b333, %a331
  %a330 = select i1 %246, i32 %a331, i32 %b333
  %.not2432 = icmp slt i32 %b334, %a330
  %247 = select i1 %.not2432, i32 %b332, i32 %a330
  %248 = ashr i32 %247, 5
  %a329 = add nsw i32 %248, 1
  %.not2433 = icmp slt i32 %248, %b331
  %t1580775 = select i1 %.not2433, i32 %b331, i32 %a329
  %a334 = ashr i32 %194, 5
  %249 = icmp sgt i32 %a334, %b336
  %t1582776 = select i1 %249, i32 %a334, i32 %b336
  %250 = add nsw i32 %196, 31
  %t1568777 = ashr i32 %250, 5
  %251 = icmp sgt i32 %196, 0
  br i1 %251, label %"for blur_y.s0.y.y778.preheader", label %"end for blur_y.s0.y.y779", !prof !386

"for blur_y.s0.y.y778.preheader":                 ; preds = %"end for blur_y.s0.y.y"
  %252 = bitcast i8** %host.i2605 to i16**
  %253 = load i16*, i16** %252, align 8, !tbaa !172
  %254 = bitcast i8** %host.i to i16**
  %255 = load i16*, i16** %254, align 8, !tbaa !172
  %b337 = add nsw i32 %196, -32
  %.inv = icmp slt i32 %238, 0
  %256 = select i1 %.inv, i32 0, i32 %a337
  %t2232 = zext i32 %256 to i64
  %257 = mul nuw nsw i64 %t2232, 68
  %258 = add nuw nsw i64 %257, 6
  %259 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8***
  %b343 = add nsw i32 %202, %201
  %260 = sub nsw i32 %201, %195
  %261 = sub i32 %195, %201
  %t1608790 = add nsw i32 %t1601773, %193
  %t1606791 = add nsw i32 %t1591770, %193
  %b349 = add nsw i32 %202, -1
  %b350 = add nsw i32 %b335, 2
  %262 = add nsw i32 %t1590769, -1
  %263 = insertelement <32 x i32> undef, i32 %262, i32 0
  %264 = shufflevector <32 x i32> %263, <32 x i32> undef, <8 x i32> zeroinitializer
  %265 = insertelement <32 x i32> undef, i32 %199, i32 0
  %266 = shufflevector <32 x i32> %265, <32 x i32> undef, <8 x i32> zeroinitializer
  %t1617803 = sub nsw i32 %210, %t1580775
  %267 = icmp sgt i32 %b331, 0
  %268 = sext i32 %201 to i64
  %269 = sext i32 %195 to i64
  %270 = sub nsw i64 %268, %269
  %271 = sext i32 %a337 to i64
  %272 = sext i32 %t1608790 to i64
  %t1623816 = sub nsw i32 %t1580775, %b331
  %273 = icmp sgt i32 %t1623816, 0
  %274 = icmp sgt i32 %t1617803, 0
  %275 = sub nsw i32 %195, %a353
  %276 = sext i32 %a353 to i64
  %277 = sub nsw i64 %276, %269
  %a386 = sub nsw i32 %194, %t1601773
  %278 = icmp sgt i32 %a386, 0
  %279 = select i1 %278, i32 %a386, i32 0
  %t2233 = zext i32 %279 to i64
  %280 = shl nuw nsw i64 %t2233, 3
  %281 = or i64 %280, 6
  %282 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8***
  %t654847 = sub i32 %t1591770, %t1601773
  %283 = sext i32 %t654847 to i64
  %284 = zext i32 %194 to i64
  %285 = sext i32 %t1601773 to i64
  %286 = sub nsw i64 %284, %285
  %287 = sext i32 %t1591770 to i64
  %288 = sub nsw i64 %287, %285
  %t1636849 = sub nsw i32 %t1582776, %b336
  %289 = icmp sgt i32 %t1636849, 0
  %290 = sext i32 %b336 to i64
  %t1639861 = sub nsw i32 %a316, %t1582776
  %291 = icmp sgt i32 %t1639861, 0
  %292 = shl nsw i32 %a337, 1
  %a337.neg = xor i32 %238, -1
  %293 = add i32 %t654847, %a337.neg
  %t660877 = add i32 %293, %292
  %294 = sext i32 %t660877 to i64
  %295 = sub nsw i32 %292, %t1601773
  %t1643879 = sub nsw i32 %295, %a337
  %296 = add nsw i32 %292, %t1591770
  %t666907 = sub i32 %296, %t1601773
  %297 = sext i32 %t666907 to i64
  %298 = sext i32 %a386 to i64
  %299 = sext i32 %197 to i64
  %300 = sext i32 %t1593771 to i64
  %301 = sub nsw i64 %287, %300
  %t1653917 = sub nsw i32 0, %t1593771
  %302 = sext i32 %t1653917 to i64
  %t682950 = add nsw i32 %t666907, %a337
  %303 = sext i32 %t682950 to i64
  %t1665960 = add nsw i32 %295, %a337
  %304 = shl nsw i32 %a337, 2
  %t698993 = add i32 %t654847, %304
  %305 = sext i32 %t698993 to i64
  %t16811001 = sub nsw i32 %304, %t1601773
  %306 = mul nsw i32 %a337, 5
  %t7141036 = add i32 %t654847, %306
  %307 = sext i32 %t7141036 to i64
  %t16971044 = sub nsw i32 %306, %t1601773
  %308 = mul nsw i32 %a337, 6
  %t7301079 = add i32 %t654847, %308
  %309 = sext i32 %t7301079 to i64
  %t17131087 = sub nsw i32 %308, %t1601773
  %310 = mul nsw i32 %a337, 7
  %t7461122 = add i32 %t654847, %310
  %311 = sext i32 %t7461122 to i64
  %t17291130 = sub nsw i32 %310, %t1601773
  %312 = shl nsw i32 %a337, 3
  %t7621165 = add i32 %t654847, %312
  %313 = sext i32 %t7621165 to i64
  %t17451173 = sub nsw i32 %312, %t1601773
  %314 = mul nsw i32 %a337, 9
  %t7781208 = add i32 %t654847, %314
  %315 = sext i32 %t7781208 to i64
  %t17611216 = sub nsw i32 %314, %t1601773
  %316 = mul nsw i32 %a337, 10
  %t7941251 = add i32 %t654847, %316
  %317 = sext i32 %t7941251 to i64
  %t17771259 = sub nsw i32 %316, %t1601773
  %318 = mul nsw i32 %a337, 11
  %t8101294 = add i32 %t654847, %318
  %319 = sext i32 %t8101294 to i64
  %t17931302 = sub nsw i32 %318, %t1601773
  %320 = mul nsw i32 %a337, 12
  %t8261337 = add i32 %t654847, %320
  %321 = sext i32 %t8261337 to i64
  %t18091345 = sub nsw i32 %320, %t1601773
  %322 = mul nsw i32 %a337, 13
  %t8421380 = add i32 %t654847, %322
  %323 = sext i32 %t8421380 to i64
  %t18251388 = sub nsw i32 %322, %t1601773
  %324 = mul nsw i32 %a337, 14
  %t8581423 = add i32 %t654847, %324
  %325 = sext i32 %t8581423 to i64
  %t18411431 = sub nsw i32 %324, %t1601773
  %326 = mul nsw i32 %a337, 15
  %t8741466 = add i32 %t654847, %326
  %327 = sext i32 %t8741466 to i64
  %t18571474 = sub nsw i32 %326, %t1601773
  %328 = shl nsw i32 %a337, 4
  %t8901509 = add i32 %t654847, %328
  %329 = sext i32 %t8901509 to i64
  %t18731517 = sub nsw i32 %328, %t1601773
  %330 = mul nsw i32 %a337, 17
  %t9061552 = add i32 %t654847, %330
  %331 = sext i32 %t9061552 to i64
  %t18891560 = sub nsw i32 %330, %t1601773
  %332 = mul nsw i32 %a337, 18
  %t9221595 = add i32 %t654847, %332
  %333 = sext i32 %t9221595 to i64
  %t19051603 = sub nsw i32 %332, %t1601773
  %334 = mul nsw i32 %a337, 19
  %t9381638 = add i32 %t654847, %334
  %335 = sext i32 %t9381638 to i64
  %t19211646 = sub nsw i32 %334, %t1601773
  %336 = mul nsw i32 %a337, 20
  %t9541681 = add i32 %t654847, %336
  %337 = sext i32 %t9541681 to i64
  %t19371689 = sub nsw i32 %336, %t1601773
  %338 = mul nsw i32 %a337, 21
  %t9701724 = add i32 %t654847, %338
  %339 = sext i32 %t9701724 to i64
  %t19531732 = sub nsw i32 %338, %t1601773
  %340 = mul nsw i32 %a337, 22
  %t9861767 = add i32 %t654847, %340
  %341 = sext i32 %t9861767 to i64
  %t19691775 = sub nsw i32 %340, %t1601773
  %342 = mul nsw i32 %a337, 23
  %t10021810 = add i32 %t654847, %342
  %343 = sext i32 %t10021810 to i64
  %t19851818 = sub nsw i32 %342, %t1601773
  %344 = mul nsw i32 %a337, 24
  %t10181853 = add i32 %t654847, %344
  %345 = sext i32 %t10181853 to i64
  %t20011861 = sub nsw i32 %344, %t1601773
  %346 = mul nsw i32 %a337, 25
  %t10341896 = add i32 %t654847, %346
  %347 = sext i32 %t10341896 to i64
  %t20171904 = sub nsw i32 %346, %t1601773
  %348 = mul nsw i32 %a337, 26
  %t10501939 = add i32 %t654847, %348
  %349 = sext i32 %t10501939 to i64
  %t20331947 = sub nsw i32 %348, %t1601773
  %350 = mul nsw i32 %a337, 27
  %t10661982 = add i32 %t654847, %350
  %351 = sext i32 %t10661982 to i64
  %t20491990 = sub nsw i32 %350, %t1601773
  %352 = mul nsw i32 %a337, 28
  %t10822025 = add i32 %t654847, %352
  %353 = sext i32 %t10822025 to i64
  %t20652033 = sub nsw i32 %352, %t1601773
  %354 = mul nsw i32 %a337, 29
  %t10982068 = add i32 %t654847, %354
  %355 = sext i32 %t10982068 to i64
  %t20812076 = sub nsw i32 %354, %t1601773
  %356 = mul nsw i32 %a337, 30
  %t11142111 = add i32 %t654847, %356
  %357 = sext i32 %t11142111 to i64
  %t20972119 = sub nsw i32 %356, %t1601773
  %358 = mul nsw i32 %a337, 31
  %t11302154 = add i32 %t654847, %358
  %359 = sext i32 %t11302154 to i64
  %t21132162 = sub nsw i32 %358, %t1601773
  %360 = shl nsw i32 %a337, 5
  %t11462197 = add i32 %t654847, %360
  %361 = sext i32 %t11462197 to i64
  %t21292205 = sub nsw i32 %360, %t1601773
  %362 = mul nsw i32 %a337, 33
  %t11622240 = add i32 %t654847, %362
  %363 = sext i32 %t11622240 to i64
  %t21452248 = sub nsw i32 %362, %t1601773
  %364 = sext i32 %b349 to i64
  %365 = zext i32 %b331 to i64
  %366 = sext i32 %t1606791 to i64
  %367 = zext i32 %t1623816 to i64
  %368 = sext i32 %203 to i64
  %369 = sext i32 %199 to i64
  %370 = zext i32 %t1636849 to i64
  %371 = add nsw i64 %367, -1
  %xtraiter3401 = and i64 %367, 3
  %372 = icmp ult i64 %371, 3
  %unroll_iter3404 = and i64 %367, 4294967292
  %lcmp.mod3403.not = icmp eq i64 %xtraiter3401, 0
  br label %"for blur_y.s0.y.y778"

then_bb:                                          ; preds = %pseudostack_alloc.exit
  %373 = alloca i8*, i64 %68, align 32
  %374 = bitcast i8** %373 to i16*
  store i8** %373, i8*** %69, align 8
  br label %"produce read_input"

"produce read_input":                             ; preds = %pseudostack_alloc.exit, %then_bb
  %read_input = phi i16* [ %374, %then_bb ], [ %189, %pseudostack_alloc.exit ]
  %a26 = add nsw i32 %blur_y.s0.y.yi.base.s, %5
  %375 = icmp sgt i32 %a26, %11
  %a25 = select i1 %375, i32 %a26, i32 %11
  %b27 = add nsw i32 %a26, 34
  %376 = icmp sgt i32 %b27, %a25
  %read_input.s0.y.prologue = select i1 %376, i32 %a25, i32 %b27
  %377 = icmp sgt i32 %a25, %b30
  %a27 = select i1 %377, i32 %a25, i32 %b30
  %378 = icmp sgt i32 %b27, %a27
  %read_input.s0.y.epilogue = select i1 %378, i32 %a27, i32 %b27
  %a31 = sub i32 %70, %blur_y.s0.y.yi.base.s
  %379 = icmp sgt i32 %a31, 0
  br i1 %379, label %"for read_input.s0.y.rebased.preheader", label %"end for read_input.s0.y.rebased", !prof !386

"for read_input.s0.y.rebased.preheader":          ; preds = %"produce read_input"
  %t1607 = add nsw i32 %71, %blur_y.s0.y.yi.base.s
  %380 = icmp slt i32 %a31, 34
  %a30 = select i1 %380, i32 %a31, i32 34
  %381 = sext i32 %t1607 to i64
  %382 = zext i32 %a30 to i64
  br label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased":                    ; preds = %"for read_input.s0.y.rebased.preheader", %"end for read_input.s0.x.x"
  %indvars.iv = phi i64 [ 0, %"for read_input.s0.y.rebased.preheader" ], [ %indvars.iv.next, %"end for read_input.s0.x.x" ]
  %383 = add nsw i64 %indvars.iv, %381
  %384 = icmp slt i64 %383, %174
  %385 = trunc i64 %383 to i32
  %a33 = select i1 %384, i32 %385, i32 %b36
  %386 = mul nsw i64 %indvars.iv, %81
  %387 = sub nsw i64 %386, %82
  %388 = icmp sgt i32 %a33, 0
  %389 = select i1 %388, i32 %a33, i32 0
  %390 = mul nsw i32 %389, %13
  %t1609 = sub nsw i32 %390, %9
  %391 = insertelement <32 x i32> undef, i32 %t1609, i32 0
  %392 = shufflevector <32 x i32> %391, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x"

"end for read_input.s0.y.rebased":                ; preds = %"end for read_input.s0.x.x", %"produce read_input"
  %393 = icmp sgt i32 %a40, %a26
  %a39 = select i1 %393, i32 %a40, i32 %a26
  %394 = icmp sgt i32 %b27, %a39
  %395 = select i1 %394, i32 %a39, i32 %b27
  %t1611 = sub nsw i32 %395, %read_input.s0.y.prologue
  %396 = icmp sgt i32 %t1611, 0
  br i1 %396, label %"for read_input.s0.y.rebased1.preheader", label %"end for read_input.s0.y.rebased2", !prof !386

"for read_input.s0.y.rebased1.preheader":         ; preds = %"end for read_input.s0.y.rebased"
  %t1614 = sub i32 %read_input.s0.y.prologue, %11
  %397 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a47 = sub nsw i64 %80, %397
  %398 = icmp slt i64 %a47, 34
  %a46 = select i1 %398, i64 %a47, i64 34
  %399 = icmp sgt i64 %a46, 0
  %400 = select i1 %399, i64 %a46, i64 0
  %401 = sext i32 %t1614 to i64
  %402 = zext i32 %t1611 to i64
  br label %"for read_input.s0.y.rebased1"

"for read_input.s0.x.x":                          ; preds = %"for read_input.s0.y.rebased", %"for read_input.s0.x.x"
  %read_input.s0.x.x = phi i32 [ %601, %"for read_input.s0.x.x" ], [ 0, %"for read_input.s0.y.rebased" ]
  %403 = shl nsw i32 %read_input.s0.x.x, 5
  %a35 = add nsw i32 %403, %t1606
  %404 = icmp sgt i32 %b37, %a35
  %read_input.s0.x.v2.base.s = select i1 %404, i32 %a35, i32 %b37
  %405 = add nsw i32 %read_input.s0.x.v2.base.s, -32
  %406 = insertelement <32 x i32> undef, i32 %405, i32 0
  %407 = shufflevector <32 x i32> %406, <32 x i32> undef, <32 x i32> zeroinitializer
  %a37 = add nsw <32 x i32> %407, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %408 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %409 = icmp sgt <8 x i32> %74, %408
  %410 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %411 = icmp sgt <8 x i32> %74, %410
  %412 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %413 = icmp sgt <8 x i32> %74, %412
  %414 = shufflevector <32 x i32> %a37, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %415 = icmp sgt <8 x i32> %74, %414
  %416 = select <8 x i1> %409, <8 x i32> %408, <8 x i32> %74
  %417 = select <8 x i1> %411, <8 x i32> %410, <8 x i32> %74
  %418 = select <8 x i1> %413, <8 x i32> %412, <8 x i32> %74
  %419 = select <8 x i1> %415, <8 x i32> %414, <8 x i32> %74
  %420 = icmp sgt <8 x i32> %416, %76
  %421 = icmp sgt <8 x i32> %417, %76
  %422 = icmp sgt <8 x i32> %418, %76
  %423 = icmp sgt <8 x i32> %419, %76
  %424 = select <8 x i1> %420, <8 x i32> %416, <8 x i32> %76
  %425 = select <8 x i1> %421, <8 x i32> %417, <8 x i32> %76
  %426 = select <8 x i1> %422, <8 x i32> %418, <8 x i32> %76
  %427 = select <8 x i1> %423, <8 x i32> %419, <8 x i32> %76
  %428 = shufflevector <8 x i32> %424, <8 x i32> %425, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %429 = shufflevector <8 x i32> %426, <8 x i32> %427, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %430 = shufflevector <16 x i32> %428, <16 x i32> %429, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %431 = add nsw <32 x i32> %430, %392
  %432 = extractelement <32 x i32> %431, i32 0
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i16, i16* %63, i64 %433
  %435 = load i16, i16* %434, align 2, !tbaa !393
  %436 = insertelement <32 x i16> undef, i16 %435, i32 0
  %437 = extractelement <32 x i32> %431, i32 1
  %438 = sext i32 %437 to i64
  %439 = getelementptr inbounds i16, i16* %63, i64 %438
  %440 = load i16, i16* %439, align 2, !tbaa !393
  %441 = insertelement <32 x i16> %436, i16 %440, i32 1
  %442 = extractelement <32 x i32> %431, i32 2
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i16, i16* %63, i64 %443
  %445 = load i16, i16* %444, align 2, !tbaa !393
  %446 = insertelement <32 x i16> %441, i16 %445, i32 2
  %447 = extractelement <32 x i32> %431, i32 3
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i16, i16* %63, i64 %448
  %450 = load i16, i16* %449, align 2, !tbaa !393
  %451 = insertelement <32 x i16> %446, i16 %450, i32 3
  %452 = extractelement <32 x i32> %431, i32 4
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds i16, i16* %63, i64 %453
  %455 = load i16, i16* %454, align 2, !tbaa !393
  %456 = insertelement <32 x i16> %451, i16 %455, i32 4
  %457 = extractelement <32 x i32> %431, i32 5
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i16, i16* %63, i64 %458
  %460 = load i16, i16* %459, align 2, !tbaa !393
  %461 = insertelement <32 x i16> %456, i16 %460, i32 5
  %462 = extractelement <32 x i32> %431, i32 6
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds i16, i16* %63, i64 %463
  %465 = load i16, i16* %464, align 2, !tbaa !393
  %466 = insertelement <32 x i16> %461, i16 %465, i32 6
  %467 = extractelement <32 x i32> %431, i32 7
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i16, i16* %63, i64 %468
  %470 = load i16, i16* %469, align 2, !tbaa !393
  %471 = insertelement <32 x i16> %466, i16 %470, i32 7
  %472 = extractelement <32 x i32> %431, i32 8
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i16, i16* %63, i64 %473
  %475 = load i16, i16* %474, align 2, !tbaa !393
  %476 = insertelement <32 x i16> %471, i16 %475, i32 8
  %477 = extractelement <32 x i32> %431, i32 9
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds i16, i16* %63, i64 %478
  %480 = load i16, i16* %479, align 2, !tbaa !393
  %481 = insertelement <32 x i16> %476, i16 %480, i32 9
  %482 = extractelement <32 x i32> %431, i32 10
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds i16, i16* %63, i64 %483
  %485 = load i16, i16* %484, align 2, !tbaa !393
  %486 = insertelement <32 x i16> %481, i16 %485, i32 10
  %487 = extractelement <32 x i32> %431, i32 11
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds i16, i16* %63, i64 %488
  %490 = load i16, i16* %489, align 2, !tbaa !393
  %491 = insertelement <32 x i16> %486, i16 %490, i32 11
  %492 = extractelement <32 x i32> %431, i32 12
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i16, i16* %63, i64 %493
  %495 = load i16, i16* %494, align 2, !tbaa !393
  %496 = insertelement <32 x i16> %491, i16 %495, i32 12
  %497 = extractelement <32 x i32> %431, i32 13
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds i16, i16* %63, i64 %498
  %500 = load i16, i16* %499, align 2, !tbaa !393
  %501 = insertelement <32 x i16> %496, i16 %500, i32 13
  %502 = extractelement <32 x i32> %431, i32 14
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds i16, i16* %63, i64 %503
  %505 = load i16, i16* %504, align 2, !tbaa !393
  %506 = insertelement <32 x i16> %501, i16 %505, i32 14
  %507 = extractelement <32 x i32> %431, i32 15
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i16, i16* %63, i64 %508
  %510 = load i16, i16* %509, align 2, !tbaa !393
  %511 = insertelement <32 x i16> %506, i16 %510, i32 15
  %512 = extractelement <32 x i32> %431, i32 16
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i16, i16* %63, i64 %513
  %515 = load i16, i16* %514, align 2, !tbaa !393
  %516 = insertelement <32 x i16> %511, i16 %515, i32 16
  %517 = extractelement <32 x i32> %431, i32 17
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds i16, i16* %63, i64 %518
  %520 = load i16, i16* %519, align 2, !tbaa !393
  %521 = insertelement <32 x i16> %516, i16 %520, i32 17
  %522 = extractelement <32 x i32> %431, i32 18
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds i16, i16* %63, i64 %523
  %525 = load i16, i16* %524, align 2, !tbaa !393
  %526 = insertelement <32 x i16> %521, i16 %525, i32 18
  %527 = extractelement <32 x i32> %431, i32 19
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds i16, i16* %63, i64 %528
  %530 = load i16, i16* %529, align 2, !tbaa !393
  %531 = insertelement <32 x i16> %526, i16 %530, i32 19
  %532 = extractelement <32 x i32> %431, i32 20
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds i16, i16* %63, i64 %533
  %535 = load i16, i16* %534, align 2, !tbaa !393
  %536 = insertelement <32 x i16> %531, i16 %535, i32 20
  %537 = extractelement <32 x i32> %431, i32 21
  %538 = sext i32 %537 to i64
  %539 = getelementptr inbounds i16, i16* %63, i64 %538
  %540 = load i16, i16* %539, align 2, !tbaa !393
  %541 = insertelement <32 x i16> %536, i16 %540, i32 21
  %542 = extractelement <32 x i32> %431, i32 22
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds i16, i16* %63, i64 %543
  %545 = load i16, i16* %544, align 2, !tbaa !393
  %546 = insertelement <32 x i16> %541, i16 %545, i32 22
  %547 = extractelement <32 x i32> %431, i32 23
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds i16, i16* %63, i64 %548
  %550 = load i16, i16* %549, align 2, !tbaa !393
  %551 = insertelement <32 x i16> %546, i16 %550, i32 23
  %552 = extractelement <32 x i32> %431, i32 24
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds i16, i16* %63, i64 %553
  %555 = load i16, i16* %554, align 2, !tbaa !393
  %556 = insertelement <32 x i16> %551, i16 %555, i32 24
  %557 = extractelement <32 x i32> %431, i32 25
  %558 = sext i32 %557 to i64
  %559 = getelementptr inbounds i16, i16* %63, i64 %558
  %560 = load i16, i16* %559, align 2, !tbaa !393
  %561 = insertelement <32 x i16> %556, i16 %560, i32 25
  %562 = extractelement <32 x i32> %431, i32 26
  %563 = sext i32 %562 to i64
  %564 = getelementptr inbounds i16, i16* %63, i64 %563
  %565 = load i16, i16* %564, align 2, !tbaa !393
  %566 = insertelement <32 x i16> %561, i16 %565, i32 26
  %567 = extractelement <32 x i32> %431, i32 27
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds i16, i16* %63, i64 %568
  %570 = load i16, i16* %569, align 2, !tbaa !393
  %571 = insertelement <32 x i16> %566, i16 %570, i32 27
  %572 = extractelement <32 x i32> %431, i32 28
  %573 = sext i32 %572 to i64
  %574 = getelementptr inbounds i16, i16* %63, i64 %573
  %575 = load i16, i16* %574, align 2, !tbaa !393
  %576 = insertelement <32 x i16> %571, i16 %575, i32 28
  %577 = extractelement <32 x i32> %431, i32 29
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i16, i16* %63, i64 %578
  %580 = load i16, i16* %579, align 2, !tbaa !393
  %581 = insertelement <32 x i16> %576, i16 %580, i32 29
  %582 = extractelement <32 x i32> %431, i32 30
  %583 = sext i32 %582 to i64
  %584 = getelementptr inbounds i16, i16* %63, i64 %583
  %585 = load i16, i16* %584, align 2, !tbaa !393
  %586 = insertelement <32 x i16> %581, i16 %585, i32 30
  %587 = extractelement <32 x i32> %431, i32 31
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds i16, i16* %63, i64 %588
  %590 = load i16, i16* %589, align 2, !tbaa !393
  %591 = insertelement <32 x i16> %586, i16 %590, i32 31
  %592 = shufflevector <32 x i16> %591, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %593 = sext i32 %read_input.s0.x.v2.base.s to i64
  %594 = add nsw i64 %387, %593
  %595 = getelementptr inbounds i16, i16* %read_input, i64 %594
  %596 = getelementptr inbounds i16, i16* %595, i64 -32
  %597 = bitcast i16* %596 to <16 x i16>*
  store <16 x i16> %592, <16 x i16>* %597, align 2, !tbaa !396
  %598 = shufflevector <32 x i16> %591, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %599 = getelementptr inbounds i16, i16* %595, i64 -16
  %600 = bitcast i16* %599 to <16 x i16>*
  store <16 x i16> %598, <16 x i16>* %600, align 2, !tbaa !396
  %601 = add nuw nsw i32 %read_input.s0.x.x, 1
  %.not2596 = icmp eq i32 %601, %20
  br i1 %.not2596, label %"end for read_input.s0.x.x", label %"for read_input.s0.x.x"

"end for read_input.s0.x.x":                      ; preds = %"for read_input.s0.x.x"
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %.not2595 = icmp eq i64 %indvars.iv.next, %382
  br i1 %.not2595, label %"end for read_input.s0.y.rebased", label %"for read_input.s0.y.rebased"

"for read_input.s0.y.rebased1":                   ; preds = %"for read_input.s0.y.rebased1.preheader", %"end for read_input.s0.x.x.rebased10"
  %indvars.iv3022 = phi i64 [ 0, %"for read_input.s0.y.rebased1.preheader" ], [ %indvars.iv.next3023, %"end for read_input.s0.x.x.rebased10" ]
  %602 = add nsw i64 %indvars.iv3022, %401
  %603 = mul nsw i64 %602, %178
  %604 = sub nsw i64 %603, %179
  br i1 %77, label %"for read_input.s0.x.x4.preheader", label %"end for read_input.s0.x.x5", !prof !386

"for read_input.s0.x.x4.preheader":               ; preds = %"for read_input.s0.y.rebased1"
  %605 = trunc i64 %604 to i32
  %606 = insertelement <32 x i32> undef, i32 %605, i32 0
  %607 = shufflevector <32 x i32> %606, <32 x i32> undef, <32 x i32> zeroinitializer
  %608 = add nuw nsw i64 %400, %indvars.iv3022
  %609 = mul nsw i64 %608, %81
  %610 = sub i64 %609, %82
  br label %"for read_input.s0.x.x4"

"end for read_input.s0.y.rebased2":               ; preds = %"end for read_input.s0.x.x.rebased10", %"end for read_input.s0.y.rebased"
  %a63 = add nsw i32 %blur_y.s0.y.yi.base.s, %85
  %611 = icmp slt i32 %a63, 0
  %a62 = select i1 %611, i32 %a63, i32 0
  %612 = icmp sgt i32 %a62, -34
  %t1631 = sub nsw i32 %read_input.s0.y.epilogue, %11
  br i1 %612, label %"for read_input.s0.y.rebased13.preheader", label %"end for read_input.s0.y.rebased14", !prof !386

"for read_input.s0.y.rebased13.preheader":        ; preds = %"end for read_input.s0.y.rebased2"
  %613 = sext i32 %blur_y.s0.y.yi.base.s to i64
  %a70 = sub nsw i64 %87, %613
  %614 = icmp slt i64 %a70, 34
  %a69 = select i1 %614, i64 %a70, i64 34
  %615 = icmp sgt i64 %a69, 0
  %616 = select i1 %615, i64 %a69, i64 0
  %a62.op = add nsw i32 %a62, 33
  %617 = zext i32 %a62.op to i64
  br label %"for read_input.s0.y.rebased13"

"for read_input.s0.x.x4":                         ; preds = %"for read_input.s0.x.x4.preheader", %"for read_input.s0.x.x4"
  %read_input.s0.x.x6 = phi i32 [ %816, %"for read_input.s0.x.x4" ], [ 0, %"for read_input.s0.x.x4.preheader" ]
  %618 = shl nsw i32 %read_input.s0.x.x6, 5
  %a43 = add nsw i32 %618, %t1606
  %619 = icmp sgt i32 %b37, %a43
  %read_input.s0.x.v2.base.s7 = select i1 %619, i32 %a43, i32 %b37
  %620 = add nsw i32 %read_input.s0.x.v2.base.s7, -32
  %621 = insertelement <32 x i32> undef, i32 %620, i32 0
  %622 = shufflevector <32 x i32> %621, <32 x i32> undef, <32 x i32> zeroinitializer
  %a45 = add nsw <32 x i32> %622, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %623 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %624 = icmp sgt <8 x i32> %74, %623
  %625 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %626 = icmp sgt <8 x i32> %74, %625
  %627 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %628 = icmp sgt <8 x i32> %74, %627
  %629 = shufflevector <32 x i32> %a45, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %630 = icmp sgt <8 x i32> %74, %629
  %631 = select <8 x i1> %624, <8 x i32> %623, <8 x i32> %74
  %632 = select <8 x i1> %626, <8 x i32> %625, <8 x i32> %74
  %633 = select <8 x i1> %628, <8 x i32> %627, <8 x i32> %74
  %634 = select <8 x i1> %630, <8 x i32> %629, <8 x i32> %74
  %635 = icmp sgt <8 x i32> %631, %76
  %636 = icmp sgt <8 x i32> %632, %76
  %637 = icmp sgt <8 x i32> %633, %76
  %638 = icmp sgt <8 x i32> %634, %76
  %639 = select <8 x i1> %635, <8 x i32> %631, <8 x i32> %76
  %640 = select <8 x i1> %636, <8 x i32> %632, <8 x i32> %76
  %641 = select <8 x i1> %637, <8 x i32> %633, <8 x i32> %76
  %642 = select <8 x i1> %638, <8 x i32> %634, <8 x i32> %76
  %643 = shufflevector <8 x i32> %639, <8 x i32> %640, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %644 = shufflevector <8 x i32> %641, <8 x i32> %642, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %645 = shufflevector <16 x i32> %643, <16 x i32> %644, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %646 = add nsw <32 x i32> %645, %607
  %647 = extractelement <32 x i32> %646, i32 0
  %648 = sext i32 %647 to i64
  %649 = getelementptr inbounds i16, i16* %63, i64 %648
  %650 = load i16, i16* %649, align 2, !tbaa !393
  %651 = insertelement <32 x i16> undef, i16 %650, i32 0
  %652 = extractelement <32 x i32> %646, i32 1
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds i16, i16* %63, i64 %653
  %655 = load i16, i16* %654, align 2, !tbaa !393
  %656 = insertelement <32 x i16> %651, i16 %655, i32 1
  %657 = extractelement <32 x i32> %646, i32 2
  %658 = sext i32 %657 to i64
  %659 = getelementptr inbounds i16, i16* %63, i64 %658
  %660 = load i16, i16* %659, align 2, !tbaa !393
  %661 = insertelement <32 x i16> %656, i16 %660, i32 2
  %662 = extractelement <32 x i32> %646, i32 3
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i16, i16* %63, i64 %663
  %665 = load i16, i16* %664, align 2, !tbaa !393
  %666 = insertelement <32 x i16> %661, i16 %665, i32 3
  %667 = extractelement <32 x i32> %646, i32 4
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds i16, i16* %63, i64 %668
  %670 = load i16, i16* %669, align 2, !tbaa !393
  %671 = insertelement <32 x i16> %666, i16 %670, i32 4
  %672 = extractelement <32 x i32> %646, i32 5
  %673 = sext i32 %672 to i64
  %674 = getelementptr inbounds i16, i16* %63, i64 %673
  %675 = load i16, i16* %674, align 2, !tbaa !393
  %676 = insertelement <32 x i16> %671, i16 %675, i32 5
  %677 = extractelement <32 x i32> %646, i32 6
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds i16, i16* %63, i64 %678
  %680 = load i16, i16* %679, align 2, !tbaa !393
  %681 = insertelement <32 x i16> %676, i16 %680, i32 6
  %682 = extractelement <32 x i32> %646, i32 7
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i16, i16* %63, i64 %683
  %685 = load i16, i16* %684, align 2, !tbaa !393
  %686 = insertelement <32 x i16> %681, i16 %685, i32 7
  %687 = extractelement <32 x i32> %646, i32 8
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds i16, i16* %63, i64 %688
  %690 = load i16, i16* %689, align 2, !tbaa !393
  %691 = insertelement <32 x i16> %686, i16 %690, i32 8
  %692 = extractelement <32 x i32> %646, i32 9
  %693 = sext i32 %692 to i64
  %694 = getelementptr inbounds i16, i16* %63, i64 %693
  %695 = load i16, i16* %694, align 2, !tbaa !393
  %696 = insertelement <32 x i16> %691, i16 %695, i32 9
  %697 = extractelement <32 x i32> %646, i32 10
  %698 = sext i32 %697 to i64
  %699 = getelementptr inbounds i16, i16* %63, i64 %698
  %700 = load i16, i16* %699, align 2, !tbaa !393
  %701 = insertelement <32 x i16> %696, i16 %700, i32 10
  %702 = extractelement <32 x i32> %646, i32 11
  %703 = sext i32 %702 to i64
  %704 = getelementptr inbounds i16, i16* %63, i64 %703
  %705 = load i16, i16* %704, align 2, !tbaa !393
  %706 = insertelement <32 x i16> %701, i16 %705, i32 11
  %707 = extractelement <32 x i32> %646, i32 12
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i16, i16* %63, i64 %708
  %710 = load i16, i16* %709, align 2, !tbaa !393
  %711 = insertelement <32 x i16> %706, i16 %710, i32 12
  %712 = extractelement <32 x i32> %646, i32 13
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds i16, i16* %63, i64 %713
  %715 = load i16, i16* %714, align 2, !tbaa !393
  %716 = insertelement <32 x i16> %711, i16 %715, i32 13
  %717 = extractelement <32 x i32> %646, i32 14
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i16, i16* %63, i64 %718
  %720 = load i16, i16* %719, align 2, !tbaa !393
  %721 = insertelement <32 x i16> %716, i16 %720, i32 14
  %722 = extractelement <32 x i32> %646, i32 15
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds i16, i16* %63, i64 %723
  %725 = load i16, i16* %724, align 2, !tbaa !393
  %726 = insertelement <32 x i16> %721, i16 %725, i32 15
  %727 = extractelement <32 x i32> %646, i32 16
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i16, i16* %63, i64 %728
  %730 = load i16, i16* %729, align 2, !tbaa !393
  %731 = insertelement <32 x i16> %726, i16 %730, i32 16
  %732 = extractelement <32 x i32> %646, i32 17
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds i16, i16* %63, i64 %733
  %735 = load i16, i16* %734, align 2, !tbaa !393
  %736 = insertelement <32 x i16> %731, i16 %735, i32 17
  %737 = extractelement <32 x i32> %646, i32 18
  %738 = sext i32 %737 to i64
  %739 = getelementptr inbounds i16, i16* %63, i64 %738
  %740 = load i16, i16* %739, align 2, !tbaa !393
  %741 = insertelement <32 x i16> %736, i16 %740, i32 18
  %742 = extractelement <32 x i32> %646, i32 19
  %743 = sext i32 %742 to i64
  %744 = getelementptr inbounds i16, i16* %63, i64 %743
  %745 = load i16, i16* %744, align 2, !tbaa !393
  %746 = insertelement <32 x i16> %741, i16 %745, i32 19
  %747 = extractelement <32 x i32> %646, i32 20
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i16, i16* %63, i64 %748
  %750 = load i16, i16* %749, align 2, !tbaa !393
  %751 = insertelement <32 x i16> %746, i16 %750, i32 20
  %752 = extractelement <32 x i32> %646, i32 21
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds i16, i16* %63, i64 %753
  %755 = load i16, i16* %754, align 2, !tbaa !393
  %756 = insertelement <32 x i16> %751, i16 %755, i32 21
  %757 = extractelement <32 x i32> %646, i32 22
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds i16, i16* %63, i64 %758
  %760 = load i16, i16* %759, align 2, !tbaa !393
  %761 = insertelement <32 x i16> %756, i16 %760, i32 22
  %762 = extractelement <32 x i32> %646, i32 23
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds i16, i16* %63, i64 %763
  %765 = load i16, i16* %764, align 2, !tbaa !393
  %766 = insertelement <32 x i16> %761, i16 %765, i32 23
  %767 = extractelement <32 x i32> %646, i32 24
  %768 = sext i32 %767 to i64
  %769 = getelementptr inbounds i16, i16* %63, i64 %768
  %770 = load i16, i16* %769, align 2, !tbaa !393
  %771 = insertelement <32 x i16> %766, i16 %770, i32 24
  %772 = extractelement <32 x i32> %646, i32 25
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds i16, i16* %63, i64 %773
  %775 = load i16, i16* %774, align 2, !tbaa !393
  %776 = insertelement <32 x i16> %771, i16 %775, i32 25
  %777 = extractelement <32 x i32> %646, i32 26
  %778 = sext i32 %777 to i64
  %779 = getelementptr inbounds i16, i16* %63, i64 %778
  %780 = load i16, i16* %779, align 2, !tbaa !393
  %781 = insertelement <32 x i16> %776, i16 %780, i32 26
  %782 = extractelement <32 x i32> %646, i32 27
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i16, i16* %63, i64 %783
  %785 = load i16, i16* %784, align 2, !tbaa !393
  %786 = insertelement <32 x i16> %781, i16 %785, i32 27
  %787 = extractelement <32 x i32> %646, i32 28
  %788 = sext i32 %787 to i64
  %789 = getelementptr inbounds i16, i16* %63, i64 %788
  %790 = load i16, i16* %789, align 2, !tbaa !393
  %791 = insertelement <32 x i16> %786, i16 %790, i32 28
  %792 = extractelement <32 x i32> %646, i32 29
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i16, i16* %63, i64 %793
  %795 = load i16, i16* %794, align 2, !tbaa !393
  %796 = insertelement <32 x i16> %791, i16 %795, i32 29
  %797 = extractelement <32 x i32> %646, i32 30
  %798 = sext i32 %797 to i64
  %799 = getelementptr inbounds i16, i16* %63, i64 %798
  %800 = load i16, i16* %799, align 2, !tbaa !393
  %801 = insertelement <32 x i16> %796, i16 %800, i32 30
  %802 = extractelement <32 x i32> %646, i32 31
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds i16, i16* %63, i64 %803
  %805 = load i16, i16* %804, align 2, !tbaa !393
  %806 = insertelement <32 x i16> %801, i16 %805, i32 31
  %807 = shufflevector <32 x i16> %806, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %808 = sext i32 %read_input.s0.x.v2.base.s7 to i64
  %809 = add nsw i64 %610, %808
  %810 = getelementptr inbounds i16, i16* %read_input, i64 %809
  %811 = getelementptr inbounds i16, i16* %810, i64 -32
  %812 = bitcast i16* %811 to <16 x i16>*
  store <16 x i16> %807, <16 x i16>* %812, align 2, !tbaa !396
  %813 = shufflevector <32 x i16> %806, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %814 = getelementptr inbounds i16, i16* %810, i64 -16
  %815 = bitcast i16* %814 to <16 x i16>*
  store <16 x i16> %813, <16 x i16>* %815, align 2, !tbaa !396
  %816 = add nuw nsw i32 %read_input.s0.x.x6, 1
  %.not2593 = icmp eq i32 %816, %b18
  br i1 %.not2593, label %"end for read_input.s0.x.x5", label %"for read_input.s0.x.x4"

"end for read_input.s0.x.x5":                     ; preds = %"for read_input.s0.x.x4", %"for read_input.s0.y.rebased1"
  br i1 %83, label %"for read_input.s0.x.x.rebased.preheader", label %"end for read_input.s0.x.x.rebased", !prof !386

"for read_input.s0.x.x.rebased.preheader":        ; preds = %"end for read_input.s0.x.x5"
  %817 = add nuw nsw i64 %400, %indvars.iv3022
  %818 = mul nsw i64 %817, %81
  %819 = sub i64 %818, %82
  br i1 %182, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"for read_input.s0.x.x.rebased":                  ; preds = %"for read_input.s0.x.x.rebased.preheader", %"for read_input.s0.x.x.rebased"
  %indvars.iv3019 = phi i64 [ %indvars.iv.next3020.3, %"for read_input.s0.x.x.rebased" ], [ 0, %"for read_input.s0.x.x.rebased.preheader" ]
  %niter = phi i64 [ %niter.nsub.3, %"for read_input.s0.x.x.rebased" ], [ %unroll_iter, %"for read_input.s0.x.x.rebased.preheader" ]
  %820 = add nuw nsw i64 %indvars.iv3019, %175
  %821 = shl nsw i64 %820, 5
  %822 = add nsw i64 %821, %176
  %823 = add nsw i64 %822, %604
  %824 = getelementptr inbounds i16, i16* %63, i64 %823
  %825 = getelementptr inbounds i16, i16* %824, i64 -32
  %826 = bitcast i16* %825 to <16 x i16>*
  %827 = load <16 x i16>, <16 x i16>* %826, align 2, !tbaa !393
  %828 = getelementptr inbounds i16, i16* %824, i64 -16
  %829 = bitcast i16* %828 to <16 x i16>*
  %830 = load <16 x i16>, <16 x i16>* %829, align 2, !tbaa !393
  %831 = add nsw i64 %819, %822
  %832 = getelementptr inbounds i16, i16* %read_input, i64 %831
  %833 = getelementptr inbounds i16, i16* %832, i64 -32
  %834 = bitcast i16* %833 to <16 x i16>*
  store <16 x i16> %827, <16 x i16>* %834, align 2, !tbaa !396
  %835 = getelementptr inbounds i16, i16* %832, i64 -16
  %836 = bitcast i16* %835 to <16 x i16>*
  store <16 x i16> %830, <16 x i16>* %836, align 2, !tbaa !396
  %indvars.iv.next3020 = or i64 %indvars.iv3019, 1
  %837 = add nuw nsw i64 %indvars.iv.next3020, %175
  %838 = shl nsw i64 %837, 5
  %839 = add nsw i64 %838, %176
  %840 = add nsw i64 %839, %604
  %841 = getelementptr inbounds i16, i16* %63, i64 %840
  %842 = getelementptr inbounds i16, i16* %841, i64 -32
  %843 = bitcast i16* %842 to <16 x i16>*
  %844 = load <16 x i16>, <16 x i16>* %843, align 2, !tbaa !393
  %845 = getelementptr inbounds i16, i16* %841, i64 -16
  %846 = bitcast i16* %845 to <16 x i16>*
  %847 = load <16 x i16>, <16 x i16>* %846, align 2, !tbaa !393
  %848 = add nsw i64 %819, %839
  %849 = getelementptr inbounds i16, i16* %read_input, i64 %848
  %850 = getelementptr inbounds i16, i16* %849, i64 -32
  %851 = bitcast i16* %850 to <16 x i16>*
  store <16 x i16> %844, <16 x i16>* %851, align 2, !tbaa !396
  %852 = getelementptr inbounds i16, i16* %849, i64 -16
  %853 = bitcast i16* %852 to <16 x i16>*
  store <16 x i16> %847, <16 x i16>* %853, align 2, !tbaa !396
  %indvars.iv.next3020.1 = or i64 %indvars.iv3019, 2
  %854 = add nuw nsw i64 %indvars.iv.next3020.1, %175
  %855 = shl nsw i64 %854, 5
  %856 = add nsw i64 %855, %176
  %857 = add nsw i64 %856, %604
  %858 = getelementptr inbounds i16, i16* %63, i64 %857
  %859 = getelementptr inbounds i16, i16* %858, i64 -32
  %860 = bitcast i16* %859 to <16 x i16>*
  %861 = load <16 x i16>, <16 x i16>* %860, align 2, !tbaa !393
  %862 = getelementptr inbounds i16, i16* %858, i64 -16
  %863 = bitcast i16* %862 to <16 x i16>*
  %864 = load <16 x i16>, <16 x i16>* %863, align 2, !tbaa !393
  %865 = add nsw i64 %819, %856
  %866 = getelementptr inbounds i16, i16* %read_input, i64 %865
  %867 = getelementptr inbounds i16, i16* %866, i64 -32
  %868 = bitcast i16* %867 to <16 x i16>*
  store <16 x i16> %861, <16 x i16>* %868, align 2, !tbaa !396
  %869 = getelementptr inbounds i16, i16* %866, i64 -16
  %870 = bitcast i16* %869 to <16 x i16>*
  store <16 x i16> %864, <16 x i16>* %870, align 2, !tbaa !396
  %indvars.iv.next3020.2 = or i64 %indvars.iv3019, 3
  %871 = add nuw nsw i64 %indvars.iv.next3020.2, %175
  %872 = shl nsw i64 %871, 5
  %873 = add nsw i64 %872, %176
  %874 = add nsw i64 %873, %604
  %875 = getelementptr inbounds i16, i16* %63, i64 %874
  %876 = getelementptr inbounds i16, i16* %875, i64 -32
  %877 = bitcast i16* %876 to <16 x i16>*
  %878 = load <16 x i16>, <16 x i16>* %877, align 2, !tbaa !393
  %879 = getelementptr inbounds i16, i16* %875, i64 -16
  %880 = bitcast i16* %879 to <16 x i16>*
  %881 = load <16 x i16>, <16 x i16>* %880, align 2, !tbaa !393
  %882 = add nsw i64 %819, %873
  %883 = getelementptr inbounds i16, i16* %read_input, i64 %882
  %884 = getelementptr inbounds i16, i16* %883, i64 -32
  %885 = bitcast i16* %884 to <16 x i16>*
  store <16 x i16> %878, <16 x i16>* %885, align 2, !tbaa !396
  %886 = getelementptr inbounds i16, i16* %883, i64 -16
  %887 = bitcast i16* %886 to <16 x i16>*
  store <16 x i16> %881, <16 x i16>* %887, align 2, !tbaa !396
  %indvars.iv.next3020.3 = add nuw nsw i64 %indvars.iv3019, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3 = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3, label %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased"

"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased", %"for read_input.s0.x.x.rebased.preheader"
  %indvars.iv3019.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3020.3, %"for read_input.s0.x.x.rebased" ]
  br i1 %lcmp.mod.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil"

"for read_input.s0.x.x.rebased.epil":             ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil"
  %indvars.iv3019.epil = phi i64 [ %indvars.iv.next3020.epil, %"for read_input.s0.x.x.rebased.epil" ], [ %indvars.iv3019.unr, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %epil.iter = phi i64 [ %epil.iter.sub, %"for read_input.s0.x.x.rebased.epil" ], [ %xtraiter, %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa" ]
  %888 = add nuw nsw i64 %indvars.iv3019.epil, %175
  %889 = shl nsw i64 %888, 5
  %890 = add nsw i64 %889, %176
  %891 = add nsw i64 %890, %604
  %892 = getelementptr inbounds i16, i16* %63, i64 %891
  %893 = getelementptr inbounds i16, i16* %892, i64 -32
  %894 = bitcast i16* %893 to <16 x i16>*
  %895 = load <16 x i16>, <16 x i16>* %894, align 2, !tbaa !393
  %896 = getelementptr inbounds i16, i16* %892, i64 -16
  %897 = bitcast i16* %896 to <16 x i16>*
  %898 = load <16 x i16>, <16 x i16>* %897, align 2, !tbaa !393
  %899 = add nsw i64 %819, %890
  %900 = getelementptr inbounds i16, i16* %read_input, i64 %899
  %901 = getelementptr inbounds i16, i16* %900, i64 -32
  %902 = bitcast i16* %901 to <16 x i16>*
  store <16 x i16> %895, <16 x i16>* %902, align 2, !tbaa !396
  %903 = getelementptr inbounds i16, i16* %900, i64 -16
  %904 = bitcast i16* %903 to <16 x i16>*
  store <16 x i16> %898, <16 x i16>* %904, align 2, !tbaa !396
  %indvars.iv.next3020.epil = add nuw nsw i64 %indvars.iv3019.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %"end for read_input.s0.x.x.rebased", label %"for read_input.s0.x.x.rebased.epil", !llvm.loop !398

"end for read_input.s0.x.x.rebased":              ; preds = %"end for read_input.s0.x.x.rebased.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased.epil", %"end for read_input.s0.x.x5"
  br i1 %84, label %"for read_input.s0.x.x.rebased9.preheader", label %"end for read_input.s0.x.x.rebased10", !prof !386

"for read_input.s0.x.x.rebased9.preheader":       ; preds = %"end for read_input.s0.x.x.rebased"
  %905 = trunc i64 %604 to i32
  %906 = insertelement <32 x i32> undef, i32 %905, i32 0
  %907 = shufflevector <32 x i32> %906, <32 x i32> undef, <32 x i32> zeroinitializer
  %908 = add nuw nsw i64 %400, %indvars.iv3022
  %909 = mul nsw i64 %908, %81
  %910 = sub i64 %909, %82
  br label %"for read_input.s0.x.x.rebased9"

"for read_input.s0.x.x.rebased9":                 ; preds = %"for read_input.s0.x.x.rebased9.preheader", %"for read_input.s0.x.x.rebased9"
  %read_input.s0.x.x.rebased11 = phi i32 [ %1110, %"for read_input.s0.x.x.rebased9" ], [ 0, %"for read_input.s0.x.x.rebased9.preheader" ]
  %911 = add nsw i32 %read_input.s0.x.x.rebased11, %t1580
  %912 = shl nsw i32 %911, 5
  %a54 = add nsw i32 %912, %t1606
  %913 = icmp sgt i32 %b37, %a54
  %read_input.s0.x.v2.base.s12 = select i1 %913, i32 %a54, i32 %b37
  %914 = add nsw i32 %read_input.s0.x.v2.base.s12, -32
  %915 = insertelement <32 x i32> undef, i32 %914, i32 0
  %916 = shufflevector <32 x i32> %915, <32 x i32> undef, <32 x i32> zeroinitializer
  %a56 = add nsw <32 x i32> %916, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %917 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %918 = icmp sgt <8 x i32> %74, %917
  %919 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %920 = icmp sgt <8 x i32> %74, %919
  %921 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %922 = icmp sgt <8 x i32> %74, %921
  %923 = shufflevector <32 x i32> %a56, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %924 = icmp sgt <8 x i32> %74, %923
  %925 = select <8 x i1> %918, <8 x i32> %917, <8 x i32> %74
  %926 = select <8 x i1> %920, <8 x i32> %919, <8 x i32> %74
  %927 = select <8 x i1> %922, <8 x i32> %921, <8 x i32> %74
  %928 = select <8 x i1> %924, <8 x i32> %923, <8 x i32> %74
  %929 = icmp sgt <8 x i32> %925, %76
  %930 = icmp sgt <8 x i32> %926, %76
  %931 = icmp sgt <8 x i32> %927, %76
  %932 = icmp sgt <8 x i32> %928, %76
  %933 = select <8 x i1> %929, <8 x i32> %925, <8 x i32> %76
  %934 = select <8 x i1> %930, <8 x i32> %926, <8 x i32> %76
  %935 = select <8 x i1> %931, <8 x i32> %927, <8 x i32> %76
  %936 = select <8 x i1> %932, <8 x i32> %928, <8 x i32> %76
  %937 = shufflevector <8 x i32> %933, <8 x i32> %934, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %938 = shufflevector <8 x i32> %935, <8 x i32> %936, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %939 = shufflevector <16 x i32> %937, <16 x i32> %938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %940 = add nsw <32 x i32> %939, %907
  %941 = extractelement <32 x i32> %940, i32 0
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds i16, i16* %63, i64 %942
  %944 = load i16, i16* %943, align 2, !tbaa !393
  %945 = insertelement <32 x i16> undef, i16 %944, i32 0
  %946 = extractelement <32 x i32> %940, i32 1
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i16, i16* %63, i64 %947
  %949 = load i16, i16* %948, align 2, !tbaa !393
  %950 = insertelement <32 x i16> %945, i16 %949, i32 1
  %951 = extractelement <32 x i32> %940, i32 2
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds i16, i16* %63, i64 %952
  %954 = load i16, i16* %953, align 2, !tbaa !393
  %955 = insertelement <32 x i16> %950, i16 %954, i32 2
  %956 = extractelement <32 x i32> %940, i32 3
  %957 = sext i32 %956 to i64
  %958 = getelementptr inbounds i16, i16* %63, i64 %957
  %959 = load i16, i16* %958, align 2, !tbaa !393
  %960 = insertelement <32 x i16> %955, i16 %959, i32 3
  %961 = extractelement <32 x i32> %940, i32 4
  %962 = sext i32 %961 to i64
  %963 = getelementptr inbounds i16, i16* %63, i64 %962
  %964 = load i16, i16* %963, align 2, !tbaa !393
  %965 = insertelement <32 x i16> %960, i16 %964, i32 4
  %966 = extractelement <32 x i32> %940, i32 5
  %967 = sext i32 %966 to i64
  %968 = getelementptr inbounds i16, i16* %63, i64 %967
  %969 = load i16, i16* %968, align 2, !tbaa !393
  %970 = insertelement <32 x i16> %965, i16 %969, i32 5
  %971 = extractelement <32 x i32> %940, i32 6
  %972 = sext i32 %971 to i64
  %973 = getelementptr inbounds i16, i16* %63, i64 %972
  %974 = load i16, i16* %973, align 2, !tbaa !393
  %975 = insertelement <32 x i16> %970, i16 %974, i32 6
  %976 = extractelement <32 x i32> %940, i32 7
  %977 = sext i32 %976 to i64
  %978 = getelementptr inbounds i16, i16* %63, i64 %977
  %979 = load i16, i16* %978, align 2, !tbaa !393
  %980 = insertelement <32 x i16> %975, i16 %979, i32 7
  %981 = extractelement <32 x i32> %940, i32 8
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds i16, i16* %63, i64 %982
  %984 = load i16, i16* %983, align 2, !tbaa !393
  %985 = insertelement <32 x i16> %980, i16 %984, i32 8
  %986 = extractelement <32 x i32> %940, i32 9
  %987 = sext i32 %986 to i64
  %988 = getelementptr inbounds i16, i16* %63, i64 %987
  %989 = load i16, i16* %988, align 2, !tbaa !393
  %990 = insertelement <32 x i16> %985, i16 %989, i32 9
  %991 = extractelement <32 x i32> %940, i32 10
  %992 = sext i32 %991 to i64
  %993 = getelementptr inbounds i16, i16* %63, i64 %992
  %994 = load i16, i16* %993, align 2, !tbaa !393
  %995 = insertelement <32 x i16> %990, i16 %994, i32 10
  %996 = extractelement <32 x i32> %940, i32 11
  %997 = sext i32 %996 to i64
  %998 = getelementptr inbounds i16, i16* %63, i64 %997
  %999 = load i16, i16* %998, align 2, !tbaa !393
  %1000 = insertelement <32 x i16> %995, i16 %999, i32 11
  %1001 = extractelement <32 x i32> %940, i32 12
  %1002 = sext i32 %1001 to i64
  %1003 = getelementptr inbounds i16, i16* %63, i64 %1002
  %1004 = load i16, i16* %1003, align 2, !tbaa !393
  %1005 = insertelement <32 x i16> %1000, i16 %1004, i32 12
  %1006 = extractelement <32 x i32> %940, i32 13
  %1007 = sext i32 %1006 to i64
  %1008 = getelementptr inbounds i16, i16* %63, i64 %1007
  %1009 = load i16, i16* %1008, align 2, !tbaa !393
  %1010 = insertelement <32 x i16> %1005, i16 %1009, i32 13
  %1011 = extractelement <32 x i32> %940, i32 14
  %1012 = sext i32 %1011 to i64
  %1013 = getelementptr inbounds i16, i16* %63, i64 %1012
  %1014 = load i16, i16* %1013, align 2, !tbaa !393
  %1015 = insertelement <32 x i16> %1010, i16 %1014, i32 14
  %1016 = extractelement <32 x i32> %940, i32 15
  %1017 = sext i32 %1016 to i64
  %1018 = getelementptr inbounds i16, i16* %63, i64 %1017
  %1019 = load i16, i16* %1018, align 2, !tbaa !393
  %1020 = insertelement <32 x i16> %1015, i16 %1019, i32 15
  %1021 = extractelement <32 x i32> %940, i32 16
  %1022 = sext i32 %1021 to i64
  %1023 = getelementptr inbounds i16, i16* %63, i64 %1022
  %1024 = load i16, i16* %1023, align 2, !tbaa !393
  %1025 = insertelement <32 x i16> %1020, i16 %1024, i32 16
  %1026 = extractelement <32 x i32> %940, i32 17
  %1027 = sext i32 %1026 to i64
  %1028 = getelementptr inbounds i16, i16* %63, i64 %1027
  %1029 = load i16, i16* %1028, align 2, !tbaa !393
  %1030 = insertelement <32 x i16> %1025, i16 %1029, i32 17
  %1031 = extractelement <32 x i32> %940, i32 18
  %1032 = sext i32 %1031 to i64
  %1033 = getelementptr inbounds i16, i16* %63, i64 %1032
  %1034 = load i16, i16* %1033, align 2, !tbaa !393
  %1035 = insertelement <32 x i16> %1030, i16 %1034, i32 18
  %1036 = extractelement <32 x i32> %940, i32 19
  %1037 = sext i32 %1036 to i64
  %1038 = getelementptr inbounds i16, i16* %63, i64 %1037
  %1039 = load i16, i16* %1038, align 2, !tbaa !393
  %1040 = insertelement <32 x i16> %1035, i16 %1039, i32 19
  %1041 = extractelement <32 x i32> %940, i32 20
  %1042 = sext i32 %1041 to i64
  %1043 = getelementptr inbounds i16, i16* %63, i64 %1042
  %1044 = load i16, i16* %1043, align 2, !tbaa !393
  %1045 = insertelement <32 x i16> %1040, i16 %1044, i32 20
  %1046 = extractelement <32 x i32> %940, i32 21
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds i16, i16* %63, i64 %1047
  %1049 = load i16, i16* %1048, align 2, !tbaa !393
  %1050 = insertelement <32 x i16> %1045, i16 %1049, i32 21
  %1051 = extractelement <32 x i32> %940, i32 22
  %1052 = sext i32 %1051 to i64
  %1053 = getelementptr inbounds i16, i16* %63, i64 %1052
  %1054 = load i16, i16* %1053, align 2, !tbaa !393
  %1055 = insertelement <32 x i16> %1050, i16 %1054, i32 22
  %1056 = extractelement <32 x i32> %940, i32 23
  %1057 = sext i32 %1056 to i64
  %1058 = getelementptr inbounds i16, i16* %63, i64 %1057
  %1059 = load i16, i16* %1058, align 2, !tbaa !393
  %1060 = insertelement <32 x i16> %1055, i16 %1059, i32 23
  %1061 = extractelement <32 x i32> %940, i32 24
  %1062 = sext i32 %1061 to i64
  %1063 = getelementptr inbounds i16, i16* %63, i64 %1062
  %1064 = load i16, i16* %1063, align 2, !tbaa !393
  %1065 = insertelement <32 x i16> %1060, i16 %1064, i32 24
  %1066 = extractelement <32 x i32> %940, i32 25
  %1067 = sext i32 %1066 to i64
  %1068 = getelementptr inbounds i16, i16* %63, i64 %1067
  %1069 = load i16, i16* %1068, align 2, !tbaa !393
  %1070 = insertelement <32 x i16> %1065, i16 %1069, i32 25
  %1071 = extractelement <32 x i32> %940, i32 26
  %1072 = sext i32 %1071 to i64
  %1073 = getelementptr inbounds i16, i16* %63, i64 %1072
  %1074 = load i16, i16* %1073, align 2, !tbaa !393
  %1075 = insertelement <32 x i16> %1070, i16 %1074, i32 26
  %1076 = extractelement <32 x i32> %940, i32 27
  %1077 = sext i32 %1076 to i64
  %1078 = getelementptr inbounds i16, i16* %63, i64 %1077
  %1079 = load i16, i16* %1078, align 2, !tbaa !393
  %1080 = insertelement <32 x i16> %1075, i16 %1079, i32 27
  %1081 = extractelement <32 x i32> %940, i32 28
  %1082 = sext i32 %1081 to i64
  %1083 = getelementptr inbounds i16, i16* %63, i64 %1082
  %1084 = load i16, i16* %1083, align 2, !tbaa !393
  %1085 = insertelement <32 x i16> %1080, i16 %1084, i32 28
  %1086 = extractelement <32 x i32> %940, i32 29
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds i16, i16* %63, i64 %1087
  %1089 = load i16, i16* %1088, align 2, !tbaa !393
  %1090 = insertelement <32 x i16> %1085, i16 %1089, i32 29
  %1091 = extractelement <32 x i32> %940, i32 30
  %1092 = sext i32 %1091 to i64
  %1093 = getelementptr inbounds i16, i16* %63, i64 %1092
  %1094 = load i16, i16* %1093, align 2, !tbaa !393
  %1095 = insertelement <32 x i16> %1090, i16 %1094, i32 30
  %1096 = extractelement <32 x i32> %940, i32 31
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds i16, i16* %63, i64 %1097
  %1099 = load i16, i16* %1098, align 2, !tbaa !393
  %1100 = insertelement <32 x i16> %1095, i16 %1099, i32 31
  %1101 = shufflevector <32 x i16> %1100, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1102 = sext i32 %read_input.s0.x.v2.base.s12 to i64
  %1103 = add nsw i64 %910, %1102
  %1104 = getelementptr inbounds i16, i16* %read_input, i64 %1103
  %1105 = getelementptr inbounds i16, i16* %1104, i64 -32
  %1106 = bitcast i16* %1105 to <16 x i16>*
  store <16 x i16> %1101, <16 x i16>* %1106, align 2, !tbaa !396
  %1107 = shufflevector <32 x i16> %1100, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1108 = getelementptr inbounds i16, i16* %1104, i64 -16
  %1109 = bitcast i16* %1108 to <16 x i16>*
  store <16 x i16> %1107, <16 x i16>* %1109, align 2, !tbaa !396
  %1110 = add nuw nsw i32 %read_input.s0.x.x.rebased11, 1
  %.not2591 = icmp eq i32 %1110, %t1617
  br i1 %.not2591, label %"end for read_input.s0.x.x.rebased10", label %"for read_input.s0.x.x.rebased9"

"end for read_input.s0.x.x.rebased10":            ; preds = %"for read_input.s0.x.x.rebased9", %"end for read_input.s0.x.x.rebased"
  %indvars.iv.next3023 = add nuw nsw i64 %indvars.iv3022, 1
  %.not2590 = icmp eq i64 %indvars.iv.next3023, %402
  br i1 %.not2590, label %"end for read_input.s0.y.rebased2", label %"for read_input.s0.y.rebased1"

"for read_input.s0.y.rebased13":                  ; preds = %"for read_input.s0.y.rebased13.preheader", %"end for read_input.s0.x.x17"
  %indvars.iv3025 = phi i64 [ 0, %"for read_input.s0.y.rebased13.preheader" ], [ %indvars.iv.next3026, %"end for read_input.s0.x.x17" ]
  %1111 = trunc i64 %indvars.iv3025 to i32
  %a65 = add nsw i32 %t1631, %1111
  %1112 = icmp sgt i32 %b36, %a65
  %a64 = select i1 %1112, i32 %a65, i32 %b36
  %1113 = icmp sgt i32 %a64, 0
  %1114 = select i1 %1113, i32 %a64, i32 0
  %1115 = mul nsw i32 %1114, %13
  %t1635 = sub nsw i32 %1115, %9
  %1116 = insertelement <32 x i32> undef, i32 %t1635, i32 0
  %1117 = shufflevector <32 x i32> %1116, <32 x i32> undef, <32 x i32> zeroinitializer
  %1118 = add nuw nsw i64 %616, %indvars.iv3025
  %1119 = mul nsw i64 %1118, %81
  %1120 = sub i64 %1119, %82
  br label %"for read_input.s0.x.x16"

"end for read_input.s0.y.rebased14":              ; preds = %"end for read_input.s0.x.x17", %"end for read_input.s0.y.rebased2"
  %1121 = load i64, i64* %.fca.1.gep2280, align 8, !tbaa !387
  %cmp.i2645 = icmp ult i64 %1121, %91
  %1122 = load i8*, i8** %.fca.0.gep2279, align 8, !tbaa !389
  br i1 %cmp.i2645, label %if.then.i2648, label %pseudostack_alloc.exit2661, !prof !390

if.then.i2648:                                    ; preds = %"end for read_input.s0.y.rebased14"
  %tobool1.not.i2647 = icmp ne i8* %1122, null
  %1123 = load i64, i64* %.fca.2.gep2281, align 8
  %cmp2.i2650 = icmp ugt i64 %1123, 16384
  %or.cond2732 = and i1 %tobool1.not.i2647, %cmp2.i2650
  br i1 %or.cond2732, label %if.then3.i2652, label %if.end.i2656

if.then3.i2652:                                   ; preds = %if.then.i2648
  call void @halide_free(i8* null, i8* nonnull %1122) #16
  %.pre3243 = load i64, i64* %.fca.2.gep2281, align 8, !tbaa !391
  br label %if.end.i2656

if.end.i2656:                                     ; preds = %if.then3.i2652, %if.then.i2648
  %1124 = phi i64 [ %.pre3243, %if.then3.i2652 ], [ %1123, %if.then.i2648 ]
  %add.i2654 = add i64 %1124, %91
  store i64 %add.i2654, i64* %.fca.2.gep2281, align 8, !tbaa !391
  %cmp7.i2655 = icmp ugt i64 %add.i2654, 16384
  br i1 %cmp7.i2655, label %if.then8.i2658, label %if.end11.i2660

if.then8.i2658:                                   ; preds = %if.end.i2656
  %call.i2657 = call i8* @halide_malloc(i8* null, i64 %91) #16
  br label %if.end11.i2660

if.end11.i2660:                                   ; preds = %if.then8.i2658, %if.end.i2656
  %storemerge.i2659 = phi i8* [ %call.i2657, %if.then8.i2658 ], [ null, %if.end.i2656 ]
  store i8* %storemerge.i2659, i8** %.fca.0.gep2279, align 8, !tbaa !389
  store i64 %91, i64* %.fca.1.gep2280, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2661

pseudostack_alloc.exit2661:                       ; preds = %"end for read_input.s0.y.rebased14", %if.end11.i2660
  %1125 = phi i8* [ %storemerge.i2659, %if.end11.i2660 ], [ %1122, %"end for read_input.s0.y.rebased14" ]
  %1126 = bitcast i8* %1125 to i16*
  %.not2517 = icmp eq i8* %1125, null
  br i1 %.not2517, label %then_bb21, label %"consume read_input", !prof !392

"for read_input.s0.x.x16":                        ; preds = %"for read_input.s0.y.rebased13", %"for read_input.s0.x.x16"
  %read_input.s0.x.x18 = phi i32 [ %1325, %"for read_input.s0.x.x16" ], [ 0, %"for read_input.s0.y.rebased13" ]
  %1127 = shl nsw i32 %read_input.s0.x.x18, 5
  %a66 = add nsw i32 %1127, %t1606
  %1128 = icmp sgt i32 %b37, %a66
  %read_input.s0.x.v2.base.s19 = select i1 %1128, i32 %a66, i32 %b37
  %1129 = add nsw i32 %read_input.s0.x.v2.base.s19, -32
  %1130 = insertelement <32 x i32> undef, i32 %1129, i32 0
  %1131 = shufflevector <32 x i32> %1130, <32 x i32> undef, <32 x i32> zeroinitializer
  %a68 = add nsw <32 x i32> %1131, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1132 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1133 = icmp sgt <8 x i32> %74, %1132
  %1134 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1135 = icmp sgt <8 x i32> %74, %1134
  %1136 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %1137 = icmp sgt <8 x i32> %74, %1136
  %1138 = shufflevector <32 x i32> %a68, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1139 = icmp sgt <8 x i32> %74, %1138
  %1140 = select <8 x i1> %1133, <8 x i32> %1132, <8 x i32> %74
  %1141 = select <8 x i1> %1135, <8 x i32> %1134, <8 x i32> %74
  %1142 = select <8 x i1> %1137, <8 x i32> %1136, <8 x i32> %74
  %1143 = select <8 x i1> %1139, <8 x i32> %1138, <8 x i32> %74
  %1144 = icmp sgt <8 x i32> %1140, %76
  %1145 = icmp sgt <8 x i32> %1141, %76
  %1146 = icmp sgt <8 x i32> %1142, %76
  %1147 = icmp sgt <8 x i32> %1143, %76
  %1148 = select <8 x i1> %1144, <8 x i32> %1140, <8 x i32> %76
  %1149 = select <8 x i1> %1145, <8 x i32> %1141, <8 x i32> %76
  %1150 = select <8 x i1> %1146, <8 x i32> %1142, <8 x i32> %76
  %1151 = select <8 x i1> %1147, <8 x i32> %1143, <8 x i32> %76
  %1152 = shufflevector <8 x i32> %1148, <8 x i32> %1149, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1153 = shufflevector <8 x i32> %1150, <8 x i32> %1151, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1154 = shufflevector <16 x i32> %1152, <16 x i32> %1153, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1155 = add nsw <32 x i32> %1154, %1117
  %1156 = extractelement <32 x i32> %1155, i32 0
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds i16, i16* %63, i64 %1157
  %1159 = load i16, i16* %1158, align 2, !tbaa !393
  %1160 = insertelement <32 x i16> undef, i16 %1159, i32 0
  %1161 = extractelement <32 x i32> %1155, i32 1
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds i16, i16* %63, i64 %1162
  %1164 = load i16, i16* %1163, align 2, !tbaa !393
  %1165 = insertelement <32 x i16> %1160, i16 %1164, i32 1
  %1166 = extractelement <32 x i32> %1155, i32 2
  %1167 = sext i32 %1166 to i64
  %1168 = getelementptr inbounds i16, i16* %63, i64 %1167
  %1169 = load i16, i16* %1168, align 2, !tbaa !393
  %1170 = insertelement <32 x i16> %1165, i16 %1169, i32 2
  %1171 = extractelement <32 x i32> %1155, i32 3
  %1172 = sext i32 %1171 to i64
  %1173 = getelementptr inbounds i16, i16* %63, i64 %1172
  %1174 = load i16, i16* %1173, align 2, !tbaa !393
  %1175 = insertelement <32 x i16> %1170, i16 %1174, i32 3
  %1176 = extractelement <32 x i32> %1155, i32 4
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i16, i16* %63, i64 %1177
  %1179 = load i16, i16* %1178, align 2, !tbaa !393
  %1180 = insertelement <32 x i16> %1175, i16 %1179, i32 4
  %1181 = extractelement <32 x i32> %1155, i32 5
  %1182 = sext i32 %1181 to i64
  %1183 = getelementptr inbounds i16, i16* %63, i64 %1182
  %1184 = load i16, i16* %1183, align 2, !tbaa !393
  %1185 = insertelement <32 x i16> %1180, i16 %1184, i32 5
  %1186 = extractelement <32 x i32> %1155, i32 6
  %1187 = sext i32 %1186 to i64
  %1188 = getelementptr inbounds i16, i16* %63, i64 %1187
  %1189 = load i16, i16* %1188, align 2, !tbaa !393
  %1190 = insertelement <32 x i16> %1185, i16 %1189, i32 6
  %1191 = extractelement <32 x i32> %1155, i32 7
  %1192 = sext i32 %1191 to i64
  %1193 = getelementptr inbounds i16, i16* %63, i64 %1192
  %1194 = load i16, i16* %1193, align 2, !tbaa !393
  %1195 = insertelement <32 x i16> %1190, i16 %1194, i32 7
  %1196 = extractelement <32 x i32> %1155, i32 8
  %1197 = sext i32 %1196 to i64
  %1198 = getelementptr inbounds i16, i16* %63, i64 %1197
  %1199 = load i16, i16* %1198, align 2, !tbaa !393
  %1200 = insertelement <32 x i16> %1195, i16 %1199, i32 8
  %1201 = extractelement <32 x i32> %1155, i32 9
  %1202 = sext i32 %1201 to i64
  %1203 = getelementptr inbounds i16, i16* %63, i64 %1202
  %1204 = load i16, i16* %1203, align 2, !tbaa !393
  %1205 = insertelement <32 x i16> %1200, i16 %1204, i32 9
  %1206 = extractelement <32 x i32> %1155, i32 10
  %1207 = sext i32 %1206 to i64
  %1208 = getelementptr inbounds i16, i16* %63, i64 %1207
  %1209 = load i16, i16* %1208, align 2, !tbaa !393
  %1210 = insertelement <32 x i16> %1205, i16 %1209, i32 10
  %1211 = extractelement <32 x i32> %1155, i32 11
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds i16, i16* %63, i64 %1212
  %1214 = load i16, i16* %1213, align 2, !tbaa !393
  %1215 = insertelement <32 x i16> %1210, i16 %1214, i32 11
  %1216 = extractelement <32 x i32> %1155, i32 12
  %1217 = sext i32 %1216 to i64
  %1218 = getelementptr inbounds i16, i16* %63, i64 %1217
  %1219 = load i16, i16* %1218, align 2, !tbaa !393
  %1220 = insertelement <32 x i16> %1215, i16 %1219, i32 12
  %1221 = extractelement <32 x i32> %1155, i32 13
  %1222 = sext i32 %1221 to i64
  %1223 = getelementptr inbounds i16, i16* %63, i64 %1222
  %1224 = load i16, i16* %1223, align 2, !tbaa !393
  %1225 = insertelement <32 x i16> %1220, i16 %1224, i32 13
  %1226 = extractelement <32 x i32> %1155, i32 14
  %1227 = sext i32 %1226 to i64
  %1228 = getelementptr inbounds i16, i16* %63, i64 %1227
  %1229 = load i16, i16* %1228, align 2, !tbaa !393
  %1230 = insertelement <32 x i16> %1225, i16 %1229, i32 14
  %1231 = extractelement <32 x i32> %1155, i32 15
  %1232 = sext i32 %1231 to i64
  %1233 = getelementptr inbounds i16, i16* %63, i64 %1232
  %1234 = load i16, i16* %1233, align 2, !tbaa !393
  %1235 = insertelement <32 x i16> %1230, i16 %1234, i32 15
  %1236 = extractelement <32 x i32> %1155, i32 16
  %1237 = sext i32 %1236 to i64
  %1238 = getelementptr inbounds i16, i16* %63, i64 %1237
  %1239 = load i16, i16* %1238, align 2, !tbaa !393
  %1240 = insertelement <32 x i16> %1235, i16 %1239, i32 16
  %1241 = extractelement <32 x i32> %1155, i32 17
  %1242 = sext i32 %1241 to i64
  %1243 = getelementptr inbounds i16, i16* %63, i64 %1242
  %1244 = load i16, i16* %1243, align 2, !tbaa !393
  %1245 = insertelement <32 x i16> %1240, i16 %1244, i32 17
  %1246 = extractelement <32 x i32> %1155, i32 18
  %1247 = sext i32 %1246 to i64
  %1248 = getelementptr inbounds i16, i16* %63, i64 %1247
  %1249 = load i16, i16* %1248, align 2, !tbaa !393
  %1250 = insertelement <32 x i16> %1245, i16 %1249, i32 18
  %1251 = extractelement <32 x i32> %1155, i32 19
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds i16, i16* %63, i64 %1252
  %1254 = load i16, i16* %1253, align 2, !tbaa !393
  %1255 = insertelement <32 x i16> %1250, i16 %1254, i32 19
  %1256 = extractelement <32 x i32> %1155, i32 20
  %1257 = sext i32 %1256 to i64
  %1258 = getelementptr inbounds i16, i16* %63, i64 %1257
  %1259 = load i16, i16* %1258, align 2, !tbaa !393
  %1260 = insertelement <32 x i16> %1255, i16 %1259, i32 20
  %1261 = extractelement <32 x i32> %1155, i32 21
  %1262 = sext i32 %1261 to i64
  %1263 = getelementptr inbounds i16, i16* %63, i64 %1262
  %1264 = load i16, i16* %1263, align 2, !tbaa !393
  %1265 = insertelement <32 x i16> %1260, i16 %1264, i32 21
  %1266 = extractelement <32 x i32> %1155, i32 22
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds i16, i16* %63, i64 %1267
  %1269 = load i16, i16* %1268, align 2, !tbaa !393
  %1270 = insertelement <32 x i16> %1265, i16 %1269, i32 22
  %1271 = extractelement <32 x i32> %1155, i32 23
  %1272 = sext i32 %1271 to i64
  %1273 = getelementptr inbounds i16, i16* %63, i64 %1272
  %1274 = load i16, i16* %1273, align 2, !tbaa !393
  %1275 = insertelement <32 x i16> %1270, i16 %1274, i32 23
  %1276 = extractelement <32 x i32> %1155, i32 24
  %1277 = sext i32 %1276 to i64
  %1278 = getelementptr inbounds i16, i16* %63, i64 %1277
  %1279 = load i16, i16* %1278, align 2, !tbaa !393
  %1280 = insertelement <32 x i16> %1275, i16 %1279, i32 24
  %1281 = extractelement <32 x i32> %1155, i32 25
  %1282 = sext i32 %1281 to i64
  %1283 = getelementptr inbounds i16, i16* %63, i64 %1282
  %1284 = load i16, i16* %1283, align 2, !tbaa !393
  %1285 = insertelement <32 x i16> %1280, i16 %1284, i32 25
  %1286 = extractelement <32 x i32> %1155, i32 26
  %1287 = sext i32 %1286 to i64
  %1288 = getelementptr inbounds i16, i16* %63, i64 %1287
  %1289 = load i16, i16* %1288, align 2, !tbaa !393
  %1290 = insertelement <32 x i16> %1285, i16 %1289, i32 26
  %1291 = extractelement <32 x i32> %1155, i32 27
  %1292 = sext i32 %1291 to i64
  %1293 = getelementptr inbounds i16, i16* %63, i64 %1292
  %1294 = load i16, i16* %1293, align 2, !tbaa !393
  %1295 = insertelement <32 x i16> %1290, i16 %1294, i32 27
  %1296 = extractelement <32 x i32> %1155, i32 28
  %1297 = sext i32 %1296 to i64
  %1298 = getelementptr inbounds i16, i16* %63, i64 %1297
  %1299 = load i16, i16* %1298, align 2, !tbaa !393
  %1300 = insertelement <32 x i16> %1295, i16 %1299, i32 28
  %1301 = extractelement <32 x i32> %1155, i32 29
  %1302 = sext i32 %1301 to i64
  %1303 = getelementptr inbounds i16, i16* %63, i64 %1302
  %1304 = load i16, i16* %1303, align 2, !tbaa !393
  %1305 = insertelement <32 x i16> %1300, i16 %1304, i32 29
  %1306 = extractelement <32 x i32> %1155, i32 30
  %1307 = sext i32 %1306 to i64
  %1308 = getelementptr inbounds i16, i16* %63, i64 %1307
  %1309 = load i16, i16* %1308, align 2, !tbaa !393
  %1310 = insertelement <32 x i16> %1305, i16 %1309, i32 30
  %1311 = extractelement <32 x i32> %1155, i32 31
  %1312 = sext i32 %1311 to i64
  %1313 = getelementptr inbounds i16, i16* %63, i64 %1312
  %1314 = load i16, i16* %1313, align 2, !tbaa !393
  %1315 = insertelement <32 x i16> %1310, i16 %1314, i32 31
  %1316 = shufflevector <32 x i16> %1315, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1317 = sext i32 %read_input.s0.x.v2.base.s19 to i64
  %1318 = add nsw i64 %1120, %1317
  %1319 = getelementptr inbounds i16, i16* %read_input, i64 %1318
  %1320 = getelementptr inbounds i16, i16* %1319, i64 -32
  %1321 = bitcast i16* %1320 to <16 x i16>*
  store <16 x i16> %1316, <16 x i16>* %1321, align 2, !tbaa !396
  %1322 = shufflevector <32 x i16> %1315, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1323 = getelementptr inbounds i16, i16* %1319, i64 -16
  %1324 = bitcast i16* %1323 to <16 x i16>*
  store <16 x i16> %1322, <16 x i16>* %1324, align 2, !tbaa !396
  %1325 = add nuw nsw i32 %read_input.s0.x.x18, 1
  %.not2589 = icmp eq i32 %1325, %20
  br i1 %.not2589, label %"end for read_input.s0.x.x17", label %"for read_input.s0.x.x16"

"end for read_input.s0.x.x17":                    ; preds = %"for read_input.s0.x.x16"
  %indvars.iv.next3026 = add nuw nsw i64 %indvars.iv3025, 1
  %.not2588 = icmp eq i64 %indvars.iv3025, %617
  br i1 %.not2588, label %"end for read_input.s0.y.rebased14", label %"for read_input.s0.y.rebased13"

then_bb21:                                        ; preds = %pseudostack_alloc.exit2661
  %1326 = alloca i8*, i64 %91, align 32
  %1327 = bitcast i8** %1326 to i16*
  store i8** %1326, i8*** %92, align 8
  br label %"consume read_input"

"consume read_input":                             ; preds = %pseudostack_alloc.exit2661, %then_bb21
  %blur_x = phi i16* [ %1327, %then_bb21 ], [ %1126, %pseudostack_alloc.exit2661 ]
  br i1 %34, label %"produce blur_x", label %"consume read_input.after_bb22_crit_edge"

"consume read_input.after_bb22_crit_edge":        ; preds = %"consume read_input"
  %.pre3246 = and i32 %a26, 3
  br label %after_bb22

after_bb22:                                       ; preds = %"consume read_input.after_bb22_crit_edge", %"produce blur_x"
  %.pre-phi = phi i32 [ %.pre3246, %"consume read_input.after_bb22_crit_edge" ], [ %1358, %"produce blur_x" ]
  %1328 = mul nsw i32 %.pre-phi, %a73
  %t1638 = sub nsw i32 %1328, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased.preheader", label %"end for blur_y.s0.x.x.rebased", !prof !386

"for blur_y.s0.x.x.rebased.preheader":            ; preds = %after_bb22
  %1329 = sext i32 %t1638 to i64
  br label %"for blur_y.s0.x.x.rebased"

"produce blur_x":                                 ; preds = %"consume read_input"
  %1330 = getelementptr inbounds i16, i16* %read_input, i64 %93
  %1331 = getelementptr inbounds i16, i16* %1330, i64 -31
  %1332 = bitcast i16* %1331 to <16 x i16>*
  %1333 = load <16 x i16>, <16 x i16>* %1332, align 2, !tbaa !396
  %1334 = getelementptr inbounds i16, i16* %1330, i64 -15
  %1335 = bitcast i16* %1334 to <16 x i16>*
  %1336 = load <16 x i16>, <16 x i16>* %1335, align 2, !tbaa !396
  %1337 = getelementptr inbounds i16, i16* %1330, i64 -30
  %1338 = bitcast i16* %1337 to <16 x i16>*
  %1339 = load <16 x i16>, <16 x i16>* %1338, align 2, !tbaa !396
  %1340 = getelementptr inbounds i16, i16* %1330, i64 -14
  %1341 = bitcast i16* %1340 to <16 x i16>*
  %1342 = load <16 x i16>, <16 x i16>* %1341, align 2, !tbaa !396
  %1343 = getelementptr inbounds i16, i16* %1330, i64 -32
  %1344 = bitcast i16* %1343 to <16 x i16>*
  %1345 = load <16 x i16>, <16 x i16>* %1344, align 2, !tbaa !396
  %1346 = getelementptr inbounds i16, i16* %1330, i64 -16
  %1347 = bitcast i16* %1346 to <16 x i16>*
  %1348 = load <16 x i16>, <16 x i16>* %1347, align 2, !tbaa !396
  %1349 = add <16 x i16> %1339, %1333
  %1350 = add <16 x i16> %1349, %1345
  %1351 = add <16 x i16> %1342, %1336
  %1352 = add <16 x i16> %1351, %1348
  %1353 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1350, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1354 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1352, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1355 = shufflevector <16 x i16> %1353, <16 x i16> %1354, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1356 = lshr <32 x i16> %1355, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1357 = shufflevector <32 x i16> %1356, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1358 = and i32 %a26, 3
  %1359 = zext i32 %1358 to i64
  %1360 = mul nsw i64 %96, %1359
  %1361 = add nsw i64 %98, %1360
  %1362 = getelementptr inbounds i16, i16* %blur_x, i64 %1361
  %1363 = getelementptr inbounds i16, i16* %1362, i64 -32
  %1364 = bitcast i16* %1363 to <16 x i16>*
  store <16 x i16> %1357, <16 x i16>* %1364, align 2, !tbaa !399
  %1365 = shufflevector <32 x i16> %1356, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1366 = getelementptr inbounds i16, i16* %1362, i64 -16
  %1367 = bitcast i16* %1366 to <16 x i16>*
  store <16 x i16> %1365, <16 x i16>* %1367, align 2, !tbaa !399
  br label %after_bb22

"for blur_y.s0.x.x.rebased":                      ; preds = %"for blur_y.s0.x.x.rebased.preheader", %after_bb24
  %indvars.iv3027 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased.preheader" ], [ %indvars.iv.next3028, %after_bb24 ]
  %1368 = add nsw i64 %indvars.iv3027, %100
  %1369 = icmp slt i64 %1368, 1
  %1370 = trunc i64 %1368 to i32
  %1371 = shl nsw i32 %1370, 5
  %1372 = icmp sgt i32 %4, %1371
  %1373 = or i1 %1369, %1372
  br i1 %1373, label %"produce blur_x27", label %after_bb24

"end for blur_y.s0.x.x.rebased":                  ; preds = %after_bb24, %after_bb22
  br i1 %101, label %"for blur_y.s0.x.x.rebased28.preheader", label %"end for blur_y.s0.x.x.rebased29", !prof !386

"for blur_y.s0.x.x.rebased28.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased"
  %1374 = sext i32 %t1638 to i64
  br label %"for blur_y.s0.x.x.rebased28"

after_bb24:                                       ; preds = %"for blur_y.s0.x.x.rebased", %"produce blur_x27"
  %indvars.iv.next3028 = add nuw nsw i64 %indvars.iv3027, 1
  %.not2586 = icmp eq i64 %indvars.iv.next3028, %180
  br i1 %.not2586, label %"end for blur_y.s0.x.x.rebased", label %"for blur_y.s0.x.x.rebased"

"produce blur_x27":                               ; preds = %"for blur_y.s0.x.x.rebased"
  %t656 = sub i32 %1371, %t1601
  %1375 = sext i32 %t656 to i64
  %1376 = getelementptr inbounds i16, i16* %read_input, i64 %1375
  %1377 = getelementptr inbounds i16, i16* %1376, i64 1
  %1378 = bitcast i16* %1377 to <16 x i16>*
  %1379 = load <16 x i16>, <16 x i16>* %1378, align 2, !tbaa !396
  %1380 = getelementptr inbounds i16, i16* %1376, i64 17
  %1381 = bitcast i16* %1380 to <16 x i16>*
  %1382 = load <16 x i16>, <16 x i16>* %1381, align 2, !tbaa !396
  %1383 = getelementptr inbounds i16, i16* %1376, i64 2
  %1384 = bitcast i16* %1383 to <16 x i16>*
  %1385 = load <16 x i16>, <16 x i16>* %1384, align 2, !tbaa !396
  %1386 = getelementptr inbounds i16, i16* %1376, i64 18
  %1387 = bitcast i16* %1386 to <16 x i16>*
  %1388 = load <16 x i16>, <16 x i16>* %1387, align 2, !tbaa !396
  %1389 = bitcast i16* %1376 to <16 x i16>*
  %1390 = load <16 x i16>, <16 x i16>* %1389, align 2, !tbaa !396
  %1391 = getelementptr inbounds i16, i16* %1376, i64 16
  %1392 = bitcast i16* %1391 to <16 x i16>*
  %1393 = load <16 x i16>, <16 x i16>* %1392, align 2, !tbaa !396
  %1394 = add <16 x i16> %1385, %1379
  %1395 = add <16 x i16> %1394, %1390
  %1396 = add <16 x i16> %1388, %1382
  %1397 = add <16 x i16> %1396, %1393
  %1398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1395, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1399 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1397, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1400 = shufflevector <16 x i16> %1398, <16 x i16> %1399, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1401 = lshr <32 x i16> %1400, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1402 = shufflevector <32 x i16> %1401, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1403 = shl nsw i64 %1368, 5
  %1404 = add nsw i64 %1403, %1329
  %1405 = getelementptr inbounds i16, i16* %blur_x, i64 %1404
  %1406 = bitcast i16* %1405 to <16 x i16>*
  store <16 x i16> %1402, <16 x i16>* %1406, align 2, !tbaa !399
  %1407 = shufflevector <32 x i16> %1401, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1408 = getelementptr inbounds i16, i16* %1405, i64 16
  %1409 = bitcast i16* %1408 to <16 x i16>*
  store <16 x i16> %1407, <16 x i16>* %1409, align 2, !tbaa !399
  br label %after_bb24

"for blur_y.s0.x.x.rebased28":                    ; preds = %"for blur_y.s0.x.x.rebased28.preheader", %after_bb31
  %blur_y.s0.x.x.rebased30 = phi i32 [ %1414, %after_bb31 ], [ 0, %"for blur_y.s0.x.x.rebased28.preheader" ]
  %t2163 = add nsw i32 %blur_y.s0.x.x.rebased30, %t1582
  %1410 = icmp slt i32 %t2163, 1
  %1411 = shl nsw i32 %t2163, 5
  %1412 = icmp sgt i32 %4, %1411
  %1413 = or i1 %1410, %1412
  br i1 %1413, label %then_bb32, label %after_bb31

"end for blur_y.s0.x.x.rebased29":                ; preds = %after_bb31, %"end for blur_y.s0.x.x.rebased"
  br i1 %34, label %"produce blur_x38", label %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge"

"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased29"
  %.pre3247 = add nsw i32 %a26, 1
  %.pre3249 = and i32 %.pre3247, 3
  br label %after_bb35

after_bb31:                                       ; preds = %"for blur_y.s0.x.x.rebased28", %then_bb32
  %1414 = add nuw nsw i32 %blur_y.s0.x.x.rebased30, 1
  %.not2585 = icmp eq i32 %1414, %t1639
  br i1 %.not2585, label %"end for blur_y.s0.x.x.rebased29", label %"for blur_y.s0.x.x.rebased28"

then_bb32:                                        ; preds = %"for blur_y.s0.x.x.rebased28"
  %1415 = icmp sgt i32 %a14, %1411
  %b83 = select i1 %1415, i32 %1411, i32 %a14
  %1416 = icmp slt i32 %b83, %4
  %blur_x.s0.x.v1.base.s = select i1 %1416, i32 %b83, i32 %4
  %t658 = sub i32 %blur_x.s0.x.v1.base.s, %t1601
  %1417 = sext i32 %t658 to i64
  %1418 = getelementptr inbounds i16, i16* %read_input, i64 %1417
  %1419 = getelementptr inbounds i16, i16* %1418, i64 1
  %1420 = bitcast i16* %1419 to <16 x i16>*
  %1421 = load <16 x i16>, <16 x i16>* %1420, align 2, !tbaa !396
  %1422 = getelementptr inbounds i16, i16* %1418, i64 17
  %1423 = bitcast i16* %1422 to <16 x i16>*
  %1424 = load <16 x i16>, <16 x i16>* %1423, align 2, !tbaa !396
  %1425 = getelementptr inbounds i16, i16* %1418, i64 2
  %1426 = bitcast i16* %1425 to <16 x i16>*
  %1427 = load <16 x i16>, <16 x i16>* %1426, align 2, !tbaa !396
  %1428 = getelementptr inbounds i16, i16* %1418, i64 18
  %1429 = bitcast i16* %1428 to <16 x i16>*
  %1430 = load <16 x i16>, <16 x i16>* %1429, align 2, !tbaa !396
  %1431 = bitcast i16* %1418 to <16 x i16>*
  %1432 = load <16 x i16>, <16 x i16>* %1431, align 2, !tbaa !396
  %1433 = getelementptr inbounds i16, i16* %1418, i64 16
  %1434 = bitcast i16* %1433 to <16 x i16>*
  %1435 = load <16 x i16>, <16 x i16>* %1434, align 2, !tbaa !396
  %1436 = add <16 x i16> %1427, %1421
  %1437 = add <16 x i16> %1436, %1432
  %1438 = add <16 x i16> %1430, %1424
  %1439 = add <16 x i16> %1438, %1435
  %1440 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1437, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1441 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1439, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1442 = shufflevector <16 x i16> %1440, <16 x i16> %1441, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1443 = lshr <32 x i16> %1442, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1444 = shufflevector <32 x i16> %1443, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1445 = sext i32 %blur_x.s0.x.v1.base.s to i64
  %1446 = add nsw i64 %1445, %1374
  %1447 = getelementptr inbounds i16, i16* %blur_x, i64 %1446
  %1448 = bitcast i16* %1447 to <16 x i16>*
  store <16 x i16> %1444, <16 x i16>* %1448, align 2, !tbaa !399
  %1449 = shufflevector <32 x i16> %1443, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1450 = getelementptr inbounds i16, i16* %1447, i64 16
  %1451 = bitcast i16* %1450 to <16 x i16>*
  store <16 x i16> %1449, <16 x i16>* %1451, align 2, !tbaa !399
  br label %after_bb31

after_bb35:                                       ; preds = %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge", %"produce blur_x38"
  %.pre-phi3250 = phi i32 [ %.pre3249, %"end for blur_y.s0.x.x.rebased29.after_bb35_crit_edge" ], [ %1483, %"produce blur_x38" ]
  %1452 = mul nsw i32 %.pre-phi3250, %a73
  %t1644 = sub nsw i32 %1452, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased39.preheader", label %"end for blur_y.s0.x.x.rebased40", !prof !386

"for blur_y.s0.x.x.rebased39.preheader":          ; preds = %after_bb35
  %1453 = sext i32 %t1644 to i64
  br label %"for blur_y.s0.x.x.rebased39"

"produce blur_x38":                               ; preds = %"end for blur_y.s0.x.x.rebased29"
  %1454 = getelementptr inbounds i16, i16* %read_input, i64 %104
  %1455 = getelementptr inbounds i16, i16* %1454, i64 -31
  %1456 = bitcast i16* %1455 to <16 x i16>*
  %1457 = load <16 x i16>, <16 x i16>* %1456, align 2, !tbaa !396
  %1458 = getelementptr inbounds i16, i16* %1454, i64 -15
  %1459 = bitcast i16* %1458 to <16 x i16>*
  %1460 = load <16 x i16>, <16 x i16>* %1459, align 2, !tbaa !396
  %1461 = getelementptr inbounds i16, i16* %1454, i64 -30
  %1462 = bitcast i16* %1461 to <16 x i16>*
  %1463 = load <16 x i16>, <16 x i16>* %1462, align 2, !tbaa !396
  %1464 = getelementptr inbounds i16, i16* %1454, i64 -14
  %1465 = bitcast i16* %1464 to <16 x i16>*
  %1466 = load <16 x i16>, <16 x i16>* %1465, align 2, !tbaa !396
  %1467 = getelementptr inbounds i16, i16* %1454, i64 -32
  %1468 = bitcast i16* %1467 to <16 x i16>*
  %1469 = load <16 x i16>, <16 x i16>* %1468, align 2, !tbaa !396
  %1470 = getelementptr inbounds i16, i16* %1454, i64 -16
  %1471 = bitcast i16* %1470 to <16 x i16>*
  %1472 = load <16 x i16>, <16 x i16>* %1471, align 2, !tbaa !396
  %1473 = add <16 x i16> %1463, %1457
  %1474 = add <16 x i16> %1473, %1469
  %1475 = add <16 x i16> %1466, %1460
  %1476 = add <16 x i16> %1475, %1472
  %1477 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1474, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1478 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1476, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1479 = shufflevector <16 x i16> %1477, <16 x i16> %1478, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1480 = lshr <32 x i16> %1479, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1481 = shufflevector <32 x i16> %1480, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1482 = add nsw i32 %a26, 1
  %1483 = and i32 %1482, 3
  %1484 = zext i32 %1483 to i64
  %1485 = mul nsw i64 %96, %1484
  %1486 = add nsw i64 %98, %1485
  %1487 = getelementptr inbounds i16, i16* %blur_x, i64 %1486
  %1488 = getelementptr inbounds i16, i16* %1487, i64 -32
  %1489 = bitcast i16* %1488 to <16 x i16>*
  store <16 x i16> %1481, <16 x i16>* %1489, align 2, !tbaa !399
  %1490 = shufflevector <32 x i16> %1480, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1491 = getelementptr inbounds i16, i16* %1487, i64 -16
  %1492 = bitcast i16* %1491 to <16 x i16>*
  store <16 x i16> %1490, <16 x i16>* %1492, align 2, !tbaa !399
  br label %after_bb35

"for blur_y.s0.x.x.rebased39":                    ; preds = %"for blur_y.s0.x.x.rebased39.preheader", %after_bb42
  %indvars.iv3030 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased39.preheader" ], [ %indvars.iv.next3031, %after_bb42 ]
  %1493 = add nsw i64 %indvars.iv3030, %100
  %1494 = icmp slt i64 %1493, 1
  %1495 = trunc i64 %1493 to i32
  %1496 = shl nsw i32 %1495, 5
  %1497 = icmp sgt i32 %4, %1496
  %1498 = or i1 %1494, %1497
  br i1 %1498, label %"produce blur_x45", label %after_bb42

"end for blur_y.s0.x.x.rebased40":                ; preds = %after_bb42, %after_bb35
  br i1 %101, label %"for blur_y.s0.x.x.rebased46.preheader", label %"end for blur_y.s0.x.x.rebased47", !prof !386

"for blur_y.s0.x.x.rebased46.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased40"
  %1499 = sext i32 %t1644 to i64
  br label %"for blur_y.s0.x.x.rebased46"

after_bb42:                                       ; preds = %"for blur_y.s0.x.x.rebased39", %"produce blur_x45"
  %indvars.iv.next3031 = add nuw nsw i64 %indvars.iv3030, 1
  %.not2584 = icmp eq i64 %indvars.iv.next3031, %180
  br i1 %.not2584, label %"end for blur_y.s0.x.x.rebased40", label %"for blur_y.s0.x.x.rebased39"

"produce blur_x45":                               ; preds = %"for blur_y.s0.x.x.rebased39"
  %t662 = add nsw i32 %1496, %t1643
  %1500 = sext i32 %t662 to i64
  %1501 = getelementptr inbounds i16, i16* %read_input, i64 %1500
  %1502 = getelementptr inbounds i16, i16* %1501, i64 1
  %1503 = bitcast i16* %1502 to <16 x i16>*
  %1504 = load <16 x i16>, <16 x i16>* %1503, align 2, !tbaa !396
  %1505 = getelementptr inbounds i16, i16* %1501, i64 17
  %1506 = bitcast i16* %1505 to <16 x i16>*
  %1507 = load <16 x i16>, <16 x i16>* %1506, align 2, !tbaa !396
  %1508 = getelementptr inbounds i16, i16* %1501, i64 2
  %1509 = bitcast i16* %1508 to <16 x i16>*
  %1510 = load <16 x i16>, <16 x i16>* %1509, align 2, !tbaa !396
  %1511 = getelementptr inbounds i16, i16* %1501, i64 18
  %1512 = bitcast i16* %1511 to <16 x i16>*
  %1513 = load <16 x i16>, <16 x i16>* %1512, align 2, !tbaa !396
  %1514 = bitcast i16* %1501 to <16 x i16>*
  %1515 = load <16 x i16>, <16 x i16>* %1514, align 2, !tbaa !396
  %1516 = getelementptr inbounds i16, i16* %1501, i64 16
  %1517 = bitcast i16* %1516 to <16 x i16>*
  %1518 = load <16 x i16>, <16 x i16>* %1517, align 2, !tbaa !396
  %1519 = add <16 x i16> %1510, %1504
  %1520 = add <16 x i16> %1519, %1515
  %1521 = add <16 x i16> %1513, %1507
  %1522 = add <16 x i16> %1521, %1518
  %1523 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1520, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1522, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1525 = shufflevector <16 x i16> %1523, <16 x i16> %1524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1526 = lshr <32 x i16> %1525, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1527 = shufflevector <32 x i16> %1526, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1528 = shl nsw i64 %1493, 5
  %1529 = add nsw i64 %1528, %1453
  %1530 = getelementptr inbounds i16, i16* %blur_x, i64 %1529
  %1531 = bitcast i16* %1530 to <16 x i16>*
  store <16 x i16> %1527, <16 x i16>* %1531, align 2, !tbaa !399
  %1532 = shufflevector <32 x i16> %1526, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1533 = getelementptr inbounds i16, i16* %1530, i64 16
  %1534 = bitcast i16* %1533 to <16 x i16>*
  store <16 x i16> %1532, <16 x i16>* %1534, align 2, !tbaa !399
  br label %after_bb42

"for blur_y.s0.x.x.rebased46":                    ; preds = %"for blur_y.s0.x.x.rebased46.preheader", %after_bb49
  %blur_y.s0.x.x.rebased48 = phi i32 [ %1539, %after_bb49 ], [ 0, %"for blur_y.s0.x.x.rebased46.preheader" ]
  %t2165 = add nsw i32 %blur_y.s0.x.x.rebased48, %t1582
  %1535 = icmp slt i32 %t2165, 1
  %1536 = shl nsw i32 %t2165, 5
  %1537 = icmp sgt i32 %4, %1536
  %1538 = or i1 %1535, %1537
  br i1 %1538, label %then_bb50, label %after_bb49

"end for blur_y.s0.x.x.rebased47":                ; preds = %after_bb49, %"end for blur_y.s0.x.x.rebased40"
  br i1 %34, label %"produce blur_x57", label %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge"

"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased47"
  %.pre3251 = add nsw i32 %a26, 2
  %.pre3253 = and i32 %.pre3251, 3
  br label %after_bb54

after_bb49:                                       ; preds = %"for blur_y.s0.x.x.rebased46", %then_bb50
  %1539 = add nuw nsw i32 %blur_y.s0.x.x.rebased48, 1
  %.not2583 = icmp eq i32 %1539, %t1639
  br i1 %.not2583, label %"end for blur_y.s0.x.x.rebased47", label %"for blur_y.s0.x.x.rebased46"

then_bb50:                                        ; preds = %"for blur_y.s0.x.x.rebased46"
  %1540 = icmp sgt i32 %a14, %1536
  %b90 = select i1 %1540, i32 %1536, i32 %a14
  %1541 = icmp slt i32 %b90, %4
  %blur_x.s0.x.v1.base.s53 = select i1 %1541, i32 %b90, i32 %4
  %t664 = add nsw i32 %blur_x.s0.x.v1.base.s53, %t1643
  %1542 = sext i32 %t664 to i64
  %1543 = getelementptr inbounds i16, i16* %read_input, i64 %1542
  %1544 = getelementptr inbounds i16, i16* %1543, i64 1
  %1545 = bitcast i16* %1544 to <16 x i16>*
  %1546 = load <16 x i16>, <16 x i16>* %1545, align 2, !tbaa !396
  %1547 = getelementptr inbounds i16, i16* %1543, i64 17
  %1548 = bitcast i16* %1547 to <16 x i16>*
  %1549 = load <16 x i16>, <16 x i16>* %1548, align 2, !tbaa !396
  %1550 = getelementptr inbounds i16, i16* %1543, i64 2
  %1551 = bitcast i16* %1550 to <16 x i16>*
  %1552 = load <16 x i16>, <16 x i16>* %1551, align 2, !tbaa !396
  %1553 = getelementptr inbounds i16, i16* %1543, i64 18
  %1554 = bitcast i16* %1553 to <16 x i16>*
  %1555 = load <16 x i16>, <16 x i16>* %1554, align 2, !tbaa !396
  %1556 = bitcast i16* %1543 to <16 x i16>*
  %1557 = load <16 x i16>, <16 x i16>* %1556, align 2, !tbaa !396
  %1558 = getelementptr inbounds i16, i16* %1543, i64 16
  %1559 = bitcast i16* %1558 to <16 x i16>*
  %1560 = load <16 x i16>, <16 x i16>* %1559, align 2, !tbaa !396
  %1561 = add <16 x i16> %1552, %1546
  %1562 = add <16 x i16> %1561, %1557
  %1563 = add <16 x i16> %1555, %1549
  %1564 = add <16 x i16> %1563, %1560
  %1565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1562, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1564, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1567 = shufflevector <16 x i16> %1565, <16 x i16> %1566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1568 = lshr <32 x i16> %1567, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1569 = shufflevector <32 x i16> %1568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1570 = sext i32 %blur_x.s0.x.v1.base.s53 to i64
  %1571 = add nsw i64 %1570, %1499
  %1572 = getelementptr inbounds i16, i16* %blur_x, i64 %1571
  %1573 = bitcast i16* %1572 to <16 x i16>*
  store <16 x i16> %1569, <16 x i16>* %1573, align 2, !tbaa !399
  %1574 = shufflevector <32 x i16> %1568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1575 = getelementptr inbounds i16, i16* %1572, i64 16
  %1576 = bitcast i16* %1575 to <16 x i16>*
  store <16 x i16> %1574, <16 x i16>* %1576, align 2, !tbaa !399
  br label %after_bb49

after_bb54:                                       ; preds = %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge", %"produce blur_x57"
  %.pre-phi3254 = phi i32 [ %.pre3253, %"end for blur_y.s0.x.x.rebased47.after_bb54_crit_edge" ], [ %1620, %"produce blur_x57" ]
  %1577 = mul nsw i32 %.pre-phi3254, %a73
  %t1650 = sub nsw i32 %1577, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased58.preheader", label %"end for blur_y.s0.x.x.rebased59", !prof !386

"for blur_y.s0.x.x.rebased58.preheader":          ; preds = %after_bb54
  %1578 = sext i32 %t1650 to i64
  %1579 = zext i32 %.pre-phi3250 to i64
  %1580 = mul nsw i64 %1579, %108
  %1581 = sub nsw i64 %1580, %95
  %1582 = zext i32 %.pre-phi3254 to i64
  %1583 = mul nsw i64 %1582, %108
  %1584 = sub nsw i64 %1583, %95
  %1585 = zext i32 %.pre-phi to i64
  %1586 = mul nsw i64 %1585, %108
  %1587 = sub nsw i64 %1586, %95
  %1588 = sext i32 %a26 to i64
  %1589 = mul nsw i64 %1588, %109
  %1590 = add nsw i64 %1589, %112
  br label %"for blur_y.s0.x.x.rebased58"

"produce blur_x57":                               ; preds = %"end for blur_y.s0.x.x.rebased47"
  %1591 = getelementptr inbounds i16, i16* %read_input, i64 %107
  %1592 = getelementptr inbounds i16, i16* %1591, i64 -31
  %1593 = bitcast i16* %1592 to <16 x i16>*
  %1594 = load <16 x i16>, <16 x i16>* %1593, align 2, !tbaa !396
  %1595 = getelementptr inbounds i16, i16* %1591, i64 -15
  %1596 = bitcast i16* %1595 to <16 x i16>*
  %1597 = load <16 x i16>, <16 x i16>* %1596, align 2, !tbaa !396
  %1598 = getelementptr inbounds i16, i16* %1591, i64 -30
  %1599 = bitcast i16* %1598 to <16 x i16>*
  %1600 = load <16 x i16>, <16 x i16>* %1599, align 2, !tbaa !396
  %1601 = getelementptr inbounds i16, i16* %1591, i64 -14
  %1602 = bitcast i16* %1601 to <16 x i16>*
  %1603 = load <16 x i16>, <16 x i16>* %1602, align 2, !tbaa !396
  %1604 = getelementptr inbounds i16, i16* %1591, i64 -32
  %1605 = bitcast i16* %1604 to <16 x i16>*
  %1606 = load <16 x i16>, <16 x i16>* %1605, align 2, !tbaa !396
  %1607 = getelementptr inbounds i16, i16* %1591, i64 -16
  %1608 = bitcast i16* %1607 to <16 x i16>*
  %1609 = load <16 x i16>, <16 x i16>* %1608, align 2, !tbaa !396
  %1610 = add <16 x i16> %1600, %1594
  %1611 = add <16 x i16> %1610, %1606
  %1612 = add <16 x i16> %1603, %1597
  %1613 = add <16 x i16> %1612, %1609
  %1614 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1611, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1615 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1613, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1616 = shufflevector <16 x i16> %1614, <16 x i16> %1615, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1617 = lshr <32 x i16> %1616, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1618 = shufflevector <32 x i16> %1617, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1619 = add nsw i32 %a26, 2
  %1620 = and i32 %1619, 3
  %1621 = zext i32 %1620 to i64
  %1622 = mul nsw i64 %96, %1621
  %1623 = add nsw i64 %98, %1622
  %1624 = getelementptr inbounds i16, i16* %blur_x, i64 %1623
  %1625 = getelementptr inbounds i16, i16* %1624, i64 -32
  %1626 = bitcast i16* %1625 to <16 x i16>*
  store <16 x i16> %1618, <16 x i16>* %1626, align 2, !tbaa !399
  %1627 = shufflevector <32 x i16> %1617, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1628 = getelementptr inbounds i16, i16* %1624, i64 -16
  %1629 = bitcast i16* %1628 to <16 x i16>*
  store <16 x i16> %1627, <16 x i16>* %1629, align 2, !tbaa !399
  %1630 = zext i32 %.pre-phi3250 to i64
  %1631 = mul nsw i64 %1630, %108
  %1632 = add nsw i64 %1631, %93
  %1633 = getelementptr inbounds i16, i16* %blur_x, i64 %1632
  %1634 = getelementptr inbounds i16, i16* %1633, i64 -32
  %1635 = bitcast i16* %1634 to <16 x i16>*
  %1636 = load <16 x i16>, <16 x i16>* %1635, align 2, !tbaa !399
  %1637 = getelementptr inbounds i16, i16* %1633, i64 -16
  %1638 = bitcast i16* %1637 to <16 x i16>*
  %1639 = load <16 x i16>, <16 x i16>* %1638, align 2, !tbaa !399
  %1640 = mul nsw i64 %1621, %108
  %1641 = add nsw i64 %1640, %93
  %1642 = getelementptr inbounds i16, i16* %blur_x, i64 %1641
  %1643 = getelementptr inbounds i16, i16* %1642, i64 -32
  %1644 = bitcast i16* %1643 to <16 x i16>*
  %1645 = load <16 x i16>, <16 x i16>* %1644, align 2, !tbaa !399
  %1646 = getelementptr inbounds i16, i16* %1642, i64 -16
  %1647 = bitcast i16* %1646 to <16 x i16>*
  %1648 = load <16 x i16>, <16 x i16>* %1647, align 2, !tbaa !399
  %1649 = zext i32 %.pre-phi to i64
  %1650 = mul nsw i64 %1649, %108
  %1651 = add nsw i64 %1650, %93
  %1652 = getelementptr inbounds i16, i16* %blur_x, i64 %1651
  %1653 = getelementptr inbounds i16, i16* %1652, i64 -32
  %1654 = bitcast i16* %1653 to <16 x i16>*
  %1655 = load <16 x i16>, <16 x i16>* %1654, align 2, !tbaa !399
  %1656 = getelementptr inbounds i16, i16* %1652, i64 -16
  %1657 = bitcast i16* %1656 to <16 x i16>*
  %1658 = load <16 x i16>, <16 x i16>* %1657, align 2, !tbaa !399
  %1659 = add <16 x i16> %1645, %1636
  %1660 = add <16 x i16> %1659, %1655
  %1661 = add <16 x i16> %1648, %1639
  %1662 = add <16 x i16> %1661, %1658
  %1663 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1660, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1664 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1662, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1665 = shufflevector <16 x i16> %1663, <16 x i16> %1664, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1666 = lshr <32 x i16> %1665, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1667 = shufflevector <32 x i16> %1666, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1668 = sext i32 %a26 to i64
  %1669 = mul nsw i64 %1668, %109
  %1670 = add nsw i64 %111, %1669
  %1671 = getelementptr inbounds i16, i16* %65, i64 %1670
  %1672 = getelementptr inbounds i16, i16* %1671, i64 -32
  %1673 = bitcast i16* %1672 to <16 x i16>*
  store <16 x i16> %1667, <16 x i16>* %1673, align 2, !tbaa !401
  %1674 = shufflevector <32 x i16> %1666, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1675 = getelementptr inbounds i16, i16* %1671, i64 -16
  %1676 = bitcast i16* %1675 to <16 x i16>*
  store <16 x i16> %1674, <16 x i16>* %1676, align 2, !tbaa !401
  br label %after_bb54

"for blur_y.s0.x.x.rebased58":                    ; preds = %"for blur_y.s0.x.x.rebased58.preheader", %"consume blur_x65"
  %indvars.iv3033 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased58.preheader" ], [ %indvars.iv.next3034, %"consume blur_x65" ]
  %1677 = add nsw i64 %indvars.iv3033, %100
  %1678 = icmp slt i64 %1677, 1
  %1679 = trunc i64 %1677 to i32
  %1680 = shl nsw i32 %1679, 5
  %1681 = icmp sgt i32 %4, %1680
  %1682 = or i1 %1678, %1681
  br i1 %1682, label %"produce blur_x64", label %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge"

"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased58"
  %.pre3255 = shl nsw i64 %1677, 5
  br label %"consume blur_x65"

"end for blur_y.s0.x.x.rebased59":                ; preds = %"consume blur_x65", %after_bb54
  br i1 %101, label %"for blur_y.s0.x.x.rebased66.preheader", label %"end for blur_y.s0.x.x.rebased67", !prof !386

"for blur_y.s0.x.x.rebased66.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased59"
  %1683 = sext i32 %t1650 to i64
  %1684 = zext i32 %.pre-phi3250 to i64
  %1685 = mul nsw i64 %1684, %108
  %1686 = sub nsw i64 %1685, %95
  %1687 = zext i32 %.pre-phi3254 to i64
  %1688 = mul nsw i64 %1687, %108
  %1689 = sub nsw i64 %1688, %95
  %1690 = zext i32 %.pre-phi to i64
  %1691 = mul nsw i64 %1690, %108
  %1692 = sub nsw i64 %1691, %95
  %1693 = sext i32 %a26 to i64
  %1694 = mul nsw i64 %1693, %109
  %1695 = add nsw i64 %1694, %112
  br label %"for blur_y.s0.x.x.rebased66"

"produce blur_x64":                               ; preds = %"for blur_y.s0.x.x.rebased58"
  %t672 = add nsw i32 %1680, %105
  %1696 = sext i32 %t672 to i64
  %1697 = getelementptr inbounds i16, i16* %read_input, i64 %1696
  %1698 = getelementptr inbounds i16, i16* %1697, i64 1
  %1699 = bitcast i16* %1698 to <16 x i16>*
  %1700 = load <16 x i16>, <16 x i16>* %1699, align 2, !tbaa !396
  %1701 = getelementptr inbounds i16, i16* %1697, i64 17
  %1702 = bitcast i16* %1701 to <16 x i16>*
  %1703 = load <16 x i16>, <16 x i16>* %1702, align 2, !tbaa !396
  %1704 = getelementptr inbounds i16, i16* %1697, i64 2
  %1705 = bitcast i16* %1704 to <16 x i16>*
  %1706 = load <16 x i16>, <16 x i16>* %1705, align 2, !tbaa !396
  %1707 = getelementptr inbounds i16, i16* %1697, i64 18
  %1708 = bitcast i16* %1707 to <16 x i16>*
  %1709 = load <16 x i16>, <16 x i16>* %1708, align 2, !tbaa !396
  %1710 = bitcast i16* %1697 to <16 x i16>*
  %1711 = load <16 x i16>, <16 x i16>* %1710, align 2, !tbaa !396
  %1712 = getelementptr inbounds i16, i16* %1697, i64 16
  %1713 = bitcast i16* %1712 to <16 x i16>*
  %1714 = load <16 x i16>, <16 x i16>* %1713, align 2, !tbaa !396
  %1715 = add <16 x i16> %1706, %1700
  %1716 = add <16 x i16> %1715, %1711
  %1717 = add <16 x i16> %1709, %1703
  %1718 = add <16 x i16> %1717, %1714
  %1719 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1716, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1720 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1718, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1721 = shufflevector <16 x i16> %1719, <16 x i16> %1720, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1722 = lshr <32 x i16> %1721, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1723 = shufflevector <32 x i16> %1722, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1724 = shl nsw i64 %1677, 5
  %1725 = add nsw i64 %1724, %1578
  %1726 = getelementptr inbounds i16, i16* %blur_x, i64 %1725
  %1727 = bitcast i16* %1726 to <16 x i16>*
  store <16 x i16> %1723, <16 x i16>* %1727, align 2, !tbaa !399
  %1728 = shufflevector <32 x i16> %1722, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1729 = getelementptr inbounds i16, i16* %1726, i64 16
  %1730 = bitcast i16* %1729 to <16 x i16>*
  store <16 x i16> %1728, <16 x i16>* %1730, align 2, !tbaa !399
  br label %"consume blur_x65"

"consume blur_x65":                               ; preds = %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge", %"produce blur_x64"
  %.pre-phi3256 = phi i64 [ %.pre3255, %"for blur_y.s0.x.x.rebased58.consume blur_x65_crit_edge" ], [ %1724, %"produce blur_x64" ]
  %1731 = add nsw i64 %1581, %.pre-phi3256
  %1732 = getelementptr inbounds i16, i16* %blur_x, i64 %1731
  %1733 = bitcast i16* %1732 to <16 x i16>*
  %1734 = load <16 x i16>, <16 x i16>* %1733, align 2, !tbaa !399
  %1735 = getelementptr inbounds i16, i16* %1732, i64 16
  %1736 = bitcast i16* %1735 to <16 x i16>*
  %1737 = load <16 x i16>, <16 x i16>* %1736, align 2, !tbaa !399
  %1738 = add nsw i64 %1584, %.pre-phi3256
  %1739 = getelementptr inbounds i16, i16* %blur_x, i64 %1738
  %1740 = bitcast i16* %1739 to <16 x i16>*
  %1741 = load <16 x i16>, <16 x i16>* %1740, align 2, !tbaa !399
  %1742 = getelementptr inbounds i16, i16* %1739, i64 16
  %1743 = bitcast i16* %1742 to <16 x i16>*
  %1744 = load <16 x i16>, <16 x i16>* %1743, align 2, !tbaa !399
  %1745 = add nsw i64 %1587, %.pre-phi3256
  %1746 = getelementptr inbounds i16, i16* %blur_x, i64 %1745
  %1747 = bitcast i16* %1746 to <16 x i16>*
  %1748 = load <16 x i16>, <16 x i16>* %1747, align 2, !tbaa !399
  %1749 = getelementptr inbounds i16, i16* %1746, i64 16
  %1750 = bitcast i16* %1749 to <16 x i16>*
  %1751 = load <16 x i16>, <16 x i16>* %1750, align 2, !tbaa !399
  %1752 = add <16 x i16> %1741, %1734
  %1753 = add <16 x i16> %1752, %1748
  %1754 = add <16 x i16> %1744, %1737
  %1755 = add <16 x i16> %1754, %1751
  %1756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1753, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1755, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1758 = shufflevector <16 x i16> %1756, <16 x i16> %1757, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1759 = lshr <32 x i16> %1758, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1760 = shufflevector <32 x i16> %1759, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1761 = add nsw i64 %1590, %.pre-phi3256
  %1762 = getelementptr inbounds i16, i16* %65, i64 %1761
  %1763 = bitcast i16* %1762 to <16 x i16>*
  store <16 x i16> %1760, <16 x i16>* %1763, align 2, !tbaa !401
  %1764 = shufflevector <32 x i16> %1759, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1765 = getelementptr inbounds i16, i16* %1762, i64 16
  %1766 = bitcast i16* %1765 to <16 x i16>*
  store <16 x i16> %1764, <16 x i16>* %1766, align 2, !tbaa !401
  %indvars.iv.next3034 = add nuw nsw i64 %indvars.iv3033, 1
  %.not2582 = icmp eq i64 %indvars.iv.next3034, %180
  br i1 %.not2582, label %"end for blur_y.s0.x.x.rebased59", label %"for blur_y.s0.x.x.rebased58"

"for blur_y.s0.x.x.rebased66":                    ; preds = %"for blur_y.s0.x.x.rebased66.preheader", %"consume blur_x74"
  %blur_y.s0.x.x.rebased68 = phi i32 [ %1845, %"consume blur_x74" ], [ 0, %"for blur_y.s0.x.x.rebased66.preheader" ]
  %1767 = add nsw i32 %blur_y.s0.x.x.rebased68, %t1582
  %a91 = shl nsw i32 %1767, 5
  %1768 = icmp sgt i32 %a14, %a91
  %b97 = select i1 %1768, i32 %a91, i32 %a14
  %1769 = icmp slt i32 %1767, 1
  %1770 = icmp sgt i32 %4, %a91
  %1771 = or i1 %1769, %1770
  br i1 %1771, label %"produce blur_x72", label %"consume blur_x74"

"end for blur_y.s0.x.x.rebased67":                ; preds = %"consume blur_x74", %"end for blur_y.s0.x.x.rebased59"
  br i1 %34, label %"produce blur_x78", label %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge"

"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased67"
  %.pre3257 = add nsw i32 %a26, 3
  %.pre3259 = and i32 %.pre3257, 3
  br label %after_bb75

"produce blur_x72":                               ; preds = %"for blur_y.s0.x.x.rebased66"
  %1772 = icmp slt i32 %b97, %4
  %blur_x.s0.x.v1.base.s73 = select i1 %1772, i32 %b97, i32 %4
  %t677 = add nsw i32 %blur_x.s0.x.v1.base.s73, %105
  %1773 = sext i32 %t677 to i64
  %1774 = getelementptr inbounds i16, i16* %read_input, i64 %1773
  %1775 = getelementptr inbounds i16, i16* %1774, i64 1
  %1776 = bitcast i16* %1775 to <16 x i16>*
  %1777 = load <16 x i16>, <16 x i16>* %1776, align 2, !tbaa !396
  %1778 = getelementptr inbounds i16, i16* %1774, i64 17
  %1779 = bitcast i16* %1778 to <16 x i16>*
  %1780 = load <16 x i16>, <16 x i16>* %1779, align 2, !tbaa !396
  %1781 = getelementptr inbounds i16, i16* %1774, i64 2
  %1782 = bitcast i16* %1781 to <16 x i16>*
  %1783 = load <16 x i16>, <16 x i16>* %1782, align 2, !tbaa !396
  %1784 = getelementptr inbounds i16, i16* %1774, i64 18
  %1785 = bitcast i16* %1784 to <16 x i16>*
  %1786 = load <16 x i16>, <16 x i16>* %1785, align 2, !tbaa !396
  %1787 = bitcast i16* %1774 to <16 x i16>*
  %1788 = load <16 x i16>, <16 x i16>* %1787, align 2, !tbaa !396
  %1789 = getelementptr inbounds i16, i16* %1774, i64 16
  %1790 = bitcast i16* %1789 to <16 x i16>*
  %1791 = load <16 x i16>, <16 x i16>* %1790, align 2, !tbaa !396
  %1792 = add <16 x i16> %1783, %1777
  %1793 = add <16 x i16> %1792, %1788
  %1794 = add <16 x i16> %1786, %1780
  %1795 = add <16 x i16> %1794, %1791
  %1796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1793, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1795, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1798 = shufflevector <16 x i16> %1796, <16 x i16> %1797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1799 = lshr <32 x i16> %1798, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1800 = shufflevector <32 x i16> %1799, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1801 = sext i32 %blur_x.s0.x.v1.base.s73 to i64
  %1802 = add nsw i64 %1801, %1683
  %1803 = getelementptr inbounds i16, i16* %blur_x, i64 %1802
  %1804 = bitcast i16* %1803 to <16 x i16>*
  store <16 x i16> %1800, <16 x i16>* %1804, align 2, !tbaa !399
  %1805 = shufflevector <32 x i16> %1799, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1806 = getelementptr inbounds i16, i16* %1803, i64 16
  %1807 = bitcast i16* %1806 to <16 x i16>*
  store <16 x i16> %1805, <16 x i16>* %1807, align 2, !tbaa !399
  br label %"consume blur_x74"

"consume blur_x74":                               ; preds = %"for blur_y.s0.x.x.rebased66", %"produce blur_x72"
  %1808 = sext i32 %b97 to i64
  %1809 = add nsw i64 %1686, %1808
  %1810 = getelementptr inbounds i16, i16* %blur_x, i64 %1809
  %1811 = bitcast i16* %1810 to <16 x i16>*
  %1812 = load <16 x i16>, <16 x i16>* %1811, align 2, !tbaa !399
  %1813 = getelementptr inbounds i16, i16* %1810, i64 16
  %1814 = bitcast i16* %1813 to <16 x i16>*
  %1815 = load <16 x i16>, <16 x i16>* %1814, align 2, !tbaa !399
  %1816 = add nsw i64 %1689, %1808
  %1817 = getelementptr inbounds i16, i16* %blur_x, i64 %1816
  %1818 = bitcast i16* %1817 to <16 x i16>*
  %1819 = load <16 x i16>, <16 x i16>* %1818, align 2, !tbaa !399
  %1820 = getelementptr inbounds i16, i16* %1817, i64 16
  %1821 = bitcast i16* %1820 to <16 x i16>*
  %1822 = load <16 x i16>, <16 x i16>* %1821, align 2, !tbaa !399
  %1823 = add nsw i64 %1692, %1808
  %1824 = getelementptr inbounds i16, i16* %blur_x, i64 %1823
  %1825 = bitcast i16* %1824 to <16 x i16>*
  %1826 = load <16 x i16>, <16 x i16>* %1825, align 2, !tbaa !399
  %1827 = getelementptr inbounds i16, i16* %1824, i64 16
  %1828 = bitcast i16* %1827 to <16 x i16>*
  %1829 = load <16 x i16>, <16 x i16>* %1828, align 2, !tbaa !399
  %1830 = add <16 x i16> %1819, %1812
  %1831 = add <16 x i16> %1830, %1826
  %1832 = add <16 x i16> %1822, %1815
  %1833 = add <16 x i16> %1832, %1829
  %1834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1831, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1833, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1836 = shufflevector <16 x i16> %1834, <16 x i16> %1835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1837 = lshr <32 x i16> %1836, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1838 = shufflevector <32 x i16> %1837, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1839 = add nsw i64 %1695, %1808
  %1840 = getelementptr inbounds i16, i16* %65, i64 %1839
  %1841 = bitcast i16* %1840 to <16 x i16>*
  store <16 x i16> %1838, <16 x i16>* %1841, align 2, !tbaa !401
  %1842 = shufflevector <32 x i16> %1837, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1843 = getelementptr inbounds i16, i16* %1840, i64 16
  %1844 = bitcast i16* %1843 to <16 x i16>*
  store <16 x i16> %1842, <16 x i16>* %1844, align 2, !tbaa !401
  %1845 = add nuw nsw i32 %blur_y.s0.x.x.rebased68, 1
  %.not2581 = icmp eq i32 %1845, %t1639
  br i1 %.not2581, label %"end for blur_y.s0.x.x.rebased67", label %"for blur_y.s0.x.x.rebased66"

after_bb75:                                       ; preds = %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge", %"produce blur_x78"
  %.pre-phi3260 = phi i32 [ %.pre3259, %"end for blur_y.s0.x.x.rebased67.after_bb75_crit_edge" ], [ %1890, %"produce blur_x78" ]
  %1846 = mul nsw i32 %.pre-phi3260, %a73
  %t1666 = sub nsw i32 %1846, %t1601
  br i1 %99, label %"for blur_y.s0.x.x.rebased80.preheader", label %"end for blur_y.s0.x.x.rebased81", !prof !386

"for blur_y.s0.x.x.rebased80.preheader":          ; preds = %after_bb75
  %1847 = sext i32 %t1666 to i64
  %1848 = zext i32 %.pre-phi3254 to i64
  %1849 = mul nsw i64 %1848, %108
  %1850 = sub nsw i64 %1849, %95
  %1851 = zext i32 %.pre-phi3260 to i64
  %1852 = mul nsw i64 %1851, %108
  %1853 = sub nsw i64 %1852, %95
  %1854 = zext i32 %.pre-phi3250 to i64
  %1855 = mul nsw i64 %1854, %108
  %1856 = sub nsw i64 %1855, %95
  %1857 = sext i32 %a26 to i64
  %1858 = add nsw i64 %1857, 1
  %1859 = mul nsw i64 %1858, %109
  %1860 = add nsw i64 %1859, %112
  br label %"for blur_y.s0.x.x.rebased80"

"produce blur_x78":                               ; preds = %"end for blur_y.s0.x.x.rebased67"
  %1861 = getelementptr inbounds i16, i16* %read_input, i64 %113
  %1862 = getelementptr inbounds i16, i16* %1861, i64 -31
  %1863 = bitcast i16* %1862 to <16 x i16>*
  %1864 = load <16 x i16>, <16 x i16>* %1863, align 2, !tbaa !396
  %1865 = getelementptr inbounds i16, i16* %1861, i64 -15
  %1866 = bitcast i16* %1865 to <16 x i16>*
  %1867 = load <16 x i16>, <16 x i16>* %1866, align 2, !tbaa !396
  %1868 = getelementptr inbounds i16, i16* %1861, i64 -30
  %1869 = bitcast i16* %1868 to <16 x i16>*
  %1870 = load <16 x i16>, <16 x i16>* %1869, align 2, !tbaa !396
  %1871 = getelementptr inbounds i16, i16* %1861, i64 -14
  %1872 = bitcast i16* %1871 to <16 x i16>*
  %1873 = load <16 x i16>, <16 x i16>* %1872, align 2, !tbaa !396
  %1874 = getelementptr inbounds i16, i16* %1861, i64 -32
  %1875 = bitcast i16* %1874 to <16 x i16>*
  %1876 = load <16 x i16>, <16 x i16>* %1875, align 2, !tbaa !396
  %1877 = getelementptr inbounds i16, i16* %1861, i64 -16
  %1878 = bitcast i16* %1877 to <16 x i16>*
  %1879 = load <16 x i16>, <16 x i16>* %1878, align 2, !tbaa !396
  %1880 = add <16 x i16> %1870, %1864
  %1881 = add <16 x i16> %1880, %1876
  %1882 = add <16 x i16> %1873, %1867
  %1883 = add <16 x i16> %1882, %1879
  %1884 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1881, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1885 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1883, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1886 = shufflevector <16 x i16> %1884, <16 x i16> %1885, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1887 = lshr <32 x i16> %1886, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1888 = shufflevector <32 x i16> %1887, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1889 = add nsw i32 %a26, 3
  %1890 = and i32 %1889, 3
  %1891 = zext i32 %1890 to i64
  %1892 = mul nsw i64 %96, %1891
  %1893 = add nsw i64 %98, %1892
  %1894 = getelementptr inbounds i16, i16* %blur_x, i64 %1893
  %1895 = getelementptr inbounds i16, i16* %1894, i64 -32
  %1896 = bitcast i16* %1895 to <16 x i16>*
  store <16 x i16> %1888, <16 x i16>* %1896, align 2, !tbaa !399
  %1897 = shufflevector <32 x i16> %1887, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1898 = getelementptr inbounds i16, i16* %1894, i64 -16
  %1899 = bitcast i16* %1898 to <16 x i16>*
  store <16 x i16> %1897, <16 x i16>* %1899, align 2, !tbaa !399
  %1900 = zext i32 %.pre-phi3254 to i64
  %1901 = mul nsw i64 %1900, %108
  %1902 = add nsw i64 %1901, %93
  %1903 = getelementptr inbounds i16, i16* %blur_x, i64 %1902
  %1904 = getelementptr inbounds i16, i16* %1903, i64 -32
  %1905 = bitcast i16* %1904 to <16 x i16>*
  %1906 = load <16 x i16>, <16 x i16>* %1905, align 2, !tbaa !399
  %1907 = getelementptr inbounds i16, i16* %1903, i64 -16
  %1908 = bitcast i16* %1907 to <16 x i16>*
  %1909 = load <16 x i16>, <16 x i16>* %1908, align 2, !tbaa !399
  %1910 = mul nsw i64 %1891, %108
  %1911 = add nsw i64 %1910, %93
  %1912 = getelementptr inbounds i16, i16* %blur_x, i64 %1911
  %1913 = getelementptr inbounds i16, i16* %1912, i64 -32
  %1914 = bitcast i16* %1913 to <16 x i16>*
  %1915 = load <16 x i16>, <16 x i16>* %1914, align 2, !tbaa !399
  %1916 = getelementptr inbounds i16, i16* %1912, i64 -16
  %1917 = bitcast i16* %1916 to <16 x i16>*
  %1918 = load <16 x i16>, <16 x i16>* %1917, align 2, !tbaa !399
  %1919 = zext i32 %.pre-phi3250 to i64
  %1920 = mul nsw i64 %1919, %108
  %1921 = add nsw i64 %1920, %93
  %1922 = getelementptr inbounds i16, i16* %blur_x, i64 %1921
  %1923 = getelementptr inbounds i16, i16* %1922, i64 -32
  %1924 = bitcast i16* %1923 to <16 x i16>*
  %1925 = load <16 x i16>, <16 x i16>* %1924, align 2, !tbaa !399
  %1926 = getelementptr inbounds i16, i16* %1922, i64 -16
  %1927 = bitcast i16* %1926 to <16 x i16>*
  %1928 = load <16 x i16>, <16 x i16>* %1927, align 2, !tbaa !399
  %1929 = add <16 x i16> %1915, %1906
  %1930 = add <16 x i16> %1929, %1925
  %1931 = add <16 x i16> %1918, %1909
  %1932 = add <16 x i16> %1931, %1928
  %1933 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1930, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1934 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1932, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1935 = shufflevector <16 x i16> %1933, <16 x i16> %1934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1936 = lshr <32 x i16> %1935, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1937 = shufflevector <32 x i16> %1936, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1938 = sext i32 %a26 to i64
  %1939 = add nsw i64 %1938, 1
  %1940 = mul nsw i64 %1939, %109
  %1941 = add nsw i64 %111, %1940
  %1942 = getelementptr inbounds i16, i16* %65, i64 %1941
  %1943 = getelementptr inbounds i16, i16* %1942, i64 -32
  %1944 = bitcast i16* %1943 to <16 x i16>*
  store <16 x i16> %1937, <16 x i16>* %1944, align 2, !tbaa !401
  %1945 = shufflevector <32 x i16> %1936, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1946 = getelementptr inbounds i16, i16* %1942, i64 -16
  %1947 = bitcast i16* %1946 to <16 x i16>*
  store <16 x i16> %1945, <16 x i16>* %1947, align 2, !tbaa !401
  br label %after_bb75

"for blur_y.s0.x.x.rebased80":                    ; preds = %"for blur_y.s0.x.x.rebased80.preheader", %"consume blur_x87"
  %indvars.iv3036 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased80.preheader" ], [ %indvars.iv.next3037, %"consume blur_x87" ]
  %1948 = add nsw i64 %indvars.iv3036, %100
  %1949 = icmp slt i64 %1948, 1
  %1950 = trunc i64 %1948 to i32
  %1951 = shl nsw i32 %1950, 5
  %1952 = icmp sgt i32 %4, %1951
  %1953 = or i1 %1949, %1952
  br i1 %1953, label %"produce blur_x86", label %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge"

"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased80"
  %.pre3261 = shl nsw i64 %1948, 5
  br label %"consume blur_x87"

"end for blur_y.s0.x.x.rebased81":                ; preds = %"consume blur_x87", %after_bb75
  br i1 %101, label %"for blur_y.s0.x.x.rebased88.preheader", label %"end for blur_y.s0.x.x.rebased89", !prof !386

"for blur_y.s0.x.x.rebased88.preheader":          ; preds = %"end for blur_y.s0.x.x.rebased81"
  %1954 = sext i32 %t1666 to i64
  %1955 = zext i32 %.pre-phi3254 to i64
  %1956 = mul nsw i64 %1955, %108
  %1957 = sub nsw i64 %1956, %95
  %1958 = zext i32 %.pre-phi3260 to i64
  %1959 = mul nsw i64 %1958, %108
  %1960 = sub nsw i64 %1959, %95
  %1961 = zext i32 %.pre-phi3250 to i64
  %1962 = mul nsw i64 %1961, %108
  %1963 = sub nsw i64 %1962, %95
  %1964 = sext i32 %a26 to i64
  %1965 = add nsw i64 %1964, 1
  %1966 = mul nsw i64 %1965, %109
  %1967 = add nsw i64 %1966, %112
  br label %"for blur_y.s0.x.x.rebased88"

"produce blur_x86":                               ; preds = %"for blur_y.s0.x.x.rebased80"
  %t688 = add nsw i32 %1951, %t1665
  %1968 = sext i32 %t688 to i64
  %1969 = getelementptr inbounds i16, i16* %read_input, i64 %1968
  %1970 = getelementptr inbounds i16, i16* %1969, i64 1
  %1971 = bitcast i16* %1970 to <16 x i16>*
  %1972 = load <16 x i16>, <16 x i16>* %1971, align 2, !tbaa !396
  %1973 = getelementptr inbounds i16, i16* %1969, i64 17
  %1974 = bitcast i16* %1973 to <16 x i16>*
  %1975 = load <16 x i16>, <16 x i16>* %1974, align 2, !tbaa !396
  %1976 = getelementptr inbounds i16, i16* %1969, i64 2
  %1977 = bitcast i16* %1976 to <16 x i16>*
  %1978 = load <16 x i16>, <16 x i16>* %1977, align 2, !tbaa !396
  %1979 = getelementptr inbounds i16, i16* %1969, i64 18
  %1980 = bitcast i16* %1979 to <16 x i16>*
  %1981 = load <16 x i16>, <16 x i16>* %1980, align 2, !tbaa !396
  %1982 = bitcast i16* %1969 to <16 x i16>*
  %1983 = load <16 x i16>, <16 x i16>* %1982, align 2, !tbaa !396
  %1984 = getelementptr inbounds i16, i16* %1969, i64 16
  %1985 = bitcast i16* %1984 to <16 x i16>*
  %1986 = load <16 x i16>, <16 x i16>* %1985, align 2, !tbaa !396
  %1987 = add <16 x i16> %1978, %1972
  %1988 = add <16 x i16> %1987, %1983
  %1989 = add <16 x i16> %1981, %1975
  %1990 = add <16 x i16> %1989, %1986
  %1991 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1988, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1992 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %1990, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %1993 = shufflevector <16 x i16> %1991, <16 x i16> %1992, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1994 = lshr <32 x i16> %1993, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %1995 = shufflevector <32 x i16> %1994, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1996 = shl nsw i64 %1948, 5
  %1997 = add nsw i64 %1996, %1847
  %1998 = getelementptr inbounds i16, i16* %blur_x, i64 %1997
  %1999 = bitcast i16* %1998 to <16 x i16>*
  store <16 x i16> %1995, <16 x i16>* %1999, align 2, !tbaa !399
  %2000 = shufflevector <32 x i16> %1994, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2001 = getelementptr inbounds i16, i16* %1998, i64 16
  %2002 = bitcast i16* %2001 to <16 x i16>*
  store <16 x i16> %2000, <16 x i16>* %2002, align 2, !tbaa !399
  br label %"consume blur_x87"

"consume blur_x87":                               ; preds = %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge", %"produce blur_x86"
  %.pre-phi3262 = phi i64 [ %.pre3261, %"for blur_y.s0.x.x.rebased80.consume blur_x87_crit_edge" ], [ %1996, %"produce blur_x86" ]
  %2003 = add nsw i64 %1850, %.pre-phi3262
  %2004 = getelementptr inbounds i16, i16* %blur_x, i64 %2003
  %2005 = bitcast i16* %2004 to <16 x i16>*
  %2006 = load <16 x i16>, <16 x i16>* %2005, align 2, !tbaa !399
  %2007 = getelementptr inbounds i16, i16* %2004, i64 16
  %2008 = bitcast i16* %2007 to <16 x i16>*
  %2009 = load <16 x i16>, <16 x i16>* %2008, align 2, !tbaa !399
  %2010 = add nsw i64 %1853, %.pre-phi3262
  %2011 = getelementptr inbounds i16, i16* %blur_x, i64 %2010
  %2012 = bitcast i16* %2011 to <16 x i16>*
  %2013 = load <16 x i16>, <16 x i16>* %2012, align 2, !tbaa !399
  %2014 = getelementptr inbounds i16, i16* %2011, i64 16
  %2015 = bitcast i16* %2014 to <16 x i16>*
  %2016 = load <16 x i16>, <16 x i16>* %2015, align 2, !tbaa !399
  %2017 = add nsw i64 %1856, %.pre-phi3262
  %2018 = getelementptr inbounds i16, i16* %blur_x, i64 %2017
  %2019 = bitcast i16* %2018 to <16 x i16>*
  %2020 = load <16 x i16>, <16 x i16>* %2019, align 2, !tbaa !399
  %2021 = getelementptr inbounds i16, i16* %2018, i64 16
  %2022 = bitcast i16* %2021 to <16 x i16>*
  %2023 = load <16 x i16>, <16 x i16>* %2022, align 2, !tbaa !399
  %2024 = add <16 x i16> %2013, %2006
  %2025 = add <16 x i16> %2024, %2020
  %2026 = add <16 x i16> %2016, %2009
  %2027 = add <16 x i16> %2026, %2023
  %2028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2025, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2029 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2027, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2030 = shufflevector <16 x i16> %2028, <16 x i16> %2029, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2031 = lshr <32 x i16> %2030, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2032 = shufflevector <32 x i16> %2031, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2033 = add nsw i64 %1860, %.pre-phi3262
  %2034 = getelementptr inbounds i16, i16* %65, i64 %2033
  %2035 = bitcast i16* %2034 to <16 x i16>*
  store <16 x i16> %2032, <16 x i16>* %2035, align 2, !tbaa !401
  %2036 = shufflevector <32 x i16> %2031, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2037 = getelementptr inbounds i16, i16* %2034, i64 16
  %2038 = bitcast i16* %2037 to <16 x i16>*
  store <16 x i16> %2036, <16 x i16>* %2038, align 2, !tbaa !401
  %indvars.iv.next3037 = add nuw nsw i64 %indvars.iv3036, 1
  %.not2580 = icmp eq i64 %indvars.iv.next3037, %180
  br i1 %.not2580, label %"end for blur_y.s0.x.x.rebased81", label %"for blur_y.s0.x.x.rebased80"

"for blur_y.s0.x.x.rebased88":                    ; preds = %"for blur_y.s0.x.x.rebased88.preheader", %"consume blur_x96"
  %blur_y.s0.x.x.rebased90 = phi i32 [ %2117, %"consume blur_x96" ], [ 0, %"for blur_y.s0.x.x.rebased88.preheader" ]
  %2039 = add nsw i32 %blur_y.s0.x.x.rebased90, %t1582
  %a98 = shl nsw i32 %2039, 5
  %2040 = icmp sgt i32 %a14, %a98
  %b104 = select i1 %2040, i32 %a98, i32 %a14
  %2041 = icmp slt i32 %2039, 1
  %2042 = icmp sgt i32 %4, %a98
  %2043 = or i1 %2041, %2042
  br i1 %2043, label %"produce blur_x94", label %"consume blur_x96"

"end for blur_y.s0.x.x.rebased89":                ; preds = %"consume blur_x96", %"end for blur_y.s0.x.x.rebased81"
  br i1 %34, label %"produce blur_x100", label %after_bb97

"produce blur_x94":                               ; preds = %"for blur_y.s0.x.x.rebased88"
  %2044 = icmp slt i32 %b104, %4
  %blur_x.s0.x.v1.base.s95 = select i1 %2044, i32 %b104, i32 %4
  %t693 = add nsw i32 %blur_x.s0.x.v1.base.s95, %t1665
  %2045 = sext i32 %t693 to i64
  %2046 = getelementptr inbounds i16, i16* %read_input, i64 %2045
  %2047 = getelementptr inbounds i16, i16* %2046, i64 1
  %2048 = bitcast i16* %2047 to <16 x i16>*
  %2049 = load <16 x i16>, <16 x i16>* %2048, align 2, !tbaa !396
  %2050 = getelementptr inbounds i16, i16* %2046, i64 17
  %2051 = bitcast i16* %2050 to <16 x i16>*
  %2052 = load <16 x i16>, <16 x i16>* %2051, align 2, !tbaa !396
  %2053 = getelementptr inbounds i16, i16* %2046, i64 2
  %2054 = bitcast i16* %2053 to <16 x i16>*
  %2055 = load <16 x i16>, <16 x i16>* %2054, align 2, !tbaa !396
  %2056 = getelementptr inbounds i16, i16* %2046, i64 18
  %2057 = bitcast i16* %2056 to <16 x i16>*
  %2058 = load <16 x i16>, <16 x i16>* %2057, align 2, !tbaa !396
  %2059 = bitcast i16* %2046 to <16 x i16>*
  %2060 = load <16 x i16>, <16 x i16>* %2059, align 2, !tbaa !396
  %2061 = getelementptr inbounds i16, i16* %2046, i64 16
  %2062 = bitcast i16* %2061 to <16 x i16>*
  %2063 = load <16 x i16>, <16 x i16>* %2062, align 2, !tbaa !396
  %2064 = add <16 x i16> %2055, %2049
  %2065 = add <16 x i16> %2064, %2060
  %2066 = add <16 x i16> %2058, %2052
  %2067 = add <16 x i16> %2066, %2063
  %2068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2065, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2067, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2070 = shufflevector <16 x i16> %2068, <16 x i16> %2069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2071 = lshr <32 x i16> %2070, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2072 = shufflevector <32 x i16> %2071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2073 = sext i32 %blur_x.s0.x.v1.base.s95 to i64
  %2074 = add nsw i64 %2073, %1954
  %2075 = getelementptr inbounds i16, i16* %blur_x, i64 %2074
  %2076 = bitcast i16* %2075 to <16 x i16>*
  store <16 x i16> %2072, <16 x i16>* %2076, align 2, !tbaa !399
  %2077 = shufflevector <32 x i16> %2071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2078 = getelementptr inbounds i16, i16* %2075, i64 16
  %2079 = bitcast i16* %2078 to <16 x i16>*
  store <16 x i16> %2077, <16 x i16>* %2079, align 2, !tbaa !399
  br label %"consume blur_x96"

"consume blur_x96":                               ; preds = %"for blur_y.s0.x.x.rebased88", %"produce blur_x94"
  %2080 = sext i32 %b104 to i64
  %2081 = add nsw i64 %1957, %2080
  %2082 = getelementptr inbounds i16, i16* %blur_x, i64 %2081
  %2083 = bitcast i16* %2082 to <16 x i16>*
  %2084 = load <16 x i16>, <16 x i16>* %2083, align 2, !tbaa !399
  %2085 = getelementptr inbounds i16, i16* %2082, i64 16
  %2086 = bitcast i16* %2085 to <16 x i16>*
  %2087 = load <16 x i16>, <16 x i16>* %2086, align 2, !tbaa !399
  %2088 = add nsw i64 %1960, %2080
  %2089 = getelementptr inbounds i16, i16* %blur_x, i64 %2088
  %2090 = bitcast i16* %2089 to <16 x i16>*
  %2091 = load <16 x i16>, <16 x i16>* %2090, align 2, !tbaa !399
  %2092 = getelementptr inbounds i16, i16* %2089, i64 16
  %2093 = bitcast i16* %2092 to <16 x i16>*
  %2094 = load <16 x i16>, <16 x i16>* %2093, align 2, !tbaa !399
  %2095 = add nsw i64 %1963, %2080
  %2096 = getelementptr inbounds i16, i16* %blur_x, i64 %2095
  %2097 = bitcast i16* %2096 to <16 x i16>*
  %2098 = load <16 x i16>, <16 x i16>* %2097, align 2, !tbaa !399
  %2099 = getelementptr inbounds i16, i16* %2096, i64 16
  %2100 = bitcast i16* %2099 to <16 x i16>*
  %2101 = load <16 x i16>, <16 x i16>* %2100, align 2, !tbaa !399
  %2102 = add <16 x i16> %2091, %2084
  %2103 = add <16 x i16> %2102, %2098
  %2104 = add <16 x i16> %2094, %2087
  %2105 = add <16 x i16> %2104, %2101
  %2106 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2103, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2107 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2105, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2108 = shufflevector <16 x i16> %2106, <16 x i16> %2107, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2109 = lshr <32 x i16> %2108, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2110 = shufflevector <32 x i16> %2109, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2111 = add nsw i64 %1967, %2080
  %2112 = getelementptr inbounds i16, i16* %65, i64 %2111
  %2113 = bitcast i16* %2112 to <16 x i16>*
  store <16 x i16> %2110, <16 x i16>* %2113, align 2, !tbaa !401
  %2114 = shufflevector <32 x i16> %2109, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2115 = getelementptr inbounds i16, i16* %2112, i64 16
  %2116 = bitcast i16* %2115 to <16 x i16>*
  store <16 x i16> %2114, <16 x i16>* %2116, align 2, !tbaa !401
  %2117 = add nuw nsw i32 %blur_y.s0.x.x.rebased90, 1
  %.not2579 = icmp eq i32 %2117, %t1639
  br i1 %.not2579, label %"end for blur_y.s0.x.x.rebased89", label %"for blur_y.s0.x.x.rebased88"

after_bb97:                                       ; preds = %"end for blur_y.s0.x.x.rebased89", %"produce blur_x100"
  br i1 %99, label %"for blur_y.s0.x.x.rebased102.preheader", label %"end for blur_y.s0.x.x.rebased103", !prof !386

"for blur_y.s0.x.x.rebased102.preheader":         ; preds = %after_bb97
  %2118 = sext i32 %t1638 to i64
  %2119 = zext i32 %.pre-phi3260 to i64
  %2120 = mul nsw i64 %2119, %108
  %2121 = sub nsw i64 %2120, %95
  %2122 = zext i32 %.pre-phi to i64
  %2123 = mul nsw i64 %2122, %108
  %2124 = sub nsw i64 %2123, %95
  %2125 = zext i32 %.pre-phi3254 to i64
  %2126 = mul nsw i64 %2125, %108
  %2127 = sub nsw i64 %2126, %95
  %2128 = sext i32 %a26 to i64
  %2129 = add nsw i64 %2128, 2
  %2130 = mul nsw i64 %2129, %109
  %2131 = add nsw i64 %2130, %112
  br label %"for blur_y.s0.x.x.rebased102"

"produce blur_x100":                              ; preds = %"end for blur_y.s0.x.x.rebased89"
  %2132 = getelementptr inbounds i16, i16* %read_input, i64 %115
  %2133 = getelementptr inbounds i16, i16* %2132, i64 -31
  %2134 = bitcast i16* %2133 to <16 x i16>*
  %2135 = load <16 x i16>, <16 x i16>* %2134, align 2, !tbaa !396
  %2136 = getelementptr inbounds i16, i16* %2132, i64 -15
  %2137 = bitcast i16* %2136 to <16 x i16>*
  %2138 = load <16 x i16>, <16 x i16>* %2137, align 2, !tbaa !396
  %2139 = getelementptr inbounds i16, i16* %2132, i64 -30
  %2140 = bitcast i16* %2139 to <16 x i16>*
  %2141 = load <16 x i16>, <16 x i16>* %2140, align 2, !tbaa !396
  %2142 = getelementptr inbounds i16, i16* %2132, i64 -14
  %2143 = bitcast i16* %2142 to <16 x i16>*
  %2144 = load <16 x i16>, <16 x i16>* %2143, align 2, !tbaa !396
  %2145 = getelementptr inbounds i16, i16* %2132, i64 -32
  %2146 = bitcast i16* %2145 to <16 x i16>*
  %2147 = load <16 x i16>, <16 x i16>* %2146, align 2, !tbaa !396
  %2148 = getelementptr inbounds i16, i16* %2132, i64 -16
  %2149 = bitcast i16* %2148 to <16 x i16>*
  %2150 = load <16 x i16>, <16 x i16>* %2149, align 2, !tbaa !396
  %2151 = add <16 x i16> %2141, %2135
  %2152 = add <16 x i16> %2151, %2147
  %2153 = add <16 x i16> %2144, %2138
  %2154 = add <16 x i16> %2153, %2150
  %2155 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2152, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2156 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2154, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2157 = shufflevector <16 x i16> %2155, <16 x i16> %2156, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2158 = lshr <32 x i16> %2157, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2159 = shufflevector <32 x i16> %2158, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2160 = zext i32 %.pre-phi to i64
  %2161 = mul nsw i64 %96, %2160
  %2162 = add nsw i64 %98, %2161
  %2163 = getelementptr inbounds i16, i16* %blur_x, i64 %2162
  %2164 = getelementptr inbounds i16, i16* %2163, i64 -32
  %2165 = bitcast i16* %2164 to <16 x i16>*
  store <16 x i16> %2159, <16 x i16>* %2165, align 2, !tbaa !399
  %2166 = shufflevector <32 x i16> %2158, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2167 = getelementptr inbounds i16, i16* %2163, i64 -16
  %2168 = bitcast i16* %2167 to <16 x i16>*
  store <16 x i16> %2166, <16 x i16>* %2168, align 2, !tbaa !399
  %2169 = zext i32 %.pre-phi3260 to i64
  %2170 = mul nsw i64 %2169, %108
  %2171 = add nsw i64 %2170, %93
  %2172 = getelementptr inbounds i16, i16* %blur_x, i64 %2171
  %2173 = getelementptr inbounds i16, i16* %2172, i64 -32
  %2174 = bitcast i16* %2173 to <16 x i16>*
  %2175 = load <16 x i16>, <16 x i16>* %2174, align 2, !tbaa !399
  %2176 = getelementptr inbounds i16, i16* %2172, i64 -16
  %2177 = bitcast i16* %2176 to <16 x i16>*
  %2178 = load <16 x i16>, <16 x i16>* %2177, align 2, !tbaa !399
  %2179 = mul nsw i64 %2160, %108
  %2180 = add nsw i64 %2179, %93
  %2181 = getelementptr inbounds i16, i16* %blur_x, i64 %2180
  %2182 = getelementptr inbounds i16, i16* %2181, i64 -32
  %2183 = bitcast i16* %2182 to <16 x i16>*
  %2184 = load <16 x i16>, <16 x i16>* %2183, align 2, !tbaa !399
  %2185 = getelementptr inbounds i16, i16* %2181, i64 -16
  %2186 = bitcast i16* %2185 to <16 x i16>*
  %2187 = load <16 x i16>, <16 x i16>* %2186, align 2, !tbaa !399
  %2188 = zext i32 %.pre-phi3254 to i64
  %2189 = mul nsw i64 %2188, %108
  %2190 = add nsw i64 %2189, %93
  %2191 = getelementptr inbounds i16, i16* %blur_x, i64 %2190
  %2192 = getelementptr inbounds i16, i16* %2191, i64 -32
  %2193 = bitcast i16* %2192 to <16 x i16>*
  %2194 = load <16 x i16>, <16 x i16>* %2193, align 2, !tbaa !399
  %2195 = getelementptr inbounds i16, i16* %2191, i64 -16
  %2196 = bitcast i16* %2195 to <16 x i16>*
  %2197 = load <16 x i16>, <16 x i16>* %2196, align 2, !tbaa !399
  %2198 = add <16 x i16> %2184, %2175
  %2199 = add <16 x i16> %2198, %2194
  %2200 = add <16 x i16> %2187, %2178
  %2201 = add <16 x i16> %2200, %2197
  %2202 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2199, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2203 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2201, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2204 = shufflevector <16 x i16> %2202, <16 x i16> %2203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2205 = lshr <32 x i16> %2204, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2206 = shufflevector <32 x i16> %2205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2207 = sext i32 %a26 to i64
  %2208 = add nsw i64 %2207, 2
  %2209 = mul nsw i64 %2208, %109
  %2210 = add nsw i64 %111, %2209
  %2211 = getelementptr inbounds i16, i16* %65, i64 %2210
  %2212 = getelementptr inbounds i16, i16* %2211, i64 -32
  %2213 = bitcast i16* %2212 to <16 x i16>*
  store <16 x i16> %2206, <16 x i16>* %2213, align 2, !tbaa !401
  %2214 = shufflevector <32 x i16> %2205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2215 = getelementptr inbounds i16, i16* %2211, i64 -16
  %2216 = bitcast i16* %2215 to <16 x i16>*
  store <16 x i16> %2214, <16 x i16>* %2216, align 2, !tbaa !401
  br label %after_bb97

"for blur_y.s0.x.x.rebased102":                   ; preds = %"for blur_y.s0.x.x.rebased102.preheader", %"consume blur_x109"
  %indvars.iv3039 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased102.preheader" ], [ %indvars.iv.next3040, %"consume blur_x109" ]
  %2217 = add nsw i64 %indvars.iv3039, %100
  %2218 = icmp slt i64 %2217, 1
  %2219 = trunc i64 %2217 to i32
  %2220 = shl nsw i32 %2219, 5
  %2221 = icmp sgt i32 %4, %2220
  %2222 = or i1 %2218, %2221
  br i1 %2222, label %"produce blur_x108", label %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge"

"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased102"
  %.pre3263 = shl nsw i64 %2217, 5
  br label %"consume blur_x109"

"end for blur_y.s0.x.x.rebased103":               ; preds = %"consume blur_x109", %after_bb97
  br i1 %101, label %"for blur_y.s0.x.x.rebased110.preheader", label %"end for blur_y.s0.x.x.rebased111", !prof !386

"for blur_y.s0.x.x.rebased110.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased103"
  %2223 = sext i32 %t1638 to i64
  %2224 = zext i32 %.pre-phi3260 to i64
  %2225 = mul nsw i64 %2224, %108
  %2226 = sub nsw i64 %2225, %95
  %2227 = zext i32 %.pre-phi to i64
  %2228 = mul nsw i64 %2227, %108
  %2229 = sub nsw i64 %2228, %95
  %2230 = zext i32 %.pre-phi3254 to i64
  %2231 = mul nsw i64 %2230, %108
  %2232 = sub nsw i64 %2231, %95
  %2233 = sext i32 %a26 to i64
  %2234 = add nsw i64 %2233, 2
  %2235 = mul nsw i64 %2234, %109
  %2236 = add nsw i64 %2235, %112
  br label %"for blur_y.s0.x.x.rebased110"

"produce blur_x108":                              ; preds = %"for blur_y.s0.x.x.rebased102"
  %t704 = add nsw i32 %2220, %t1681
  %2237 = sext i32 %t704 to i64
  %2238 = getelementptr inbounds i16, i16* %read_input, i64 %2237
  %2239 = getelementptr inbounds i16, i16* %2238, i64 1
  %2240 = bitcast i16* %2239 to <16 x i16>*
  %2241 = load <16 x i16>, <16 x i16>* %2240, align 2, !tbaa !396
  %2242 = getelementptr inbounds i16, i16* %2238, i64 17
  %2243 = bitcast i16* %2242 to <16 x i16>*
  %2244 = load <16 x i16>, <16 x i16>* %2243, align 2, !tbaa !396
  %2245 = getelementptr inbounds i16, i16* %2238, i64 2
  %2246 = bitcast i16* %2245 to <16 x i16>*
  %2247 = load <16 x i16>, <16 x i16>* %2246, align 2, !tbaa !396
  %2248 = getelementptr inbounds i16, i16* %2238, i64 18
  %2249 = bitcast i16* %2248 to <16 x i16>*
  %2250 = load <16 x i16>, <16 x i16>* %2249, align 2, !tbaa !396
  %2251 = bitcast i16* %2238 to <16 x i16>*
  %2252 = load <16 x i16>, <16 x i16>* %2251, align 2, !tbaa !396
  %2253 = getelementptr inbounds i16, i16* %2238, i64 16
  %2254 = bitcast i16* %2253 to <16 x i16>*
  %2255 = load <16 x i16>, <16 x i16>* %2254, align 2, !tbaa !396
  %2256 = add <16 x i16> %2247, %2241
  %2257 = add <16 x i16> %2256, %2252
  %2258 = add <16 x i16> %2250, %2244
  %2259 = add <16 x i16> %2258, %2255
  %2260 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2257, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2261 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2259, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2262 = shufflevector <16 x i16> %2260, <16 x i16> %2261, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2263 = lshr <32 x i16> %2262, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2264 = shufflevector <32 x i16> %2263, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2265 = shl nsw i64 %2217, 5
  %2266 = add nsw i64 %2265, %2118
  %2267 = getelementptr inbounds i16, i16* %blur_x, i64 %2266
  %2268 = bitcast i16* %2267 to <16 x i16>*
  store <16 x i16> %2264, <16 x i16>* %2268, align 2, !tbaa !399
  %2269 = shufflevector <32 x i16> %2263, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2270 = getelementptr inbounds i16, i16* %2267, i64 16
  %2271 = bitcast i16* %2270 to <16 x i16>*
  store <16 x i16> %2269, <16 x i16>* %2271, align 2, !tbaa !399
  br label %"consume blur_x109"

"consume blur_x109":                              ; preds = %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge", %"produce blur_x108"
  %.pre-phi3264 = phi i64 [ %.pre3263, %"for blur_y.s0.x.x.rebased102.consume blur_x109_crit_edge" ], [ %2265, %"produce blur_x108" ]
  %2272 = add nsw i64 %2121, %.pre-phi3264
  %2273 = getelementptr inbounds i16, i16* %blur_x, i64 %2272
  %2274 = bitcast i16* %2273 to <16 x i16>*
  %2275 = load <16 x i16>, <16 x i16>* %2274, align 2, !tbaa !399
  %2276 = getelementptr inbounds i16, i16* %2273, i64 16
  %2277 = bitcast i16* %2276 to <16 x i16>*
  %2278 = load <16 x i16>, <16 x i16>* %2277, align 2, !tbaa !399
  %2279 = add nsw i64 %2124, %.pre-phi3264
  %2280 = getelementptr inbounds i16, i16* %blur_x, i64 %2279
  %2281 = bitcast i16* %2280 to <16 x i16>*
  %2282 = load <16 x i16>, <16 x i16>* %2281, align 2, !tbaa !399
  %2283 = getelementptr inbounds i16, i16* %2280, i64 16
  %2284 = bitcast i16* %2283 to <16 x i16>*
  %2285 = load <16 x i16>, <16 x i16>* %2284, align 2, !tbaa !399
  %2286 = add nsw i64 %2127, %.pre-phi3264
  %2287 = getelementptr inbounds i16, i16* %blur_x, i64 %2286
  %2288 = bitcast i16* %2287 to <16 x i16>*
  %2289 = load <16 x i16>, <16 x i16>* %2288, align 2, !tbaa !399
  %2290 = getelementptr inbounds i16, i16* %2287, i64 16
  %2291 = bitcast i16* %2290 to <16 x i16>*
  %2292 = load <16 x i16>, <16 x i16>* %2291, align 2, !tbaa !399
  %2293 = add <16 x i16> %2282, %2275
  %2294 = add <16 x i16> %2293, %2289
  %2295 = add <16 x i16> %2285, %2278
  %2296 = add <16 x i16> %2295, %2292
  %2297 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2294, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2298 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2296, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2299 = shufflevector <16 x i16> %2297, <16 x i16> %2298, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2300 = lshr <32 x i16> %2299, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2301 = shufflevector <32 x i16> %2300, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2302 = add nsw i64 %2131, %.pre-phi3264
  %2303 = getelementptr inbounds i16, i16* %65, i64 %2302
  %2304 = bitcast i16* %2303 to <16 x i16>*
  store <16 x i16> %2301, <16 x i16>* %2304, align 2, !tbaa !401
  %2305 = shufflevector <32 x i16> %2300, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2306 = getelementptr inbounds i16, i16* %2303, i64 16
  %2307 = bitcast i16* %2306 to <16 x i16>*
  store <16 x i16> %2305, <16 x i16>* %2307, align 2, !tbaa !401
  %indvars.iv.next3040 = add nuw nsw i64 %indvars.iv3039, 1
  %.not2578 = icmp eq i64 %indvars.iv.next3040, %180
  br i1 %.not2578, label %"end for blur_y.s0.x.x.rebased103", label %"for blur_y.s0.x.x.rebased102"

"for blur_y.s0.x.x.rebased110":                   ; preds = %"for blur_y.s0.x.x.rebased110.preheader", %"consume blur_x118"
  %blur_y.s0.x.x.rebased112 = phi i32 [ %2386, %"consume blur_x118" ], [ 0, %"for blur_y.s0.x.x.rebased110.preheader" ]
  %2308 = add nsw i32 %blur_y.s0.x.x.rebased112, %t1582
  %a105 = shl nsw i32 %2308, 5
  %2309 = icmp sgt i32 %a14, %a105
  %b111 = select i1 %2309, i32 %a105, i32 %a14
  %2310 = icmp slt i32 %2308, 1
  %2311 = icmp sgt i32 %4, %a105
  %2312 = or i1 %2310, %2311
  br i1 %2312, label %"produce blur_x116", label %"consume blur_x118"

"end for blur_y.s0.x.x.rebased111":               ; preds = %"consume blur_x118", %"end for blur_y.s0.x.x.rebased103"
  br i1 %34, label %"produce blur_x122", label %after_bb119

"produce blur_x116":                              ; preds = %"for blur_y.s0.x.x.rebased110"
  %2313 = icmp slt i32 %b111, %4
  %blur_x.s0.x.v1.base.s117 = select i1 %2313, i32 %b111, i32 %4
  %t709 = add nsw i32 %blur_x.s0.x.v1.base.s117, %t1681
  %2314 = sext i32 %t709 to i64
  %2315 = getelementptr inbounds i16, i16* %read_input, i64 %2314
  %2316 = getelementptr inbounds i16, i16* %2315, i64 1
  %2317 = bitcast i16* %2316 to <16 x i16>*
  %2318 = load <16 x i16>, <16 x i16>* %2317, align 2, !tbaa !396
  %2319 = getelementptr inbounds i16, i16* %2315, i64 17
  %2320 = bitcast i16* %2319 to <16 x i16>*
  %2321 = load <16 x i16>, <16 x i16>* %2320, align 2, !tbaa !396
  %2322 = getelementptr inbounds i16, i16* %2315, i64 2
  %2323 = bitcast i16* %2322 to <16 x i16>*
  %2324 = load <16 x i16>, <16 x i16>* %2323, align 2, !tbaa !396
  %2325 = getelementptr inbounds i16, i16* %2315, i64 18
  %2326 = bitcast i16* %2325 to <16 x i16>*
  %2327 = load <16 x i16>, <16 x i16>* %2326, align 2, !tbaa !396
  %2328 = bitcast i16* %2315 to <16 x i16>*
  %2329 = load <16 x i16>, <16 x i16>* %2328, align 2, !tbaa !396
  %2330 = getelementptr inbounds i16, i16* %2315, i64 16
  %2331 = bitcast i16* %2330 to <16 x i16>*
  %2332 = load <16 x i16>, <16 x i16>* %2331, align 2, !tbaa !396
  %2333 = add <16 x i16> %2324, %2318
  %2334 = add <16 x i16> %2333, %2329
  %2335 = add <16 x i16> %2327, %2321
  %2336 = add <16 x i16> %2335, %2332
  %2337 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2334, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2338 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2336, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2339 = shufflevector <16 x i16> %2337, <16 x i16> %2338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2340 = lshr <32 x i16> %2339, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2341 = shufflevector <32 x i16> %2340, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2342 = sext i32 %blur_x.s0.x.v1.base.s117 to i64
  %2343 = add nsw i64 %2342, %2223
  %2344 = getelementptr inbounds i16, i16* %blur_x, i64 %2343
  %2345 = bitcast i16* %2344 to <16 x i16>*
  store <16 x i16> %2341, <16 x i16>* %2345, align 2, !tbaa !399
  %2346 = shufflevector <32 x i16> %2340, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2347 = getelementptr inbounds i16, i16* %2344, i64 16
  %2348 = bitcast i16* %2347 to <16 x i16>*
  store <16 x i16> %2346, <16 x i16>* %2348, align 2, !tbaa !399
  br label %"consume blur_x118"

"consume blur_x118":                              ; preds = %"for blur_y.s0.x.x.rebased110", %"produce blur_x116"
  %2349 = sext i32 %b111 to i64
  %2350 = add nsw i64 %2226, %2349
  %2351 = getelementptr inbounds i16, i16* %blur_x, i64 %2350
  %2352 = bitcast i16* %2351 to <16 x i16>*
  %2353 = load <16 x i16>, <16 x i16>* %2352, align 2, !tbaa !399
  %2354 = getelementptr inbounds i16, i16* %2351, i64 16
  %2355 = bitcast i16* %2354 to <16 x i16>*
  %2356 = load <16 x i16>, <16 x i16>* %2355, align 2, !tbaa !399
  %2357 = add nsw i64 %2229, %2349
  %2358 = getelementptr inbounds i16, i16* %blur_x, i64 %2357
  %2359 = bitcast i16* %2358 to <16 x i16>*
  %2360 = load <16 x i16>, <16 x i16>* %2359, align 2, !tbaa !399
  %2361 = getelementptr inbounds i16, i16* %2358, i64 16
  %2362 = bitcast i16* %2361 to <16 x i16>*
  %2363 = load <16 x i16>, <16 x i16>* %2362, align 2, !tbaa !399
  %2364 = add nsw i64 %2232, %2349
  %2365 = getelementptr inbounds i16, i16* %blur_x, i64 %2364
  %2366 = bitcast i16* %2365 to <16 x i16>*
  %2367 = load <16 x i16>, <16 x i16>* %2366, align 2, !tbaa !399
  %2368 = getelementptr inbounds i16, i16* %2365, i64 16
  %2369 = bitcast i16* %2368 to <16 x i16>*
  %2370 = load <16 x i16>, <16 x i16>* %2369, align 2, !tbaa !399
  %2371 = add <16 x i16> %2360, %2353
  %2372 = add <16 x i16> %2371, %2367
  %2373 = add <16 x i16> %2363, %2356
  %2374 = add <16 x i16> %2373, %2370
  %2375 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2372, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2376 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2374, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2377 = shufflevector <16 x i16> %2375, <16 x i16> %2376, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2378 = lshr <32 x i16> %2377, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2379 = shufflevector <32 x i16> %2378, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2380 = add nsw i64 %2236, %2349
  %2381 = getelementptr inbounds i16, i16* %65, i64 %2380
  %2382 = bitcast i16* %2381 to <16 x i16>*
  store <16 x i16> %2379, <16 x i16>* %2382, align 2, !tbaa !401
  %2383 = shufflevector <32 x i16> %2378, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2384 = getelementptr inbounds i16, i16* %2381, i64 16
  %2385 = bitcast i16* %2384 to <16 x i16>*
  store <16 x i16> %2383, <16 x i16>* %2385, align 2, !tbaa !401
  %2386 = add nuw nsw i32 %blur_y.s0.x.x.rebased112, 1
  %.not2577 = icmp eq i32 %2386, %t1639
  br i1 %.not2577, label %"end for blur_y.s0.x.x.rebased111", label %"for blur_y.s0.x.x.rebased110"

after_bb119:                                      ; preds = %"end for blur_y.s0.x.x.rebased111", %"produce blur_x122"
  br i1 %99, label %"for blur_y.s0.x.x.rebased124.preheader", label %"end for blur_y.s0.x.x.rebased125", !prof !386

"for blur_y.s0.x.x.rebased124.preheader":         ; preds = %after_bb119
  %2387 = sext i32 %t1644 to i64
  %2388 = zext i32 %.pre-phi to i64
  %2389 = mul nsw i64 %2388, %108
  %2390 = sub nsw i64 %2389, %95
  %2391 = zext i32 %.pre-phi3250 to i64
  %2392 = mul nsw i64 %2391, %108
  %2393 = sub nsw i64 %2392, %95
  %2394 = zext i32 %.pre-phi3260 to i64
  %2395 = mul nsw i64 %2394, %108
  %2396 = sub nsw i64 %2395, %95
  %2397 = sext i32 %a26 to i64
  %2398 = add nsw i64 %2397, 3
  %2399 = mul nsw i64 %2398, %109
  %2400 = add nsw i64 %2399, %112
  br label %"for blur_y.s0.x.x.rebased124"

"produce blur_x122":                              ; preds = %"end for blur_y.s0.x.x.rebased111"
  %2401 = getelementptr inbounds i16, i16* %read_input, i64 %117
  %2402 = getelementptr inbounds i16, i16* %2401, i64 -31
  %2403 = bitcast i16* %2402 to <16 x i16>*
  %2404 = load <16 x i16>, <16 x i16>* %2403, align 2, !tbaa !396
  %2405 = getelementptr inbounds i16, i16* %2401, i64 -15
  %2406 = bitcast i16* %2405 to <16 x i16>*
  %2407 = load <16 x i16>, <16 x i16>* %2406, align 2, !tbaa !396
  %2408 = getelementptr inbounds i16, i16* %2401, i64 -30
  %2409 = bitcast i16* %2408 to <16 x i16>*
  %2410 = load <16 x i16>, <16 x i16>* %2409, align 2, !tbaa !396
  %2411 = getelementptr inbounds i16, i16* %2401, i64 -14
  %2412 = bitcast i16* %2411 to <16 x i16>*
  %2413 = load <16 x i16>, <16 x i16>* %2412, align 2, !tbaa !396
  %2414 = getelementptr inbounds i16, i16* %2401, i64 -32
  %2415 = bitcast i16* %2414 to <16 x i16>*
  %2416 = load <16 x i16>, <16 x i16>* %2415, align 2, !tbaa !396
  %2417 = getelementptr inbounds i16, i16* %2401, i64 -16
  %2418 = bitcast i16* %2417 to <16 x i16>*
  %2419 = load <16 x i16>, <16 x i16>* %2418, align 2, !tbaa !396
  %2420 = add <16 x i16> %2410, %2404
  %2421 = add <16 x i16> %2420, %2416
  %2422 = add <16 x i16> %2413, %2407
  %2423 = add <16 x i16> %2422, %2419
  %2424 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2421, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2425 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2423, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2426 = shufflevector <16 x i16> %2424, <16 x i16> %2425, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2427 = lshr <32 x i16> %2426, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2428 = shufflevector <32 x i16> %2427, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2429 = zext i32 %.pre-phi3250 to i64
  %2430 = mul nsw i64 %96, %2429
  %2431 = add nsw i64 %98, %2430
  %2432 = getelementptr inbounds i16, i16* %blur_x, i64 %2431
  %2433 = getelementptr inbounds i16, i16* %2432, i64 -32
  %2434 = bitcast i16* %2433 to <16 x i16>*
  store <16 x i16> %2428, <16 x i16>* %2434, align 2, !tbaa !399
  %2435 = shufflevector <32 x i16> %2427, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2436 = getelementptr inbounds i16, i16* %2432, i64 -16
  %2437 = bitcast i16* %2436 to <16 x i16>*
  store <16 x i16> %2435, <16 x i16>* %2437, align 2, !tbaa !399
  %2438 = zext i32 %.pre-phi to i64
  %2439 = mul nsw i64 %2438, %108
  %2440 = add nsw i64 %2439, %93
  %2441 = getelementptr inbounds i16, i16* %blur_x, i64 %2440
  %2442 = getelementptr inbounds i16, i16* %2441, i64 -32
  %2443 = bitcast i16* %2442 to <16 x i16>*
  %2444 = load <16 x i16>, <16 x i16>* %2443, align 2, !tbaa !399
  %2445 = getelementptr inbounds i16, i16* %2441, i64 -16
  %2446 = bitcast i16* %2445 to <16 x i16>*
  %2447 = load <16 x i16>, <16 x i16>* %2446, align 2, !tbaa !399
  %2448 = mul nsw i64 %2429, %108
  %2449 = add nsw i64 %2448, %93
  %2450 = getelementptr inbounds i16, i16* %blur_x, i64 %2449
  %2451 = getelementptr inbounds i16, i16* %2450, i64 -32
  %2452 = bitcast i16* %2451 to <16 x i16>*
  %2453 = load <16 x i16>, <16 x i16>* %2452, align 2, !tbaa !399
  %2454 = getelementptr inbounds i16, i16* %2450, i64 -16
  %2455 = bitcast i16* %2454 to <16 x i16>*
  %2456 = load <16 x i16>, <16 x i16>* %2455, align 2, !tbaa !399
  %2457 = zext i32 %.pre-phi3260 to i64
  %2458 = mul nsw i64 %2457, %108
  %2459 = add nsw i64 %2458, %93
  %2460 = getelementptr inbounds i16, i16* %blur_x, i64 %2459
  %2461 = getelementptr inbounds i16, i16* %2460, i64 -32
  %2462 = bitcast i16* %2461 to <16 x i16>*
  %2463 = load <16 x i16>, <16 x i16>* %2462, align 2, !tbaa !399
  %2464 = getelementptr inbounds i16, i16* %2460, i64 -16
  %2465 = bitcast i16* %2464 to <16 x i16>*
  %2466 = load <16 x i16>, <16 x i16>* %2465, align 2, !tbaa !399
  %2467 = add <16 x i16> %2453, %2444
  %2468 = add <16 x i16> %2467, %2463
  %2469 = add <16 x i16> %2456, %2447
  %2470 = add <16 x i16> %2469, %2466
  %2471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2468, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2472 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2470, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2473 = shufflevector <16 x i16> %2471, <16 x i16> %2472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2474 = lshr <32 x i16> %2473, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2475 = shufflevector <32 x i16> %2474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2476 = sext i32 %a26 to i64
  %2477 = add nsw i64 %2476, 3
  %2478 = mul nsw i64 %2477, %109
  %2479 = add nsw i64 %111, %2478
  %2480 = getelementptr inbounds i16, i16* %65, i64 %2479
  %2481 = getelementptr inbounds i16, i16* %2480, i64 -32
  %2482 = bitcast i16* %2481 to <16 x i16>*
  store <16 x i16> %2475, <16 x i16>* %2482, align 2, !tbaa !401
  %2483 = shufflevector <32 x i16> %2474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2484 = getelementptr inbounds i16, i16* %2480, i64 -16
  %2485 = bitcast i16* %2484 to <16 x i16>*
  store <16 x i16> %2483, <16 x i16>* %2485, align 2, !tbaa !401
  br label %after_bb119

"for blur_y.s0.x.x.rebased124":                   ; preds = %"for blur_y.s0.x.x.rebased124.preheader", %"consume blur_x131"
  %indvars.iv3042 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased124.preheader" ], [ %indvars.iv.next3043, %"consume blur_x131" ]
  %2486 = add nsw i64 %indvars.iv3042, %100
  %2487 = icmp slt i64 %2486, 1
  %2488 = trunc i64 %2486 to i32
  %2489 = shl nsw i32 %2488, 5
  %2490 = icmp sgt i32 %4, %2489
  %2491 = or i1 %2487, %2490
  br i1 %2491, label %"produce blur_x130", label %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge"

"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased124"
  %.pre3265 = shl nsw i64 %2486, 5
  br label %"consume blur_x131"

"end for blur_y.s0.x.x.rebased125":               ; preds = %"consume blur_x131", %after_bb119
  br i1 %101, label %"for blur_y.s0.x.x.rebased132.preheader", label %"end for blur_y.s0.x.x.rebased133", !prof !386

"for blur_y.s0.x.x.rebased132.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased125"
  %2492 = sext i32 %t1644 to i64
  %2493 = zext i32 %.pre-phi to i64
  %2494 = mul nsw i64 %2493, %108
  %2495 = sub nsw i64 %2494, %95
  %2496 = zext i32 %.pre-phi3250 to i64
  %2497 = mul nsw i64 %2496, %108
  %2498 = sub nsw i64 %2497, %95
  %2499 = zext i32 %.pre-phi3260 to i64
  %2500 = mul nsw i64 %2499, %108
  %2501 = sub nsw i64 %2500, %95
  %2502 = sext i32 %a26 to i64
  %2503 = add nsw i64 %2502, 3
  %2504 = mul nsw i64 %2503, %109
  %2505 = add nsw i64 %2504, %112
  br label %"for blur_y.s0.x.x.rebased132"

"produce blur_x130":                              ; preds = %"for blur_y.s0.x.x.rebased124"
  %t720 = add nsw i32 %2489, %t1697
  %2506 = sext i32 %t720 to i64
  %2507 = getelementptr inbounds i16, i16* %read_input, i64 %2506
  %2508 = getelementptr inbounds i16, i16* %2507, i64 1
  %2509 = bitcast i16* %2508 to <16 x i16>*
  %2510 = load <16 x i16>, <16 x i16>* %2509, align 2, !tbaa !396
  %2511 = getelementptr inbounds i16, i16* %2507, i64 17
  %2512 = bitcast i16* %2511 to <16 x i16>*
  %2513 = load <16 x i16>, <16 x i16>* %2512, align 2, !tbaa !396
  %2514 = getelementptr inbounds i16, i16* %2507, i64 2
  %2515 = bitcast i16* %2514 to <16 x i16>*
  %2516 = load <16 x i16>, <16 x i16>* %2515, align 2, !tbaa !396
  %2517 = getelementptr inbounds i16, i16* %2507, i64 18
  %2518 = bitcast i16* %2517 to <16 x i16>*
  %2519 = load <16 x i16>, <16 x i16>* %2518, align 2, !tbaa !396
  %2520 = bitcast i16* %2507 to <16 x i16>*
  %2521 = load <16 x i16>, <16 x i16>* %2520, align 2, !tbaa !396
  %2522 = getelementptr inbounds i16, i16* %2507, i64 16
  %2523 = bitcast i16* %2522 to <16 x i16>*
  %2524 = load <16 x i16>, <16 x i16>* %2523, align 2, !tbaa !396
  %2525 = add <16 x i16> %2516, %2510
  %2526 = add <16 x i16> %2525, %2521
  %2527 = add <16 x i16> %2519, %2513
  %2528 = add <16 x i16> %2527, %2524
  %2529 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2526, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2530 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2528, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2531 = shufflevector <16 x i16> %2529, <16 x i16> %2530, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2532 = lshr <32 x i16> %2531, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2533 = shufflevector <32 x i16> %2532, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2534 = shl nsw i64 %2486, 5
  %2535 = add nsw i64 %2534, %2387
  %2536 = getelementptr inbounds i16, i16* %blur_x, i64 %2535
  %2537 = bitcast i16* %2536 to <16 x i16>*
  store <16 x i16> %2533, <16 x i16>* %2537, align 2, !tbaa !399
  %2538 = shufflevector <32 x i16> %2532, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2539 = getelementptr inbounds i16, i16* %2536, i64 16
  %2540 = bitcast i16* %2539 to <16 x i16>*
  store <16 x i16> %2538, <16 x i16>* %2540, align 2, !tbaa !399
  br label %"consume blur_x131"

"consume blur_x131":                              ; preds = %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge", %"produce blur_x130"
  %.pre-phi3266 = phi i64 [ %.pre3265, %"for blur_y.s0.x.x.rebased124.consume blur_x131_crit_edge" ], [ %2534, %"produce blur_x130" ]
  %2541 = add nsw i64 %2390, %.pre-phi3266
  %2542 = getelementptr inbounds i16, i16* %blur_x, i64 %2541
  %2543 = bitcast i16* %2542 to <16 x i16>*
  %2544 = load <16 x i16>, <16 x i16>* %2543, align 2, !tbaa !399
  %2545 = getelementptr inbounds i16, i16* %2542, i64 16
  %2546 = bitcast i16* %2545 to <16 x i16>*
  %2547 = load <16 x i16>, <16 x i16>* %2546, align 2, !tbaa !399
  %2548 = add nsw i64 %2393, %.pre-phi3266
  %2549 = getelementptr inbounds i16, i16* %blur_x, i64 %2548
  %2550 = bitcast i16* %2549 to <16 x i16>*
  %2551 = load <16 x i16>, <16 x i16>* %2550, align 2, !tbaa !399
  %2552 = getelementptr inbounds i16, i16* %2549, i64 16
  %2553 = bitcast i16* %2552 to <16 x i16>*
  %2554 = load <16 x i16>, <16 x i16>* %2553, align 2, !tbaa !399
  %2555 = add nsw i64 %2396, %.pre-phi3266
  %2556 = getelementptr inbounds i16, i16* %blur_x, i64 %2555
  %2557 = bitcast i16* %2556 to <16 x i16>*
  %2558 = load <16 x i16>, <16 x i16>* %2557, align 2, !tbaa !399
  %2559 = getelementptr inbounds i16, i16* %2556, i64 16
  %2560 = bitcast i16* %2559 to <16 x i16>*
  %2561 = load <16 x i16>, <16 x i16>* %2560, align 2, !tbaa !399
  %2562 = add <16 x i16> %2551, %2544
  %2563 = add <16 x i16> %2562, %2558
  %2564 = add <16 x i16> %2554, %2547
  %2565 = add <16 x i16> %2564, %2561
  %2566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2563, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2567 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2565, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2568 = shufflevector <16 x i16> %2566, <16 x i16> %2567, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2569 = lshr <32 x i16> %2568, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2570 = shufflevector <32 x i16> %2569, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2571 = add nsw i64 %2400, %.pre-phi3266
  %2572 = getelementptr inbounds i16, i16* %65, i64 %2571
  %2573 = bitcast i16* %2572 to <16 x i16>*
  store <16 x i16> %2570, <16 x i16>* %2573, align 2, !tbaa !401
  %2574 = shufflevector <32 x i16> %2569, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2575 = getelementptr inbounds i16, i16* %2572, i64 16
  %2576 = bitcast i16* %2575 to <16 x i16>*
  store <16 x i16> %2574, <16 x i16>* %2576, align 2, !tbaa !401
  %indvars.iv.next3043 = add nuw nsw i64 %indvars.iv3042, 1
  %.not2576 = icmp eq i64 %indvars.iv.next3043, %180
  br i1 %.not2576, label %"end for blur_y.s0.x.x.rebased125", label %"for blur_y.s0.x.x.rebased124"

"for blur_y.s0.x.x.rebased132":                   ; preds = %"for blur_y.s0.x.x.rebased132.preheader", %"consume blur_x140"
  %blur_y.s0.x.x.rebased134 = phi i32 [ %2655, %"consume blur_x140" ], [ 0, %"for blur_y.s0.x.x.rebased132.preheader" ]
  %2577 = add nsw i32 %blur_y.s0.x.x.rebased134, %t1582
  %a112 = shl nsw i32 %2577, 5
  %2578 = icmp sgt i32 %a14, %a112
  %b118 = select i1 %2578, i32 %a112, i32 %a14
  %2579 = icmp slt i32 %2577, 1
  %2580 = icmp sgt i32 %4, %a112
  %2581 = or i1 %2579, %2580
  br i1 %2581, label %"produce blur_x138", label %"consume blur_x140"

"end for blur_y.s0.x.x.rebased133":               ; preds = %"consume blur_x140", %"end for blur_y.s0.x.x.rebased125"
  br i1 %34, label %"produce blur_x144", label %after_bb141

"produce blur_x138":                              ; preds = %"for blur_y.s0.x.x.rebased132"
  %2582 = icmp slt i32 %b118, %4
  %blur_x.s0.x.v1.base.s139 = select i1 %2582, i32 %b118, i32 %4
  %t725 = add nsw i32 %blur_x.s0.x.v1.base.s139, %t1697
  %2583 = sext i32 %t725 to i64
  %2584 = getelementptr inbounds i16, i16* %read_input, i64 %2583
  %2585 = getelementptr inbounds i16, i16* %2584, i64 1
  %2586 = bitcast i16* %2585 to <16 x i16>*
  %2587 = load <16 x i16>, <16 x i16>* %2586, align 2, !tbaa !396
  %2588 = getelementptr inbounds i16, i16* %2584, i64 17
  %2589 = bitcast i16* %2588 to <16 x i16>*
  %2590 = load <16 x i16>, <16 x i16>* %2589, align 2, !tbaa !396
  %2591 = getelementptr inbounds i16, i16* %2584, i64 2
  %2592 = bitcast i16* %2591 to <16 x i16>*
  %2593 = load <16 x i16>, <16 x i16>* %2592, align 2, !tbaa !396
  %2594 = getelementptr inbounds i16, i16* %2584, i64 18
  %2595 = bitcast i16* %2594 to <16 x i16>*
  %2596 = load <16 x i16>, <16 x i16>* %2595, align 2, !tbaa !396
  %2597 = bitcast i16* %2584 to <16 x i16>*
  %2598 = load <16 x i16>, <16 x i16>* %2597, align 2, !tbaa !396
  %2599 = getelementptr inbounds i16, i16* %2584, i64 16
  %2600 = bitcast i16* %2599 to <16 x i16>*
  %2601 = load <16 x i16>, <16 x i16>* %2600, align 2, !tbaa !396
  %2602 = add <16 x i16> %2593, %2587
  %2603 = add <16 x i16> %2602, %2598
  %2604 = add <16 x i16> %2596, %2590
  %2605 = add <16 x i16> %2604, %2601
  %2606 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2603, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2607 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2605, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2608 = shufflevector <16 x i16> %2606, <16 x i16> %2607, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2609 = lshr <32 x i16> %2608, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2610 = shufflevector <32 x i16> %2609, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2611 = sext i32 %blur_x.s0.x.v1.base.s139 to i64
  %2612 = add nsw i64 %2611, %2492
  %2613 = getelementptr inbounds i16, i16* %blur_x, i64 %2612
  %2614 = bitcast i16* %2613 to <16 x i16>*
  store <16 x i16> %2610, <16 x i16>* %2614, align 2, !tbaa !399
  %2615 = shufflevector <32 x i16> %2609, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2616 = getelementptr inbounds i16, i16* %2613, i64 16
  %2617 = bitcast i16* %2616 to <16 x i16>*
  store <16 x i16> %2615, <16 x i16>* %2617, align 2, !tbaa !399
  br label %"consume blur_x140"

"consume blur_x140":                              ; preds = %"for blur_y.s0.x.x.rebased132", %"produce blur_x138"
  %2618 = sext i32 %b118 to i64
  %2619 = add nsw i64 %2495, %2618
  %2620 = getelementptr inbounds i16, i16* %blur_x, i64 %2619
  %2621 = bitcast i16* %2620 to <16 x i16>*
  %2622 = load <16 x i16>, <16 x i16>* %2621, align 2, !tbaa !399
  %2623 = getelementptr inbounds i16, i16* %2620, i64 16
  %2624 = bitcast i16* %2623 to <16 x i16>*
  %2625 = load <16 x i16>, <16 x i16>* %2624, align 2, !tbaa !399
  %2626 = add nsw i64 %2498, %2618
  %2627 = getelementptr inbounds i16, i16* %blur_x, i64 %2626
  %2628 = bitcast i16* %2627 to <16 x i16>*
  %2629 = load <16 x i16>, <16 x i16>* %2628, align 2, !tbaa !399
  %2630 = getelementptr inbounds i16, i16* %2627, i64 16
  %2631 = bitcast i16* %2630 to <16 x i16>*
  %2632 = load <16 x i16>, <16 x i16>* %2631, align 2, !tbaa !399
  %2633 = add nsw i64 %2501, %2618
  %2634 = getelementptr inbounds i16, i16* %blur_x, i64 %2633
  %2635 = bitcast i16* %2634 to <16 x i16>*
  %2636 = load <16 x i16>, <16 x i16>* %2635, align 2, !tbaa !399
  %2637 = getelementptr inbounds i16, i16* %2634, i64 16
  %2638 = bitcast i16* %2637 to <16 x i16>*
  %2639 = load <16 x i16>, <16 x i16>* %2638, align 2, !tbaa !399
  %2640 = add <16 x i16> %2629, %2622
  %2641 = add <16 x i16> %2640, %2636
  %2642 = add <16 x i16> %2632, %2625
  %2643 = add <16 x i16> %2642, %2639
  %2644 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2641, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2645 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2643, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2646 = shufflevector <16 x i16> %2644, <16 x i16> %2645, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2647 = lshr <32 x i16> %2646, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2648 = shufflevector <32 x i16> %2647, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2649 = add nsw i64 %2505, %2618
  %2650 = getelementptr inbounds i16, i16* %65, i64 %2649
  %2651 = bitcast i16* %2650 to <16 x i16>*
  store <16 x i16> %2648, <16 x i16>* %2651, align 2, !tbaa !401
  %2652 = shufflevector <32 x i16> %2647, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2653 = getelementptr inbounds i16, i16* %2650, i64 16
  %2654 = bitcast i16* %2653 to <16 x i16>*
  store <16 x i16> %2652, <16 x i16>* %2654, align 2, !tbaa !401
  %2655 = add nuw nsw i32 %blur_y.s0.x.x.rebased134, 1
  %.not2575 = icmp eq i32 %2655, %t1639
  br i1 %.not2575, label %"end for blur_y.s0.x.x.rebased133", label %"for blur_y.s0.x.x.rebased132"

after_bb141:                                      ; preds = %"end for blur_y.s0.x.x.rebased133", %"produce blur_x144"
  br i1 %99, label %"for blur_y.s0.x.x.rebased146.preheader", label %"end for blur_y.s0.x.x.rebased147", !prof !386

"for blur_y.s0.x.x.rebased146.preheader":         ; preds = %after_bb141
  %2656 = sext i32 %t1650 to i64
  %2657 = zext i32 %.pre-phi3250 to i64
  %2658 = mul nsw i64 %2657, %108
  %2659 = sub nsw i64 %2658, %95
  %2660 = zext i32 %.pre-phi3254 to i64
  %2661 = mul nsw i64 %2660, %108
  %2662 = sub nsw i64 %2661, %95
  %2663 = zext i32 %.pre-phi to i64
  %2664 = mul nsw i64 %2663, %108
  %2665 = sub nsw i64 %2664, %95
  %2666 = sext i32 %a26 to i64
  %2667 = add nsw i64 %2666, 4
  %2668 = mul nsw i64 %2667, %109
  %2669 = add nsw i64 %2668, %112
  br label %"for blur_y.s0.x.x.rebased146"

"produce blur_x144":                              ; preds = %"end for blur_y.s0.x.x.rebased133"
  %2670 = getelementptr inbounds i16, i16* %read_input, i64 %119
  %2671 = getelementptr inbounds i16, i16* %2670, i64 -31
  %2672 = bitcast i16* %2671 to <16 x i16>*
  %2673 = load <16 x i16>, <16 x i16>* %2672, align 2, !tbaa !396
  %2674 = getelementptr inbounds i16, i16* %2670, i64 -15
  %2675 = bitcast i16* %2674 to <16 x i16>*
  %2676 = load <16 x i16>, <16 x i16>* %2675, align 2, !tbaa !396
  %2677 = getelementptr inbounds i16, i16* %2670, i64 -30
  %2678 = bitcast i16* %2677 to <16 x i16>*
  %2679 = load <16 x i16>, <16 x i16>* %2678, align 2, !tbaa !396
  %2680 = getelementptr inbounds i16, i16* %2670, i64 -14
  %2681 = bitcast i16* %2680 to <16 x i16>*
  %2682 = load <16 x i16>, <16 x i16>* %2681, align 2, !tbaa !396
  %2683 = getelementptr inbounds i16, i16* %2670, i64 -32
  %2684 = bitcast i16* %2683 to <16 x i16>*
  %2685 = load <16 x i16>, <16 x i16>* %2684, align 2, !tbaa !396
  %2686 = getelementptr inbounds i16, i16* %2670, i64 -16
  %2687 = bitcast i16* %2686 to <16 x i16>*
  %2688 = load <16 x i16>, <16 x i16>* %2687, align 2, !tbaa !396
  %2689 = add <16 x i16> %2679, %2673
  %2690 = add <16 x i16> %2689, %2685
  %2691 = add <16 x i16> %2682, %2676
  %2692 = add <16 x i16> %2691, %2688
  %2693 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2690, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2694 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2692, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2695 = shufflevector <16 x i16> %2693, <16 x i16> %2694, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2696 = lshr <32 x i16> %2695, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2697 = shufflevector <32 x i16> %2696, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2698 = zext i32 %.pre-phi3254 to i64
  %2699 = mul nsw i64 %96, %2698
  %2700 = add nsw i64 %98, %2699
  %2701 = getelementptr inbounds i16, i16* %blur_x, i64 %2700
  %2702 = getelementptr inbounds i16, i16* %2701, i64 -32
  %2703 = bitcast i16* %2702 to <16 x i16>*
  store <16 x i16> %2697, <16 x i16>* %2703, align 2, !tbaa !399
  %2704 = shufflevector <32 x i16> %2696, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2705 = getelementptr inbounds i16, i16* %2701, i64 -16
  %2706 = bitcast i16* %2705 to <16 x i16>*
  store <16 x i16> %2704, <16 x i16>* %2706, align 2, !tbaa !399
  %2707 = zext i32 %.pre-phi3250 to i64
  %2708 = mul nsw i64 %2707, %108
  %2709 = add nsw i64 %2708, %93
  %2710 = getelementptr inbounds i16, i16* %blur_x, i64 %2709
  %2711 = getelementptr inbounds i16, i16* %2710, i64 -32
  %2712 = bitcast i16* %2711 to <16 x i16>*
  %2713 = load <16 x i16>, <16 x i16>* %2712, align 2, !tbaa !399
  %2714 = getelementptr inbounds i16, i16* %2710, i64 -16
  %2715 = bitcast i16* %2714 to <16 x i16>*
  %2716 = load <16 x i16>, <16 x i16>* %2715, align 2, !tbaa !399
  %2717 = mul nsw i64 %2698, %108
  %2718 = add nsw i64 %2717, %93
  %2719 = getelementptr inbounds i16, i16* %blur_x, i64 %2718
  %2720 = getelementptr inbounds i16, i16* %2719, i64 -32
  %2721 = bitcast i16* %2720 to <16 x i16>*
  %2722 = load <16 x i16>, <16 x i16>* %2721, align 2, !tbaa !399
  %2723 = getelementptr inbounds i16, i16* %2719, i64 -16
  %2724 = bitcast i16* %2723 to <16 x i16>*
  %2725 = load <16 x i16>, <16 x i16>* %2724, align 2, !tbaa !399
  %2726 = zext i32 %.pre-phi to i64
  %2727 = mul nsw i64 %2726, %108
  %2728 = add nsw i64 %2727, %93
  %2729 = getelementptr inbounds i16, i16* %blur_x, i64 %2728
  %2730 = getelementptr inbounds i16, i16* %2729, i64 -32
  %2731 = bitcast i16* %2730 to <16 x i16>*
  %2732 = load <16 x i16>, <16 x i16>* %2731, align 2, !tbaa !399
  %2733 = getelementptr inbounds i16, i16* %2729, i64 -16
  %2734 = bitcast i16* %2733 to <16 x i16>*
  %2735 = load <16 x i16>, <16 x i16>* %2734, align 2, !tbaa !399
  %2736 = add <16 x i16> %2722, %2713
  %2737 = add <16 x i16> %2736, %2732
  %2738 = add <16 x i16> %2725, %2716
  %2739 = add <16 x i16> %2738, %2735
  %2740 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2737, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2741 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2739, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2742 = shufflevector <16 x i16> %2740, <16 x i16> %2741, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2743 = lshr <32 x i16> %2742, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2744 = shufflevector <32 x i16> %2743, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2745 = sext i32 %a26 to i64
  %2746 = add nsw i64 %2745, 4
  %2747 = mul nsw i64 %2746, %109
  %2748 = add nsw i64 %111, %2747
  %2749 = getelementptr inbounds i16, i16* %65, i64 %2748
  %2750 = getelementptr inbounds i16, i16* %2749, i64 -32
  %2751 = bitcast i16* %2750 to <16 x i16>*
  store <16 x i16> %2744, <16 x i16>* %2751, align 2, !tbaa !401
  %2752 = shufflevector <32 x i16> %2743, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2753 = getelementptr inbounds i16, i16* %2749, i64 -16
  %2754 = bitcast i16* %2753 to <16 x i16>*
  store <16 x i16> %2752, <16 x i16>* %2754, align 2, !tbaa !401
  br label %after_bb141

"for blur_y.s0.x.x.rebased146":                   ; preds = %"for blur_y.s0.x.x.rebased146.preheader", %"consume blur_x153"
  %indvars.iv3045 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased146.preheader" ], [ %indvars.iv.next3046, %"consume blur_x153" ]
  %2755 = add nsw i64 %indvars.iv3045, %100
  %2756 = icmp slt i64 %2755, 1
  %2757 = trunc i64 %2755 to i32
  %2758 = shl nsw i32 %2757, 5
  %2759 = icmp sgt i32 %4, %2758
  %2760 = or i1 %2756, %2759
  br i1 %2760, label %"produce blur_x152", label %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge"

"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased146"
  %.pre3267 = shl nsw i64 %2755, 5
  br label %"consume blur_x153"

"end for blur_y.s0.x.x.rebased147":               ; preds = %"consume blur_x153", %after_bb141
  br i1 %101, label %"for blur_y.s0.x.x.rebased154.preheader", label %"end for blur_y.s0.x.x.rebased155", !prof !386

"for blur_y.s0.x.x.rebased154.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased147"
  %2761 = sext i32 %t1650 to i64
  %2762 = zext i32 %.pre-phi3250 to i64
  %2763 = mul nsw i64 %2762, %108
  %2764 = sub nsw i64 %2763, %95
  %2765 = zext i32 %.pre-phi3254 to i64
  %2766 = mul nsw i64 %2765, %108
  %2767 = sub nsw i64 %2766, %95
  %2768 = zext i32 %.pre-phi to i64
  %2769 = mul nsw i64 %2768, %108
  %2770 = sub nsw i64 %2769, %95
  %2771 = sext i32 %a26 to i64
  %2772 = add nsw i64 %2771, 4
  %2773 = mul nsw i64 %2772, %109
  %2774 = add nsw i64 %2773, %112
  br label %"for blur_y.s0.x.x.rebased154"

"produce blur_x152":                              ; preds = %"for blur_y.s0.x.x.rebased146"
  %t736 = add nsw i32 %2758, %t1713
  %2775 = sext i32 %t736 to i64
  %2776 = getelementptr inbounds i16, i16* %read_input, i64 %2775
  %2777 = getelementptr inbounds i16, i16* %2776, i64 1
  %2778 = bitcast i16* %2777 to <16 x i16>*
  %2779 = load <16 x i16>, <16 x i16>* %2778, align 2, !tbaa !396
  %2780 = getelementptr inbounds i16, i16* %2776, i64 17
  %2781 = bitcast i16* %2780 to <16 x i16>*
  %2782 = load <16 x i16>, <16 x i16>* %2781, align 2, !tbaa !396
  %2783 = getelementptr inbounds i16, i16* %2776, i64 2
  %2784 = bitcast i16* %2783 to <16 x i16>*
  %2785 = load <16 x i16>, <16 x i16>* %2784, align 2, !tbaa !396
  %2786 = getelementptr inbounds i16, i16* %2776, i64 18
  %2787 = bitcast i16* %2786 to <16 x i16>*
  %2788 = load <16 x i16>, <16 x i16>* %2787, align 2, !tbaa !396
  %2789 = bitcast i16* %2776 to <16 x i16>*
  %2790 = load <16 x i16>, <16 x i16>* %2789, align 2, !tbaa !396
  %2791 = getelementptr inbounds i16, i16* %2776, i64 16
  %2792 = bitcast i16* %2791 to <16 x i16>*
  %2793 = load <16 x i16>, <16 x i16>* %2792, align 2, !tbaa !396
  %2794 = add <16 x i16> %2785, %2779
  %2795 = add <16 x i16> %2794, %2790
  %2796 = add <16 x i16> %2788, %2782
  %2797 = add <16 x i16> %2796, %2793
  %2798 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2795, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2799 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2797, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2800 = shufflevector <16 x i16> %2798, <16 x i16> %2799, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2801 = lshr <32 x i16> %2800, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2802 = shufflevector <32 x i16> %2801, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2803 = shl nsw i64 %2755, 5
  %2804 = add nsw i64 %2803, %2656
  %2805 = getelementptr inbounds i16, i16* %blur_x, i64 %2804
  %2806 = bitcast i16* %2805 to <16 x i16>*
  store <16 x i16> %2802, <16 x i16>* %2806, align 2, !tbaa !399
  %2807 = shufflevector <32 x i16> %2801, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2808 = getelementptr inbounds i16, i16* %2805, i64 16
  %2809 = bitcast i16* %2808 to <16 x i16>*
  store <16 x i16> %2807, <16 x i16>* %2809, align 2, !tbaa !399
  br label %"consume blur_x153"

"consume blur_x153":                              ; preds = %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge", %"produce blur_x152"
  %.pre-phi3268 = phi i64 [ %.pre3267, %"for blur_y.s0.x.x.rebased146.consume blur_x153_crit_edge" ], [ %2803, %"produce blur_x152" ]
  %2810 = add nsw i64 %2659, %.pre-phi3268
  %2811 = getelementptr inbounds i16, i16* %blur_x, i64 %2810
  %2812 = bitcast i16* %2811 to <16 x i16>*
  %2813 = load <16 x i16>, <16 x i16>* %2812, align 2, !tbaa !399
  %2814 = getelementptr inbounds i16, i16* %2811, i64 16
  %2815 = bitcast i16* %2814 to <16 x i16>*
  %2816 = load <16 x i16>, <16 x i16>* %2815, align 2, !tbaa !399
  %2817 = add nsw i64 %2662, %.pre-phi3268
  %2818 = getelementptr inbounds i16, i16* %blur_x, i64 %2817
  %2819 = bitcast i16* %2818 to <16 x i16>*
  %2820 = load <16 x i16>, <16 x i16>* %2819, align 2, !tbaa !399
  %2821 = getelementptr inbounds i16, i16* %2818, i64 16
  %2822 = bitcast i16* %2821 to <16 x i16>*
  %2823 = load <16 x i16>, <16 x i16>* %2822, align 2, !tbaa !399
  %2824 = add nsw i64 %2665, %.pre-phi3268
  %2825 = getelementptr inbounds i16, i16* %blur_x, i64 %2824
  %2826 = bitcast i16* %2825 to <16 x i16>*
  %2827 = load <16 x i16>, <16 x i16>* %2826, align 2, !tbaa !399
  %2828 = getelementptr inbounds i16, i16* %2825, i64 16
  %2829 = bitcast i16* %2828 to <16 x i16>*
  %2830 = load <16 x i16>, <16 x i16>* %2829, align 2, !tbaa !399
  %2831 = add <16 x i16> %2820, %2813
  %2832 = add <16 x i16> %2831, %2827
  %2833 = add <16 x i16> %2823, %2816
  %2834 = add <16 x i16> %2833, %2830
  %2835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2832, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2836 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2834, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2837 = shufflevector <16 x i16> %2835, <16 x i16> %2836, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2838 = lshr <32 x i16> %2837, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2839 = shufflevector <32 x i16> %2838, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2840 = add nsw i64 %2669, %.pre-phi3268
  %2841 = getelementptr inbounds i16, i16* %65, i64 %2840
  %2842 = bitcast i16* %2841 to <16 x i16>*
  store <16 x i16> %2839, <16 x i16>* %2842, align 2, !tbaa !401
  %2843 = shufflevector <32 x i16> %2838, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2844 = getelementptr inbounds i16, i16* %2841, i64 16
  %2845 = bitcast i16* %2844 to <16 x i16>*
  store <16 x i16> %2843, <16 x i16>* %2845, align 2, !tbaa !401
  %indvars.iv.next3046 = add nuw nsw i64 %indvars.iv3045, 1
  %.not2574 = icmp eq i64 %indvars.iv.next3046, %180
  br i1 %.not2574, label %"end for blur_y.s0.x.x.rebased147", label %"for blur_y.s0.x.x.rebased146"

"for blur_y.s0.x.x.rebased154":                   ; preds = %"for blur_y.s0.x.x.rebased154.preheader", %"consume blur_x162"
  %blur_y.s0.x.x.rebased156 = phi i32 [ %2924, %"consume blur_x162" ], [ 0, %"for blur_y.s0.x.x.rebased154.preheader" ]
  %2846 = add nsw i32 %blur_y.s0.x.x.rebased156, %t1582
  %a119 = shl nsw i32 %2846, 5
  %2847 = icmp sgt i32 %a14, %a119
  %b125 = select i1 %2847, i32 %a119, i32 %a14
  %2848 = icmp slt i32 %2846, 1
  %2849 = icmp sgt i32 %4, %a119
  %2850 = or i1 %2848, %2849
  br i1 %2850, label %"produce blur_x160", label %"consume blur_x162"

"end for blur_y.s0.x.x.rebased155":               ; preds = %"consume blur_x162", %"end for blur_y.s0.x.x.rebased147"
  br i1 %34, label %"produce blur_x166", label %after_bb163

"produce blur_x160":                              ; preds = %"for blur_y.s0.x.x.rebased154"
  %2851 = icmp slt i32 %b125, %4
  %blur_x.s0.x.v1.base.s161 = select i1 %2851, i32 %b125, i32 %4
  %t741 = add nsw i32 %blur_x.s0.x.v1.base.s161, %t1713
  %2852 = sext i32 %t741 to i64
  %2853 = getelementptr inbounds i16, i16* %read_input, i64 %2852
  %2854 = getelementptr inbounds i16, i16* %2853, i64 1
  %2855 = bitcast i16* %2854 to <16 x i16>*
  %2856 = load <16 x i16>, <16 x i16>* %2855, align 2, !tbaa !396
  %2857 = getelementptr inbounds i16, i16* %2853, i64 17
  %2858 = bitcast i16* %2857 to <16 x i16>*
  %2859 = load <16 x i16>, <16 x i16>* %2858, align 2, !tbaa !396
  %2860 = getelementptr inbounds i16, i16* %2853, i64 2
  %2861 = bitcast i16* %2860 to <16 x i16>*
  %2862 = load <16 x i16>, <16 x i16>* %2861, align 2, !tbaa !396
  %2863 = getelementptr inbounds i16, i16* %2853, i64 18
  %2864 = bitcast i16* %2863 to <16 x i16>*
  %2865 = load <16 x i16>, <16 x i16>* %2864, align 2, !tbaa !396
  %2866 = bitcast i16* %2853 to <16 x i16>*
  %2867 = load <16 x i16>, <16 x i16>* %2866, align 2, !tbaa !396
  %2868 = getelementptr inbounds i16, i16* %2853, i64 16
  %2869 = bitcast i16* %2868 to <16 x i16>*
  %2870 = load <16 x i16>, <16 x i16>* %2869, align 2, !tbaa !396
  %2871 = add <16 x i16> %2862, %2856
  %2872 = add <16 x i16> %2871, %2867
  %2873 = add <16 x i16> %2865, %2859
  %2874 = add <16 x i16> %2873, %2870
  %2875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2872, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2874, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2877 = shufflevector <16 x i16> %2875, <16 x i16> %2876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2878 = lshr <32 x i16> %2877, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2879 = shufflevector <32 x i16> %2878, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2880 = sext i32 %blur_x.s0.x.v1.base.s161 to i64
  %2881 = add nsw i64 %2880, %2761
  %2882 = getelementptr inbounds i16, i16* %blur_x, i64 %2881
  %2883 = bitcast i16* %2882 to <16 x i16>*
  store <16 x i16> %2879, <16 x i16>* %2883, align 2, !tbaa !399
  %2884 = shufflevector <32 x i16> %2878, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2885 = getelementptr inbounds i16, i16* %2882, i64 16
  %2886 = bitcast i16* %2885 to <16 x i16>*
  store <16 x i16> %2884, <16 x i16>* %2886, align 2, !tbaa !399
  br label %"consume blur_x162"

"consume blur_x162":                              ; preds = %"for blur_y.s0.x.x.rebased154", %"produce blur_x160"
  %2887 = sext i32 %b125 to i64
  %2888 = add nsw i64 %2764, %2887
  %2889 = getelementptr inbounds i16, i16* %blur_x, i64 %2888
  %2890 = bitcast i16* %2889 to <16 x i16>*
  %2891 = load <16 x i16>, <16 x i16>* %2890, align 2, !tbaa !399
  %2892 = getelementptr inbounds i16, i16* %2889, i64 16
  %2893 = bitcast i16* %2892 to <16 x i16>*
  %2894 = load <16 x i16>, <16 x i16>* %2893, align 2, !tbaa !399
  %2895 = add nsw i64 %2767, %2887
  %2896 = getelementptr inbounds i16, i16* %blur_x, i64 %2895
  %2897 = bitcast i16* %2896 to <16 x i16>*
  %2898 = load <16 x i16>, <16 x i16>* %2897, align 2, !tbaa !399
  %2899 = getelementptr inbounds i16, i16* %2896, i64 16
  %2900 = bitcast i16* %2899 to <16 x i16>*
  %2901 = load <16 x i16>, <16 x i16>* %2900, align 2, !tbaa !399
  %2902 = add nsw i64 %2770, %2887
  %2903 = getelementptr inbounds i16, i16* %blur_x, i64 %2902
  %2904 = bitcast i16* %2903 to <16 x i16>*
  %2905 = load <16 x i16>, <16 x i16>* %2904, align 2, !tbaa !399
  %2906 = getelementptr inbounds i16, i16* %2903, i64 16
  %2907 = bitcast i16* %2906 to <16 x i16>*
  %2908 = load <16 x i16>, <16 x i16>* %2907, align 2, !tbaa !399
  %2909 = add <16 x i16> %2898, %2891
  %2910 = add <16 x i16> %2909, %2905
  %2911 = add <16 x i16> %2901, %2894
  %2912 = add <16 x i16> %2911, %2908
  %2913 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2910, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2914 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2912, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2915 = shufflevector <16 x i16> %2913, <16 x i16> %2914, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2916 = lshr <32 x i16> %2915, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2917 = shufflevector <32 x i16> %2916, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2918 = add nsw i64 %2774, %2887
  %2919 = getelementptr inbounds i16, i16* %65, i64 %2918
  %2920 = bitcast i16* %2919 to <16 x i16>*
  store <16 x i16> %2917, <16 x i16>* %2920, align 2, !tbaa !401
  %2921 = shufflevector <32 x i16> %2916, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2922 = getelementptr inbounds i16, i16* %2919, i64 16
  %2923 = bitcast i16* %2922 to <16 x i16>*
  store <16 x i16> %2921, <16 x i16>* %2923, align 2, !tbaa !401
  %2924 = add nuw nsw i32 %blur_y.s0.x.x.rebased156, 1
  %.not2573 = icmp eq i32 %2924, %t1639
  br i1 %.not2573, label %"end for blur_y.s0.x.x.rebased155", label %"for blur_y.s0.x.x.rebased154"

after_bb163:                                      ; preds = %"end for blur_y.s0.x.x.rebased155", %"produce blur_x166"
  br i1 %99, label %"for blur_y.s0.x.x.rebased168.preheader", label %"end for blur_y.s0.x.x.rebased169", !prof !386

"for blur_y.s0.x.x.rebased168.preheader":         ; preds = %after_bb163
  %2925 = sext i32 %t1666 to i64
  %2926 = zext i32 %.pre-phi3254 to i64
  %2927 = mul nsw i64 %2926, %108
  %2928 = sub nsw i64 %2927, %95
  %2929 = zext i32 %.pre-phi3260 to i64
  %2930 = mul nsw i64 %2929, %108
  %2931 = sub nsw i64 %2930, %95
  %2932 = zext i32 %.pre-phi3250 to i64
  %2933 = mul nsw i64 %2932, %108
  %2934 = sub nsw i64 %2933, %95
  %2935 = sext i32 %a26 to i64
  %2936 = add nsw i64 %2935, 5
  %2937 = mul nsw i64 %2936, %109
  %2938 = add nsw i64 %2937, %112
  br label %"for blur_y.s0.x.x.rebased168"

"produce blur_x166":                              ; preds = %"end for blur_y.s0.x.x.rebased155"
  %2939 = getelementptr inbounds i16, i16* %read_input, i64 %121
  %2940 = getelementptr inbounds i16, i16* %2939, i64 -31
  %2941 = bitcast i16* %2940 to <16 x i16>*
  %2942 = load <16 x i16>, <16 x i16>* %2941, align 2, !tbaa !396
  %2943 = getelementptr inbounds i16, i16* %2939, i64 -15
  %2944 = bitcast i16* %2943 to <16 x i16>*
  %2945 = load <16 x i16>, <16 x i16>* %2944, align 2, !tbaa !396
  %2946 = getelementptr inbounds i16, i16* %2939, i64 -30
  %2947 = bitcast i16* %2946 to <16 x i16>*
  %2948 = load <16 x i16>, <16 x i16>* %2947, align 2, !tbaa !396
  %2949 = getelementptr inbounds i16, i16* %2939, i64 -14
  %2950 = bitcast i16* %2949 to <16 x i16>*
  %2951 = load <16 x i16>, <16 x i16>* %2950, align 2, !tbaa !396
  %2952 = getelementptr inbounds i16, i16* %2939, i64 -32
  %2953 = bitcast i16* %2952 to <16 x i16>*
  %2954 = load <16 x i16>, <16 x i16>* %2953, align 2, !tbaa !396
  %2955 = getelementptr inbounds i16, i16* %2939, i64 -16
  %2956 = bitcast i16* %2955 to <16 x i16>*
  %2957 = load <16 x i16>, <16 x i16>* %2956, align 2, !tbaa !396
  %2958 = add <16 x i16> %2948, %2942
  %2959 = add <16 x i16> %2958, %2954
  %2960 = add <16 x i16> %2951, %2945
  %2961 = add <16 x i16> %2960, %2957
  %2962 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2959, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2963 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %2961, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %2964 = shufflevector <16 x i16> %2962, <16 x i16> %2963, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2965 = lshr <32 x i16> %2964, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %2966 = shufflevector <32 x i16> %2965, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2967 = zext i32 %.pre-phi3260 to i64
  %2968 = mul nsw i64 %96, %2967
  %2969 = add nsw i64 %98, %2968
  %2970 = getelementptr inbounds i16, i16* %blur_x, i64 %2969
  %2971 = getelementptr inbounds i16, i16* %2970, i64 -32
  %2972 = bitcast i16* %2971 to <16 x i16>*
  store <16 x i16> %2966, <16 x i16>* %2972, align 2, !tbaa !399
  %2973 = shufflevector <32 x i16> %2965, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2974 = getelementptr inbounds i16, i16* %2970, i64 -16
  %2975 = bitcast i16* %2974 to <16 x i16>*
  store <16 x i16> %2973, <16 x i16>* %2975, align 2, !tbaa !399
  %2976 = zext i32 %.pre-phi3254 to i64
  %2977 = mul nsw i64 %2976, %108
  %2978 = add nsw i64 %2977, %93
  %2979 = getelementptr inbounds i16, i16* %blur_x, i64 %2978
  %2980 = getelementptr inbounds i16, i16* %2979, i64 -32
  %2981 = bitcast i16* %2980 to <16 x i16>*
  %2982 = load <16 x i16>, <16 x i16>* %2981, align 2, !tbaa !399
  %2983 = getelementptr inbounds i16, i16* %2979, i64 -16
  %2984 = bitcast i16* %2983 to <16 x i16>*
  %2985 = load <16 x i16>, <16 x i16>* %2984, align 2, !tbaa !399
  %2986 = mul nsw i64 %2967, %108
  %2987 = add nsw i64 %2986, %93
  %2988 = getelementptr inbounds i16, i16* %blur_x, i64 %2987
  %2989 = getelementptr inbounds i16, i16* %2988, i64 -32
  %2990 = bitcast i16* %2989 to <16 x i16>*
  %2991 = load <16 x i16>, <16 x i16>* %2990, align 2, !tbaa !399
  %2992 = getelementptr inbounds i16, i16* %2988, i64 -16
  %2993 = bitcast i16* %2992 to <16 x i16>*
  %2994 = load <16 x i16>, <16 x i16>* %2993, align 2, !tbaa !399
  %2995 = zext i32 %.pre-phi3250 to i64
  %2996 = mul nsw i64 %2995, %108
  %2997 = add nsw i64 %2996, %93
  %2998 = getelementptr inbounds i16, i16* %blur_x, i64 %2997
  %2999 = getelementptr inbounds i16, i16* %2998, i64 -32
  %3000 = bitcast i16* %2999 to <16 x i16>*
  %3001 = load <16 x i16>, <16 x i16>* %3000, align 2, !tbaa !399
  %3002 = getelementptr inbounds i16, i16* %2998, i64 -16
  %3003 = bitcast i16* %3002 to <16 x i16>*
  %3004 = load <16 x i16>, <16 x i16>* %3003, align 2, !tbaa !399
  %3005 = add <16 x i16> %2991, %2982
  %3006 = add <16 x i16> %3005, %3001
  %3007 = add <16 x i16> %2994, %2985
  %3008 = add <16 x i16> %3007, %3004
  %3009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3006, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3008, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3011 = shufflevector <16 x i16> %3009, <16 x i16> %3010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3012 = lshr <32 x i16> %3011, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3013 = shufflevector <32 x i16> %3012, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3014 = sext i32 %a26 to i64
  %3015 = add nsw i64 %3014, 5
  %3016 = mul nsw i64 %3015, %109
  %3017 = add nsw i64 %111, %3016
  %3018 = getelementptr inbounds i16, i16* %65, i64 %3017
  %3019 = getelementptr inbounds i16, i16* %3018, i64 -32
  %3020 = bitcast i16* %3019 to <16 x i16>*
  store <16 x i16> %3013, <16 x i16>* %3020, align 2, !tbaa !401
  %3021 = shufflevector <32 x i16> %3012, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3022 = getelementptr inbounds i16, i16* %3018, i64 -16
  %3023 = bitcast i16* %3022 to <16 x i16>*
  store <16 x i16> %3021, <16 x i16>* %3023, align 2, !tbaa !401
  br label %after_bb163

"for blur_y.s0.x.x.rebased168":                   ; preds = %"for blur_y.s0.x.x.rebased168.preheader", %"consume blur_x175"
  %indvars.iv3048 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased168.preheader" ], [ %indvars.iv.next3049, %"consume blur_x175" ]
  %3024 = add nsw i64 %indvars.iv3048, %100
  %3025 = icmp slt i64 %3024, 1
  %3026 = trunc i64 %3024 to i32
  %3027 = shl nsw i32 %3026, 5
  %3028 = icmp sgt i32 %4, %3027
  %3029 = or i1 %3025, %3028
  br i1 %3029, label %"produce blur_x174", label %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge"

"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased168"
  %.pre3269 = shl nsw i64 %3024, 5
  br label %"consume blur_x175"

"end for blur_y.s0.x.x.rebased169":               ; preds = %"consume blur_x175", %after_bb163
  br i1 %101, label %"for blur_y.s0.x.x.rebased176.preheader", label %"end for blur_y.s0.x.x.rebased177", !prof !386

"for blur_y.s0.x.x.rebased176.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased169"
  %3030 = sext i32 %t1666 to i64
  %3031 = zext i32 %.pre-phi3254 to i64
  %3032 = mul nsw i64 %3031, %108
  %3033 = sub nsw i64 %3032, %95
  %3034 = zext i32 %.pre-phi3260 to i64
  %3035 = mul nsw i64 %3034, %108
  %3036 = sub nsw i64 %3035, %95
  %3037 = zext i32 %.pre-phi3250 to i64
  %3038 = mul nsw i64 %3037, %108
  %3039 = sub nsw i64 %3038, %95
  %3040 = sext i32 %a26 to i64
  %3041 = add nsw i64 %3040, 5
  %3042 = mul nsw i64 %3041, %109
  %3043 = add nsw i64 %3042, %112
  br label %"for blur_y.s0.x.x.rebased176"

"produce blur_x174":                              ; preds = %"for blur_y.s0.x.x.rebased168"
  %t752 = add nsw i32 %3027, %t1729
  %3044 = sext i32 %t752 to i64
  %3045 = getelementptr inbounds i16, i16* %read_input, i64 %3044
  %3046 = getelementptr inbounds i16, i16* %3045, i64 1
  %3047 = bitcast i16* %3046 to <16 x i16>*
  %3048 = load <16 x i16>, <16 x i16>* %3047, align 2, !tbaa !396
  %3049 = getelementptr inbounds i16, i16* %3045, i64 17
  %3050 = bitcast i16* %3049 to <16 x i16>*
  %3051 = load <16 x i16>, <16 x i16>* %3050, align 2, !tbaa !396
  %3052 = getelementptr inbounds i16, i16* %3045, i64 2
  %3053 = bitcast i16* %3052 to <16 x i16>*
  %3054 = load <16 x i16>, <16 x i16>* %3053, align 2, !tbaa !396
  %3055 = getelementptr inbounds i16, i16* %3045, i64 18
  %3056 = bitcast i16* %3055 to <16 x i16>*
  %3057 = load <16 x i16>, <16 x i16>* %3056, align 2, !tbaa !396
  %3058 = bitcast i16* %3045 to <16 x i16>*
  %3059 = load <16 x i16>, <16 x i16>* %3058, align 2, !tbaa !396
  %3060 = getelementptr inbounds i16, i16* %3045, i64 16
  %3061 = bitcast i16* %3060 to <16 x i16>*
  %3062 = load <16 x i16>, <16 x i16>* %3061, align 2, !tbaa !396
  %3063 = add <16 x i16> %3054, %3048
  %3064 = add <16 x i16> %3063, %3059
  %3065 = add <16 x i16> %3057, %3051
  %3066 = add <16 x i16> %3065, %3062
  %3067 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3064, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3066, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3069 = shufflevector <16 x i16> %3067, <16 x i16> %3068, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3070 = lshr <32 x i16> %3069, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3071 = shufflevector <32 x i16> %3070, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3072 = shl nsw i64 %3024, 5
  %3073 = add nsw i64 %3072, %2925
  %3074 = getelementptr inbounds i16, i16* %blur_x, i64 %3073
  %3075 = bitcast i16* %3074 to <16 x i16>*
  store <16 x i16> %3071, <16 x i16>* %3075, align 2, !tbaa !399
  %3076 = shufflevector <32 x i16> %3070, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3077 = getelementptr inbounds i16, i16* %3074, i64 16
  %3078 = bitcast i16* %3077 to <16 x i16>*
  store <16 x i16> %3076, <16 x i16>* %3078, align 2, !tbaa !399
  br label %"consume blur_x175"

"consume blur_x175":                              ; preds = %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge", %"produce blur_x174"
  %.pre-phi3270 = phi i64 [ %.pre3269, %"for blur_y.s0.x.x.rebased168.consume blur_x175_crit_edge" ], [ %3072, %"produce blur_x174" ]
  %3079 = add nsw i64 %2928, %.pre-phi3270
  %3080 = getelementptr inbounds i16, i16* %blur_x, i64 %3079
  %3081 = bitcast i16* %3080 to <16 x i16>*
  %3082 = load <16 x i16>, <16 x i16>* %3081, align 2, !tbaa !399
  %3083 = getelementptr inbounds i16, i16* %3080, i64 16
  %3084 = bitcast i16* %3083 to <16 x i16>*
  %3085 = load <16 x i16>, <16 x i16>* %3084, align 2, !tbaa !399
  %3086 = add nsw i64 %2931, %.pre-phi3270
  %3087 = getelementptr inbounds i16, i16* %blur_x, i64 %3086
  %3088 = bitcast i16* %3087 to <16 x i16>*
  %3089 = load <16 x i16>, <16 x i16>* %3088, align 2, !tbaa !399
  %3090 = getelementptr inbounds i16, i16* %3087, i64 16
  %3091 = bitcast i16* %3090 to <16 x i16>*
  %3092 = load <16 x i16>, <16 x i16>* %3091, align 2, !tbaa !399
  %3093 = add nsw i64 %2934, %.pre-phi3270
  %3094 = getelementptr inbounds i16, i16* %blur_x, i64 %3093
  %3095 = bitcast i16* %3094 to <16 x i16>*
  %3096 = load <16 x i16>, <16 x i16>* %3095, align 2, !tbaa !399
  %3097 = getelementptr inbounds i16, i16* %3094, i64 16
  %3098 = bitcast i16* %3097 to <16 x i16>*
  %3099 = load <16 x i16>, <16 x i16>* %3098, align 2, !tbaa !399
  %3100 = add <16 x i16> %3089, %3082
  %3101 = add <16 x i16> %3100, %3096
  %3102 = add <16 x i16> %3092, %3085
  %3103 = add <16 x i16> %3102, %3099
  %3104 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3101, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3105 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3103, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3106 = shufflevector <16 x i16> %3104, <16 x i16> %3105, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3107 = lshr <32 x i16> %3106, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3108 = shufflevector <32 x i16> %3107, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3109 = add nsw i64 %2938, %.pre-phi3270
  %3110 = getelementptr inbounds i16, i16* %65, i64 %3109
  %3111 = bitcast i16* %3110 to <16 x i16>*
  store <16 x i16> %3108, <16 x i16>* %3111, align 2, !tbaa !401
  %3112 = shufflevector <32 x i16> %3107, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3113 = getelementptr inbounds i16, i16* %3110, i64 16
  %3114 = bitcast i16* %3113 to <16 x i16>*
  store <16 x i16> %3112, <16 x i16>* %3114, align 2, !tbaa !401
  %indvars.iv.next3049 = add nuw nsw i64 %indvars.iv3048, 1
  %.not2572 = icmp eq i64 %indvars.iv.next3049, %180
  br i1 %.not2572, label %"end for blur_y.s0.x.x.rebased169", label %"for blur_y.s0.x.x.rebased168"

"for blur_y.s0.x.x.rebased176":                   ; preds = %"for blur_y.s0.x.x.rebased176.preheader", %"consume blur_x184"
  %blur_y.s0.x.x.rebased178 = phi i32 [ %3193, %"consume blur_x184" ], [ 0, %"for blur_y.s0.x.x.rebased176.preheader" ]
  %3115 = add nsw i32 %blur_y.s0.x.x.rebased178, %t1582
  %a126 = shl nsw i32 %3115, 5
  %3116 = icmp sgt i32 %a14, %a126
  %b132 = select i1 %3116, i32 %a126, i32 %a14
  %3117 = icmp slt i32 %3115, 1
  %3118 = icmp sgt i32 %4, %a126
  %3119 = or i1 %3117, %3118
  br i1 %3119, label %"produce blur_x182", label %"consume blur_x184"

"end for blur_y.s0.x.x.rebased177":               ; preds = %"consume blur_x184", %"end for blur_y.s0.x.x.rebased169"
  br i1 %34, label %"produce blur_x188", label %after_bb185

"produce blur_x182":                              ; preds = %"for blur_y.s0.x.x.rebased176"
  %3120 = icmp slt i32 %b132, %4
  %blur_x.s0.x.v1.base.s183 = select i1 %3120, i32 %b132, i32 %4
  %t757 = add nsw i32 %blur_x.s0.x.v1.base.s183, %t1729
  %3121 = sext i32 %t757 to i64
  %3122 = getelementptr inbounds i16, i16* %read_input, i64 %3121
  %3123 = getelementptr inbounds i16, i16* %3122, i64 1
  %3124 = bitcast i16* %3123 to <16 x i16>*
  %3125 = load <16 x i16>, <16 x i16>* %3124, align 2, !tbaa !396
  %3126 = getelementptr inbounds i16, i16* %3122, i64 17
  %3127 = bitcast i16* %3126 to <16 x i16>*
  %3128 = load <16 x i16>, <16 x i16>* %3127, align 2, !tbaa !396
  %3129 = getelementptr inbounds i16, i16* %3122, i64 2
  %3130 = bitcast i16* %3129 to <16 x i16>*
  %3131 = load <16 x i16>, <16 x i16>* %3130, align 2, !tbaa !396
  %3132 = getelementptr inbounds i16, i16* %3122, i64 18
  %3133 = bitcast i16* %3132 to <16 x i16>*
  %3134 = load <16 x i16>, <16 x i16>* %3133, align 2, !tbaa !396
  %3135 = bitcast i16* %3122 to <16 x i16>*
  %3136 = load <16 x i16>, <16 x i16>* %3135, align 2, !tbaa !396
  %3137 = getelementptr inbounds i16, i16* %3122, i64 16
  %3138 = bitcast i16* %3137 to <16 x i16>*
  %3139 = load <16 x i16>, <16 x i16>* %3138, align 2, !tbaa !396
  %3140 = add <16 x i16> %3131, %3125
  %3141 = add <16 x i16> %3140, %3136
  %3142 = add <16 x i16> %3134, %3128
  %3143 = add <16 x i16> %3142, %3139
  %3144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3141, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3143, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3146 = shufflevector <16 x i16> %3144, <16 x i16> %3145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3147 = lshr <32 x i16> %3146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3148 = shufflevector <32 x i16> %3147, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3149 = sext i32 %blur_x.s0.x.v1.base.s183 to i64
  %3150 = add nsw i64 %3149, %3030
  %3151 = getelementptr inbounds i16, i16* %blur_x, i64 %3150
  %3152 = bitcast i16* %3151 to <16 x i16>*
  store <16 x i16> %3148, <16 x i16>* %3152, align 2, !tbaa !399
  %3153 = shufflevector <32 x i16> %3147, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3154 = getelementptr inbounds i16, i16* %3151, i64 16
  %3155 = bitcast i16* %3154 to <16 x i16>*
  store <16 x i16> %3153, <16 x i16>* %3155, align 2, !tbaa !399
  br label %"consume blur_x184"

"consume blur_x184":                              ; preds = %"for blur_y.s0.x.x.rebased176", %"produce blur_x182"
  %3156 = sext i32 %b132 to i64
  %3157 = add nsw i64 %3033, %3156
  %3158 = getelementptr inbounds i16, i16* %blur_x, i64 %3157
  %3159 = bitcast i16* %3158 to <16 x i16>*
  %3160 = load <16 x i16>, <16 x i16>* %3159, align 2, !tbaa !399
  %3161 = getelementptr inbounds i16, i16* %3158, i64 16
  %3162 = bitcast i16* %3161 to <16 x i16>*
  %3163 = load <16 x i16>, <16 x i16>* %3162, align 2, !tbaa !399
  %3164 = add nsw i64 %3036, %3156
  %3165 = getelementptr inbounds i16, i16* %blur_x, i64 %3164
  %3166 = bitcast i16* %3165 to <16 x i16>*
  %3167 = load <16 x i16>, <16 x i16>* %3166, align 2, !tbaa !399
  %3168 = getelementptr inbounds i16, i16* %3165, i64 16
  %3169 = bitcast i16* %3168 to <16 x i16>*
  %3170 = load <16 x i16>, <16 x i16>* %3169, align 2, !tbaa !399
  %3171 = add nsw i64 %3039, %3156
  %3172 = getelementptr inbounds i16, i16* %blur_x, i64 %3171
  %3173 = bitcast i16* %3172 to <16 x i16>*
  %3174 = load <16 x i16>, <16 x i16>* %3173, align 2, !tbaa !399
  %3175 = getelementptr inbounds i16, i16* %3172, i64 16
  %3176 = bitcast i16* %3175 to <16 x i16>*
  %3177 = load <16 x i16>, <16 x i16>* %3176, align 2, !tbaa !399
  %3178 = add <16 x i16> %3167, %3160
  %3179 = add <16 x i16> %3178, %3174
  %3180 = add <16 x i16> %3170, %3163
  %3181 = add <16 x i16> %3180, %3177
  %3182 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3179, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3183 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3181, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3184 = shufflevector <16 x i16> %3182, <16 x i16> %3183, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3185 = lshr <32 x i16> %3184, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3186 = shufflevector <32 x i16> %3185, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3187 = add nsw i64 %3043, %3156
  %3188 = getelementptr inbounds i16, i16* %65, i64 %3187
  %3189 = bitcast i16* %3188 to <16 x i16>*
  store <16 x i16> %3186, <16 x i16>* %3189, align 2, !tbaa !401
  %3190 = shufflevector <32 x i16> %3185, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3191 = getelementptr inbounds i16, i16* %3188, i64 16
  %3192 = bitcast i16* %3191 to <16 x i16>*
  store <16 x i16> %3190, <16 x i16>* %3192, align 2, !tbaa !401
  %3193 = add nuw nsw i32 %blur_y.s0.x.x.rebased178, 1
  %.not2571 = icmp eq i32 %3193, %t1639
  br i1 %.not2571, label %"end for blur_y.s0.x.x.rebased177", label %"for blur_y.s0.x.x.rebased176"

after_bb185:                                      ; preds = %"end for blur_y.s0.x.x.rebased177", %"produce blur_x188"
  br i1 %99, label %"for blur_y.s0.x.x.rebased190.preheader", label %"end for blur_y.s0.x.x.rebased191", !prof !386

"for blur_y.s0.x.x.rebased190.preheader":         ; preds = %after_bb185
  %3194 = sext i32 %t1638 to i64
  %3195 = zext i32 %.pre-phi3260 to i64
  %3196 = mul nsw i64 %3195, %108
  %3197 = sub nsw i64 %3196, %95
  %3198 = zext i32 %.pre-phi to i64
  %3199 = mul nsw i64 %3198, %108
  %3200 = sub nsw i64 %3199, %95
  %3201 = zext i32 %.pre-phi3254 to i64
  %3202 = mul nsw i64 %3201, %108
  %3203 = sub nsw i64 %3202, %95
  %3204 = sext i32 %a26 to i64
  %3205 = add nsw i64 %3204, 6
  %3206 = mul nsw i64 %3205, %109
  %3207 = add nsw i64 %3206, %112
  br label %"for blur_y.s0.x.x.rebased190"

"produce blur_x188":                              ; preds = %"end for blur_y.s0.x.x.rebased177"
  %3208 = getelementptr inbounds i16, i16* %read_input, i64 %123
  %3209 = getelementptr inbounds i16, i16* %3208, i64 -31
  %3210 = bitcast i16* %3209 to <16 x i16>*
  %3211 = load <16 x i16>, <16 x i16>* %3210, align 2, !tbaa !396
  %3212 = getelementptr inbounds i16, i16* %3208, i64 -15
  %3213 = bitcast i16* %3212 to <16 x i16>*
  %3214 = load <16 x i16>, <16 x i16>* %3213, align 2, !tbaa !396
  %3215 = getelementptr inbounds i16, i16* %3208, i64 -30
  %3216 = bitcast i16* %3215 to <16 x i16>*
  %3217 = load <16 x i16>, <16 x i16>* %3216, align 2, !tbaa !396
  %3218 = getelementptr inbounds i16, i16* %3208, i64 -14
  %3219 = bitcast i16* %3218 to <16 x i16>*
  %3220 = load <16 x i16>, <16 x i16>* %3219, align 2, !tbaa !396
  %3221 = getelementptr inbounds i16, i16* %3208, i64 -32
  %3222 = bitcast i16* %3221 to <16 x i16>*
  %3223 = load <16 x i16>, <16 x i16>* %3222, align 2, !tbaa !396
  %3224 = getelementptr inbounds i16, i16* %3208, i64 -16
  %3225 = bitcast i16* %3224 to <16 x i16>*
  %3226 = load <16 x i16>, <16 x i16>* %3225, align 2, !tbaa !396
  %3227 = add <16 x i16> %3217, %3211
  %3228 = add <16 x i16> %3227, %3223
  %3229 = add <16 x i16> %3220, %3214
  %3230 = add <16 x i16> %3229, %3226
  %3231 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3228, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3232 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3230, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3233 = shufflevector <16 x i16> %3231, <16 x i16> %3232, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3234 = lshr <32 x i16> %3233, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3235 = shufflevector <32 x i16> %3234, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3236 = zext i32 %.pre-phi to i64
  %3237 = mul nsw i64 %96, %3236
  %3238 = add nsw i64 %98, %3237
  %3239 = getelementptr inbounds i16, i16* %blur_x, i64 %3238
  %3240 = getelementptr inbounds i16, i16* %3239, i64 -32
  %3241 = bitcast i16* %3240 to <16 x i16>*
  store <16 x i16> %3235, <16 x i16>* %3241, align 2, !tbaa !399
  %3242 = shufflevector <32 x i16> %3234, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3243 = getelementptr inbounds i16, i16* %3239, i64 -16
  %3244 = bitcast i16* %3243 to <16 x i16>*
  store <16 x i16> %3242, <16 x i16>* %3244, align 2, !tbaa !399
  %3245 = zext i32 %.pre-phi3260 to i64
  %3246 = mul nsw i64 %3245, %108
  %3247 = add nsw i64 %3246, %93
  %3248 = getelementptr inbounds i16, i16* %blur_x, i64 %3247
  %3249 = getelementptr inbounds i16, i16* %3248, i64 -32
  %3250 = bitcast i16* %3249 to <16 x i16>*
  %3251 = load <16 x i16>, <16 x i16>* %3250, align 2, !tbaa !399
  %3252 = getelementptr inbounds i16, i16* %3248, i64 -16
  %3253 = bitcast i16* %3252 to <16 x i16>*
  %3254 = load <16 x i16>, <16 x i16>* %3253, align 2, !tbaa !399
  %3255 = mul nsw i64 %3236, %108
  %3256 = add nsw i64 %3255, %93
  %3257 = getelementptr inbounds i16, i16* %blur_x, i64 %3256
  %3258 = getelementptr inbounds i16, i16* %3257, i64 -32
  %3259 = bitcast i16* %3258 to <16 x i16>*
  %3260 = load <16 x i16>, <16 x i16>* %3259, align 2, !tbaa !399
  %3261 = getelementptr inbounds i16, i16* %3257, i64 -16
  %3262 = bitcast i16* %3261 to <16 x i16>*
  %3263 = load <16 x i16>, <16 x i16>* %3262, align 2, !tbaa !399
  %3264 = zext i32 %.pre-phi3254 to i64
  %3265 = mul nsw i64 %3264, %108
  %3266 = add nsw i64 %3265, %93
  %3267 = getelementptr inbounds i16, i16* %blur_x, i64 %3266
  %3268 = getelementptr inbounds i16, i16* %3267, i64 -32
  %3269 = bitcast i16* %3268 to <16 x i16>*
  %3270 = load <16 x i16>, <16 x i16>* %3269, align 2, !tbaa !399
  %3271 = getelementptr inbounds i16, i16* %3267, i64 -16
  %3272 = bitcast i16* %3271 to <16 x i16>*
  %3273 = load <16 x i16>, <16 x i16>* %3272, align 2, !tbaa !399
  %3274 = add <16 x i16> %3260, %3251
  %3275 = add <16 x i16> %3274, %3270
  %3276 = add <16 x i16> %3263, %3254
  %3277 = add <16 x i16> %3276, %3273
  %3278 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3275, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3279 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3277, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3280 = shufflevector <16 x i16> %3278, <16 x i16> %3279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3281 = lshr <32 x i16> %3280, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3282 = shufflevector <32 x i16> %3281, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3283 = sext i32 %a26 to i64
  %3284 = add nsw i64 %3283, 6
  %3285 = mul nsw i64 %3284, %109
  %3286 = add nsw i64 %111, %3285
  %3287 = getelementptr inbounds i16, i16* %65, i64 %3286
  %3288 = getelementptr inbounds i16, i16* %3287, i64 -32
  %3289 = bitcast i16* %3288 to <16 x i16>*
  store <16 x i16> %3282, <16 x i16>* %3289, align 2, !tbaa !401
  %3290 = shufflevector <32 x i16> %3281, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3291 = getelementptr inbounds i16, i16* %3287, i64 -16
  %3292 = bitcast i16* %3291 to <16 x i16>*
  store <16 x i16> %3290, <16 x i16>* %3292, align 2, !tbaa !401
  br label %after_bb185

"for blur_y.s0.x.x.rebased190":                   ; preds = %"for blur_y.s0.x.x.rebased190.preheader", %"consume blur_x197"
  %indvars.iv3051 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased190.preheader" ], [ %indvars.iv.next3052, %"consume blur_x197" ]
  %3293 = add nsw i64 %indvars.iv3051, %100
  %3294 = icmp slt i64 %3293, 1
  %3295 = trunc i64 %3293 to i32
  %3296 = shl nsw i32 %3295, 5
  %3297 = icmp sgt i32 %4, %3296
  %3298 = or i1 %3294, %3297
  br i1 %3298, label %"produce blur_x196", label %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge"

"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased190"
  %.pre3271 = shl nsw i64 %3293, 5
  br label %"consume blur_x197"

"end for blur_y.s0.x.x.rebased191":               ; preds = %"consume blur_x197", %after_bb185
  br i1 %101, label %"for blur_y.s0.x.x.rebased198.preheader", label %"end for blur_y.s0.x.x.rebased199", !prof !386

"for blur_y.s0.x.x.rebased198.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased191"
  %3299 = sext i32 %t1638 to i64
  %3300 = zext i32 %.pre-phi3260 to i64
  %3301 = mul nsw i64 %3300, %108
  %3302 = sub nsw i64 %3301, %95
  %3303 = zext i32 %.pre-phi to i64
  %3304 = mul nsw i64 %3303, %108
  %3305 = sub nsw i64 %3304, %95
  %3306 = zext i32 %.pre-phi3254 to i64
  %3307 = mul nsw i64 %3306, %108
  %3308 = sub nsw i64 %3307, %95
  %3309 = sext i32 %a26 to i64
  %3310 = add nsw i64 %3309, 6
  %3311 = mul nsw i64 %3310, %109
  %3312 = add nsw i64 %3311, %112
  br label %"for blur_y.s0.x.x.rebased198"

"produce blur_x196":                              ; preds = %"for blur_y.s0.x.x.rebased190"
  %t768 = add nsw i32 %3296, %t1745
  %3313 = sext i32 %t768 to i64
  %3314 = getelementptr inbounds i16, i16* %read_input, i64 %3313
  %3315 = getelementptr inbounds i16, i16* %3314, i64 1
  %3316 = bitcast i16* %3315 to <16 x i16>*
  %3317 = load <16 x i16>, <16 x i16>* %3316, align 2, !tbaa !396
  %3318 = getelementptr inbounds i16, i16* %3314, i64 17
  %3319 = bitcast i16* %3318 to <16 x i16>*
  %3320 = load <16 x i16>, <16 x i16>* %3319, align 2, !tbaa !396
  %3321 = getelementptr inbounds i16, i16* %3314, i64 2
  %3322 = bitcast i16* %3321 to <16 x i16>*
  %3323 = load <16 x i16>, <16 x i16>* %3322, align 2, !tbaa !396
  %3324 = getelementptr inbounds i16, i16* %3314, i64 18
  %3325 = bitcast i16* %3324 to <16 x i16>*
  %3326 = load <16 x i16>, <16 x i16>* %3325, align 2, !tbaa !396
  %3327 = bitcast i16* %3314 to <16 x i16>*
  %3328 = load <16 x i16>, <16 x i16>* %3327, align 2, !tbaa !396
  %3329 = getelementptr inbounds i16, i16* %3314, i64 16
  %3330 = bitcast i16* %3329 to <16 x i16>*
  %3331 = load <16 x i16>, <16 x i16>* %3330, align 2, !tbaa !396
  %3332 = add <16 x i16> %3323, %3317
  %3333 = add <16 x i16> %3332, %3328
  %3334 = add <16 x i16> %3326, %3320
  %3335 = add <16 x i16> %3334, %3331
  %3336 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3333, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3337 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3335, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3338 = shufflevector <16 x i16> %3336, <16 x i16> %3337, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3339 = lshr <32 x i16> %3338, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3340 = shufflevector <32 x i16> %3339, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3341 = shl nsw i64 %3293, 5
  %3342 = add nsw i64 %3341, %3194
  %3343 = getelementptr inbounds i16, i16* %blur_x, i64 %3342
  %3344 = bitcast i16* %3343 to <16 x i16>*
  store <16 x i16> %3340, <16 x i16>* %3344, align 2, !tbaa !399
  %3345 = shufflevector <32 x i16> %3339, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3346 = getelementptr inbounds i16, i16* %3343, i64 16
  %3347 = bitcast i16* %3346 to <16 x i16>*
  store <16 x i16> %3345, <16 x i16>* %3347, align 2, !tbaa !399
  br label %"consume blur_x197"

"consume blur_x197":                              ; preds = %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge", %"produce blur_x196"
  %.pre-phi3272 = phi i64 [ %.pre3271, %"for blur_y.s0.x.x.rebased190.consume blur_x197_crit_edge" ], [ %3341, %"produce blur_x196" ]
  %3348 = add nsw i64 %3197, %.pre-phi3272
  %3349 = getelementptr inbounds i16, i16* %blur_x, i64 %3348
  %3350 = bitcast i16* %3349 to <16 x i16>*
  %3351 = load <16 x i16>, <16 x i16>* %3350, align 2, !tbaa !399
  %3352 = getelementptr inbounds i16, i16* %3349, i64 16
  %3353 = bitcast i16* %3352 to <16 x i16>*
  %3354 = load <16 x i16>, <16 x i16>* %3353, align 2, !tbaa !399
  %3355 = add nsw i64 %3200, %.pre-phi3272
  %3356 = getelementptr inbounds i16, i16* %blur_x, i64 %3355
  %3357 = bitcast i16* %3356 to <16 x i16>*
  %3358 = load <16 x i16>, <16 x i16>* %3357, align 2, !tbaa !399
  %3359 = getelementptr inbounds i16, i16* %3356, i64 16
  %3360 = bitcast i16* %3359 to <16 x i16>*
  %3361 = load <16 x i16>, <16 x i16>* %3360, align 2, !tbaa !399
  %3362 = add nsw i64 %3203, %.pre-phi3272
  %3363 = getelementptr inbounds i16, i16* %blur_x, i64 %3362
  %3364 = bitcast i16* %3363 to <16 x i16>*
  %3365 = load <16 x i16>, <16 x i16>* %3364, align 2, !tbaa !399
  %3366 = getelementptr inbounds i16, i16* %3363, i64 16
  %3367 = bitcast i16* %3366 to <16 x i16>*
  %3368 = load <16 x i16>, <16 x i16>* %3367, align 2, !tbaa !399
  %3369 = add <16 x i16> %3358, %3351
  %3370 = add <16 x i16> %3369, %3365
  %3371 = add <16 x i16> %3361, %3354
  %3372 = add <16 x i16> %3371, %3368
  %3373 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3370, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3374 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3372, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3375 = shufflevector <16 x i16> %3373, <16 x i16> %3374, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3376 = lshr <32 x i16> %3375, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3377 = shufflevector <32 x i16> %3376, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3378 = add nsw i64 %3207, %.pre-phi3272
  %3379 = getelementptr inbounds i16, i16* %65, i64 %3378
  %3380 = bitcast i16* %3379 to <16 x i16>*
  store <16 x i16> %3377, <16 x i16>* %3380, align 2, !tbaa !401
  %3381 = shufflevector <32 x i16> %3376, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3382 = getelementptr inbounds i16, i16* %3379, i64 16
  %3383 = bitcast i16* %3382 to <16 x i16>*
  store <16 x i16> %3381, <16 x i16>* %3383, align 2, !tbaa !401
  %indvars.iv.next3052 = add nuw nsw i64 %indvars.iv3051, 1
  %.not2570 = icmp eq i64 %indvars.iv.next3052, %180
  br i1 %.not2570, label %"end for blur_y.s0.x.x.rebased191", label %"for blur_y.s0.x.x.rebased190"

"for blur_y.s0.x.x.rebased198":                   ; preds = %"for blur_y.s0.x.x.rebased198.preheader", %"consume blur_x206"
  %blur_y.s0.x.x.rebased200 = phi i32 [ %3462, %"consume blur_x206" ], [ 0, %"for blur_y.s0.x.x.rebased198.preheader" ]
  %3384 = add nsw i32 %blur_y.s0.x.x.rebased200, %t1582
  %a133 = shl nsw i32 %3384, 5
  %3385 = icmp sgt i32 %a14, %a133
  %b139 = select i1 %3385, i32 %a133, i32 %a14
  %3386 = icmp slt i32 %3384, 1
  %3387 = icmp sgt i32 %4, %a133
  %3388 = or i1 %3386, %3387
  br i1 %3388, label %"produce blur_x204", label %"consume blur_x206"

"end for blur_y.s0.x.x.rebased199":               ; preds = %"consume blur_x206", %"end for blur_y.s0.x.x.rebased191"
  br i1 %34, label %"produce blur_x210", label %after_bb207

"produce blur_x204":                              ; preds = %"for blur_y.s0.x.x.rebased198"
  %3389 = icmp slt i32 %b139, %4
  %blur_x.s0.x.v1.base.s205 = select i1 %3389, i32 %b139, i32 %4
  %t773 = add nsw i32 %blur_x.s0.x.v1.base.s205, %t1745
  %3390 = sext i32 %t773 to i64
  %3391 = getelementptr inbounds i16, i16* %read_input, i64 %3390
  %3392 = getelementptr inbounds i16, i16* %3391, i64 1
  %3393 = bitcast i16* %3392 to <16 x i16>*
  %3394 = load <16 x i16>, <16 x i16>* %3393, align 2, !tbaa !396
  %3395 = getelementptr inbounds i16, i16* %3391, i64 17
  %3396 = bitcast i16* %3395 to <16 x i16>*
  %3397 = load <16 x i16>, <16 x i16>* %3396, align 2, !tbaa !396
  %3398 = getelementptr inbounds i16, i16* %3391, i64 2
  %3399 = bitcast i16* %3398 to <16 x i16>*
  %3400 = load <16 x i16>, <16 x i16>* %3399, align 2, !tbaa !396
  %3401 = getelementptr inbounds i16, i16* %3391, i64 18
  %3402 = bitcast i16* %3401 to <16 x i16>*
  %3403 = load <16 x i16>, <16 x i16>* %3402, align 2, !tbaa !396
  %3404 = bitcast i16* %3391 to <16 x i16>*
  %3405 = load <16 x i16>, <16 x i16>* %3404, align 2, !tbaa !396
  %3406 = getelementptr inbounds i16, i16* %3391, i64 16
  %3407 = bitcast i16* %3406 to <16 x i16>*
  %3408 = load <16 x i16>, <16 x i16>* %3407, align 2, !tbaa !396
  %3409 = add <16 x i16> %3400, %3394
  %3410 = add <16 x i16> %3409, %3405
  %3411 = add <16 x i16> %3403, %3397
  %3412 = add <16 x i16> %3411, %3408
  %3413 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3410, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3412, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3415 = shufflevector <16 x i16> %3413, <16 x i16> %3414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3416 = lshr <32 x i16> %3415, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3417 = shufflevector <32 x i16> %3416, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3418 = sext i32 %blur_x.s0.x.v1.base.s205 to i64
  %3419 = add nsw i64 %3418, %3299
  %3420 = getelementptr inbounds i16, i16* %blur_x, i64 %3419
  %3421 = bitcast i16* %3420 to <16 x i16>*
  store <16 x i16> %3417, <16 x i16>* %3421, align 2, !tbaa !399
  %3422 = shufflevector <32 x i16> %3416, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3423 = getelementptr inbounds i16, i16* %3420, i64 16
  %3424 = bitcast i16* %3423 to <16 x i16>*
  store <16 x i16> %3422, <16 x i16>* %3424, align 2, !tbaa !399
  br label %"consume blur_x206"

"consume blur_x206":                              ; preds = %"for blur_y.s0.x.x.rebased198", %"produce blur_x204"
  %3425 = sext i32 %b139 to i64
  %3426 = add nsw i64 %3302, %3425
  %3427 = getelementptr inbounds i16, i16* %blur_x, i64 %3426
  %3428 = bitcast i16* %3427 to <16 x i16>*
  %3429 = load <16 x i16>, <16 x i16>* %3428, align 2, !tbaa !399
  %3430 = getelementptr inbounds i16, i16* %3427, i64 16
  %3431 = bitcast i16* %3430 to <16 x i16>*
  %3432 = load <16 x i16>, <16 x i16>* %3431, align 2, !tbaa !399
  %3433 = add nsw i64 %3305, %3425
  %3434 = getelementptr inbounds i16, i16* %blur_x, i64 %3433
  %3435 = bitcast i16* %3434 to <16 x i16>*
  %3436 = load <16 x i16>, <16 x i16>* %3435, align 2, !tbaa !399
  %3437 = getelementptr inbounds i16, i16* %3434, i64 16
  %3438 = bitcast i16* %3437 to <16 x i16>*
  %3439 = load <16 x i16>, <16 x i16>* %3438, align 2, !tbaa !399
  %3440 = add nsw i64 %3308, %3425
  %3441 = getelementptr inbounds i16, i16* %blur_x, i64 %3440
  %3442 = bitcast i16* %3441 to <16 x i16>*
  %3443 = load <16 x i16>, <16 x i16>* %3442, align 2, !tbaa !399
  %3444 = getelementptr inbounds i16, i16* %3441, i64 16
  %3445 = bitcast i16* %3444 to <16 x i16>*
  %3446 = load <16 x i16>, <16 x i16>* %3445, align 2, !tbaa !399
  %3447 = add <16 x i16> %3436, %3429
  %3448 = add <16 x i16> %3447, %3443
  %3449 = add <16 x i16> %3439, %3432
  %3450 = add <16 x i16> %3449, %3446
  %3451 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3448, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3452 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3450, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3453 = shufflevector <16 x i16> %3451, <16 x i16> %3452, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3454 = lshr <32 x i16> %3453, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3455 = shufflevector <32 x i16> %3454, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3456 = add nsw i64 %3312, %3425
  %3457 = getelementptr inbounds i16, i16* %65, i64 %3456
  %3458 = bitcast i16* %3457 to <16 x i16>*
  store <16 x i16> %3455, <16 x i16>* %3458, align 2, !tbaa !401
  %3459 = shufflevector <32 x i16> %3454, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3460 = getelementptr inbounds i16, i16* %3457, i64 16
  %3461 = bitcast i16* %3460 to <16 x i16>*
  store <16 x i16> %3459, <16 x i16>* %3461, align 2, !tbaa !401
  %3462 = add nuw nsw i32 %blur_y.s0.x.x.rebased200, 1
  %.not2569 = icmp eq i32 %3462, %t1639
  br i1 %.not2569, label %"end for blur_y.s0.x.x.rebased199", label %"for blur_y.s0.x.x.rebased198"

after_bb207:                                      ; preds = %"end for blur_y.s0.x.x.rebased199", %"produce blur_x210"
  br i1 %99, label %"for blur_y.s0.x.x.rebased212.preheader", label %"end for blur_y.s0.x.x.rebased213", !prof !386

"for blur_y.s0.x.x.rebased212.preheader":         ; preds = %after_bb207
  %3463 = sext i32 %t1644 to i64
  %3464 = zext i32 %.pre-phi to i64
  %3465 = mul nsw i64 %3464, %108
  %3466 = sub nsw i64 %3465, %95
  %3467 = zext i32 %.pre-phi3250 to i64
  %3468 = mul nsw i64 %3467, %108
  %3469 = sub nsw i64 %3468, %95
  %3470 = zext i32 %.pre-phi3260 to i64
  %3471 = mul nsw i64 %3470, %108
  %3472 = sub nsw i64 %3471, %95
  %3473 = sext i32 %a26 to i64
  %3474 = add nsw i64 %3473, 7
  %3475 = mul nsw i64 %3474, %109
  %3476 = add nsw i64 %3475, %112
  br label %"for blur_y.s0.x.x.rebased212"

"produce blur_x210":                              ; preds = %"end for blur_y.s0.x.x.rebased199"
  %3477 = getelementptr inbounds i16, i16* %read_input, i64 %125
  %3478 = getelementptr inbounds i16, i16* %3477, i64 -31
  %3479 = bitcast i16* %3478 to <16 x i16>*
  %3480 = load <16 x i16>, <16 x i16>* %3479, align 2, !tbaa !396
  %3481 = getelementptr inbounds i16, i16* %3477, i64 -15
  %3482 = bitcast i16* %3481 to <16 x i16>*
  %3483 = load <16 x i16>, <16 x i16>* %3482, align 2, !tbaa !396
  %3484 = getelementptr inbounds i16, i16* %3477, i64 -30
  %3485 = bitcast i16* %3484 to <16 x i16>*
  %3486 = load <16 x i16>, <16 x i16>* %3485, align 2, !tbaa !396
  %3487 = getelementptr inbounds i16, i16* %3477, i64 -14
  %3488 = bitcast i16* %3487 to <16 x i16>*
  %3489 = load <16 x i16>, <16 x i16>* %3488, align 2, !tbaa !396
  %3490 = getelementptr inbounds i16, i16* %3477, i64 -32
  %3491 = bitcast i16* %3490 to <16 x i16>*
  %3492 = load <16 x i16>, <16 x i16>* %3491, align 2, !tbaa !396
  %3493 = getelementptr inbounds i16, i16* %3477, i64 -16
  %3494 = bitcast i16* %3493 to <16 x i16>*
  %3495 = load <16 x i16>, <16 x i16>* %3494, align 2, !tbaa !396
  %3496 = add <16 x i16> %3486, %3480
  %3497 = add <16 x i16> %3496, %3492
  %3498 = add <16 x i16> %3489, %3483
  %3499 = add <16 x i16> %3498, %3495
  %3500 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3497, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3501 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3499, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3502 = shufflevector <16 x i16> %3500, <16 x i16> %3501, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3503 = lshr <32 x i16> %3502, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3504 = shufflevector <32 x i16> %3503, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3505 = zext i32 %.pre-phi3250 to i64
  %3506 = mul nsw i64 %96, %3505
  %3507 = add nsw i64 %98, %3506
  %3508 = getelementptr inbounds i16, i16* %blur_x, i64 %3507
  %3509 = getelementptr inbounds i16, i16* %3508, i64 -32
  %3510 = bitcast i16* %3509 to <16 x i16>*
  store <16 x i16> %3504, <16 x i16>* %3510, align 2, !tbaa !399
  %3511 = shufflevector <32 x i16> %3503, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3512 = getelementptr inbounds i16, i16* %3508, i64 -16
  %3513 = bitcast i16* %3512 to <16 x i16>*
  store <16 x i16> %3511, <16 x i16>* %3513, align 2, !tbaa !399
  %3514 = zext i32 %.pre-phi to i64
  %3515 = mul nsw i64 %3514, %108
  %3516 = add nsw i64 %3515, %93
  %3517 = getelementptr inbounds i16, i16* %blur_x, i64 %3516
  %3518 = getelementptr inbounds i16, i16* %3517, i64 -32
  %3519 = bitcast i16* %3518 to <16 x i16>*
  %3520 = load <16 x i16>, <16 x i16>* %3519, align 2, !tbaa !399
  %3521 = getelementptr inbounds i16, i16* %3517, i64 -16
  %3522 = bitcast i16* %3521 to <16 x i16>*
  %3523 = load <16 x i16>, <16 x i16>* %3522, align 2, !tbaa !399
  %3524 = mul nsw i64 %3505, %108
  %3525 = add nsw i64 %3524, %93
  %3526 = getelementptr inbounds i16, i16* %blur_x, i64 %3525
  %3527 = getelementptr inbounds i16, i16* %3526, i64 -32
  %3528 = bitcast i16* %3527 to <16 x i16>*
  %3529 = load <16 x i16>, <16 x i16>* %3528, align 2, !tbaa !399
  %3530 = getelementptr inbounds i16, i16* %3526, i64 -16
  %3531 = bitcast i16* %3530 to <16 x i16>*
  %3532 = load <16 x i16>, <16 x i16>* %3531, align 2, !tbaa !399
  %3533 = zext i32 %.pre-phi3260 to i64
  %3534 = mul nsw i64 %3533, %108
  %3535 = add nsw i64 %3534, %93
  %3536 = getelementptr inbounds i16, i16* %blur_x, i64 %3535
  %3537 = getelementptr inbounds i16, i16* %3536, i64 -32
  %3538 = bitcast i16* %3537 to <16 x i16>*
  %3539 = load <16 x i16>, <16 x i16>* %3538, align 2, !tbaa !399
  %3540 = getelementptr inbounds i16, i16* %3536, i64 -16
  %3541 = bitcast i16* %3540 to <16 x i16>*
  %3542 = load <16 x i16>, <16 x i16>* %3541, align 2, !tbaa !399
  %3543 = add <16 x i16> %3529, %3520
  %3544 = add <16 x i16> %3543, %3539
  %3545 = add <16 x i16> %3532, %3523
  %3546 = add <16 x i16> %3545, %3542
  %3547 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3544, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3548 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3546, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3549 = shufflevector <16 x i16> %3547, <16 x i16> %3548, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3550 = lshr <32 x i16> %3549, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3551 = shufflevector <32 x i16> %3550, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3552 = sext i32 %a26 to i64
  %3553 = add nsw i64 %3552, 7
  %3554 = mul nsw i64 %3553, %109
  %3555 = add nsw i64 %111, %3554
  %3556 = getelementptr inbounds i16, i16* %65, i64 %3555
  %3557 = getelementptr inbounds i16, i16* %3556, i64 -32
  %3558 = bitcast i16* %3557 to <16 x i16>*
  store <16 x i16> %3551, <16 x i16>* %3558, align 2, !tbaa !401
  %3559 = shufflevector <32 x i16> %3550, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3560 = getelementptr inbounds i16, i16* %3556, i64 -16
  %3561 = bitcast i16* %3560 to <16 x i16>*
  store <16 x i16> %3559, <16 x i16>* %3561, align 2, !tbaa !401
  br label %after_bb207

"for blur_y.s0.x.x.rebased212":                   ; preds = %"for blur_y.s0.x.x.rebased212.preheader", %"consume blur_x219"
  %indvars.iv3054 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased212.preheader" ], [ %indvars.iv.next3055, %"consume blur_x219" ]
  %3562 = add nsw i64 %indvars.iv3054, %100
  %3563 = icmp slt i64 %3562, 1
  %3564 = trunc i64 %3562 to i32
  %3565 = shl nsw i32 %3564, 5
  %3566 = icmp sgt i32 %4, %3565
  %3567 = or i1 %3563, %3566
  br i1 %3567, label %"produce blur_x218", label %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge"

"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased212"
  %.pre3273 = shl nsw i64 %3562, 5
  br label %"consume blur_x219"

"end for blur_y.s0.x.x.rebased213":               ; preds = %"consume blur_x219", %after_bb207
  br i1 %101, label %"for blur_y.s0.x.x.rebased220.preheader", label %"end for blur_y.s0.x.x.rebased221", !prof !386

"for blur_y.s0.x.x.rebased220.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased213"
  %3568 = sext i32 %t1644 to i64
  %3569 = zext i32 %.pre-phi to i64
  %3570 = mul nsw i64 %3569, %108
  %3571 = sub nsw i64 %3570, %95
  %3572 = zext i32 %.pre-phi3250 to i64
  %3573 = mul nsw i64 %3572, %108
  %3574 = sub nsw i64 %3573, %95
  %3575 = zext i32 %.pre-phi3260 to i64
  %3576 = mul nsw i64 %3575, %108
  %3577 = sub nsw i64 %3576, %95
  %3578 = sext i32 %a26 to i64
  %3579 = add nsw i64 %3578, 7
  %3580 = mul nsw i64 %3579, %109
  %3581 = add nsw i64 %3580, %112
  br label %"for blur_y.s0.x.x.rebased220"

"produce blur_x218":                              ; preds = %"for blur_y.s0.x.x.rebased212"
  %t784 = add nsw i32 %3565, %t1761
  %3582 = sext i32 %t784 to i64
  %3583 = getelementptr inbounds i16, i16* %read_input, i64 %3582
  %3584 = getelementptr inbounds i16, i16* %3583, i64 1
  %3585 = bitcast i16* %3584 to <16 x i16>*
  %3586 = load <16 x i16>, <16 x i16>* %3585, align 2, !tbaa !396
  %3587 = getelementptr inbounds i16, i16* %3583, i64 17
  %3588 = bitcast i16* %3587 to <16 x i16>*
  %3589 = load <16 x i16>, <16 x i16>* %3588, align 2, !tbaa !396
  %3590 = getelementptr inbounds i16, i16* %3583, i64 2
  %3591 = bitcast i16* %3590 to <16 x i16>*
  %3592 = load <16 x i16>, <16 x i16>* %3591, align 2, !tbaa !396
  %3593 = getelementptr inbounds i16, i16* %3583, i64 18
  %3594 = bitcast i16* %3593 to <16 x i16>*
  %3595 = load <16 x i16>, <16 x i16>* %3594, align 2, !tbaa !396
  %3596 = bitcast i16* %3583 to <16 x i16>*
  %3597 = load <16 x i16>, <16 x i16>* %3596, align 2, !tbaa !396
  %3598 = getelementptr inbounds i16, i16* %3583, i64 16
  %3599 = bitcast i16* %3598 to <16 x i16>*
  %3600 = load <16 x i16>, <16 x i16>* %3599, align 2, !tbaa !396
  %3601 = add <16 x i16> %3592, %3586
  %3602 = add <16 x i16> %3601, %3597
  %3603 = add <16 x i16> %3595, %3589
  %3604 = add <16 x i16> %3603, %3600
  %3605 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3602, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3606 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3604, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3607 = shufflevector <16 x i16> %3605, <16 x i16> %3606, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3608 = lshr <32 x i16> %3607, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3609 = shufflevector <32 x i16> %3608, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3610 = shl nsw i64 %3562, 5
  %3611 = add nsw i64 %3610, %3463
  %3612 = getelementptr inbounds i16, i16* %blur_x, i64 %3611
  %3613 = bitcast i16* %3612 to <16 x i16>*
  store <16 x i16> %3609, <16 x i16>* %3613, align 2, !tbaa !399
  %3614 = shufflevector <32 x i16> %3608, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3615 = getelementptr inbounds i16, i16* %3612, i64 16
  %3616 = bitcast i16* %3615 to <16 x i16>*
  store <16 x i16> %3614, <16 x i16>* %3616, align 2, !tbaa !399
  br label %"consume blur_x219"

"consume blur_x219":                              ; preds = %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge", %"produce blur_x218"
  %.pre-phi3274 = phi i64 [ %.pre3273, %"for blur_y.s0.x.x.rebased212.consume blur_x219_crit_edge" ], [ %3610, %"produce blur_x218" ]
  %3617 = add nsw i64 %3466, %.pre-phi3274
  %3618 = getelementptr inbounds i16, i16* %blur_x, i64 %3617
  %3619 = bitcast i16* %3618 to <16 x i16>*
  %3620 = load <16 x i16>, <16 x i16>* %3619, align 2, !tbaa !399
  %3621 = getelementptr inbounds i16, i16* %3618, i64 16
  %3622 = bitcast i16* %3621 to <16 x i16>*
  %3623 = load <16 x i16>, <16 x i16>* %3622, align 2, !tbaa !399
  %3624 = add nsw i64 %3469, %.pre-phi3274
  %3625 = getelementptr inbounds i16, i16* %blur_x, i64 %3624
  %3626 = bitcast i16* %3625 to <16 x i16>*
  %3627 = load <16 x i16>, <16 x i16>* %3626, align 2, !tbaa !399
  %3628 = getelementptr inbounds i16, i16* %3625, i64 16
  %3629 = bitcast i16* %3628 to <16 x i16>*
  %3630 = load <16 x i16>, <16 x i16>* %3629, align 2, !tbaa !399
  %3631 = add nsw i64 %3472, %.pre-phi3274
  %3632 = getelementptr inbounds i16, i16* %blur_x, i64 %3631
  %3633 = bitcast i16* %3632 to <16 x i16>*
  %3634 = load <16 x i16>, <16 x i16>* %3633, align 2, !tbaa !399
  %3635 = getelementptr inbounds i16, i16* %3632, i64 16
  %3636 = bitcast i16* %3635 to <16 x i16>*
  %3637 = load <16 x i16>, <16 x i16>* %3636, align 2, !tbaa !399
  %3638 = add <16 x i16> %3627, %3620
  %3639 = add <16 x i16> %3638, %3634
  %3640 = add <16 x i16> %3630, %3623
  %3641 = add <16 x i16> %3640, %3637
  %3642 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3639, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3643 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3641, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3644 = shufflevector <16 x i16> %3642, <16 x i16> %3643, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3645 = lshr <32 x i16> %3644, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3646 = shufflevector <32 x i16> %3645, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3647 = add nsw i64 %3476, %.pre-phi3274
  %3648 = getelementptr inbounds i16, i16* %65, i64 %3647
  %3649 = bitcast i16* %3648 to <16 x i16>*
  store <16 x i16> %3646, <16 x i16>* %3649, align 2, !tbaa !401
  %3650 = shufflevector <32 x i16> %3645, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3651 = getelementptr inbounds i16, i16* %3648, i64 16
  %3652 = bitcast i16* %3651 to <16 x i16>*
  store <16 x i16> %3650, <16 x i16>* %3652, align 2, !tbaa !401
  %indvars.iv.next3055 = add nuw nsw i64 %indvars.iv3054, 1
  %.not2568 = icmp eq i64 %indvars.iv.next3055, %180
  br i1 %.not2568, label %"end for blur_y.s0.x.x.rebased213", label %"for blur_y.s0.x.x.rebased212"

"for blur_y.s0.x.x.rebased220":                   ; preds = %"for blur_y.s0.x.x.rebased220.preheader", %"consume blur_x228"
  %blur_y.s0.x.x.rebased222 = phi i32 [ %3731, %"consume blur_x228" ], [ 0, %"for blur_y.s0.x.x.rebased220.preheader" ]
  %3653 = add nsw i32 %blur_y.s0.x.x.rebased222, %t1582
  %a140 = shl nsw i32 %3653, 5
  %3654 = icmp sgt i32 %a14, %a140
  %b146 = select i1 %3654, i32 %a140, i32 %a14
  %3655 = icmp slt i32 %3653, 1
  %3656 = icmp sgt i32 %4, %a140
  %3657 = or i1 %3655, %3656
  br i1 %3657, label %"produce blur_x226", label %"consume blur_x228"

"end for blur_y.s0.x.x.rebased221":               ; preds = %"consume blur_x228", %"end for blur_y.s0.x.x.rebased213"
  br i1 %34, label %"produce blur_x232", label %after_bb229

"produce blur_x226":                              ; preds = %"for blur_y.s0.x.x.rebased220"
  %3658 = icmp slt i32 %b146, %4
  %blur_x.s0.x.v1.base.s227 = select i1 %3658, i32 %b146, i32 %4
  %t789 = add nsw i32 %blur_x.s0.x.v1.base.s227, %t1761
  %3659 = sext i32 %t789 to i64
  %3660 = getelementptr inbounds i16, i16* %read_input, i64 %3659
  %3661 = getelementptr inbounds i16, i16* %3660, i64 1
  %3662 = bitcast i16* %3661 to <16 x i16>*
  %3663 = load <16 x i16>, <16 x i16>* %3662, align 2, !tbaa !396
  %3664 = getelementptr inbounds i16, i16* %3660, i64 17
  %3665 = bitcast i16* %3664 to <16 x i16>*
  %3666 = load <16 x i16>, <16 x i16>* %3665, align 2, !tbaa !396
  %3667 = getelementptr inbounds i16, i16* %3660, i64 2
  %3668 = bitcast i16* %3667 to <16 x i16>*
  %3669 = load <16 x i16>, <16 x i16>* %3668, align 2, !tbaa !396
  %3670 = getelementptr inbounds i16, i16* %3660, i64 18
  %3671 = bitcast i16* %3670 to <16 x i16>*
  %3672 = load <16 x i16>, <16 x i16>* %3671, align 2, !tbaa !396
  %3673 = bitcast i16* %3660 to <16 x i16>*
  %3674 = load <16 x i16>, <16 x i16>* %3673, align 2, !tbaa !396
  %3675 = getelementptr inbounds i16, i16* %3660, i64 16
  %3676 = bitcast i16* %3675 to <16 x i16>*
  %3677 = load <16 x i16>, <16 x i16>* %3676, align 2, !tbaa !396
  %3678 = add <16 x i16> %3669, %3663
  %3679 = add <16 x i16> %3678, %3674
  %3680 = add <16 x i16> %3672, %3666
  %3681 = add <16 x i16> %3680, %3677
  %3682 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3679, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3683 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3681, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3684 = shufflevector <16 x i16> %3682, <16 x i16> %3683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3685 = lshr <32 x i16> %3684, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3686 = shufflevector <32 x i16> %3685, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3687 = sext i32 %blur_x.s0.x.v1.base.s227 to i64
  %3688 = add nsw i64 %3687, %3568
  %3689 = getelementptr inbounds i16, i16* %blur_x, i64 %3688
  %3690 = bitcast i16* %3689 to <16 x i16>*
  store <16 x i16> %3686, <16 x i16>* %3690, align 2, !tbaa !399
  %3691 = shufflevector <32 x i16> %3685, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3692 = getelementptr inbounds i16, i16* %3689, i64 16
  %3693 = bitcast i16* %3692 to <16 x i16>*
  store <16 x i16> %3691, <16 x i16>* %3693, align 2, !tbaa !399
  br label %"consume blur_x228"

"consume blur_x228":                              ; preds = %"for blur_y.s0.x.x.rebased220", %"produce blur_x226"
  %3694 = sext i32 %b146 to i64
  %3695 = add nsw i64 %3571, %3694
  %3696 = getelementptr inbounds i16, i16* %blur_x, i64 %3695
  %3697 = bitcast i16* %3696 to <16 x i16>*
  %3698 = load <16 x i16>, <16 x i16>* %3697, align 2, !tbaa !399
  %3699 = getelementptr inbounds i16, i16* %3696, i64 16
  %3700 = bitcast i16* %3699 to <16 x i16>*
  %3701 = load <16 x i16>, <16 x i16>* %3700, align 2, !tbaa !399
  %3702 = add nsw i64 %3574, %3694
  %3703 = getelementptr inbounds i16, i16* %blur_x, i64 %3702
  %3704 = bitcast i16* %3703 to <16 x i16>*
  %3705 = load <16 x i16>, <16 x i16>* %3704, align 2, !tbaa !399
  %3706 = getelementptr inbounds i16, i16* %3703, i64 16
  %3707 = bitcast i16* %3706 to <16 x i16>*
  %3708 = load <16 x i16>, <16 x i16>* %3707, align 2, !tbaa !399
  %3709 = add nsw i64 %3577, %3694
  %3710 = getelementptr inbounds i16, i16* %blur_x, i64 %3709
  %3711 = bitcast i16* %3710 to <16 x i16>*
  %3712 = load <16 x i16>, <16 x i16>* %3711, align 2, !tbaa !399
  %3713 = getelementptr inbounds i16, i16* %3710, i64 16
  %3714 = bitcast i16* %3713 to <16 x i16>*
  %3715 = load <16 x i16>, <16 x i16>* %3714, align 2, !tbaa !399
  %3716 = add <16 x i16> %3705, %3698
  %3717 = add <16 x i16> %3716, %3712
  %3718 = add <16 x i16> %3708, %3701
  %3719 = add <16 x i16> %3718, %3715
  %3720 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3717, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3721 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3719, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3722 = shufflevector <16 x i16> %3720, <16 x i16> %3721, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3723 = lshr <32 x i16> %3722, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3724 = shufflevector <32 x i16> %3723, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3725 = add nsw i64 %3581, %3694
  %3726 = getelementptr inbounds i16, i16* %65, i64 %3725
  %3727 = bitcast i16* %3726 to <16 x i16>*
  store <16 x i16> %3724, <16 x i16>* %3727, align 2, !tbaa !401
  %3728 = shufflevector <32 x i16> %3723, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3729 = getelementptr inbounds i16, i16* %3726, i64 16
  %3730 = bitcast i16* %3729 to <16 x i16>*
  store <16 x i16> %3728, <16 x i16>* %3730, align 2, !tbaa !401
  %3731 = add nuw nsw i32 %blur_y.s0.x.x.rebased222, 1
  %.not2567 = icmp eq i32 %3731, %t1639
  br i1 %.not2567, label %"end for blur_y.s0.x.x.rebased221", label %"for blur_y.s0.x.x.rebased220"

after_bb229:                                      ; preds = %"end for blur_y.s0.x.x.rebased221", %"produce blur_x232"
  br i1 %99, label %"for blur_y.s0.x.x.rebased234.preheader", label %"end for blur_y.s0.x.x.rebased235", !prof !386

"for blur_y.s0.x.x.rebased234.preheader":         ; preds = %after_bb229
  %3732 = sext i32 %t1650 to i64
  %3733 = zext i32 %.pre-phi3250 to i64
  %3734 = mul nsw i64 %3733, %108
  %3735 = sub nsw i64 %3734, %95
  %3736 = zext i32 %.pre-phi3254 to i64
  %3737 = mul nsw i64 %3736, %108
  %3738 = sub nsw i64 %3737, %95
  %3739 = zext i32 %.pre-phi to i64
  %3740 = mul nsw i64 %3739, %108
  %3741 = sub nsw i64 %3740, %95
  %3742 = sext i32 %a26 to i64
  %3743 = add nsw i64 %3742, 8
  %3744 = mul nsw i64 %3743, %109
  %3745 = add nsw i64 %3744, %112
  br label %"for blur_y.s0.x.x.rebased234"

"produce blur_x232":                              ; preds = %"end for blur_y.s0.x.x.rebased221"
  %3746 = getelementptr inbounds i16, i16* %read_input, i64 %127
  %3747 = getelementptr inbounds i16, i16* %3746, i64 -31
  %3748 = bitcast i16* %3747 to <16 x i16>*
  %3749 = load <16 x i16>, <16 x i16>* %3748, align 2, !tbaa !396
  %3750 = getelementptr inbounds i16, i16* %3746, i64 -15
  %3751 = bitcast i16* %3750 to <16 x i16>*
  %3752 = load <16 x i16>, <16 x i16>* %3751, align 2, !tbaa !396
  %3753 = getelementptr inbounds i16, i16* %3746, i64 -30
  %3754 = bitcast i16* %3753 to <16 x i16>*
  %3755 = load <16 x i16>, <16 x i16>* %3754, align 2, !tbaa !396
  %3756 = getelementptr inbounds i16, i16* %3746, i64 -14
  %3757 = bitcast i16* %3756 to <16 x i16>*
  %3758 = load <16 x i16>, <16 x i16>* %3757, align 2, !tbaa !396
  %3759 = getelementptr inbounds i16, i16* %3746, i64 -32
  %3760 = bitcast i16* %3759 to <16 x i16>*
  %3761 = load <16 x i16>, <16 x i16>* %3760, align 2, !tbaa !396
  %3762 = getelementptr inbounds i16, i16* %3746, i64 -16
  %3763 = bitcast i16* %3762 to <16 x i16>*
  %3764 = load <16 x i16>, <16 x i16>* %3763, align 2, !tbaa !396
  %3765 = add <16 x i16> %3755, %3749
  %3766 = add <16 x i16> %3765, %3761
  %3767 = add <16 x i16> %3758, %3752
  %3768 = add <16 x i16> %3767, %3764
  %3769 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3766, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3770 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3768, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3771 = shufflevector <16 x i16> %3769, <16 x i16> %3770, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3772 = lshr <32 x i16> %3771, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3773 = shufflevector <32 x i16> %3772, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3774 = zext i32 %.pre-phi3254 to i64
  %3775 = mul nsw i64 %96, %3774
  %3776 = add nsw i64 %98, %3775
  %3777 = getelementptr inbounds i16, i16* %blur_x, i64 %3776
  %3778 = getelementptr inbounds i16, i16* %3777, i64 -32
  %3779 = bitcast i16* %3778 to <16 x i16>*
  store <16 x i16> %3773, <16 x i16>* %3779, align 2, !tbaa !399
  %3780 = shufflevector <32 x i16> %3772, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3781 = getelementptr inbounds i16, i16* %3777, i64 -16
  %3782 = bitcast i16* %3781 to <16 x i16>*
  store <16 x i16> %3780, <16 x i16>* %3782, align 2, !tbaa !399
  %3783 = zext i32 %.pre-phi3250 to i64
  %3784 = mul nsw i64 %3783, %108
  %3785 = add nsw i64 %3784, %93
  %3786 = getelementptr inbounds i16, i16* %blur_x, i64 %3785
  %3787 = getelementptr inbounds i16, i16* %3786, i64 -32
  %3788 = bitcast i16* %3787 to <16 x i16>*
  %3789 = load <16 x i16>, <16 x i16>* %3788, align 2, !tbaa !399
  %3790 = getelementptr inbounds i16, i16* %3786, i64 -16
  %3791 = bitcast i16* %3790 to <16 x i16>*
  %3792 = load <16 x i16>, <16 x i16>* %3791, align 2, !tbaa !399
  %3793 = mul nsw i64 %3774, %108
  %3794 = add nsw i64 %3793, %93
  %3795 = getelementptr inbounds i16, i16* %blur_x, i64 %3794
  %3796 = getelementptr inbounds i16, i16* %3795, i64 -32
  %3797 = bitcast i16* %3796 to <16 x i16>*
  %3798 = load <16 x i16>, <16 x i16>* %3797, align 2, !tbaa !399
  %3799 = getelementptr inbounds i16, i16* %3795, i64 -16
  %3800 = bitcast i16* %3799 to <16 x i16>*
  %3801 = load <16 x i16>, <16 x i16>* %3800, align 2, !tbaa !399
  %3802 = zext i32 %.pre-phi to i64
  %3803 = mul nsw i64 %3802, %108
  %3804 = add nsw i64 %3803, %93
  %3805 = getelementptr inbounds i16, i16* %blur_x, i64 %3804
  %3806 = getelementptr inbounds i16, i16* %3805, i64 -32
  %3807 = bitcast i16* %3806 to <16 x i16>*
  %3808 = load <16 x i16>, <16 x i16>* %3807, align 2, !tbaa !399
  %3809 = getelementptr inbounds i16, i16* %3805, i64 -16
  %3810 = bitcast i16* %3809 to <16 x i16>*
  %3811 = load <16 x i16>, <16 x i16>* %3810, align 2, !tbaa !399
  %3812 = add <16 x i16> %3798, %3789
  %3813 = add <16 x i16> %3812, %3808
  %3814 = add <16 x i16> %3801, %3792
  %3815 = add <16 x i16> %3814, %3811
  %3816 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3813, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3817 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3815, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3818 = shufflevector <16 x i16> %3816, <16 x i16> %3817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3819 = lshr <32 x i16> %3818, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3820 = shufflevector <32 x i16> %3819, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3821 = sext i32 %a26 to i64
  %3822 = add nsw i64 %3821, 8
  %3823 = mul nsw i64 %3822, %109
  %3824 = add nsw i64 %111, %3823
  %3825 = getelementptr inbounds i16, i16* %65, i64 %3824
  %3826 = getelementptr inbounds i16, i16* %3825, i64 -32
  %3827 = bitcast i16* %3826 to <16 x i16>*
  store <16 x i16> %3820, <16 x i16>* %3827, align 2, !tbaa !401
  %3828 = shufflevector <32 x i16> %3819, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3829 = getelementptr inbounds i16, i16* %3825, i64 -16
  %3830 = bitcast i16* %3829 to <16 x i16>*
  store <16 x i16> %3828, <16 x i16>* %3830, align 2, !tbaa !401
  br label %after_bb229

"for blur_y.s0.x.x.rebased234":                   ; preds = %"for blur_y.s0.x.x.rebased234.preheader", %"consume blur_x241"
  %indvars.iv3057 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased234.preheader" ], [ %indvars.iv.next3058, %"consume blur_x241" ]
  %3831 = add nsw i64 %indvars.iv3057, %100
  %3832 = icmp slt i64 %3831, 1
  %3833 = trunc i64 %3831 to i32
  %3834 = shl nsw i32 %3833, 5
  %3835 = icmp sgt i32 %4, %3834
  %3836 = or i1 %3832, %3835
  br i1 %3836, label %"produce blur_x240", label %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge"

"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased234"
  %.pre3275 = shl nsw i64 %3831, 5
  br label %"consume blur_x241"

"end for blur_y.s0.x.x.rebased235":               ; preds = %"consume blur_x241", %after_bb229
  br i1 %101, label %"for blur_y.s0.x.x.rebased242.preheader", label %"end for blur_y.s0.x.x.rebased243", !prof !386

"for blur_y.s0.x.x.rebased242.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased235"
  %3837 = sext i32 %t1650 to i64
  %3838 = zext i32 %.pre-phi3250 to i64
  %3839 = mul nsw i64 %3838, %108
  %3840 = sub nsw i64 %3839, %95
  %3841 = zext i32 %.pre-phi3254 to i64
  %3842 = mul nsw i64 %3841, %108
  %3843 = sub nsw i64 %3842, %95
  %3844 = zext i32 %.pre-phi to i64
  %3845 = mul nsw i64 %3844, %108
  %3846 = sub nsw i64 %3845, %95
  %3847 = sext i32 %a26 to i64
  %3848 = add nsw i64 %3847, 8
  %3849 = mul nsw i64 %3848, %109
  %3850 = add nsw i64 %3849, %112
  br label %"for blur_y.s0.x.x.rebased242"

"produce blur_x240":                              ; preds = %"for blur_y.s0.x.x.rebased234"
  %t800 = add nsw i32 %3834, %t1777
  %3851 = sext i32 %t800 to i64
  %3852 = getelementptr inbounds i16, i16* %read_input, i64 %3851
  %3853 = getelementptr inbounds i16, i16* %3852, i64 1
  %3854 = bitcast i16* %3853 to <16 x i16>*
  %3855 = load <16 x i16>, <16 x i16>* %3854, align 2, !tbaa !396
  %3856 = getelementptr inbounds i16, i16* %3852, i64 17
  %3857 = bitcast i16* %3856 to <16 x i16>*
  %3858 = load <16 x i16>, <16 x i16>* %3857, align 2, !tbaa !396
  %3859 = getelementptr inbounds i16, i16* %3852, i64 2
  %3860 = bitcast i16* %3859 to <16 x i16>*
  %3861 = load <16 x i16>, <16 x i16>* %3860, align 2, !tbaa !396
  %3862 = getelementptr inbounds i16, i16* %3852, i64 18
  %3863 = bitcast i16* %3862 to <16 x i16>*
  %3864 = load <16 x i16>, <16 x i16>* %3863, align 2, !tbaa !396
  %3865 = bitcast i16* %3852 to <16 x i16>*
  %3866 = load <16 x i16>, <16 x i16>* %3865, align 2, !tbaa !396
  %3867 = getelementptr inbounds i16, i16* %3852, i64 16
  %3868 = bitcast i16* %3867 to <16 x i16>*
  %3869 = load <16 x i16>, <16 x i16>* %3868, align 2, !tbaa !396
  %3870 = add <16 x i16> %3861, %3855
  %3871 = add <16 x i16> %3870, %3866
  %3872 = add <16 x i16> %3864, %3858
  %3873 = add <16 x i16> %3872, %3869
  %3874 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3871, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3873, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3876 = shufflevector <16 x i16> %3874, <16 x i16> %3875, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3877 = lshr <32 x i16> %3876, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3878 = shufflevector <32 x i16> %3877, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3879 = shl nsw i64 %3831, 5
  %3880 = add nsw i64 %3879, %3732
  %3881 = getelementptr inbounds i16, i16* %blur_x, i64 %3880
  %3882 = bitcast i16* %3881 to <16 x i16>*
  store <16 x i16> %3878, <16 x i16>* %3882, align 2, !tbaa !399
  %3883 = shufflevector <32 x i16> %3877, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3884 = getelementptr inbounds i16, i16* %3881, i64 16
  %3885 = bitcast i16* %3884 to <16 x i16>*
  store <16 x i16> %3883, <16 x i16>* %3885, align 2, !tbaa !399
  br label %"consume blur_x241"

"consume blur_x241":                              ; preds = %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge", %"produce blur_x240"
  %.pre-phi3276 = phi i64 [ %.pre3275, %"for blur_y.s0.x.x.rebased234.consume blur_x241_crit_edge" ], [ %3879, %"produce blur_x240" ]
  %3886 = add nsw i64 %3735, %.pre-phi3276
  %3887 = getelementptr inbounds i16, i16* %blur_x, i64 %3886
  %3888 = bitcast i16* %3887 to <16 x i16>*
  %3889 = load <16 x i16>, <16 x i16>* %3888, align 2, !tbaa !399
  %3890 = getelementptr inbounds i16, i16* %3887, i64 16
  %3891 = bitcast i16* %3890 to <16 x i16>*
  %3892 = load <16 x i16>, <16 x i16>* %3891, align 2, !tbaa !399
  %3893 = add nsw i64 %3738, %.pre-phi3276
  %3894 = getelementptr inbounds i16, i16* %blur_x, i64 %3893
  %3895 = bitcast i16* %3894 to <16 x i16>*
  %3896 = load <16 x i16>, <16 x i16>* %3895, align 2, !tbaa !399
  %3897 = getelementptr inbounds i16, i16* %3894, i64 16
  %3898 = bitcast i16* %3897 to <16 x i16>*
  %3899 = load <16 x i16>, <16 x i16>* %3898, align 2, !tbaa !399
  %3900 = add nsw i64 %3741, %.pre-phi3276
  %3901 = getelementptr inbounds i16, i16* %blur_x, i64 %3900
  %3902 = bitcast i16* %3901 to <16 x i16>*
  %3903 = load <16 x i16>, <16 x i16>* %3902, align 2, !tbaa !399
  %3904 = getelementptr inbounds i16, i16* %3901, i64 16
  %3905 = bitcast i16* %3904 to <16 x i16>*
  %3906 = load <16 x i16>, <16 x i16>* %3905, align 2, !tbaa !399
  %3907 = add <16 x i16> %3896, %3889
  %3908 = add <16 x i16> %3907, %3903
  %3909 = add <16 x i16> %3899, %3892
  %3910 = add <16 x i16> %3909, %3906
  %3911 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3908, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3912 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3910, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3913 = shufflevector <16 x i16> %3911, <16 x i16> %3912, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3914 = lshr <32 x i16> %3913, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3915 = shufflevector <32 x i16> %3914, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3916 = add nsw i64 %3745, %.pre-phi3276
  %3917 = getelementptr inbounds i16, i16* %65, i64 %3916
  %3918 = bitcast i16* %3917 to <16 x i16>*
  store <16 x i16> %3915, <16 x i16>* %3918, align 2, !tbaa !401
  %3919 = shufflevector <32 x i16> %3914, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3920 = getelementptr inbounds i16, i16* %3917, i64 16
  %3921 = bitcast i16* %3920 to <16 x i16>*
  store <16 x i16> %3919, <16 x i16>* %3921, align 2, !tbaa !401
  %indvars.iv.next3058 = add nuw nsw i64 %indvars.iv3057, 1
  %.not2566 = icmp eq i64 %indvars.iv.next3058, %180
  br i1 %.not2566, label %"end for blur_y.s0.x.x.rebased235", label %"for blur_y.s0.x.x.rebased234"

"for blur_y.s0.x.x.rebased242":                   ; preds = %"for blur_y.s0.x.x.rebased242.preheader", %"consume blur_x250"
  %blur_y.s0.x.x.rebased244 = phi i32 [ %4000, %"consume blur_x250" ], [ 0, %"for blur_y.s0.x.x.rebased242.preheader" ]
  %3922 = add nsw i32 %blur_y.s0.x.x.rebased244, %t1582
  %a147 = shl nsw i32 %3922, 5
  %3923 = icmp sgt i32 %a14, %a147
  %b153 = select i1 %3923, i32 %a147, i32 %a14
  %3924 = icmp slt i32 %3922, 1
  %3925 = icmp sgt i32 %4, %a147
  %3926 = or i1 %3924, %3925
  br i1 %3926, label %"produce blur_x248", label %"consume blur_x250"

"end for blur_y.s0.x.x.rebased243":               ; preds = %"consume blur_x250", %"end for blur_y.s0.x.x.rebased235"
  br i1 %34, label %"produce blur_x254", label %after_bb251

"produce blur_x248":                              ; preds = %"for blur_y.s0.x.x.rebased242"
  %3927 = icmp slt i32 %b153, %4
  %blur_x.s0.x.v1.base.s249 = select i1 %3927, i32 %b153, i32 %4
  %t805 = add nsw i32 %blur_x.s0.x.v1.base.s249, %t1777
  %3928 = sext i32 %t805 to i64
  %3929 = getelementptr inbounds i16, i16* %read_input, i64 %3928
  %3930 = getelementptr inbounds i16, i16* %3929, i64 1
  %3931 = bitcast i16* %3930 to <16 x i16>*
  %3932 = load <16 x i16>, <16 x i16>* %3931, align 2, !tbaa !396
  %3933 = getelementptr inbounds i16, i16* %3929, i64 17
  %3934 = bitcast i16* %3933 to <16 x i16>*
  %3935 = load <16 x i16>, <16 x i16>* %3934, align 2, !tbaa !396
  %3936 = getelementptr inbounds i16, i16* %3929, i64 2
  %3937 = bitcast i16* %3936 to <16 x i16>*
  %3938 = load <16 x i16>, <16 x i16>* %3937, align 2, !tbaa !396
  %3939 = getelementptr inbounds i16, i16* %3929, i64 18
  %3940 = bitcast i16* %3939 to <16 x i16>*
  %3941 = load <16 x i16>, <16 x i16>* %3940, align 2, !tbaa !396
  %3942 = bitcast i16* %3929 to <16 x i16>*
  %3943 = load <16 x i16>, <16 x i16>* %3942, align 2, !tbaa !396
  %3944 = getelementptr inbounds i16, i16* %3929, i64 16
  %3945 = bitcast i16* %3944 to <16 x i16>*
  %3946 = load <16 x i16>, <16 x i16>* %3945, align 2, !tbaa !396
  %3947 = add <16 x i16> %3938, %3932
  %3948 = add <16 x i16> %3947, %3943
  %3949 = add <16 x i16> %3941, %3935
  %3950 = add <16 x i16> %3949, %3946
  %3951 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3948, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3952 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3950, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3953 = shufflevector <16 x i16> %3951, <16 x i16> %3952, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3954 = lshr <32 x i16> %3953, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3955 = shufflevector <32 x i16> %3954, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3956 = sext i32 %blur_x.s0.x.v1.base.s249 to i64
  %3957 = add nsw i64 %3956, %3837
  %3958 = getelementptr inbounds i16, i16* %blur_x, i64 %3957
  %3959 = bitcast i16* %3958 to <16 x i16>*
  store <16 x i16> %3955, <16 x i16>* %3959, align 2, !tbaa !399
  %3960 = shufflevector <32 x i16> %3954, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3961 = getelementptr inbounds i16, i16* %3958, i64 16
  %3962 = bitcast i16* %3961 to <16 x i16>*
  store <16 x i16> %3960, <16 x i16>* %3962, align 2, !tbaa !399
  br label %"consume blur_x250"

"consume blur_x250":                              ; preds = %"for blur_y.s0.x.x.rebased242", %"produce blur_x248"
  %3963 = sext i32 %b153 to i64
  %3964 = add nsw i64 %3840, %3963
  %3965 = getelementptr inbounds i16, i16* %blur_x, i64 %3964
  %3966 = bitcast i16* %3965 to <16 x i16>*
  %3967 = load <16 x i16>, <16 x i16>* %3966, align 2, !tbaa !399
  %3968 = getelementptr inbounds i16, i16* %3965, i64 16
  %3969 = bitcast i16* %3968 to <16 x i16>*
  %3970 = load <16 x i16>, <16 x i16>* %3969, align 2, !tbaa !399
  %3971 = add nsw i64 %3843, %3963
  %3972 = getelementptr inbounds i16, i16* %blur_x, i64 %3971
  %3973 = bitcast i16* %3972 to <16 x i16>*
  %3974 = load <16 x i16>, <16 x i16>* %3973, align 2, !tbaa !399
  %3975 = getelementptr inbounds i16, i16* %3972, i64 16
  %3976 = bitcast i16* %3975 to <16 x i16>*
  %3977 = load <16 x i16>, <16 x i16>* %3976, align 2, !tbaa !399
  %3978 = add nsw i64 %3846, %3963
  %3979 = getelementptr inbounds i16, i16* %blur_x, i64 %3978
  %3980 = bitcast i16* %3979 to <16 x i16>*
  %3981 = load <16 x i16>, <16 x i16>* %3980, align 2, !tbaa !399
  %3982 = getelementptr inbounds i16, i16* %3979, i64 16
  %3983 = bitcast i16* %3982 to <16 x i16>*
  %3984 = load <16 x i16>, <16 x i16>* %3983, align 2, !tbaa !399
  %3985 = add <16 x i16> %3974, %3967
  %3986 = add <16 x i16> %3985, %3981
  %3987 = add <16 x i16> %3977, %3970
  %3988 = add <16 x i16> %3987, %3984
  %3989 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3986, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3990 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %3988, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %3991 = shufflevector <16 x i16> %3989, <16 x i16> %3990, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3992 = lshr <32 x i16> %3991, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %3993 = shufflevector <32 x i16> %3992, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3994 = add nsw i64 %3850, %3963
  %3995 = getelementptr inbounds i16, i16* %65, i64 %3994
  %3996 = bitcast i16* %3995 to <16 x i16>*
  store <16 x i16> %3993, <16 x i16>* %3996, align 2, !tbaa !401
  %3997 = shufflevector <32 x i16> %3992, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3998 = getelementptr inbounds i16, i16* %3995, i64 16
  %3999 = bitcast i16* %3998 to <16 x i16>*
  store <16 x i16> %3997, <16 x i16>* %3999, align 2, !tbaa !401
  %4000 = add nuw nsw i32 %blur_y.s0.x.x.rebased244, 1
  %.not2565 = icmp eq i32 %4000, %t1639
  br i1 %.not2565, label %"end for blur_y.s0.x.x.rebased243", label %"for blur_y.s0.x.x.rebased242"

after_bb251:                                      ; preds = %"end for blur_y.s0.x.x.rebased243", %"produce blur_x254"
  br i1 %99, label %"for blur_y.s0.x.x.rebased256.preheader", label %"end for blur_y.s0.x.x.rebased257", !prof !386

"for blur_y.s0.x.x.rebased256.preheader":         ; preds = %after_bb251
  %4001 = sext i32 %t1666 to i64
  %4002 = zext i32 %.pre-phi3254 to i64
  %4003 = mul nsw i64 %4002, %108
  %4004 = sub nsw i64 %4003, %95
  %4005 = zext i32 %.pre-phi3260 to i64
  %4006 = mul nsw i64 %4005, %108
  %4007 = sub nsw i64 %4006, %95
  %4008 = zext i32 %.pre-phi3250 to i64
  %4009 = mul nsw i64 %4008, %108
  %4010 = sub nsw i64 %4009, %95
  %4011 = sext i32 %a26 to i64
  %4012 = add nsw i64 %4011, 9
  %4013 = mul nsw i64 %4012, %109
  %4014 = add nsw i64 %4013, %112
  br label %"for blur_y.s0.x.x.rebased256"

"produce blur_x254":                              ; preds = %"end for blur_y.s0.x.x.rebased243"
  %4015 = getelementptr inbounds i16, i16* %read_input, i64 %129
  %4016 = getelementptr inbounds i16, i16* %4015, i64 -31
  %4017 = bitcast i16* %4016 to <16 x i16>*
  %4018 = load <16 x i16>, <16 x i16>* %4017, align 2, !tbaa !396
  %4019 = getelementptr inbounds i16, i16* %4015, i64 -15
  %4020 = bitcast i16* %4019 to <16 x i16>*
  %4021 = load <16 x i16>, <16 x i16>* %4020, align 2, !tbaa !396
  %4022 = getelementptr inbounds i16, i16* %4015, i64 -30
  %4023 = bitcast i16* %4022 to <16 x i16>*
  %4024 = load <16 x i16>, <16 x i16>* %4023, align 2, !tbaa !396
  %4025 = getelementptr inbounds i16, i16* %4015, i64 -14
  %4026 = bitcast i16* %4025 to <16 x i16>*
  %4027 = load <16 x i16>, <16 x i16>* %4026, align 2, !tbaa !396
  %4028 = getelementptr inbounds i16, i16* %4015, i64 -32
  %4029 = bitcast i16* %4028 to <16 x i16>*
  %4030 = load <16 x i16>, <16 x i16>* %4029, align 2, !tbaa !396
  %4031 = getelementptr inbounds i16, i16* %4015, i64 -16
  %4032 = bitcast i16* %4031 to <16 x i16>*
  %4033 = load <16 x i16>, <16 x i16>* %4032, align 2, !tbaa !396
  %4034 = add <16 x i16> %4024, %4018
  %4035 = add <16 x i16> %4034, %4030
  %4036 = add <16 x i16> %4027, %4021
  %4037 = add <16 x i16> %4036, %4033
  %4038 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4035, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4039 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4037, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4040 = shufflevector <16 x i16> %4038, <16 x i16> %4039, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4041 = lshr <32 x i16> %4040, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4042 = shufflevector <32 x i16> %4041, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4043 = zext i32 %.pre-phi3260 to i64
  %4044 = mul nsw i64 %96, %4043
  %4045 = add nsw i64 %98, %4044
  %4046 = getelementptr inbounds i16, i16* %blur_x, i64 %4045
  %4047 = getelementptr inbounds i16, i16* %4046, i64 -32
  %4048 = bitcast i16* %4047 to <16 x i16>*
  store <16 x i16> %4042, <16 x i16>* %4048, align 2, !tbaa !399
  %4049 = shufflevector <32 x i16> %4041, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4050 = getelementptr inbounds i16, i16* %4046, i64 -16
  %4051 = bitcast i16* %4050 to <16 x i16>*
  store <16 x i16> %4049, <16 x i16>* %4051, align 2, !tbaa !399
  %4052 = zext i32 %.pre-phi3254 to i64
  %4053 = mul nsw i64 %4052, %108
  %4054 = add nsw i64 %4053, %93
  %4055 = getelementptr inbounds i16, i16* %blur_x, i64 %4054
  %4056 = getelementptr inbounds i16, i16* %4055, i64 -32
  %4057 = bitcast i16* %4056 to <16 x i16>*
  %4058 = load <16 x i16>, <16 x i16>* %4057, align 2, !tbaa !399
  %4059 = getelementptr inbounds i16, i16* %4055, i64 -16
  %4060 = bitcast i16* %4059 to <16 x i16>*
  %4061 = load <16 x i16>, <16 x i16>* %4060, align 2, !tbaa !399
  %4062 = mul nsw i64 %4043, %108
  %4063 = add nsw i64 %4062, %93
  %4064 = getelementptr inbounds i16, i16* %blur_x, i64 %4063
  %4065 = getelementptr inbounds i16, i16* %4064, i64 -32
  %4066 = bitcast i16* %4065 to <16 x i16>*
  %4067 = load <16 x i16>, <16 x i16>* %4066, align 2, !tbaa !399
  %4068 = getelementptr inbounds i16, i16* %4064, i64 -16
  %4069 = bitcast i16* %4068 to <16 x i16>*
  %4070 = load <16 x i16>, <16 x i16>* %4069, align 2, !tbaa !399
  %4071 = zext i32 %.pre-phi3250 to i64
  %4072 = mul nsw i64 %4071, %108
  %4073 = add nsw i64 %4072, %93
  %4074 = getelementptr inbounds i16, i16* %blur_x, i64 %4073
  %4075 = getelementptr inbounds i16, i16* %4074, i64 -32
  %4076 = bitcast i16* %4075 to <16 x i16>*
  %4077 = load <16 x i16>, <16 x i16>* %4076, align 2, !tbaa !399
  %4078 = getelementptr inbounds i16, i16* %4074, i64 -16
  %4079 = bitcast i16* %4078 to <16 x i16>*
  %4080 = load <16 x i16>, <16 x i16>* %4079, align 2, !tbaa !399
  %4081 = add <16 x i16> %4067, %4058
  %4082 = add <16 x i16> %4081, %4077
  %4083 = add <16 x i16> %4070, %4061
  %4084 = add <16 x i16> %4083, %4080
  %4085 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4082, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4086 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4084, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4087 = shufflevector <16 x i16> %4085, <16 x i16> %4086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4088 = lshr <32 x i16> %4087, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4089 = shufflevector <32 x i16> %4088, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4090 = sext i32 %a26 to i64
  %4091 = add nsw i64 %4090, 9
  %4092 = mul nsw i64 %4091, %109
  %4093 = add nsw i64 %111, %4092
  %4094 = getelementptr inbounds i16, i16* %65, i64 %4093
  %4095 = getelementptr inbounds i16, i16* %4094, i64 -32
  %4096 = bitcast i16* %4095 to <16 x i16>*
  store <16 x i16> %4089, <16 x i16>* %4096, align 2, !tbaa !401
  %4097 = shufflevector <32 x i16> %4088, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4098 = getelementptr inbounds i16, i16* %4094, i64 -16
  %4099 = bitcast i16* %4098 to <16 x i16>*
  store <16 x i16> %4097, <16 x i16>* %4099, align 2, !tbaa !401
  br label %after_bb251

"for blur_y.s0.x.x.rebased256":                   ; preds = %"for blur_y.s0.x.x.rebased256.preheader", %"consume blur_x263"
  %indvars.iv3060 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased256.preheader" ], [ %indvars.iv.next3061, %"consume blur_x263" ]
  %4100 = add nsw i64 %indvars.iv3060, %100
  %4101 = icmp slt i64 %4100, 1
  %4102 = trunc i64 %4100 to i32
  %4103 = shl nsw i32 %4102, 5
  %4104 = icmp sgt i32 %4, %4103
  %4105 = or i1 %4101, %4104
  br i1 %4105, label %"produce blur_x262", label %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge"

"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased256"
  %.pre3277 = shl nsw i64 %4100, 5
  br label %"consume blur_x263"

"end for blur_y.s0.x.x.rebased257":               ; preds = %"consume blur_x263", %after_bb251
  br i1 %101, label %"for blur_y.s0.x.x.rebased264.preheader", label %"end for blur_y.s0.x.x.rebased265", !prof !386

"for blur_y.s0.x.x.rebased264.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased257"
  %4106 = sext i32 %t1666 to i64
  %4107 = zext i32 %.pre-phi3254 to i64
  %4108 = mul nsw i64 %4107, %108
  %4109 = sub nsw i64 %4108, %95
  %4110 = zext i32 %.pre-phi3260 to i64
  %4111 = mul nsw i64 %4110, %108
  %4112 = sub nsw i64 %4111, %95
  %4113 = zext i32 %.pre-phi3250 to i64
  %4114 = mul nsw i64 %4113, %108
  %4115 = sub nsw i64 %4114, %95
  %4116 = sext i32 %a26 to i64
  %4117 = add nsw i64 %4116, 9
  %4118 = mul nsw i64 %4117, %109
  %4119 = add nsw i64 %4118, %112
  br label %"for blur_y.s0.x.x.rebased264"

"produce blur_x262":                              ; preds = %"for blur_y.s0.x.x.rebased256"
  %t816 = add nsw i32 %4103, %t1793
  %4120 = sext i32 %t816 to i64
  %4121 = getelementptr inbounds i16, i16* %read_input, i64 %4120
  %4122 = getelementptr inbounds i16, i16* %4121, i64 1
  %4123 = bitcast i16* %4122 to <16 x i16>*
  %4124 = load <16 x i16>, <16 x i16>* %4123, align 2, !tbaa !396
  %4125 = getelementptr inbounds i16, i16* %4121, i64 17
  %4126 = bitcast i16* %4125 to <16 x i16>*
  %4127 = load <16 x i16>, <16 x i16>* %4126, align 2, !tbaa !396
  %4128 = getelementptr inbounds i16, i16* %4121, i64 2
  %4129 = bitcast i16* %4128 to <16 x i16>*
  %4130 = load <16 x i16>, <16 x i16>* %4129, align 2, !tbaa !396
  %4131 = getelementptr inbounds i16, i16* %4121, i64 18
  %4132 = bitcast i16* %4131 to <16 x i16>*
  %4133 = load <16 x i16>, <16 x i16>* %4132, align 2, !tbaa !396
  %4134 = bitcast i16* %4121 to <16 x i16>*
  %4135 = load <16 x i16>, <16 x i16>* %4134, align 2, !tbaa !396
  %4136 = getelementptr inbounds i16, i16* %4121, i64 16
  %4137 = bitcast i16* %4136 to <16 x i16>*
  %4138 = load <16 x i16>, <16 x i16>* %4137, align 2, !tbaa !396
  %4139 = add <16 x i16> %4130, %4124
  %4140 = add <16 x i16> %4139, %4135
  %4141 = add <16 x i16> %4133, %4127
  %4142 = add <16 x i16> %4141, %4138
  %4143 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4140, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4142, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4145 = shufflevector <16 x i16> %4143, <16 x i16> %4144, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4146 = lshr <32 x i16> %4145, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4147 = shufflevector <32 x i16> %4146, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4148 = shl nsw i64 %4100, 5
  %4149 = add nsw i64 %4148, %4001
  %4150 = getelementptr inbounds i16, i16* %blur_x, i64 %4149
  %4151 = bitcast i16* %4150 to <16 x i16>*
  store <16 x i16> %4147, <16 x i16>* %4151, align 2, !tbaa !399
  %4152 = shufflevector <32 x i16> %4146, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4153 = getelementptr inbounds i16, i16* %4150, i64 16
  %4154 = bitcast i16* %4153 to <16 x i16>*
  store <16 x i16> %4152, <16 x i16>* %4154, align 2, !tbaa !399
  br label %"consume blur_x263"

"consume blur_x263":                              ; preds = %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge", %"produce blur_x262"
  %.pre-phi3278 = phi i64 [ %.pre3277, %"for blur_y.s0.x.x.rebased256.consume blur_x263_crit_edge" ], [ %4148, %"produce blur_x262" ]
  %4155 = add nsw i64 %4004, %.pre-phi3278
  %4156 = getelementptr inbounds i16, i16* %blur_x, i64 %4155
  %4157 = bitcast i16* %4156 to <16 x i16>*
  %4158 = load <16 x i16>, <16 x i16>* %4157, align 2, !tbaa !399
  %4159 = getelementptr inbounds i16, i16* %4156, i64 16
  %4160 = bitcast i16* %4159 to <16 x i16>*
  %4161 = load <16 x i16>, <16 x i16>* %4160, align 2, !tbaa !399
  %4162 = add nsw i64 %4007, %.pre-phi3278
  %4163 = getelementptr inbounds i16, i16* %blur_x, i64 %4162
  %4164 = bitcast i16* %4163 to <16 x i16>*
  %4165 = load <16 x i16>, <16 x i16>* %4164, align 2, !tbaa !399
  %4166 = getelementptr inbounds i16, i16* %4163, i64 16
  %4167 = bitcast i16* %4166 to <16 x i16>*
  %4168 = load <16 x i16>, <16 x i16>* %4167, align 2, !tbaa !399
  %4169 = add nsw i64 %4010, %.pre-phi3278
  %4170 = getelementptr inbounds i16, i16* %blur_x, i64 %4169
  %4171 = bitcast i16* %4170 to <16 x i16>*
  %4172 = load <16 x i16>, <16 x i16>* %4171, align 2, !tbaa !399
  %4173 = getelementptr inbounds i16, i16* %4170, i64 16
  %4174 = bitcast i16* %4173 to <16 x i16>*
  %4175 = load <16 x i16>, <16 x i16>* %4174, align 2, !tbaa !399
  %4176 = add <16 x i16> %4165, %4158
  %4177 = add <16 x i16> %4176, %4172
  %4178 = add <16 x i16> %4168, %4161
  %4179 = add <16 x i16> %4178, %4175
  %4180 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4177, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4181 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4179, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4182 = shufflevector <16 x i16> %4180, <16 x i16> %4181, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4183 = lshr <32 x i16> %4182, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4184 = shufflevector <32 x i16> %4183, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4185 = add nsw i64 %4014, %.pre-phi3278
  %4186 = getelementptr inbounds i16, i16* %65, i64 %4185
  %4187 = bitcast i16* %4186 to <16 x i16>*
  store <16 x i16> %4184, <16 x i16>* %4187, align 2, !tbaa !401
  %4188 = shufflevector <32 x i16> %4183, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4189 = getelementptr inbounds i16, i16* %4186, i64 16
  %4190 = bitcast i16* %4189 to <16 x i16>*
  store <16 x i16> %4188, <16 x i16>* %4190, align 2, !tbaa !401
  %indvars.iv.next3061 = add nuw nsw i64 %indvars.iv3060, 1
  %.not2564 = icmp eq i64 %indvars.iv.next3061, %180
  br i1 %.not2564, label %"end for blur_y.s0.x.x.rebased257", label %"for blur_y.s0.x.x.rebased256"

"for blur_y.s0.x.x.rebased264":                   ; preds = %"for blur_y.s0.x.x.rebased264.preheader", %"consume blur_x272"
  %blur_y.s0.x.x.rebased266 = phi i32 [ %4269, %"consume blur_x272" ], [ 0, %"for blur_y.s0.x.x.rebased264.preheader" ]
  %4191 = add nsw i32 %blur_y.s0.x.x.rebased266, %t1582
  %a154 = shl nsw i32 %4191, 5
  %4192 = icmp sgt i32 %a14, %a154
  %b160 = select i1 %4192, i32 %a154, i32 %a14
  %4193 = icmp slt i32 %4191, 1
  %4194 = icmp sgt i32 %4, %a154
  %4195 = or i1 %4193, %4194
  br i1 %4195, label %"produce blur_x270", label %"consume blur_x272"

"end for blur_y.s0.x.x.rebased265":               ; preds = %"consume blur_x272", %"end for blur_y.s0.x.x.rebased257"
  br i1 %34, label %"produce blur_x276", label %after_bb273

"produce blur_x270":                              ; preds = %"for blur_y.s0.x.x.rebased264"
  %4196 = icmp slt i32 %b160, %4
  %blur_x.s0.x.v1.base.s271 = select i1 %4196, i32 %b160, i32 %4
  %t821 = add nsw i32 %blur_x.s0.x.v1.base.s271, %t1793
  %4197 = sext i32 %t821 to i64
  %4198 = getelementptr inbounds i16, i16* %read_input, i64 %4197
  %4199 = getelementptr inbounds i16, i16* %4198, i64 1
  %4200 = bitcast i16* %4199 to <16 x i16>*
  %4201 = load <16 x i16>, <16 x i16>* %4200, align 2, !tbaa !396
  %4202 = getelementptr inbounds i16, i16* %4198, i64 17
  %4203 = bitcast i16* %4202 to <16 x i16>*
  %4204 = load <16 x i16>, <16 x i16>* %4203, align 2, !tbaa !396
  %4205 = getelementptr inbounds i16, i16* %4198, i64 2
  %4206 = bitcast i16* %4205 to <16 x i16>*
  %4207 = load <16 x i16>, <16 x i16>* %4206, align 2, !tbaa !396
  %4208 = getelementptr inbounds i16, i16* %4198, i64 18
  %4209 = bitcast i16* %4208 to <16 x i16>*
  %4210 = load <16 x i16>, <16 x i16>* %4209, align 2, !tbaa !396
  %4211 = bitcast i16* %4198 to <16 x i16>*
  %4212 = load <16 x i16>, <16 x i16>* %4211, align 2, !tbaa !396
  %4213 = getelementptr inbounds i16, i16* %4198, i64 16
  %4214 = bitcast i16* %4213 to <16 x i16>*
  %4215 = load <16 x i16>, <16 x i16>* %4214, align 2, !tbaa !396
  %4216 = add <16 x i16> %4207, %4201
  %4217 = add <16 x i16> %4216, %4212
  %4218 = add <16 x i16> %4210, %4204
  %4219 = add <16 x i16> %4218, %4215
  %4220 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4217, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4221 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4219, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4222 = shufflevector <16 x i16> %4220, <16 x i16> %4221, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4223 = lshr <32 x i16> %4222, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4224 = shufflevector <32 x i16> %4223, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4225 = sext i32 %blur_x.s0.x.v1.base.s271 to i64
  %4226 = add nsw i64 %4225, %4106
  %4227 = getelementptr inbounds i16, i16* %blur_x, i64 %4226
  %4228 = bitcast i16* %4227 to <16 x i16>*
  store <16 x i16> %4224, <16 x i16>* %4228, align 2, !tbaa !399
  %4229 = shufflevector <32 x i16> %4223, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4230 = getelementptr inbounds i16, i16* %4227, i64 16
  %4231 = bitcast i16* %4230 to <16 x i16>*
  store <16 x i16> %4229, <16 x i16>* %4231, align 2, !tbaa !399
  br label %"consume blur_x272"

"consume blur_x272":                              ; preds = %"for blur_y.s0.x.x.rebased264", %"produce blur_x270"
  %4232 = sext i32 %b160 to i64
  %4233 = add nsw i64 %4109, %4232
  %4234 = getelementptr inbounds i16, i16* %blur_x, i64 %4233
  %4235 = bitcast i16* %4234 to <16 x i16>*
  %4236 = load <16 x i16>, <16 x i16>* %4235, align 2, !tbaa !399
  %4237 = getelementptr inbounds i16, i16* %4234, i64 16
  %4238 = bitcast i16* %4237 to <16 x i16>*
  %4239 = load <16 x i16>, <16 x i16>* %4238, align 2, !tbaa !399
  %4240 = add nsw i64 %4112, %4232
  %4241 = getelementptr inbounds i16, i16* %blur_x, i64 %4240
  %4242 = bitcast i16* %4241 to <16 x i16>*
  %4243 = load <16 x i16>, <16 x i16>* %4242, align 2, !tbaa !399
  %4244 = getelementptr inbounds i16, i16* %4241, i64 16
  %4245 = bitcast i16* %4244 to <16 x i16>*
  %4246 = load <16 x i16>, <16 x i16>* %4245, align 2, !tbaa !399
  %4247 = add nsw i64 %4115, %4232
  %4248 = getelementptr inbounds i16, i16* %blur_x, i64 %4247
  %4249 = bitcast i16* %4248 to <16 x i16>*
  %4250 = load <16 x i16>, <16 x i16>* %4249, align 2, !tbaa !399
  %4251 = getelementptr inbounds i16, i16* %4248, i64 16
  %4252 = bitcast i16* %4251 to <16 x i16>*
  %4253 = load <16 x i16>, <16 x i16>* %4252, align 2, !tbaa !399
  %4254 = add <16 x i16> %4243, %4236
  %4255 = add <16 x i16> %4254, %4250
  %4256 = add <16 x i16> %4246, %4239
  %4257 = add <16 x i16> %4256, %4253
  %4258 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4255, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4259 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4257, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4260 = shufflevector <16 x i16> %4258, <16 x i16> %4259, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4261 = lshr <32 x i16> %4260, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4262 = shufflevector <32 x i16> %4261, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4263 = add nsw i64 %4119, %4232
  %4264 = getelementptr inbounds i16, i16* %65, i64 %4263
  %4265 = bitcast i16* %4264 to <16 x i16>*
  store <16 x i16> %4262, <16 x i16>* %4265, align 2, !tbaa !401
  %4266 = shufflevector <32 x i16> %4261, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4267 = getelementptr inbounds i16, i16* %4264, i64 16
  %4268 = bitcast i16* %4267 to <16 x i16>*
  store <16 x i16> %4266, <16 x i16>* %4268, align 2, !tbaa !401
  %4269 = add nuw nsw i32 %blur_y.s0.x.x.rebased266, 1
  %.not2563 = icmp eq i32 %4269, %t1639
  br i1 %.not2563, label %"end for blur_y.s0.x.x.rebased265", label %"for blur_y.s0.x.x.rebased264"

after_bb273:                                      ; preds = %"end for blur_y.s0.x.x.rebased265", %"produce blur_x276"
  br i1 %99, label %"for blur_y.s0.x.x.rebased278.preheader", label %"end for blur_y.s0.x.x.rebased279", !prof !386

"for blur_y.s0.x.x.rebased278.preheader":         ; preds = %after_bb273
  %4270 = sext i32 %t1638 to i64
  %4271 = zext i32 %.pre-phi3260 to i64
  %4272 = mul nsw i64 %4271, %108
  %4273 = sub nsw i64 %4272, %95
  %4274 = zext i32 %.pre-phi to i64
  %4275 = mul nsw i64 %4274, %108
  %4276 = sub nsw i64 %4275, %95
  %4277 = zext i32 %.pre-phi3254 to i64
  %4278 = mul nsw i64 %4277, %108
  %4279 = sub nsw i64 %4278, %95
  %4280 = sext i32 %a26 to i64
  %4281 = add nsw i64 %4280, 10
  %4282 = mul nsw i64 %4281, %109
  %4283 = add nsw i64 %4282, %112
  br label %"for blur_y.s0.x.x.rebased278"

"produce blur_x276":                              ; preds = %"end for blur_y.s0.x.x.rebased265"
  %4284 = getelementptr inbounds i16, i16* %read_input, i64 %131
  %4285 = getelementptr inbounds i16, i16* %4284, i64 -31
  %4286 = bitcast i16* %4285 to <16 x i16>*
  %4287 = load <16 x i16>, <16 x i16>* %4286, align 2, !tbaa !396
  %4288 = getelementptr inbounds i16, i16* %4284, i64 -15
  %4289 = bitcast i16* %4288 to <16 x i16>*
  %4290 = load <16 x i16>, <16 x i16>* %4289, align 2, !tbaa !396
  %4291 = getelementptr inbounds i16, i16* %4284, i64 -30
  %4292 = bitcast i16* %4291 to <16 x i16>*
  %4293 = load <16 x i16>, <16 x i16>* %4292, align 2, !tbaa !396
  %4294 = getelementptr inbounds i16, i16* %4284, i64 -14
  %4295 = bitcast i16* %4294 to <16 x i16>*
  %4296 = load <16 x i16>, <16 x i16>* %4295, align 2, !tbaa !396
  %4297 = getelementptr inbounds i16, i16* %4284, i64 -32
  %4298 = bitcast i16* %4297 to <16 x i16>*
  %4299 = load <16 x i16>, <16 x i16>* %4298, align 2, !tbaa !396
  %4300 = getelementptr inbounds i16, i16* %4284, i64 -16
  %4301 = bitcast i16* %4300 to <16 x i16>*
  %4302 = load <16 x i16>, <16 x i16>* %4301, align 2, !tbaa !396
  %4303 = add <16 x i16> %4293, %4287
  %4304 = add <16 x i16> %4303, %4299
  %4305 = add <16 x i16> %4296, %4290
  %4306 = add <16 x i16> %4305, %4302
  %4307 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4304, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4306, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4309 = shufflevector <16 x i16> %4307, <16 x i16> %4308, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4310 = lshr <32 x i16> %4309, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4311 = shufflevector <32 x i16> %4310, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4312 = zext i32 %.pre-phi to i64
  %4313 = mul nsw i64 %96, %4312
  %4314 = add nsw i64 %98, %4313
  %4315 = getelementptr inbounds i16, i16* %blur_x, i64 %4314
  %4316 = getelementptr inbounds i16, i16* %4315, i64 -32
  %4317 = bitcast i16* %4316 to <16 x i16>*
  store <16 x i16> %4311, <16 x i16>* %4317, align 2, !tbaa !399
  %4318 = shufflevector <32 x i16> %4310, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4319 = getelementptr inbounds i16, i16* %4315, i64 -16
  %4320 = bitcast i16* %4319 to <16 x i16>*
  store <16 x i16> %4318, <16 x i16>* %4320, align 2, !tbaa !399
  %4321 = zext i32 %.pre-phi3260 to i64
  %4322 = mul nsw i64 %4321, %108
  %4323 = add nsw i64 %4322, %93
  %4324 = getelementptr inbounds i16, i16* %blur_x, i64 %4323
  %4325 = getelementptr inbounds i16, i16* %4324, i64 -32
  %4326 = bitcast i16* %4325 to <16 x i16>*
  %4327 = load <16 x i16>, <16 x i16>* %4326, align 2, !tbaa !399
  %4328 = getelementptr inbounds i16, i16* %4324, i64 -16
  %4329 = bitcast i16* %4328 to <16 x i16>*
  %4330 = load <16 x i16>, <16 x i16>* %4329, align 2, !tbaa !399
  %4331 = mul nsw i64 %4312, %108
  %4332 = add nsw i64 %4331, %93
  %4333 = getelementptr inbounds i16, i16* %blur_x, i64 %4332
  %4334 = getelementptr inbounds i16, i16* %4333, i64 -32
  %4335 = bitcast i16* %4334 to <16 x i16>*
  %4336 = load <16 x i16>, <16 x i16>* %4335, align 2, !tbaa !399
  %4337 = getelementptr inbounds i16, i16* %4333, i64 -16
  %4338 = bitcast i16* %4337 to <16 x i16>*
  %4339 = load <16 x i16>, <16 x i16>* %4338, align 2, !tbaa !399
  %4340 = zext i32 %.pre-phi3254 to i64
  %4341 = mul nsw i64 %4340, %108
  %4342 = add nsw i64 %4341, %93
  %4343 = getelementptr inbounds i16, i16* %blur_x, i64 %4342
  %4344 = getelementptr inbounds i16, i16* %4343, i64 -32
  %4345 = bitcast i16* %4344 to <16 x i16>*
  %4346 = load <16 x i16>, <16 x i16>* %4345, align 2, !tbaa !399
  %4347 = getelementptr inbounds i16, i16* %4343, i64 -16
  %4348 = bitcast i16* %4347 to <16 x i16>*
  %4349 = load <16 x i16>, <16 x i16>* %4348, align 2, !tbaa !399
  %4350 = add <16 x i16> %4336, %4327
  %4351 = add <16 x i16> %4350, %4346
  %4352 = add <16 x i16> %4339, %4330
  %4353 = add <16 x i16> %4352, %4349
  %4354 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4351, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4355 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4353, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4356 = shufflevector <16 x i16> %4354, <16 x i16> %4355, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4357 = lshr <32 x i16> %4356, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4358 = shufflevector <32 x i16> %4357, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4359 = sext i32 %a26 to i64
  %4360 = add nsw i64 %4359, 10
  %4361 = mul nsw i64 %4360, %109
  %4362 = add nsw i64 %111, %4361
  %4363 = getelementptr inbounds i16, i16* %65, i64 %4362
  %4364 = getelementptr inbounds i16, i16* %4363, i64 -32
  %4365 = bitcast i16* %4364 to <16 x i16>*
  store <16 x i16> %4358, <16 x i16>* %4365, align 2, !tbaa !401
  %4366 = shufflevector <32 x i16> %4357, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4367 = getelementptr inbounds i16, i16* %4363, i64 -16
  %4368 = bitcast i16* %4367 to <16 x i16>*
  store <16 x i16> %4366, <16 x i16>* %4368, align 2, !tbaa !401
  br label %after_bb273

"for blur_y.s0.x.x.rebased278":                   ; preds = %"for blur_y.s0.x.x.rebased278.preheader", %"consume blur_x285"
  %indvars.iv3063 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased278.preheader" ], [ %indvars.iv.next3064, %"consume blur_x285" ]
  %4369 = add nsw i64 %indvars.iv3063, %100
  %4370 = icmp slt i64 %4369, 1
  %4371 = trunc i64 %4369 to i32
  %4372 = shl nsw i32 %4371, 5
  %4373 = icmp sgt i32 %4, %4372
  %4374 = or i1 %4370, %4373
  br i1 %4374, label %"produce blur_x284", label %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge"

"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased278"
  %.pre3279 = shl nsw i64 %4369, 5
  br label %"consume blur_x285"

"end for blur_y.s0.x.x.rebased279":               ; preds = %"consume blur_x285", %after_bb273
  br i1 %101, label %"for blur_y.s0.x.x.rebased286.preheader", label %"end for blur_y.s0.x.x.rebased287", !prof !386

"for blur_y.s0.x.x.rebased286.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased279"
  %4375 = sext i32 %t1638 to i64
  %4376 = zext i32 %.pre-phi3260 to i64
  %4377 = mul nsw i64 %4376, %108
  %4378 = sub nsw i64 %4377, %95
  %4379 = zext i32 %.pre-phi to i64
  %4380 = mul nsw i64 %4379, %108
  %4381 = sub nsw i64 %4380, %95
  %4382 = zext i32 %.pre-phi3254 to i64
  %4383 = mul nsw i64 %4382, %108
  %4384 = sub nsw i64 %4383, %95
  %4385 = sext i32 %a26 to i64
  %4386 = add nsw i64 %4385, 10
  %4387 = mul nsw i64 %4386, %109
  %4388 = add nsw i64 %4387, %112
  br label %"for blur_y.s0.x.x.rebased286"

"produce blur_x284":                              ; preds = %"for blur_y.s0.x.x.rebased278"
  %t832 = add nsw i32 %4372, %t1809
  %4389 = sext i32 %t832 to i64
  %4390 = getelementptr inbounds i16, i16* %read_input, i64 %4389
  %4391 = getelementptr inbounds i16, i16* %4390, i64 1
  %4392 = bitcast i16* %4391 to <16 x i16>*
  %4393 = load <16 x i16>, <16 x i16>* %4392, align 2, !tbaa !396
  %4394 = getelementptr inbounds i16, i16* %4390, i64 17
  %4395 = bitcast i16* %4394 to <16 x i16>*
  %4396 = load <16 x i16>, <16 x i16>* %4395, align 2, !tbaa !396
  %4397 = getelementptr inbounds i16, i16* %4390, i64 2
  %4398 = bitcast i16* %4397 to <16 x i16>*
  %4399 = load <16 x i16>, <16 x i16>* %4398, align 2, !tbaa !396
  %4400 = getelementptr inbounds i16, i16* %4390, i64 18
  %4401 = bitcast i16* %4400 to <16 x i16>*
  %4402 = load <16 x i16>, <16 x i16>* %4401, align 2, !tbaa !396
  %4403 = bitcast i16* %4390 to <16 x i16>*
  %4404 = load <16 x i16>, <16 x i16>* %4403, align 2, !tbaa !396
  %4405 = getelementptr inbounds i16, i16* %4390, i64 16
  %4406 = bitcast i16* %4405 to <16 x i16>*
  %4407 = load <16 x i16>, <16 x i16>* %4406, align 2, !tbaa !396
  %4408 = add <16 x i16> %4399, %4393
  %4409 = add <16 x i16> %4408, %4404
  %4410 = add <16 x i16> %4402, %4396
  %4411 = add <16 x i16> %4410, %4407
  %4412 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4409, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4413 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4411, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4414 = shufflevector <16 x i16> %4412, <16 x i16> %4413, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4415 = lshr <32 x i16> %4414, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4416 = shufflevector <32 x i16> %4415, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4417 = shl nsw i64 %4369, 5
  %4418 = add nsw i64 %4417, %4270
  %4419 = getelementptr inbounds i16, i16* %blur_x, i64 %4418
  %4420 = bitcast i16* %4419 to <16 x i16>*
  store <16 x i16> %4416, <16 x i16>* %4420, align 2, !tbaa !399
  %4421 = shufflevector <32 x i16> %4415, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4422 = getelementptr inbounds i16, i16* %4419, i64 16
  %4423 = bitcast i16* %4422 to <16 x i16>*
  store <16 x i16> %4421, <16 x i16>* %4423, align 2, !tbaa !399
  br label %"consume blur_x285"

"consume blur_x285":                              ; preds = %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge", %"produce blur_x284"
  %.pre-phi3280 = phi i64 [ %.pre3279, %"for blur_y.s0.x.x.rebased278.consume blur_x285_crit_edge" ], [ %4417, %"produce blur_x284" ]
  %4424 = add nsw i64 %4273, %.pre-phi3280
  %4425 = getelementptr inbounds i16, i16* %blur_x, i64 %4424
  %4426 = bitcast i16* %4425 to <16 x i16>*
  %4427 = load <16 x i16>, <16 x i16>* %4426, align 2, !tbaa !399
  %4428 = getelementptr inbounds i16, i16* %4425, i64 16
  %4429 = bitcast i16* %4428 to <16 x i16>*
  %4430 = load <16 x i16>, <16 x i16>* %4429, align 2, !tbaa !399
  %4431 = add nsw i64 %4276, %.pre-phi3280
  %4432 = getelementptr inbounds i16, i16* %blur_x, i64 %4431
  %4433 = bitcast i16* %4432 to <16 x i16>*
  %4434 = load <16 x i16>, <16 x i16>* %4433, align 2, !tbaa !399
  %4435 = getelementptr inbounds i16, i16* %4432, i64 16
  %4436 = bitcast i16* %4435 to <16 x i16>*
  %4437 = load <16 x i16>, <16 x i16>* %4436, align 2, !tbaa !399
  %4438 = add nsw i64 %4279, %.pre-phi3280
  %4439 = getelementptr inbounds i16, i16* %blur_x, i64 %4438
  %4440 = bitcast i16* %4439 to <16 x i16>*
  %4441 = load <16 x i16>, <16 x i16>* %4440, align 2, !tbaa !399
  %4442 = getelementptr inbounds i16, i16* %4439, i64 16
  %4443 = bitcast i16* %4442 to <16 x i16>*
  %4444 = load <16 x i16>, <16 x i16>* %4443, align 2, !tbaa !399
  %4445 = add <16 x i16> %4434, %4427
  %4446 = add <16 x i16> %4445, %4441
  %4447 = add <16 x i16> %4437, %4430
  %4448 = add <16 x i16> %4447, %4444
  %4449 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4446, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4450 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4448, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4451 = shufflevector <16 x i16> %4449, <16 x i16> %4450, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4452 = lshr <32 x i16> %4451, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4453 = shufflevector <32 x i16> %4452, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4454 = add nsw i64 %4283, %.pre-phi3280
  %4455 = getelementptr inbounds i16, i16* %65, i64 %4454
  %4456 = bitcast i16* %4455 to <16 x i16>*
  store <16 x i16> %4453, <16 x i16>* %4456, align 2, !tbaa !401
  %4457 = shufflevector <32 x i16> %4452, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4458 = getelementptr inbounds i16, i16* %4455, i64 16
  %4459 = bitcast i16* %4458 to <16 x i16>*
  store <16 x i16> %4457, <16 x i16>* %4459, align 2, !tbaa !401
  %indvars.iv.next3064 = add nuw nsw i64 %indvars.iv3063, 1
  %.not2562 = icmp eq i64 %indvars.iv.next3064, %180
  br i1 %.not2562, label %"end for blur_y.s0.x.x.rebased279", label %"for blur_y.s0.x.x.rebased278"

"for blur_y.s0.x.x.rebased286":                   ; preds = %"for blur_y.s0.x.x.rebased286.preheader", %"consume blur_x294"
  %blur_y.s0.x.x.rebased288 = phi i32 [ %4538, %"consume blur_x294" ], [ 0, %"for blur_y.s0.x.x.rebased286.preheader" ]
  %4460 = add nsw i32 %blur_y.s0.x.x.rebased288, %t1582
  %a161 = shl nsw i32 %4460, 5
  %4461 = icmp sgt i32 %a14, %a161
  %b167 = select i1 %4461, i32 %a161, i32 %a14
  %4462 = icmp slt i32 %4460, 1
  %4463 = icmp sgt i32 %4, %a161
  %4464 = or i1 %4462, %4463
  br i1 %4464, label %"produce blur_x292", label %"consume blur_x294"

"end for blur_y.s0.x.x.rebased287":               ; preds = %"consume blur_x294", %"end for blur_y.s0.x.x.rebased279"
  br i1 %34, label %"produce blur_x298", label %after_bb295

"produce blur_x292":                              ; preds = %"for blur_y.s0.x.x.rebased286"
  %4465 = icmp slt i32 %b167, %4
  %blur_x.s0.x.v1.base.s293 = select i1 %4465, i32 %b167, i32 %4
  %t837 = add nsw i32 %blur_x.s0.x.v1.base.s293, %t1809
  %4466 = sext i32 %t837 to i64
  %4467 = getelementptr inbounds i16, i16* %read_input, i64 %4466
  %4468 = getelementptr inbounds i16, i16* %4467, i64 1
  %4469 = bitcast i16* %4468 to <16 x i16>*
  %4470 = load <16 x i16>, <16 x i16>* %4469, align 2, !tbaa !396
  %4471 = getelementptr inbounds i16, i16* %4467, i64 17
  %4472 = bitcast i16* %4471 to <16 x i16>*
  %4473 = load <16 x i16>, <16 x i16>* %4472, align 2, !tbaa !396
  %4474 = getelementptr inbounds i16, i16* %4467, i64 2
  %4475 = bitcast i16* %4474 to <16 x i16>*
  %4476 = load <16 x i16>, <16 x i16>* %4475, align 2, !tbaa !396
  %4477 = getelementptr inbounds i16, i16* %4467, i64 18
  %4478 = bitcast i16* %4477 to <16 x i16>*
  %4479 = load <16 x i16>, <16 x i16>* %4478, align 2, !tbaa !396
  %4480 = bitcast i16* %4467 to <16 x i16>*
  %4481 = load <16 x i16>, <16 x i16>* %4480, align 2, !tbaa !396
  %4482 = getelementptr inbounds i16, i16* %4467, i64 16
  %4483 = bitcast i16* %4482 to <16 x i16>*
  %4484 = load <16 x i16>, <16 x i16>* %4483, align 2, !tbaa !396
  %4485 = add <16 x i16> %4476, %4470
  %4486 = add <16 x i16> %4485, %4481
  %4487 = add <16 x i16> %4479, %4473
  %4488 = add <16 x i16> %4487, %4484
  %4489 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4486, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4490 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4488, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4491 = shufflevector <16 x i16> %4489, <16 x i16> %4490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4492 = lshr <32 x i16> %4491, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4493 = shufflevector <32 x i16> %4492, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4494 = sext i32 %blur_x.s0.x.v1.base.s293 to i64
  %4495 = add nsw i64 %4494, %4375
  %4496 = getelementptr inbounds i16, i16* %blur_x, i64 %4495
  %4497 = bitcast i16* %4496 to <16 x i16>*
  store <16 x i16> %4493, <16 x i16>* %4497, align 2, !tbaa !399
  %4498 = shufflevector <32 x i16> %4492, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4499 = getelementptr inbounds i16, i16* %4496, i64 16
  %4500 = bitcast i16* %4499 to <16 x i16>*
  store <16 x i16> %4498, <16 x i16>* %4500, align 2, !tbaa !399
  br label %"consume blur_x294"

"consume blur_x294":                              ; preds = %"for blur_y.s0.x.x.rebased286", %"produce blur_x292"
  %4501 = sext i32 %b167 to i64
  %4502 = add nsw i64 %4378, %4501
  %4503 = getelementptr inbounds i16, i16* %blur_x, i64 %4502
  %4504 = bitcast i16* %4503 to <16 x i16>*
  %4505 = load <16 x i16>, <16 x i16>* %4504, align 2, !tbaa !399
  %4506 = getelementptr inbounds i16, i16* %4503, i64 16
  %4507 = bitcast i16* %4506 to <16 x i16>*
  %4508 = load <16 x i16>, <16 x i16>* %4507, align 2, !tbaa !399
  %4509 = add nsw i64 %4381, %4501
  %4510 = getelementptr inbounds i16, i16* %blur_x, i64 %4509
  %4511 = bitcast i16* %4510 to <16 x i16>*
  %4512 = load <16 x i16>, <16 x i16>* %4511, align 2, !tbaa !399
  %4513 = getelementptr inbounds i16, i16* %4510, i64 16
  %4514 = bitcast i16* %4513 to <16 x i16>*
  %4515 = load <16 x i16>, <16 x i16>* %4514, align 2, !tbaa !399
  %4516 = add nsw i64 %4384, %4501
  %4517 = getelementptr inbounds i16, i16* %blur_x, i64 %4516
  %4518 = bitcast i16* %4517 to <16 x i16>*
  %4519 = load <16 x i16>, <16 x i16>* %4518, align 2, !tbaa !399
  %4520 = getelementptr inbounds i16, i16* %4517, i64 16
  %4521 = bitcast i16* %4520 to <16 x i16>*
  %4522 = load <16 x i16>, <16 x i16>* %4521, align 2, !tbaa !399
  %4523 = add <16 x i16> %4512, %4505
  %4524 = add <16 x i16> %4523, %4519
  %4525 = add <16 x i16> %4515, %4508
  %4526 = add <16 x i16> %4525, %4522
  %4527 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4524, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4528 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4526, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4529 = shufflevector <16 x i16> %4527, <16 x i16> %4528, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4530 = lshr <32 x i16> %4529, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4531 = shufflevector <32 x i16> %4530, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4532 = add nsw i64 %4388, %4501
  %4533 = getelementptr inbounds i16, i16* %65, i64 %4532
  %4534 = bitcast i16* %4533 to <16 x i16>*
  store <16 x i16> %4531, <16 x i16>* %4534, align 2, !tbaa !401
  %4535 = shufflevector <32 x i16> %4530, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4536 = getelementptr inbounds i16, i16* %4533, i64 16
  %4537 = bitcast i16* %4536 to <16 x i16>*
  store <16 x i16> %4535, <16 x i16>* %4537, align 2, !tbaa !401
  %4538 = add nuw nsw i32 %blur_y.s0.x.x.rebased288, 1
  %.not2561 = icmp eq i32 %4538, %t1639
  br i1 %.not2561, label %"end for blur_y.s0.x.x.rebased287", label %"for blur_y.s0.x.x.rebased286"

after_bb295:                                      ; preds = %"end for blur_y.s0.x.x.rebased287", %"produce blur_x298"
  br i1 %99, label %"for blur_y.s0.x.x.rebased300.preheader", label %"end for blur_y.s0.x.x.rebased301", !prof !386

"for blur_y.s0.x.x.rebased300.preheader":         ; preds = %after_bb295
  %4539 = sext i32 %t1644 to i64
  %4540 = zext i32 %.pre-phi to i64
  %4541 = mul nsw i64 %4540, %108
  %4542 = sub nsw i64 %4541, %95
  %4543 = zext i32 %.pre-phi3250 to i64
  %4544 = mul nsw i64 %4543, %108
  %4545 = sub nsw i64 %4544, %95
  %4546 = zext i32 %.pre-phi3260 to i64
  %4547 = mul nsw i64 %4546, %108
  %4548 = sub nsw i64 %4547, %95
  %4549 = sext i32 %a26 to i64
  %4550 = add nsw i64 %4549, 11
  %4551 = mul nsw i64 %4550, %109
  %4552 = add nsw i64 %4551, %112
  br label %"for blur_y.s0.x.x.rebased300"

"produce blur_x298":                              ; preds = %"end for blur_y.s0.x.x.rebased287"
  %4553 = getelementptr inbounds i16, i16* %read_input, i64 %133
  %4554 = getelementptr inbounds i16, i16* %4553, i64 -31
  %4555 = bitcast i16* %4554 to <16 x i16>*
  %4556 = load <16 x i16>, <16 x i16>* %4555, align 2, !tbaa !396
  %4557 = getelementptr inbounds i16, i16* %4553, i64 -15
  %4558 = bitcast i16* %4557 to <16 x i16>*
  %4559 = load <16 x i16>, <16 x i16>* %4558, align 2, !tbaa !396
  %4560 = getelementptr inbounds i16, i16* %4553, i64 -30
  %4561 = bitcast i16* %4560 to <16 x i16>*
  %4562 = load <16 x i16>, <16 x i16>* %4561, align 2, !tbaa !396
  %4563 = getelementptr inbounds i16, i16* %4553, i64 -14
  %4564 = bitcast i16* %4563 to <16 x i16>*
  %4565 = load <16 x i16>, <16 x i16>* %4564, align 2, !tbaa !396
  %4566 = getelementptr inbounds i16, i16* %4553, i64 -32
  %4567 = bitcast i16* %4566 to <16 x i16>*
  %4568 = load <16 x i16>, <16 x i16>* %4567, align 2, !tbaa !396
  %4569 = getelementptr inbounds i16, i16* %4553, i64 -16
  %4570 = bitcast i16* %4569 to <16 x i16>*
  %4571 = load <16 x i16>, <16 x i16>* %4570, align 2, !tbaa !396
  %4572 = add <16 x i16> %4562, %4556
  %4573 = add <16 x i16> %4572, %4568
  %4574 = add <16 x i16> %4565, %4559
  %4575 = add <16 x i16> %4574, %4571
  %4576 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4573, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4577 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4575, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4578 = shufflevector <16 x i16> %4576, <16 x i16> %4577, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4579 = lshr <32 x i16> %4578, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4580 = shufflevector <32 x i16> %4579, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4581 = zext i32 %.pre-phi3250 to i64
  %4582 = mul nsw i64 %96, %4581
  %4583 = add nsw i64 %98, %4582
  %4584 = getelementptr inbounds i16, i16* %blur_x, i64 %4583
  %4585 = getelementptr inbounds i16, i16* %4584, i64 -32
  %4586 = bitcast i16* %4585 to <16 x i16>*
  store <16 x i16> %4580, <16 x i16>* %4586, align 2, !tbaa !399
  %4587 = shufflevector <32 x i16> %4579, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4588 = getelementptr inbounds i16, i16* %4584, i64 -16
  %4589 = bitcast i16* %4588 to <16 x i16>*
  store <16 x i16> %4587, <16 x i16>* %4589, align 2, !tbaa !399
  %4590 = zext i32 %.pre-phi to i64
  %4591 = mul nsw i64 %4590, %108
  %4592 = add nsw i64 %4591, %93
  %4593 = getelementptr inbounds i16, i16* %blur_x, i64 %4592
  %4594 = getelementptr inbounds i16, i16* %4593, i64 -32
  %4595 = bitcast i16* %4594 to <16 x i16>*
  %4596 = load <16 x i16>, <16 x i16>* %4595, align 2, !tbaa !399
  %4597 = getelementptr inbounds i16, i16* %4593, i64 -16
  %4598 = bitcast i16* %4597 to <16 x i16>*
  %4599 = load <16 x i16>, <16 x i16>* %4598, align 2, !tbaa !399
  %4600 = mul nsw i64 %4581, %108
  %4601 = add nsw i64 %4600, %93
  %4602 = getelementptr inbounds i16, i16* %blur_x, i64 %4601
  %4603 = getelementptr inbounds i16, i16* %4602, i64 -32
  %4604 = bitcast i16* %4603 to <16 x i16>*
  %4605 = load <16 x i16>, <16 x i16>* %4604, align 2, !tbaa !399
  %4606 = getelementptr inbounds i16, i16* %4602, i64 -16
  %4607 = bitcast i16* %4606 to <16 x i16>*
  %4608 = load <16 x i16>, <16 x i16>* %4607, align 2, !tbaa !399
  %4609 = zext i32 %.pre-phi3260 to i64
  %4610 = mul nsw i64 %4609, %108
  %4611 = add nsw i64 %4610, %93
  %4612 = getelementptr inbounds i16, i16* %blur_x, i64 %4611
  %4613 = getelementptr inbounds i16, i16* %4612, i64 -32
  %4614 = bitcast i16* %4613 to <16 x i16>*
  %4615 = load <16 x i16>, <16 x i16>* %4614, align 2, !tbaa !399
  %4616 = getelementptr inbounds i16, i16* %4612, i64 -16
  %4617 = bitcast i16* %4616 to <16 x i16>*
  %4618 = load <16 x i16>, <16 x i16>* %4617, align 2, !tbaa !399
  %4619 = add <16 x i16> %4605, %4596
  %4620 = add <16 x i16> %4619, %4615
  %4621 = add <16 x i16> %4608, %4599
  %4622 = add <16 x i16> %4621, %4618
  %4623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4620, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4622, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4625 = shufflevector <16 x i16> %4623, <16 x i16> %4624, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4626 = lshr <32 x i16> %4625, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4627 = shufflevector <32 x i16> %4626, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4628 = sext i32 %a26 to i64
  %4629 = add nsw i64 %4628, 11
  %4630 = mul nsw i64 %4629, %109
  %4631 = add nsw i64 %111, %4630
  %4632 = getelementptr inbounds i16, i16* %65, i64 %4631
  %4633 = getelementptr inbounds i16, i16* %4632, i64 -32
  %4634 = bitcast i16* %4633 to <16 x i16>*
  store <16 x i16> %4627, <16 x i16>* %4634, align 2, !tbaa !401
  %4635 = shufflevector <32 x i16> %4626, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4636 = getelementptr inbounds i16, i16* %4632, i64 -16
  %4637 = bitcast i16* %4636 to <16 x i16>*
  store <16 x i16> %4635, <16 x i16>* %4637, align 2, !tbaa !401
  br label %after_bb295

"for blur_y.s0.x.x.rebased300":                   ; preds = %"for blur_y.s0.x.x.rebased300.preheader", %"consume blur_x307"
  %indvars.iv3066 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased300.preheader" ], [ %indvars.iv.next3067, %"consume blur_x307" ]
  %4638 = add nsw i64 %indvars.iv3066, %100
  %4639 = icmp slt i64 %4638, 1
  %4640 = trunc i64 %4638 to i32
  %4641 = shl nsw i32 %4640, 5
  %4642 = icmp sgt i32 %4, %4641
  %4643 = or i1 %4639, %4642
  br i1 %4643, label %"produce blur_x306", label %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge"

"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased300"
  %.pre3281 = shl nsw i64 %4638, 5
  br label %"consume blur_x307"

"end for blur_y.s0.x.x.rebased301":               ; preds = %"consume blur_x307", %after_bb295
  br i1 %101, label %"for blur_y.s0.x.x.rebased308.preheader", label %"end for blur_y.s0.x.x.rebased309", !prof !386

"for blur_y.s0.x.x.rebased308.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased301"
  %4644 = sext i32 %t1644 to i64
  %4645 = zext i32 %.pre-phi to i64
  %4646 = mul nsw i64 %4645, %108
  %4647 = sub nsw i64 %4646, %95
  %4648 = zext i32 %.pre-phi3250 to i64
  %4649 = mul nsw i64 %4648, %108
  %4650 = sub nsw i64 %4649, %95
  %4651 = zext i32 %.pre-phi3260 to i64
  %4652 = mul nsw i64 %4651, %108
  %4653 = sub nsw i64 %4652, %95
  %4654 = sext i32 %a26 to i64
  %4655 = add nsw i64 %4654, 11
  %4656 = mul nsw i64 %4655, %109
  %4657 = add nsw i64 %4656, %112
  br label %"for blur_y.s0.x.x.rebased308"

"produce blur_x306":                              ; preds = %"for blur_y.s0.x.x.rebased300"
  %t848 = add nsw i32 %4641, %t1825
  %4658 = sext i32 %t848 to i64
  %4659 = getelementptr inbounds i16, i16* %read_input, i64 %4658
  %4660 = getelementptr inbounds i16, i16* %4659, i64 1
  %4661 = bitcast i16* %4660 to <16 x i16>*
  %4662 = load <16 x i16>, <16 x i16>* %4661, align 2, !tbaa !396
  %4663 = getelementptr inbounds i16, i16* %4659, i64 17
  %4664 = bitcast i16* %4663 to <16 x i16>*
  %4665 = load <16 x i16>, <16 x i16>* %4664, align 2, !tbaa !396
  %4666 = getelementptr inbounds i16, i16* %4659, i64 2
  %4667 = bitcast i16* %4666 to <16 x i16>*
  %4668 = load <16 x i16>, <16 x i16>* %4667, align 2, !tbaa !396
  %4669 = getelementptr inbounds i16, i16* %4659, i64 18
  %4670 = bitcast i16* %4669 to <16 x i16>*
  %4671 = load <16 x i16>, <16 x i16>* %4670, align 2, !tbaa !396
  %4672 = bitcast i16* %4659 to <16 x i16>*
  %4673 = load <16 x i16>, <16 x i16>* %4672, align 2, !tbaa !396
  %4674 = getelementptr inbounds i16, i16* %4659, i64 16
  %4675 = bitcast i16* %4674 to <16 x i16>*
  %4676 = load <16 x i16>, <16 x i16>* %4675, align 2, !tbaa !396
  %4677 = add <16 x i16> %4668, %4662
  %4678 = add <16 x i16> %4677, %4673
  %4679 = add <16 x i16> %4671, %4665
  %4680 = add <16 x i16> %4679, %4676
  %4681 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4678, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4682 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4680, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4683 = shufflevector <16 x i16> %4681, <16 x i16> %4682, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4684 = lshr <32 x i16> %4683, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4685 = shufflevector <32 x i16> %4684, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4686 = shl nsw i64 %4638, 5
  %4687 = add nsw i64 %4686, %4539
  %4688 = getelementptr inbounds i16, i16* %blur_x, i64 %4687
  %4689 = bitcast i16* %4688 to <16 x i16>*
  store <16 x i16> %4685, <16 x i16>* %4689, align 2, !tbaa !399
  %4690 = shufflevector <32 x i16> %4684, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4691 = getelementptr inbounds i16, i16* %4688, i64 16
  %4692 = bitcast i16* %4691 to <16 x i16>*
  store <16 x i16> %4690, <16 x i16>* %4692, align 2, !tbaa !399
  br label %"consume blur_x307"

"consume blur_x307":                              ; preds = %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge", %"produce blur_x306"
  %.pre-phi3282 = phi i64 [ %.pre3281, %"for blur_y.s0.x.x.rebased300.consume blur_x307_crit_edge" ], [ %4686, %"produce blur_x306" ]
  %4693 = add nsw i64 %4542, %.pre-phi3282
  %4694 = getelementptr inbounds i16, i16* %blur_x, i64 %4693
  %4695 = bitcast i16* %4694 to <16 x i16>*
  %4696 = load <16 x i16>, <16 x i16>* %4695, align 2, !tbaa !399
  %4697 = getelementptr inbounds i16, i16* %4694, i64 16
  %4698 = bitcast i16* %4697 to <16 x i16>*
  %4699 = load <16 x i16>, <16 x i16>* %4698, align 2, !tbaa !399
  %4700 = add nsw i64 %4545, %.pre-phi3282
  %4701 = getelementptr inbounds i16, i16* %blur_x, i64 %4700
  %4702 = bitcast i16* %4701 to <16 x i16>*
  %4703 = load <16 x i16>, <16 x i16>* %4702, align 2, !tbaa !399
  %4704 = getelementptr inbounds i16, i16* %4701, i64 16
  %4705 = bitcast i16* %4704 to <16 x i16>*
  %4706 = load <16 x i16>, <16 x i16>* %4705, align 2, !tbaa !399
  %4707 = add nsw i64 %4548, %.pre-phi3282
  %4708 = getelementptr inbounds i16, i16* %blur_x, i64 %4707
  %4709 = bitcast i16* %4708 to <16 x i16>*
  %4710 = load <16 x i16>, <16 x i16>* %4709, align 2, !tbaa !399
  %4711 = getelementptr inbounds i16, i16* %4708, i64 16
  %4712 = bitcast i16* %4711 to <16 x i16>*
  %4713 = load <16 x i16>, <16 x i16>* %4712, align 2, !tbaa !399
  %4714 = add <16 x i16> %4703, %4696
  %4715 = add <16 x i16> %4714, %4710
  %4716 = add <16 x i16> %4706, %4699
  %4717 = add <16 x i16> %4716, %4713
  %4718 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4715, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4719 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4717, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4720 = shufflevector <16 x i16> %4718, <16 x i16> %4719, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4721 = lshr <32 x i16> %4720, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4722 = shufflevector <32 x i16> %4721, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4723 = add nsw i64 %4552, %.pre-phi3282
  %4724 = getelementptr inbounds i16, i16* %65, i64 %4723
  %4725 = bitcast i16* %4724 to <16 x i16>*
  store <16 x i16> %4722, <16 x i16>* %4725, align 2, !tbaa !401
  %4726 = shufflevector <32 x i16> %4721, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4727 = getelementptr inbounds i16, i16* %4724, i64 16
  %4728 = bitcast i16* %4727 to <16 x i16>*
  store <16 x i16> %4726, <16 x i16>* %4728, align 2, !tbaa !401
  %indvars.iv.next3067 = add nuw nsw i64 %indvars.iv3066, 1
  %.not2560 = icmp eq i64 %indvars.iv.next3067, %180
  br i1 %.not2560, label %"end for blur_y.s0.x.x.rebased301", label %"for blur_y.s0.x.x.rebased300"

"for blur_y.s0.x.x.rebased308":                   ; preds = %"for blur_y.s0.x.x.rebased308.preheader", %"consume blur_x316"
  %blur_y.s0.x.x.rebased310 = phi i32 [ %4807, %"consume blur_x316" ], [ 0, %"for blur_y.s0.x.x.rebased308.preheader" ]
  %4729 = add nsw i32 %blur_y.s0.x.x.rebased310, %t1582
  %a168 = shl nsw i32 %4729, 5
  %4730 = icmp sgt i32 %a14, %a168
  %b174 = select i1 %4730, i32 %a168, i32 %a14
  %4731 = icmp slt i32 %4729, 1
  %4732 = icmp sgt i32 %4, %a168
  %4733 = or i1 %4731, %4732
  br i1 %4733, label %"produce blur_x314", label %"consume blur_x316"

"end for blur_y.s0.x.x.rebased309":               ; preds = %"consume blur_x316", %"end for blur_y.s0.x.x.rebased301"
  br i1 %34, label %"produce blur_x320", label %after_bb317

"produce blur_x314":                              ; preds = %"for blur_y.s0.x.x.rebased308"
  %4734 = icmp slt i32 %b174, %4
  %blur_x.s0.x.v1.base.s315 = select i1 %4734, i32 %b174, i32 %4
  %t853 = add nsw i32 %blur_x.s0.x.v1.base.s315, %t1825
  %4735 = sext i32 %t853 to i64
  %4736 = getelementptr inbounds i16, i16* %read_input, i64 %4735
  %4737 = getelementptr inbounds i16, i16* %4736, i64 1
  %4738 = bitcast i16* %4737 to <16 x i16>*
  %4739 = load <16 x i16>, <16 x i16>* %4738, align 2, !tbaa !396
  %4740 = getelementptr inbounds i16, i16* %4736, i64 17
  %4741 = bitcast i16* %4740 to <16 x i16>*
  %4742 = load <16 x i16>, <16 x i16>* %4741, align 2, !tbaa !396
  %4743 = getelementptr inbounds i16, i16* %4736, i64 2
  %4744 = bitcast i16* %4743 to <16 x i16>*
  %4745 = load <16 x i16>, <16 x i16>* %4744, align 2, !tbaa !396
  %4746 = getelementptr inbounds i16, i16* %4736, i64 18
  %4747 = bitcast i16* %4746 to <16 x i16>*
  %4748 = load <16 x i16>, <16 x i16>* %4747, align 2, !tbaa !396
  %4749 = bitcast i16* %4736 to <16 x i16>*
  %4750 = load <16 x i16>, <16 x i16>* %4749, align 2, !tbaa !396
  %4751 = getelementptr inbounds i16, i16* %4736, i64 16
  %4752 = bitcast i16* %4751 to <16 x i16>*
  %4753 = load <16 x i16>, <16 x i16>* %4752, align 2, !tbaa !396
  %4754 = add <16 x i16> %4745, %4739
  %4755 = add <16 x i16> %4754, %4750
  %4756 = add <16 x i16> %4748, %4742
  %4757 = add <16 x i16> %4756, %4753
  %4758 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4755, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4759 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4757, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4760 = shufflevector <16 x i16> %4758, <16 x i16> %4759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4761 = lshr <32 x i16> %4760, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4762 = shufflevector <32 x i16> %4761, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4763 = sext i32 %blur_x.s0.x.v1.base.s315 to i64
  %4764 = add nsw i64 %4763, %4644
  %4765 = getelementptr inbounds i16, i16* %blur_x, i64 %4764
  %4766 = bitcast i16* %4765 to <16 x i16>*
  store <16 x i16> %4762, <16 x i16>* %4766, align 2, !tbaa !399
  %4767 = shufflevector <32 x i16> %4761, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4768 = getelementptr inbounds i16, i16* %4765, i64 16
  %4769 = bitcast i16* %4768 to <16 x i16>*
  store <16 x i16> %4767, <16 x i16>* %4769, align 2, !tbaa !399
  br label %"consume blur_x316"

"consume blur_x316":                              ; preds = %"for blur_y.s0.x.x.rebased308", %"produce blur_x314"
  %4770 = sext i32 %b174 to i64
  %4771 = add nsw i64 %4647, %4770
  %4772 = getelementptr inbounds i16, i16* %blur_x, i64 %4771
  %4773 = bitcast i16* %4772 to <16 x i16>*
  %4774 = load <16 x i16>, <16 x i16>* %4773, align 2, !tbaa !399
  %4775 = getelementptr inbounds i16, i16* %4772, i64 16
  %4776 = bitcast i16* %4775 to <16 x i16>*
  %4777 = load <16 x i16>, <16 x i16>* %4776, align 2, !tbaa !399
  %4778 = add nsw i64 %4650, %4770
  %4779 = getelementptr inbounds i16, i16* %blur_x, i64 %4778
  %4780 = bitcast i16* %4779 to <16 x i16>*
  %4781 = load <16 x i16>, <16 x i16>* %4780, align 2, !tbaa !399
  %4782 = getelementptr inbounds i16, i16* %4779, i64 16
  %4783 = bitcast i16* %4782 to <16 x i16>*
  %4784 = load <16 x i16>, <16 x i16>* %4783, align 2, !tbaa !399
  %4785 = add nsw i64 %4653, %4770
  %4786 = getelementptr inbounds i16, i16* %blur_x, i64 %4785
  %4787 = bitcast i16* %4786 to <16 x i16>*
  %4788 = load <16 x i16>, <16 x i16>* %4787, align 2, !tbaa !399
  %4789 = getelementptr inbounds i16, i16* %4786, i64 16
  %4790 = bitcast i16* %4789 to <16 x i16>*
  %4791 = load <16 x i16>, <16 x i16>* %4790, align 2, !tbaa !399
  %4792 = add <16 x i16> %4781, %4774
  %4793 = add <16 x i16> %4792, %4788
  %4794 = add <16 x i16> %4784, %4777
  %4795 = add <16 x i16> %4794, %4791
  %4796 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4793, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4797 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4795, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4798 = shufflevector <16 x i16> %4796, <16 x i16> %4797, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4799 = lshr <32 x i16> %4798, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4800 = shufflevector <32 x i16> %4799, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4801 = add nsw i64 %4657, %4770
  %4802 = getelementptr inbounds i16, i16* %65, i64 %4801
  %4803 = bitcast i16* %4802 to <16 x i16>*
  store <16 x i16> %4800, <16 x i16>* %4803, align 2, !tbaa !401
  %4804 = shufflevector <32 x i16> %4799, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4805 = getelementptr inbounds i16, i16* %4802, i64 16
  %4806 = bitcast i16* %4805 to <16 x i16>*
  store <16 x i16> %4804, <16 x i16>* %4806, align 2, !tbaa !401
  %4807 = add nuw nsw i32 %blur_y.s0.x.x.rebased310, 1
  %.not2559 = icmp eq i32 %4807, %t1639
  br i1 %.not2559, label %"end for blur_y.s0.x.x.rebased309", label %"for blur_y.s0.x.x.rebased308"

after_bb317:                                      ; preds = %"end for blur_y.s0.x.x.rebased309", %"produce blur_x320"
  br i1 %99, label %"for blur_y.s0.x.x.rebased322.preheader", label %"end for blur_y.s0.x.x.rebased323", !prof !386

"for blur_y.s0.x.x.rebased322.preheader":         ; preds = %after_bb317
  %4808 = sext i32 %t1650 to i64
  %4809 = zext i32 %.pre-phi3250 to i64
  %4810 = mul nsw i64 %4809, %108
  %4811 = sub nsw i64 %4810, %95
  %4812 = zext i32 %.pre-phi3254 to i64
  %4813 = mul nsw i64 %4812, %108
  %4814 = sub nsw i64 %4813, %95
  %4815 = zext i32 %.pre-phi to i64
  %4816 = mul nsw i64 %4815, %108
  %4817 = sub nsw i64 %4816, %95
  %4818 = sext i32 %a26 to i64
  %4819 = add nsw i64 %4818, 12
  %4820 = mul nsw i64 %4819, %109
  %4821 = add nsw i64 %4820, %112
  br label %"for blur_y.s0.x.x.rebased322"

"produce blur_x320":                              ; preds = %"end for blur_y.s0.x.x.rebased309"
  %4822 = getelementptr inbounds i16, i16* %read_input, i64 %135
  %4823 = getelementptr inbounds i16, i16* %4822, i64 -31
  %4824 = bitcast i16* %4823 to <16 x i16>*
  %4825 = load <16 x i16>, <16 x i16>* %4824, align 2, !tbaa !396
  %4826 = getelementptr inbounds i16, i16* %4822, i64 -15
  %4827 = bitcast i16* %4826 to <16 x i16>*
  %4828 = load <16 x i16>, <16 x i16>* %4827, align 2, !tbaa !396
  %4829 = getelementptr inbounds i16, i16* %4822, i64 -30
  %4830 = bitcast i16* %4829 to <16 x i16>*
  %4831 = load <16 x i16>, <16 x i16>* %4830, align 2, !tbaa !396
  %4832 = getelementptr inbounds i16, i16* %4822, i64 -14
  %4833 = bitcast i16* %4832 to <16 x i16>*
  %4834 = load <16 x i16>, <16 x i16>* %4833, align 2, !tbaa !396
  %4835 = getelementptr inbounds i16, i16* %4822, i64 -32
  %4836 = bitcast i16* %4835 to <16 x i16>*
  %4837 = load <16 x i16>, <16 x i16>* %4836, align 2, !tbaa !396
  %4838 = getelementptr inbounds i16, i16* %4822, i64 -16
  %4839 = bitcast i16* %4838 to <16 x i16>*
  %4840 = load <16 x i16>, <16 x i16>* %4839, align 2, !tbaa !396
  %4841 = add <16 x i16> %4831, %4825
  %4842 = add <16 x i16> %4841, %4837
  %4843 = add <16 x i16> %4834, %4828
  %4844 = add <16 x i16> %4843, %4840
  %4845 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4842, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4846 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4844, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4847 = shufflevector <16 x i16> %4845, <16 x i16> %4846, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4848 = lshr <32 x i16> %4847, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4849 = shufflevector <32 x i16> %4848, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4850 = zext i32 %.pre-phi3254 to i64
  %4851 = mul nsw i64 %96, %4850
  %4852 = add nsw i64 %98, %4851
  %4853 = getelementptr inbounds i16, i16* %blur_x, i64 %4852
  %4854 = getelementptr inbounds i16, i16* %4853, i64 -32
  %4855 = bitcast i16* %4854 to <16 x i16>*
  store <16 x i16> %4849, <16 x i16>* %4855, align 2, !tbaa !399
  %4856 = shufflevector <32 x i16> %4848, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4857 = getelementptr inbounds i16, i16* %4853, i64 -16
  %4858 = bitcast i16* %4857 to <16 x i16>*
  store <16 x i16> %4856, <16 x i16>* %4858, align 2, !tbaa !399
  %4859 = zext i32 %.pre-phi3250 to i64
  %4860 = mul nsw i64 %4859, %108
  %4861 = add nsw i64 %4860, %93
  %4862 = getelementptr inbounds i16, i16* %blur_x, i64 %4861
  %4863 = getelementptr inbounds i16, i16* %4862, i64 -32
  %4864 = bitcast i16* %4863 to <16 x i16>*
  %4865 = load <16 x i16>, <16 x i16>* %4864, align 2, !tbaa !399
  %4866 = getelementptr inbounds i16, i16* %4862, i64 -16
  %4867 = bitcast i16* %4866 to <16 x i16>*
  %4868 = load <16 x i16>, <16 x i16>* %4867, align 2, !tbaa !399
  %4869 = mul nsw i64 %4850, %108
  %4870 = add nsw i64 %4869, %93
  %4871 = getelementptr inbounds i16, i16* %blur_x, i64 %4870
  %4872 = getelementptr inbounds i16, i16* %4871, i64 -32
  %4873 = bitcast i16* %4872 to <16 x i16>*
  %4874 = load <16 x i16>, <16 x i16>* %4873, align 2, !tbaa !399
  %4875 = getelementptr inbounds i16, i16* %4871, i64 -16
  %4876 = bitcast i16* %4875 to <16 x i16>*
  %4877 = load <16 x i16>, <16 x i16>* %4876, align 2, !tbaa !399
  %4878 = zext i32 %.pre-phi to i64
  %4879 = mul nsw i64 %4878, %108
  %4880 = add nsw i64 %4879, %93
  %4881 = getelementptr inbounds i16, i16* %blur_x, i64 %4880
  %4882 = getelementptr inbounds i16, i16* %4881, i64 -32
  %4883 = bitcast i16* %4882 to <16 x i16>*
  %4884 = load <16 x i16>, <16 x i16>* %4883, align 2, !tbaa !399
  %4885 = getelementptr inbounds i16, i16* %4881, i64 -16
  %4886 = bitcast i16* %4885 to <16 x i16>*
  %4887 = load <16 x i16>, <16 x i16>* %4886, align 2, !tbaa !399
  %4888 = add <16 x i16> %4874, %4865
  %4889 = add <16 x i16> %4888, %4884
  %4890 = add <16 x i16> %4877, %4868
  %4891 = add <16 x i16> %4890, %4887
  %4892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4889, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4891, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4894 = shufflevector <16 x i16> %4892, <16 x i16> %4893, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4895 = lshr <32 x i16> %4894, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4896 = shufflevector <32 x i16> %4895, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4897 = sext i32 %a26 to i64
  %4898 = add nsw i64 %4897, 12
  %4899 = mul nsw i64 %4898, %109
  %4900 = add nsw i64 %111, %4899
  %4901 = getelementptr inbounds i16, i16* %65, i64 %4900
  %4902 = getelementptr inbounds i16, i16* %4901, i64 -32
  %4903 = bitcast i16* %4902 to <16 x i16>*
  store <16 x i16> %4896, <16 x i16>* %4903, align 2, !tbaa !401
  %4904 = shufflevector <32 x i16> %4895, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4905 = getelementptr inbounds i16, i16* %4901, i64 -16
  %4906 = bitcast i16* %4905 to <16 x i16>*
  store <16 x i16> %4904, <16 x i16>* %4906, align 2, !tbaa !401
  br label %after_bb317

"for blur_y.s0.x.x.rebased322":                   ; preds = %"for blur_y.s0.x.x.rebased322.preheader", %"consume blur_x329"
  %indvars.iv3069 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased322.preheader" ], [ %indvars.iv.next3070, %"consume blur_x329" ]
  %4907 = add nsw i64 %indvars.iv3069, %100
  %4908 = icmp slt i64 %4907, 1
  %4909 = trunc i64 %4907 to i32
  %4910 = shl nsw i32 %4909, 5
  %4911 = icmp sgt i32 %4, %4910
  %4912 = or i1 %4908, %4911
  br i1 %4912, label %"produce blur_x328", label %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge"

"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased322"
  %.pre3283 = shl nsw i64 %4907, 5
  br label %"consume blur_x329"

"end for blur_y.s0.x.x.rebased323":               ; preds = %"consume blur_x329", %after_bb317
  br i1 %101, label %"for blur_y.s0.x.x.rebased330.preheader", label %"end for blur_y.s0.x.x.rebased331", !prof !386

"for blur_y.s0.x.x.rebased330.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased323"
  %4913 = sext i32 %t1650 to i64
  %4914 = zext i32 %.pre-phi3250 to i64
  %4915 = mul nsw i64 %4914, %108
  %4916 = sub nsw i64 %4915, %95
  %4917 = zext i32 %.pre-phi3254 to i64
  %4918 = mul nsw i64 %4917, %108
  %4919 = sub nsw i64 %4918, %95
  %4920 = zext i32 %.pre-phi to i64
  %4921 = mul nsw i64 %4920, %108
  %4922 = sub nsw i64 %4921, %95
  %4923 = sext i32 %a26 to i64
  %4924 = add nsw i64 %4923, 12
  %4925 = mul nsw i64 %4924, %109
  %4926 = add nsw i64 %4925, %112
  br label %"for blur_y.s0.x.x.rebased330"

"produce blur_x328":                              ; preds = %"for blur_y.s0.x.x.rebased322"
  %t864 = add nsw i32 %4910, %t1841
  %4927 = sext i32 %t864 to i64
  %4928 = getelementptr inbounds i16, i16* %read_input, i64 %4927
  %4929 = getelementptr inbounds i16, i16* %4928, i64 1
  %4930 = bitcast i16* %4929 to <16 x i16>*
  %4931 = load <16 x i16>, <16 x i16>* %4930, align 2, !tbaa !396
  %4932 = getelementptr inbounds i16, i16* %4928, i64 17
  %4933 = bitcast i16* %4932 to <16 x i16>*
  %4934 = load <16 x i16>, <16 x i16>* %4933, align 2, !tbaa !396
  %4935 = getelementptr inbounds i16, i16* %4928, i64 2
  %4936 = bitcast i16* %4935 to <16 x i16>*
  %4937 = load <16 x i16>, <16 x i16>* %4936, align 2, !tbaa !396
  %4938 = getelementptr inbounds i16, i16* %4928, i64 18
  %4939 = bitcast i16* %4938 to <16 x i16>*
  %4940 = load <16 x i16>, <16 x i16>* %4939, align 2, !tbaa !396
  %4941 = bitcast i16* %4928 to <16 x i16>*
  %4942 = load <16 x i16>, <16 x i16>* %4941, align 2, !tbaa !396
  %4943 = getelementptr inbounds i16, i16* %4928, i64 16
  %4944 = bitcast i16* %4943 to <16 x i16>*
  %4945 = load <16 x i16>, <16 x i16>* %4944, align 2, !tbaa !396
  %4946 = add <16 x i16> %4937, %4931
  %4947 = add <16 x i16> %4946, %4942
  %4948 = add <16 x i16> %4940, %4934
  %4949 = add <16 x i16> %4948, %4945
  %4950 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4947, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4951 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4949, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4952 = shufflevector <16 x i16> %4950, <16 x i16> %4951, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4953 = lshr <32 x i16> %4952, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4954 = shufflevector <32 x i16> %4953, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4955 = shl nsw i64 %4907, 5
  %4956 = add nsw i64 %4955, %4808
  %4957 = getelementptr inbounds i16, i16* %blur_x, i64 %4956
  %4958 = bitcast i16* %4957 to <16 x i16>*
  store <16 x i16> %4954, <16 x i16>* %4958, align 2, !tbaa !399
  %4959 = shufflevector <32 x i16> %4953, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4960 = getelementptr inbounds i16, i16* %4957, i64 16
  %4961 = bitcast i16* %4960 to <16 x i16>*
  store <16 x i16> %4959, <16 x i16>* %4961, align 2, !tbaa !399
  br label %"consume blur_x329"

"consume blur_x329":                              ; preds = %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge", %"produce blur_x328"
  %.pre-phi3284 = phi i64 [ %.pre3283, %"for blur_y.s0.x.x.rebased322.consume blur_x329_crit_edge" ], [ %4955, %"produce blur_x328" ]
  %4962 = add nsw i64 %4811, %.pre-phi3284
  %4963 = getelementptr inbounds i16, i16* %blur_x, i64 %4962
  %4964 = bitcast i16* %4963 to <16 x i16>*
  %4965 = load <16 x i16>, <16 x i16>* %4964, align 2, !tbaa !399
  %4966 = getelementptr inbounds i16, i16* %4963, i64 16
  %4967 = bitcast i16* %4966 to <16 x i16>*
  %4968 = load <16 x i16>, <16 x i16>* %4967, align 2, !tbaa !399
  %4969 = add nsw i64 %4814, %.pre-phi3284
  %4970 = getelementptr inbounds i16, i16* %blur_x, i64 %4969
  %4971 = bitcast i16* %4970 to <16 x i16>*
  %4972 = load <16 x i16>, <16 x i16>* %4971, align 2, !tbaa !399
  %4973 = getelementptr inbounds i16, i16* %4970, i64 16
  %4974 = bitcast i16* %4973 to <16 x i16>*
  %4975 = load <16 x i16>, <16 x i16>* %4974, align 2, !tbaa !399
  %4976 = add nsw i64 %4817, %.pre-phi3284
  %4977 = getelementptr inbounds i16, i16* %blur_x, i64 %4976
  %4978 = bitcast i16* %4977 to <16 x i16>*
  %4979 = load <16 x i16>, <16 x i16>* %4978, align 2, !tbaa !399
  %4980 = getelementptr inbounds i16, i16* %4977, i64 16
  %4981 = bitcast i16* %4980 to <16 x i16>*
  %4982 = load <16 x i16>, <16 x i16>* %4981, align 2, !tbaa !399
  %4983 = add <16 x i16> %4972, %4965
  %4984 = add <16 x i16> %4983, %4979
  %4985 = add <16 x i16> %4975, %4968
  %4986 = add <16 x i16> %4985, %4982
  %4987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4984, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4988 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %4986, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %4989 = shufflevector <16 x i16> %4987, <16 x i16> %4988, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4990 = lshr <32 x i16> %4989, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4991 = shufflevector <32 x i16> %4990, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %4992 = add nsw i64 %4821, %.pre-phi3284
  %4993 = getelementptr inbounds i16, i16* %65, i64 %4992
  %4994 = bitcast i16* %4993 to <16 x i16>*
  store <16 x i16> %4991, <16 x i16>* %4994, align 2, !tbaa !401
  %4995 = shufflevector <32 x i16> %4990, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %4996 = getelementptr inbounds i16, i16* %4993, i64 16
  %4997 = bitcast i16* %4996 to <16 x i16>*
  store <16 x i16> %4995, <16 x i16>* %4997, align 2, !tbaa !401
  %indvars.iv.next3070 = add nuw nsw i64 %indvars.iv3069, 1
  %.not2558 = icmp eq i64 %indvars.iv.next3070, %180
  br i1 %.not2558, label %"end for blur_y.s0.x.x.rebased323", label %"for blur_y.s0.x.x.rebased322"

"for blur_y.s0.x.x.rebased330":                   ; preds = %"for blur_y.s0.x.x.rebased330.preheader", %"consume blur_x338"
  %blur_y.s0.x.x.rebased332 = phi i32 [ %5076, %"consume blur_x338" ], [ 0, %"for blur_y.s0.x.x.rebased330.preheader" ]
  %4998 = add nsw i32 %blur_y.s0.x.x.rebased332, %t1582
  %a175 = shl nsw i32 %4998, 5
  %4999 = icmp sgt i32 %a14, %a175
  %b181 = select i1 %4999, i32 %a175, i32 %a14
  %5000 = icmp slt i32 %4998, 1
  %5001 = icmp sgt i32 %4, %a175
  %5002 = or i1 %5000, %5001
  br i1 %5002, label %"produce blur_x336", label %"consume blur_x338"

"end for blur_y.s0.x.x.rebased331":               ; preds = %"consume blur_x338", %"end for blur_y.s0.x.x.rebased323"
  br i1 %34, label %"produce blur_x342", label %after_bb339

"produce blur_x336":                              ; preds = %"for blur_y.s0.x.x.rebased330"
  %5003 = icmp slt i32 %b181, %4
  %blur_x.s0.x.v1.base.s337 = select i1 %5003, i32 %b181, i32 %4
  %t869 = add nsw i32 %blur_x.s0.x.v1.base.s337, %t1841
  %5004 = sext i32 %t869 to i64
  %5005 = getelementptr inbounds i16, i16* %read_input, i64 %5004
  %5006 = getelementptr inbounds i16, i16* %5005, i64 1
  %5007 = bitcast i16* %5006 to <16 x i16>*
  %5008 = load <16 x i16>, <16 x i16>* %5007, align 2, !tbaa !396
  %5009 = getelementptr inbounds i16, i16* %5005, i64 17
  %5010 = bitcast i16* %5009 to <16 x i16>*
  %5011 = load <16 x i16>, <16 x i16>* %5010, align 2, !tbaa !396
  %5012 = getelementptr inbounds i16, i16* %5005, i64 2
  %5013 = bitcast i16* %5012 to <16 x i16>*
  %5014 = load <16 x i16>, <16 x i16>* %5013, align 2, !tbaa !396
  %5015 = getelementptr inbounds i16, i16* %5005, i64 18
  %5016 = bitcast i16* %5015 to <16 x i16>*
  %5017 = load <16 x i16>, <16 x i16>* %5016, align 2, !tbaa !396
  %5018 = bitcast i16* %5005 to <16 x i16>*
  %5019 = load <16 x i16>, <16 x i16>* %5018, align 2, !tbaa !396
  %5020 = getelementptr inbounds i16, i16* %5005, i64 16
  %5021 = bitcast i16* %5020 to <16 x i16>*
  %5022 = load <16 x i16>, <16 x i16>* %5021, align 2, !tbaa !396
  %5023 = add <16 x i16> %5014, %5008
  %5024 = add <16 x i16> %5023, %5019
  %5025 = add <16 x i16> %5017, %5011
  %5026 = add <16 x i16> %5025, %5022
  %5027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5024, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5026, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5029 = shufflevector <16 x i16> %5027, <16 x i16> %5028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5030 = lshr <32 x i16> %5029, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5031 = shufflevector <32 x i16> %5030, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5032 = sext i32 %blur_x.s0.x.v1.base.s337 to i64
  %5033 = add nsw i64 %5032, %4913
  %5034 = getelementptr inbounds i16, i16* %blur_x, i64 %5033
  %5035 = bitcast i16* %5034 to <16 x i16>*
  store <16 x i16> %5031, <16 x i16>* %5035, align 2, !tbaa !399
  %5036 = shufflevector <32 x i16> %5030, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5037 = getelementptr inbounds i16, i16* %5034, i64 16
  %5038 = bitcast i16* %5037 to <16 x i16>*
  store <16 x i16> %5036, <16 x i16>* %5038, align 2, !tbaa !399
  br label %"consume blur_x338"

"consume blur_x338":                              ; preds = %"for blur_y.s0.x.x.rebased330", %"produce blur_x336"
  %5039 = sext i32 %b181 to i64
  %5040 = add nsw i64 %4916, %5039
  %5041 = getelementptr inbounds i16, i16* %blur_x, i64 %5040
  %5042 = bitcast i16* %5041 to <16 x i16>*
  %5043 = load <16 x i16>, <16 x i16>* %5042, align 2, !tbaa !399
  %5044 = getelementptr inbounds i16, i16* %5041, i64 16
  %5045 = bitcast i16* %5044 to <16 x i16>*
  %5046 = load <16 x i16>, <16 x i16>* %5045, align 2, !tbaa !399
  %5047 = add nsw i64 %4919, %5039
  %5048 = getelementptr inbounds i16, i16* %blur_x, i64 %5047
  %5049 = bitcast i16* %5048 to <16 x i16>*
  %5050 = load <16 x i16>, <16 x i16>* %5049, align 2, !tbaa !399
  %5051 = getelementptr inbounds i16, i16* %5048, i64 16
  %5052 = bitcast i16* %5051 to <16 x i16>*
  %5053 = load <16 x i16>, <16 x i16>* %5052, align 2, !tbaa !399
  %5054 = add nsw i64 %4922, %5039
  %5055 = getelementptr inbounds i16, i16* %blur_x, i64 %5054
  %5056 = bitcast i16* %5055 to <16 x i16>*
  %5057 = load <16 x i16>, <16 x i16>* %5056, align 2, !tbaa !399
  %5058 = getelementptr inbounds i16, i16* %5055, i64 16
  %5059 = bitcast i16* %5058 to <16 x i16>*
  %5060 = load <16 x i16>, <16 x i16>* %5059, align 2, !tbaa !399
  %5061 = add <16 x i16> %5050, %5043
  %5062 = add <16 x i16> %5061, %5057
  %5063 = add <16 x i16> %5053, %5046
  %5064 = add <16 x i16> %5063, %5060
  %5065 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5062, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5066 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5064, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5067 = shufflevector <16 x i16> %5065, <16 x i16> %5066, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5068 = lshr <32 x i16> %5067, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5069 = shufflevector <32 x i16> %5068, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5070 = add nsw i64 %4926, %5039
  %5071 = getelementptr inbounds i16, i16* %65, i64 %5070
  %5072 = bitcast i16* %5071 to <16 x i16>*
  store <16 x i16> %5069, <16 x i16>* %5072, align 2, !tbaa !401
  %5073 = shufflevector <32 x i16> %5068, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5074 = getelementptr inbounds i16, i16* %5071, i64 16
  %5075 = bitcast i16* %5074 to <16 x i16>*
  store <16 x i16> %5073, <16 x i16>* %5075, align 2, !tbaa !401
  %5076 = add nuw nsw i32 %blur_y.s0.x.x.rebased332, 1
  %.not2557 = icmp eq i32 %5076, %t1639
  br i1 %.not2557, label %"end for blur_y.s0.x.x.rebased331", label %"for blur_y.s0.x.x.rebased330"

after_bb339:                                      ; preds = %"end for blur_y.s0.x.x.rebased331", %"produce blur_x342"
  br i1 %99, label %"for blur_y.s0.x.x.rebased344.preheader", label %"end for blur_y.s0.x.x.rebased345", !prof !386

"for blur_y.s0.x.x.rebased344.preheader":         ; preds = %after_bb339
  %5077 = sext i32 %t1666 to i64
  %5078 = zext i32 %.pre-phi3254 to i64
  %5079 = mul nsw i64 %5078, %108
  %5080 = sub nsw i64 %5079, %95
  %5081 = zext i32 %.pre-phi3260 to i64
  %5082 = mul nsw i64 %5081, %108
  %5083 = sub nsw i64 %5082, %95
  %5084 = zext i32 %.pre-phi3250 to i64
  %5085 = mul nsw i64 %5084, %108
  %5086 = sub nsw i64 %5085, %95
  %5087 = sext i32 %a26 to i64
  %5088 = add nsw i64 %5087, 13
  %5089 = mul nsw i64 %5088, %109
  %5090 = add nsw i64 %5089, %112
  br label %"for blur_y.s0.x.x.rebased344"

"produce blur_x342":                              ; preds = %"end for blur_y.s0.x.x.rebased331"
  %5091 = getelementptr inbounds i16, i16* %read_input, i64 %137
  %5092 = getelementptr inbounds i16, i16* %5091, i64 -31
  %5093 = bitcast i16* %5092 to <16 x i16>*
  %5094 = load <16 x i16>, <16 x i16>* %5093, align 2, !tbaa !396
  %5095 = getelementptr inbounds i16, i16* %5091, i64 -15
  %5096 = bitcast i16* %5095 to <16 x i16>*
  %5097 = load <16 x i16>, <16 x i16>* %5096, align 2, !tbaa !396
  %5098 = getelementptr inbounds i16, i16* %5091, i64 -30
  %5099 = bitcast i16* %5098 to <16 x i16>*
  %5100 = load <16 x i16>, <16 x i16>* %5099, align 2, !tbaa !396
  %5101 = getelementptr inbounds i16, i16* %5091, i64 -14
  %5102 = bitcast i16* %5101 to <16 x i16>*
  %5103 = load <16 x i16>, <16 x i16>* %5102, align 2, !tbaa !396
  %5104 = getelementptr inbounds i16, i16* %5091, i64 -32
  %5105 = bitcast i16* %5104 to <16 x i16>*
  %5106 = load <16 x i16>, <16 x i16>* %5105, align 2, !tbaa !396
  %5107 = getelementptr inbounds i16, i16* %5091, i64 -16
  %5108 = bitcast i16* %5107 to <16 x i16>*
  %5109 = load <16 x i16>, <16 x i16>* %5108, align 2, !tbaa !396
  %5110 = add <16 x i16> %5100, %5094
  %5111 = add <16 x i16> %5110, %5106
  %5112 = add <16 x i16> %5103, %5097
  %5113 = add <16 x i16> %5112, %5109
  %5114 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5111, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5115 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5113, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5116 = shufflevector <16 x i16> %5114, <16 x i16> %5115, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5117 = lshr <32 x i16> %5116, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5118 = shufflevector <32 x i16> %5117, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5119 = zext i32 %.pre-phi3260 to i64
  %5120 = mul nsw i64 %96, %5119
  %5121 = add nsw i64 %98, %5120
  %5122 = getelementptr inbounds i16, i16* %blur_x, i64 %5121
  %5123 = getelementptr inbounds i16, i16* %5122, i64 -32
  %5124 = bitcast i16* %5123 to <16 x i16>*
  store <16 x i16> %5118, <16 x i16>* %5124, align 2, !tbaa !399
  %5125 = shufflevector <32 x i16> %5117, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5126 = getelementptr inbounds i16, i16* %5122, i64 -16
  %5127 = bitcast i16* %5126 to <16 x i16>*
  store <16 x i16> %5125, <16 x i16>* %5127, align 2, !tbaa !399
  %5128 = zext i32 %.pre-phi3254 to i64
  %5129 = mul nsw i64 %5128, %108
  %5130 = add nsw i64 %5129, %93
  %5131 = getelementptr inbounds i16, i16* %blur_x, i64 %5130
  %5132 = getelementptr inbounds i16, i16* %5131, i64 -32
  %5133 = bitcast i16* %5132 to <16 x i16>*
  %5134 = load <16 x i16>, <16 x i16>* %5133, align 2, !tbaa !399
  %5135 = getelementptr inbounds i16, i16* %5131, i64 -16
  %5136 = bitcast i16* %5135 to <16 x i16>*
  %5137 = load <16 x i16>, <16 x i16>* %5136, align 2, !tbaa !399
  %5138 = mul nsw i64 %5119, %108
  %5139 = add nsw i64 %5138, %93
  %5140 = getelementptr inbounds i16, i16* %blur_x, i64 %5139
  %5141 = getelementptr inbounds i16, i16* %5140, i64 -32
  %5142 = bitcast i16* %5141 to <16 x i16>*
  %5143 = load <16 x i16>, <16 x i16>* %5142, align 2, !tbaa !399
  %5144 = getelementptr inbounds i16, i16* %5140, i64 -16
  %5145 = bitcast i16* %5144 to <16 x i16>*
  %5146 = load <16 x i16>, <16 x i16>* %5145, align 2, !tbaa !399
  %5147 = zext i32 %.pre-phi3250 to i64
  %5148 = mul nsw i64 %5147, %108
  %5149 = add nsw i64 %5148, %93
  %5150 = getelementptr inbounds i16, i16* %blur_x, i64 %5149
  %5151 = getelementptr inbounds i16, i16* %5150, i64 -32
  %5152 = bitcast i16* %5151 to <16 x i16>*
  %5153 = load <16 x i16>, <16 x i16>* %5152, align 2, !tbaa !399
  %5154 = getelementptr inbounds i16, i16* %5150, i64 -16
  %5155 = bitcast i16* %5154 to <16 x i16>*
  %5156 = load <16 x i16>, <16 x i16>* %5155, align 2, !tbaa !399
  %5157 = add <16 x i16> %5143, %5134
  %5158 = add <16 x i16> %5157, %5153
  %5159 = add <16 x i16> %5146, %5137
  %5160 = add <16 x i16> %5159, %5156
  %5161 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5158, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5162 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5160, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5163 = shufflevector <16 x i16> %5161, <16 x i16> %5162, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5164 = lshr <32 x i16> %5163, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5165 = shufflevector <32 x i16> %5164, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5166 = sext i32 %a26 to i64
  %5167 = add nsw i64 %5166, 13
  %5168 = mul nsw i64 %5167, %109
  %5169 = add nsw i64 %111, %5168
  %5170 = getelementptr inbounds i16, i16* %65, i64 %5169
  %5171 = getelementptr inbounds i16, i16* %5170, i64 -32
  %5172 = bitcast i16* %5171 to <16 x i16>*
  store <16 x i16> %5165, <16 x i16>* %5172, align 2, !tbaa !401
  %5173 = shufflevector <32 x i16> %5164, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5174 = getelementptr inbounds i16, i16* %5170, i64 -16
  %5175 = bitcast i16* %5174 to <16 x i16>*
  store <16 x i16> %5173, <16 x i16>* %5175, align 2, !tbaa !401
  br label %after_bb339

"for blur_y.s0.x.x.rebased344":                   ; preds = %"for blur_y.s0.x.x.rebased344.preheader", %"consume blur_x351"
  %indvars.iv3072 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased344.preheader" ], [ %indvars.iv.next3073, %"consume blur_x351" ]
  %5176 = add nsw i64 %indvars.iv3072, %100
  %5177 = icmp slt i64 %5176, 1
  %5178 = trunc i64 %5176 to i32
  %5179 = shl nsw i32 %5178, 5
  %5180 = icmp sgt i32 %4, %5179
  %5181 = or i1 %5177, %5180
  br i1 %5181, label %"produce blur_x350", label %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge"

"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased344"
  %.pre3285 = shl nsw i64 %5176, 5
  br label %"consume blur_x351"

"end for blur_y.s0.x.x.rebased345":               ; preds = %"consume blur_x351", %after_bb339
  br i1 %101, label %"for blur_y.s0.x.x.rebased352.preheader", label %"end for blur_y.s0.x.x.rebased353", !prof !386

"for blur_y.s0.x.x.rebased352.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased345"
  %5182 = sext i32 %t1666 to i64
  %5183 = zext i32 %.pre-phi3254 to i64
  %5184 = mul nsw i64 %5183, %108
  %5185 = sub nsw i64 %5184, %95
  %5186 = zext i32 %.pre-phi3260 to i64
  %5187 = mul nsw i64 %5186, %108
  %5188 = sub nsw i64 %5187, %95
  %5189 = zext i32 %.pre-phi3250 to i64
  %5190 = mul nsw i64 %5189, %108
  %5191 = sub nsw i64 %5190, %95
  %5192 = sext i32 %a26 to i64
  %5193 = add nsw i64 %5192, 13
  %5194 = mul nsw i64 %5193, %109
  %5195 = add nsw i64 %5194, %112
  br label %"for blur_y.s0.x.x.rebased352"

"produce blur_x350":                              ; preds = %"for blur_y.s0.x.x.rebased344"
  %t880 = add nsw i32 %5179, %t1857
  %5196 = sext i32 %t880 to i64
  %5197 = getelementptr inbounds i16, i16* %read_input, i64 %5196
  %5198 = getelementptr inbounds i16, i16* %5197, i64 1
  %5199 = bitcast i16* %5198 to <16 x i16>*
  %5200 = load <16 x i16>, <16 x i16>* %5199, align 2, !tbaa !396
  %5201 = getelementptr inbounds i16, i16* %5197, i64 17
  %5202 = bitcast i16* %5201 to <16 x i16>*
  %5203 = load <16 x i16>, <16 x i16>* %5202, align 2, !tbaa !396
  %5204 = getelementptr inbounds i16, i16* %5197, i64 2
  %5205 = bitcast i16* %5204 to <16 x i16>*
  %5206 = load <16 x i16>, <16 x i16>* %5205, align 2, !tbaa !396
  %5207 = getelementptr inbounds i16, i16* %5197, i64 18
  %5208 = bitcast i16* %5207 to <16 x i16>*
  %5209 = load <16 x i16>, <16 x i16>* %5208, align 2, !tbaa !396
  %5210 = bitcast i16* %5197 to <16 x i16>*
  %5211 = load <16 x i16>, <16 x i16>* %5210, align 2, !tbaa !396
  %5212 = getelementptr inbounds i16, i16* %5197, i64 16
  %5213 = bitcast i16* %5212 to <16 x i16>*
  %5214 = load <16 x i16>, <16 x i16>* %5213, align 2, !tbaa !396
  %5215 = add <16 x i16> %5206, %5200
  %5216 = add <16 x i16> %5215, %5211
  %5217 = add <16 x i16> %5209, %5203
  %5218 = add <16 x i16> %5217, %5214
  %5219 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5216, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5220 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5218, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5221 = shufflevector <16 x i16> %5219, <16 x i16> %5220, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5222 = lshr <32 x i16> %5221, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5223 = shufflevector <32 x i16> %5222, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5224 = shl nsw i64 %5176, 5
  %5225 = add nsw i64 %5224, %5077
  %5226 = getelementptr inbounds i16, i16* %blur_x, i64 %5225
  %5227 = bitcast i16* %5226 to <16 x i16>*
  store <16 x i16> %5223, <16 x i16>* %5227, align 2, !tbaa !399
  %5228 = shufflevector <32 x i16> %5222, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5229 = getelementptr inbounds i16, i16* %5226, i64 16
  %5230 = bitcast i16* %5229 to <16 x i16>*
  store <16 x i16> %5228, <16 x i16>* %5230, align 2, !tbaa !399
  br label %"consume blur_x351"

"consume blur_x351":                              ; preds = %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge", %"produce blur_x350"
  %.pre-phi3286 = phi i64 [ %.pre3285, %"for blur_y.s0.x.x.rebased344.consume blur_x351_crit_edge" ], [ %5224, %"produce blur_x350" ]
  %5231 = add nsw i64 %5080, %.pre-phi3286
  %5232 = getelementptr inbounds i16, i16* %blur_x, i64 %5231
  %5233 = bitcast i16* %5232 to <16 x i16>*
  %5234 = load <16 x i16>, <16 x i16>* %5233, align 2, !tbaa !399
  %5235 = getelementptr inbounds i16, i16* %5232, i64 16
  %5236 = bitcast i16* %5235 to <16 x i16>*
  %5237 = load <16 x i16>, <16 x i16>* %5236, align 2, !tbaa !399
  %5238 = add nsw i64 %5083, %.pre-phi3286
  %5239 = getelementptr inbounds i16, i16* %blur_x, i64 %5238
  %5240 = bitcast i16* %5239 to <16 x i16>*
  %5241 = load <16 x i16>, <16 x i16>* %5240, align 2, !tbaa !399
  %5242 = getelementptr inbounds i16, i16* %5239, i64 16
  %5243 = bitcast i16* %5242 to <16 x i16>*
  %5244 = load <16 x i16>, <16 x i16>* %5243, align 2, !tbaa !399
  %5245 = add nsw i64 %5086, %.pre-phi3286
  %5246 = getelementptr inbounds i16, i16* %blur_x, i64 %5245
  %5247 = bitcast i16* %5246 to <16 x i16>*
  %5248 = load <16 x i16>, <16 x i16>* %5247, align 2, !tbaa !399
  %5249 = getelementptr inbounds i16, i16* %5246, i64 16
  %5250 = bitcast i16* %5249 to <16 x i16>*
  %5251 = load <16 x i16>, <16 x i16>* %5250, align 2, !tbaa !399
  %5252 = add <16 x i16> %5241, %5234
  %5253 = add <16 x i16> %5252, %5248
  %5254 = add <16 x i16> %5244, %5237
  %5255 = add <16 x i16> %5254, %5251
  %5256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5253, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5257 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5255, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5258 = shufflevector <16 x i16> %5256, <16 x i16> %5257, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5259 = lshr <32 x i16> %5258, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5260 = shufflevector <32 x i16> %5259, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5261 = add nsw i64 %5090, %.pre-phi3286
  %5262 = getelementptr inbounds i16, i16* %65, i64 %5261
  %5263 = bitcast i16* %5262 to <16 x i16>*
  store <16 x i16> %5260, <16 x i16>* %5263, align 2, !tbaa !401
  %5264 = shufflevector <32 x i16> %5259, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5265 = getelementptr inbounds i16, i16* %5262, i64 16
  %5266 = bitcast i16* %5265 to <16 x i16>*
  store <16 x i16> %5264, <16 x i16>* %5266, align 2, !tbaa !401
  %indvars.iv.next3073 = add nuw nsw i64 %indvars.iv3072, 1
  %.not2556 = icmp eq i64 %indvars.iv.next3073, %180
  br i1 %.not2556, label %"end for blur_y.s0.x.x.rebased345", label %"for blur_y.s0.x.x.rebased344"

"for blur_y.s0.x.x.rebased352":                   ; preds = %"for blur_y.s0.x.x.rebased352.preheader", %"consume blur_x360"
  %blur_y.s0.x.x.rebased354 = phi i32 [ %5345, %"consume blur_x360" ], [ 0, %"for blur_y.s0.x.x.rebased352.preheader" ]
  %5267 = add nsw i32 %blur_y.s0.x.x.rebased354, %t1582
  %a182 = shl nsw i32 %5267, 5
  %5268 = icmp sgt i32 %a14, %a182
  %b188 = select i1 %5268, i32 %a182, i32 %a14
  %5269 = icmp slt i32 %5267, 1
  %5270 = icmp sgt i32 %4, %a182
  %5271 = or i1 %5269, %5270
  br i1 %5271, label %"produce blur_x358", label %"consume blur_x360"

"end for blur_y.s0.x.x.rebased353":               ; preds = %"consume blur_x360", %"end for blur_y.s0.x.x.rebased345"
  br i1 %34, label %"produce blur_x364", label %after_bb361

"produce blur_x358":                              ; preds = %"for blur_y.s0.x.x.rebased352"
  %5272 = icmp slt i32 %b188, %4
  %blur_x.s0.x.v1.base.s359 = select i1 %5272, i32 %b188, i32 %4
  %t885 = add nsw i32 %blur_x.s0.x.v1.base.s359, %t1857
  %5273 = sext i32 %t885 to i64
  %5274 = getelementptr inbounds i16, i16* %read_input, i64 %5273
  %5275 = getelementptr inbounds i16, i16* %5274, i64 1
  %5276 = bitcast i16* %5275 to <16 x i16>*
  %5277 = load <16 x i16>, <16 x i16>* %5276, align 2, !tbaa !396
  %5278 = getelementptr inbounds i16, i16* %5274, i64 17
  %5279 = bitcast i16* %5278 to <16 x i16>*
  %5280 = load <16 x i16>, <16 x i16>* %5279, align 2, !tbaa !396
  %5281 = getelementptr inbounds i16, i16* %5274, i64 2
  %5282 = bitcast i16* %5281 to <16 x i16>*
  %5283 = load <16 x i16>, <16 x i16>* %5282, align 2, !tbaa !396
  %5284 = getelementptr inbounds i16, i16* %5274, i64 18
  %5285 = bitcast i16* %5284 to <16 x i16>*
  %5286 = load <16 x i16>, <16 x i16>* %5285, align 2, !tbaa !396
  %5287 = bitcast i16* %5274 to <16 x i16>*
  %5288 = load <16 x i16>, <16 x i16>* %5287, align 2, !tbaa !396
  %5289 = getelementptr inbounds i16, i16* %5274, i64 16
  %5290 = bitcast i16* %5289 to <16 x i16>*
  %5291 = load <16 x i16>, <16 x i16>* %5290, align 2, !tbaa !396
  %5292 = add <16 x i16> %5283, %5277
  %5293 = add <16 x i16> %5292, %5288
  %5294 = add <16 x i16> %5286, %5280
  %5295 = add <16 x i16> %5294, %5291
  %5296 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5293, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5297 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5295, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5298 = shufflevector <16 x i16> %5296, <16 x i16> %5297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5299 = lshr <32 x i16> %5298, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5300 = shufflevector <32 x i16> %5299, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5301 = sext i32 %blur_x.s0.x.v1.base.s359 to i64
  %5302 = add nsw i64 %5301, %5182
  %5303 = getelementptr inbounds i16, i16* %blur_x, i64 %5302
  %5304 = bitcast i16* %5303 to <16 x i16>*
  store <16 x i16> %5300, <16 x i16>* %5304, align 2, !tbaa !399
  %5305 = shufflevector <32 x i16> %5299, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5306 = getelementptr inbounds i16, i16* %5303, i64 16
  %5307 = bitcast i16* %5306 to <16 x i16>*
  store <16 x i16> %5305, <16 x i16>* %5307, align 2, !tbaa !399
  br label %"consume blur_x360"

"consume blur_x360":                              ; preds = %"for blur_y.s0.x.x.rebased352", %"produce blur_x358"
  %5308 = sext i32 %b188 to i64
  %5309 = add nsw i64 %5185, %5308
  %5310 = getelementptr inbounds i16, i16* %blur_x, i64 %5309
  %5311 = bitcast i16* %5310 to <16 x i16>*
  %5312 = load <16 x i16>, <16 x i16>* %5311, align 2, !tbaa !399
  %5313 = getelementptr inbounds i16, i16* %5310, i64 16
  %5314 = bitcast i16* %5313 to <16 x i16>*
  %5315 = load <16 x i16>, <16 x i16>* %5314, align 2, !tbaa !399
  %5316 = add nsw i64 %5188, %5308
  %5317 = getelementptr inbounds i16, i16* %blur_x, i64 %5316
  %5318 = bitcast i16* %5317 to <16 x i16>*
  %5319 = load <16 x i16>, <16 x i16>* %5318, align 2, !tbaa !399
  %5320 = getelementptr inbounds i16, i16* %5317, i64 16
  %5321 = bitcast i16* %5320 to <16 x i16>*
  %5322 = load <16 x i16>, <16 x i16>* %5321, align 2, !tbaa !399
  %5323 = add nsw i64 %5191, %5308
  %5324 = getelementptr inbounds i16, i16* %blur_x, i64 %5323
  %5325 = bitcast i16* %5324 to <16 x i16>*
  %5326 = load <16 x i16>, <16 x i16>* %5325, align 2, !tbaa !399
  %5327 = getelementptr inbounds i16, i16* %5324, i64 16
  %5328 = bitcast i16* %5327 to <16 x i16>*
  %5329 = load <16 x i16>, <16 x i16>* %5328, align 2, !tbaa !399
  %5330 = add <16 x i16> %5319, %5312
  %5331 = add <16 x i16> %5330, %5326
  %5332 = add <16 x i16> %5322, %5315
  %5333 = add <16 x i16> %5332, %5329
  %5334 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5331, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5335 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5333, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5336 = shufflevector <16 x i16> %5334, <16 x i16> %5335, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5337 = lshr <32 x i16> %5336, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5338 = shufflevector <32 x i16> %5337, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5339 = add nsw i64 %5195, %5308
  %5340 = getelementptr inbounds i16, i16* %65, i64 %5339
  %5341 = bitcast i16* %5340 to <16 x i16>*
  store <16 x i16> %5338, <16 x i16>* %5341, align 2, !tbaa !401
  %5342 = shufflevector <32 x i16> %5337, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5343 = getelementptr inbounds i16, i16* %5340, i64 16
  %5344 = bitcast i16* %5343 to <16 x i16>*
  store <16 x i16> %5342, <16 x i16>* %5344, align 2, !tbaa !401
  %5345 = add nuw nsw i32 %blur_y.s0.x.x.rebased354, 1
  %.not2555 = icmp eq i32 %5345, %t1639
  br i1 %.not2555, label %"end for blur_y.s0.x.x.rebased353", label %"for blur_y.s0.x.x.rebased352"

after_bb361:                                      ; preds = %"end for blur_y.s0.x.x.rebased353", %"produce blur_x364"
  br i1 %99, label %"for blur_y.s0.x.x.rebased366.preheader", label %"end for blur_y.s0.x.x.rebased367", !prof !386

"for blur_y.s0.x.x.rebased366.preheader":         ; preds = %after_bb361
  %5346 = sext i32 %t1638 to i64
  %5347 = zext i32 %.pre-phi3260 to i64
  %5348 = mul nsw i64 %5347, %108
  %5349 = sub nsw i64 %5348, %95
  %5350 = zext i32 %.pre-phi to i64
  %5351 = mul nsw i64 %5350, %108
  %5352 = sub nsw i64 %5351, %95
  %5353 = zext i32 %.pre-phi3254 to i64
  %5354 = mul nsw i64 %5353, %108
  %5355 = sub nsw i64 %5354, %95
  %5356 = sext i32 %a26 to i64
  %5357 = add nsw i64 %5356, 14
  %5358 = mul nsw i64 %5357, %109
  %5359 = add nsw i64 %5358, %112
  br label %"for blur_y.s0.x.x.rebased366"

"produce blur_x364":                              ; preds = %"end for blur_y.s0.x.x.rebased353"
  %5360 = getelementptr inbounds i16, i16* %read_input, i64 %139
  %5361 = getelementptr inbounds i16, i16* %5360, i64 -31
  %5362 = bitcast i16* %5361 to <16 x i16>*
  %5363 = load <16 x i16>, <16 x i16>* %5362, align 2, !tbaa !396
  %5364 = getelementptr inbounds i16, i16* %5360, i64 -15
  %5365 = bitcast i16* %5364 to <16 x i16>*
  %5366 = load <16 x i16>, <16 x i16>* %5365, align 2, !tbaa !396
  %5367 = getelementptr inbounds i16, i16* %5360, i64 -30
  %5368 = bitcast i16* %5367 to <16 x i16>*
  %5369 = load <16 x i16>, <16 x i16>* %5368, align 2, !tbaa !396
  %5370 = getelementptr inbounds i16, i16* %5360, i64 -14
  %5371 = bitcast i16* %5370 to <16 x i16>*
  %5372 = load <16 x i16>, <16 x i16>* %5371, align 2, !tbaa !396
  %5373 = getelementptr inbounds i16, i16* %5360, i64 -32
  %5374 = bitcast i16* %5373 to <16 x i16>*
  %5375 = load <16 x i16>, <16 x i16>* %5374, align 2, !tbaa !396
  %5376 = getelementptr inbounds i16, i16* %5360, i64 -16
  %5377 = bitcast i16* %5376 to <16 x i16>*
  %5378 = load <16 x i16>, <16 x i16>* %5377, align 2, !tbaa !396
  %5379 = add <16 x i16> %5369, %5363
  %5380 = add <16 x i16> %5379, %5375
  %5381 = add <16 x i16> %5372, %5366
  %5382 = add <16 x i16> %5381, %5378
  %5383 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5380, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5384 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5382, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5385 = shufflevector <16 x i16> %5383, <16 x i16> %5384, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5386 = lshr <32 x i16> %5385, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5387 = shufflevector <32 x i16> %5386, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5388 = zext i32 %.pre-phi to i64
  %5389 = mul nsw i64 %96, %5388
  %5390 = add nsw i64 %98, %5389
  %5391 = getelementptr inbounds i16, i16* %blur_x, i64 %5390
  %5392 = getelementptr inbounds i16, i16* %5391, i64 -32
  %5393 = bitcast i16* %5392 to <16 x i16>*
  store <16 x i16> %5387, <16 x i16>* %5393, align 2, !tbaa !399
  %5394 = shufflevector <32 x i16> %5386, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5395 = getelementptr inbounds i16, i16* %5391, i64 -16
  %5396 = bitcast i16* %5395 to <16 x i16>*
  store <16 x i16> %5394, <16 x i16>* %5396, align 2, !tbaa !399
  %5397 = zext i32 %.pre-phi3260 to i64
  %5398 = mul nsw i64 %5397, %108
  %5399 = add nsw i64 %5398, %93
  %5400 = getelementptr inbounds i16, i16* %blur_x, i64 %5399
  %5401 = getelementptr inbounds i16, i16* %5400, i64 -32
  %5402 = bitcast i16* %5401 to <16 x i16>*
  %5403 = load <16 x i16>, <16 x i16>* %5402, align 2, !tbaa !399
  %5404 = getelementptr inbounds i16, i16* %5400, i64 -16
  %5405 = bitcast i16* %5404 to <16 x i16>*
  %5406 = load <16 x i16>, <16 x i16>* %5405, align 2, !tbaa !399
  %5407 = mul nsw i64 %5388, %108
  %5408 = add nsw i64 %5407, %93
  %5409 = getelementptr inbounds i16, i16* %blur_x, i64 %5408
  %5410 = getelementptr inbounds i16, i16* %5409, i64 -32
  %5411 = bitcast i16* %5410 to <16 x i16>*
  %5412 = load <16 x i16>, <16 x i16>* %5411, align 2, !tbaa !399
  %5413 = getelementptr inbounds i16, i16* %5409, i64 -16
  %5414 = bitcast i16* %5413 to <16 x i16>*
  %5415 = load <16 x i16>, <16 x i16>* %5414, align 2, !tbaa !399
  %5416 = zext i32 %.pre-phi3254 to i64
  %5417 = mul nsw i64 %5416, %108
  %5418 = add nsw i64 %5417, %93
  %5419 = getelementptr inbounds i16, i16* %blur_x, i64 %5418
  %5420 = getelementptr inbounds i16, i16* %5419, i64 -32
  %5421 = bitcast i16* %5420 to <16 x i16>*
  %5422 = load <16 x i16>, <16 x i16>* %5421, align 2, !tbaa !399
  %5423 = getelementptr inbounds i16, i16* %5419, i64 -16
  %5424 = bitcast i16* %5423 to <16 x i16>*
  %5425 = load <16 x i16>, <16 x i16>* %5424, align 2, !tbaa !399
  %5426 = add <16 x i16> %5412, %5403
  %5427 = add <16 x i16> %5426, %5422
  %5428 = add <16 x i16> %5415, %5406
  %5429 = add <16 x i16> %5428, %5425
  %5430 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5427, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5431 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5429, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5432 = shufflevector <16 x i16> %5430, <16 x i16> %5431, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5433 = lshr <32 x i16> %5432, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5434 = shufflevector <32 x i16> %5433, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5435 = sext i32 %a26 to i64
  %5436 = add nsw i64 %5435, 14
  %5437 = mul nsw i64 %5436, %109
  %5438 = add nsw i64 %111, %5437
  %5439 = getelementptr inbounds i16, i16* %65, i64 %5438
  %5440 = getelementptr inbounds i16, i16* %5439, i64 -32
  %5441 = bitcast i16* %5440 to <16 x i16>*
  store <16 x i16> %5434, <16 x i16>* %5441, align 2, !tbaa !401
  %5442 = shufflevector <32 x i16> %5433, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5443 = getelementptr inbounds i16, i16* %5439, i64 -16
  %5444 = bitcast i16* %5443 to <16 x i16>*
  store <16 x i16> %5442, <16 x i16>* %5444, align 2, !tbaa !401
  br label %after_bb361

"for blur_y.s0.x.x.rebased366":                   ; preds = %"for blur_y.s0.x.x.rebased366.preheader", %"consume blur_x373"
  %indvars.iv3075 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased366.preheader" ], [ %indvars.iv.next3076, %"consume blur_x373" ]
  %5445 = add nsw i64 %indvars.iv3075, %100
  %5446 = icmp slt i64 %5445, 1
  %5447 = trunc i64 %5445 to i32
  %5448 = shl nsw i32 %5447, 5
  %5449 = icmp sgt i32 %4, %5448
  %5450 = or i1 %5446, %5449
  br i1 %5450, label %"produce blur_x372", label %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge"

"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased366"
  %.pre3287 = shl nsw i64 %5445, 5
  br label %"consume blur_x373"

"end for blur_y.s0.x.x.rebased367":               ; preds = %"consume blur_x373", %after_bb361
  br i1 %101, label %"for blur_y.s0.x.x.rebased374.preheader", label %"end for blur_y.s0.x.x.rebased375", !prof !386

"for blur_y.s0.x.x.rebased374.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased367"
  %5451 = sext i32 %t1638 to i64
  %5452 = zext i32 %.pre-phi3260 to i64
  %5453 = mul nsw i64 %5452, %108
  %5454 = sub nsw i64 %5453, %95
  %5455 = zext i32 %.pre-phi to i64
  %5456 = mul nsw i64 %5455, %108
  %5457 = sub nsw i64 %5456, %95
  %5458 = zext i32 %.pre-phi3254 to i64
  %5459 = mul nsw i64 %5458, %108
  %5460 = sub nsw i64 %5459, %95
  %5461 = sext i32 %a26 to i64
  %5462 = add nsw i64 %5461, 14
  %5463 = mul nsw i64 %5462, %109
  %5464 = add nsw i64 %5463, %112
  br label %"for blur_y.s0.x.x.rebased374"

"produce blur_x372":                              ; preds = %"for blur_y.s0.x.x.rebased366"
  %t896 = add nsw i32 %5448, %t1873
  %5465 = sext i32 %t896 to i64
  %5466 = getelementptr inbounds i16, i16* %read_input, i64 %5465
  %5467 = getelementptr inbounds i16, i16* %5466, i64 1
  %5468 = bitcast i16* %5467 to <16 x i16>*
  %5469 = load <16 x i16>, <16 x i16>* %5468, align 2, !tbaa !396
  %5470 = getelementptr inbounds i16, i16* %5466, i64 17
  %5471 = bitcast i16* %5470 to <16 x i16>*
  %5472 = load <16 x i16>, <16 x i16>* %5471, align 2, !tbaa !396
  %5473 = getelementptr inbounds i16, i16* %5466, i64 2
  %5474 = bitcast i16* %5473 to <16 x i16>*
  %5475 = load <16 x i16>, <16 x i16>* %5474, align 2, !tbaa !396
  %5476 = getelementptr inbounds i16, i16* %5466, i64 18
  %5477 = bitcast i16* %5476 to <16 x i16>*
  %5478 = load <16 x i16>, <16 x i16>* %5477, align 2, !tbaa !396
  %5479 = bitcast i16* %5466 to <16 x i16>*
  %5480 = load <16 x i16>, <16 x i16>* %5479, align 2, !tbaa !396
  %5481 = getelementptr inbounds i16, i16* %5466, i64 16
  %5482 = bitcast i16* %5481 to <16 x i16>*
  %5483 = load <16 x i16>, <16 x i16>* %5482, align 2, !tbaa !396
  %5484 = add <16 x i16> %5475, %5469
  %5485 = add <16 x i16> %5484, %5480
  %5486 = add <16 x i16> %5478, %5472
  %5487 = add <16 x i16> %5486, %5483
  %5488 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5485, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5489 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5487, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5490 = shufflevector <16 x i16> %5488, <16 x i16> %5489, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5491 = lshr <32 x i16> %5490, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5492 = shufflevector <32 x i16> %5491, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5493 = shl nsw i64 %5445, 5
  %5494 = add nsw i64 %5493, %5346
  %5495 = getelementptr inbounds i16, i16* %blur_x, i64 %5494
  %5496 = bitcast i16* %5495 to <16 x i16>*
  store <16 x i16> %5492, <16 x i16>* %5496, align 2, !tbaa !399
  %5497 = shufflevector <32 x i16> %5491, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5498 = getelementptr inbounds i16, i16* %5495, i64 16
  %5499 = bitcast i16* %5498 to <16 x i16>*
  store <16 x i16> %5497, <16 x i16>* %5499, align 2, !tbaa !399
  br label %"consume blur_x373"

"consume blur_x373":                              ; preds = %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge", %"produce blur_x372"
  %.pre-phi3288 = phi i64 [ %.pre3287, %"for blur_y.s0.x.x.rebased366.consume blur_x373_crit_edge" ], [ %5493, %"produce blur_x372" ]
  %5500 = add nsw i64 %5349, %.pre-phi3288
  %5501 = getelementptr inbounds i16, i16* %blur_x, i64 %5500
  %5502 = bitcast i16* %5501 to <16 x i16>*
  %5503 = load <16 x i16>, <16 x i16>* %5502, align 2, !tbaa !399
  %5504 = getelementptr inbounds i16, i16* %5501, i64 16
  %5505 = bitcast i16* %5504 to <16 x i16>*
  %5506 = load <16 x i16>, <16 x i16>* %5505, align 2, !tbaa !399
  %5507 = add nsw i64 %5352, %.pre-phi3288
  %5508 = getelementptr inbounds i16, i16* %blur_x, i64 %5507
  %5509 = bitcast i16* %5508 to <16 x i16>*
  %5510 = load <16 x i16>, <16 x i16>* %5509, align 2, !tbaa !399
  %5511 = getelementptr inbounds i16, i16* %5508, i64 16
  %5512 = bitcast i16* %5511 to <16 x i16>*
  %5513 = load <16 x i16>, <16 x i16>* %5512, align 2, !tbaa !399
  %5514 = add nsw i64 %5355, %.pre-phi3288
  %5515 = getelementptr inbounds i16, i16* %blur_x, i64 %5514
  %5516 = bitcast i16* %5515 to <16 x i16>*
  %5517 = load <16 x i16>, <16 x i16>* %5516, align 2, !tbaa !399
  %5518 = getelementptr inbounds i16, i16* %5515, i64 16
  %5519 = bitcast i16* %5518 to <16 x i16>*
  %5520 = load <16 x i16>, <16 x i16>* %5519, align 2, !tbaa !399
  %5521 = add <16 x i16> %5510, %5503
  %5522 = add <16 x i16> %5521, %5517
  %5523 = add <16 x i16> %5513, %5506
  %5524 = add <16 x i16> %5523, %5520
  %5525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5522, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5526 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5524, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5527 = shufflevector <16 x i16> %5525, <16 x i16> %5526, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5528 = lshr <32 x i16> %5527, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5529 = shufflevector <32 x i16> %5528, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5530 = add nsw i64 %5359, %.pre-phi3288
  %5531 = getelementptr inbounds i16, i16* %65, i64 %5530
  %5532 = bitcast i16* %5531 to <16 x i16>*
  store <16 x i16> %5529, <16 x i16>* %5532, align 2, !tbaa !401
  %5533 = shufflevector <32 x i16> %5528, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5534 = getelementptr inbounds i16, i16* %5531, i64 16
  %5535 = bitcast i16* %5534 to <16 x i16>*
  store <16 x i16> %5533, <16 x i16>* %5535, align 2, !tbaa !401
  %indvars.iv.next3076 = add nuw nsw i64 %indvars.iv3075, 1
  %.not2554 = icmp eq i64 %indvars.iv.next3076, %180
  br i1 %.not2554, label %"end for blur_y.s0.x.x.rebased367", label %"for blur_y.s0.x.x.rebased366"

"for blur_y.s0.x.x.rebased374":                   ; preds = %"for blur_y.s0.x.x.rebased374.preheader", %"consume blur_x382"
  %blur_y.s0.x.x.rebased376 = phi i32 [ %5614, %"consume blur_x382" ], [ 0, %"for blur_y.s0.x.x.rebased374.preheader" ]
  %5536 = add nsw i32 %blur_y.s0.x.x.rebased376, %t1582
  %a189 = shl nsw i32 %5536, 5
  %5537 = icmp sgt i32 %a14, %a189
  %b195 = select i1 %5537, i32 %a189, i32 %a14
  %5538 = icmp slt i32 %5536, 1
  %5539 = icmp sgt i32 %4, %a189
  %5540 = or i1 %5538, %5539
  br i1 %5540, label %"produce blur_x380", label %"consume blur_x382"

"end for blur_y.s0.x.x.rebased375":               ; preds = %"consume blur_x382", %"end for blur_y.s0.x.x.rebased367"
  br i1 %34, label %"produce blur_x386", label %after_bb383

"produce blur_x380":                              ; preds = %"for blur_y.s0.x.x.rebased374"
  %5541 = icmp slt i32 %b195, %4
  %blur_x.s0.x.v1.base.s381 = select i1 %5541, i32 %b195, i32 %4
  %t901 = add nsw i32 %blur_x.s0.x.v1.base.s381, %t1873
  %5542 = sext i32 %t901 to i64
  %5543 = getelementptr inbounds i16, i16* %read_input, i64 %5542
  %5544 = getelementptr inbounds i16, i16* %5543, i64 1
  %5545 = bitcast i16* %5544 to <16 x i16>*
  %5546 = load <16 x i16>, <16 x i16>* %5545, align 2, !tbaa !396
  %5547 = getelementptr inbounds i16, i16* %5543, i64 17
  %5548 = bitcast i16* %5547 to <16 x i16>*
  %5549 = load <16 x i16>, <16 x i16>* %5548, align 2, !tbaa !396
  %5550 = getelementptr inbounds i16, i16* %5543, i64 2
  %5551 = bitcast i16* %5550 to <16 x i16>*
  %5552 = load <16 x i16>, <16 x i16>* %5551, align 2, !tbaa !396
  %5553 = getelementptr inbounds i16, i16* %5543, i64 18
  %5554 = bitcast i16* %5553 to <16 x i16>*
  %5555 = load <16 x i16>, <16 x i16>* %5554, align 2, !tbaa !396
  %5556 = bitcast i16* %5543 to <16 x i16>*
  %5557 = load <16 x i16>, <16 x i16>* %5556, align 2, !tbaa !396
  %5558 = getelementptr inbounds i16, i16* %5543, i64 16
  %5559 = bitcast i16* %5558 to <16 x i16>*
  %5560 = load <16 x i16>, <16 x i16>* %5559, align 2, !tbaa !396
  %5561 = add <16 x i16> %5552, %5546
  %5562 = add <16 x i16> %5561, %5557
  %5563 = add <16 x i16> %5555, %5549
  %5564 = add <16 x i16> %5563, %5560
  %5565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5562, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5564, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5567 = shufflevector <16 x i16> %5565, <16 x i16> %5566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5568 = lshr <32 x i16> %5567, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5569 = shufflevector <32 x i16> %5568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5570 = sext i32 %blur_x.s0.x.v1.base.s381 to i64
  %5571 = add nsw i64 %5570, %5451
  %5572 = getelementptr inbounds i16, i16* %blur_x, i64 %5571
  %5573 = bitcast i16* %5572 to <16 x i16>*
  store <16 x i16> %5569, <16 x i16>* %5573, align 2, !tbaa !399
  %5574 = shufflevector <32 x i16> %5568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5575 = getelementptr inbounds i16, i16* %5572, i64 16
  %5576 = bitcast i16* %5575 to <16 x i16>*
  store <16 x i16> %5574, <16 x i16>* %5576, align 2, !tbaa !399
  br label %"consume blur_x382"

"consume blur_x382":                              ; preds = %"for blur_y.s0.x.x.rebased374", %"produce blur_x380"
  %5577 = sext i32 %b195 to i64
  %5578 = add nsw i64 %5454, %5577
  %5579 = getelementptr inbounds i16, i16* %blur_x, i64 %5578
  %5580 = bitcast i16* %5579 to <16 x i16>*
  %5581 = load <16 x i16>, <16 x i16>* %5580, align 2, !tbaa !399
  %5582 = getelementptr inbounds i16, i16* %5579, i64 16
  %5583 = bitcast i16* %5582 to <16 x i16>*
  %5584 = load <16 x i16>, <16 x i16>* %5583, align 2, !tbaa !399
  %5585 = add nsw i64 %5457, %5577
  %5586 = getelementptr inbounds i16, i16* %blur_x, i64 %5585
  %5587 = bitcast i16* %5586 to <16 x i16>*
  %5588 = load <16 x i16>, <16 x i16>* %5587, align 2, !tbaa !399
  %5589 = getelementptr inbounds i16, i16* %5586, i64 16
  %5590 = bitcast i16* %5589 to <16 x i16>*
  %5591 = load <16 x i16>, <16 x i16>* %5590, align 2, !tbaa !399
  %5592 = add nsw i64 %5460, %5577
  %5593 = getelementptr inbounds i16, i16* %blur_x, i64 %5592
  %5594 = bitcast i16* %5593 to <16 x i16>*
  %5595 = load <16 x i16>, <16 x i16>* %5594, align 2, !tbaa !399
  %5596 = getelementptr inbounds i16, i16* %5593, i64 16
  %5597 = bitcast i16* %5596 to <16 x i16>*
  %5598 = load <16 x i16>, <16 x i16>* %5597, align 2, !tbaa !399
  %5599 = add <16 x i16> %5588, %5581
  %5600 = add <16 x i16> %5599, %5595
  %5601 = add <16 x i16> %5591, %5584
  %5602 = add <16 x i16> %5601, %5598
  %5603 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5600, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5604 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5602, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5605 = shufflevector <16 x i16> %5603, <16 x i16> %5604, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5606 = lshr <32 x i16> %5605, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5607 = shufflevector <32 x i16> %5606, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5608 = add nsw i64 %5464, %5577
  %5609 = getelementptr inbounds i16, i16* %65, i64 %5608
  %5610 = bitcast i16* %5609 to <16 x i16>*
  store <16 x i16> %5607, <16 x i16>* %5610, align 2, !tbaa !401
  %5611 = shufflevector <32 x i16> %5606, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5612 = getelementptr inbounds i16, i16* %5609, i64 16
  %5613 = bitcast i16* %5612 to <16 x i16>*
  store <16 x i16> %5611, <16 x i16>* %5613, align 2, !tbaa !401
  %5614 = add nuw nsw i32 %blur_y.s0.x.x.rebased376, 1
  %.not2553 = icmp eq i32 %5614, %t1639
  br i1 %.not2553, label %"end for blur_y.s0.x.x.rebased375", label %"for blur_y.s0.x.x.rebased374"

after_bb383:                                      ; preds = %"end for blur_y.s0.x.x.rebased375", %"produce blur_x386"
  br i1 %99, label %"for blur_y.s0.x.x.rebased388.preheader", label %"end for blur_y.s0.x.x.rebased389", !prof !386

"for blur_y.s0.x.x.rebased388.preheader":         ; preds = %after_bb383
  %5615 = sext i32 %t1644 to i64
  %5616 = zext i32 %.pre-phi to i64
  %5617 = mul nsw i64 %5616, %108
  %5618 = sub nsw i64 %5617, %95
  %5619 = zext i32 %.pre-phi3250 to i64
  %5620 = mul nsw i64 %5619, %108
  %5621 = sub nsw i64 %5620, %95
  %5622 = zext i32 %.pre-phi3260 to i64
  %5623 = mul nsw i64 %5622, %108
  %5624 = sub nsw i64 %5623, %95
  %5625 = sext i32 %a26 to i64
  %5626 = add nsw i64 %5625, 15
  %5627 = mul nsw i64 %5626, %109
  %5628 = add nsw i64 %5627, %112
  br label %"for blur_y.s0.x.x.rebased388"

"produce blur_x386":                              ; preds = %"end for blur_y.s0.x.x.rebased375"
  %5629 = getelementptr inbounds i16, i16* %read_input, i64 %141
  %5630 = getelementptr inbounds i16, i16* %5629, i64 -31
  %5631 = bitcast i16* %5630 to <16 x i16>*
  %5632 = load <16 x i16>, <16 x i16>* %5631, align 2, !tbaa !396
  %5633 = getelementptr inbounds i16, i16* %5629, i64 -15
  %5634 = bitcast i16* %5633 to <16 x i16>*
  %5635 = load <16 x i16>, <16 x i16>* %5634, align 2, !tbaa !396
  %5636 = getelementptr inbounds i16, i16* %5629, i64 -30
  %5637 = bitcast i16* %5636 to <16 x i16>*
  %5638 = load <16 x i16>, <16 x i16>* %5637, align 2, !tbaa !396
  %5639 = getelementptr inbounds i16, i16* %5629, i64 -14
  %5640 = bitcast i16* %5639 to <16 x i16>*
  %5641 = load <16 x i16>, <16 x i16>* %5640, align 2, !tbaa !396
  %5642 = getelementptr inbounds i16, i16* %5629, i64 -32
  %5643 = bitcast i16* %5642 to <16 x i16>*
  %5644 = load <16 x i16>, <16 x i16>* %5643, align 2, !tbaa !396
  %5645 = getelementptr inbounds i16, i16* %5629, i64 -16
  %5646 = bitcast i16* %5645 to <16 x i16>*
  %5647 = load <16 x i16>, <16 x i16>* %5646, align 2, !tbaa !396
  %5648 = add <16 x i16> %5638, %5632
  %5649 = add <16 x i16> %5648, %5644
  %5650 = add <16 x i16> %5641, %5635
  %5651 = add <16 x i16> %5650, %5647
  %5652 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5649, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5653 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5651, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5654 = shufflevector <16 x i16> %5652, <16 x i16> %5653, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5655 = lshr <32 x i16> %5654, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5656 = shufflevector <32 x i16> %5655, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5657 = zext i32 %.pre-phi3250 to i64
  %5658 = mul nsw i64 %96, %5657
  %5659 = add nsw i64 %98, %5658
  %5660 = getelementptr inbounds i16, i16* %blur_x, i64 %5659
  %5661 = getelementptr inbounds i16, i16* %5660, i64 -32
  %5662 = bitcast i16* %5661 to <16 x i16>*
  store <16 x i16> %5656, <16 x i16>* %5662, align 2, !tbaa !399
  %5663 = shufflevector <32 x i16> %5655, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5664 = getelementptr inbounds i16, i16* %5660, i64 -16
  %5665 = bitcast i16* %5664 to <16 x i16>*
  store <16 x i16> %5663, <16 x i16>* %5665, align 2, !tbaa !399
  %5666 = zext i32 %.pre-phi to i64
  %5667 = mul nsw i64 %5666, %108
  %5668 = add nsw i64 %5667, %93
  %5669 = getelementptr inbounds i16, i16* %blur_x, i64 %5668
  %5670 = getelementptr inbounds i16, i16* %5669, i64 -32
  %5671 = bitcast i16* %5670 to <16 x i16>*
  %5672 = load <16 x i16>, <16 x i16>* %5671, align 2, !tbaa !399
  %5673 = getelementptr inbounds i16, i16* %5669, i64 -16
  %5674 = bitcast i16* %5673 to <16 x i16>*
  %5675 = load <16 x i16>, <16 x i16>* %5674, align 2, !tbaa !399
  %5676 = mul nsw i64 %5657, %108
  %5677 = add nsw i64 %5676, %93
  %5678 = getelementptr inbounds i16, i16* %blur_x, i64 %5677
  %5679 = getelementptr inbounds i16, i16* %5678, i64 -32
  %5680 = bitcast i16* %5679 to <16 x i16>*
  %5681 = load <16 x i16>, <16 x i16>* %5680, align 2, !tbaa !399
  %5682 = getelementptr inbounds i16, i16* %5678, i64 -16
  %5683 = bitcast i16* %5682 to <16 x i16>*
  %5684 = load <16 x i16>, <16 x i16>* %5683, align 2, !tbaa !399
  %5685 = zext i32 %.pre-phi3260 to i64
  %5686 = mul nsw i64 %5685, %108
  %5687 = add nsw i64 %5686, %93
  %5688 = getelementptr inbounds i16, i16* %blur_x, i64 %5687
  %5689 = getelementptr inbounds i16, i16* %5688, i64 -32
  %5690 = bitcast i16* %5689 to <16 x i16>*
  %5691 = load <16 x i16>, <16 x i16>* %5690, align 2, !tbaa !399
  %5692 = getelementptr inbounds i16, i16* %5688, i64 -16
  %5693 = bitcast i16* %5692 to <16 x i16>*
  %5694 = load <16 x i16>, <16 x i16>* %5693, align 2, !tbaa !399
  %5695 = add <16 x i16> %5681, %5672
  %5696 = add <16 x i16> %5695, %5691
  %5697 = add <16 x i16> %5684, %5675
  %5698 = add <16 x i16> %5697, %5694
  %5699 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5696, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5698, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5701 = shufflevector <16 x i16> %5699, <16 x i16> %5700, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5702 = lshr <32 x i16> %5701, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5703 = shufflevector <32 x i16> %5702, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5704 = sext i32 %a26 to i64
  %5705 = add nsw i64 %5704, 15
  %5706 = mul nsw i64 %5705, %109
  %5707 = add nsw i64 %111, %5706
  %5708 = getelementptr inbounds i16, i16* %65, i64 %5707
  %5709 = getelementptr inbounds i16, i16* %5708, i64 -32
  %5710 = bitcast i16* %5709 to <16 x i16>*
  store <16 x i16> %5703, <16 x i16>* %5710, align 2, !tbaa !401
  %5711 = shufflevector <32 x i16> %5702, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5712 = getelementptr inbounds i16, i16* %5708, i64 -16
  %5713 = bitcast i16* %5712 to <16 x i16>*
  store <16 x i16> %5711, <16 x i16>* %5713, align 2, !tbaa !401
  br label %after_bb383

"for blur_y.s0.x.x.rebased388":                   ; preds = %"for blur_y.s0.x.x.rebased388.preheader", %"consume blur_x395"
  %indvars.iv3078 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased388.preheader" ], [ %indvars.iv.next3079, %"consume blur_x395" ]
  %5714 = add nsw i64 %indvars.iv3078, %100
  %5715 = icmp slt i64 %5714, 1
  %5716 = trunc i64 %5714 to i32
  %5717 = shl nsw i32 %5716, 5
  %5718 = icmp sgt i32 %4, %5717
  %5719 = or i1 %5715, %5718
  br i1 %5719, label %"produce blur_x394", label %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge"

"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased388"
  %.pre3289 = shl nsw i64 %5714, 5
  br label %"consume blur_x395"

"end for blur_y.s0.x.x.rebased389":               ; preds = %"consume blur_x395", %after_bb383
  br i1 %101, label %"for blur_y.s0.x.x.rebased396.preheader", label %"end for blur_y.s0.x.x.rebased397", !prof !386

"for blur_y.s0.x.x.rebased396.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased389"
  %5720 = sext i32 %t1644 to i64
  %5721 = zext i32 %.pre-phi to i64
  %5722 = mul nsw i64 %5721, %108
  %5723 = sub nsw i64 %5722, %95
  %5724 = zext i32 %.pre-phi3250 to i64
  %5725 = mul nsw i64 %5724, %108
  %5726 = sub nsw i64 %5725, %95
  %5727 = zext i32 %.pre-phi3260 to i64
  %5728 = mul nsw i64 %5727, %108
  %5729 = sub nsw i64 %5728, %95
  %5730 = sext i32 %a26 to i64
  %5731 = add nsw i64 %5730, 15
  %5732 = mul nsw i64 %5731, %109
  %5733 = add nsw i64 %5732, %112
  br label %"for blur_y.s0.x.x.rebased396"

"produce blur_x394":                              ; preds = %"for blur_y.s0.x.x.rebased388"
  %t912 = add nsw i32 %5717, %t1889
  %5734 = sext i32 %t912 to i64
  %5735 = getelementptr inbounds i16, i16* %read_input, i64 %5734
  %5736 = getelementptr inbounds i16, i16* %5735, i64 1
  %5737 = bitcast i16* %5736 to <16 x i16>*
  %5738 = load <16 x i16>, <16 x i16>* %5737, align 2, !tbaa !396
  %5739 = getelementptr inbounds i16, i16* %5735, i64 17
  %5740 = bitcast i16* %5739 to <16 x i16>*
  %5741 = load <16 x i16>, <16 x i16>* %5740, align 2, !tbaa !396
  %5742 = getelementptr inbounds i16, i16* %5735, i64 2
  %5743 = bitcast i16* %5742 to <16 x i16>*
  %5744 = load <16 x i16>, <16 x i16>* %5743, align 2, !tbaa !396
  %5745 = getelementptr inbounds i16, i16* %5735, i64 18
  %5746 = bitcast i16* %5745 to <16 x i16>*
  %5747 = load <16 x i16>, <16 x i16>* %5746, align 2, !tbaa !396
  %5748 = bitcast i16* %5735 to <16 x i16>*
  %5749 = load <16 x i16>, <16 x i16>* %5748, align 2, !tbaa !396
  %5750 = getelementptr inbounds i16, i16* %5735, i64 16
  %5751 = bitcast i16* %5750 to <16 x i16>*
  %5752 = load <16 x i16>, <16 x i16>* %5751, align 2, !tbaa !396
  %5753 = add <16 x i16> %5744, %5738
  %5754 = add <16 x i16> %5753, %5749
  %5755 = add <16 x i16> %5747, %5741
  %5756 = add <16 x i16> %5755, %5752
  %5757 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5754, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5758 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5756, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5759 = shufflevector <16 x i16> %5757, <16 x i16> %5758, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5760 = lshr <32 x i16> %5759, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5761 = shufflevector <32 x i16> %5760, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5762 = shl nsw i64 %5714, 5
  %5763 = add nsw i64 %5762, %5615
  %5764 = getelementptr inbounds i16, i16* %blur_x, i64 %5763
  %5765 = bitcast i16* %5764 to <16 x i16>*
  store <16 x i16> %5761, <16 x i16>* %5765, align 2, !tbaa !399
  %5766 = shufflevector <32 x i16> %5760, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5767 = getelementptr inbounds i16, i16* %5764, i64 16
  %5768 = bitcast i16* %5767 to <16 x i16>*
  store <16 x i16> %5766, <16 x i16>* %5768, align 2, !tbaa !399
  br label %"consume blur_x395"

"consume blur_x395":                              ; preds = %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge", %"produce blur_x394"
  %.pre-phi3290 = phi i64 [ %.pre3289, %"for blur_y.s0.x.x.rebased388.consume blur_x395_crit_edge" ], [ %5762, %"produce blur_x394" ]
  %5769 = add nsw i64 %5618, %.pre-phi3290
  %5770 = getelementptr inbounds i16, i16* %blur_x, i64 %5769
  %5771 = bitcast i16* %5770 to <16 x i16>*
  %5772 = load <16 x i16>, <16 x i16>* %5771, align 2, !tbaa !399
  %5773 = getelementptr inbounds i16, i16* %5770, i64 16
  %5774 = bitcast i16* %5773 to <16 x i16>*
  %5775 = load <16 x i16>, <16 x i16>* %5774, align 2, !tbaa !399
  %5776 = add nsw i64 %5621, %.pre-phi3290
  %5777 = getelementptr inbounds i16, i16* %blur_x, i64 %5776
  %5778 = bitcast i16* %5777 to <16 x i16>*
  %5779 = load <16 x i16>, <16 x i16>* %5778, align 2, !tbaa !399
  %5780 = getelementptr inbounds i16, i16* %5777, i64 16
  %5781 = bitcast i16* %5780 to <16 x i16>*
  %5782 = load <16 x i16>, <16 x i16>* %5781, align 2, !tbaa !399
  %5783 = add nsw i64 %5624, %.pre-phi3290
  %5784 = getelementptr inbounds i16, i16* %blur_x, i64 %5783
  %5785 = bitcast i16* %5784 to <16 x i16>*
  %5786 = load <16 x i16>, <16 x i16>* %5785, align 2, !tbaa !399
  %5787 = getelementptr inbounds i16, i16* %5784, i64 16
  %5788 = bitcast i16* %5787 to <16 x i16>*
  %5789 = load <16 x i16>, <16 x i16>* %5788, align 2, !tbaa !399
  %5790 = add <16 x i16> %5779, %5772
  %5791 = add <16 x i16> %5790, %5786
  %5792 = add <16 x i16> %5782, %5775
  %5793 = add <16 x i16> %5792, %5789
  %5794 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5791, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5795 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5793, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5796 = shufflevector <16 x i16> %5794, <16 x i16> %5795, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5797 = lshr <32 x i16> %5796, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5798 = shufflevector <32 x i16> %5797, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5799 = add nsw i64 %5628, %.pre-phi3290
  %5800 = getelementptr inbounds i16, i16* %65, i64 %5799
  %5801 = bitcast i16* %5800 to <16 x i16>*
  store <16 x i16> %5798, <16 x i16>* %5801, align 2, !tbaa !401
  %5802 = shufflevector <32 x i16> %5797, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5803 = getelementptr inbounds i16, i16* %5800, i64 16
  %5804 = bitcast i16* %5803 to <16 x i16>*
  store <16 x i16> %5802, <16 x i16>* %5804, align 2, !tbaa !401
  %indvars.iv.next3079 = add nuw nsw i64 %indvars.iv3078, 1
  %.not2552 = icmp eq i64 %indvars.iv.next3079, %180
  br i1 %.not2552, label %"end for blur_y.s0.x.x.rebased389", label %"for blur_y.s0.x.x.rebased388"

"for blur_y.s0.x.x.rebased396":                   ; preds = %"for blur_y.s0.x.x.rebased396.preheader", %"consume blur_x404"
  %blur_y.s0.x.x.rebased398 = phi i32 [ %5883, %"consume blur_x404" ], [ 0, %"for blur_y.s0.x.x.rebased396.preheader" ]
  %5805 = add nsw i32 %blur_y.s0.x.x.rebased398, %t1582
  %a196 = shl nsw i32 %5805, 5
  %5806 = icmp sgt i32 %a14, %a196
  %b202 = select i1 %5806, i32 %a196, i32 %a14
  %5807 = icmp slt i32 %5805, 1
  %5808 = icmp sgt i32 %4, %a196
  %5809 = or i1 %5807, %5808
  br i1 %5809, label %"produce blur_x402", label %"consume blur_x404"

"end for blur_y.s0.x.x.rebased397":               ; preds = %"consume blur_x404", %"end for blur_y.s0.x.x.rebased389"
  br i1 %34, label %"produce blur_x408", label %after_bb405

"produce blur_x402":                              ; preds = %"for blur_y.s0.x.x.rebased396"
  %5810 = icmp slt i32 %b202, %4
  %blur_x.s0.x.v1.base.s403 = select i1 %5810, i32 %b202, i32 %4
  %t917 = add nsw i32 %blur_x.s0.x.v1.base.s403, %t1889
  %5811 = sext i32 %t917 to i64
  %5812 = getelementptr inbounds i16, i16* %read_input, i64 %5811
  %5813 = getelementptr inbounds i16, i16* %5812, i64 1
  %5814 = bitcast i16* %5813 to <16 x i16>*
  %5815 = load <16 x i16>, <16 x i16>* %5814, align 2, !tbaa !396
  %5816 = getelementptr inbounds i16, i16* %5812, i64 17
  %5817 = bitcast i16* %5816 to <16 x i16>*
  %5818 = load <16 x i16>, <16 x i16>* %5817, align 2, !tbaa !396
  %5819 = getelementptr inbounds i16, i16* %5812, i64 2
  %5820 = bitcast i16* %5819 to <16 x i16>*
  %5821 = load <16 x i16>, <16 x i16>* %5820, align 2, !tbaa !396
  %5822 = getelementptr inbounds i16, i16* %5812, i64 18
  %5823 = bitcast i16* %5822 to <16 x i16>*
  %5824 = load <16 x i16>, <16 x i16>* %5823, align 2, !tbaa !396
  %5825 = bitcast i16* %5812 to <16 x i16>*
  %5826 = load <16 x i16>, <16 x i16>* %5825, align 2, !tbaa !396
  %5827 = getelementptr inbounds i16, i16* %5812, i64 16
  %5828 = bitcast i16* %5827 to <16 x i16>*
  %5829 = load <16 x i16>, <16 x i16>* %5828, align 2, !tbaa !396
  %5830 = add <16 x i16> %5821, %5815
  %5831 = add <16 x i16> %5830, %5826
  %5832 = add <16 x i16> %5824, %5818
  %5833 = add <16 x i16> %5832, %5829
  %5834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5831, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5833, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5836 = shufflevector <16 x i16> %5834, <16 x i16> %5835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5837 = lshr <32 x i16> %5836, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5838 = shufflevector <32 x i16> %5837, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5839 = sext i32 %blur_x.s0.x.v1.base.s403 to i64
  %5840 = add nsw i64 %5839, %5720
  %5841 = getelementptr inbounds i16, i16* %blur_x, i64 %5840
  %5842 = bitcast i16* %5841 to <16 x i16>*
  store <16 x i16> %5838, <16 x i16>* %5842, align 2, !tbaa !399
  %5843 = shufflevector <32 x i16> %5837, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5844 = getelementptr inbounds i16, i16* %5841, i64 16
  %5845 = bitcast i16* %5844 to <16 x i16>*
  store <16 x i16> %5843, <16 x i16>* %5845, align 2, !tbaa !399
  br label %"consume blur_x404"

"consume blur_x404":                              ; preds = %"for blur_y.s0.x.x.rebased396", %"produce blur_x402"
  %5846 = sext i32 %b202 to i64
  %5847 = add nsw i64 %5723, %5846
  %5848 = getelementptr inbounds i16, i16* %blur_x, i64 %5847
  %5849 = bitcast i16* %5848 to <16 x i16>*
  %5850 = load <16 x i16>, <16 x i16>* %5849, align 2, !tbaa !399
  %5851 = getelementptr inbounds i16, i16* %5848, i64 16
  %5852 = bitcast i16* %5851 to <16 x i16>*
  %5853 = load <16 x i16>, <16 x i16>* %5852, align 2, !tbaa !399
  %5854 = add nsw i64 %5726, %5846
  %5855 = getelementptr inbounds i16, i16* %blur_x, i64 %5854
  %5856 = bitcast i16* %5855 to <16 x i16>*
  %5857 = load <16 x i16>, <16 x i16>* %5856, align 2, !tbaa !399
  %5858 = getelementptr inbounds i16, i16* %5855, i64 16
  %5859 = bitcast i16* %5858 to <16 x i16>*
  %5860 = load <16 x i16>, <16 x i16>* %5859, align 2, !tbaa !399
  %5861 = add nsw i64 %5729, %5846
  %5862 = getelementptr inbounds i16, i16* %blur_x, i64 %5861
  %5863 = bitcast i16* %5862 to <16 x i16>*
  %5864 = load <16 x i16>, <16 x i16>* %5863, align 2, !tbaa !399
  %5865 = getelementptr inbounds i16, i16* %5862, i64 16
  %5866 = bitcast i16* %5865 to <16 x i16>*
  %5867 = load <16 x i16>, <16 x i16>* %5866, align 2, !tbaa !399
  %5868 = add <16 x i16> %5857, %5850
  %5869 = add <16 x i16> %5868, %5864
  %5870 = add <16 x i16> %5860, %5853
  %5871 = add <16 x i16> %5870, %5867
  %5872 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5869, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5873 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5871, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5874 = shufflevector <16 x i16> %5872, <16 x i16> %5873, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5875 = lshr <32 x i16> %5874, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5876 = shufflevector <32 x i16> %5875, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5877 = add nsw i64 %5733, %5846
  %5878 = getelementptr inbounds i16, i16* %65, i64 %5877
  %5879 = bitcast i16* %5878 to <16 x i16>*
  store <16 x i16> %5876, <16 x i16>* %5879, align 2, !tbaa !401
  %5880 = shufflevector <32 x i16> %5875, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5881 = getelementptr inbounds i16, i16* %5878, i64 16
  %5882 = bitcast i16* %5881 to <16 x i16>*
  store <16 x i16> %5880, <16 x i16>* %5882, align 2, !tbaa !401
  %5883 = add nuw nsw i32 %blur_y.s0.x.x.rebased398, 1
  %.not2551 = icmp eq i32 %5883, %t1639
  br i1 %.not2551, label %"end for blur_y.s0.x.x.rebased397", label %"for blur_y.s0.x.x.rebased396"

after_bb405:                                      ; preds = %"end for blur_y.s0.x.x.rebased397", %"produce blur_x408"
  br i1 %99, label %"for blur_y.s0.x.x.rebased410.preheader", label %"end for blur_y.s0.x.x.rebased411", !prof !386

"for blur_y.s0.x.x.rebased410.preheader":         ; preds = %after_bb405
  %5884 = sext i32 %t1650 to i64
  %5885 = zext i32 %.pre-phi3250 to i64
  %5886 = mul nsw i64 %5885, %108
  %5887 = sub nsw i64 %5886, %95
  %5888 = zext i32 %.pre-phi3254 to i64
  %5889 = mul nsw i64 %5888, %108
  %5890 = sub nsw i64 %5889, %95
  %5891 = zext i32 %.pre-phi to i64
  %5892 = mul nsw i64 %5891, %108
  %5893 = sub nsw i64 %5892, %95
  %5894 = sext i32 %a26 to i64
  %5895 = add nsw i64 %5894, 16
  %5896 = mul nsw i64 %5895, %109
  %5897 = add nsw i64 %5896, %112
  br label %"for blur_y.s0.x.x.rebased410"

"produce blur_x408":                              ; preds = %"end for blur_y.s0.x.x.rebased397"
  %5898 = getelementptr inbounds i16, i16* %read_input, i64 %143
  %5899 = getelementptr inbounds i16, i16* %5898, i64 -31
  %5900 = bitcast i16* %5899 to <16 x i16>*
  %5901 = load <16 x i16>, <16 x i16>* %5900, align 2, !tbaa !396
  %5902 = getelementptr inbounds i16, i16* %5898, i64 -15
  %5903 = bitcast i16* %5902 to <16 x i16>*
  %5904 = load <16 x i16>, <16 x i16>* %5903, align 2, !tbaa !396
  %5905 = getelementptr inbounds i16, i16* %5898, i64 -30
  %5906 = bitcast i16* %5905 to <16 x i16>*
  %5907 = load <16 x i16>, <16 x i16>* %5906, align 2, !tbaa !396
  %5908 = getelementptr inbounds i16, i16* %5898, i64 -14
  %5909 = bitcast i16* %5908 to <16 x i16>*
  %5910 = load <16 x i16>, <16 x i16>* %5909, align 2, !tbaa !396
  %5911 = getelementptr inbounds i16, i16* %5898, i64 -32
  %5912 = bitcast i16* %5911 to <16 x i16>*
  %5913 = load <16 x i16>, <16 x i16>* %5912, align 2, !tbaa !396
  %5914 = getelementptr inbounds i16, i16* %5898, i64 -16
  %5915 = bitcast i16* %5914 to <16 x i16>*
  %5916 = load <16 x i16>, <16 x i16>* %5915, align 2, !tbaa !396
  %5917 = add <16 x i16> %5907, %5901
  %5918 = add <16 x i16> %5917, %5913
  %5919 = add <16 x i16> %5910, %5904
  %5920 = add <16 x i16> %5919, %5916
  %5921 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5918, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5922 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5920, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5923 = shufflevector <16 x i16> %5921, <16 x i16> %5922, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5924 = lshr <32 x i16> %5923, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5925 = shufflevector <32 x i16> %5924, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5926 = zext i32 %.pre-phi3254 to i64
  %5927 = mul nsw i64 %96, %5926
  %5928 = add nsw i64 %98, %5927
  %5929 = getelementptr inbounds i16, i16* %blur_x, i64 %5928
  %5930 = getelementptr inbounds i16, i16* %5929, i64 -32
  %5931 = bitcast i16* %5930 to <16 x i16>*
  store <16 x i16> %5925, <16 x i16>* %5931, align 2, !tbaa !399
  %5932 = shufflevector <32 x i16> %5924, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5933 = getelementptr inbounds i16, i16* %5929, i64 -16
  %5934 = bitcast i16* %5933 to <16 x i16>*
  store <16 x i16> %5932, <16 x i16>* %5934, align 2, !tbaa !399
  %5935 = zext i32 %.pre-phi3250 to i64
  %5936 = mul nsw i64 %5935, %108
  %5937 = add nsw i64 %5936, %93
  %5938 = getelementptr inbounds i16, i16* %blur_x, i64 %5937
  %5939 = getelementptr inbounds i16, i16* %5938, i64 -32
  %5940 = bitcast i16* %5939 to <16 x i16>*
  %5941 = load <16 x i16>, <16 x i16>* %5940, align 2, !tbaa !399
  %5942 = getelementptr inbounds i16, i16* %5938, i64 -16
  %5943 = bitcast i16* %5942 to <16 x i16>*
  %5944 = load <16 x i16>, <16 x i16>* %5943, align 2, !tbaa !399
  %5945 = mul nsw i64 %5926, %108
  %5946 = add nsw i64 %5945, %93
  %5947 = getelementptr inbounds i16, i16* %blur_x, i64 %5946
  %5948 = getelementptr inbounds i16, i16* %5947, i64 -32
  %5949 = bitcast i16* %5948 to <16 x i16>*
  %5950 = load <16 x i16>, <16 x i16>* %5949, align 2, !tbaa !399
  %5951 = getelementptr inbounds i16, i16* %5947, i64 -16
  %5952 = bitcast i16* %5951 to <16 x i16>*
  %5953 = load <16 x i16>, <16 x i16>* %5952, align 2, !tbaa !399
  %5954 = zext i32 %.pre-phi to i64
  %5955 = mul nsw i64 %5954, %108
  %5956 = add nsw i64 %5955, %93
  %5957 = getelementptr inbounds i16, i16* %blur_x, i64 %5956
  %5958 = getelementptr inbounds i16, i16* %5957, i64 -32
  %5959 = bitcast i16* %5958 to <16 x i16>*
  %5960 = load <16 x i16>, <16 x i16>* %5959, align 2, !tbaa !399
  %5961 = getelementptr inbounds i16, i16* %5957, i64 -16
  %5962 = bitcast i16* %5961 to <16 x i16>*
  %5963 = load <16 x i16>, <16 x i16>* %5962, align 2, !tbaa !399
  %5964 = add <16 x i16> %5950, %5941
  %5965 = add <16 x i16> %5964, %5960
  %5966 = add <16 x i16> %5953, %5944
  %5967 = add <16 x i16> %5966, %5963
  %5968 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5965, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5969 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %5967, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %5970 = shufflevector <16 x i16> %5968, <16 x i16> %5969, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5971 = lshr <32 x i16> %5970, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %5972 = shufflevector <32 x i16> %5971, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %5973 = sext i32 %a26 to i64
  %5974 = add nsw i64 %5973, 16
  %5975 = mul nsw i64 %5974, %109
  %5976 = add nsw i64 %111, %5975
  %5977 = getelementptr inbounds i16, i16* %65, i64 %5976
  %5978 = getelementptr inbounds i16, i16* %5977, i64 -32
  %5979 = bitcast i16* %5978 to <16 x i16>*
  store <16 x i16> %5972, <16 x i16>* %5979, align 2, !tbaa !401
  %5980 = shufflevector <32 x i16> %5971, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %5981 = getelementptr inbounds i16, i16* %5977, i64 -16
  %5982 = bitcast i16* %5981 to <16 x i16>*
  store <16 x i16> %5980, <16 x i16>* %5982, align 2, !tbaa !401
  br label %after_bb405

"for blur_y.s0.x.x.rebased410":                   ; preds = %"for blur_y.s0.x.x.rebased410.preheader", %"consume blur_x417"
  %indvars.iv3081 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased410.preheader" ], [ %indvars.iv.next3082, %"consume blur_x417" ]
  %5983 = add nsw i64 %indvars.iv3081, %100
  %5984 = icmp slt i64 %5983, 1
  %5985 = trunc i64 %5983 to i32
  %5986 = shl nsw i32 %5985, 5
  %5987 = icmp sgt i32 %4, %5986
  %5988 = or i1 %5984, %5987
  br i1 %5988, label %"produce blur_x416", label %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge"

"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased410"
  %.pre3291 = shl nsw i64 %5983, 5
  br label %"consume blur_x417"

"end for blur_y.s0.x.x.rebased411":               ; preds = %"consume blur_x417", %after_bb405
  br i1 %101, label %"for blur_y.s0.x.x.rebased418.preheader", label %"end for blur_y.s0.x.x.rebased419", !prof !386

"for blur_y.s0.x.x.rebased418.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased411"
  %5989 = sext i32 %t1650 to i64
  %5990 = zext i32 %.pre-phi3250 to i64
  %5991 = mul nsw i64 %5990, %108
  %5992 = sub nsw i64 %5991, %95
  %5993 = zext i32 %.pre-phi3254 to i64
  %5994 = mul nsw i64 %5993, %108
  %5995 = sub nsw i64 %5994, %95
  %5996 = zext i32 %.pre-phi to i64
  %5997 = mul nsw i64 %5996, %108
  %5998 = sub nsw i64 %5997, %95
  %5999 = sext i32 %a26 to i64
  %6000 = add nsw i64 %5999, 16
  %6001 = mul nsw i64 %6000, %109
  %6002 = add nsw i64 %6001, %112
  br label %"for blur_y.s0.x.x.rebased418"

"produce blur_x416":                              ; preds = %"for blur_y.s0.x.x.rebased410"
  %t928 = add nsw i32 %5986, %t1905
  %6003 = sext i32 %t928 to i64
  %6004 = getelementptr inbounds i16, i16* %read_input, i64 %6003
  %6005 = getelementptr inbounds i16, i16* %6004, i64 1
  %6006 = bitcast i16* %6005 to <16 x i16>*
  %6007 = load <16 x i16>, <16 x i16>* %6006, align 2, !tbaa !396
  %6008 = getelementptr inbounds i16, i16* %6004, i64 17
  %6009 = bitcast i16* %6008 to <16 x i16>*
  %6010 = load <16 x i16>, <16 x i16>* %6009, align 2, !tbaa !396
  %6011 = getelementptr inbounds i16, i16* %6004, i64 2
  %6012 = bitcast i16* %6011 to <16 x i16>*
  %6013 = load <16 x i16>, <16 x i16>* %6012, align 2, !tbaa !396
  %6014 = getelementptr inbounds i16, i16* %6004, i64 18
  %6015 = bitcast i16* %6014 to <16 x i16>*
  %6016 = load <16 x i16>, <16 x i16>* %6015, align 2, !tbaa !396
  %6017 = bitcast i16* %6004 to <16 x i16>*
  %6018 = load <16 x i16>, <16 x i16>* %6017, align 2, !tbaa !396
  %6019 = getelementptr inbounds i16, i16* %6004, i64 16
  %6020 = bitcast i16* %6019 to <16 x i16>*
  %6021 = load <16 x i16>, <16 x i16>* %6020, align 2, !tbaa !396
  %6022 = add <16 x i16> %6013, %6007
  %6023 = add <16 x i16> %6022, %6018
  %6024 = add <16 x i16> %6016, %6010
  %6025 = add <16 x i16> %6024, %6021
  %6026 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6023, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6025, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6028 = shufflevector <16 x i16> %6026, <16 x i16> %6027, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6029 = lshr <32 x i16> %6028, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6030 = shufflevector <32 x i16> %6029, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6031 = shl nsw i64 %5983, 5
  %6032 = add nsw i64 %6031, %5884
  %6033 = getelementptr inbounds i16, i16* %blur_x, i64 %6032
  %6034 = bitcast i16* %6033 to <16 x i16>*
  store <16 x i16> %6030, <16 x i16>* %6034, align 2, !tbaa !399
  %6035 = shufflevector <32 x i16> %6029, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6036 = getelementptr inbounds i16, i16* %6033, i64 16
  %6037 = bitcast i16* %6036 to <16 x i16>*
  store <16 x i16> %6035, <16 x i16>* %6037, align 2, !tbaa !399
  br label %"consume blur_x417"

"consume blur_x417":                              ; preds = %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge", %"produce blur_x416"
  %.pre-phi3292 = phi i64 [ %.pre3291, %"for blur_y.s0.x.x.rebased410.consume blur_x417_crit_edge" ], [ %6031, %"produce blur_x416" ]
  %6038 = add nsw i64 %5887, %.pre-phi3292
  %6039 = getelementptr inbounds i16, i16* %blur_x, i64 %6038
  %6040 = bitcast i16* %6039 to <16 x i16>*
  %6041 = load <16 x i16>, <16 x i16>* %6040, align 2, !tbaa !399
  %6042 = getelementptr inbounds i16, i16* %6039, i64 16
  %6043 = bitcast i16* %6042 to <16 x i16>*
  %6044 = load <16 x i16>, <16 x i16>* %6043, align 2, !tbaa !399
  %6045 = add nsw i64 %5890, %.pre-phi3292
  %6046 = getelementptr inbounds i16, i16* %blur_x, i64 %6045
  %6047 = bitcast i16* %6046 to <16 x i16>*
  %6048 = load <16 x i16>, <16 x i16>* %6047, align 2, !tbaa !399
  %6049 = getelementptr inbounds i16, i16* %6046, i64 16
  %6050 = bitcast i16* %6049 to <16 x i16>*
  %6051 = load <16 x i16>, <16 x i16>* %6050, align 2, !tbaa !399
  %6052 = add nsw i64 %5893, %.pre-phi3292
  %6053 = getelementptr inbounds i16, i16* %blur_x, i64 %6052
  %6054 = bitcast i16* %6053 to <16 x i16>*
  %6055 = load <16 x i16>, <16 x i16>* %6054, align 2, !tbaa !399
  %6056 = getelementptr inbounds i16, i16* %6053, i64 16
  %6057 = bitcast i16* %6056 to <16 x i16>*
  %6058 = load <16 x i16>, <16 x i16>* %6057, align 2, !tbaa !399
  %6059 = add <16 x i16> %6048, %6041
  %6060 = add <16 x i16> %6059, %6055
  %6061 = add <16 x i16> %6051, %6044
  %6062 = add <16 x i16> %6061, %6058
  %6063 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6060, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6064 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6062, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6065 = shufflevector <16 x i16> %6063, <16 x i16> %6064, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6066 = lshr <32 x i16> %6065, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6067 = shufflevector <32 x i16> %6066, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6068 = add nsw i64 %5897, %.pre-phi3292
  %6069 = getelementptr inbounds i16, i16* %65, i64 %6068
  %6070 = bitcast i16* %6069 to <16 x i16>*
  store <16 x i16> %6067, <16 x i16>* %6070, align 2, !tbaa !401
  %6071 = shufflevector <32 x i16> %6066, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6072 = getelementptr inbounds i16, i16* %6069, i64 16
  %6073 = bitcast i16* %6072 to <16 x i16>*
  store <16 x i16> %6071, <16 x i16>* %6073, align 2, !tbaa !401
  %indvars.iv.next3082 = add nuw nsw i64 %indvars.iv3081, 1
  %.not2550 = icmp eq i64 %indvars.iv.next3082, %180
  br i1 %.not2550, label %"end for blur_y.s0.x.x.rebased411", label %"for blur_y.s0.x.x.rebased410"

"for blur_y.s0.x.x.rebased418":                   ; preds = %"for blur_y.s0.x.x.rebased418.preheader", %"consume blur_x426"
  %blur_y.s0.x.x.rebased420 = phi i32 [ %6152, %"consume blur_x426" ], [ 0, %"for blur_y.s0.x.x.rebased418.preheader" ]
  %6074 = add nsw i32 %blur_y.s0.x.x.rebased420, %t1582
  %a203 = shl nsw i32 %6074, 5
  %6075 = icmp sgt i32 %a14, %a203
  %b209 = select i1 %6075, i32 %a203, i32 %a14
  %6076 = icmp slt i32 %6074, 1
  %6077 = icmp sgt i32 %4, %a203
  %6078 = or i1 %6076, %6077
  br i1 %6078, label %"produce blur_x424", label %"consume blur_x426"

"end for blur_y.s0.x.x.rebased419":               ; preds = %"consume blur_x426", %"end for blur_y.s0.x.x.rebased411"
  br i1 %34, label %"produce blur_x430", label %after_bb427

"produce blur_x424":                              ; preds = %"for blur_y.s0.x.x.rebased418"
  %6079 = icmp slt i32 %b209, %4
  %blur_x.s0.x.v1.base.s425 = select i1 %6079, i32 %b209, i32 %4
  %t933 = add nsw i32 %blur_x.s0.x.v1.base.s425, %t1905
  %6080 = sext i32 %t933 to i64
  %6081 = getelementptr inbounds i16, i16* %read_input, i64 %6080
  %6082 = getelementptr inbounds i16, i16* %6081, i64 1
  %6083 = bitcast i16* %6082 to <16 x i16>*
  %6084 = load <16 x i16>, <16 x i16>* %6083, align 2, !tbaa !396
  %6085 = getelementptr inbounds i16, i16* %6081, i64 17
  %6086 = bitcast i16* %6085 to <16 x i16>*
  %6087 = load <16 x i16>, <16 x i16>* %6086, align 2, !tbaa !396
  %6088 = getelementptr inbounds i16, i16* %6081, i64 2
  %6089 = bitcast i16* %6088 to <16 x i16>*
  %6090 = load <16 x i16>, <16 x i16>* %6089, align 2, !tbaa !396
  %6091 = getelementptr inbounds i16, i16* %6081, i64 18
  %6092 = bitcast i16* %6091 to <16 x i16>*
  %6093 = load <16 x i16>, <16 x i16>* %6092, align 2, !tbaa !396
  %6094 = bitcast i16* %6081 to <16 x i16>*
  %6095 = load <16 x i16>, <16 x i16>* %6094, align 2, !tbaa !396
  %6096 = getelementptr inbounds i16, i16* %6081, i64 16
  %6097 = bitcast i16* %6096 to <16 x i16>*
  %6098 = load <16 x i16>, <16 x i16>* %6097, align 2, !tbaa !396
  %6099 = add <16 x i16> %6090, %6084
  %6100 = add <16 x i16> %6099, %6095
  %6101 = add <16 x i16> %6093, %6087
  %6102 = add <16 x i16> %6101, %6098
  %6103 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6100, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6104 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6102, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6105 = shufflevector <16 x i16> %6103, <16 x i16> %6104, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6106 = lshr <32 x i16> %6105, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6107 = shufflevector <32 x i16> %6106, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6108 = sext i32 %blur_x.s0.x.v1.base.s425 to i64
  %6109 = add nsw i64 %6108, %5989
  %6110 = getelementptr inbounds i16, i16* %blur_x, i64 %6109
  %6111 = bitcast i16* %6110 to <16 x i16>*
  store <16 x i16> %6107, <16 x i16>* %6111, align 2, !tbaa !399
  %6112 = shufflevector <32 x i16> %6106, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6113 = getelementptr inbounds i16, i16* %6110, i64 16
  %6114 = bitcast i16* %6113 to <16 x i16>*
  store <16 x i16> %6112, <16 x i16>* %6114, align 2, !tbaa !399
  br label %"consume blur_x426"

"consume blur_x426":                              ; preds = %"for blur_y.s0.x.x.rebased418", %"produce blur_x424"
  %6115 = sext i32 %b209 to i64
  %6116 = add nsw i64 %5992, %6115
  %6117 = getelementptr inbounds i16, i16* %blur_x, i64 %6116
  %6118 = bitcast i16* %6117 to <16 x i16>*
  %6119 = load <16 x i16>, <16 x i16>* %6118, align 2, !tbaa !399
  %6120 = getelementptr inbounds i16, i16* %6117, i64 16
  %6121 = bitcast i16* %6120 to <16 x i16>*
  %6122 = load <16 x i16>, <16 x i16>* %6121, align 2, !tbaa !399
  %6123 = add nsw i64 %5995, %6115
  %6124 = getelementptr inbounds i16, i16* %blur_x, i64 %6123
  %6125 = bitcast i16* %6124 to <16 x i16>*
  %6126 = load <16 x i16>, <16 x i16>* %6125, align 2, !tbaa !399
  %6127 = getelementptr inbounds i16, i16* %6124, i64 16
  %6128 = bitcast i16* %6127 to <16 x i16>*
  %6129 = load <16 x i16>, <16 x i16>* %6128, align 2, !tbaa !399
  %6130 = add nsw i64 %5998, %6115
  %6131 = getelementptr inbounds i16, i16* %blur_x, i64 %6130
  %6132 = bitcast i16* %6131 to <16 x i16>*
  %6133 = load <16 x i16>, <16 x i16>* %6132, align 2, !tbaa !399
  %6134 = getelementptr inbounds i16, i16* %6131, i64 16
  %6135 = bitcast i16* %6134 to <16 x i16>*
  %6136 = load <16 x i16>, <16 x i16>* %6135, align 2, !tbaa !399
  %6137 = add <16 x i16> %6126, %6119
  %6138 = add <16 x i16> %6137, %6133
  %6139 = add <16 x i16> %6129, %6122
  %6140 = add <16 x i16> %6139, %6136
  %6141 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6138, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6142 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6140, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6143 = shufflevector <16 x i16> %6141, <16 x i16> %6142, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6144 = lshr <32 x i16> %6143, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6145 = shufflevector <32 x i16> %6144, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6146 = add nsw i64 %6002, %6115
  %6147 = getelementptr inbounds i16, i16* %65, i64 %6146
  %6148 = bitcast i16* %6147 to <16 x i16>*
  store <16 x i16> %6145, <16 x i16>* %6148, align 2, !tbaa !401
  %6149 = shufflevector <32 x i16> %6144, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6150 = getelementptr inbounds i16, i16* %6147, i64 16
  %6151 = bitcast i16* %6150 to <16 x i16>*
  store <16 x i16> %6149, <16 x i16>* %6151, align 2, !tbaa !401
  %6152 = add nuw nsw i32 %blur_y.s0.x.x.rebased420, 1
  %.not2549 = icmp eq i32 %6152, %t1639
  br i1 %.not2549, label %"end for blur_y.s0.x.x.rebased419", label %"for blur_y.s0.x.x.rebased418"

after_bb427:                                      ; preds = %"end for blur_y.s0.x.x.rebased419", %"produce blur_x430"
  br i1 %99, label %"for blur_y.s0.x.x.rebased432.preheader", label %"end for blur_y.s0.x.x.rebased433", !prof !386

"for blur_y.s0.x.x.rebased432.preheader":         ; preds = %after_bb427
  %6153 = sext i32 %t1666 to i64
  %6154 = zext i32 %.pre-phi3254 to i64
  %6155 = mul nsw i64 %6154, %108
  %6156 = sub nsw i64 %6155, %95
  %6157 = zext i32 %.pre-phi3260 to i64
  %6158 = mul nsw i64 %6157, %108
  %6159 = sub nsw i64 %6158, %95
  %6160 = zext i32 %.pre-phi3250 to i64
  %6161 = mul nsw i64 %6160, %108
  %6162 = sub nsw i64 %6161, %95
  %6163 = sext i32 %a26 to i64
  %6164 = add nsw i64 %6163, 17
  %6165 = mul nsw i64 %6164, %109
  %6166 = add nsw i64 %6165, %112
  br label %"for blur_y.s0.x.x.rebased432"

"produce blur_x430":                              ; preds = %"end for blur_y.s0.x.x.rebased419"
  %6167 = getelementptr inbounds i16, i16* %read_input, i64 %145
  %6168 = getelementptr inbounds i16, i16* %6167, i64 -31
  %6169 = bitcast i16* %6168 to <16 x i16>*
  %6170 = load <16 x i16>, <16 x i16>* %6169, align 2, !tbaa !396
  %6171 = getelementptr inbounds i16, i16* %6167, i64 -15
  %6172 = bitcast i16* %6171 to <16 x i16>*
  %6173 = load <16 x i16>, <16 x i16>* %6172, align 2, !tbaa !396
  %6174 = getelementptr inbounds i16, i16* %6167, i64 -30
  %6175 = bitcast i16* %6174 to <16 x i16>*
  %6176 = load <16 x i16>, <16 x i16>* %6175, align 2, !tbaa !396
  %6177 = getelementptr inbounds i16, i16* %6167, i64 -14
  %6178 = bitcast i16* %6177 to <16 x i16>*
  %6179 = load <16 x i16>, <16 x i16>* %6178, align 2, !tbaa !396
  %6180 = getelementptr inbounds i16, i16* %6167, i64 -32
  %6181 = bitcast i16* %6180 to <16 x i16>*
  %6182 = load <16 x i16>, <16 x i16>* %6181, align 2, !tbaa !396
  %6183 = getelementptr inbounds i16, i16* %6167, i64 -16
  %6184 = bitcast i16* %6183 to <16 x i16>*
  %6185 = load <16 x i16>, <16 x i16>* %6184, align 2, !tbaa !396
  %6186 = add <16 x i16> %6176, %6170
  %6187 = add <16 x i16> %6186, %6182
  %6188 = add <16 x i16> %6179, %6173
  %6189 = add <16 x i16> %6188, %6185
  %6190 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6187, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6191 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6189, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6192 = shufflevector <16 x i16> %6190, <16 x i16> %6191, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6193 = lshr <32 x i16> %6192, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6194 = shufflevector <32 x i16> %6193, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6195 = zext i32 %.pre-phi3260 to i64
  %6196 = mul nsw i64 %96, %6195
  %6197 = add nsw i64 %98, %6196
  %6198 = getelementptr inbounds i16, i16* %blur_x, i64 %6197
  %6199 = getelementptr inbounds i16, i16* %6198, i64 -32
  %6200 = bitcast i16* %6199 to <16 x i16>*
  store <16 x i16> %6194, <16 x i16>* %6200, align 2, !tbaa !399
  %6201 = shufflevector <32 x i16> %6193, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6202 = getelementptr inbounds i16, i16* %6198, i64 -16
  %6203 = bitcast i16* %6202 to <16 x i16>*
  store <16 x i16> %6201, <16 x i16>* %6203, align 2, !tbaa !399
  %6204 = zext i32 %.pre-phi3254 to i64
  %6205 = mul nsw i64 %6204, %108
  %6206 = add nsw i64 %6205, %93
  %6207 = getelementptr inbounds i16, i16* %blur_x, i64 %6206
  %6208 = getelementptr inbounds i16, i16* %6207, i64 -32
  %6209 = bitcast i16* %6208 to <16 x i16>*
  %6210 = load <16 x i16>, <16 x i16>* %6209, align 2, !tbaa !399
  %6211 = getelementptr inbounds i16, i16* %6207, i64 -16
  %6212 = bitcast i16* %6211 to <16 x i16>*
  %6213 = load <16 x i16>, <16 x i16>* %6212, align 2, !tbaa !399
  %6214 = mul nsw i64 %6195, %108
  %6215 = add nsw i64 %6214, %93
  %6216 = getelementptr inbounds i16, i16* %blur_x, i64 %6215
  %6217 = getelementptr inbounds i16, i16* %6216, i64 -32
  %6218 = bitcast i16* %6217 to <16 x i16>*
  %6219 = load <16 x i16>, <16 x i16>* %6218, align 2, !tbaa !399
  %6220 = getelementptr inbounds i16, i16* %6216, i64 -16
  %6221 = bitcast i16* %6220 to <16 x i16>*
  %6222 = load <16 x i16>, <16 x i16>* %6221, align 2, !tbaa !399
  %6223 = zext i32 %.pre-phi3250 to i64
  %6224 = mul nsw i64 %6223, %108
  %6225 = add nsw i64 %6224, %93
  %6226 = getelementptr inbounds i16, i16* %blur_x, i64 %6225
  %6227 = getelementptr inbounds i16, i16* %6226, i64 -32
  %6228 = bitcast i16* %6227 to <16 x i16>*
  %6229 = load <16 x i16>, <16 x i16>* %6228, align 2, !tbaa !399
  %6230 = getelementptr inbounds i16, i16* %6226, i64 -16
  %6231 = bitcast i16* %6230 to <16 x i16>*
  %6232 = load <16 x i16>, <16 x i16>* %6231, align 2, !tbaa !399
  %6233 = add <16 x i16> %6219, %6210
  %6234 = add <16 x i16> %6233, %6229
  %6235 = add <16 x i16> %6222, %6213
  %6236 = add <16 x i16> %6235, %6232
  %6237 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6234, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6238 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6236, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6239 = shufflevector <16 x i16> %6237, <16 x i16> %6238, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6240 = lshr <32 x i16> %6239, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6241 = shufflevector <32 x i16> %6240, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6242 = sext i32 %a26 to i64
  %6243 = add nsw i64 %6242, 17
  %6244 = mul nsw i64 %6243, %109
  %6245 = add nsw i64 %111, %6244
  %6246 = getelementptr inbounds i16, i16* %65, i64 %6245
  %6247 = getelementptr inbounds i16, i16* %6246, i64 -32
  %6248 = bitcast i16* %6247 to <16 x i16>*
  store <16 x i16> %6241, <16 x i16>* %6248, align 2, !tbaa !401
  %6249 = shufflevector <32 x i16> %6240, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6250 = getelementptr inbounds i16, i16* %6246, i64 -16
  %6251 = bitcast i16* %6250 to <16 x i16>*
  store <16 x i16> %6249, <16 x i16>* %6251, align 2, !tbaa !401
  br label %after_bb427

"for blur_y.s0.x.x.rebased432":                   ; preds = %"for blur_y.s0.x.x.rebased432.preheader", %"consume blur_x439"
  %indvars.iv3084 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased432.preheader" ], [ %indvars.iv.next3085, %"consume blur_x439" ]
  %6252 = add nsw i64 %indvars.iv3084, %100
  %6253 = icmp slt i64 %6252, 1
  %6254 = trunc i64 %6252 to i32
  %6255 = shl nsw i32 %6254, 5
  %6256 = icmp sgt i32 %4, %6255
  %6257 = or i1 %6253, %6256
  br i1 %6257, label %"produce blur_x438", label %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge"

"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased432"
  %.pre3293 = shl nsw i64 %6252, 5
  br label %"consume blur_x439"

"end for blur_y.s0.x.x.rebased433":               ; preds = %"consume blur_x439", %after_bb427
  br i1 %101, label %"for blur_y.s0.x.x.rebased440.preheader", label %"end for blur_y.s0.x.x.rebased441", !prof !386

"for blur_y.s0.x.x.rebased440.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased433"
  %6258 = sext i32 %t1666 to i64
  %6259 = zext i32 %.pre-phi3254 to i64
  %6260 = mul nsw i64 %6259, %108
  %6261 = sub nsw i64 %6260, %95
  %6262 = zext i32 %.pre-phi3260 to i64
  %6263 = mul nsw i64 %6262, %108
  %6264 = sub nsw i64 %6263, %95
  %6265 = zext i32 %.pre-phi3250 to i64
  %6266 = mul nsw i64 %6265, %108
  %6267 = sub nsw i64 %6266, %95
  %6268 = sext i32 %a26 to i64
  %6269 = add nsw i64 %6268, 17
  %6270 = mul nsw i64 %6269, %109
  %6271 = add nsw i64 %6270, %112
  br label %"for blur_y.s0.x.x.rebased440"

"produce blur_x438":                              ; preds = %"for blur_y.s0.x.x.rebased432"
  %t944 = add nsw i32 %6255, %t1921
  %6272 = sext i32 %t944 to i64
  %6273 = getelementptr inbounds i16, i16* %read_input, i64 %6272
  %6274 = getelementptr inbounds i16, i16* %6273, i64 1
  %6275 = bitcast i16* %6274 to <16 x i16>*
  %6276 = load <16 x i16>, <16 x i16>* %6275, align 2, !tbaa !396
  %6277 = getelementptr inbounds i16, i16* %6273, i64 17
  %6278 = bitcast i16* %6277 to <16 x i16>*
  %6279 = load <16 x i16>, <16 x i16>* %6278, align 2, !tbaa !396
  %6280 = getelementptr inbounds i16, i16* %6273, i64 2
  %6281 = bitcast i16* %6280 to <16 x i16>*
  %6282 = load <16 x i16>, <16 x i16>* %6281, align 2, !tbaa !396
  %6283 = getelementptr inbounds i16, i16* %6273, i64 18
  %6284 = bitcast i16* %6283 to <16 x i16>*
  %6285 = load <16 x i16>, <16 x i16>* %6284, align 2, !tbaa !396
  %6286 = bitcast i16* %6273 to <16 x i16>*
  %6287 = load <16 x i16>, <16 x i16>* %6286, align 2, !tbaa !396
  %6288 = getelementptr inbounds i16, i16* %6273, i64 16
  %6289 = bitcast i16* %6288 to <16 x i16>*
  %6290 = load <16 x i16>, <16 x i16>* %6289, align 2, !tbaa !396
  %6291 = add <16 x i16> %6282, %6276
  %6292 = add <16 x i16> %6291, %6287
  %6293 = add <16 x i16> %6285, %6279
  %6294 = add <16 x i16> %6293, %6290
  %6295 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6292, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6296 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6294, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6297 = shufflevector <16 x i16> %6295, <16 x i16> %6296, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6298 = lshr <32 x i16> %6297, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6299 = shufflevector <32 x i16> %6298, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6300 = shl nsw i64 %6252, 5
  %6301 = add nsw i64 %6300, %6153
  %6302 = getelementptr inbounds i16, i16* %blur_x, i64 %6301
  %6303 = bitcast i16* %6302 to <16 x i16>*
  store <16 x i16> %6299, <16 x i16>* %6303, align 2, !tbaa !399
  %6304 = shufflevector <32 x i16> %6298, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6305 = getelementptr inbounds i16, i16* %6302, i64 16
  %6306 = bitcast i16* %6305 to <16 x i16>*
  store <16 x i16> %6304, <16 x i16>* %6306, align 2, !tbaa !399
  br label %"consume blur_x439"

"consume blur_x439":                              ; preds = %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge", %"produce blur_x438"
  %.pre-phi3294 = phi i64 [ %.pre3293, %"for blur_y.s0.x.x.rebased432.consume blur_x439_crit_edge" ], [ %6300, %"produce blur_x438" ]
  %6307 = add nsw i64 %6156, %.pre-phi3294
  %6308 = getelementptr inbounds i16, i16* %blur_x, i64 %6307
  %6309 = bitcast i16* %6308 to <16 x i16>*
  %6310 = load <16 x i16>, <16 x i16>* %6309, align 2, !tbaa !399
  %6311 = getelementptr inbounds i16, i16* %6308, i64 16
  %6312 = bitcast i16* %6311 to <16 x i16>*
  %6313 = load <16 x i16>, <16 x i16>* %6312, align 2, !tbaa !399
  %6314 = add nsw i64 %6159, %.pre-phi3294
  %6315 = getelementptr inbounds i16, i16* %blur_x, i64 %6314
  %6316 = bitcast i16* %6315 to <16 x i16>*
  %6317 = load <16 x i16>, <16 x i16>* %6316, align 2, !tbaa !399
  %6318 = getelementptr inbounds i16, i16* %6315, i64 16
  %6319 = bitcast i16* %6318 to <16 x i16>*
  %6320 = load <16 x i16>, <16 x i16>* %6319, align 2, !tbaa !399
  %6321 = add nsw i64 %6162, %.pre-phi3294
  %6322 = getelementptr inbounds i16, i16* %blur_x, i64 %6321
  %6323 = bitcast i16* %6322 to <16 x i16>*
  %6324 = load <16 x i16>, <16 x i16>* %6323, align 2, !tbaa !399
  %6325 = getelementptr inbounds i16, i16* %6322, i64 16
  %6326 = bitcast i16* %6325 to <16 x i16>*
  %6327 = load <16 x i16>, <16 x i16>* %6326, align 2, !tbaa !399
  %6328 = add <16 x i16> %6317, %6310
  %6329 = add <16 x i16> %6328, %6324
  %6330 = add <16 x i16> %6320, %6313
  %6331 = add <16 x i16> %6330, %6327
  %6332 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6329, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6333 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6331, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6334 = shufflevector <16 x i16> %6332, <16 x i16> %6333, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6335 = lshr <32 x i16> %6334, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6336 = shufflevector <32 x i16> %6335, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6337 = add nsw i64 %6166, %.pre-phi3294
  %6338 = getelementptr inbounds i16, i16* %65, i64 %6337
  %6339 = bitcast i16* %6338 to <16 x i16>*
  store <16 x i16> %6336, <16 x i16>* %6339, align 2, !tbaa !401
  %6340 = shufflevector <32 x i16> %6335, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6341 = getelementptr inbounds i16, i16* %6338, i64 16
  %6342 = bitcast i16* %6341 to <16 x i16>*
  store <16 x i16> %6340, <16 x i16>* %6342, align 2, !tbaa !401
  %indvars.iv.next3085 = add nuw nsw i64 %indvars.iv3084, 1
  %.not2548 = icmp eq i64 %indvars.iv.next3085, %180
  br i1 %.not2548, label %"end for blur_y.s0.x.x.rebased433", label %"for blur_y.s0.x.x.rebased432"

"for blur_y.s0.x.x.rebased440":                   ; preds = %"for blur_y.s0.x.x.rebased440.preheader", %"consume blur_x448"
  %blur_y.s0.x.x.rebased442 = phi i32 [ %6421, %"consume blur_x448" ], [ 0, %"for blur_y.s0.x.x.rebased440.preheader" ]
  %6343 = add nsw i32 %blur_y.s0.x.x.rebased442, %t1582
  %a210 = shl nsw i32 %6343, 5
  %6344 = icmp sgt i32 %a14, %a210
  %b216 = select i1 %6344, i32 %a210, i32 %a14
  %6345 = icmp slt i32 %6343, 1
  %6346 = icmp sgt i32 %4, %a210
  %6347 = or i1 %6345, %6346
  br i1 %6347, label %"produce blur_x446", label %"consume blur_x448"

"end for blur_y.s0.x.x.rebased441":               ; preds = %"consume blur_x448", %"end for blur_y.s0.x.x.rebased433"
  br i1 %34, label %"produce blur_x452", label %after_bb449

"produce blur_x446":                              ; preds = %"for blur_y.s0.x.x.rebased440"
  %6348 = icmp slt i32 %b216, %4
  %blur_x.s0.x.v1.base.s447 = select i1 %6348, i32 %b216, i32 %4
  %t949 = add nsw i32 %blur_x.s0.x.v1.base.s447, %t1921
  %6349 = sext i32 %t949 to i64
  %6350 = getelementptr inbounds i16, i16* %read_input, i64 %6349
  %6351 = getelementptr inbounds i16, i16* %6350, i64 1
  %6352 = bitcast i16* %6351 to <16 x i16>*
  %6353 = load <16 x i16>, <16 x i16>* %6352, align 2, !tbaa !396
  %6354 = getelementptr inbounds i16, i16* %6350, i64 17
  %6355 = bitcast i16* %6354 to <16 x i16>*
  %6356 = load <16 x i16>, <16 x i16>* %6355, align 2, !tbaa !396
  %6357 = getelementptr inbounds i16, i16* %6350, i64 2
  %6358 = bitcast i16* %6357 to <16 x i16>*
  %6359 = load <16 x i16>, <16 x i16>* %6358, align 2, !tbaa !396
  %6360 = getelementptr inbounds i16, i16* %6350, i64 18
  %6361 = bitcast i16* %6360 to <16 x i16>*
  %6362 = load <16 x i16>, <16 x i16>* %6361, align 2, !tbaa !396
  %6363 = bitcast i16* %6350 to <16 x i16>*
  %6364 = load <16 x i16>, <16 x i16>* %6363, align 2, !tbaa !396
  %6365 = getelementptr inbounds i16, i16* %6350, i64 16
  %6366 = bitcast i16* %6365 to <16 x i16>*
  %6367 = load <16 x i16>, <16 x i16>* %6366, align 2, !tbaa !396
  %6368 = add <16 x i16> %6359, %6353
  %6369 = add <16 x i16> %6368, %6364
  %6370 = add <16 x i16> %6362, %6356
  %6371 = add <16 x i16> %6370, %6367
  %6372 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6369, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6373 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6371, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6374 = shufflevector <16 x i16> %6372, <16 x i16> %6373, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6375 = lshr <32 x i16> %6374, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6376 = shufflevector <32 x i16> %6375, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6377 = sext i32 %blur_x.s0.x.v1.base.s447 to i64
  %6378 = add nsw i64 %6377, %6258
  %6379 = getelementptr inbounds i16, i16* %blur_x, i64 %6378
  %6380 = bitcast i16* %6379 to <16 x i16>*
  store <16 x i16> %6376, <16 x i16>* %6380, align 2, !tbaa !399
  %6381 = shufflevector <32 x i16> %6375, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6382 = getelementptr inbounds i16, i16* %6379, i64 16
  %6383 = bitcast i16* %6382 to <16 x i16>*
  store <16 x i16> %6381, <16 x i16>* %6383, align 2, !tbaa !399
  br label %"consume blur_x448"

"consume blur_x448":                              ; preds = %"for blur_y.s0.x.x.rebased440", %"produce blur_x446"
  %6384 = sext i32 %b216 to i64
  %6385 = add nsw i64 %6261, %6384
  %6386 = getelementptr inbounds i16, i16* %blur_x, i64 %6385
  %6387 = bitcast i16* %6386 to <16 x i16>*
  %6388 = load <16 x i16>, <16 x i16>* %6387, align 2, !tbaa !399
  %6389 = getelementptr inbounds i16, i16* %6386, i64 16
  %6390 = bitcast i16* %6389 to <16 x i16>*
  %6391 = load <16 x i16>, <16 x i16>* %6390, align 2, !tbaa !399
  %6392 = add nsw i64 %6264, %6384
  %6393 = getelementptr inbounds i16, i16* %blur_x, i64 %6392
  %6394 = bitcast i16* %6393 to <16 x i16>*
  %6395 = load <16 x i16>, <16 x i16>* %6394, align 2, !tbaa !399
  %6396 = getelementptr inbounds i16, i16* %6393, i64 16
  %6397 = bitcast i16* %6396 to <16 x i16>*
  %6398 = load <16 x i16>, <16 x i16>* %6397, align 2, !tbaa !399
  %6399 = add nsw i64 %6267, %6384
  %6400 = getelementptr inbounds i16, i16* %blur_x, i64 %6399
  %6401 = bitcast i16* %6400 to <16 x i16>*
  %6402 = load <16 x i16>, <16 x i16>* %6401, align 2, !tbaa !399
  %6403 = getelementptr inbounds i16, i16* %6400, i64 16
  %6404 = bitcast i16* %6403 to <16 x i16>*
  %6405 = load <16 x i16>, <16 x i16>* %6404, align 2, !tbaa !399
  %6406 = add <16 x i16> %6395, %6388
  %6407 = add <16 x i16> %6406, %6402
  %6408 = add <16 x i16> %6398, %6391
  %6409 = add <16 x i16> %6408, %6405
  %6410 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6407, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6411 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6409, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6412 = shufflevector <16 x i16> %6410, <16 x i16> %6411, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6413 = lshr <32 x i16> %6412, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6414 = shufflevector <32 x i16> %6413, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6415 = add nsw i64 %6271, %6384
  %6416 = getelementptr inbounds i16, i16* %65, i64 %6415
  %6417 = bitcast i16* %6416 to <16 x i16>*
  store <16 x i16> %6414, <16 x i16>* %6417, align 2, !tbaa !401
  %6418 = shufflevector <32 x i16> %6413, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6419 = getelementptr inbounds i16, i16* %6416, i64 16
  %6420 = bitcast i16* %6419 to <16 x i16>*
  store <16 x i16> %6418, <16 x i16>* %6420, align 2, !tbaa !401
  %6421 = add nuw nsw i32 %blur_y.s0.x.x.rebased442, 1
  %.not2547 = icmp eq i32 %6421, %t1639
  br i1 %.not2547, label %"end for blur_y.s0.x.x.rebased441", label %"for blur_y.s0.x.x.rebased440"

after_bb449:                                      ; preds = %"end for blur_y.s0.x.x.rebased441", %"produce blur_x452"
  br i1 %99, label %"for blur_y.s0.x.x.rebased454.preheader", label %"end for blur_y.s0.x.x.rebased455", !prof !386

"for blur_y.s0.x.x.rebased454.preheader":         ; preds = %after_bb449
  %6422 = sext i32 %t1638 to i64
  %6423 = zext i32 %.pre-phi3260 to i64
  %6424 = mul nsw i64 %6423, %108
  %6425 = sub nsw i64 %6424, %95
  %6426 = zext i32 %.pre-phi to i64
  %6427 = mul nsw i64 %6426, %108
  %6428 = sub nsw i64 %6427, %95
  %6429 = zext i32 %.pre-phi3254 to i64
  %6430 = mul nsw i64 %6429, %108
  %6431 = sub nsw i64 %6430, %95
  %6432 = sext i32 %a26 to i64
  %6433 = add nsw i64 %6432, 18
  %6434 = mul nsw i64 %6433, %109
  %6435 = add nsw i64 %6434, %112
  br label %"for blur_y.s0.x.x.rebased454"

"produce blur_x452":                              ; preds = %"end for blur_y.s0.x.x.rebased441"
  %6436 = getelementptr inbounds i16, i16* %read_input, i64 %147
  %6437 = getelementptr inbounds i16, i16* %6436, i64 -31
  %6438 = bitcast i16* %6437 to <16 x i16>*
  %6439 = load <16 x i16>, <16 x i16>* %6438, align 2, !tbaa !396
  %6440 = getelementptr inbounds i16, i16* %6436, i64 -15
  %6441 = bitcast i16* %6440 to <16 x i16>*
  %6442 = load <16 x i16>, <16 x i16>* %6441, align 2, !tbaa !396
  %6443 = getelementptr inbounds i16, i16* %6436, i64 -30
  %6444 = bitcast i16* %6443 to <16 x i16>*
  %6445 = load <16 x i16>, <16 x i16>* %6444, align 2, !tbaa !396
  %6446 = getelementptr inbounds i16, i16* %6436, i64 -14
  %6447 = bitcast i16* %6446 to <16 x i16>*
  %6448 = load <16 x i16>, <16 x i16>* %6447, align 2, !tbaa !396
  %6449 = getelementptr inbounds i16, i16* %6436, i64 -32
  %6450 = bitcast i16* %6449 to <16 x i16>*
  %6451 = load <16 x i16>, <16 x i16>* %6450, align 2, !tbaa !396
  %6452 = getelementptr inbounds i16, i16* %6436, i64 -16
  %6453 = bitcast i16* %6452 to <16 x i16>*
  %6454 = load <16 x i16>, <16 x i16>* %6453, align 2, !tbaa !396
  %6455 = add <16 x i16> %6445, %6439
  %6456 = add <16 x i16> %6455, %6451
  %6457 = add <16 x i16> %6448, %6442
  %6458 = add <16 x i16> %6457, %6454
  %6459 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6456, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6460 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6458, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6461 = shufflevector <16 x i16> %6459, <16 x i16> %6460, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6462 = lshr <32 x i16> %6461, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6463 = shufflevector <32 x i16> %6462, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6464 = zext i32 %.pre-phi to i64
  %6465 = mul nsw i64 %96, %6464
  %6466 = add nsw i64 %98, %6465
  %6467 = getelementptr inbounds i16, i16* %blur_x, i64 %6466
  %6468 = getelementptr inbounds i16, i16* %6467, i64 -32
  %6469 = bitcast i16* %6468 to <16 x i16>*
  store <16 x i16> %6463, <16 x i16>* %6469, align 2, !tbaa !399
  %6470 = shufflevector <32 x i16> %6462, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6471 = getelementptr inbounds i16, i16* %6467, i64 -16
  %6472 = bitcast i16* %6471 to <16 x i16>*
  store <16 x i16> %6470, <16 x i16>* %6472, align 2, !tbaa !399
  %6473 = zext i32 %.pre-phi3260 to i64
  %6474 = mul nsw i64 %6473, %108
  %6475 = add nsw i64 %6474, %93
  %6476 = getelementptr inbounds i16, i16* %blur_x, i64 %6475
  %6477 = getelementptr inbounds i16, i16* %6476, i64 -32
  %6478 = bitcast i16* %6477 to <16 x i16>*
  %6479 = load <16 x i16>, <16 x i16>* %6478, align 2, !tbaa !399
  %6480 = getelementptr inbounds i16, i16* %6476, i64 -16
  %6481 = bitcast i16* %6480 to <16 x i16>*
  %6482 = load <16 x i16>, <16 x i16>* %6481, align 2, !tbaa !399
  %6483 = mul nsw i64 %6464, %108
  %6484 = add nsw i64 %6483, %93
  %6485 = getelementptr inbounds i16, i16* %blur_x, i64 %6484
  %6486 = getelementptr inbounds i16, i16* %6485, i64 -32
  %6487 = bitcast i16* %6486 to <16 x i16>*
  %6488 = load <16 x i16>, <16 x i16>* %6487, align 2, !tbaa !399
  %6489 = getelementptr inbounds i16, i16* %6485, i64 -16
  %6490 = bitcast i16* %6489 to <16 x i16>*
  %6491 = load <16 x i16>, <16 x i16>* %6490, align 2, !tbaa !399
  %6492 = zext i32 %.pre-phi3254 to i64
  %6493 = mul nsw i64 %6492, %108
  %6494 = add nsw i64 %6493, %93
  %6495 = getelementptr inbounds i16, i16* %blur_x, i64 %6494
  %6496 = getelementptr inbounds i16, i16* %6495, i64 -32
  %6497 = bitcast i16* %6496 to <16 x i16>*
  %6498 = load <16 x i16>, <16 x i16>* %6497, align 2, !tbaa !399
  %6499 = getelementptr inbounds i16, i16* %6495, i64 -16
  %6500 = bitcast i16* %6499 to <16 x i16>*
  %6501 = load <16 x i16>, <16 x i16>* %6500, align 2, !tbaa !399
  %6502 = add <16 x i16> %6488, %6479
  %6503 = add <16 x i16> %6502, %6498
  %6504 = add <16 x i16> %6491, %6482
  %6505 = add <16 x i16> %6504, %6501
  %6506 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6503, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6507 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6505, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6508 = shufflevector <16 x i16> %6506, <16 x i16> %6507, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6509 = lshr <32 x i16> %6508, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6510 = shufflevector <32 x i16> %6509, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6511 = sext i32 %a26 to i64
  %6512 = add nsw i64 %6511, 18
  %6513 = mul nsw i64 %6512, %109
  %6514 = add nsw i64 %111, %6513
  %6515 = getelementptr inbounds i16, i16* %65, i64 %6514
  %6516 = getelementptr inbounds i16, i16* %6515, i64 -32
  %6517 = bitcast i16* %6516 to <16 x i16>*
  store <16 x i16> %6510, <16 x i16>* %6517, align 2, !tbaa !401
  %6518 = shufflevector <32 x i16> %6509, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6519 = getelementptr inbounds i16, i16* %6515, i64 -16
  %6520 = bitcast i16* %6519 to <16 x i16>*
  store <16 x i16> %6518, <16 x i16>* %6520, align 2, !tbaa !401
  br label %after_bb449

"for blur_y.s0.x.x.rebased454":                   ; preds = %"for blur_y.s0.x.x.rebased454.preheader", %"consume blur_x461"
  %indvars.iv3087 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased454.preheader" ], [ %indvars.iv.next3088, %"consume blur_x461" ]
  %6521 = add nsw i64 %indvars.iv3087, %100
  %6522 = icmp slt i64 %6521, 1
  %6523 = trunc i64 %6521 to i32
  %6524 = shl nsw i32 %6523, 5
  %6525 = icmp sgt i32 %4, %6524
  %6526 = or i1 %6522, %6525
  br i1 %6526, label %"produce blur_x460", label %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge"

"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased454"
  %.pre3295 = shl nsw i64 %6521, 5
  br label %"consume blur_x461"

"end for blur_y.s0.x.x.rebased455":               ; preds = %"consume blur_x461", %after_bb449
  br i1 %101, label %"for blur_y.s0.x.x.rebased462.preheader", label %"end for blur_y.s0.x.x.rebased463", !prof !386

"for blur_y.s0.x.x.rebased462.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased455"
  %6527 = sext i32 %t1638 to i64
  %6528 = zext i32 %.pre-phi3260 to i64
  %6529 = mul nsw i64 %6528, %108
  %6530 = sub nsw i64 %6529, %95
  %6531 = zext i32 %.pre-phi to i64
  %6532 = mul nsw i64 %6531, %108
  %6533 = sub nsw i64 %6532, %95
  %6534 = zext i32 %.pre-phi3254 to i64
  %6535 = mul nsw i64 %6534, %108
  %6536 = sub nsw i64 %6535, %95
  %6537 = sext i32 %a26 to i64
  %6538 = add nsw i64 %6537, 18
  %6539 = mul nsw i64 %6538, %109
  %6540 = add nsw i64 %6539, %112
  br label %"for blur_y.s0.x.x.rebased462"

"produce blur_x460":                              ; preds = %"for blur_y.s0.x.x.rebased454"
  %t960 = add nsw i32 %6524, %t1937
  %6541 = sext i32 %t960 to i64
  %6542 = getelementptr inbounds i16, i16* %read_input, i64 %6541
  %6543 = getelementptr inbounds i16, i16* %6542, i64 1
  %6544 = bitcast i16* %6543 to <16 x i16>*
  %6545 = load <16 x i16>, <16 x i16>* %6544, align 2, !tbaa !396
  %6546 = getelementptr inbounds i16, i16* %6542, i64 17
  %6547 = bitcast i16* %6546 to <16 x i16>*
  %6548 = load <16 x i16>, <16 x i16>* %6547, align 2, !tbaa !396
  %6549 = getelementptr inbounds i16, i16* %6542, i64 2
  %6550 = bitcast i16* %6549 to <16 x i16>*
  %6551 = load <16 x i16>, <16 x i16>* %6550, align 2, !tbaa !396
  %6552 = getelementptr inbounds i16, i16* %6542, i64 18
  %6553 = bitcast i16* %6552 to <16 x i16>*
  %6554 = load <16 x i16>, <16 x i16>* %6553, align 2, !tbaa !396
  %6555 = bitcast i16* %6542 to <16 x i16>*
  %6556 = load <16 x i16>, <16 x i16>* %6555, align 2, !tbaa !396
  %6557 = getelementptr inbounds i16, i16* %6542, i64 16
  %6558 = bitcast i16* %6557 to <16 x i16>*
  %6559 = load <16 x i16>, <16 x i16>* %6558, align 2, !tbaa !396
  %6560 = add <16 x i16> %6551, %6545
  %6561 = add <16 x i16> %6560, %6556
  %6562 = add <16 x i16> %6554, %6548
  %6563 = add <16 x i16> %6562, %6559
  %6564 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6561, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6563, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6566 = shufflevector <16 x i16> %6564, <16 x i16> %6565, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6567 = lshr <32 x i16> %6566, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6568 = shufflevector <32 x i16> %6567, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6569 = shl nsw i64 %6521, 5
  %6570 = add nsw i64 %6569, %6422
  %6571 = getelementptr inbounds i16, i16* %blur_x, i64 %6570
  %6572 = bitcast i16* %6571 to <16 x i16>*
  store <16 x i16> %6568, <16 x i16>* %6572, align 2, !tbaa !399
  %6573 = shufflevector <32 x i16> %6567, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6574 = getelementptr inbounds i16, i16* %6571, i64 16
  %6575 = bitcast i16* %6574 to <16 x i16>*
  store <16 x i16> %6573, <16 x i16>* %6575, align 2, !tbaa !399
  br label %"consume blur_x461"

"consume blur_x461":                              ; preds = %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge", %"produce blur_x460"
  %.pre-phi3296 = phi i64 [ %.pre3295, %"for blur_y.s0.x.x.rebased454.consume blur_x461_crit_edge" ], [ %6569, %"produce blur_x460" ]
  %6576 = add nsw i64 %6425, %.pre-phi3296
  %6577 = getelementptr inbounds i16, i16* %blur_x, i64 %6576
  %6578 = bitcast i16* %6577 to <16 x i16>*
  %6579 = load <16 x i16>, <16 x i16>* %6578, align 2, !tbaa !399
  %6580 = getelementptr inbounds i16, i16* %6577, i64 16
  %6581 = bitcast i16* %6580 to <16 x i16>*
  %6582 = load <16 x i16>, <16 x i16>* %6581, align 2, !tbaa !399
  %6583 = add nsw i64 %6428, %.pre-phi3296
  %6584 = getelementptr inbounds i16, i16* %blur_x, i64 %6583
  %6585 = bitcast i16* %6584 to <16 x i16>*
  %6586 = load <16 x i16>, <16 x i16>* %6585, align 2, !tbaa !399
  %6587 = getelementptr inbounds i16, i16* %6584, i64 16
  %6588 = bitcast i16* %6587 to <16 x i16>*
  %6589 = load <16 x i16>, <16 x i16>* %6588, align 2, !tbaa !399
  %6590 = add nsw i64 %6431, %.pre-phi3296
  %6591 = getelementptr inbounds i16, i16* %blur_x, i64 %6590
  %6592 = bitcast i16* %6591 to <16 x i16>*
  %6593 = load <16 x i16>, <16 x i16>* %6592, align 2, !tbaa !399
  %6594 = getelementptr inbounds i16, i16* %6591, i64 16
  %6595 = bitcast i16* %6594 to <16 x i16>*
  %6596 = load <16 x i16>, <16 x i16>* %6595, align 2, !tbaa !399
  %6597 = add <16 x i16> %6586, %6579
  %6598 = add <16 x i16> %6597, %6593
  %6599 = add <16 x i16> %6589, %6582
  %6600 = add <16 x i16> %6599, %6596
  %6601 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6598, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6602 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6600, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6603 = shufflevector <16 x i16> %6601, <16 x i16> %6602, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6604 = lshr <32 x i16> %6603, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6605 = shufflevector <32 x i16> %6604, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6606 = add nsw i64 %6435, %.pre-phi3296
  %6607 = getelementptr inbounds i16, i16* %65, i64 %6606
  %6608 = bitcast i16* %6607 to <16 x i16>*
  store <16 x i16> %6605, <16 x i16>* %6608, align 2, !tbaa !401
  %6609 = shufflevector <32 x i16> %6604, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6610 = getelementptr inbounds i16, i16* %6607, i64 16
  %6611 = bitcast i16* %6610 to <16 x i16>*
  store <16 x i16> %6609, <16 x i16>* %6611, align 2, !tbaa !401
  %indvars.iv.next3088 = add nuw nsw i64 %indvars.iv3087, 1
  %.not2546 = icmp eq i64 %indvars.iv.next3088, %180
  br i1 %.not2546, label %"end for blur_y.s0.x.x.rebased455", label %"for blur_y.s0.x.x.rebased454"

"for blur_y.s0.x.x.rebased462":                   ; preds = %"for blur_y.s0.x.x.rebased462.preheader", %"consume blur_x470"
  %blur_y.s0.x.x.rebased464 = phi i32 [ %6690, %"consume blur_x470" ], [ 0, %"for blur_y.s0.x.x.rebased462.preheader" ]
  %6612 = add nsw i32 %blur_y.s0.x.x.rebased464, %t1582
  %a217 = shl nsw i32 %6612, 5
  %6613 = icmp sgt i32 %a14, %a217
  %b223 = select i1 %6613, i32 %a217, i32 %a14
  %6614 = icmp slt i32 %6612, 1
  %6615 = icmp sgt i32 %4, %a217
  %6616 = or i1 %6614, %6615
  br i1 %6616, label %"produce blur_x468", label %"consume blur_x470"

"end for blur_y.s0.x.x.rebased463":               ; preds = %"consume blur_x470", %"end for blur_y.s0.x.x.rebased455"
  br i1 %34, label %"produce blur_x474", label %after_bb471

"produce blur_x468":                              ; preds = %"for blur_y.s0.x.x.rebased462"
  %6617 = icmp slt i32 %b223, %4
  %blur_x.s0.x.v1.base.s469 = select i1 %6617, i32 %b223, i32 %4
  %t965 = add nsw i32 %blur_x.s0.x.v1.base.s469, %t1937
  %6618 = sext i32 %t965 to i64
  %6619 = getelementptr inbounds i16, i16* %read_input, i64 %6618
  %6620 = getelementptr inbounds i16, i16* %6619, i64 1
  %6621 = bitcast i16* %6620 to <16 x i16>*
  %6622 = load <16 x i16>, <16 x i16>* %6621, align 2, !tbaa !396
  %6623 = getelementptr inbounds i16, i16* %6619, i64 17
  %6624 = bitcast i16* %6623 to <16 x i16>*
  %6625 = load <16 x i16>, <16 x i16>* %6624, align 2, !tbaa !396
  %6626 = getelementptr inbounds i16, i16* %6619, i64 2
  %6627 = bitcast i16* %6626 to <16 x i16>*
  %6628 = load <16 x i16>, <16 x i16>* %6627, align 2, !tbaa !396
  %6629 = getelementptr inbounds i16, i16* %6619, i64 18
  %6630 = bitcast i16* %6629 to <16 x i16>*
  %6631 = load <16 x i16>, <16 x i16>* %6630, align 2, !tbaa !396
  %6632 = bitcast i16* %6619 to <16 x i16>*
  %6633 = load <16 x i16>, <16 x i16>* %6632, align 2, !tbaa !396
  %6634 = getelementptr inbounds i16, i16* %6619, i64 16
  %6635 = bitcast i16* %6634 to <16 x i16>*
  %6636 = load <16 x i16>, <16 x i16>* %6635, align 2, !tbaa !396
  %6637 = add <16 x i16> %6628, %6622
  %6638 = add <16 x i16> %6637, %6633
  %6639 = add <16 x i16> %6631, %6625
  %6640 = add <16 x i16> %6639, %6636
  %6641 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6638, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6642 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6640, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6643 = shufflevector <16 x i16> %6641, <16 x i16> %6642, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6644 = lshr <32 x i16> %6643, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6645 = shufflevector <32 x i16> %6644, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6646 = sext i32 %blur_x.s0.x.v1.base.s469 to i64
  %6647 = add nsw i64 %6646, %6527
  %6648 = getelementptr inbounds i16, i16* %blur_x, i64 %6647
  %6649 = bitcast i16* %6648 to <16 x i16>*
  store <16 x i16> %6645, <16 x i16>* %6649, align 2, !tbaa !399
  %6650 = shufflevector <32 x i16> %6644, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6651 = getelementptr inbounds i16, i16* %6648, i64 16
  %6652 = bitcast i16* %6651 to <16 x i16>*
  store <16 x i16> %6650, <16 x i16>* %6652, align 2, !tbaa !399
  br label %"consume blur_x470"

"consume blur_x470":                              ; preds = %"for blur_y.s0.x.x.rebased462", %"produce blur_x468"
  %6653 = sext i32 %b223 to i64
  %6654 = add nsw i64 %6530, %6653
  %6655 = getelementptr inbounds i16, i16* %blur_x, i64 %6654
  %6656 = bitcast i16* %6655 to <16 x i16>*
  %6657 = load <16 x i16>, <16 x i16>* %6656, align 2, !tbaa !399
  %6658 = getelementptr inbounds i16, i16* %6655, i64 16
  %6659 = bitcast i16* %6658 to <16 x i16>*
  %6660 = load <16 x i16>, <16 x i16>* %6659, align 2, !tbaa !399
  %6661 = add nsw i64 %6533, %6653
  %6662 = getelementptr inbounds i16, i16* %blur_x, i64 %6661
  %6663 = bitcast i16* %6662 to <16 x i16>*
  %6664 = load <16 x i16>, <16 x i16>* %6663, align 2, !tbaa !399
  %6665 = getelementptr inbounds i16, i16* %6662, i64 16
  %6666 = bitcast i16* %6665 to <16 x i16>*
  %6667 = load <16 x i16>, <16 x i16>* %6666, align 2, !tbaa !399
  %6668 = add nsw i64 %6536, %6653
  %6669 = getelementptr inbounds i16, i16* %blur_x, i64 %6668
  %6670 = bitcast i16* %6669 to <16 x i16>*
  %6671 = load <16 x i16>, <16 x i16>* %6670, align 2, !tbaa !399
  %6672 = getelementptr inbounds i16, i16* %6669, i64 16
  %6673 = bitcast i16* %6672 to <16 x i16>*
  %6674 = load <16 x i16>, <16 x i16>* %6673, align 2, !tbaa !399
  %6675 = add <16 x i16> %6664, %6657
  %6676 = add <16 x i16> %6675, %6671
  %6677 = add <16 x i16> %6667, %6660
  %6678 = add <16 x i16> %6677, %6674
  %6679 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6676, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6680 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6678, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6681 = shufflevector <16 x i16> %6679, <16 x i16> %6680, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6682 = lshr <32 x i16> %6681, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6683 = shufflevector <32 x i16> %6682, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6684 = add nsw i64 %6540, %6653
  %6685 = getelementptr inbounds i16, i16* %65, i64 %6684
  %6686 = bitcast i16* %6685 to <16 x i16>*
  store <16 x i16> %6683, <16 x i16>* %6686, align 2, !tbaa !401
  %6687 = shufflevector <32 x i16> %6682, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6688 = getelementptr inbounds i16, i16* %6685, i64 16
  %6689 = bitcast i16* %6688 to <16 x i16>*
  store <16 x i16> %6687, <16 x i16>* %6689, align 2, !tbaa !401
  %6690 = add nuw nsw i32 %blur_y.s0.x.x.rebased464, 1
  %.not2545 = icmp eq i32 %6690, %t1639
  br i1 %.not2545, label %"end for blur_y.s0.x.x.rebased463", label %"for blur_y.s0.x.x.rebased462"

after_bb471:                                      ; preds = %"end for blur_y.s0.x.x.rebased463", %"produce blur_x474"
  br i1 %99, label %"for blur_y.s0.x.x.rebased476.preheader", label %"end for blur_y.s0.x.x.rebased477", !prof !386

"for blur_y.s0.x.x.rebased476.preheader":         ; preds = %after_bb471
  %6691 = sext i32 %t1644 to i64
  %6692 = zext i32 %.pre-phi to i64
  %6693 = mul nsw i64 %6692, %108
  %6694 = sub nsw i64 %6693, %95
  %6695 = zext i32 %.pre-phi3250 to i64
  %6696 = mul nsw i64 %6695, %108
  %6697 = sub nsw i64 %6696, %95
  %6698 = zext i32 %.pre-phi3260 to i64
  %6699 = mul nsw i64 %6698, %108
  %6700 = sub nsw i64 %6699, %95
  %6701 = sext i32 %a26 to i64
  %6702 = add nsw i64 %6701, 19
  %6703 = mul nsw i64 %6702, %109
  %6704 = add nsw i64 %6703, %112
  br label %"for blur_y.s0.x.x.rebased476"

"produce blur_x474":                              ; preds = %"end for blur_y.s0.x.x.rebased463"
  %6705 = getelementptr inbounds i16, i16* %read_input, i64 %149
  %6706 = getelementptr inbounds i16, i16* %6705, i64 -31
  %6707 = bitcast i16* %6706 to <16 x i16>*
  %6708 = load <16 x i16>, <16 x i16>* %6707, align 2, !tbaa !396
  %6709 = getelementptr inbounds i16, i16* %6705, i64 -15
  %6710 = bitcast i16* %6709 to <16 x i16>*
  %6711 = load <16 x i16>, <16 x i16>* %6710, align 2, !tbaa !396
  %6712 = getelementptr inbounds i16, i16* %6705, i64 -30
  %6713 = bitcast i16* %6712 to <16 x i16>*
  %6714 = load <16 x i16>, <16 x i16>* %6713, align 2, !tbaa !396
  %6715 = getelementptr inbounds i16, i16* %6705, i64 -14
  %6716 = bitcast i16* %6715 to <16 x i16>*
  %6717 = load <16 x i16>, <16 x i16>* %6716, align 2, !tbaa !396
  %6718 = getelementptr inbounds i16, i16* %6705, i64 -32
  %6719 = bitcast i16* %6718 to <16 x i16>*
  %6720 = load <16 x i16>, <16 x i16>* %6719, align 2, !tbaa !396
  %6721 = getelementptr inbounds i16, i16* %6705, i64 -16
  %6722 = bitcast i16* %6721 to <16 x i16>*
  %6723 = load <16 x i16>, <16 x i16>* %6722, align 2, !tbaa !396
  %6724 = add <16 x i16> %6714, %6708
  %6725 = add <16 x i16> %6724, %6720
  %6726 = add <16 x i16> %6717, %6711
  %6727 = add <16 x i16> %6726, %6723
  %6728 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6725, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6729 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6727, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6730 = shufflevector <16 x i16> %6728, <16 x i16> %6729, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6731 = lshr <32 x i16> %6730, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6732 = shufflevector <32 x i16> %6731, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6733 = zext i32 %.pre-phi3250 to i64
  %6734 = mul nsw i64 %96, %6733
  %6735 = add nsw i64 %98, %6734
  %6736 = getelementptr inbounds i16, i16* %blur_x, i64 %6735
  %6737 = getelementptr inbounds i16, i16* %6736, i64 -32
  %6738 = bitcast i16* %6737 to <16 x i16>*
  store <16 x i16> %6732, <16 x i16>* %6738, align 2, !tbaa !399
  %6739 = shufflevector <32 x i16> %6731, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6740 = getelementptr inbounds i16, i16* %6736, i64 -16
  %6741 = bitcast i16* %6740 to <16 x i16>*
  store <16 x i16> %6739, <16 x i16>* %6741, align 2, !tbaa !399
  %6742 = zext i32 %.pre-phi to i64
  %6743 = mul nsw i64 %6742, %108
  %6744 = add nsw i64 %6743, %93
  %6745 = getelementptr inbounds i16, i16* %blur_x, i64 %6744
  %6746 = getelementptr inbounds i16, i16* %6745, i64 -32
  %6747 = bitcast i16* %6746 to <16 x i16>*
  %6748 = load <16 x i16>, <16 x i16>* %6747, align 2, !tbaa !399
  %6749 = getelementptr inbounds i16, i16* %6745, i64 -16
  %6750 = bitcast i16* %6749 to <16 x i16>*
  %6751 = load <16 x i16>, <16 x i16>* %6750, align 2, !tbaa !399
  %6752 = mul nsw i64 %6733, %108
  %6753 = add nsw i64 %6752, %93
  %6754 = getelementptr inbounds i16, i16* %blur_x, i64 %6753
  %6755 = getelementptr inbounds i16, i16* %6754, i64 -32
  %6756 = bitcast i16* %6755 to <16 x i16>*
  %6757 = load <16 x i16>, <16 x i16>* %6756, align 2, !tbaa !399
  %6758 = getelementptr inbounds i16, i16* %6754, i64 -16
  %6759 = bitcast i16* %6758 to <16 x i16>*
  %6760 = load <16 x i16>, <16 x i16>* %6759, align 2, !tbaa !399
  %6761 = zext i32 %.pre-phi3260 to i64
  %6762 = mul nsw i64 %6761, %108
  %6763 = add nsw i64 %6762, %93
  %6764 = getelementptr inbounds i16, i16* %blur_x, i64 %6763
  %6765 = getelementptr inbounds i16, i16* %6764, i64 -32
  %6766 = bitcast i16* %6765 to <16 x i16>*
  %6767 = load <16 x i16>, <16 x i16>* %6766, align 2, !tbaa !399
  %6768 = getelementptr inbounds i16, i16* %6764, i64 -16
  %6769 = bitcast i16* %6768 to <16 x i16>*
  %6770 = load <16 x i16>, <16 x i16>* %6769, align 2, !tbaa !399
  %6771 = add <16 x i16> %6757, %6748
  %6772 = add <16 x i16> %6771, %6767
  %6773 = add <16 x i16> %6760, %6751
  %6774 = add <16 x i16> %6773, %6770
  %6775 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6772, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6776 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6774, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6777 = shufflevector <16 x i16> %6775, <16 x i16> %6776, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6778 = lshr <32 x i16> %6777, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6779 = shufflevector <32 x i16> %6778, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6780 = sext i32 %a26 to i64
  %6781 = add nsw i64 %6780, 19
  %6782 = mul nsw i64 %6781, %109
  %6783 = add nsw i64 %111, %6782
  %6784 = getelementptr inbounds i16, i16* %65, i64 %6783
  %6785 = getelementptr inbounds i16, i16* %6784, i64 -32
  %6786 = bitcast i16* %6785 to <16 x i16>*
  store <16 x i16> %6779, <16 x i16>* %6786, align 2, !tbaa !401
  %6787 = shufflevector <32 x i16> %6778, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6788 = getelementptr inbounds i16, i16* %6784, i64 -16
  %6789 = bitcast i16* %6788 to <16 x i16>*
  store <16 x i16> %6787, <16 x i16>* %6789, align 2, !tbaa !401
  br label %after_bb471

"for blur_y.s0.x.x.rebased476":                   ; preds = %"for blur_y.s0.x.x.rebased476.preheader", %"consume blur_x483"
  %indvars.iv3090 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased476.preheader" ], [ %indvars.iv.next3091, %"consume blur_x483" ]
  %6790 = add nsw i64 %indvars.iv3090, %100
  %6791 = icmp slt i64 %6790, 1
  %6792 = trunc i64 %6790 to i32
  %6793 = shl nsw i32 %6792, 5
  %6794 = icmp sgt i32 %4, %6793
  %6795 = or i1 %6791, %6794
  br i1 %6795, label %"produce blur_x482", label %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge"

"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased476"
  %.pre3297 = shl nsw i64 %6790, 5
  br label %"consume blur_x483"

"end for blur_y.s0.x.x.rebased477":               ; preds = %"consume blur_x483", %after_bb471
  br i1 %101, label %"for blur_y.s0.x.x.rebased484.preheader", label %"end for blur_y.s0.x.x.rebased485", !prof !386

"for blur_y.s0.x.x.rebased484.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased477"
  %6796 = sext i32 %t1644 to i64
  %6797 = zext i32 %.pre-phi to i64
  %6798 = mul nsw i64 %6797, %108
  %6799 = sub nsw i64 %6798, %95
  %6800 = zext i32 %.pre-phi3250 to i64
  %6801 = mul nsw i64 %6800, %108
  %6802 = sub nsw i64 %6801, %95
  %6803 = zext i32 %.pre-phi3260 to i64
  %6804 = mul nsw i64 %6803, %108
  %6805 = sub nsw i64 %6804, %95
  %6806 = sext i32 %a26 to i64
  %6807 = add nsw i64 %6806, 19
  %6808 = mul nsw i64 %6807, %109
  %6809 = add nsw i64 %6808, %112
  br label %"for blur_y.s0.x.x.rebased484"

"produce blur_x482":                              ; preds = %"for blur_y.s0.x.x.rebased476"
  %t976 = add nsw i32 %6793, %t1953
  %6810 = sext i32 %t976 to i64
  %6811 = getelementptr inbounds i16, i16* %read_input, i64 %6810
  %6812 = getelementptr inbounds i16, i16* %6811, i64 1
  %6813 = bitcast i16* %6812 to <16 x i16>*
  %6814 = load <16 x i16>, <16 x i16>* %6813, align 2, !tbaa !396
  %6815 = getelementptr inbounds i16, i16* %6811, i64 17
  %6816 = bitcast i16* %6815 to <16 x i16>*
  %6817 = load <16 x i16>, <16 x i16>* %6816, align 2, !tbaa !396
  %6818 = getelementptr inbounds i16, i16* %6811, i64 2
  %6819 = bitcast i16* %6818 to <16 x i16>*
  %6820 = load <16 x i16>, <16 x i16>* %6819, align 2, !tbaa !396
  %6821 = getelementptr inbounds i16, i16* %6811, i64 18
  %6822 = bitcast i16* %6821 to <16 x i16>*
  %6823 = load <16 x i16>, <16 x i16>* %6822, align 2, !tbaa !396
  %6824 = bitcast i16* %6811 to <16 x i16>*
  %6825 = load <16 x i16>, <16 x i16>* %6824, align 2, !tbaa !396
  %6826 = getelementptr inbounds i16, i16* %6811, i64 16
  %6827 = bitcast i16* %6826 to <16 x i16>*
  %6828 = load <16 x i16>, <16 x i16>* %6827, align 2, !tbaa !396
  %6829 = add <16 x i16> %6820, %6814
  %6830 = add <16 x i16> %6829, %6825
  %6831 = add <16 x i16> %6823, %6817
  %6832 = add <16 x i16> %6831, %6828
  %6833 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6830, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6832, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6835 = shufflevector <16 x i16> %6833, <16 x i16> %6834, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6836 = lshr <32 x i16> %6835, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6837 = shufflevector <32 x i16> %6836, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6838 = shl nsw i64 %6790, 5
  %6839 = add nsw i64 %6838, %6691
  %6840 = getelementptr inbounds i16, i16* %blur_x, i64 %6839
  %6841 = bitcast i16* %6840 to <16 x i16>*
  store <16 x i16> %6837, <16 x i16>* %6841, align 2, !tbaa !399
  %6842 = shufflevector <32 x i16> %6836, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6843 = getelementptr inbounds i16, i16* %6840, i64 16
  %6844 = bitcast i16* %6843 to <16 x i16>*
  store <16 x i16> %6842, <16 x i16>* %6844, align 2, !tbaa !399
  br label %"consume blur_x483"

"consume blur_x483":                              ; preds = %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge", %"produce blur_x482"
  %.pre-phi3298 = phi i64 [ %.pre3297, %"for blur_y.s0.x.x.rebased476.consume blur_x483_crit_edge" ], [ %6838, %"produce blur_x482" ]
  %6845 = add nsw i64 %6694, %.pre-phi3298
  %6846 = getelementptr inbounds i16, i16* %blur_x, i64 %6845
  %6847 = bitcast i16* %6846 to <16 x i16>*
  %6848 = load <16 x i16>, <16 x i16>* %6847, align 2, !tbaa !399
  %6849 = getelementptr inbounds i16, i16* %6846, i64 16
  %6850 = bitcast i16* %6849 to <16 x i16>*
  %6851 = load <16 x i16>, <16 x i16>* %6850, align 2, !tbaa !399
  %6852 = add nsw i64 %6697, %.pre-phi3298
  %6853 = getelementptr inbounds i16, i16* %blur_x, i64 %6852
  %6854 = bitcast i16* %6853 to <16 x i16>*
  %6855 = load <16 x i16>, <16 x i16>* %6854, align 2, !tbaa !399
  %6856 = getelementptr inbounds i16, i16* %6853, i64 16
  %6857 = bitcast i16* %6856 to <16 x i16>*
  %6858 = load <16 x i16>, <16 x i16>* %6857, align 2, !tbaa !399
  %6859 = add nsw i64 %6700, %.pre-phi3298
  %6860 = getelementptr inbounds i16, i16* %blur_x, i64 %6859
  %6861 = bitcast i16* %6860 to <16 x i16>*
  %6862 = load <16 x i16>, <16 x i16>* %6861, align 2, !tbaa !399
  %6863 = getelementptr inbounds i16, i16* %6860, i64 16
  %6864 = bitcast i16* %6863 to <16 x i16>*
  %6865 = load <16 x i16>, <16 x i16>* %6864, align 2, !tbaa !399
  %6866 = add <16 x i16> %6855, %6848
  %6867 = add <16 x i16> %6866, %6862
  %6868 = add <16 x i16> %6858, %6851
  %6869 = add <16 x i16> %6868, %6865
  %6870 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6867, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6871 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6869, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6872 = shufflevector <16 x i16> %6870, <16 x i16> %6871, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6873 = lshr <32 x i16> %6872, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6874 = shufflevector <32 x i16> %6873, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6875 = add nsw i64 %6704, %.pre-phi3298
  %6876 = getelementptr inbounds i16, i16* %65, i64 %6875
  %6877 = bitcast i16* %6876 to <16 x i16>*
  store <16 x i16> %6874, <16 x i16>* %6877, align 2, !tbaa !401
  %6878 = shufflevector <32 x i16> %6873, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6879 = getelementptr inbounds i16, i16* %6876, i64 16
  %6880 = bitcast i16* %6879 to <16 x i16>*
  store <16 x i16> %6878, <16 x i16>* %6880, align 2, !tbaa !401
  %indvars.iv.next3091 = add nuw nsw i64 %indvars.iv3090, 1
  %.not2544 = icmp eq i64 %indvars.iv.next3091, %180
  br i1 %.not2544, label %"end for blur_y.s0.x.x.rebased477", label %"for blur_y.s0.x.x.rebased476"

"for blur_y.s0.x.x.rebased484":                   ; preds = %"for blur_y.s0.x.x.rebased484.preheader", %"consume blur_x492"
  %blur_y.s0.x.x.rebased486 = phi i32 [ %6959, %"consume blur_x492" ], [ 0, %"for blur_y.s0.x.x.rebased484.preheader" ]
  %6881 = add nsw i32 %blur_y.s0.x.x.rebased486, %t1582
  %a224 = shl nsw i32 %6881, 5
  %6882 = icmp sgt i32 %a14, %a224
  %b230 = select i1 %6882, i32 %a224, i32 %a14
  %6883 = icmp slt i32 %6881, 1
  %6884 = icmp sgt i32 %4, %a224
  %6885 = or i1 %6883, %6884
  br i1 %6885, label %"produce blur_x490", label %"consume blur_x492"

"end for blur_y.s0.x.x.rebased485":               ; preds = %"consume blur_x492", %"end for blur_y.s0.x.x.rebased477"
  br i1 %34, label %"produce blur_x496", label %after_bb493

"produce blur_x490":                              ; preds = %"for blur_y.s0.x.x.rebased484"
  %6886 = icmp slt i32 %b230, %4
  %blur_x.s0.x.v1.base.s491 = select i1 %6886, i32 %b230, i32 %4
  %t981 = add nsw i32 %blur_x.s0.x.v1.base.s491, %t1953
  %6887 = sext i32 %t981 to i64
  %6888 = getelementptr inbounds i16, i16* %read_input, i64 %6887
  %6889 = getelementptr inbounds i16, i16* %6888, i64 1
  %6890 = bitcast i16* %6889 to <16 x i16>*
  %6891 = load <16 x i16>, <16 x i16>* %6890, align 2, !tbaa !396
  %6892 = getelementptr inbounds i16, i16* %6888, i64 17
  %6893 = bitcast i16* %6892 to <16 x i16>*
  %6894 = load <16 x i16>, <16 x i16>* %6893, align 2, !tbaa !396
  %6895 = getelementptr inbounds i16, i16* %6888, i64 2
  %6896 = bitcast i16* %6895 to <16 x i16>*
  %6897 = load <16 x i16>, <16 x i16>* %6896, align 2, !tbaa !396
  %6898 = getelementptr inbounds i16, i16* %6888, i64 18
  %6899 = bitcast i16* %6898 to <16 x i16>*
  %6900 = load <16 x i16>, <16 x i16>* %6899, align 2, !tbaa !396
  %6901 = bitcast i16* %6888 to <16 x i16>*
  %6902 = load <16 x i16>, <16 x i16>* %6901, align 2, !tbaa !396
  %6903 = getelementptr inbounds i16, i16* %6888, i64 16
  %6904 = bitcast i16* %6903 to <16 x i16>*
  %6905 = load <16 x i16>, <16 x i16>* %6904, align 2, !tbaa !396
  %6906 = add <16 x i16> %6897, %6891
  %6907 = add <16 x i16> %6906, %6902
  %6908 = add <16 x i16> %6900, %6894
  %6909 = add <16 x i16> %6908, %6905
  %6910 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6907, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6911 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6909, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6912 = shufflevector <16 x i16> %6910, <16 x i16> %6911, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6913 = lshr <32 x i16> %6912, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6914 = shufflevector <32 x i16> %6913, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6915 = sext i32 %blur_x.s0.x.v1.base.s491 to i64
  %6916 = add nsw i64 %6915, %6796
  %6917 = getelementptr inbounds i16, i16* %blur_x, i64 %6916
  %6918 = bitcast i16* %6917 to <16 x i16>*
  store <16 x i16> %6914, <16 x i16>* %6918, align 2, !tbaa !399
  %6919 = shufflevector <32 x i16> %6913, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6920 = getelementptr inbounds i16, i16* %6917, i64 16
  %6921 = bitcast i16* %6920 to <16 x i16>*
  store <16 x i16> %6919, <16 x i16>* %6921, align 2, !tbaa !399
  br label %"consume blur_x492"

"consume blur_x492":                              ; preds = %"for blur_y.s0.x.x.rebased484", %"produce blur_x490"
  %6922 = sext i32 %b230 to i64
  %6923 = add nsw i64 %6799, %6922
  %6924 = getelementptr inbounds i16, i16* %blur_x, i64 %6923
  %6925 = bitcast i16* %6924 to <16 x i16>*
  %6926 = load <16 x i16>, <16 x i16>* %6925, align 2, !tbaa !399
  %6927 = getelementptr inbounds i16, i16* %6924, i64 16
  %6928 = bitcast i16* %6927 to <16 x i16>*
  %6929 = load <16 x i16>, <16 x i16>* %6928, align 2, !tbaa !399
  %6930 = add nsw i64 %6802, %6922
  %6931 = getelementptr inbounds i16, i16* %blur_x, i64 %6930
  %6932 = bitcast i16* %6931 to <16 x i16>*
  %6933 = load <16 x i16>, <16 x i16>* %6932, align 2, !tbaa !399
  %6934 = getelementptr inbounds i16, i16* %6931, i64 16
  %6935 = bitcast i16* %6934 to <16 x i16>*
  %6936 = load <16 x i16>, <16 x i16>* %6935, align 2, !tbaa !399
  %6937 = add nsw i64 %6805, %6922
  %6938 = getelementptr inbounds i16, i16* %blur_x, i64 %6937
  %6939 = bitcast i16* %6938 to <16 x i16>*
  %6940 = load <16 x i16>, <16 x i16>* %6939, align 2, !tbaa !399
  %6941 = getelementptr inbounds i16, i16* %6938, i64 16
  %6942 = bitcast i16* %6941 to <16 x i16>*
  %6943 = load <16 x i16>, <16 x i16>* %6942, align 2, !tbaa !399
  %6944 = add <16 x i16> %6933, %6926
  %6945 = add <16 x i16> %6944, %6940
  %6946 = add <16 x i16> %6936, %6929
  %6947 = add <16 x i16> %6946, %6943
  %6948 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6945, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6949 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6947, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6950 = shufflevector <16 x i16> %6948, <16 x i16> %6949, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6951 = lshr <32 x i16> %6950, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %6952 = shufflevector <32 x i16> %6951, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %6953 = add nsw i64 %6809, %6922
  %6954 = getelementptr inbounds i16, i16* %65, i64 %6953
  %6955 = bitcast i16* %6954 to <16 x i16>*
  store <16 x i16> %6952, <16 x i16>* %6955, align 2, !tbaa !401
  %6956 = shufflevector <32 x i16> %6951, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %6957 = getelementptr inbounds i16, i16* %6954, i64 16
  %6958 = bitcast i16* %6957 to <16 x i16>*
  store <16 x i16> %6956, <16 x i16>* %6958, align 2, !tbaa !401
  %6959 = add nuw nsw i32 %blur_y.s0.x.x.rebased486, 1
  %.not2543 = icmp eq i32 %6959, %t1639
  br i1 %.not2543, label %"end for blur_y.s0.x.x.rebased485", label %"for blur_y.s0.x.x.rebased484"

after_bb493:                                      ; preds = %"end for blur_y.s0.x.x.rebased485", %"produce blur_x496"
  br i1 %99, label %"for blur_y.s0.x.x.rebased498.preheader", label %"end for blur_y.s0.x.x.rebased499", !prof !386

"for blur_y.s0.x.x.rebased498.preheader":         ; preds = %after_bb493
  %6960 = sext i32 %t1650 to i64
  %6961 = zext i32 %.pre-phi3250 to i64
  %6962 = mul nsw i64 %6961, %108
  %6963 = sub nsw i64 %6962, %95
  %6964 = zext i32 %.pre-phi3254 to i64
  %6965 = mul nsw i64 %6964, %108
  %6966 = sub nsw i64 %6965, %95
  %6967 = zext i32 %.pre-phi to i64
  %6968 = mul nsw i64 %6967, %108
  %6969 = sub nsw i64 %6968, %95
  %6970 = sext i32 %a26 to i64
  %6971 = add nsw i64 %6970, 20
  %6972 = mul nsw i64 %6971, %109
  %6973 = add nsw i64 %6972, %112
  br label %"for blur_y.s0.x.x.rebased498"

"produce blur_x496":                              ; preds = %"end for blur_y.s0.x.x.rebased485"
  %6974 = getelementptr inbounds i16, i16* %read_input, i64 %151
  %6975 = getelementptr inbounds i16, i16* %6974, i64 -31
  %6976 = bitcast i16* %6975 to <16 x i16>*
  %6977 = load <16 x i16>, <16 x i16>* %6976, align 2, !tbaa !396
  %6978 = getelementptr inbounds i16, i16* %6974, i64 -15
  %6979 = bitcast i16* %6978 to <16 x i16>*
  %6980 = load <16 x i16>, <16 x i16>* %6979, align 2, !tbaa !396
  %6981 = getelementptr inbounds i16, i16* %6974, i64 -30
  %6982 = bitcast i16* %6981 to <16 x i16>*
  %6983 = load <16 x i16>, <16 x i16>* %6982, align 2, !tbaa !396
  %6984 = getelementptr inbounds i16, i16* %6974, i64 -14
  %6985 = bitcast i16* %6984 to <16 x i16>*
  %6986 = load <16 x i16>, <16 x i16>* %6985, align 2, !tbaa !396
  %6987 = getelementptr inbounds i16, i16* %6974, i64 -32
  %6988 = bitcast i16* %6987 to <16 x i16>*
  %6989 = load <16 x i16>, <16 x i16>* %6988, align 2, !tbaa !396
  %6990 = getelementptr inbounds i16, i16* %6974, i64 -16
  %6991 = bitcast i16* %6990 to <16 x i16>*
  %6992 = load <16 x i16>, <16 x i16>* %6991, align 2, !tbaa !396
  %6993 = add <16 x i16> %6983, %6977
  %6994 = add <16 x i16> %6993, %6989
  %6995 = add <16 x i16> %6986, %6980
  %6996 = add <16 x i16> %6995, %6992
  %6997 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6994, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6998 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %6996, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %6999 = shufflevector <16 x i16> %6997, <16 x i16> %6998, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7000 = lshr <32 x i16> %6999, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7001 = shufflevector <32 x i16> %7000, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7002 = zext i32 %.pre-phi3254 to i64
  %7003 = mul nsw i64 %96, %7002
  %7004 = add nsw i64 %98, %7003
  %7005 = getelementptr inbounds i16, i16* %blur_x, i64 %7004
  %7006 = getelementptr inbounds i16, i16* %7005, i64 -32
  %7007 = bitcast i16* %7006 to <16 x i16>*
  store <16 x i16> %7001, <16 x i16>* %7007, align 2, !tbaa !399
  %7008 = shufflevector <32 x i16> %7000, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7009 = getelementptr inbounds i16, i16* %7005, i64 -16
  %7010 = bitcast i16* %7009 to <16 x i16>*
  store <16 x i16> %7008, <16 x i16>* %7010, align 2, !tbaa !399
  %7011 = zext i32 %.pre-phi3250 to i64
  %7012 = mul nsw i64 %7011, %108
  %7013 = add nsw i64 %7012, %93
  %7014 = getelementptr inbounds i16, i16* %blur_x, i64 %7013
  %7015 = getelementptr inbounds i16, i16* %7014, i64 -32
  %7016 = bitcast i16* %7015 to <16 x i16>*
  %7017 = load <16 x i16>, <16 x i16>* %7016, align 2, !tbaa !399
  %7018 = getelementptr inbounds i16, i16* %7014, i64 -16
  %7019 = bitcast i16* %7018 to <16 x i16>*
  %7020 = load <16 x i16>, <16 x i16>* %7019, align 2, !tbaa !399
  %7021 = mul nsw i64 %7002, %108
  %7022 = add nsw i64 %7021, %93
  %7023 = getelementptr inbounds i16, i16* %blur_x, i64 %7022
  %7024 = getelementptr inbounds i16, i16* %7023, i64 -32
  %7025 = bitcast i16* %7024 to <16 x i16>*
  %7026 = load <16 x i16>, <16 x i16>* %7025, align 2, !tbaa !399
  %7027 = getelementptr inbounds i16, i16* %7023, i64 -16
  %7028 = bitcast i16* %7027 to <16 x i16>*
  %7029 = load <16 x i16>, <16 x i16>* %7028, align 2, !tbaa !399
  %7030 = zext i32 %.pre-phi to i64
  %7031 = mul nsw i64 %7030, %108
  %7032 = add nsw i64 %7031, %93
  %7033 = getelementptr inbounds i16, i16* %blur_x, i64 %7032
  %7034 = getelementptr inbounds i16, i16* %7033, i64 -32
  %7035 = bitcast i16* %7034 to <16 x i16>*
  %7036 = load <16 x i16>, <16 x i16>* %7035, align 2, !tbaa !399
  %7037 = getelementptr inbounds i16, i16* %7033, i64 -16
  %7038 = bitcast i16* %7037 to <16 x i16>*
  %7039 = load <16 x i16>, <16 x i16>* %7038, align 2, !tbaa !399
  %7040 = add <16 x i16> %7026, %7017
  %7041 = add <16 x i16> %7040, %7036
  %7042 = add <16 x i16> %7029, %7020
  %7043 = add <16 x i16> %7042, %7039
  %7044 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7041, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7045 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7043, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7046 = shufflevector <16 x i16> %7044, <16 x i16> %7045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7047 = lshr <32 x i16> %7046, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7048 = shufflevector <32 x i16> %7047, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7049 = sext i32 %a26 to i64
  %7050 = add nsw i64 %7049, 20
  %7051 = mul nsw i64 %7050, %109
  %7052 = add nsw i64 %111, %7051
  %7053 = getelementptr inbounds i16, i16* %65, i64 %7052
  %7054 = getelementptr inbounds i16, i16* %7053, i64 -32
  %7055 = bitcast i16* %7054 to <16 x i16>*
  store <16 x i16> %7048, <16 x i16>* %7055, align 2, !tbaa !401
  %7056 = shufflevector <32 x i16> %7047, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7057 = getelementptr inbounds i16, i16* %7053, i64 -16
  %7058 = bitcast i16* %7057 to <16 x i16>*
  store <16 x i16> %7056, <16 x i16>* %7058, align 2, !tbaa !401
  br label %after_bb493

"for blur_y.s0.x.x.rebased498":                   ; preds = %"for blur_y.s0.x.x.rebased498.preheader", %"consume blur_x505"
  %indvars.iv3093 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased498.preheader" ], [ %indvars.iv.next3094, %"consume blur_x505" ]
  %7059 = add nsw i64 %indvars.iv3093, %100
  %7060 = icmp slt i64 %7059, 1
  %7061 = trunc i64 %7059 to i32
  %7062 = shl nsw i32 %7061, 5
  %7063 = icmp sgt i32 %4, %7062
  %7064 = or i1 %7060, %7063
  br i1 %7064, label %"produce blur_x504", label %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge"

"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased498"
  %.pre3299 = shl nsw i64 %7059, 5
  br label %"consume blur_x505"

"end for blur_y.s0.x.x.rebased499":               ; preds = %"consume blur_x505", %after_bb493
  br i1 %101, label %"for blur_y.s0.x.x.rebased506.preheader", label %"end for blur_y.s0.x.x.rebased507", !prof !386

"for blur_y.s0.x.x.rebased506.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased499"
  %7065 = sext i32 %t1650 to i64
  %7066 = zext i32 %.pre-phi3250 to i64
  %7067 = mul nsw i64 %7066, %108
  %7068 = sub nsw i64 %7067, %95
  %7069 = zext i32 %.pre-phi3254 to i64
  %7070 = mul nsw i64 %7069, %108
  %7071 = sub nsw i64 %7070, %95
  %7072 = zext i32 %.pre-phi to i64
  %7073 = mul nsw i64 %7072, %108
  %7074 = sub nsw i64 %7073, %95
  %7075 = sext i32 %a26 to i64
  %7076 = add nsw i64 %7075, 20
  %7077 = mul nsw i64 %7076, %109
  %7078 = add nsw i64 %7077, %112
  br label %"for blur_y.s0.x.x.rebased506"

"produce blur_x504":                              ; preds = %"for blur_y.s0.x.x.rebased498"
  %t992 = add nsw i32 %7062, %t1969
  %7079 = sext i32 %t992 to i64
  %7080 = getelementptr inbounds i16, i16* %read_input, i64 %7079
  %7081 = getelementptr inbounds i16, i16* %7080, i64 1
  %7082 = bitcast i16* %7081 to <16 x i16>*
  %7083 = load <16 x i16>, <16 x i16>* %7082, align 2, !tbaa !396
  %7084 = getelementptr inbounds i16, i16* %7080, i64 17
  %7085 = bitcast i16* %7084 to <16 x i16>*
  %7086 = load <16 x i16>, <16 x i16>* %7085, align 2, !tbaa !396
  %7087 = getelementptr inbounds i16, i16* %7080, i64 2
  %7088 = bitcast i16* %7087 to <16 x i16>*
  %7089 = load <16 x i16>, <16 x i16>* %7088, align 2, !tbaa !396
  %7090 = getelementptr inbounds i16, i16* %7080, i64 18
  %7091 = bitcast i16* %7090 to <16 x i16>*
  %7092 = load <16 x i16>, <16 x i16>* %7091, align 2, !tbaa !396
  %7093 = bitcast i16* %7080 to <16 x i16>*
  %7094 = load <16 x i16>, <16 x i16>* %7093, align 2, !tbaa !396
  %7095 = getelementptr inbounds i16, i16* %7080, i64 16
  %7096 = bitcast i16* %7095 to <16 x i16>*
  %7097 = load <16 x i16>, <16 x i16>* %7096, align 2, !tbaa !396
  %7098 = add <16 x i16> %7089, %7083
  %7099 = add <16 x i16> %7098, %7094
  %7100 = add <16 x i16> %7092, %7086
  %7101 = add <16 x i16> %7100, %7097
  %7102 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7099, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7103 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7101, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7104 = shufflevector <16 x i16> %7102, <16 x i16> %7103, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7105 = lshr <32 x i16> %7104, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7106 = shufflevector <32 x i16> %7105, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7107 = shl nsw i64 %7059, 5
  %7108 = add nsw i64 %7107, %6960
  %7109 = getelementptr inbounds i16, i16* %blur_x, i64 %7108
  %7110 = bitcast i16* %7109 to <16 x i16>*
  store <16 x i16> %7106, <16 x i16>* %7110, align 2, !tbaa !399
  %7111 = shufflevector <32 x i16> %7105, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7112 = getelementptr inbounds i16, i16* %7109, i64 16
  %7113 = bitcast i16* %7112 to <16 x i16>*
  store <16 x i16> %7111, <16 x i16>* %7113, align 2, !tbaa !399
  br label %"consume blur_x505"

"consume blur_x505":                              ; preds = %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge", %"produce blur_x504"
  %.pre-phi3300 = phi i64 [ %.pre3299, %"for blur_y.s0.x.x.rebased498.consume blur_x505_crit_edge" ], [ %7107, %"produce blur_x504" ]
  %7114 = add nsw i64 %6963, %.pre-phi3300
  %7115 = getelementptr inbounds i16, i16* %blur_x, i64 %7114
  %7116 = bitcast i16* %7115 to <16 x i16>*
  %7117 = load <16 x i16>, <16 x i16>* %7116, align 2, !tbaa !399
  %7118 = getelementptr inbounds i16, i16* %7115, i64 16
  %7119 = bitcast i16* %7118 to <16 x i16>*
  %7120 = load <16 x i16>, <16 x i16>* %7119, align 2, !tbaa !399
  %7121 = add nsw i64 %6966, %.pre-phi3300
  %7122 = getelementptr inbounds i16, i16* %blur_x, i64 %7121
  %7123 = bitcast i16* %7122 to <16 x i16>*
  %7124 = load <16 x i16>, <16 x i16>* %7123, align 2, !tbaa !399
  %7125 = getelementptr inbounds i16, i16* %7122, i64 16
  %7126 = bitcast i16* %7125 to <16 x i16>*
  %7127 = load <16 x i16>, <16 x i16>* %7126, align 2, !tbaa !399
  %7128 = add nsw i64 %6969, %.pre-phi3300
  %7129 = getelementptr inbounds i16, i16* %blur_x, i64 %7128
  %7130 = bitcast i16* %7129 to <16 x i16>*
  %7131 = load <16 x i16>, <16 x i16>* %7130, align 2, !tbaa !399
  %7132 = getelementptr inbounds i16, i16* %7129, i64 16
  %7133 = bitcast i16* %7132 to <16 x i16>*
  %7134 = load <16 x i16>, <16 x i16>* %7133, align 2, !tbaa !399
  %7135 = add <16 x i16> %7124, %7117
  %7136 = add <16 x i16> %7135, %7131
  %7137 = add <16 x i16> %7127, %7120
  %7138 = add <16 x i16> %7137, %7134
  %7139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7136, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7140 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7138, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7141 = shufflevector <16 x i16> %7139, <16 x i16> %7140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7142 = lshr <32 x i16> %7141, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7143 = shufflevector <32 x i16> %7142, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7144 = add nsw i64 %6973, %.pre-phi3300
  %7145 = getelementptr inbounds i16, i16* %65, i64 %7144
  %7146 = bitcast i16* %7145 to <16 x i16>*
  store <16 x i16> %7143, <16 x i16>* %7146, align 2, !tbaa !401
  %7147 = shufflevector <32 x i16> %7142, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7148 = getelementptr inbounds i16, i16* %7145, i64 16
  %7149 = bitcast i16* %7148 to <16 x i16>*
  store <16 x i16> %7147, <16 x i16>* %7149, align 2, !tbaa !401
  %indvars.iv.next3094 = add nuw nsw i64 %indvars.iv3093, 1
  %.not2542 = icmp eq i64 %indvars.iv.next3094, %180
  br i1 %.not2542, label %"end for blur_y.s0.x.x.rebased499", label %"for blur_y.s0.x.x.rebased498"

"for blur_y.s0.x.x.rebased506":                   ; preds = %"for blur_y.s0.x.x.rebased506.preheader", %"consume blur_x514"
  %blur_y.s0.x.x.rebased508 = phi i32 [ %7228, %"consume blur_x514" ], [ 0, %"for blur_y.s0.x.x.rebased506.preheader" ]
  %7150 = add nsw i32 %blur_y.s0.x.x.rebased508, %t1582
  %a231 = shl nsw i32 %7150, 5
  %7151 = icmp sgt i32 %a14, %a231
  %b237 = select i1 %7151, i32 %a231, i32 %a14
  %7152 = icmp slt i32 %7150, 1
  %7153 = icmp sgt i32 %4, %a231
  %7154 = or i1 %7152, %7153
  br i1 %7154, label %"produce blur_x512", label %"consume blur_x514"

"end for blur_y.s0.x.x.rebased507":               ; preds = %"consume blur_x514", %"end for blur_y.s0.x.x.rebased499"
  br i1 %34, label %"produce blur_x518", label %after_bb515

"produce blur_x512":                              ; preds = %"for blur_y.s0.x.x.rebased506"
  %7155 = icmp slt i32 %b237, %4
  %blur_x.s0.x.v1.base.s513 = select i1 %7155, i32 %b237, i32 %4
  %t997 = add nsw i32 %blur_x.s0.x.v1.base.s513, %t1969
  %7156 = sext i32 %t997 to i64
  %7157 = getelementptr inbounds i16, i16* %read_input, i64 %7156
  %7158 = getelementptr inbounds i16, i16* %7157, i64 1
  %7159 = bitcast i16* %7158 to <16 x i16>*
  %7160 = load <16 x i16>, <16 x i16>* %7159, align 2, !tbaa !396
  %7161 = getelementptr inbounds i16, i16* %7157, i64 17
  %7162 = bitcast i16* %7161 to <16 x i16>*
  %7163 = load <16 x i16>, <16 x i16>* %7162, align 2, !tbaa !396
  %7164 = getelementptr inbounds i16, i16* %7157, i64 2
  %7165 = bitcast i16* %7164 to <16 x i16>*
  %7166 = load <16 x i16>, <16 x i16>* %7165, align 2, !tbaa !396
  %7167 = getelementptr inbounds i16, i16* %7157, i64 18
  %7168 = bitcast i16* %7167 to <16 x i16>*
  %7169 = load <16 x i16>, <16 x i16>* %7168, align 2, !tbaa !396
  %7170 = bitcast i16* %7157 to <16 x i16>*
  %7171 = load <16 x i16>, <16 x i16>* %7170, align 2, !tbaa !396
  %7172 = getelementptr inbounds i16, i16* %7157, i64 16
  %7173 = bitcast i16* %7172 to <16 x i16>*
  %7174 = load <16 x i16>, <16 x i16>* %7173, align 2, !tbaa !396
  %7175 = add <16 x i16> %7166, %7160
  %7176 = add <16 x i16> %7175, %7171
  %7177 = add <16 x i16> %7169, %7163
  %7178 = add <16 x i16> %7177, %7174
  %7179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7176, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7180 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7178, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7181 = shufflevector <16 x i16> %7179, <16 x i16> %7180, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7182 = lshr <32 x i16> %7181, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7183 = shufflevector <32 x i16> %7182, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7184 = sext i32 %blur_x.s0.x.v1.base.s513 to i64
  %7185 = add nsw i64 %7184, %7065
  %7186 = getelementptr inbounds i16, i16* %blur_x, i64 %7185
  %7187 = bitcast i16* %7186 to <16 x i16>*
  store <16 x i16> %7183, <16 x i16>* %7187, align 2, !tbaa !399
  %7188 = shufflevector <32 x i16> %7182, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7189 = getelementptr inbounds i16, i16* %7186, i64 16
  %7190 = bitcast i16* %7189 to <16 x i16>*
  store <16 x i16> %7188, <16 x i16>* %7190, align 2, !tbaa !399
  br label %"consume blur_x514"

"consume blur_x514":                              ; preds = %"for blur_y.s0.x.x.rebased506", %"produce blur_x512"
  %7191 = sext i32 %b237 to i64
  %7192 = add nsw i64 %7068, %7191
  %7193 = getelementptr inbounds i16, i16* %blur_x, i64 %7192
  %7194 = bitcast i16* %7193 to <16 x i16>*
  %7195 = load <16 x i16>, <16 x i16>* %7194, align 2, !tbaa !399
  %7196 = getelementptr inbounds i16, i16* %7193, i64 16
  %7197 = bitcast i16* %7196 to <16 x i16>*
  %7198 = load <16 x i16>, <16 x i16>* %7197, align 2, !tbaa !399
  %7199 = add nsw i64 %7071, %7191
  %7200 = getelementptr inbounds i16, i16* %blur_x, i64 %7199
  %7201 = bitcast i16* %7200 to <16 x i16>*
  %7202 = load <16 x i16>, <16 x i16>* %7201, align 2, !tbaa !399
  %7203 = getelementptr inbounds i16, i16* %7200, i64 16
  %7204 = bitcast i16* %7203 to <16 x i16>*
  %7205 = load <16 x i16>, <16 x i16>* %7204, align 2, !tbaa !399
  %7206 = add nsw i64 %7074, %7191
  %7207 = getelementptr inbounds i16, i16* %blur_x, i64 %7206
  %7208 = bitcast i16* %7207 to <16 x i16>*
  %7209 = load <16 x i16>, <16 x i16>* %7208, align 2, !tbaa !399
  %7210 = getelementptr inbounds i16, i16* %7207, i64 16
  %7211 = bitcast i16* %7210 to <16 x i16>*
  %7212 = load <16 x i16>, <16 x i16>* %7211, align 2, !tbaa !399
  %7213 = add <16 x i16> %7202, %7195
  %7214 = add <16 x i16> %7213, %7209
  %7215 = add <16 x i16> %7205, %7198
  %7216 = add <16 x i16> %7215, %7212
  %7217 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7214, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7218 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7216, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7219 = shufflevector <16 x i16> %7217, <16 x i16> %7218, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7220 = lshr <32 x i16> %7219, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7221 = shufflevector <32 x i16> %7220, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7222 = add nsw i64 %7078, %7191
  %7223 = getelementptr inbounds i16, i16* %65, i64 %7222
  %7224 = bitcast i16* %7223 to <16 x i16>*
  store <16 x i16> %7221, <16 x i16>* %7224, align 2, !tbaa !401
  %7225 = shufflevector <32 x i16> %7220, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7226 = getelementptr inbounds i16, i16* %7223, i64 16
  %7227 = bitcast i16* %7226 to <16 x i16>*
  store <16 x i16> %7225, <16 x i16>* %7227, align 2, !tbaa !401
  %7228 = add nuw nsw i32 %blur_y.s0.x.x.rebased508, 1
  %.not2541 = icmp eq i32 %7228, %t1639
  br i1 %.not2541, label %"end for blur_y.s0.x.x.rebased507", label %"for blur_y.s0.x.x.rebased506"

after_bb515:                                      ; preds = %"end for blur_y.s0.x.x.rebased507", %"produce blur_x518"
  br i1 %99, label %"for blur_y.s0.x.x.rebased520.preheader", label %"end for blur_y.s0.x.x.rebased521", !prof !386

"for blur_y.s0.x.x.rebased520.preheader":         ; preds = %after_bb515
  %7229 = sext i32 %t1666 to i64
  %7230 = zext i32 %.pre-phi3254 to i64
  %7231 = mul nsw i64 %7230, %108
  %7232 = sub nsw i64 %7231, %95
  %7233 = zext i32 %.pre-phi3260 to i64
  %7234 = mul nsw i64 %7233, %108
  %7235 = sub nsw i64 %7234, %95
  %7236 = zext i32 %.pre-phi3250 to i64
  %7237 = mul nsw i64 %7236, %108
  %7238 = sub nsw i64 %7237, %95
  %7239 = sext i32 %a26 to i64
  %7240 = add nsw i64 %7239, 21
  %7241 = mul nsw i64 %7240, %109
  %7242 = add nsw i64 %7241, %112
  br label %"for blur_y.s0.x.x.rebased520"

"produce blur_x518":                              ; preds = %"end for blur_y.s0.x.x.rebased507"
  %7243 = getelementptr inbounds i16, i16* %read_input, i64 %153
  %7244 = getelementptr inbounds i16, i16* %7243, i64 -31
  %7245 = bitcast i16* %7244 to <16 x i16>*
  %7246 = load <16 x i16>, <16 x i16>* %7245, align 2, !tbaa !396
  %7247 = getelementptr inbounds i16, i16* %7243, i64 -15
  %7248 = bitcast i16* %7247 to <16 x i16>*
  %7249 = load <16 x i16>, <16 x i16>* %7248, align 2, !tbaa !396
  %7250 = getelementptr inbounds i16, i16* %7243, i64 -30
  %7251 = bitcast i16* %7250 to <16 x i16>*
  %7252 = load <16 x i16>, <16 x i16>* %7251, align 2, !tbaa !396
  %7253 = getelementptr inbounds i16, i16* %7243, i64 -14
  %7254 = bitcast i16* %7253 to <16 x i16>*
  %7255 = load <16 x i16>, <16 x i16>* %7254, align 2, !tbaa !396
  %7256 = getelementptr inbounds i16, i16* %7243, i64 -32
  %7257 = bitcast i16* %7256 to <16 x i16>*
  %7258 = load <16 x i16>, <16 x i16>* %7257, align 2, !tbaa !396
  %7259 = getelementptr inbounds i16, i16* %7243, i64 -16
  %7260 = bitcast i16* %7259 to <16 x i16>*
  %7261 = load <16 x i16>, <16 x i16>* %7260, align 2, !tbaa !396
  %7262 = add <16 x i16> %7252, %7246
  %7263 = add <16 x i16> %7262, %7258
  %7264 = add <16 x i16> %7255, %7249
  %7265 = add <16 x i16> %7264, %7261
  %7266 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7263, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7267 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7265, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7268 = shufflevector <16 x i16> %7266, <16 x i16> %7267, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7269 = lshr <32 x i16> %7268, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7270 = shufflevector <32 x i16> %7269, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7271 = zext i32 %.pre-phi3260 to i64
  %7272 = mul nsw i64 %96, %7271
  %7273 = add nsw i64 %98, %7272
  %7274 = getelementptr inbounds i16, i16* %blur_x, i64 %7273
  %7275 = getelementptr inbounds i16, i16* %7274, i64 -32
  %7276 = bitcast i16* %7275 to <16 x i16>*
  store <16 x i16> %7270, <16 x i16>* %7276, align 2, !tbaa !399
  %7277 = shufflevector <32 x i16> %7269, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7278 = getelementptr inbounds i16, i16* %7274, i64 -16
  %7279 = bitcast i16* %7278 to <16 x i16>*
  store <16 x i16> %7277, <16 x i16>* %7279, align 2, !tbaa !399
  %7280 = zext i32 %.pre-phi3254 to i64
  %7281 = mul nsw i64 %7280, %108
  %7282 = add nsw i64 %7281, %93
  %7283 = getelementptr inbounds i16, i16* %blur_x, i64 %7282
  %7284 = getelementptr inbounds i16, i16* %7283, i64 -32
  %7285 = bitcast i16* %7284 to <16 x i16>*
  %7286 = load <16 x i16>, <16 x i16>* %7285, align 2, !tbaa !399
  %7287 = getelementptr inbounds i16, i16* %7283, i64 -16
  %7288 = bitcast i16* %7287 to <16 x i16>*
  %7289 = load <16 x i16>, <16 x i16>* %7288, align 2, !tbaa !399
  %7290 = mul nsw i64 %7271, %108
  %7291 = add nsw i64 %7290, %93
  %7292 = getelementptr inbounds i16, i16* %blur_x, i64 %7291
  %7293 = getelementptr inbounds i16, i16* %7292, i64 -32
  %7294 = bitcast i16* %7293 to <16 x i16>*
  %7295 = load <16 x i16>, <16 x i16>* %7294, align 2, !tbaa !399
  %7296 = getelementptr inbounds i16, i16* %7292, i64 -16
  %7297 = bitcast i16* %7296 to <16 x i16>*
  %7298 = load <16 x i16>, <16 x i16>* %7297, align 2, !tbaa !399
  %7299 = zext i32 %.pre-phi3250 to i64
  %7300 = mul nsw i64 %7299, %108
  %7301 = add nsw i64 %7300, %93
  %7302 = getelementptr inbounds i16, i16* %blur_x, i64 %7301
  %7303 = getelementptr inbounds i16, i16* %7302, i64 -32
  %7304 = bitcast i16* %7303 to <16 x i16>*
  %7305 = load <16 x i16>, <16 x i16>* %7304, align 2, !tbaa !399
  %7306 = getelementptr inbounds i16, i16* %7302, i64 -16
  %7307 = bitcast i16* %7306 to <16 x i16>*
  %7308 = load <16 x i16>, <16 x i16>* %7307, align 2, !tbaa !399
  %7309 = add <16 x i16> %7295, %7286
  %7310 = add <16 x i16> %7309, %7305
  %7311 = add <16 x i16> %7298, %7289
  %7312 = add <16 x i16> %7311, %7308
  %7313 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7310, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7314 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7312, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7315 = shufflevector <16 x i16> %7313, <16 x i16> %7314, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7316 = lshr <32 x i16> %7315, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7317 = shufflevector <32 x i16> %7316, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7318 = sext i32 %a26 to i64
  %7319 = add nsw i64 %7318, 21
  %7320 = mul nsw i64 %7319, %109
  %7321 = add nsw i64 %111, %7320
  %7322 = getelementptr inbounds i16, i16* %65, i64 %7321
  %7323 = getelementptr inbounds i16, i16* %7322, i64 -32
  %7324 = bitcast i16* %7323 to <16 x i16>*
  store <16 x i16> %7317, <16 x i16>* %7324, align 2, !tbaa !401
  %7325 = shufflevector <32 x i16> %7316, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7326 = getelementptr inbounds i16, i16* %7322, i64 -16
  %7327 = bitcast i16* %7326 to <16 x i16>*
  store <16 x i16> %7325, <16 x i16>* %7327, align 2, !tbaa !401
  br label %after_bb515

"for blur_y.s0.x.x.rebased520":                   ; preds = %"for blur_y.s0.x.x.rebased520.preheader", %"consume blur_x527"
  %indvars.iv3096 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased520.preheader" ], [ %indvars.iv.next3097, %"consume blur_x527" ]
  %7328 = add nsw i64 %indvars.iv3096, %100
  %7329 = icmp slt i64 %7328, 1
  %7330 = trunc i64 %7328 to i32
  %7331 = shl nsw i32 %7330, 5
  %7332 = icmp sgt i32 %4, %7331
  %7333 = or i1 %7329, %7332
  br i1 %7333, label %"produce blur_x526", label %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge"

"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased520"
  %.pre3301 = shl nsw i64 %7328, 5
  br label %"consume blur_x527"

"end for blur_y.s0.x.x.rebased521":               ; preds = %"consume blur_x527", %after_bb515
  br i1 %101, label %"for blur_y.s0.x.x.rebased528.preheader", label %"end for blur_y.s0.x.x.rebased529", !prof !386

"for blur_y.s0.x.x.rebased528.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased521"
  %7334 = sext i32 %t1666 to i64
  %7335 = zext i32 %.pre-phi3254 to i64
  %7336 = mul nsw i64 %7335, %108
  %7337 = sub nsw i64 %7336, %95
  %7338 = zext i32 %.pre-phi3260 to i64
  %7339 = mul nsw i64 %7338, %108
  %7340 = sub nsw i64 %7339, %95
  %7341 = zext i32 %.pre-phi3250 to i64
  %7342 = mul nsw i64 %7341, %108
  %7343 = sub nsw i64 %7342, %95
  %7344 = sext i32 %a26 to i64
  %7345 = add nsw i64 %7344, 21
  %7346 = mul nsw i64 %7345, %109
  %7347 = add nsw i64 %7346, %112
  br label %"for blur_y.s0.x.x.rebased528"

"produce blur_x526":                              ; preds = %"for blur_y.s0.x.x.rebased520"
  %t1008 = add nsw i32 %7331, %t1985
  %7348 = sext i32 %t1008 to i64
  %7349 = getelementptr inbounds i16, i16* %read_input, i64 %7348
  %7350 = getelementptr inbounds i16, i16* %7349, i64 1
  %7351 = bitcast i16* %7350 to <16 x i16>*
  %7352 = load <16 x i16>, <16 x i16>* %7351, align 2, !tbaa !396
  %7353 = getelementptr inbounds i16, i16* %7349, i64 17
  %7354 = bitcast i16* %7353 to <16 x i16>*
  %7355 = load <16 x i16>, <16 x i16>* %7354, align 2, !tbaa !396
  %7356 = getelementptr inbounds i16, i16* %7349, i64 2
  %7357 = bitcast i16* %7356 to <16 x i16>*
  %7358 = load <16 x i16>, <16 x i16>* %7357, align 2, !tbaa !396
  %7359 = getelementptr inbounds i16, i16* %7349, i64 18
  %7360 = bitcast i16* %7359 to <16 x i16>*
  %7361 = load <16 x i16>, <16 x i16>* %7360, align 2, !tbaa !396
  %7362 = bitcast i16* %7349 to <16 x i16>*
  %7363 = load <16 x i16>, <16 x i16>* %7362, align 2, !tbaa !396
  %7364 = getelementptr inbounds i16, i16* %7349, i64 16
  %7365 = bitcast i16* %7364 to <16 x i16>*
  %7366 = load <16 x i16>, <16 x i16>* %7365, align 2, !tbaa !396
  %7367 = add <16 x i16> %7358, %7352
  %7368 = add <16 x i16> %7367, %7363
  %7369 = add <16 x i16> %7361, %7355
  %7370 = add <16 x i16> %7369, %7366
  %7371 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7368, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7372 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7370, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7373 = shufflevector <16 x i16> %7371, <16 x i16> %7372, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7374 = lshr <32 x i16> %7373, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7375 = shufflevector <32 x i16> %7374, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7376 = shl nsw i64 %7328, 5
  %7377 = add nsw i64 %7376, %7229
  %7378 = getelementptr inbounds i16, i16* %blur_x, i64 %7377
  %7379 = bitcast i16* %7378 to <16 x i16>*
  store <16 x i16> %7375, <16 x i16>* %7379, align 2, !tbaa !399
  %7380 = shufflevector <32 x i16> %7374, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7381 = getelementptr inbounds i16, i16* %7378, i64 16
  %7382 = bitcast i16* %7381 to <16 x i16>*
  store <16 x i16> %7380, <16 x i16>* %7382, align 2, !tbaa !399
  br label %"consume blur_x527"

"consume blur_x527":                              ; preds = %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge", %"produce blur_x526"
  %.pre-phi3302 = phi i64 [ %.pre3301, %"for blur_y.s0.x.x.rebased520.consume blur_x527_crit_edge" ], [ %7376, %"produce blur_x526" ]
  %7383 = add nsw i64 %7232, %.pre-phi3302
  %7384 = getelementptr inbounds i16, i16* %blur_x, i64 %7383
  %7385 = bitcast i16* %7384 to <16 x i16>*
  %7386 = load <16 x i16>, <16 x i16>* %7385, align 2, !tbaa !399
  %7387 = getelementptr inbounds i16, i16* %7384, i64 16
  %7388 = bitcast i16* %7387 to <16 x i16>*
  %7389 = load <16 x i16>, <16 x i16>* %7388, align 2, !tbaa !399
  %7390 = add nsw i64 %7235, %.pre-phi3302
  %7391 = getelementptr inbounds i16, i16* %blur_x, i64 %7390
  %7392 = bitcast i16* %7391 to <16 x i16>*
  %7393 = load <16 x i16>, <16 x i16>* %7392, align 2, !tbaa !399
  %7394 = getelementptr inbounds i16, i16* %7391, i64 16
  %7395 = bitcast i16* %7394 to <16 x i16>*
  %7396 = load <16 x i16>, <16 x i16>* %7395, align 2, !tbaa !399
  %7397 = add nsw i64 %7238, %.pre-phi3302
  %7398 = getelementptr inbounds i16, i16* %blur_x, i64 %7397
  %7399 = bitcast i16* %7398 to <16 x i16>*
  %7400 = load <16 x i16>, <16 x i16>* %7399, align 2, !tbaa !399
  %7401 = getelementptr inbounds i16, i16* %7398, i64 16
  %7402 = bitcast i16* %7401 to <16 x i16>*
  %7403 = load <16 x i16>, <16 x i16>* %7402, align 2, !tbaa !399
  %7404 = add <16 x i16> %7393, %7386
  %7405 = add <16 x i16> %7404, %7400
  %7406 = add <16 x i16> %7396, %7389
  %7407 = add <16 x i16> %7406, %7403
  %7408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7405, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7409 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7407, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7410 = shufflevector <16 x i16> %7408, <16 x i16> %7409, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7411 = lshr <32 x i16> %7410, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7412 = shufflevector <32 x i16> %7411, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7413 = add nsw i64 %7242, %.pre-phi3302
  %7414 = getelementptr inbounds i16, i16* %65, i64 %7413
  %7415 = bitcast i16* %7414 to <16 x i16>*
  store <16 x i16> %7412, <16 x i16>* %7415, align 2, !tbaa !401
  %7416 = shufflevector <32 x i16> %7411, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7417 = getelementptr inbounds i16, i16* %7414, i64 16
  %7418 = bitcast i16* %7417 to <16 x i16>*
  store <16 x i16> %7416, <16 x i16>* %7418, align 2, !tbaa !401
  %indvars.iv.next3097 = add nuw nsw i64 %indvars.iv3096, 1
  %.not2540 = icmp eq i64 %indvars.iv.next3097, %180
  br i1 %.not2540, label %"end for blur_y.s0.x.x.rebased521", label %"for blur_y.s0.x.x.rebased520"

"for blur_y.s0.x.x.rebased528":                   ; preds = %"for blur_y.s0.x.x.rebased528.preheader", %"consume blur_x536"
  %blur_y.s0.x.x.rebased530 = phi i32 [ %7497, %"consume blur_x536" ], [ 0, %"for blur_y.s0.x.x.rebased528.preheader" ]
  %7419 = add nsw i32 %blur_y.s0.x.x.rebased530, %t1582
  %a238 = shl nsw i32 %7419, 5
  %7420 = icmp sgt i32 %a14, %a238
  %b244 = select i1 %7420, i32 %a238, i32 %a14
  %7421 = icmp slt i32 %7419, 1
  %7422 = icmp sgt i32 %4, %a238
  %7423 = or i1 %7421, %7422
  br i1 %7423, label %"produce blur_x534", label %"consume blur_x536"

"end for blur_y.s0.x.x.rebased529":               ; preds = %"consume blur_x536", %"end for blur_y.s0.x.x.rebased521"
  br i1 %34, label %"produce blur_x540", label %after_bb537

"produce blur_x534":                              ; preds = %"for blur_y.s0.x.x.rebased528"
  %7424 = icmp slt i32 %b244, %4
  %blur_x.s0.x.v1.base.s535 = select i1 %7424, i32 %b244, i32 %4
  %t1013 = add nsw i32 %blur_x.s0.x.v1.base.s535, %t1985
  %7425 = sext i32 %t1013 to i64
  %7426 = getelementptr inbounds i16, i16* %read_input, i64 %7425
  %7427 = getelementptr inbounds i16, i16* %7426, i64 1
  %7428 = bitcast i16* %7427 to <16 x i16>*
  %7429 = load <16 x i16>, <16 x i16>* %7428, align 2, !tbaa !396
  %7430 = getelementptr inbounds i16, i16* %7426, i64 17
  %7431 = bitcast i16* %7430 to <16 x i16>*
  %7432 = load <16 x i16>, <16 x i16>* %7431, align 2, !tbaa !396
  %7433 = getelementptr inbounds i16, i16* %7426, i64 2
  %7434 = bitcast i16* %7433 to <16 x i16>*
  %7435 = load <16 x i16>, <16 x i16>* %7434, align 2, !tbaa !396
  %7436 = getelementptr inbounds i16, i16* %7426, i64 18
  %7437 = bitcast i16* %7436 to <16 x i16>*
  %7438 = load <16 x i16>, <16 x i16>* %7437, align 2, !tbaa !396
  %7439 = bitcast i16* %7426 to <16 x i16>*
  %7440 = load <16 x i16>, <16 x i16>* %7439, align 2, !tbaa !396
  %7441 = getelementptr inbounds i16, i16* %7426, i64 16
  %7442 = bitcast i16* %7441 to <16 x i16>*
  %7443 = load <16 x i16>, <16 x i16>* %7442, align 2, !tbaa !396
  %7444 = add <16 x i16> %7435, %7429
  %7445 = add <16 x i16> %7444, %7440
  %7446 = add <16 x i16> %7438, %7432
  %7447 = add <16 x i16> %7446, %7443
  %7448 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7445, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7449 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7447, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7450 = shufflevector <16 x i16> %7448, <16 x i16> %7449, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7451 = lshr <32 x i16> %7450, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7452 = shufflevector <32 x i16> %7451, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7453 = sext i32 %blur_x.s0.x.v1.base.s535 to i64
  %7454 = add nsw i64 %7453, %7334
  %7455 = getelementptr inbounds i16, i16* %blur_x, i64 %7454
  %7456 = bitcast i16* %7455 to <16 x i16>*
  store <16 x i16> %7452, <16 x i16>* %7456, align 2, !tbaa !399
  %7457 = shufflevector <32 x i16> %7451, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7458 = getelementptr inbounds i16, i16* %7455, i64 16
  %7459 = bitcast i16* %7458 to <16 x i16>*
  store <16 x i16> %7457, <16 x i16>* %7459, align 2, !tbaa !399
  br label %"consume blur_x536"

"consume blur_x536":                              ; preds = %"for blur_y.s0.x.x.rebased528", %"produce blur_x534"
  %7460 = sext i32 %b244 to i64
  %7461 = add nsw i64 %7337, %7460
  %7462 = getelementptr inbounds i16, i16* %blur_x, i64 %7461
  %7463 = bitcast i16* %7462 to <16 x i16>*
  %7464 = load <16 x i16>, <16 x i16>* %7463, align 2, !tbaa !399
  %7465 = getelementptr inbounds i16, i16* %7462, i64 16
  %7466 = bitcast i16* %7465 to <16 x i16>*
  %7467 = load <16 x i16>, <16 x i16>* %7466, align 2, !tbaa !399
  %7468 = add nsw i64 %7340, %7460
  %7469 = getelementptr inbounds i16, i16* %blur_x, i64 %7468
  %7470 = bitcast i16* %7469 to <16 x i16>*
  %7471 = load <16 x i16>, <16 x i16>* %7470, align 2, !tbaa !399
  %7472 = getelementptr inbounds i16, i16* %7469, i64 16
  %7473 = bitcast i16* %7472 to <16 x i16>*
  %7474 = load <16 x i16>, <16 x i16>* %7473, align 2, !tbaa !399
  %7475 = add nsw i64 %7343, %7460
  %7476 = getelementptr inbounds i16, i16* %blur_x, i64 %7475
  %7477 = bitcast i16* %7476 to <16 x i16>*
  %7478 = load <16 x i16>, <16 x i16>* %7477, align 2, !tbaa !399
  %7479 = getelementptr inbounds i16, i16* %7476, i64 16
  %7480 = bitcast i16* %7479 to <16 x i16>*
  %7481 = load <16 x i16>, <16 x i16>* %7480, align 2, !tbaa !399
  %7482 = add <16 x i16> %7471, %7464
  %7483 = add <16 x i16> %7482, %7478
  %7484 = add <16 x i16> %7474, %7467
  %7485 = add <16 x i16> %7484, %7481
  %7486 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7483, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7487 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7485, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7488 = shufflevector <16 x i16> %7486, <16 x i16> %7487, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7489 = lshr <32 x i16> %7488, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7490 = shufflevector <32 x i16> %7489, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7491 = add nsw i64 %7347, %7460
  %7492 = getelementptr inbounds i16, i16* %65, i64 %7491
  %7493 = bitcast i16* %7492 to <16 x i16>*
  store <16 x i16> %7490, <16 x i16>* %7493, align 2, !tbaa !401
  %7494 = shufflevector <32 x i16> %7489, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7495 = getelementptr inbounds i16, i16* %7492, i64 16
  %7496 = bitcast i16* %7495 to <16 x i16>*
  store <16 x i16> %7494, <16 x i16>* %7496, align 2, !tbaa !401
  %7497 = add nuw nsw i32 %blur_y.s0.x.x.rebased530, 1
  %.not2539 = icmp eq i32 %7497, %t1639
  br i1 %.not2539, label %"end for blur_y.s0.x.x.rebased529", label %"for blur_y.s0.x.x.rebased528"

after_bb537:                                      ; preds = %"end for blur_y.s0.x.x.rebased529", %"produce blur_x540"
  br i1 %99, label %"for blur_y.s0.x.x.rebased542.preheader", label %"end for blur_y.s0.x.x.rebased543", !prof !386

"for blur_y.s0.x.x.rebased542.preheader":         ; preds = %after_bb537
  %7498 = sext i32 %t1638 to i64
  %7499 = zext i32 %.pre-phi3260 to i64
  %7500 = mul nsw i64 %7499, %108
  %7501 = sub nsw i64 %7500, %95
  %7502 = zext i32 %.pre-phi to i64
  %7503 = mul nsw i64 %7502, %108
  %7504 = sub nsw i64 %7503, %95
  %7505 = zext i32 %.pre-phi3254 to i64
  %7506 = mul nsw i64 %7505, %108
  %7507 = sub nsw i64 %7506, %95
  %7508 = sext i32 %a26 to i64
  %7509 = add nsw i64 %7508, 22
  %7510 = mul nsw i64 %7509, %109
  %7511 = add nsw i64 %7510, %112
  br label %"for blur_y.s0.x.x.rebased542"

"produce blur_x540":                              ; preds = %"end for blur_y.s0.x.x.rebased529"
  %7512 = getelementptr inbounds i16, i16* %read_input, i64 %155
  %7513 = getelementptr inbounds i16, i16* %7512, i64 -31
  %7514 = bitcast i16* %7513 to <16 x i16>*
  %7515 = load <16 x i16>, <16 x i16>* %7514, align 2, !tbaa !396
  %7516 = getelementptr inbounds i16, i16* %7512, i64 -15
  %7517 = bitcast i16* %7516 to <16 x i16>*
  %7518 = load <16 x i16>, <16 x i16>* %7517, align 2, !tbaa !396
  %7519 = getelementptr inbounds i16, i16* %7512, i64 -30
  %7520 = bitcast i16* %7519 to <16 x i16>*
  %7521 = load <16 x i16>, <16 x i16>* %7520, align 2, !tbaa !396
  %7522 = getelementptr inbounds i16, i16* %7512, i64 -14
  %7523 = bitcast i16* %7522 to <16 x i16>*
  %7524 = load <16 x i16>, <16 x i16>* %7523, align 2, !tbaa !396
  %7525 = getelementptr inbounds i16, i16* %7512, i64 -32
  %7526 = bitcast i16* %7525 to <16 x i16>*
  %7527 = load <16 x i16>, <16 x i16>* %7526, align 2, !tbaa !396
  %7528 = getelementptr inbounds i16, i16* %7512, i64 -16
  %7529 = bitcast i16* %7528 to <16 x i16>*
  %7530 = load <16 x i16>, <16 x i16>* %7529, align 2, !tbaa !396
  %7531 = add <16 x i16> %7521, %7515
  %7532 = add <16 x i16> %7531, %7527
  %7533 = add <16 x i16> %7524, %7518
  %7534 = add <16 x i16> %7533, %7530
  %7535 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7532, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7536 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7534, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7537 = shufflevector <16 x i16> %7535, <16 x i16> %7536, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7538 = lshr <32 x i16> %7537, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7539 = shufflevector <32 x i16> %7538, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7540 = zext i32 %.pre-phi to i64
  %7541 = mul nsw i64 %96, %7540
  %7542 = add nsw i64 %98, %7541
  %7543 = getelementptr inbounds i16, i16* %blur_x, i64 %7542
  %7544 = getelementptr inbounds i16, i16* %7543, i64 -32
  %7545 = bitcast i16* %7544 to <16 x i16>*
  store <16 x i16> %7539, <16 x i16>* %7545, align 2, !tbaa !399
  %7546 = shufflevector <32 x i16> %7538, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7547 = getelementptr inbounds i16, i16* %7543, i64 -16
  %7548 = bitcast i16* %7547 to <16 x i16>*
  store <16 x i16> %7546, <16 x i16>* %7548, align 2, !tbaa !399
  %7549 = zext i32 %.pre-phi3260 to i64
  %7550 = mul nsw i64 %7549, %108
  %7551 = add nsw i64 %7550, %93
  %7552 = getelementptr inbounds i16, i16* %blur_x, i64 %7551
  %7553 = getelementptr inbounds i16, i16* %7552, i64 -32
  %7554 = bitcast i16* %7553 to <16 x i16>*
  %7555 = load <16 x i16>, <16 x i16>* %7554, align 2, !tbaa !399
  %7556 = getelementptr inbounds i16, i16* %7552, i64 -16
  %7557 = bitcast i16* %7556 to <16 x i16>*
  %7558 = load <16 x i16>, <16 x i16>* %7557, align 2, !tbaa !399
  %7559 = mul nsw i64 %7540, %108
  %7560 = add nsw i64 %7559, %93
  %7561 = getelementptr inbounds i16, i16* %blur_x, i64 %7560
  %7562 = getelementptr inbounds i16, i16* %7561, i64 -32
  %7563 = bitcast i16* %7562 to <16 x i16>*
  %7564 = load <16 x i16>, <16 x i16>* %7563, align 2, !tbaa !399
  %7565 = getelementptr inbounds i16, i16* %7561, i64 -16
  %7566 = bitcast i16* %7565 to <16 x i16>*
  %7567 = load <16 x i16>, <16 x i16>* %7566, align 2, !tbaa !399
  %7568 = zext i32 %.pre-phi3254 to i64
  %7569 = mul nsw i64 %7568, %108
  %7570 = add nsw i64 %7569, %93
  %7571 = getelementptr inbounds i16, i16* %blur_x, i64 %7570
  %7572 = getelementptr inbounds i16, i16* %7571, i64 -32
  %7573 = bitcast i16* %7572 to <16 x i16>*
  %7574 = load <16 x i16>, <16 x i16>* %7573, align 2, !tbaa !399
  %7575 = getelementptr inbounds i16, i16* %7571, i64 -16
  %7576 = bitcast i16* %7575 to <16 x i16>*
  %7577 = load <16 x i16>, <16 x i16>* %7576, align 2, !tbaa !399
  %7578 = add <16 x i16> %7564, %7555
  %7579 = add <16 x i16> %7578, %7574
  %7580 = add <16 x i16> %7567, %7558
  %7581 = add <16 x i16> %7580, %7577
  %7582 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7579, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7583 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7581, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7584 = shufflevector <16 x i16> %7582, <16 x i16> %7583, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7585 = lshr <32 x i16> %7584, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7586 = shufflevector <32 x i16> %7585, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7587 = sext i32 %a26 to i64
  %7588 = add nsw i64 %7587, 22
  %7589 = mul nsw i64 %7588, %109
  %7590 = add nsw i64 %111, %7589
  %7591 = getelementptr inbounds i16, i16* %65, i64 %7590
  %7592 = getelementptr inbounds i16, i16* %7591, i64 -32
  %7593 = bitcast i16* %7592 to <16 x i16>*
  store <16 x i16> %7586, <16 x i16>* %7593, align 2, !tbaa !401
  %7594 = shufflevector <32 x i16> %7585, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7595 = getelementptr inbounds i16, i16* %7591, i64 -16
  %7596 = bitcast i16* %7595 to <16 x i16>*
  store <16 x i16> %7594, <16 x i16>* %7596, align 2, !tbaa !401
  br label %after_bb537

"for blur_y.s0.x.x.rebased542":                   ; preds = %"for blur_y.s0.x.x.rebased542.preheader", %"consume blur_x549"
  %indvars.iv3099 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased542.preheader" ], [ %indvars.iv.next3100, %"consume blur_x549" ]
  %7597 = add nsw i64 %indvars.iv3099, %100
  %7598 = icmp slt i64 %7597, 1
  %7599 = trunc i64 %7597 to i32
  %7600 = shl nsw i32 %7599, 5
  %7601 = icmp sgt i32 %4, %7600
  %7602 = or i1 %7598, %7601
  br i1 %7602, label %"produce blur_x548", label %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge"

"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased542"
  %.pre3303 = shl nsw i64 %7597, 5
  br label %"consume blur_x549"

"end for blur_y.s0.x.x.rebased543":               ; preds = %"consume blur_x549", %after_bb537
  br i1 %101, label %"for blur_y.s0.x.x.rebased550.preheader", label %"end for blur_y.s0.x.x.rebased551", !prof !386

"for blur_y.s0.x.x.rebased550.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased543"
  %7603 = sext i32 %t1638 to i64
  %7604 = zext i32 %.pre-phi3260 to i64
  %7605 = mul nsw i64 %7604, %108
  %7606 = sub nsw i64 %7605, %95
  %7607 = zext i32 %.pre-phi to i64
  %7608 = mul nsw i64 %7607, %108
  %7609 = sub nsw i64 %7608, %95
  %7610 = zext i32 %.pre-phi3254 to i64
  %7611 = mul nsw i64 %7610, %108
  %7612 = sub nsw i64 %7611, %95
  %7613 = sext i32 %a26 to i64
  %7614 = add nsw i64 %7613, 22
  %7615 = mul nsw i64 %7614, %109
  %7616 = add nsw i64 %7615, %112
  br label %"for blur_y.s0.x.x.rebased550"

"produce blur_x548":                              ; preds = %"for blur_y.s0.x.x.rebased542"
  %t1024 = add nsw i32 %7600, %t2001
  %7617 = sext i32 %t1024 to i64
  %7618 = getelementptr inbounds i16, i16* %read_input, i64 %7617
  %7619 = getelementptr inbounds i16, i16* %7618, i64 1
  %7620 = bitcast i16* %7619 to <16 x i16>*
  %7621 = load <16 x i16>, <16 x i16>* %7620, align 2, !tbaa !396
  %7622 = getelementptr inbounds i16, i16* %7618, i64 17
  %7623 = bitcast i16* %7622 to <16 x i16>*
  %7624 = load <16 x i16>, <16 x i16>* %7623, align 2, !tbaa !396
  %7625 = getelementptr inbounds i16, i16* %7618, i64 2
  %7626 = bitcast i16* %7625 to <16 x i16>*
  %7627 = load <16 x i16>, <16 x i16>* %7626, align 2, !tbaa !396
  %7628 = getelementptr inbounds i16, i16* %7618, i64 18
  %7629 = bitcast i16* %7628 to <16 x i16>*
  %7630 = load <16 x i16>, <16 x i16>* %7629, align 2, !tbaa !396
  %7631 = bitcast i16* %7618 to <16 x i16>*
  %7632 = load <16 x i16>, <16 x i16>* %7631, align 2, !tbaa !396
  %7633 = getelementptr inbounds i16, i16* %7618, i64 16
  %7634 = bitcast i16* %7633 to <16 x i16>*
  %7635 = load <16 x i16>, <16 x i16>* %7634, align 2, !tbaa !396
  %7636 = add <16 x i16> %7627, %7621
  %7637 = add <16 x i16> %7636, %7632
  %7638 = add <16 x i16> %7630, %7624
  %7639 = add <16 x i16> %7638, %7635
  %7640 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7637, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7641 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7639, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7642 = shufflevector <16 x i16> %7640, <16 x i16> %7641, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7643 = lshr <32 x i16> %7642, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7644 = shufflevector <32 x i16> %7643, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7645 = shl nsw i64 %7597, 5
  %7646 = add nsw i64 %7645, %7498
  %7647 = getelementptr inbounds i16, i16* %blur_x, i64 %7646
  %7648 = bitcast i16* %7647 to <16 x i16>*
  store <16 x i16> %7644, <16 x i16>* %7648, align 2, !tbaa !399
  %7649 = shufflevector <32 x i16> %7643, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7650 = getelementptr inbounds i16, i16* %7647, i64 16
  %7651 = bitcast i16* %7650 to <16 x i16>*
  store <16 x i16> %7649, <16 x i16>* %7651, align 2, !tbaa !399
  br label %"consume blur_x549"

"consume blur_x549":                              ; preds = %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge", %"produce blur_x548"
  %.pre-phi3304 = phi i64 [ %.pre3303, %"for blur_y.s0.x.x.rebased542.consume blur_x549_crit_edge" ], [ %7645, %"produce blur_x548" ]
  %7652 = add nsw i64 %7501, %.pre-phi3304
  %7653 = getelementptr inbounds i16, i16* %blur_x, i64 %7652
  %7654 = bitcast i16* %7653 to <16 x i16>*
  %7655 = load <16 x i16>, <16 x i16>* %7654, align 2, !tbaa !399
  %7656 = getelementptr inbounds i16, i16* %7653, i64 16
  %7657 = bitcast i16* %7656 to <16 x i16>*
  %7658 = load <16 x i16>, <16 x i16>* %7657, align 2, !tbaa !399
  %7659 = add nsw i64 %7504, %.pre-phi3304
  %7660 = getelementptr inbounds i16, i16* %blur_x, i64 %7659
  %7661 = bitcast i16* %7660 to <16 x i16>*
  %7662 = load <16 x i16>, <16 x i16>* %7661, align 2, !tbaa !399
  %7663 = getelementptr inbounds i16, i16* %7660, i64 16
  %7664 = bitcast i16* %7663 to <16 x i16>*
  %7665 = load <16 x i16>, <16 x i16>* %7664, align 2, !tbaa !399
  %7666 = add nsw i64 %7507, %.pre-phi3304
  %7667 = getelementptr inbounds i16, i16* %blur_x, i64 %7666
  %7668 = bitcast i16* %7667 to <16 x i16>*
  %7669 = load <16 x i16>, <16 x i16>* %7668, align 2, !tbaa !399
  %7670 = getelementptr inbounds i16, i16* %7667, i64 16
  %7671 = bitcast i16* %7670 to <16 x i16>*
  %7672 = load <16 x i16>, <16 x i16>* %7671, align 2, !tbaa !399
  %7673 = add <16 x i16> %7662, %7655
  %7674 = add <16 x i16> %7673, %7669
  %7675 = add <16 x i16> %7665, %7658
  %7676 = add <16 x i16> %7675, %7672
  %7677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7674, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7678 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7676, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7679 = shufflevector <16 x i16> %7677, <16 x i16> %7678, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7680 = lshr <32 x i16> %7679, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7681 = shufflevector <32 x i16> %7680, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7682 = add nsw i64 %7511, %.pre-phi3304
  %7683 = getelementptr inbounds i16, i16* %65, i64 %7682
  %7684 = bitcast i16* %7683 to <16 x i16>*
  store <16 x i16> %7681, <16 x i16>* %7684, align 2, !tbaa !401
  %7685 = shufflevector <32 x i16> %7680, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7686 = getelementptr inbounds i16, i16* %7683, i64 16
  %7687 = bitcast i16* %7686 to <16 x i16>*
  store <16 x i16> %7685, <16 x i16>* %7687, align 2, !tbaa !401
  %indvars.iv.next3100 = add nuw nsw i64 %indvars.iv3099, 1
  %.not2538 = icmp eq i64 %indvars.iv.next3100, %180
  br i1 %.not2538, label %"end for blur_y.s0.x.x.rebased543", label %"for blur_y.s0.x.x.rebased542"

"for blur_y.s0.x.x.rebased550":                   ; preds = %"for blur_y.s0.x.x.rebased550.preheader", %"consume blur_x558"
  %blur_y.s0.x.x.rebased552 = phi i32 [ %7766, %"consume blur_x558" ], [ 0, %"for blur_y.s0.x.x.rebased550.preheader" ]
  %7688 = add nsw i32 %blur_y.s0.x.x.rebased552, %t1582
  %a245 = shl nsw i32 %7688, 5
  %7689 = icmp sgt i32 %a14, %a245
  %b251 = select i1 %7689, i32 %a245, i32 %a14
  %7690 = icmp slt i32 %7688, 1
  %7691 = icmp sgt i32 %4, %a245
  %7692 = or i1 %7690, %7691
  br i1 %7692, label %"produce blur_x556", label %"consume blur_x558"

"end for blur_y.s0.x.x.rebased551":               ; preds = %"consume blur_x558", %"end for blur_y.s0.x.x.rebased543"
  br i1 %34, label %"produce blur_x562", label %after_bb559

"produce blur_x556":                              ; preds = %"for blur_y.s0.x.x.rebased550"
  %7693 = icmp slt i32 %b251, %4
  %blur_x.s0.x.v1.base.s557 = select i1 %7693, i32 %b251, i32 %4
  %t1029 = add nsw i32 %blur_x.s0.x.v1.base.s557, %t2001
  %7694 = sext i32 %t1029 to i64
  %7695 = getelementptr inbounds i16, i16* %read_input, i64 %7694
  %7696 = getelementptr inbounds i16, i16* %7695, i64 1
  %7697 = bitcast i16* %7696 to <16 x i16>*
  %7698 = load <16 x i16>, <16 x i16>* %7697, align 2, !tbaa !396
  %7699 = getelementptr inbounds i16, i16* %7695, i64 17
  %7700 = bitcast i16* %7699 to <16 x i16>*
  %7701 = load <16 x i16>, <16 x i16>* %7700, align 2, !tbaa !396
  %7702 = getelementptr inbounds i16, i16* %7695, i64 2
  %7703 = bitcast i16* %7702 to <16 x i16>*
  %7704 = load <16 x i16>, <16 x i16>* %7703, align 2, !tbaa !396
  %7705 = getelementptr inbounds i16, i16* %7695, i64 18
  %7706 = bitcast i16* %7705 to <16 x i16>*
  %7707 = load <16 x i16>, <16 x i16>* %7706, align 2, !tbaa !396
  %7708 = bitcast i16* %7695 to <16 x i16>*
  %7709 = load <16 x i16>, <16 x i16>* %7708, align 2, !tbaa !396
  %7710 = getelementptr inbounds i16, i16* %7695, i64 16
  %7711 = bitcast i16* %7710 to <16 x i16>*
  %7712 = load <16 x i16>, <16 x i16>* %7711, align 2, !tbaa !396
  %7713 = add <16 x i16> %7704, %7698
  %7714 = add <16 x i16> %7713, %7709
  %7715 = add <16 x i16> %7707, %7701
  %7716 = add <16 x i16> %7715, %7712
  %7717 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7714, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7718 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7716, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7719 = shufflevector <16 x i16> %7717, <16 x i16> %7718, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7720 = lshr <32 x i16> %7719, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7721 = shufflevector <32 x i16> %7720, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7722 = sext i32 %blur_x.s0.x.v1.base.s557 to i64
  %7723 = add nsw i64 %7722, %7603
  %7724 = getelementptr inbounds i16, i16* %blur_x, i64 %7723
  %7725 = bitcast i16* %7724 to <16 x i16>*
  store <16 x i16> %7721, <16 x i16>* %7725, align 2, !tbaa !399
  %7726 = shufflevector <32 x i16> %7720, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7727 = getelementptr inbounds i16, i16* %7724, i64 16
  %7728 = bitcast i16* %7727 to <16 x i16>*
  store <16 x i16> %7726, <16 x i16>* %7728, align 2, !tbaa !399
  br label %"consume blur_x558"

"consume blur_x558":                              ; preds = %"for blur_y.s0.x.x.rebased550", %"produce blur_x556"
  %7729 = sext i32 %b251 to i64
  %7730 = add nsw i64 %7606, %7729
  %7731 = getelementptr inbounds i16, i16* %blur_x, i64 %7730
  %7732 = bitcast i16* %7731 to <16 x i16>*
  %7733 = load <16 x i16>, <16 x i16>* %7732, align 2, !tbaa !399
  %7734 = getelementptr inbounds i16, i16* %7731, i64 16
  %7735 = bitcast i16* %7734 to <16 x i16>*
  %7736 = load <16 x i16>, <16 x i16>* %7735, align 2, !tbaa !399
  %7737 = add nsw i64 %7609, %7729
  %7738 = getelementptr inbounds i16, i16* %blur_x, i64 %7737
  %7739 = bitcast i16* %7738 to <16 x i16>*
  %7740 = load <16 x i16>, <16 x i16>* %7739, align 2, !tbaa !399
  %7741 = getelementptr inbounds i16, i16* %7738, i64 16
  %7742 = bitcast i16* %7741 to <16 x i16>*
  %7743 = load <16 x i16>, <16 x i16>* %7742, align 2, !tbaa !399
  %7744 = add nsw i64 %7612, %7729
  %7745 = getelementptr inbounds i16, i16* %blur_x, i64 %7744
  %7746 = bitcast i16* %7745 to <16 x i16>*
  %7747 = load <16 x i16>, <16 x i16>* %7746, align 2, !tbaa !399
  %7748 = getelementptr inbounds i16, i16* %7745, i64 16
  %7749 = bitcast i16* %7748 to <16 x i16>*
  %7750 = load <16 x i16>, <16 x i16>* %7749, align 2, !tbaa !399
  %7751 = add <16 x i16> %7740, %7733
  %7752 = add <16 x i16> %7751, %7747
  %7753 = add <16 x i16> %7743, %7736
  %7754 = add <16 x i16> %7753, %7750
  %7755 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7752, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7756 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7754, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7757 = shufflevector <16 x i16> %7755, <16 x i16> %7756, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7758 = lshr <32 x i16> %7757, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7759 = shufflevector <32 x i16> %7758, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7760 = add nsw i64 %7616, %7729
  %7761 = getelementptr inbounds i16, i16* %65, i64 %7760
  %7762 = bitcast i16* %7761 to <16 x i16>*
  store <16 x i16> %7759, <16 x i16>* %7762, align 2, !tbaa !401
  %7763 = shufflevector <32 x i16> %7758, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7764 = getelementptr inbounds i16, i16* %7761, i64 16
  %7765 = bitcast i16* %7764 to <16 x i16>*
  store <16 x i16> %7763, <16 x i16>* %7765, align 2, !tbaa !401
  %7766 = add nuw nsw i32 %blur_y.s0.x.x.rebased552, 1
  %.not2537 = icmp eq i32 %7766, %t1639
  br i1 %.not2537, label %"end for blur_y.s0.x.x.rebased551", label %"for blur_y.s0.x.x.rebased550"

after_bb559:                                      ; preds = %"end for blur_y.s0.x.x.rebased551", %"produce blur_x562"
  br i1 %99, label %"for blur_y.s0.x.x.rebased564.preheader", label %"end for blur_y.s0.x.x.rebased565", !prof !386

"for blur_y.s0.x.x.rebased564.preheader":         ; preds = %after_bb559
  %7767 = sext i32 %t1644 to i64
  %7768 = zext i32 %.pre-phi to i64
  %7769 = mul nsw i64 %7768, %108
  %7770 = sub nsw i64 %7769, %95
  %7771 = zext i32 %.pre-phi3250 to i64
  %7772 = mul nsw i64 %7771, %108
  %7773 = sub nsw i64 %7772, %95
  %7774 = zext i32 %.pre-phi3260 to i64
  %7775 = mul nsw i64 %7774, %108
  %7776 = sub nsw i64 %7775, %95
  %7777 = sext i32 %a26 to i64
  %7778 = add nsw i64 %7777, 23
  %7779 = mul nsw i64 %7778, %109
  %7780 = add nsw i64 %7779, %112
  br label %"for blur_y.s0.x.x.rebased564"

"produce blur_x562":                              ; preds = %"end for blur_y.s0.x.x.rebased551"
  %7781 = getelementptr inbounds i16, i16* %read_input, i64 %157
  %7782 = getelementptr inbounds i16, i16* %7781, i64 -31
  %7783 = bitcast i16* %7782 to <16 x i16>*
  %7784 = load <16 x i16>, <16 x i16>* %7783, align 2, !tbaa !396
  %7785 = getelementptr inbounds i16, i16* %7781, i64 -15
  %7786 = bitcast i16* %7785 to <16 x i16>*
  %7787 = load <16 x i16>, <16 x i16>* %7786, align 2, !tbaa !396
  %7788 = getelementptr inbounds i16, i16* %7781, i64 -30
  %7789 = bitcast i16* %7788 to <16 x i16>*
  %7790 = load <16 x i16>, <16 x i16>* %7789, align 2, !tbaa !396
  %7791 = getelementptr inbounds i16, i16* %7781, i64 -14
  %7792 = bitcast i16* %7791 to <16 x i16>*
  %7793 = load <16 x i16>, <16 x i16>* %7792, align 2, !tbaa !396
  %7794 = getelementptr inbounds i16, i16* %7781, i64 -32
  %7795 = bitcast i16* %7794 to <16 x i16>*
  %7796 = load <16 x i16>, <16 x i16>* %7795, align 2, !tbaa !396
  %7797 = getelementptr inbounds i16, i16* %7781, i64 -16
  %7798 = bitcast i16* %7797 to <16 x i16>*
  %7799 = load <16 x i16>, <16 x i16>* %7798, align 2, !tbaa !396
  %7800 = add <16 x i16> %7790, %7784
  %7801 = add <16 x i16> %7800, %7796
  %7802 = add <16 x i16> %7793, %7787
  %7803 = add <16 x i16> %7802, %7799
  %7804 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7801, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7805 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7803, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7806 = shufflevector <16 x i16> %7804, <16 x i16> %7805, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7807 = lshr <32 x i16> %7806, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7808 = shufflevector <32 x i16> %7807, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7809 = zext i32 %.pre-phi3250 to i64
  %7810 = mul nsw i64 %96, %7809
  %7811 = add nsw i64 %98, %7810
  %7812 = getelementptr inbounds i16, i16* %blur_x, i64 %7811
  %7813 = getelementptr inbounds i16, i16* %7812, i64 -32
  %7814 = bitcast i16* %7813 to <16 x i16>*
  store <16 x i16> %7808, <16 x i16>* %7814, align 2, !tbaa !399
  %7815 = shufflevector <32 x i16> %7807, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7816 = getelementptr inbounds i16, i16* %7812, i64 -16
  %7817 = bitcast i16* %7816 to <16 x i16>*
  store <16 x i16> %7815, <16 x i16>* %7817, align 2, !tbaa !399
  %7818 = zext i32 %.pre-phi to i64
  %7819 = mul nsw i64 %7818, %108
  %7820 = add nsw i64 %7819, %93
  %7821 = getelementptr inbounds i16, i16* %blur_x, i64 %7820
  %7822 = getelementptr inbounds i16, i16* %7821, i64 -32
  %7823 = bitcast i16* %7822 to <16 x i16>*
  %7824 = load <16 x i16>, <16 x i16>* %7823, align 2, !tbaa !399
  %7825 = getelementptr inbounds i16, i16* %7821, i64 -16
  %7826 = bitcast i16* %7825 to <16 x i16>*
  %7827 = load <16 x i16>, <16 x i16>* %7826, align 2, !tbaa !399
  %7828 = mul nsw i64 %7809, %108
  %7829 = add nsw i64 %7828, %93
  %7830 = getelementptr inbounds i16, i16* %blur_x, i64 %7829
  %7831 = getelementptr inbounds i16, i16* %7830, i64 -32
  %7832 = bitcast i16* %7831 to <16 x i16>*
  %7833 = load <16 x i16>, <16 x i16>* %7832, align 2, !tbaa !399
  %7834 = getelementptr inbounds i16, i16* %7830, i64 -16
  %7835 = bitcast i16* %7834 to <16 x i16>*
  %7836 = load <16 x i16>, <16 x i16>* %7835, align 2, !tbaa !399
  %7837 = zext i32 %.pre-phi3260 to i64
  %7838 = mul nsw i64 %7837, %108
  %7839 = add nsw i64 %7838, %93
  %7840 = getelementptr inbounds i16, i16* %blur_x, i64 %7839
  %7841 = getelementptr inbounds i16, i16* %7840, i64 -32
  %7842 = bitcast i16* %7841 to <16 x i16>*
  %7843 = load <16 x i16>, <16 x i16>* %7842, align 2, !tbaa !399
  %7844 = getelementptr inbounds i16, i16* %7840, i64 -16
  %7845 = bitcast i16* %7844 to <16 x i16>*
  %7846 = load <16 x i16>, <16 x i16>* %7845, align 2, !tbaa !399
  %7847 = add <16 x i16> %7833, %7824
  %7848 = add <16 x i16> %7847, %7843
  %7849 = add <16 x i16> %7836, %7827
  %7850 = add <16 x i16> %7849, %7846
  %7851 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7848, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7852 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7850, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7853 = shufflevector <16 x i16> %7851, <16 x i16> %7852, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7854 = lshr <32 x i16> %7853, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7855 = shufflevector <32 x i16> %7854, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7856 = sext i32 %a26 to i64
  %7857 = add nsw i64 %7856, 23
  %7858 = mul nsw i64 %7857, %109
  %7859 = add nsw i64 %111, %7858
  %7860 = getelementptr inbounds i16, i16* %65, i64 %7859
  %7861 = getelementptr inbounds i16, i16* %7860, i64 -32
  %7862 = bitcast i16* %7861 to <16 x i16>*
  store <16 x i16> %7855, <16 x i16>* %7862, align 2, !tbaa !401
  %7863 = shufflevector <32 x i16> %7854, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7864 = getelementptr inbounds i16, i16* %7860, i64 -16
  %7865 = bitcast i16* %7864 to <16 x i16>*
  store <16 x i16> %7863, <16 x i16>* %7865, align 2, !tbaa !401
  br label %after_bb559

"for blur_y.s0.x.x.rebased564":                   ; preds = %"for blur_y.s0.x.x.rebased564.preheader", %"consume blur_x571"
  %indvars.iv3102 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased564.preheader" ], [ %indvars.iv.next3103, %"consume blur_x571" ]
  %7866 = add nsw i64 %indvars.iv3102, %100
  %7867 = icmp slt i64 %7866, 1
  %7868 = trunc i64 %7866 to i32
  %7869 = shl nsw i32 %7868, 5
  %7870 = icmp sgt i32 %4, %7869
  %7871 = or i1 %7867, %7870
  br i1 %7871, label %"produce blur_x570", label %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge"

"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased564"
  %.pre3305 = shl nsw i64 %7866, 5
  br label %"consume blur_x571"

"end for blur_y.s0.x.x.rebased565":               ; preds = %"consume blur_x571", %after_bb559
  br i1 %101, label %"for blur_y.s0.x.x.rebased572.preheader", label %"end for blur_y.s0.x.x.rebased573", !prof !386

"for blur_y.s0.x.x.rebased572.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased565"
  %7872 = sext i32 %t1644 to i64
  %7873 = zext i32 %.pre-phi to i64
  %7874 = mul nsw i64 %7873, %108
  %7875 = sub nsw i64 %7874, %95
  %7876 = zext i32 %.pre-phi3250 to i64
  %7877 = mul nsw i64 %7876, %108
  %7878 = sub nsw i64 %7877, %95
  %7879 = zext i32 %.pre-phi3260 to i64
  %7880 = mul nsw i64 %7879, %108
  %7881 = sub nsw i64 %7880, %95
  %7882 = sext i32 %a26 to i64
  %7883 = add nsw i64 %7882, 23
  %7884 = mul nsw i64 %7883, %109
  %7885 = add nsw i64 %7884, %112
  br label %"for blur_y.s0.x.x.rebased572"

"produce blur_x570":                              ; preds = %"for blur_y.s0.x.x.rebased564"
  %t1040 = add nsw i32 %7869, %t2017
  %7886 = sext i32 %t1040 to i64
  %7887 = getelementptr inbounds i16, i16* %read_input, i64 %7886
  %7888 = getelementptr inbounds i16, i16* %7887, i64 1
  %7889 = bitcast i16* %7888 to <16 x i16>*
  %7890 = load <16 x i16>, <16 x i16>* %7889, align 2, !tbaa !396
  %7891 = getelementptr inbounds i16, i16* %7887, i64 17
  %7892 = bitcast i16* %7891 to <16 x i16>*
  %7893 = load <16 x i16>, <16 x i16>* %7892, align 2, !tbaa !396
  %7894 = getelementptr inbounds i16, i16* %7887, i64 2
  %7895 = bitcast i16* %7894 to <16 x i16>*
  %7896 = load <16 x i16>, <16 x i16>* %7895, align 2, !tbaa !396
  %7897 = getelementptr inbounds i16, i16* %7887, i64 18
  %7898 = bitcast i16* %7897 to <16 x i16>*
  %7899 = load <16 x i16>, <16 x i16>* %7898, align 2, !tbaa !396
  %7900 = bitcast i16* %7887 to <16 x i16>*
  %7901 = load <16 x i16>, <16 x i16>* %7900, align 2, !tbaa !396
  %7902 = getelementptr inbounds i16, i16* %7887, i64 16
  %7903 = bitcast i16* %7902 to <16 x i16>*
  %7904 = load <16 x i16>, <16 x i16>* %7903, align 2, !tbaa !396
  %7905 = add <16 x i16> %7896, %7890
  %7906 = add <16 x i16> %7905, %7901
  %7907 = add <16 x i16> %7899, %7893
  %7908 = add <16 x i16> %7907, %7904
  %7909 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7906, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7910 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7908, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7911 = shufflevector <16 x i16> %7909, <16 x i16> %7910, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7912 = lshr <32 x i16> %7911, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7913 = shufflevector <32 x i16> %7912, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7914 = shl nsw i64 %7866, 5
  %7915 = add nsw i64 %7914, %7767
  %7916 = getelementptr inbounds i16, i16* %blur_x, i64 %7915
  %7917 = bitcast i16* %7916 to <16 x i16>*
  store <16 x i16> %7913, <16 x i16>* %7917, align 2, !tbaa !399
  %7918 = shufflevector <32 x i16> %7912, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7919 = getelementptr inbounds i16, i16* %7916, i64 16
  %7920 = bitcast i16* %7919 to <16 x i16>*
  store <16 x i16> %7918, <16 x i16>* %7920, align 2, !tbaa !399
  br label %"consume blur_x571"

"consume blur_x571":                              ; preds = %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge", %"produce blur_x570"
  %.pre-phi3306 = phi i64 [ %.pre3305, %"for blur_y.s0.x.x.rebased564.consume blur_x571_crit_edge" ], [ %7914, %"produce blur_x570" ]
  %7921 = add nsw i64 %7770, %.pre-phi3306
  %7922 = getelementptr inbounds i16, i16* %blur_x, i64 %7921
  %7923 = bitcast i16* %7922 to <16 x i16>*
  %7924 = load <16 x i16>, <16 x i16>* %7923, align 2, !tbaa !399
  %7925 = getelementptr inbounds i16, i16* %7922, i64 16
  %7926 = bitcast i16* %7925 to <16 x i16>*
  %7927 = load <16 x i16>, <16 x i16>* %7926, align 2, !tbaa !399
  %7928 = add nsw i64 %7773, %.pre-phi3306
  %7929 = getelementptr inbounds i16, i16* %blur_x, i64 %7928
  %7930 = bitcast i16* %7929 to <16 x i16>*
  %7931 = load <16 x i16>, <16 x i16>* %7930, align 2, !tbaa !399
  %7932 = getelementptr inbounds i16, i16* %7929, i64 16
  %7933 = bitcast i16* %7932 to <16 x i16>*
  %7934 = load <16 x i16>, <16 x i16>* %7933, align 2, !tbaa !399
  %7935 = add nsw i64 %7776, %.pre-phi3306
  %7936 = getelementptr inbounds i16, i16* %blur_x, i64 %7935
  %7937 = bitcast i16* %7936 to <16 x i16>*
  %7938 = load <16 x i16>, <16 x i16>* %7937, align 2, !tbaa !399
  %7939 = getelementptr inbounds i16, i16* %7936, i64 16
  %7940 = bitcast i16* %7939 to <16 x i16>*
  %7941 = load <16 x i16>, <16 x i16>* %7940, align 2, !tbaa !399
  %7942 = add <16 x i16> %7931, %7924
  %7943 = add <16 x i16> %7942, %7938
  %7944 = add <16 x i16> %7934, %7927
  %7945 = add <16 x i16> %7944, %7941
  %7946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7943, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7947 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7945, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7948 = shufflevector <16 x i16> %7946, <16 x i16> %7947, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7949 = lshr <32 x i16> %7948, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7950 = shufflevector <32 x i16> %7949, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7951 = add nsw i64 %7780, %.pre-phi3306
  %7952 = getelementptr inbounds i16, i16* %65, i64 %7951
  %7953 = bitcast i16* %7952 to <16 x i16>*
  store <16 x i16> %7950, <16 x i16>* %7953, align 2, !tbaa !401
  %7954 = shufflevector <32 x i16> %7949, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7955 = getelementptr inbounds i16, i16* %7952, i64 16
  %7956 = bitcast i16* %7955 to <16 x i16>*
  store <16 x i16> %7954, <16 x i16>* %7956, align 2, !tbaa !401
  %indvars.iv.next3103 = add nuw nsw i64 %indvars.iv3102, 1
  %.not2536 = icmp eq i64 %indvars.iv.next3103, %180
  br i1 %.not2536, label %"end for blur_y.s0.x.x.rebased565", label %"for blur_y.s0.x.x.rebased564"

"for blur_y.s0.x.x.rebased572":                   ; preds = %"for blur_y.s0.x.x.rebased572.preheader", %"consume blur_x580"
  %blur_y.s0.x.x.rebased574 = phi i32 [ %8035, %"consume blur_x580" ], [ 0, %"for blur_y.s0.x.x.rebased572.preheader" ]
  %7957 = add nsw i32 %blur_y.s0.x.x.rebased574, %t1582
  %a252 = shl nsw i32 %7957, 5
  %7958 = icmp sgt i32 %a14, %a252
  %b258 = select i1 %7958, i32 %a252, i32 %a14
  %7959 = icmp slt i32 %7957, 1
  %7960 = icmp sgt i32 %4, %a252
  %7961 = or i1 %7959, %7960
  br i1 %7961, label %"produce blur_x578", label %"consume blur_x580"

"end for blur_y.s0.x.x.rebased573":               ; preds = %"consume blur_x580", %"end for blur_y.s0.x.x.rebased565"
  br i1 %34, label %"produce blur_x584", label %after_bb581

"produce blur_x578":                              ; preds = %"for blur_y.s0.x.x.rebased572"
  %7962 = icmp slt i32 %b258, %4
  %blur_x.s0.x.v1.base.s579 = select i1 %7962, i32 %b258, i32 %4
  %t1045 = add nsw i32 %blur_x.s0.x.v1.base.s579, %t2017
  %7963 = sext i32 %t1045 to i64
  %7964 = getelementptr inbounds i16, i16* %read_input, i64 %7963
  %7965 = getelementptr inbounds i16, i16* %7964, i64 1
  %7966 = bitcast i16* %7965 to <16 x i16>*
  %7967 = load <16 x i16>, <16 x i16>* %7966, align 2, !tbaa !396
  %7968 = getelementptr inbounds i16, i16* %7964, i64 17
  %7969 = bitcast i16* %7968 to <16 x i16>*
  %7970 = load <16 x i16>, <16 x i16>* %7969, align 2, !tbaa !396
  %7971 = getelementptr inbounds i16, i16* %7964, i64 2
  %7972 = bitcast i16* %7971 to <16 x i16>*
  %7973 = load <16 x i16>, <16 x i16>* %7972, align 2, !tbaa !396
  %7974 = getelementptr inbounds i16, i16* %7964, i64 18
  %7975 = bitcast i16* %7974 to <16 x i16>*
  %7976 = load <16 x i16>, <16 x i16>* %7975, align 2, !tbaa !396
  %7977 = bitcast i16* %7964 to <16 x i16>*
  %7978 = load <16 x i16>, <16 x i16>* %7977, align 2, !tbaa !396
  %7979 = getelementptr inbounds i16, i16* %7964, i64 16
  %7980 = bitcast i16* %7979 to <16 x i16>*
  %7981 = load <16 x i16>, <16 x i16>* %7980, align 2, !tbaa !396
  %7982 = add <16 x i16> %7973, %7967
  %7983 = add <16 x i16> %7982, %7978
  %7984 = add <16 x i16> %7976, %7970
  %7985 = add <16 x i16> %7984, %7981
  %7986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7983, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %7985, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %7988 = shufflevector <16 x i16> %7986, <16 x i16> %7987, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7989 = lshr <32 x i16> %7988, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %7990 = shufflevector <32 x i16> %7989, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %7991 = sext i32 %blur_x.s0.x.v1.base.s579 to i64
  %7992 = add nsw i64 %7991, %7872
  %7993 = getelementptr inbounds i16, i16* %blur_x, i64 %7992
  %7994 = bitcast i16* %7993 to <16 x i16>*
  store <16 x i16> %7990, <16 x i16>* %7994, align 2, !tbaa !399
  %7995 = shufflevector <32 x i16> %7989, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %7996 = getelementptr inbounds i16, i16* %7993, i64 16
  %7997 = bitcast i16* %7996 to <16 x i16>*
  store <16 x i16> %7995, <16 x i16>* %7997, align 2, !tbaa !399
  br label %"consume blur_x580"

"consume blur_x580":                              ; preds = %"for blur_y.s0.x.x.rebased572", %"produce blur_x578"
  %7998 = sext i32 %b258 to i64
  %7999 = add nsw i64 %7875, %7998
  %8000 = getelementptr inbounds i16, i16* %blur_x, i64 %7999
  %8001 = bitcast i16* %8000 to <16 x i16>*
  %8002 = load <16 x i16>, <16 x i16>* %8001, align 2, !tbaa !399
  %8003 = getelementptr inbounds i16, i16* %8000, i64 16
  %8004 = bitcast i16* %8003 to <16 x i16>*
  %8005 = load <16 x i16>, <16 x i16>* %8004, align 2, !tbaa !399
  %8006 = add nsw i64 %7878, %7998
  %8007 = getelementptr inbounds i16, i16* %blur_x, i64 %8006
  %8008 = bitcast i16* %8007 to <16 x i16>*
  %8009 = load <16 x i16>, <16 x i16>* %8008, align 2, !tbaa !399
  %8010 = getelementptr inbounds i16, i16* %8007, i64 16
  %8011 = bitcast i16* %8010 to <16 x i16>*
  %8012 = load <16 x i16>, <16 x i16>* %8011, align 2, !tbaa !399
  %8013 = add nsw i64 %7881, %7998
  %8014 = getelementptr inbounds i16, i16* %blur_x, i64 %8013
  %8015 = bitcast i16* %8014 to <16 x i16>*
  %8016 = load <16 x i16>, <16 x i16>* %8015, align 2, !tbaa !399
  %8017 = getelementptr inbounds i16, i16* %8014, i64 16
  %8018 = bitcast i16* %8017 to <16 x i16>*
  %8019 = load <16 x i16>, <16 x i16>* %8018, align 2, !tbaa !399
  %8020 = add <16 x i16> %8009, %8002
  %8021 = add <16 x i16> %8020, %8016
  %8022 = add <16 x i16> %8012, %8005
  %8023 = add <16 x i16> %8022, %8019
  %8024 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8021, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8025 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8023, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8026 = shufflevector <16 x i16> %8024, <16 x i16> %8025, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8027 = lshr <32 x i16> %8026, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8028 = shufflevector <32 x i16> %8027, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8029 = add nsw i64 %7885, %7998
  %8030 = getelementptr inbounds i16, i16* %65, i64 %8029
  %8031 = bitcast i16* %8030 to <16 x i16>*
  store <16 x i16> %8028, <16 x i16>* %8031, align 2, !tbaa !401
  %8032 = shufflevector <32 x i16> %8027, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8033 = getelementptr inbounds i16, i16* %8030, i64 16
  %8034 = bitcast i16* %8033 to <16 x i16>*
  store <16 x i16> %8032, <16 x i16>* %8034, align 2, !tbaa !401
  %8035 = add nuw nsw i32 %blur_y.s0.x.x.rebased574, 1
  %.not2535 = icmp eq i32 %8035, %t1639
  br i1 %.not2535, label %"end for blur_y.s0.x.x.rebased573", label %"for blur_y.s0.x.x.rebased572"

after_bb581:                                      ; preds = %"end for blur_y.s0.x.x.rebased573", %"produce blur_x584"
  br i1 %99, label %"for blur_y.s0.x.x.rebased586.preheader", label %"end for blur_y.s0.x.x.rebased587", !prof !386

"for blur_y.s0.x.x.rebased586.preheader":         ; preds = %after_bb581
  %8036 = sext i32 %t1650 to i64
  %8037 = zext i32 %.pre-phi3250 to i64
  %8038 = mul nsw i64 %8037, %108
  %8039 = sub nsw i64 %8038, %95
  %8040 = zext i32 %.pre-phi3254 to i64
  %8041 = mul nsw i64 %8040, %108
  %8042 = sub nsw i64 %8041, %95
  %8043 = zext i32 %.pre-phi to i64
  %8044 = mul nsw i64 %8043, %108
  %8045 = sub nsw i64 %8044, %95
  %8046 = sext i32 %a26 to i64
  %8047 = add nsw i64 %8046, 24
  %8048 = mul nsw i64 %8047, %109
  %8049 = add nsw i64 %8048, %112
  br label %"for blur_y.s0.x.x.rebased586"

"produce blur_x584":                              ; preds = %"end for blur_y.s0.x.x.rebased573"
  %8050 = getelementptr inbounds i16, i16* %read_input, i64 %159
  %8051 = getelementptr inbounds i16, i16* %8050, i64 -31
  %8052 = bitcast i16* %8051 to <16 x i16>*
  %8053 = load <16 x i16>, <16 x i16>* %8052, align 2, !tbaa !396
  %8054 = getelementptr inbounds i16, i16* %8050, i64 -15
  %8055 = bitcast i16* %8054 to <16 x i16>*
  %8056 = load <16 x i16>, <16 x i16>* %8055, align 2, !tbaa !396
  %8057 = getelementptr inbounds i16, i16* %8050, i64 -30
  %8058 = bitcast i16* %8057 to <16 x i16>*
  %8059 = load <16 x i16>, <16 x i16>* %8058, align 2, !tbaa !396
  %8060 = getelementptr inbounds i16, i16* %8050, i64 -14
  %8061 = bitcast i16* %8060 to <16 x i16>*
  %8062 = load <16 x i16>, <16 x i16>* %8061, align 2, !tbaa !396
  %8063 = getelementptr inbounds i16, i16* %8050, i64 -32
  %8064 = bitcast i16* %8063 to <16 x i16>*
  %8065 = load <16 x i16>, <16 x i16>* %8064, align 2, !tbaa !396
  %8066 = getelementptr inbounds i16, i16* %8050, i64 -16
  %8067 = bitcast i16* %8066 to <16 x i16>*
  %8068 = load <16 x i16>, <16 x i16>* %8067, align 2, !tbaa !396
  %8069 = add <16 x i16> %8059, %8053
  %8070 = add <16 x i16> %8069, %8065
  %8071 = add <16 x i16> %8062, %8056
  %8072 = add <16 x i16> %8071, %8068
  %8073 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8070, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8074 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8072, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8075 = shufflevector <16 x i16> %8073, <16 x i16> %8074, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8076 = lshr <32 x i16> %8075, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8077 = shufflevector <32 x i16> %8076, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8078 = zext i32 %.pre-phi3254 to i64
  %8079 = mul nsw i64 %96, %8078
  %8080 = add nsw i64 %98, %8079
  %8081 = getelementptr inbounds i16, i16* %blur_x, i64 %8080
  %8082 = getelementptr inbounds i16, i16* %8081, i64 -32
  %8083 = bitcast i16* %8082 to <16 x i16>*
  store <16 x i16> %8077, <16 x i16>* %8083, align 2, !tbaa !399
  %8084 = shufflevector <32 x i16> %8076, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8085 = getelementptr inbounds i16, i16* %8081, i64 -16
  %8086 = bitcast i16* %8085 to <16 x i16>*
  store <16 x i16> %8084, <16 x i16>* %8086, align 2, !tbaa !399
  %8087 = zext i32 %.pre-phi3250 to i64
  %8088 = mul nsw i64 %8087, %108
  %8089 = add nsw i64 %8088, %93
  %8090 = getelementptr inbounds i16, i16* %blur_x, i64 %8089
  %8091 = getelementptr inbounds i16, i16* %8090, i64 -32
  %8092 = bitcast i16* %8091 to <16 x i16>*
  %8093 = load <16 x i16>, <16 x i16>* %8092, align 2, !tbaa !399
  %8094 = getelementptr inbounds i16, i16* %8090, i64 -16
  %8095 = bitcast i16* %8094 to <16 x i16>*
  %8096 = load <16 x i16>, <16 x i16>* %8095, align 2, !tbaa !399
  %8097 = mul nsw i64 %8078, %108
  %8098 = add nsw i64 %8097, %93
  %8099 = getelementptr inbounds i16, i16* %blur_x, i64 %8098
  %8100 = getelementptr inbounds i16, i16* %8099, i64 -32
  %8101 = bitcast i16* %8100 to <16 x i16>*
  %8102 = load <16 x i16>, <16 x i16>* %8101, align 2, !tbaa !399
  %8103 = getelementptr inbounds i16, i16* %8099, i64 -16
  %8104 = bitcast i16* %8103 to <16 x i16>*
  %8105 = load <16 x i16>, <16 x i16>* %8104, align 2, !tbaa !399
  %8106 = zext i32 %.pre-phi to i64
  %8107 = mul nsw i64 %8106, %108
  %8108 = add nsw i64 %8107, %93
  %8109 = getelementptr inbounds i16, i16* %blur_x, i64 %8108
  %8110 = getelementptr inbounds i16, i16* %8109, i64 -32
  %8111 = bitcast i16* %8110 to <16 x i16>*
  %8112 = load <16 x i16>, <16 x i16>* %8111, align 2, !tbaa !399
  %8113 = getelementptr inbounds i16, i16* %8109, i64 -16
  %8114 = bitcast i16* %8113 to <16 x i16>*
  %8115 = load <16 x i16>, <16 x i16>* %8114, align 2, !tbaa !399
  %8116 = add <16 x i16> %8102, %8093
  %8117 = add <16 x i16> %8116, %8112
  %8118 = add <16 x i16> %8105, %8096
  %8119 = add <16 x i16> %8118, %8115
  %8120 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8117, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8121 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8119, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8122 = shufflevector <16 x i16> %8120, <16 x i16> %8121, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8123 = lshr <32 x i16> %8122, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8124 = shufflevector <32 x i16> %8123, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8125 = sext i32 %a26 to i64
  %8126 = add nsw i64 %8125, 24
  %8127 = mul nsw i64 %8126, %109
  %8128 = add nsw i64 %111, %8127
  %8129 = getelementptr inbounds i16, i16* %65, i64 %8128
  %8130 = getelementptr inbounds i16, i16* %8129, i64 -32
  %8131 = bitcast i16* %8130 to <16 x i16>*
  store <16 x i16> %8124, <16 x i16>* %8131, align 2, !tbaa !401
  %8132 = shufflevector <32 x i16> %8123, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8133 = getelementptr inbounds i16, i16* %8129, i64 -16
  %8134 = bitcast i16* %8133 to <16 x i16>*
  store <16 x i16> %8132, <16 x i16>* %8134, align 2, !tbaa !401
  br label %after_bb581

"for blur_y.s0.x.x.rebased586":                   ; preds = %"for blur_y.s0.x.x.rebased586.preheader", %"consume blur_x593"
  %indvars.iv3105 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased586.preheader" ], [ %indvars.iv.next3106, %"consume blur_x593" ]
  %8135 = add nsw i64 %indvars.iv3105, %100
  %8136 = icmp slt i64 %8135, 1
  %8137 = trunc i64 %8135 to i32
  %8138 = shl nsw i32 %8137, 5
  %8139 = icmp sgt i32 %4, %8138
  %8140 = or i1 %8136, %8139
  br i1 %8140, label %"produce blur_x592", label %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge"

"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased586"
  %.pre3307 = shl nsw i64 %8135, 5
  br label %"consume blur_x593"

"end for blur_y.s0.x.x.rebased587":               ; preds = %"consume blur_x593", %after_bb581
  br i1 %101, label %"for blur_y.s0.x.x.rebased594.preheader", label %"end for blur_y.s0.x.x.rebased595", !prof !386

"for blur_y.s0.x.x.rebased594.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased587"
  %8141 = sext i32 %t1650 to i64
  %8142 = zext i32 %.pre-phi3250 to i64
  %8143 = mul nsw i64 %8142, %108
  %8144 = sub nsw i64 %8143, %95
  %8145 = zext i32 %.pre-phi3254 to i64
  %8146 = mul nsw i64 %8145, %108
  %8147 = sub nsw i64 %8146, %95
  %8148 = zext i32 %.pre-phi to i64
  %8149 = mul nsw i64 %8148, %108
  %8150 = sub nsw i64 %8149, %95
  %8151 = sext i32 %a26 to i64
  %8152 = add nsw i64 %8151, 24
  %8153 = mul nsw i64 %8152, %109
  %8154 = add nsw i64 %8153, %112
  br label %"for blur_y.s0.x.x.rebased594"

"produce blur_x592":                              ; preds = %"for blur_y.s0.x.x.rebased586"
  %t1056 = add nsw i32 %8138, %t2033
  %8155 = sext i32 %t1056 to i64
  %8156 = getelementptr inbounds i16, i16* %read_input, i64 %8155
  %8157 = getelementptr inbounds i16, i16* %8156, i64 1
  %8158 = bitcast i16* %8157 to <16 x i16>*
  %8159 = load <16 x i16>, <16 x i16>* %8158, align 2, !tbaa !396
  %8160 = getelementptr inbounds i16, i16* %8156, i64 17
  %8161 = bitcast i16* %8160 to <16 x i16>*
  %8162 = load <16 x i16>, <16 x i16>* %8161, align 2, !tbaa !396
  %8163 = getelementptr inbounds i16, i16* %8156, i64 2
  %8164 = bitcast i16* %8163 to <16 x i16>*
  %8165 = load <16 x i16>, <16 x i16>* %8164, align 2, !tbaa !396
  %8166 = getelementptr inbounds i16, i16* %8156, i64 18
  %8167 = bitcast i16* %8166 to <16 x i16>*
  %8168 = load <16 x i16>, <16 x i16>* %8167, align 2, !tbaa !396
  %8169 = bitcast i16* %8156 to <16 x i16>*
  %8170 = load <16 x i16>, <16 x i16>* %8169, align 2, !tbaa !396
  %8171 = getelementptr inbounds i16, i16* %8156, i64 16
  %8172 = bitcast i16* %8171 to <16 x i16>*
  %8173 = load <16 x i16>, <16 x i16>* %8172, align 2, !tbaa !396
  %8174 = add <16 x i16> %8165, %8159
  %8175 = add <16 x i16> %8174, %8170
  %8176 = add <16 x i16> %8168, %8162
  %8177 = add <16 x i16> %8176, %8173
  %8178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8175, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8179 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8177, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8180 = shufflevector <16 x i16> %8178, <16 x i16> %8179, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8181 = lshr <32 x i16> %8180, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8182 = shufflevector <32 x i16> %8181, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8183 = shl nsw i64 %8135, 5
  %8184 = add nsw i64 %8183, %8036
  %8185 = getelementptr inbounds i16, i16* %blur_x, i64 %8184
  %8186 = bitcast i16* %8185 to <16 x i16>*
  store <16 x i16> %8182, <16 x i16>* %8186, align 2, !tbaa !399
  %8187 = shufflevector <32 x i16> %8181, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8188 = getelementptr inbounds i16, i16* %8185, i64 16
  %8189 = bitcast i16* %8188 to <16 x i16>*
  store <16 x i16> %8187, <16 x i16>* %8189, align 2, !tbaa !399
  br label %"consume blur_x593"

"consume blur_x593":                              ; preds = %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge", %"produce blur_x592"
  %.pre-phi3308 = phi i64 [ %.pre3307, %"for blur_y.s0.x.x.rebased586.consume blur_x593_crit_edge" ], [ %8183, %"produce blur_x592" ]
  %8190 = add nsw i64 %8039, %.pre-phi3308
  %8191 = getelementptr inbounds i16, i16* %blur_x, i64 %8190
  %8192 = bitcast i16* %8191 to <16 x i16>*
  %8193 = load <16 x i16>, <16 x i16>* %8192, align 2, !tbaa !399
  %8194 = getelementptr inbounds i16, i16* %8191, i64 16
  %8195 = bitcast i16* %8194 to <16 x i16>*
  %8196 = load <16 x i16>, <16 x i16>* %8195, align 2, !tbaa !399
  %8197 = add nsw i64 %8042, %.pre-phi3308
  %8198 = getelementptr inbounds i16, i16* %blur_x, i64 %8197
  %8199 = bitcast i16* %8198 to <16 x i16>*
  %8200 = load <16 x i16>, <16 x i16>* %8199, align 2, !tbaa !399
  %8201 = getelementptr inbounds i16, i16* %8198, i64 16
  %8202 = bitcast i16* %8201 to <16 x i16>*
  %8203 = load <16 x i16>, <16 x i16>* %8202, align 2, !tbaa !399
  %8204 = add nsw i64 %8045, %.pre-phi3308
  %8205 = getelementptr inbounds i16, i16* %blur_x, i64 %8204
  %8206 = bitcast i16* %8205 to <16 x i16>*
  %8207 = load <16 x i16>, <16 x i16>* %8206, align 2, !tbaa !399
  %8208 = getelementptr inbounds i16, i16* %8205, i64 16
  %8209 = bitcast i16* %8208 to <16 x i16>*
  %8210 = load <16 x i16>, <16 x i16>* %8209, align 2, !tbaa !399
  %8211 = add <16 x i16> %8200, %8193
  %8212 = add <16 x i16> %8211, %8207
  %8213 = add <16 x i16> %8203, %8196
  %8214 = add <16 x i16> %8213, %8210
  %8215 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8212, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8216 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8214, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8217 = shufflevector <16 x i16> %8215, <16 x i16> %8216, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8218 = lshr <32 x i16> %8217, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8219 = shufflevector <32 x i16> %8218, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8220 = add nsw i64 %8049, %.pre-phi3308
  %8221 = getelementptr inbounds i16, i16* %65, i64 %8220
  %8222 = bitcast i16* %8221 to <16 x i16>*
  store <16 x i16> %8219, <16 x i16>* %8222, align 2, !tbaa !401
  %8223 = shufflevector <32 x i16> %8218, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8224 = getelementptr inbounds i16, i16* %8221, i64 16
  %8225 = bitcast i16* %8224 to <16 x i16>*
  store <16 x i16> %8223, <16 x i16>* %8225, align 2, !tbaa !401
  %indvars.iv.next3106 = add nuw nsw i64 %indvars.iv3105, 1
  %.not2534 = icmp eq i64 %indvars.iv.next3106, %180
  br i1 %.not2534, label %"end for blur_y.s0.x.x.rebased587", label %"for blur_y.s0.x.x.rebased586"

"for blur_y.s0.x.x.rebased594":                   ; preds = %"for blur_y.s0.x.x.rebased594.preheader", %"consume blur_x602"
  %blur_y.s0.x.x.rebased596 = phi i32 [ %8304, %"consume blur_x602" ], [ 0, %"for blur_y.s0.x.x.rebased594.preheader" ]
  %8226 = add nsw i32 %blur_y.s0.x.x.rebased596, %t1582
  %a259 = shl nsw i32 %8226, 5
  %8227 = icmp sgt i32 %a14, %a259
  %b265 = select i1 %8227, i32 %a259, i32 %a14
  %8228 = icmp slt i32 %8226, 1
  %8229 = icmp sgt i32 %4, %a259
  %8230 = or i1 %8228, %8229
  br i1 %8230, label %"produce blur_x600", label %"consume blur_x602"

"end for blur_y.s0.x.x.rebased595":               ; preds = %"consume blur_x602", %"end for blur_y.s0.x.x.rebased587"
  br i1 %34, label %"produce blur_x606", label %after_bb603

"produce blur_x600":                              ; preds = %"for blur_y.s0.x.x.rebased594"
  %8231 = icmp slt i32 %b265, %4
  %blur_x.s0.x.v1.base.s601 = select i1 %8231, i32 %b265, i32 %4
  %t1061 = add nsw i32 %blur_x.s0.x.v1.base.s601, %t2033
  %8232 = sext i32 %t1061 to i64
  %8233 = getelementptr inbounds i16, i16* %read_input, i64 %8232
  %8234 = getelementptr inbounds i16, i16* %8233, i64 1
  %8235 = bitcast i16* %8234 to <16 x i16>*
  %8236 = load <16 x i16>, <16 x i16>* %8235, align 2, !tbaa !396
  %8237 = getelementptr inbounds i16, i16* %8233, i64 17
  %8238 = bitcast i16* %8237 to <16 x i16>*
  %8239 = load <16 x i16>, <16 x i16>* %8238, align 2, !tbaa !396
  %8240 = getelementptr inbounds i16, i16* %8233, i64 2
  %8241 = bitcast i16* %8240 to <16 x i16>*
  %8242 = load <16 x i16>, <16 x i16>* %8241, align 2, !tbaa !396
  %8243 = getelementptr inbounds i16, i16* %8233, i64 18
  %8244 = bitcast i16* %8243 to <16 x i16>*
  %8245 = load <16 x i16>, <16 x i16>* %8244, align 2, !tbaa !396
  %8246 = bitcast i16* %8233 to <16 x i16>*
  %8247 = load <16 x i16>, <16 x i16>* %8246, align 2, !tbaa !396
  %8248 = getelementptr inbounds i16, i16* %8233, i64 16
  %8249 = bitcast i16* %8248 to <16 x i16>*
  %8250 = load <16 x i16>, <16 x i16>* %8249, align 2, !tbaa !396
  %8251 = add <16 x i16> %8242, %8236
  %8252 = add <16 x i16> %8251, %8247
  %8253 = add <16 x i16> %8245, %8239
  %8254 = add <16 x i16> %8253, %8250
  %8255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8252, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8254, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8257 = shufflevector <16 x i16> %8255, <16 x i16> %8256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8258 = lshr <32 x i16> %8257, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8259 = shufflevector <32 x i16> %8258, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8260 = sext i32 %blur_x.s0.x.v1.base.s601 to i64
  %8261 = add nsw i64 %8260, %8141
  %8262 = getelementptr inbounds i16, i16* %blur_x, i64 %8261
  %8263 = bitcast i16* %8262 to <16 x i16>*
  store <16 x i16> %8259, <16 x i16>* %8263, align 2, !tbaa !399
  %8264 = shufflevector <32 x i16> %8258, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8265 = getelementptr inbounds i16, i16* %8262, i64 16
  %8266 = bitcast i16* %8265 to <16 x i16>*
  store <16 x i16> %8264, <16 x i16>* %8266, align 2, !tbaa !399
  br label %"consume blur_x602"

"consume blur_x602":                              ; preds = %"for blur_y.s0.x.x.rebased594", %"produce blur_x600"
  %8267 = sext i32 %b265 to i64
  %8268 = add nsw i64 %8144, %8267
  %8269 = getelementptr inbounds i16, i16* %blur_x, i64 %8268
  %8270 = bitcast i16* %8269 to <16 x i16>*
  %8271 = load <16 x i16>, <16 x i16>* %8270, align 2, !tbaa !399
  %8272 = getelementptr inbounds i16, i16* %8269, i64 16
  %8273 = bitcast i16* %8272 to <16 x i16>*
  %8274 = load <16 x i16>, <16 x i16>* %8273, align 2, !tbaa !399
  %8275 = add nsw i64 %8147, %8267
  %8276 = getelementptr inbounds i16, i16* %blur_x, i64 %8275
  %8277 = bitcast i16* %8276 to <16 x i16>*
  %8278 = load <16 x i16>, <16 x i16>* %8277, align 2, !tbaa !399
  %8279 = getelementptr inbounds i16, i16* %8276, i64 16
  %8280 = bitcast i16* %8279 to <16 x i16>*
  %8281 = load <16 x i16>, <16 x i16>* %8280, align 2, !tbaa !399
  %8282 = add nsw i64 %8150, %8267
  %8283 = getelementptr inbounds i16, i16* %blur_x, i64 %8282
  %8284 = bitcast i16* %8283 to <16 x i16>*
  %8285 = load <16 x i16>, <16 x i16>* %8284, align 2, !tbaa !399
  %8286 = getelementptr inbounds i16, i16* %8283, i64 16
  %8287 = bitcast i16* %8286 to <16 x i16>*
  %8288 = load <16 x i16>, <16 x i16>* %8287, align 2, !tbaa !399
  %8289 = add <16 x i16> %8278, %8271
  %8290 = add <16 x i16> %8289, %8285
  %8291 = add <16 x i16> %8281, %8274
  %8292 = add <16 x i16> %8291, %8288
  %8293 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8290, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8294 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8292, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8295 = shufflevector <16 x i16> %8293, <16 x i16> %8294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8296 = lshr <32 x i16> %8295, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8297 = shufflevector <32 x i16> %8296, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8298 = add nsw i64 %8154, %8267
  %8299 = getelementptr inbounds i16, i16* %65, i64 %8298
  %8300 = bitcast i16* %8299 to <16 x i16>*
  store <16 x i16> %8297, <16 x i16>* %8300, align 2, !tbaa !401
  %8301 = shufflevector <32 x i16> %8296, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8302 = getelementptr inbounds i16, i16* %8299, i64 16
  %8303 = bitcast i16* %8302 to <16 x i16>*
  store <16 x i16> %8301, <16 x i16>* %8303, align 2, !tbaa !401
  %8304 = add nuw nsw i32 %blur_y.s0.x.x.rebased596, 1
  %.not2533 = icmp eq i32 %8304, %t1639
  br i1 %.not2533, label %"end for blur_y.s0.x.x.rebased595", label %"for blur_y.s0.x.x.rebased594"

after_bb603:                                      ; preds = %"end for blur_y.s0.x.x.rebased595", %"produce blur_x606"
  br i1 %99, label %"for blur_y.s0.x.x.rebased608.preheader", label %"end for blur_y.s0.x.x.rebased609", !prof !386

"for blur_y.s0.x.x.rebased608.preheader":         ; preds = %after_bb603
  %8305 = sext i32 %t1666 to i64
  %8306 = zext i32 %.pre-phi3254 to i64
  %8307 = mul nsw i64 %8306, %108
  %8308 = sub nsw i64 %8307, %95
  %8309 = zext i32 %.pre-phi3260 to i64
  %8310 = mul nsw i64 %8309, %108
  %8311 = sub nsw i64 %8310, %95
  %8312 = zext i32 %.pre-phi3250 to i64
  %8313 = mul nsw i64 %8312, %108
  %8314 = sub nsw i64 %8313, %95
  %8315 = sext i32 %a26 to i64
  %8316 = add nsw i64 %8315, 25
  %8317 = mul nsw i64 %8316, %109
  %8318 = add nsw i64 %8317, %112
  br label %"for blur_y.s0.x.x.rebased608"

"produce blur_x606":                              ; preds = %"end for blur_y.s0.x.x.rebased595"
  %8319 = getelementptr inbounds i16, i16* %read_input, i64 %161
  %8320 = getelementptr inbounds i16, i16* %8319, i64 -31
  %8321 = bitcast i16* %8320 to <16 x i16>*
  %8322 = load <16 x i16>, <16 x i16>* %8321, align 2, !tbaa !396
  %8323 = getelementptr inbounds i16, i16* %8319, i64 -15
  %8324 = bitcast i16* %8323 to <16 x i16>*
  %8325 = load <16 x i16>, <16 x i16>* %8324, align 2, !tbaa !396
  %8326 = getelementptr inbounds i16, i16* %8319, i64 -30
  %8327 = bitcast i16* %8326 to <16 x i16>*
  %8328 = load <16 x i16>, <16 x i16>* %8327, align 2, !tbaa !396
  %8329 = getelementptr inbounds i16, i16* %8319, i64 -14
  %8330 = bitcast i16* %8329 to <16 x i16>*
  %8331 = load <16 x i16>, <16 x i16>* %8330, align 2, !tbaa !396
  %8332 = getelementptr inbounds i16, i16* %8319, i64 -32
  %8333 = bitcast i16* %8332 to <16 x i16>*
  %8334 = load <16 x i16>, <16 x i16>* %8333, align 2, !tbaa !396
  %8335 = getelementptr inbounds i16, i16* %8319, i64 -16
  %8336 = bitcast i16* %8335 to <16 x i16>*
  %8337 = load <16 x i16>, <16 x i16>* %8336, align 2, !tbaa !396
  %8338 = add <16 x i16> %8328, %8322
  %8339 = add <16 x i16> %8338, %8334
  %8340 = add <16 x i16> %8331, %8325
  %8341 = add <16 x i16> %8340, %8337
  %8342 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8339, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8343 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8341, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8344 = shufflevector <16 x i16> %8342, <16 x i16> %8343, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8345 = lshr <32 x i16> %8344, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8346 = shufflevector <32 x i16> %8345, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8347 = zext i32 %.pre-phi3260 to i64
  %8348 = mul nsw i64 %96, %8347
  %8349 = add nsw i64 %98, %8348
  %8350 = getelementptr inbounds i16, i16* %blur_x, i64 %8349
  %8351 = getelementptr inbounds i16, i16* %8350, i64 -32
  %8352 = bitcast i16* %8351 to <16 x i16>*
  store <16 x i16> %8346, <16 x i16>* %8352, align 2, !tbaa !399
  %8353 = shufflevector <32 x i16> %8345, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8354 = getelementptr inbounds i16, i16* %8350, i64 -16
  %8355 = bitcast i16* %8354 to <16 x i16>*
  store <16 x i16> %8353, <16 x i16>* %8355, align 2, !tbaa !399
  %8356 = zext i32 %.pre-phi3254 to i64
  %8357 = mul nsw i64 %8356, %108
  %8358 = add nsw i64 %8357, %93
  %8359 = getelementptr inbounds i16, i16* %blur_x, i64 %8358
  %8360 = getelementptr inbounds i16, i16* %8359, i64 -32
  %8361 = bitcast i16* %8360 to <16 x i16>*
  %8362 = load <16 x i16>, <16 x i16>* %8361, align 2, !tbaa !399
  %8363 = getelementptr inbounds i16, i16* %8359, i64 -16
  %8364 = bitcast i16* %8363 to <16 x i16>*
  %8365 = load <16 x i16>, <16 x i16>* %8364, align 2, !tbaa !399
  %8366 = mul nsw i64 %8347, %108
  %8367 = add nsw i64 %8366, %93
  %8368 = getelementptr inbounds i16, i16* %blur_x, i64 %8367
  %8369 = getelementptr inbounds i16, i16* %8368, i64 -32
  %8370 = bitcast i16* %8369 to <16 x i16>*
  %8371 = load <16 x i16>, <16 x i16>* %8370, align 2, !tbaa !399
  %8372 = getelementptr inbounds i16, i16* %8368, i64 -16
  %8373 = bitcast i16* %8372 to <16 x i16>*
  %8374 = load <16 x i16>, <16 x i16>* %8373, align 2, !tbaa !399
  %8375 = zext i32 %.pre-phi3250 to i64
  %8376 = mul nsw i64 %8375, %108
  %8377 = add nsw i64 %8376, %93
  %8378 = getelementptr inbounds i16, i16* %blur_x, i64 %8377
  %8379 = getelementptr inbounds i16, i16* %8378, i64 -32
  %8380 = bitcast i16* %8379 to <16 x i16>*
  %8381 = load <16 x i16>, <16 x i16>* %8380, align 2, !tbaa !399
  %8382 = getelementptr inbounds i16, i16* %8378, i64 -16
  %8383 = bitcast i16* %8382 to <16 x i16>*
  %8384 = load <16 x i16>, <16 x i16>* %8383, align 2, !tbaa !399
  %8385 = add <16 x i16> %8371, %8362
  %8386 = add <16 x i16> %8385, %8381
  %8387 = add <16 x i16> %8374, %8365
  %8388 = add <16 x i16> %8387, %8384
  %8389 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8386, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8390 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8388, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8391 = shufflevector <16 x i16> %8389, <16 x i16> %8390, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8392 = lshr <32 x i16> %8391, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8393 = shufflevector <32 x i16> %8392, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8394 = sext i32 %a26 to i64
  %8395 = add nsw i64 %8394, 25
  %8396 = mul nsw i64 %8395, %109
  %8397 = add nsw i64 %111, %8396
  %8398 = getelementptr inbounds i16, i16* %65, i64 %8397
  %8399 = getelementptr inbounds i16, i16* %8398, i64 -32
  %8400 = bitcast i16* %8399 to <16 x i16>*
  store <16 x i16> %8393, <16 x i16>* %8400, align 2, !tbaa !401
  %8401 = shufflevector <32 x i16> %8392, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8402 = getelementptr inbounds i16, i16* %8398, i64 -16
  %8403 = bitcast i16* %8402 to <16 x i16>*
  store <16 x i16> %8401, <16 x i16>* %8403, align 2, !tbaa !401
  br label %after_bb603

"for blur_y.s0.x.x.rebased608":                   ; preds = %"for blur_y.s0.x.x.rebased608.preheader", %"consume blur_x615"
  %indvars.iv3108 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased608.preheader" ], [ %indvars.iv.next3109, %"consume blur_x615" ]
  %8404 = add nsw i64 %indvars.iv3108, %100
  %8405 = icmp slt i64 %8404, 1
  %8406 = trunc i64 %8404 to i32
  %8407 = shl nsw i32 %8406, 5
  %8408 = icmp sgt i32 %4, %8407
  %8409 = or i1 %8405, %8408
  br i1 %8409, label %"produce blur_x614", label %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge"

"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased608"
  %.pre3309 = shl nsw i64 %8404, 5
  br label %"consume blur_x615"

"end for blur_y.s0.x.x.rebased609":               ; preds = %"consume blur_x615", %after_bb603
  br i1 %101, label %"for blur_y.s0.x.x.rebased616.preheader", label %"end for blur_y.s0.x.x.rebased617", !prof !386

"for blur_y.s0.x.x.rebased616.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased609"
  %8410 = sext i32 %t1666 to i64
  %8411 = zext i32 %.pre-phi3254 to i64
  %8412 = mul nsw i64 %8411, %108
  %8413 = sub nsw i64 %8412, %95
  %8414 = zext i32 %.pre-phi3260 to i64
  %8415 = mul nsw i64 %8414, %108
  %8416 = sub nsw i64 %8415, %95
  %8417 = zext i32 %.pre-phi3250 to i64
  %8418 = mul nsw i64 %8417, %108
  %8419 = sub nsw i64 %8418, %95
  %8420 = sext i32 %a26 to i64
  %8421 = add nsw i64 %8420, 25
  %8422 = mul nsw i64 %8421, %109
  %8423 = add nsw i64 %8422, %112
  br label %"for blur_y.s0.x.x.rebased616"

"produce blur_x614":                              ; preds = %"for blur_y.s0.x.x.rebased608"
  %t1072 = add nsw i32 %8407, %t2049
  %8424 = sext i32 %t1072 to i64
  %8425 = getelementptr inbounds i16, i16* %read_input, i64 %8424
  %8426 = getelementptr inbounds i16, i16* %8425, i64 1
  %8427 = bitcast i16* %8426 to <16 x i16>*
  %8428 = load <16 x i16>, <16 x i16>* %8427, align 2, !tbaa !396
  %8429 = getelementptr inbounds i16, i16* %8425, i64 17
  %8430 = bitcast i16* %8429 to <16 x i16>*
  %8431 = load <16 x i16>, <16 x i16>* %8430, align 2, !tbaa !396
  %8432 = getelementptr inbounds i16, i16* %8425, i64 2
  %8433 = bitcast i16* %8432 to <16 x i16>*
  %8434 = load <16 x i16>, <16 x i16>* %8433, align 2, !tbaa !396
  %8435 = getelementptr inbounds i16, i16* %8425, i64 18
  %8436 = bitcast i16* %8435 to <16 x i16>*
  %8437 = load <16 x i16>, <16 x i16>* %8436, align 2, !tbaa !396
  %8438 = bitcast i16* %8425 to <16 x i16>*
  %8439 = load <16 x i16>, <16 x i16>* %8438, align 2, !tbaa !396
  %8440 = getelementptr inbounds i16, i16* %8425, i64 16
  %8441 = bitcast i16* %8440 to <16 x i16>*
  %8442 = load <16 x i16>, <16 x i16>* %8441, align 2, !tbaa !396
  %8443 = add <16 x i16> %8434, %8428
  %8444 = add <16 x i16> %8443, %8439
  %8445 = add <16 x i16> %8437, %8431
  %8446 = add <16 x i16> %8445, %8442
  %8447 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8444, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8448 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8446, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8449 = shufflevector <16 x i16> %8447, <16 x i16> %8448, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8450 = lshr <32 x i16> %8449, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8451 = shufflevector <32 x i16> %8450, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8452 = shl nsw i64 %8404, 5
  %8453 = add nsw i64 %8452, %8305
  %8454 = getelementptr inbounds i16, i16* %blur_x, i64 %8453
  %8455 = bitcast i16* %8454 to <16 x i16>*
  store <16 x i16> %8451, <16 x i16>* %8455, align 2, !tbaa !399
  %8456 = shufflevector <32 x i16> %8450, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8457 = getelementptr inbounds i16, i16* %8454, i64 16
  %8458 = bitcast i16* %8457 to <16 x i16>*
  store <16 x i16> %8456, <16 x i16>* %8458, align 2, !tbaa !399
  br label %"consume blur_x615"

"consume blur_x615":                              ; preds = %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge", %"produce blur_x614"
  %.pre-phi3310 = phi i64 [ %.pre3309, %"for blur_y.s0.x.x.rebased608.consume blur_x615_crit_edge" ], [ %8452, %"produce blur_x614" ]
  %8459 = add nsw i64 %8308, %.pre-phi3310
  %8460 = getelementptr inbounds i16, i16* %blur_x, i64 %8459
  %8461 = bitcast i16* %8460 to <16 x i16>*
  %8462 = load <16 x i16>, <16 x i16>* %8461, align 2, !tbaa !399
  %8463 = getelementptr inbounds i16, i16* %8460, i64 16
  %8464 = bitcast i16* %8463 to <16 x i16>*
  %8465 = load <16 x i16>, <16 x i16>* %8464, align 2, !tbaa !399
  %8466 = add nsw i64 %8311, %.pre-phi3310
  %8467 = getelementptr inbounds i16, i16* %blur_x, i64 %8466
  %8468 = bitcast i16* %8467 to <16 x i16>*
  %8469 = load <16 x i16>, <16 x i16>* %8468, align 2, !tbaa !399
  %8470 = getelementptr inbounds i16, i16* %8467, i64 16
  %8471 = bitcast i16* %8470 to <16 x i16>*
  %8472 = load <16 x i16>, <16 x i16>* %8471, align 2, !tbaa !399
  %8473 = add nsw i64 %8314, %.pre-phi3310
  %8474 = getelementptr inbounds i16, i16* %blur_x, i64 %8473
  %8475 = bitcast i16* %8474 to <16 x i16>*
  %8476 = load <16 x i16>, <16 x i16>* %8475, align 2, !tbaa !399
  %8477 = getelementptr inbounds i16, i16* %8474, i64 16
  %8478 = bitcast i16* %8477 to <16 x i16>*
  %8479 = load <16 x i16>, <16 x i16>* %8478, align 2, !tbaa !399
  %8480 = add <16 x i16> %8469, %8462
  %8481 = add <16 x i16> %8480, %8476
  %8482 = add <16 x i16> %8472, %8465
  %8483 = add <16 x i16> %8482, %8479
  %8484 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8481, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8485 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8483, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8486 = shufflevector <16 x i16> %8484, <16 x i16> %8485, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8487 = lshr <32 x i16> %8486, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8488 = shufflevector <32 x i16> %8487, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8489 = add nsw i64 %8318, %.pre-phi3310
  %8490 = getelementptr inbounds i16, i16* %65, i64 %8489
  %8491 = bitcast i16* %8490 to <16 x i16>*
  store <16 x i16> %8488, <16 x i16>* %8491, align 2, !tbaa !401
  %8492 = shufflevector <32 x i16> %8487, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8493 = getelementptr inbounds i16, i16* %8490, i64 16
  %8494 = bitcast i16* %8493 to <16 x i16>*
  store <16 x i16> %8492, <16 x i16>* %8494, align 2, !tbaa !401
  %indvars.iv.next3109 = add nuw nsw i64 %indvars.iv3108, 1
  %.not2532 = icmp eq i64 %indvars.iv.next3109, %180
  br i1 %.not2532, label %"end for blur_y.s0.x.x.rebased609", label %"for blur_y.s0.x.x.rebased608"

"for blur_y.s0.x.x.rebased616":                   ; preds = %"for blur_y.s0.x.x.rebased616.preheader", %"consume blur_x624"
  %blur_y.s0.x.x.rebased618 = phi i32 [ %8573, %"consume blur_x624" ], [ 0, %"for blur_y.s0.x.x.rebased616.preheader" ]
  %8495 = add nsw i32 %blur_y.s0.x.x.rebased618, %t1582
  %a266 = shl nsw i32 %8495, 5
  %8496 = icmp sgt i32 %a14, %a266
  %b272 = select i1 %8496, i32 %a266, i32 %a14
  %8497 = icmp slt i32 %8495, 1
  %8498 = icmp sgt i32 %4, %a266
  %8499 = or i1 %8497, %8498
  br i1 %8499, label %"produce blur_x622", label %"consume blur_x624"

"end for blur_y.s0.x.x.rebased617":               ; preds = %"consume blur_x624", %"end for blur_y.s0.x.x.rebased609"
  br i1 %34, label %"produce blur_x628", label %after_bb625

"produce blur_x622":                              ; preds = %"for blur_y.s0.x.x.rebased616"
  %8500 = icmp slt i32 %b272, %4
  %blur_x.s0.x.v1.base.s623 = select i1 %8500, i32 %b272, i32 %4
  %t1077 = add nsw i32 %blur_x.s0.x.v1.base.s623, %t2049
  %8501 = sext i32 %t1077 to i64
  %8502 = getelementptr inbounds i16, i16* %read_input, i64 %8501
  %8503 = getelementptr inbounds i16, i16* %8502, i64 1
  %8504 = bitcast i16* %8503 to <16 x i16>*
  %8505 = load <16 x i16>, <16 x i16>* %8504, align 2, !tbaa !396
  %8506 = getelementptr inbounds i16, i16* %8502, i64 17
  %8507 = bitcast i16* %8506 to <16 x i16>*
  %8508 = load <16 x i16>, <16 x i16>* %8507, align 2, !tbaa !396
  %8509 = getelementptr inbounds i16, i16* %8502, i64 2
  %8510 = bitcast i16* %8509 to <16 x i16>*
  %8511 = load <16 x i16>, <16 x i16>* %8510, align 2, !tbaa !396
  %8512 = getelementptr inbounds i16, i16* %8502, i64 18
  %8513 = bitcast i16* %8512 to <16 x i16>*
  %8514 = load <16 x i16>, <16 x i16>* %8513, align 2, !tbaa !396
  %8515 = bitcast i16* %8502 to <16 x i16>*
  %8516 = load <16 x i16>, <16 x i16>* %8515, align 2, !tbaa !396
  %8517 = getelementptr inbounds i16, i16* %8502, i64 16
  %8518 = bitcast i16* %8517 to <16 x i16>*
  %8519 = load <16 x i16>, <16 x i16>* %8518, align 2, !tbaa !396
  %8520 = add <16 x i16> %8511, %8505
  %8521 = add <16 x i16> %8520, %8516
  %8522 = add <16 x i16> %8514, %8508
  %8523 = add <16 x i16> %8522, %8519
  %8524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8521, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8523, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8526 = shufflevector <16 x i16> %8524, <16 x i16> %8525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8527 = lshr <32 x i16> %8526, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8528 = shufflevector <32 x i16> %8527, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8529 = sext i32 %blur_x.s0.x.v1.base.s623 to i64
  %8530 = add nsw i64 %8529, %8410
  %8531 = getelementptr inbounds i16, i16* %blur_x, i64 %8530
  %8532 = bitcast i16* %8531 to <16 x i16>*
  store <16 x i16> %8528, <16 x i16>* %8532, align 2, !tbaa !399
  %8533 = shufflevector <32 x i16> %8527, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8534 = getelementptr inbounds i16, i16* %8531, i64 16
  %8535 = bitcast i16* %8534 to <16 x i16>*
  store <16 x i16> %8533, <16 x i16>* %8535, align 2, !tbaa !399
  br label %"consume blur_x624"

"consume blur_x624":                              ; preds = %"for blur_y.s0.x.x.rebased616", %"produce blur_x622"
  %8536 = sext i32 %b272 to i64
  %8537 = add nsw i64 %8413, %8536
  %8538 = getelementptr inbounds i16, i16* %blur_x, i64 %8537
  %8539 = bitcast i16* %8538 to <16 x i16>*
  %8540 = load <16 x i16>, <16 x i16>* %8539, align 2, !tbaa !399
  %8541 = getelementptr inbounds i16, i16* %8538, i64 16
  %8542 = bitcast i16* %8541 to <16 x i16>*
  %8543 = load <16 x i16>, <16 x i16>* %8542, align 2, !tbaa !399
  %8544 = add nsw i64 %8416, %8536
  %8545 = getelementptr inbounds i16, i16* %blur_x, i64 %8544
  %8546 = bitcast i16* %8545 to <16 x i16>*
  %8547 = load <16 x i16>, <16 x i16>* %8546, align 2, !tbaa !399
  %8548 = getelementptr inbounds i16, i16* %8545, i64 16
  %8549 = bitcast i16* %8548 to <16 x i16>*
  %8550 = load <16 x i16>, <16 x i16>* %8549, align 2, !tbaa !399
  %8551 = add nsw i64 %8419, %8536
  %8552 = getelementptr inbounds i16, i16* %blur_x, i64 %8551
  %8553 = bitcast i16* %8552 to <16 x i16>*
  %8554 = load <16 x i16>, <16 x i16>* %8553, align 2, !tbaa !399
  %8555 = getelementptr inbounds i16, i16* %8552, i64 16
  %8556 = bitcast i16* %8555 to <16 x i16>*
  %8557 = load <16 x i16>, <16 x i16>* %8556, align 2, !tbaa !399
  %8558 = add <16 x i16> %8547, %8540
  %8559 = add <16 x i16> %8558, %8554
  %8560 = add <16 x i16> %8550, %8543
  %8561 = add <16 x i16> %8560, %8557
  %8562 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8559, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8563 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8561, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8564 = shufflevector <16 x i16> %8562, <16 x i16> %8563, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8565 = lshr <32 x i16> %8564, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8566 = shufflevector <32 x i16> %8565, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8567 = add nsw i64 %8423, %8536
  %8568 = getelementptr inbounds i16, i16* %65, i64 %8567
  %8569 = bitcast i16* %8568 to <16 x i16>*
  store <16 x i16> %8566, <16 x i16>* %8569, align 2, !tbaa !401
  %8570 = shufflevector <32 x i16> %8565, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8571 = getelementptr inbounds i16, i16* %8568, i64 16
  %8572 = bitcast i16* %8571 to <16 x i16>*
  store <16 x i16> %8570, <16 x i16>* %8572, align 2, !tbaa !401
  %8573 = add nuw nsw i32 %blur_y.s0.x.x.rebased618, 1
  %.not2531 = icmp eq i32 %8573, %t1639
  br i1 %.not2531, label %"end for blur_y.s0.x.x.rebased617", label %"for blur_y.s0.x.x.rebased616"

after_bb625:                                      ; preds = %"end for blur_y.s0.x.x.rebased617", %"produce blur_x628"
  br i1 %99, label %"for blur_y.s0.x.x.rebased630.preheader", label %"end for blur_y.s0.x.x.rebased631", !prof !386

"for blur_y.s0.x.x.rebased630.preheader":         ; preds = %after_bb625
  %8574 = sext i32 %t1638 to i64
  %8575 = zext i32 %.pre-phi3260 to i64
  %8576 = mul nsw i64 %8575, %108
  %8577 = sub nsw i64 %8576, %95
  %8578 = zext i32 %.pre-phi to i64
  %8579 = mul nsw i64 %8578, %108
  %8580 = sub nsw i64 %8579, %95
  %8581 = zext i32 %.pre-phi3254 to i64
  %8582 = mul nsw i64 %8581, %108
  %8583 = sub nsw i64 %8582, %95
  %8584 = sext i32 %a26 to i64
  %8585 = add nsw i64 %8584, 26
  %8586 = mul nsw i64 %8585, %109
  %8587 = add nsw i64 %8586, %112
  br label %"for blur_y.s0.x.x.rebased630"

"produce blur_x628":                              ; preds = %"end for blur_y.s0.x.x.rebased617"
  %8588 = getelementptr inbounds i16, i16* %read_input, i64 %163
  %8589 = getelementptr inbounds i16, i16* %8588, i64 -31
  %8590 = bitcast i16* %8589 to <16 x i16>*
  %8591 = load <16 x i16>, <16 x i16>* %8590, align 2, !tbaa !396
  %8592 = getelementptr inbounds i16, i16* %8588, i64 -15
  %8593 = bitcast i16* %8592 to <16 x i16>*
  %8594 = load <16 x i16>, <16 x i16>* %8593, align 2, !tbaa !396
  %8595 = getelementptr inbounds i16, i16* %8588, i64 -30
  %8596 = bitcast i16* %8595 to <16 x i16>*
  %8597 = load <16 x i16>, <16 x i16>* %8596, align 2, !tbaa !396
  %8598 = getelementptr inbounds i16, i16* %8588, i64 -14
  %8599 = bitcast i16* %8598 to <16 x i16>*
  %8600 = load <16 x i16>, <16 x i16>* %8599, align 2, !tbaa !396
  %8601 = getelementptr inbounds i16, i16* %8588, i64 -32
  %8602 = bitcast i16* %8601 to <16 x i16>*
  %8603 = load <16 x i16>, <16 x i16>* %8602, align 2, !tbaa !396
  %8604 = getelementptr inbounds i16, i16* %8588, i64 -16
  %8605 = bitcast i16* %8604 to <16 x i16>*
  %8606 = load <16 x i16>, <16 x i16>* %8605, align 2, !tbaa !396
  %8607 = add <16 x i16> %8597, %8591
  %8608 = add <16 x i16> %8607, %8603
  %8609 = add <16 x i16> %8600, %8594
  %8610 = add <16 x i16> %8609, %8606
  %8611 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8608, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8612 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8610, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8613 = shufflevector <16 x i16> %8611, <16 x i16> %8612, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8614 = lshr <32 x i16> %8613, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8615 = shufflevector <32 x i16> %8614, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8616 = zext i32 %.pre-phi to i64
  %8617 = mul nsw i64 %96, %8616
  %8618 = add nsw i64 %98, %8617
  %8619 = getelementptr inbounds i16, i16* %blur_x, i64 %8618
  %8620 = getelementptr inbounds i16, i16* %8619, i64 -32
  %8621 = bitcast i16* %8620 to <16 x i16>*
  store <16 x i16> %8615, <16 x i16>* %8621, align 2, !tbaa !399
  %8622 = shufflevector <32 x i16> %8614, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8623 = getelementptr inbounds i16, i16* %8619, i64 -16
  %8624 = bitcast i16* %8623 to <16 x i16>*
  store <16 x i16> %8622, <16 x i16>* %8624, align 2, !tbaa !399
  %8625 = zext i32 %.pre-phi3260 to i64
  %8626 = mul nsw i64 %8625, %108
  %8627 = add nsw i64 %8626, %93
  %8628 = getelementptr inbounds i16, i16* %blur_x, i64 %8627
  %8629 = getelementptr inbounds i16, i16* %8628, i64 -32
  %8630 = bitcast i16* %8629 to <16 x i16>*
  %8631 = load <16 x i16>, <16 x i16>* %8630, align 2, !tbaa !399
  %8632 = getelementptr inbounds i16, i16* %8628, i64 -16
  %8633 = bitcast i16* %8632 to <16 x i16>*
  %8634 = load <16 x i16>, <16 x i16>* %8633, align 2, !tbaa !399
  %8635 = mul nsw i64 %8616, %108
  %8636 = add nsw i64 %8635, %93
  %8637 = getelementptr inbounds i16, i16* %blur_x, i64 %8636
  %8638 = getelementptr inbounds i16, i16* %8637, i64 -32
  %8639 = bitcast i16* %8638 to <16 x i16>*
  %8640 = load <16 x i16>, <16 x i16>* %8639, align 2, !tbaa !399
  %8641 = getelementptr inbounds i16, i16* %8637, i64 -16
  %8642 = bitcast i16* %8641 to <16 x i16>*
  %8643 = load <16 x i16>, <16 x i16>* %8642, align 2, !tbaa !399
  %8644 = zext i32 %.pre-phi3254 to i64
  %8645 = mul nsw i64 %8644, %108
  %8646 = add nsw i64 %8645, %93
  %8647 = getelementptr inbounds i16, i16* %blur_x, i64 %8646
  %8648 = getelementptr inbounds i16, i16* %8647, i64 -32
  %8649 = bitcast i16* %8648 to <16 x i16>*
  %8650 = load <16 x i16>, <16 x i16>* %8649, align 2, !tbaa !399
  %8651 = getelementptr inbounds i16, i16* %8647, i64 -16
  %8652 = bitcast i16* %8651 to <16 x i16>*
  %8653 = load <16 x i16>, <16 x i16>* %8652, align 2, !tbaa !399
  %8654 = add <16 x i16> %8640, %8631
  %8655 = add <16 x i16> %8654, %8650
  %8656 = add <16 x i16> %8643, %8634
  %8657 = add <16 x i16> %8656, %8653
  %8658 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8655, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8659 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8657, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8660 = shufflevector <16 x i16> %8658, <16 x i16> %8659, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8661 = lshr <32 x i16> %8660, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8662 = shufflevector <32 x i16> %8661, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8663 = sext i32 %a26 to i64
  %8664 = add nsw i64 %8663, 26
  %8665 = mul nsw i64 %8664, %109
  %8666 = add nsw i64 %111, %8665
  %8667 = getelementptr inbounds i16, i16* %65, i64 %8666
  %8668 = getelementptr inbounds i16, i16* %8667, i64 -32
  %8669 = bitcast i16* %8668 to <16 x i16>*
  store <16 x i16> %8662, <16 x i16>* %8669, align 2, !tbaa !401
  %8670 = shufflevector <32 x i16> %8661, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8671 = getelementptr inbounds i16, i16* %8667, i64 -16
  %8672 = bitcast i16* %8671 to <16 x i16>*
  store <16 x i16> %8670, <16 x i16>* %8672, align 2, !tbaa !401
  br label %after_bb625

"for blur_y.s0.x.x.rebased630":                   ; preds = %"for blur_y.s0.x.x.rebased630.preheader", %"consume blur_x637"
  %indvars.iv3111 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased630.preheader" ], [ %indvars.iv.next3112, %"consume blur_x637" ]
  %8673 = add nsw i64 %indvars.iv3111, %100
  %8674 = icmp slt i64 %8673, 1
  %8675 = trunc i64 %8673 to i32
  %8676 = shl nsw i32 %8675, 5
  %8677 = icmp sgt i32 %4, %8676
  %8678 = or i1 %8674, %8677
  br i1 %8678, label %"produce blur_x636", label %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge"

"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased630"
  %.pre3311 = shl nsw i64 %8673, 5
  br label %"consume blur_x637"

"end for blur_y.s0.x.x.rebased631":               ; preds = %"consume blur_x637", %after_bb625
  br i1 %101, label %"for blur_y.s0.x.x.rebased638.preheader", label %"end for blur_y.s0.x.x.rebased639", !prof !386

"for blur_y.s0.x.x.rebased638.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased631"
  %8679 = sext i32 %t1638 to i64
  %8680 = zext i32 %.pre-phi3260 to i64
  %8681 = mul nsw i64 %8680, %108
  %8682 = sub nsw i64 %8681, %95
  %8683 = zext i32 %.pre-phi to i64
  %8684 = mul nsw i64 %8683, %108
  %8685 = sub nsw i64 %8684, %95
  %8686 = zext i32 %.pre-phi3254 to i64
  %8687 = mul nsw i64 %8686, %108
  %8688 = sub nsw i64 %8687, %95
  %8689 = sext i32 %a26 to i64
  %8690 = add nsw i64 %8689, 26
  %8691 = mul nsw i64 %8690, %109
  %8692 = add nsw i64 %8691, %112
  br label %"for blur_y.s0.x.x.rebased638"

"produce blur_x636":                              ; preds = %"for blur_y.s0.x.x.rebased630"
  %t1088 = add nsw i32 %8676, %t2065
  %8693 = sext i32 %t1088 to i64
  %8694 = getelementptr inbounds i16, i16* %read_input, i64 %8693
  %8695 = getelementptr inbounds i16, i16* %8694, i64 1
  %8696 = bitcast i16* %8695 to <16 x i16>*
  %8697 = load <16 x i16>, <16 x i16>* %8696, align 2, !tbaa !396
  %8698 = getelementptr inbounds i16, i16* %8694, i64 17
  %8699 = bitcast i16* %8698 to <16 x i16>*
  %8700 = load <16 x i16>, <16 x i16>* %8699, align 2, !tbaa !396
  %8701 = getelementptr inbounds i16, i16* %8694, i64 2
  %8702 = bitcast i16* %8701 to <16 x i16>*
  %8703 = load <16 x i16>, <16 x i16>* %8702, align 2, !tbaa !396
  %8704 = getelementptr inbounds i16, i16* %8694, i64 18
  %8705 = bitcast i16* %8704 to <16 x i16>*
  %8706 = load <16 x i16>, <16 x i16>* %8705, align 2, !tbaa !396
  %8707 = bitcast i16* %8694 to <16 x i16>*
  %8708 = load <16 x i16>, <16 x i16>* %8707, align 2, !tbaa !396
  %8709 = getelementptr inbounds i16, i16* %8694, i64 16
  %8710 = bitcast i16* %8709 to <16 x i16>*
  %8711 = load <16 x i16>, <16 x i16>* %8710, align 2, !tbaa !396
  %8712 = add <16 x i16> %8703, %8697
  %8713 = add <16 x i16> %8712, %8708
  %8714 = add <16 x i16> %8706, %8700
  %8715 = add <16 x i16> %8714, %8711
  %8716 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8713, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8717 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8715, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8718 = shufflevector <16 x i16> %8716, <16 x i16> %8717, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8719 = lshr <32 x i16> %8718, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8720 = shufflevector <32 x i16> %8719, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8721 = shl nsw i64 %8673, 5
  %8722 = add nsw i64 %8721, %8574
  %8723 = getelementptr inbounds i16, i16* %blur_x, i64 %8722
  %8724 = bitcast i16* %8723 to <16 x i16>*
  store <16 x i16> %8720, <16 x i16>* %8724, align 2, !tbaa !399
  %8725 = shufflevector <32 x i16> %8719, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8726 = getelementptr inbounds i16, i16* %8723, i64 16
  %8727 = bitcast i16* %8726 to <16 x i16>*
  store <16 x i16> %8725, <16 x i16>* %8727, align 2, !tbaa !399
  br label %"consume blur_x637"

"consume blur_x637":                              ; preds = %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge", %"produce blur_x636"
  %.pre-phi3312 = phi i64 [ %.pre3311, %"for blur_y.s0.x.x.rebased630.consume blur_x637_crit_edge" ], [ %8721, %"produce blur_x636" ]
  %8728 = add nsw i64 %8577, %.pre-phi3312
  %8729 = getelementptr inbounds i16, i16* %blur_x, i64 %8728
  %8730 = bitcast i16* %8729 to <16 x i16>*
  %8731 = load <16 x i16>, <16 x i16>* %8730, align 2, !tbaa !399
  %8732 = getelementptr inbounds i16, i16* %8729, i64 16
  %8733 = bitcast i16* %8732 to <16 x i16>*
  %8734 = load <16 x i16>, <16 x i16>* %8733, align 2, !tbaa !399
  %8735 = add nsw i64 %8580, %.pre-phi3312
  %8736 = getelementptr inbounds i16, i16* %blur_x, i64 %8735
  %8737 = bitcast i16* %8736 to <16 x i16>*
  %8738 = load <16 x i16>, <16 x i16>* %8737, align 2, !tbaa !399
  %8739 = getelementptr inbounds i16, i16* %8736, i64 16
  %8740 = bitcast i16* %8739 to <16 x i16>*
  %8741 = load <16 x i16>, <16 x i16>* %8740, align 2, !tbaa !399
  %8742 = add nsw i64 %8583, %.pre-phi3312
  %8743 = getelementptr inbounds i16, i16* %blur_x, i64 %8742
  %8744 = bitcast i16* %8743 to <16 x i16>*
  %8745 = load <16 x i16>, <16 x i16>* %8744, align 2, !tbaa !399
  %8746 = getelementptr inbounds i16, i16* %8743, i64 16
  %8747 = bitcast i16* %8746 to <16 x i16>*
  %8748 = load <16 x i16>, <16 x i16>* %8747, align 2, !tbaa !399
  %8749 = add <16 x i16> %8738, %8731
  %8750 = add <16 x i16> %8749, %8745
  %8751 = add <16 x i16> %8741, %8734
  %8752 = add <16 x i16> %8751, %8748
  %8753 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8750, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8754 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8752, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8755 = shufflevector <16 x i16> %8753, <16 x i16> %8754, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8756 = lshr <32 x i16> %8755, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8757 = shufflevector <32 x i16> %8756, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8758 = add nsw i64 %8587, %.pre-phi3312
  %8759 = getelementptr inbounds i16, i16* %65, i64 %8758
  %8760 = bitcast i16* %8759 to <16 x i16>*
  store <16 x i16> %8757, <16 x i16>* %8760, align 2, !tbaa !401
  %8761 = shufflevector <32 x i16> %8756, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8762 = getelementptr inbounds i16, i16* %8759, i64 16
  %8763 = bitcast i16* %8762 to <16 x i16>*
  store <16 x i16> %8761, <16 x i16>* %8763, align 2, !tbaa !401
  %indvars.iv.next3112 = add nuw nsw i64 %indvars.iv3111, 1
  %.not2530 = icmp eq i64 %indvars.iv.next3112, %180
  br i1 %.not2530, label %"end for blur_y.s0.x.x.rebased631", label %"for blur_y.s0.x.x.rebased630"

"for blur_y.s0.x.x.rebased638":                   ; preds = %"for blur_y.s0.x.x.rebased638.preheader", %"consume blur_x646"
  %blur_y.s0.x.x.rebased640 = phi i32 [ %8842, %"consume blur_x646" ], [ 0, %"for blur_y.s0.x.x.rebased638.preheader" ]
  %8764 = add nsw i32 %blur_y.s0.x.x.rebased640, %t1582
  %a273 = shl nsw i32 %8764, 5
  %8765 = icmp sgt i32 %a14, %a273
  %b279 = select i1 %8765, i32 %a273, i32 %a14
  %8766 = icmp slt i32 %8764, 1
  %8767 = icmp sgt i32 %4, %a273
  %8768 = or i1 %8766, %8767
  br i1 %8768, label %"produce blur_x644", label %"consume blur_x646"

"end for blur_y.s0.x.x.rebased639":               ; preds = %"consume blur_x646", %"end for blur_y.s0.x.x.rebased631"
  br i1 %34, label %"produce blur_x650", label %after_bb647

"produce blur_x644":                              ; preds = %"for blur_y.s0.x.x.rebased638"
  %8769 = icmp slt i32 %b279, %4
  %blur_x.s0.x.v1.base.s645 = select i1 %8769, i32 %b279, i32 %4
  %t1093 = add nsw i32 %blur_x.s0.x.v1.base.s645, %t2065
  %8770 = sext i32 %t1093 to i64
  %8771 = getelementptr inbounds i16, i16* %read_input, i64 %8770
  %8772 = getelementptr inbounds i16, i16* %8771, i64 1
  %8773 = bitcast i16* %8772 to <16 x i16>*
  %8774 = load <16 x i16>, <16 x i16>* %8773, align 2, !tbaa !396
  %8775 = getelementptr inbounds i16, i16* %8771, i64 17
  %8776 = bitcast i16* %8775 to <16 x i16>*
  %8777 = load <16 x i16>, <16 x i16>* %8776, align 2, !tbaa !396
  %8778 = getelementptr inbounds i16, i16* %8771, i64 2
  %8779 = bitcast i16* %8778 to <16 x i16>*
  %8780 = load <16 x i16>, <16 x i16>* %8779, align 2, !tbaa !396
  %8781 = getelementptr inbounds i16, i16* %8771, i64 18
  %8782 = bitcast i16* %8781 to <16 x i16>*
  %8783 = load <16 x i16>, <16 x i16>* %8782, align 2, !tbaa !396
  %8784 = bitcast i16* %8771 to <16 x i16>*
  %8785 = load <16 x i16>, <16 x i16>* %8784, align 2, !tbaa !396
  %8786 = getelementptr inbounds i16, i16* %8771, i64 16
  %8787 = bitcast i16* %8786 to <16 x i16>*
  %8788 = load <16 x i16>, <16 x i16>* %8787, align 2, !tbaa !396
  %8789 = add <16 x i16> %8780, %8774
  %8790 = add <16 x i16> %8789, %8785
  %8791 = add <16 x i16> %8783, %8777
  %8792 = add <16 x i16> %8791, %8788
  %8793 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8790, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8794 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8792, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8795 = shufflevector <16 x i16> %8793, <16 x i16> %8794, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8796 = lshr <32 x i16> %8795, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8797 = shufflevector <32 x i16> %8796, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8798 = sext i32 %blur_x.s0.x.v1.base.s645 to i64
  %8799 = add nsw i64 %8798, %8679
  %8800 = getelementptr inbounds i16, i16* %blur_x, i64 %8799
  %8801 = bitcast i16* %8800 to <16 x i16>*
  store <16 x i16> %8797, <16 x i16>* %8801, align 2, !tbaa !399
  %8802 = shufflevector <32 x i16> %8796, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8803 = getelementptr inbounds i16, i16* %8800, i64 16
  %8804 = bitcast i16* %8803 to <16 x i16>*
  store <16 x i16> %8802, <16 x i16>* %8804, align 2, !tbaa !399
  br label %"consume blur_x646"

"consume blur_x646":                              ; preds = %"for blur_y.s0.x.x.rebased638", %"produce blur_x644"
  %8805 = sext i32 %b279 to i64
  %8806 = add nsw i64 %8682, %8805
  %8807 = getelementptr inbounds i16, i16* %blur_x, i64 %8806
  %8808 = bitcast i16* %8807 to <16 x i16>*
  %8809 = load <16 x i16>, <16 x i16>* %8808, align 2, !tbaa !399
  %8810 = getelementptr inbounds i16, i16* %8807, i64 16
  %8811 = bitcast i16* %8810 to <16 x i16>*
  %8812 = load <16 x i16>, <16 x i16>* %8811, align 2, !tbaa !399
  %8813 = add nsw i64 %8685, %8805
  %8814 = getelementptr inbounds i16, i16* %blur_x, i64 %8813
  %8815 = bitcast i16* %8814 to <16 x i16>*
  %8816 = load <16 x i16>, <16 x i16>* %8815, align 2, !tbaa !399
  %8817 = getelementptr inbounds i16, i16* %8814, i64 16
  %8818 = bitcast i16* %8817 to <16 x i16>*
  %8819 = load <16 x i16>, <16 x i16>* %8818, align 2, !tbaa !399
  %8820 = add nsw i64 %8688, %8805
  %8821 = getelementptr inbounds i16, i16* %blur_x, i64 %8820
  %8822 = bitcast i16* %8821 to <16 x i16>*
  %8823 = load <16 x i16>, <16 x i16>* %8822, align 2, !tbaa !399
  %8824 = getelementptr inbounds i16, i16* %8821, i64 16
  %8825 = bitcast i16* %8824 to <16 x i16>*
  %8826 = load <16 x i16>, <16 x i16>* %8825, align 2, !tbaa !399
  %8827 = add <16 x i16> %8816, %8809
  %8828 = add <16 x i16> %8827, %8823
  %8829 = add <16 x i16> %8819, %8812
  %8830 = add <16 x i16> %8829, %8826
  %8831 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8828, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8832 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8830, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8833 = shufflevector <16 x i16> %8831, <16 x i16> %8832, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8834 = lshr <32 x i16> %8833, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8835 = shufflevector <32 x i16> %8834, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8836 = add nsw i64 %8692, %8805
  %8837 = getelementptr inbounds i16, i16* %65, i64 %8836
  %8838 = bitcast i16* %8837 to <16 x i16>*
  store <16 x i16> %8835, <16 x i16>* %8838, align 2, !tbaa !401
  %8839 = shufflevector <32 x i16> %8834, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8840 = getelementptr inbounds i16, i16* %8837, i64 16
  %8841 = bitcast i16* %8840 to <16 x i16>*
  store <16 x i16> %8839, <16 x i16>* %8841, align 2, !tbaa !401
  %8842 = add nuw nsw i32 %blur_y.s0.x.x.rebased640, 1
  %.not2529 = icmp eq i32 %8842, %t1639
  br i1 %.not2529, label %"end for blur_y.s0.x.x.rebased639", label %"for blur_y.s0.x.x.rebased638"

after_bb647:                                      ; preds = %"end for blur_y.s0.x.x.rebased639", %"produce blur_x650"
  br i1 %99, label %"for blur_y.s0.x.x.rebased652.preheader", label %"end for blur_y.s0.x.x.rebased653", !prof !386

"for blur_y.s0.x.x.rebased652.preheader":         ; preds = %after_bb647
  %8843 = sext i32 %t1644 to i64
  %8844 = zext i32 %.pre-phi to i64
  %8845 = mul nsw i64 %8844, %108
  %8846 = sub nsw i64 %8845, %95
  %8847 = zext i32 %.pre-phi3250 to i64
  %8848 = mul nsw i64 %8847, %108
  %8849 = sub nsw i64 %8848, %95
  %8850 = zext i32 %.pre-phi3260 to i64
  %8851 = mul nsw i64 %8850, %108
  %8852 = sub nsw i64 %8851, %95
  %8853 = sext i32 %a26 to i64
  %8854 = add nsw i64 %8853, 27
  %8855 = mul nsw i64 %8854, %109
  %8856 = add nsw i64 %8855, %112
  br label %"for blur_y.s0.x.x.rebased652"

"produce blur_x650":                              ; preds = %"end for blur_y.s0.x.x.rebased639"
  %8857 = getelementptr inbounds i16, i16* %read_input, i64 %165
  %8858 = getelementptr inbounds i16, i16* %8857, i64 -31
  %8859 = bitcast i16* %8858 to <16 x i16>*
  %8860 = load <16 x i16>, <16 x i16>* %8859, align 2, !tbaa !396
  %8861 = getelementptr inbounds i16, i16* %8857, i64 -15
  %8862 = bitcast i16* %8861 to <16 x i16>*
  %8863 = load <16 x i16>, <16 x i16>* %8862, align 2, !tbaa !396
  %8864 = getelementptr inbounds i16, i16* %8857, i64 -30
  %8865 = bitcast i16* %8864 to <16 x i16>*
  %8866 = load <16 x i16>, <16 x i16>* %8865, align 2, !tbaa !396
  %8867 = getelementptr inbounds i16, i16* %8857, i64 -14
  %8868 = bitcast i16* %8867 to <16 x i16>*
  %8869 = load <16 x i16>, <16 x i16>* %8868, align 2, !tbaa !396
  %8870 = getelementptr inbounds i16, i16* %8857, i64 -32
  %8871 = bitcast i16* %8870 to <16 x i16>*
  %8872 = load <16 x i16>, <16 x i16>* %8871, align 2, !tbaa !396
  %8873 = getelementptr inbounds i16, i16* %8857, i64 -16
  %8874 = bitcast i16* %8873 to <16 x i16>*
  %8875 = load <16 x i16>, <16 x i16>* %8874, align 2, !tbaa !396
  %8876 = add <16 x i16> %8866, %8860
  %8877 = add <16 x i16> %8876, %8872
  %8878 = add <16 x i16> %8869, %8863
  %8879 = add <16 x i16> %8878, %8875
  %8880 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8877, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8881 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8879, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8882 = shufflevector <16 x i16> %8880, <16 x i16> %8881, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8883 = lshr <32 x i16> %8882, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8884 = shufflevector <32 x i16> %8883, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8885 = zext i32 %.pre-phi3250 to i64
  %8886 = mul nsw i64 %96, %8885
  %8887 = add nsw i64 %98, %8886
  %8888 = getelementptr inbounds i16, i16* %blur_x, i64 %8887
  %8889 = getelementptr inbounds i16, i16* %8888, i64 -32
  %8890 = bitcast i16* %8889 to <16 x i16>*
  store <16 x i16> %8884, <16 x i16>* %8890, align 2, !tbaa !399
  %8891 = shufflevector <32 x i16> %8883, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8892 = getelementptr inbounds i16, i16* %8888, i64 -16
  %8893 = bitcast i16* %8892 to <16 x i16>*
  store <16 x i16> %8891, <16 x i16>* %8893, align 2, !tbaa !399
  %8894 = zext i32 %.pre-phi to i64
  %8895 = mul nsw i64 %8894, %108
  %8896 = add nsw i64 %8895, %93
  %8897 = getelementptr inbounds i16, i16* %blur_x, i64 %8896
  %8898 = getelementptr inbounds i16, i16* %8897, i64 -32
  %8899 = bitcast i16* %8898 to <16 x i16>*
  %8900 = load <16 x i16>, <16 x i16>* %8899, align 2, !tbaa !399
  %8901 = getelementptr inbounds i16, i16* %8897, i64 -16
  %8902 = bitcast i16* %8901 to <16 x i16>*
  %8903 = load <16 x i16>, <16 x i16>* %8902, align 2, !tbaa !399
  %8904 = mul nsw i64 %8885, %108
  %8905 = add nsw i64 %8904, %93
  %8906 = getelementptr inbounds i16, i16* %blur_x, i64 %8905
  %8907 = getelementptr inbounds i16, i16* %8906, i64 -32
  %8908 = bitcast i16* %8907 to <16 x i16>*
  %8909 = load <16 x i16>, <16 x i16>* %8908, align 2, !tbaa !399
  %8910 = getelementptr inbounds i16, i16* %8906, i64 -16
  %8911 = bitcast i16* %8910 to <16 x i16>*
  %8912 = load <16 x i16>, <16 x i16>* %8911, align 2, !tbaa !399
  %8913 = zext i32 %.pre-phi3260 to i64
  %8914 = mul nsw i64 %8913, %108
  %8915 = add nsw i64 %8914, %93
  %8916 = getelementptr inbounds i16, i16* %blur_x, i64 %8915
  %8917 = getelementptr inbounds i16, i16* %8916, i64 -32
  %8918 = bitcast i16* %8917 to <16 x i16>*
  %8919 = load <16 x i16>, <16 x i16>* %8918, align 2, !tbaa !399
  %8920 = getelementptr inbounds i16, i16* %8916, i64 -16
  %8921 = bitcast i16* %8920 to <16 x i16>*
  %8922 = load <16 x i16>, <16 x i16>* %8921, align 2, !tbaa !399
  %8923 = add <16 x i16> %8909, %8900
  %8924 = add <16 x i16> %8923, %8919
  %8925 = add <16 x i16> %8912, %8903
  %8926 = add <16 x i16> %8925, %8922
  %8927 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8924, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8928 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8926, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8929 = shufflevector <16 x i16> %8927, <16 x i16> %8928, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8930 = lshr <32 x i16> %8929, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8931 = shufflevector <32 x i16> %8930, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8932 = sext i32 %a26 to i64
  %8933 = add nsw i64 %8932, 27
  %8934 = mul nsw i64 %8933, %109
  %8935 = add nsw i64 %111, %8934
  %8936 = getelementptr inbounds i16, i16* %65, i64 %8935
  %8937 = getelementptr inbounds i16, i16* %8936, i64 -32
  %8938 = bitcast i16* %8937 to <16 x i16>*
  store <16 x i16> %8931, <16 x i16>* %8938, align 2, !tbaa !401
  %8939 = shufflevector <32 x i16> %8930, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8940 = getelementptr inbounds i16, i16* %8936, i64 -16
  %8941 = bitcast i16* %8940 to <16 x i16>*
  store <16 x i16> %8939, <16 x i16>* %8941, align 2, !tbaa !401
  br label %after_bb647

"for blur_y.s0.x.x.rebased652":                   ; preds = %"for blur_y.s0.x.x.rebased652.preheader", %"consume blur_x659"
  %indvars.iv3114 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased652.preheader" ], [ %indvars.iv.next3115, %"consume blur_x659" ]
  %8942 = add nsw i64 %indvars.iv3114, %100
  %8943 = icmp slt i64 %8942, 1
  %8944 = trunc i64 %8942 to i32
  %8945 = shl nsw i32 %8944, 5
  %8946 = icmp sgt i32 %4, %8945
  %8947 = or i1 %8943, %8946
  br i1 %8947, label %"produce blur_x658", label %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge"

"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased652"
  %.pre3313 = shl nsw i64 %8942, 5
  br label %"consume blur_x659"

"end for blur_y.s0.x.x.rebased653":               ; preds = %"consume blur_x659", %after_bb647
  br i1 %101, label %"for blur_y.s0.x.x.rebased660.preheader", label %"end for blur_y.s0.x.x.rebased661", !prof !386

"for blur_y.s0.x.x.rebased660.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased653"
  %8948 = sext i32 %t1644 to i64
  %8949 = zext i32 %.pre-phi to i64
  %8950 = mul nsw i64 %8949, %108
  %8951 = sub nsw i64 %8950, %95
  %8952 = zext i32 %.pre-phi3250 to i64
  %8953 = mul nsw i64 %8952, %108
  %8954 = sub nsw i64 %8953, %95
  %8955 = zext i32 %.pre-phi3260 to i64
  %8956 = mul nsw i64 %8955, %108
  %8957 = sub nsw i64 %8956, %95
  %8958 = sext i32 %a26 to i64
  %8959 = add nsw i64 %8958, 27
  %8960 = mul nsw i64 %8959, %109
  %8961 = add nsw i64 %8960, %112
  br label %"for blur_y.s0.x.x.rebased660"

"produce blur_x658":                              ; preds = %"for blur_y.s0.x.x.rebased652"
  %t1104 = add nsw i32 %8945, %t2081
  %8962 = sext i32 %t1104 to i64
  %8963 = getelementptr inbounds i16, i16* %read_input, i64 %8962
  %8964 = getelementptr inbounds i16, i16* %8963, i64 1
  %8965 = bitcast i16* %8964 to <16 x i16>*
  %8966 = load <16 x i16>, <16 x i16>* %8965, align 2, !tbaa !396
  %8967 = getelementptr inbounds i16, i16* %8963, i64 17
  %8968 = bitcast i16* %8967 to <16 x i16>*
  %8969 = load <16 x i16>, <16 x i16>* %8968, align 2, !tbaa !396
  %8970 = getelementptr inbounds i16, i16* %8963, i64 2
  %8971 = bitcast i16* %8970 to <16 x i16>*
  %8972 = load <16 x i16>, <16 x i16>* %8971, align 2, !tbaa !396
  %8973 = getelementptr inbounds i16, i16* %8963, i64 18
  %8974 = bitcast i16* %8973 to <16 x i16>*
  %8975 = load <16 x i16>, <16 x i16>* %8974, align 2, !tbaa !396
  %8976 = bitcast i16* %8963 to <16 x i16>*
  %8977 = load <16 x i16>, <16 x i16>* %8976, align 2, !tbaa !396
  %8978 = getelementptr inbounds i16, i16* %8963, i64 16
  %8979 = bitcast i16* %8978 to <16 x i16>*
  %8980 = load <16 x i16>, <16 x i16>* %8979, align 2, !tbaa !396
  %8981 = add <16 x i16> %8972, %8966
  %8982 = add <16 x i16> %8981, %8977
  %8983 = add <16 x i16> %8975, %8969
  %8984 = add <16 x i16> %8983, %8980
  %8985 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8982, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %8984, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %8987 = shufflevector <16 x i16> %8985, <16 x i16> %8986, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8988 = lshr <32 x i16> %8987, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %8989 = shufflevector <32 x i16> %8988, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %8990 = shl nsw i64 %8942, 5
  %8991 = add nsw i64 %8990, %8843
  %8992 = getelementptr inbounds i16, i16* %blur_x, i64 %8991
  %8993 = bitcast i16* %8992 to <16 x i16>*
  store <16 x i16> %8989, <16 x i16>* %8993, align 2, !tbaa !399
  %8994 = shufflevector <32 x i16> %8988, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %8995 = getelementptr inbounds i16, i16* %8992, i64 16
  %8996 = bitcast i16* %8995 to <16 x i16>*
  store <16 x i16> %8994, <16 x i16>* %8996, align 2, !tbaa !399
  br label %"consume blur_x659"

"consume blur_x659":                              ; preds = %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge", %"produce blur_x658"
  %.pre-phi3314 = phi i64 [ %.pre3313, %"for blur_y.s0.x.x.rebased652.consume blur_x659_crit_edge" ], [ %8990, %"produce blur_x658" ]
  %8997 = add nsw i64 %8846, %.pre-phi3314
  %8998 = getelementptr inbounds i16, i16* %blur_x, i64 %8997
  %8999 = bitcast i16* %8998 to <16 x i16>*
  %9000 = load <16 x i16>, <16 x i16>* %8999, align 2, !tbaa !399
  %9001 = getelementptr inbounds i16, i16* %8998, i64 16
  %9002 = bitcast i16* %9001 to <16 x i16>*
  %9003 = load <16 x i16>, <16 x i16>* %9002, align 2, !tbaa !399
  %9004 = add nsw i64 %8849, %.pre-phi3314
  %9005 = getelementptr inbounds i16, i16* %blur_x, i64 %9004
  %9006 = bitcast i16* %9005 to <16 x i16>*
  %9007 = load <16 x i16>, <16 x i16>* %9006, align 2, !tbaa !399
  %9008 = getelementptr inbounds i16, i16* %9005, i64 16
  %9009 = bitcast i16* %9008 to <16 x i16>*
  %9010 = load <16 x i16>, <16 x i16>* %9009, align 2, !tbaa !399
  %9011 = add nsw i64 %8852, %.pre-phi3314
  %9012 = getelementptr inbounds i16, i16* %blur_x, i64 %9011
  %9013 = bitcast i16* %9012 to <16 x i16>*
  %9014 = load <16 x i16>, <16 x i16>* %9013, align 2, !tbaa !399
  %9015 = getelementptr inbounds i16, i16* %9012, i64 16
  %9016 = bitcast i16* %9015 to <16 x i16>*
  %9017 = load <16 x i16>, <16 x i16>* %9016, align 2, !tbaa !399
  %9018 = add <16 x i16> %9007, %9000
  %9019 = add <16 x i16> %9018, %9014
  %9020 = add <16 x i16> %9010, %9003
  %9021 = add <16 x i16> %9020, %9017
  %9022 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9019, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9023 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9021, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9024 = shufflevector <16 x i16> %9022, <16 x i16> %9023, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9025 = lshr <32 x i16> %9024, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9026 = shufflevector <32 x i16> %9025, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9027 = add nsw i64 %8856, %.pre-phi3314
  %9028 = getelementptr inbounds i16, i16* %65, i64 %9027
  %9029 = bitcast i16* %9028 to <16 x i16>*
  store <16 x i16> %9026, <16 x i16>* %9029, align 2, !tbaa !401
  %9030 = shufflevector <32 x i16> %9025, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9031 = getelementptr inbounds i16, i16* %9028, i64 16
  %9032 = bitcast i16* %9031 to <16 x i16>*
  store <16 x i16> %9030, <16 x i16>* %9032, align 2, !tbaa !401
  %indvars.iv.next3115 = add nuw nsw i64 %indvars.iv3114, 1
  %.not2528 = icmp eq i64 %indvars.iv.next3115, %180
  br i1 %.not2528, label %"end for blur_y.s0.x.x.rebased653", label %"for blur_y.s0.x.x.rebased652"

"for blur_y.s0.x.x.rebased660":                   ; preds = %"for blur_y.s0.x.x.rebased660.preheader", %"consume blur_x668"
  %blur_y.s0.x.x.rebased662 = phi i32 [ %9111, %"consume blur_x668" ], [ 0, %"for blur_y.s0.x.x.rebased660.preheader" ]
  %9033 = add nsw i32 %blur_y.s0.x.x.rebased662, %t1582
  %a280 = shl nsw i32 %9033, 5
  %9034 = icmp sgt i32 %a14, %a280
  %b286 = select i1 %9034, i32 %a280, i32 %a14
  %9035 = icmp slt i32 %9033, 1
  %9036 = icmp sgt i32 %4, %a280
  %9037 = or i1 %9035, %9036
  br i1 %9037, label %"produce blur_x666", label %"consume blur_x668"

"end for blur_y.s0.x.x.rebased661":               ; preds = %"consume blur_x668", %"end for blur_y.s0.x.x.rebased653"
  br i1 %34, label %"produce blur_x672", label %after_bb669

"produce blur_x666":                              ; preds = %"for blur_y.s0.x.x.rebased660"
  %9038 = icmp slt i32 %b286, %4
  %blur_x.s0.x.v1.base.s667 = select i1 %9038, i32 %b286, i32 %4
  %t1109 = add nsw i32 %blur_x.s0.x.v1.base.s667, %t2081
  %9039 = sext i32 %t1109 to i64
  %9040 = getelementptr inbounds i16, i16* %read_input, i64 %9039
  %9041 = getelementptr inbounds i16, i16* %9040, i64 1
  %9042 = bitcast i16* %9041 to <16 x i16>*
  %9043 = load <16 x i16>, <16 x i16>* %9042, align 2, !tbaa !396
  %9044 = getelementptr inbounds i16, i16* %9040, i64 17
  %9045 = bitcast i16* %9044 to <16 x i16>*
  %9046 = load <16 x i16>, <16 x i16>* %9045, align 2, !tbaa !396
  %9047 = getelementptr inbounds i16, i16* %9040, i64 2
  %9048 = bitcast i16* %9047 to <16 x i16>*
  %9049 = load <16 x i16>, <16 x i16>* %9048, align 2, !tbaa !396
  %9050 = getelementptr inbounds i16, i16* %9040, i64 18
  %9051 = bitcast i16* %9050 to <16 x i16>*
  %9052 = load <16 x i16>, <16 x i16>* %9051, align 2, !tbaa !396
  %9053 = bitcast i16* %9040 to <16 x i16>*
  %9054 = load <16 x i16>, <16 x i16>* %9053, align 2, !tbaa !396
  %9055 = getelementptr inbounds i16, i16* %9040, i64 16
  %9056 = bitcast i16* %9055 to <16 x i16>*
  %9057 = load <16 x i16>, <16 x i16>* %9056, align 2, !tbaa !396
  %9058 = add <16 x i16> %9049, %9043
  %9059 = add <16 x i16> %9058, %9054
  %9060 = add <16 x i16> %9052, %9046
  %9061 = add <16 x i16> %9060, %9057
  %9062 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9059, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9063 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9061, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9064 = shufflevector <16 x i16> %9062, <16 x i16> %9063, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9065 = lshr <32 x i16> %9064, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9066 = shufflevector <32 x i16> %9065, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9067 = sext i32 %blur_x.s0.x.v1.base.s667 to i64
  %9068 = add nsw i64 %9067, %8948
  %9069 = getelementptr inbounds i16, i16* %blur_x, i64 %9068
  %9070 = bitcast i16* %9069 to <16 x i16>*
  store <16 x i16> %9066, <16 x i16>* %9070, align 2, !tbaa !399
  %9071 = shufflevector <32 x i16> %9065, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9072 = getelementptr inbounds i16, i16* %9069, i64 16
  %9073 = bitcast i16* %9072 to <16 x i16>*
  store <16 x i16> %9071, <16 x i16>* %9073, align 2, !tbaa !399
  br label %"consume blur_x668"

"consume blur_x668":                              ; preds = %"for blur_y.s0.x.x.rebased660", %"produce blur_x666"
  %9074 = sext i32 %b286 to i64
  %9075 = add nsw i64 %8951, %9074
  %9076 = getelementptr inbounds i16, i16* %blur_x, i64 %9075
  %9077 = bitcast i16* %9076 to <16 x i16>*
  %9078 = load <16 x i16>, <16 x i16>* %9077, align 2, !tbaa !399
  %9079 = getelementptr inbounds i16, i16* %9076, i64 16
  %9080 = bitcast i16* %9079 to <16 x i16>*
  %9081 = load <16 x i16>, <16 x i16>* %9080, align 2, !tbaa !399
  %9082 = add nsw i64 %8954, %9074
  %9083 = getelementptr inbounds i16, i16* %blur_x, i64 %9082
  %9084 = bitcast i16* %9083 to <16 x i16>*
  %9085 = load <16 x i16>, <16 x i16>* %9084, align 2, !tbaa !399
  %9086 = getelementptr inbounds i16, i16* %9083, i64 16
  %9087 = bitcast i16* %9086 to <16 x i16>*
  %9088 = load <16 x i16>, <16 x i16>* %9087, align 2, !tbaa !399
  %9089 = add nsw i64 %8957, %9074
  %9090 = getelementptr inbounds i16, i16* %blur_x, i64 %9089
  %9091 = bitcast i16* %9090 to <16 x i16>*
  %9092 = load <16 x i16>, <16 x i16>* %9091, align 2, !tbaa !399
  %9093 = getelementptr inbounds i16, i16* %9090, i64 16
  %9094 = bitcast i16* %9093 to <16 x i16>*
  %9095 = load <16 x i16>, <16 x i16>* %9094, align 2, !tbaa !399
  %9096 = add <16 x i16> %9085, %9078
  %9097 = add <16 x i16> %9096, %9092
  %9098 = add <16 x i16> %9088, %9081
  %9099 = add <16 x i16> %9098, %9095
  %9100 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9097, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9101 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9099, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9102 = shufflevector <16 x i16> %9100, <16 x i16> %9101, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9103 = lshr <32 x i16> %9102, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9104 = shufflevector <32 x i16> %9103, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9105 = add nsw i64 %8961, %9074
  %9106 = getelementptr inbounds i16, i16* %65, i64 %9105
  %9107 = bitcast i16* %9106 to <16 x i16>*
  store <16 x i16> %9104, <16 x i16>* %9107, align 2, !tbaa !401
  %9108 = shufflevector <32 x i16> %9103, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9109 = getelementptr inbounds i16, i16* %9106, i64 16
  %9110 = bitcast i16* %9109 to <16 x i16>*
  store <16 x i16> %9108, <16 x i16>* %9110, align 2, !tbaa !401
  %9111 = add nuw nsw i32 %blur_y.s0.x.x.rebased662, 1
  %.not2527 = icmp eq i32 %9111, %t1639
  br i1 %.not2527, label %"end for blur_y.s0.x.x.rebased661", label %"for blur_y.s0.x.x.rebased660"

after_bb669:                                      ; preds = %"end for blur_y.s0.x.x.rebased661", %"produce blur_x672"
  br i1 %99, label %"for blur_y.s0.x.x.rebased674.preheader", label %"end for blur_y.s0.x.x.rebased675", !prof !386

"for blur_y.s0.x.x.rebased674.preheader":         ; preds = %after_bb669
  %9112 = sext i32 %t1650 to i64
  %9113 = zext i32 %.pre-phi3250 to i64
  %9114 = mul nsw i64 %9113, %108
  %9115 = sub nsw i64 %9114, %95
  %9116 = zext i32 %.pre-phi3254 to i64
  %9117 = mul nsw i64 %9116, %108
  %9118 = sub nsw i64 %9117, %95
  %9119 = zext i32 %.pre-phi to i64
  %9120 = mul nsw i64 %9119, %108
  %9121 = sub nsw i64 %9120, %95
  %9122 = sext i32 %a26 to i64
  %9123 = add nsw i64 %9122, 28
  %9124 = mul nsw i64 %9123, %109
  %9125 = add nsw i64 %9124, %112
  br label %"for blur_y.s0.x.x.rebased674"

"produce blur_x672":                              ; preds = %"end for blur_y.s0.x.x.rebased661"
  %9126 = getelementptr inbounds i16, i16* %read_input, i64 %167
  %9127 = getelementptr inbounds i16, i16* %9126, i64 -31
  %9128 = bitcast i16* %9127 to <16 x i16>*
  %9129 = load <16 x i16>, <16 x i16>* %9128, align 2, !tbaa !396
  %9130 = getelementptr inbounds i16, i16* %9126, i64 -15
  %9131 = bitcast i16* %9130 to <16 x i16>*
  %9132 = load <16 x i16>, <16 x i16>* %9131, align 2, !tbaa !396
  %9133 = getelementptr inbounds i16, i16* %9126, i64 -30
  %9134 = bitcast i16* %9133 to <16 x i16>*
  %9135 = load <16 x i16>, <16 x i16>* %9134, align 2, !tbaa !396
  %9136 = getelementptr inbounds i16, i16* %9126, i64 -14
  %9137 = bitcast i16* %9136 to <16 x i16>*
  %9138 = load <16 x i16>, <16 x i16>* %9137, align 2, !tbaa !396
  %9139 = getelementptr inbounds i16, i16* %9126, i64 -32
  %9140 = bitcast i16* %9139 to <16 x i16>*
  %9141 = load <16 x i16>, <16 x i16>* %9140, align 2, !tbaa !396
  %9142 = getelementptr inbounds i16, i16* %9126, i64 -16
  %9143 = bitcast i16* %9142 to <16 x i16>*
  %9144 = load <16 x i16>, <16 x i16>* %9143, align 2, !tbaa !396
  %9145 = add <16 x i16> %9135, %9129
  %9146 = add <16 x i16> %9145, %9141
  %9147 = add <16 x i16> %9138, %9132
  %9148 = add <16 x i16> %9147, %9144
  %9149 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9146, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9150 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9148, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9151 = shufflevector <16 x i16> %9149, <16 x i16> %9150, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9152 = lshr <32 x i16> %9151, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9153 = shufflevector <32 x i16> %9152, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9154 = zext i32 %.pre-phi3254 to i64
  %9155 = mul nsw i64 %96, %9154
  %9156 = add nsw i64 %98, %9155
  %9157 = getelementptr inbounds i16, i16* %blur_x, i64 %9156
  %9158 = getelementptr inbounds i16, i16* %9157, i64 -32
  %9159 = bitcast i16* %9158 to <16 x i16>*
  store <16 x i16> %9153, <16 x i16>* %9159, align 2, !tbaa !399
  %9160 = shufflevector <32 x i16> %9152, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9161 = getelementptr inbounds i16, i16* %9157, i64 -16
  %9162 = bitcast i16* %9161 to <16 x i16>*
  store <16 x i16> %9160, <16 x i16>* %9162, align 2, !tbaa !399
  %9163 = zext i32 %.pre-phi3250 to i64
  %9164 = mul nsw i64 %9163, %108
  %9165 = add nsw i64 %9164, %93
  %9166 = getelementptr inbounds i16, i16* %blur_x, i64 %9165
  %9167 = getelementptr inbounds i16, i16* %9166, i64 -32
  %9168 = bitcast i16* %9167 to <16 x i16>*
  %9169 = load <16 x i16>, <16 x i16>* %9168, align 2, !tbaa !399
  %9170 = getelementptr inbounds i16, i16* %9166, i64 -16
  %9171 = bitcast i16* %9170 to <16 x i16>*
  %9172 = load <16 x i16>, <16 x i16>* %9171, align 2, !tbaa !399
  %9173 = mul nsw i64 %9154, %108
  %9174 = add nsw i64 %9173, %93
  %9175 = getelementptr inbounds i16, i16* %blur_x, i64 %9174
  %9176 = getelementptr inbounds i16, i16* %9175, i64 -32
  %9177 = bitcast i16* %9176 to <16 x i16>*
  %9178 = load <16 x i16>, <16 x i16>* %9177, align 2, !tbaa !399
  %9179 = getelementptr inbounds i16, i16* %9175, i64 -16
  %9180 = bitcast i16* %9179 to <16 x i16>*
  %9181 = load <16 x i16>, <16 x i16>* %9180, align 2, !tbaa !399
  %9182 = zext i32 %.pre-phi to i64
  %9183 = mul nsw i64 %9182, %108
  %9184 = add nsw i64 %9183, %93
  %9185 = getelementptr inbounds i16, i16* %blur_x, i64 %9184
  %9186 = getelementptr inbounds i16, i16* %9185, i64 -32
  %9187 = bitcast i16* %9186 to <16 x i16>*
  %9188 = load <16 x i16>, <16 x i16>* %9187, align 2, !tbaa !399
  %9189 = getelementptr inbounds i16, i16* %9185, i64 -16
  %9190 = bitcast i16* %9189 to <16 x i16>*
  %9191 = load <16 x i16>, <16 x i16>* %9190, align 2, !tbaa !399
  %9192 = add <16 x i16> %9178, %9169
  %9193 = add <16 x i16> %9192, %9188
  %9194 = add <16 x i16> %9181, %9172
  %9195 = add <16 x i16> %9194, %9191
  %9196 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9193, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9197 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9195, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9198 = shufflevector <16 x i16> %9196, <16 x i16> %9197, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9199 = lshr <32 x i16> %9198, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9200 = shufflevector <32 x i16> %9199, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9201 = sext i32 %a26 to i64
  %9202 = add nsw i64 %9201, 28
  %9203 = mul nsw i64 %9202, %109
  %9204 = add nsw i64 %111, %9203
  %9205 = getelementptr inbounds i16, i16* %65, i64 %9204
  %9206 = getelementptr inbounds i16, i16* %9205, i64 -32
  %9207 = bitcast i16* %9206 to <16 x i16>*
  store <16 x i16> %9200, <16 x i16>* %9207, align 2, !tbaa !401
  %9208 = shufflevector <32 x i16> %9199, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9209 = getelementptr inbounds i16, i16* %9205, i64 -16
  %9210 = bitcast i16* %9209 to <16 x i16>*
  store <16 x i16> %9208, <16 x i16>* %9210, align 2, !tbaa !401
  br label %after_bb669

"for blur_y.s0.x.x.rebased674":                   ; preds = %"for blur_y.s0.x.x.rebased674.preheader", %"consume blur_x681"
  %indvars.iv3117 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased674.preheader" ], [ %indvars.iv.next3118, %"consume blur_x681" ]
  %9211 = add nsw i64 %indvars.iv3117, %100
  %9212 = icmp slt i64 %9211, 1
  %9213 = trunc i64 %9211 to i32
  %9214 = shl nsw i32 %9213, 5
  %9215 = icmp sgt i32 %4, %9214
  %9216 = or i1 %9212, %9215
  br i1 %9216, label %"produce blur_x680", label %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge"

"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased674"
  %.pre3315 = shl nsw i64 %9211, 5
  br label %"consume blur_x681"

"end for blur_y.s0.x.x.rebased675":               ; preds = %"consume blur_x681", %after_bb669
  br i1 %101, label %"for blur_y.s0.x.x.rebased682.preheader", label %"end for blur_y.s0.x.x.rebased683", !prof !386

"for blur_y.s0.x.x.rebased682.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased675"
  %9217 = sext i32 %t1650 to i64
  %9218 = zext i32 %.pre-phi3250 to i64
  %9219 = mul nsw i64 %9218, %108
  %9220 = sub nsw i64 %9219, %95
  %9221 = zext i32 %.pre-phi3254 to i64
  %9222 = mul nsw i64 %9221, %108
  %9223 = sub nsw i64 %9222, %95
  %9224 = zext i32 %.pre-phi to i64
  %9225 = mul nsw i64 %9224, %108
  %9226 = sub nsw i64 %9225, %95
  %9227 = sext i32 %a26 to i64
  %9228 = add nsw i64 %9227, 28
  %9229 = mul nsw i64 %9228, %109
  %9230 = add nsw i64 %9229, %112
  br label %"for blur_y.s0.x.x.rebased682"

"produce blur_x680":                              ; preds = %"for blur_y.s0.x.x.rebased674"
  %t1120 = add nsw i32 %9214, %t2097
  %9231 = sext i32 %t1120 to i64
  %9232 = getelementptr inbounds i16, i16* %read_input, i64 %9231
  %9233 = getelementptr inbounds i16, i16* %9232, i64 1
  %9234 = bitcast i16* %9233 to <16 x i16>*
  %9235 = load <16 x i16>, <16 x i16>* %9234, align 2, !tbaa !396
  %9236 = getelementptr inbounds i16, i16* %9232, i64 17
  %9237 = bitcast i16* %9236 to <16 x i16>*
  %9238 = load <16 x i16>, <16 x i16>* %9237, align 2, !tbaa !396
  %9239 = getelementptr inbounds i16, i16* %9232, i64 2
  %9240 = bitcast i16* %9239 to <16 x i16>*
  %9241 = load <16 x i16>, <16 x i16>* %9240, align 2, !tbaa !396
  %9242 = getelementptr inbounds i16, i16* %9232, i64 18
  %9243 = bitcast i16* %9242 to <16 x i16>*
  %9244 = load <16 x i16>, <16 x i16>* %9243, align 2, !tbaa !396
  %9245 = bitcast i16* %9232 to <16 x i16>*
  %9246 = load <16 x i16>, <16 x i16>* %9245, align 2, !tbaa !396
  %9247 = getelementptr inbounds i16, i16* %9232, i64 16
  %9248 = bitcast i16* %9247 to <16 x i16>*
  %9249 = load <16 x i16>, <16 x i16>* %9248, align 2, !tbaa !396
  %9250 = add <16 x i16> %9241, %9235
  %9251 = add <16 x i16> %9250, %9246
  %9252 = add <16 x i16> %9244, %9238
  %9253 = add <16 x i16> %9252, %9249
  %9254 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9251, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9253, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9256 = shufflevector <16 x i16> %9254, <16 x i16> %9255, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9257 = lshr <32 x i16> %9256, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9258 = shufflevector <32 x i16> %9257, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9259 = shl nsw i64 %9211, 5
  %9260 = add nsw i64 %9259, %9112
  %9261 = getelementptr inbounds i16, i16* %blur_x, i64 %9260
  %9262 = bitcast i16* %9261 to <16 x i16>*
  store <16 x i16> %9258, <16 x i16>* %9262, align 2, !tbaa !399
  %9263 = shufflevector <32 x i16> %9257, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9264 = getelementptr inbounds i16, i16* %9261, i64 16
  %9265 = bitcast i16* %9264 to <16 x i16>*
  store <16 x i16> %9263, <16 x i16>* %9265, align 2, !tbaa !399
  br label %"consume blur_x681"

"consume blur_x681":                              ; preds = %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge", %"produce blur_x680"
  %.pre-phi3316 = phi i64 [ %.pre3315, %"for blur_y.s0.x.x.rebased674.consume blur_x681_crit_edge" ], [ %9259, %"produce blur_x680" ]
  %9266 = add nsw i64 %9115, %.pre-phi3316
  %9267 = getelementptr inbounds i16, i16* %blur_x, i64 %9266
  %9268 = bitcast i16* %9267 to <16 x i16>*
  %9269 = load <16 x i16>, <16 x i16>* %9268, align 2, !tbaa !399
  %9270 = getelementptr inbounds i16, i16* %9267, i64 16
  %9271 = bitcast i16* %9270 to <16 x i16>*
  %9272 = load <16 x i16>, <16 x i16>* %9271, align 2, !tbaa !399
  %9273 = add nsw i64 %9118, %.pre-phi3316
  %9274 = getelementptr inbounds i16, i16* %blur_x, i64 %9273
  %9275 = bitcast i16* %9274 to <16 x i16>*
  %9276 = load <16 x i16>, <16 x i16>* %9275, align 2, !tbaa !399
  %9277 = getelementptr inbounds i16, i16* %9274, i64 16
  %9278 = bitcast i16* %9277 to <16 x i16>*
  %9279 = load <16 x i16>, <16 x i16>* %9278, align 2, !tbaa !399
  %9280 = add nsw i64 %9121, %.pre-phi3316
  %9281 = getelementptr inbounds i16, i16* %blur_x, i64 %9280
  %9282 = bitcast i16* %9281 to <16 x i16>*
  %9283 = load <16 x i16>, <16 x i16>* %9282, align 2, !tbaa !399
  %9284 = getelementptr inbounds i16, i16* %9281, i64 16
  %9285 = bitcast i16* %9284 to <16 x i16>*
  %9286 = load <16 x i16>, <16 x i16>* %9285, align 2, !tbaa !399
  %9287 = add <16 x i16> %9276, %9269
  %9288 = add <16 x i16> %9287, %9283
  %9289 = add <16 x i16> %9279, %9272
  %9290 = add <16 x i16> %9289, %9286
  %9291 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9288, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9292 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9290, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9293 = shufflevector <16 x i16> %9291, <16 x i16> %9292, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9294 = lshr <32 x i16> %9293, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9295 = shufflevector <32 x i16> %9294, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9296 = add nsw i64 %9125, %.pre-phi3316
  %9297 = getelementptr inbounds i16, i16* %65, i64 %9296
  %9298 = bitcast i16* %9297 to <16 x i16>*
  store <16 x i16> %9295, <16 x i16>* %9298, align 2, !tbaa !401
  %9299 = shufflevector <32 x i16> %9294, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9300 = getelementptr inbounds i16, i16* %9297, i64 16
  %9301 = bitcast i16* %9300 to <16 x i16>*
  store <16 x i16> %9299, <16 x i16>* %9301, align 2, !tbaa !401
  %indvars.iv.next3118 = add nuw nsw i64 %indvars.iv3117, 1
  %.not2526 = icmp eq i64 %indvars.iv.next3118, %180
  br i1 %.not2526, label %"end for blur_y.s0.x.x.rebased675", label %"for blur_y.s0.x.x.rebased674"

"for blur_y.s0.x.x.rebased682":                   ; preds = %"for blur_y.s0.x.x.rebased682.preheader", %"consume blur_x690"
  %blur_y.s0.x.x.rebased684 = phi i32 [ %9380, %"consume blur_x690" ], [ 0, %"for blur_y.s0.x.x.rebased682.preheader" ]
  %9302 = add nsw i32 %blur_y.s0.x.x.rebased684, %t1582
  %a287 = shl nsw i32 %9302, 5
  %9303 = icmp sgt i32 %a14, %a287
  %b293 = select i1 %9303, i32 %a287, i32 %a14
  %9304 = icmp slt i32 %9302, 1
  %9305 = icmp sgt i32 %4, %a287
  %9306 = or i1 %9304, %9305
  br i1 %9306, label %"produce blur_x688", label %"consume blur_x690"

"end for blur_y.s0.x.x.rebased683":               ; preds = %"consume blur_x690", %"end for blur_y.s0.x.x.rebased675"
  br i1 %34, label %"produce blur_x694", label %after_bb691

"produce blur_x688":                              ; preds = %"for blur_y.s0.x.x.rebased682"
  %9307 = icmp slt i32 %b293, %4
  %blur_x.s0.x.v1.base.s689 = select i1 %9307, i32 %b293, i32 %4
  %t1125 = add nsw i32 %blur_x.s0.x.v1.base.s689, %t2097
  %9308 = sext i32 %t1125 to i64
  %9309 = getelementptr inbounds i16, i16* %read_input, i64 %9308
  %9310 = getelementptr inbounds i16, i16* %9309, i64 1
  %9311 = bitcast i16* %9310 to <16 x i16>*
  %9312 = load <16 x i16>, <16 x i16>* %9311, align 2, !tbaa !396
  %9313 = getelementptr inbounds i16, i16* %9309, i64 17
  %9314 = bitcast i16* %9313 to <16 x i16>*
  %9315 = load <16 x i16>, <16 x i16>* %9314, align 2, !tbaa !396
  %9316 = getelementptr inbounds i16, i16* %9309, i64 2
  %9317 = bitcast i16* %9316 to <16 x i16>*
  %9318 = load <16 x i16>, <16 x i16>* %9317, align 2, !tbaa !396
  %9319 = getelementptr inbounds i16, i16* %9309, i64 18
  %9320 = bitcast i16* %9319 to <16 x i16>*
  %9321 = load <16 x i16>, <16 x i16>* %9320, align 2, !tbaa !396
  %9322 = bitcast i16* %9309 to <16 x i16>*
  %9323 = load <16 x i16>, <16 x i16>* %9322, align 2, !tbaa !396
  %9324 = getelementptr inbounds i16, i16* %9309, i64 16
  %9325 = bitcast i16* %9324 to <16 x i16>*
  %9326 = load <16 x i16>, <16 x i16>* %9325, align 2, !tbaa !396
  %9327 = add <16 x i16> %9318, %9312
  %9328 = add <16 x i16> %9327, %9323
  %9329 = add <16 x i16> %9321, %9315
  %9330 = add <16 x i16> %9329, %9326
  %9331 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9328, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9332 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9330, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9333 = shufflevector <16 x i16> %9331, <16 x i16> %9332, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9334 = lshr <32 x i16> %9333, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9335 = shufflevector <32 x i16> %9334, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9336 = sext i32 %blur_x.s0.x.v1.base.s689 to i64
  %9337 = add nsw i64 %9336, %9217
  %9338 = getelementptr inbounds i16, i16* %blur_x, i64 %9337
  %9339 = bitcast i16* %9338 to <16 x i16>*
  store <16 x i16> %9335, <16 x i16>* %9339, align 2, !tbaa !399
  %9340 = shufflevector <32 x i16> %9334, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9341 = getelementptr inbounds i16, i16* %9338, i64 16
  %9342 = bitcast i16* %9341 to <16 x i16>*
  store <16 x i16> %9340, <16 x i16>* %9342, align 2, !tbaa !399
  br label %"consume blur_x690"

"consume blur_x690":                              ; preds = %"for blur_y.s0.x.x.rebased682", %"produce blur_x688"
  %9343 = sext i32 %b293 to i64
  %9344 = add nsw i64 %9220, %9343
  %9345 = getelementptr inbounds i16, i16* %blur_x, i64 %9344
  %9346 = bitcast i16* %9345 to <16 x i16>*
  %9347 = load <16 x i16>, <16 x i16>* %9346, align 2, !tbaa !399
  %9348 = getelementptr inbounds i16, i16* %9345, i64 16
  %9349 = bitcast i16* %9348 to <16 x i16>*
  %9350 = load <16 x i16>, <16 x i16>* %9349, align 2, !tbaa !399
  %9351 = add nsw i64 %9223, %9343
  %9352 = getelementptr inbounds i16, i16* %blur_x, i64 %9351
  %9353 = bitcast i16* %9352 to <16 x i16>*
  %9354 = load <16 x i16>, <16 x i16>* %9353, align 2, !tbaa !399
  %9355 = getelementptr inbounds i16, i16* %9352, i64 16
  %9356 = bitcast i16* %9355 to <16 x i16>*
  %9357 = load <16 x i16>, <16 x i16>* %9356, align 2, !tbaa !399
  %9358 = add nsw i64 %9226, %9343
  %9359 = getelementptr inbounds i16, i16* %blur_x, i64 %9358
  %9360 = bitcast i16* %9359 to <16 x i16>*
  %9361 = load <16 x i16>, <16 x i16>* %9360, align 2, !tbaa !399
  %9362 = getelementptr inbounds i16, i16* %9359, i64 16
  %9363 = bitcast i16* %9362 to <16 x i16>*
  %9364 = load <16 x i16>, <16 x i16>* %9363, align 2, !tbaa !399
  %9365 = add <16 x i16> %9354, %9347
  %9366 = add <16 x i16> %9365, %9361
  %9367 = add <16 x i16> %9357, %9350
  %9368 = add <16 x i16> %9367, %9364
  %9369 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9366, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9370 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9368, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9371 = shufflevector <16 x i16> %9369, <16 x i16> %9370, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9372 = lshr <32 x i16> %9371, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9373 = shufflevector <32 x i16> %9372, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9374 = add nsw i64 %9230, %9343
  %9375 = getelementptr inbounds i16, i16* %65, i64 %9374
  %9376 = bitcast i16* %9375 to <16 x i16>*
  store <16 x i16> %9373, <16 x i16>* %9376, align 2, !tbaa !401
  %9377 = shufflevector <32 x i16> %9372, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9378 = getelementptr inbounds i16, i16* %9375, i64 16
  %9379 = bitcast i16* %9378 to <16 x i16>*
  store <16 x i16> %9377, <16 x i16>* %9379, align 2, !tbaa !401
  %9380 = add nuw nsw i32 %blur_y.s0.x.x.rebased684, 1
  %.not2525 = icmp eq i32 %9380, %t1639
  br i1 %.not2525, label %"end for blur_y.s0.x.x.rebased683", label %"for blur_y.s0.x.x.rebased682"

after_bb691:                                      ; preds = %"end for blur_y.s0.x.x.rebased683", %"produce blur_x694"
  br i1 %99, label %"for blur_y.s0.x.x.rebased696.preheader", label %"end for blur_y.s0.x.x.rebased697", !prof !386

"for blur_y.s0.x.x.rebased696.preheader":         ; preds = %after_bb691
  %9381 = sext i32 %t1666 to i64
  %9382 = zext i32 %.pre-phi3254 to i64
  %9383 = mul nsw i64 %9382, %108
  %9384 = sub nsw i64 %9383, %95
  %9385 = zext i32 %.pre-phi3260 to i64
  %9386 = mul nsw i64 %9385, %108
  %9387 = sub nsw i64 %9386, %95
  %9388 = zext i32 %.pre-phi3250 to i64
  %9389 = mul nsw i64 %9388, %108
  %9390 = sub nsw i64 %9389, %95
  %9391 = sext i32 %a26 to i64
  %9392 = add nsw i64 %9391, 29
  %9393 = mul nsw i64 %9392, %109
  %9394 = add nsw i64 %9393, %112
  br label %"for blur_y.s0.x.x.rebased696"

"produce blur_x694":                              ; preds = %"end for blur_y.s0.x.x.rebased683"
  %9395 = getelementptr inbounds i16, i16* %read_input, i64 %169
  %9396 = getelementptr inbounds i16, i16* %9395, i64 -31
  %9397 = bitcast i16* %9396 to <16 x i16>*
  %9398 = load <16 x i16>, <16 x i16>* %9397, align 2, !tbaa !396
  %9399 = getelementptr inbounds i16, i16* %9395, i64 -15
  %9400 = bitcast i16* %9399 to <16 x i16>*
  %9401 = load <16 x i16>, <16 x i16>* %9400, align 2, !tbaa !396
  %9402 = getelementptr inbounds i16, i16* %9395, i64 -30
  %9403 = bitcast i16* %9402 to <16 x i16>*
  %9404 = load <16 x i16>, <16 x i16>* %9403, align 2, !tbaa !396
  %9405 = getelementptr inbounds i16, i16* %9395, i64 -14
  %9406 = bitcast i16* %9405 to <16 x i16>*
  %9407 = load <16 x i16>, <16 x i16>* %9406, align 2, !tbaa !396
  %9408 = getelementptr inbounds i16, i16* %9395, i64 -32
  %9409 = bitcast i16* %9408 to <16 x i16>*
  %9410 = load <16 x i16>, <16 x i16>* %9409, align 2, !tbaa !396
  %9411 = getelementptr inbounds i16, i16* %9395, i64 -16
  %9412 = bitcast i16* %9411 to <16 x i16>*
  %9413 = load <16 x i16>, <16 x i16>* %9412, align 2, !tbaa !396
  %9414 = add <16 x i16> %9404, %9398
  %9415 = add <16 x i16> %9414, %9410
  %9416 = add <16 x i16> %9407, %9401
  %9417 = add <16 x i16> %9416, %9413
  %9418 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9415, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9419 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9417, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9420 = shufflevector <16 x i16> %9418, <16 x i16> %9419, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9421 = lshr <32 x i16> %9420, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9422 = shufflevector <32 x i16> %9421, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9423 = zext i32 %.pre-phi3260 to i64
  %9424 = mul nsw i64 %96, %9423
  %9425 = add nsw i64 %98, %9424
  %9426 = getelementptr inbounds i16, i16* %blur_x, i64 %9425
  %9427 = getelementptr inbounds i16, i16* %9426, i64 -32
  %9428 = bitcast i16* %9427 to <16 x i16>*
  store <16 x i16> %9422, <16 x i16>* %9428, align 2, !tbaa !399
  %9429 = shufflevector <32 x i16> %9421, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9430 = getelementptr inbounds i16, i16* %9426, i64 -16
  %9431 = bitcast i16* %9430 to <16 x i16>*
  store <16 x i16> %9429, <16 x i16>* %9431, align 2, !tbaa !399
  %9432 = zext i32 %.pre-phi3254 to i64
  %9433 = mul nsw i64 %9432, %108
  %9434 = add nsw i64 %9433, %93
  %9435 = getelementptr inbounds i16, i16* %blur_x, i64 %9434
  %9436 = getelementptr inbounds i16, i16* %9435, i64 -32
  %9437 = bitcast i16* %9436 to <16 x i16>*
  %9438 = load <16 x i16>, <16 x i16>* %9437, align 2, !tbaa !399
  %9439 = getelementptr inbounds i16, i16* %9435, i64 -16
  %9440 = bitcast i16* %9439 to <16 x i16>*
  %9441 = load <16 x i16>, <16 x i16>* %9440, align 2, !tbaa !399
  %9442 = mul nsw i64 %9423, %108
  %9443 = add nsw i64 %9442, %93
  %9444 = getelementptr inbounds i16, i16* %blur_x, i64 %9443
  %9445 = getelementptr inbounds i16, i16* %9444, i64 -32
  %9446 = bitcast i16* %9445 to <16 x i16>*
  %9447 = load <16 x i16>, <16 x i16>* %9446, align 2, !tbaa !399
  %9448 = getelementptr inbounds i16, i16* %9444, i64 -16
  %9449 = bitcast i16* %9448 to <16 x i16>*
  %9450 = load <16 x i16>, <16 x i16>* %9449, align 2, !tbaa !399
  %9451 = zext i32 %.pre-phi3250 to i64
  %9452 = mul nsw i64 %9451, %108
  %9453 = add nsw i64 %9452, %93
  %9454 = getelementptr inbounds i16, i16* %blur_x, i64 %9453
  %9455 = getelementptr inbounds i16, i16* %9454, i64 -32
  %9456 = bitcast i16* %9455 to <16 x i16>*
  %9457 = load <16 x i16>, <16 x i16>* %9456, align 2, !tbaa !399
  %9458 = getelementptr inbounds i16, i16* %9454, i64 -16
  %9459 = bitcast i16* %9458 to <16 x i16>*
  %9460 = load <16 x i16>, <16 x i16>* %9459, align 2, !tbaa !399
  %9461 = add <16 x i16> %9447, %9438
  %9462 = add <16 x i16> %9461, %9457
  %9463 = add <16 x i16> %9450, %9441
  %9464 = add <16 x i16> %9463, %9460
  %9465 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9462, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9466 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9464, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9467 = shufflevector <16 x i16> %9465, <16 x i16> %9466, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9468 = lshr <32 x i16> %9467, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9469 = shufflevector <32 x i16> %9468, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9470 = sext i32 %a26 to i64
  %9471 = add nsw i64 %9470, 29
  %9472 = mul nsw i64 %9471, %109
  %9473 = add nsw i64 %111, %9472
  %9474 = getelementptr inbounds i16, i16* %65, i64 %9473
  %9475 = getelementptr inbounds i16, i16* %9474, i64 -32
  %9476 = bitcast i16* %9475 to <16 x i16>*
  store <16 x i16> %9469, <16 x i16>* %9476, align 2, !tbaa !401
  %9477 = shufflevector <32 x i16> %9468, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9478 = getelementptr inbounds i16, i16* %9474, i64 -16
  %9479 = bitcast i16* %9478 to <16 x i16>*
  store <16 x i16> %9477, <16 x i16>* %9479, align 2, !tbaa !401
  br label %after_bb691

"for blur_y.s0.x.x.rebased696":                   ; preds = %"for blur_y.s0.x.x.rebased696.preheader", %"consume blur_x703"
  %indvars.iv3120 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased696.preheader" ], [ %indvars.iv.next3121, %"consume blur_x703" ]
  %9480 = add nsw i64 %indvars.iv3120, %100
  %9481 = icmp slt i64 %9480, 1
  %9482 = trunc i64 %9480 to i32
  %9483 = shl nsw i32 %9482, 5
  %9484 = icmp sgt i32 %4, %9483
  %9485 = or i1 %9481, %9484
  br i1 %9485, label %"produce blur_x702", label %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge"

"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased696"
  %.pre3317 = shl nsw i64 %9480, 5
  br label %"consume blur_x703"

"end for blur_y.s0.x.x.rebased697":               ; preds = %"consume blur_x703", %after_bb691
  br i1 %101, label %"for blur_y.s0.x.x.rebased704.preheader", label %"end for blur_y.s0.x.x.rebased705", !prof !386

"for blur_y.s0.x.x.rebased704.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased697"
  %9486 = sext i32 %t1666 to i64
  %9487 = zext i32 %.pre-phi3254 to i64
  %9488 = mul nsw i64 %9487, %108
  %9489 = sub nsw i64 %9488, %95
  %9490 = zext i32 %.pre-phi3260 to i64
  %9491 = mul nsw i64 %9490, %108
  %9492 = sub nsw i64 %9491, %95
  %9493 = zext i32 %.pre-phi3250 to i64
  %9494 = mul nsw i64 %9493, %108
  %9495 = sub nsw i64 %9494, %95
  %9496 = sext i32 %a26 to i64
  %9497 = add nsw i64 %9496, 29
  %9498 = mul nsw i64 %9497, %109
  %9499 = add nsw i64 %9498, %112
  br label %"for blur_y.s0.x.x.rebased704"

"produce blur_x702":                              ; preds = %"for blur_y.s0.x.x.rebased696"
  %t1136 = add nsw i32 %9483, %t2113
  %9500 = sext i32 %t1136 to i64
  %9501 = getelementptr inbounds i16, i16* %read_input, i64 %9500
  %9502 = getelementptr inbounds i16, i16* %9501, i64 1
  %9503 = bitcast i16* %9502 to <16 x i16>*
  %9504 = load <16 x i16>, <16 x i16>* %9503, align 2, !tbaa !396
  %9505 = getelementptr inbounds i16, i16* %9501, i64 17
  %9506 = bitcast i16* %9505 to <16 x i16>*
  %9507 = load <16 x i16>, <16 x i16>* %9506, align 2, !tbaa !396
  %9508 = getelementptr inbounds i16, i16* %9501, i64 2
  %9509 = bitcast i16* %9508 to <16 x i16>*
  %9510 = load <16 x i16>, <16 x i16>* %9509, align 2, !tbaa !396
  %9511 = getelementptr inbounds i16, i16* %9501, i64 18
  %9512 = bitcast i16* %9511 to <16 x i16>*
  %9513 = load <16 x i16>, <16 x i16>* %9512, align 2, !tbaa !396
  %9514 = bitcast i16* %9501 to <16 x i16>*
  %9515 = load <16 x i16>, <16 x i16>* %9514, align 2, !tbaa !396
  %9516 = getelementptr inbounds i16, i16* %9501, i64 16
  %9517 = bitcast i16* %9516 to <16 x i16>*
  %9518 = load <16 x i16>, <16 x i16>* %9517, align 2, !tbaa !396
  %9519 = add <16 x i16> %9510, %9504
  %9520 = add <16 x i16> %9519, %9515
  %9521 = add <16 x i16> %9513, %9507
  %9522 = add <16 x i16> %9521, %9518
  %9523 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9520, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9522, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9525 = shufflevector <16 x i16> %9523, <16 x i16> %9524, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9526 = lshr <32 x i16> %9525, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9527 = shufflevector <32 x i16> %9526, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9528 = shl nsw i64 %9480, 5
  %9529 = add nsw i64 %9528, %9381
  %9530 = getelementptr inbounds i16, i16* %blur_x, i64 %9529
  %9531 = bitcast i16* %9530 to <16 x i16>*
  store <16 x i16> %9527, <16 x i16>* %9531, align 2, !tbaa !399
  %9532 = shufflevector <32 x i16> %9526, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9533 = getelementptr inbounds i16, i16* %9530, i64 16
  %9534 = bitcast i16* %9533 to <16 x i16>*
  store <16 x i16> %9532, <16 x i16>* %9534, align 2, !tbaa !399
  br label %"consume blur_x703"

"consume blur_x703":                              ; preds = %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge", %"produce blur_x702"
  %.pre-phi3318 = phi i64 [ %.pre3317, %"for blur_y.s0.x.x.rebased696.consume blur_x703_crit_edge" ], [ %9528, %"produce blur_x702" ]
  %9535 = add nsw i64 %9384, %.pre-phi3318
  %9536 = getelementptr inbounds i16, i16* %blur_x, i64 %9535
  %9537 = bitcast i16* %9536 to <16 x i16>*
  %9538 = load <16 x i16>, <16 x i16>* %9537, align 2, !tbaa !399
  %9539 = getelementptr inbounds i16, i16* %9536, i64 16
  %9540 = bitcast i16* %9539 to <16 x i16>*
  %9541 = load <16 x i16>, <16 x i16>* %9540, align 2, !tbaa !399
  %9542 = add nsw i64 %9387, %.pre-phi3318
  %9543 = getelementptr inbounds i16, i16* %blur_x, i64 %9542
  %9544 = bitcast i16* %9543 to <16 x i16>*
  %9545 = load <16 x i16>, <16 x i16>* %9544, align 2, !tbaa !399
  %9546 = getelementptr inbounds i16, i16* %9543, i64 16
  %9547 = bitcast i16* %9546 to <16 x i16>*
  %9548 = load <16 x i16>, <16 x i16>* %9547, align 2, !tbaa !399
  %9549 = add nsw i64 %9390, %.pre-phi3318
  %9550 = getelementptr inbounds i16, i16* %blur_x, i64 %9549
  %9551 = bitcast i16* %9550 to <16 x i16>*
  %9552 = load <16 x i16>, <16 x i16>* %9551, align 2, !tbaa !399
  %9553 = getelementptr inbounds i16, i16* %9550, i64 16
  %9554 = bitcast i16* %9553 to <16 x i16>*
  %9555 = load <16 x i16>, <16 x i16>* %9554, align 2, !tbaa !399
  %9556 = add <16 x i16> %9545, %9538
  %9557 = add <16 x i16> %9556, %9552
  %9558 = add <16 x i16> %9548, %9541
  %9559 = add <16 x i16> %9558, %9555
  %9560 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9557, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9561 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9559, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9562 = shufflevector <16 x i16> %9560, <16 x i16> %9561, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9563 = lshr <32 x i16> %9562, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9564 = shufflevector <32 x i16> %9563, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9565 = add nsw i64 %9394, %.pre-phi3318
  %9566 = getelementptr inbounds i16, i16* %65, i64 %9565
  %9567 = bitcast i16* %9566 to <16 x i16>*
  store <16 x i16> %9564, <16 x i16>* %9567, align 2, !tbaa !401
  %9568 = shufflevector <32 x i16> %9563, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9569 = getelementptr inbounds i16, i16* %9566, i64 16
  %9570 = bitcast i16* %9569 to <16 x i16>*
  store <16 x i16> %9568, <16 x i16>* %9570, align 2, !tbaa !401
  %indvars.iv.next3121 = add nuw nsw i64 %indvars.iv3120, 1
  %.not2524 = icmp eq i64 %indvars.iv.next3121, %180
  br i1 %.not2524, label %"end for blur_y.s0.x.x.rebased697", label %"for blur_y.s0.x.x.rebased696"

"for blur_y.s0.x.x.rebased704":                   ; preds = %"for blur_y.s0.x.x.rebased704.preheader", %"consume blur_x712"
  %blur_y.s0.x.x.rebased706 = phi i32 [ %9649, %"consume blur_x712" ], [ 0, %"for blur_y.s0.x.x.rebased704.preheader" ]
  %9571 = add nsw i32 %blur_y.s0.x.x.rebased706, %t1582
  %a294 = shl nsw i32 %9571, 5
  %9572 = icmp sgt i32 %a14, %a294
  %b300 = select i1 %9572, i32 %a294, i32 %a14
  %9573 = icmp slt i32 %9571, 1
  %9574 = icmp sgt i32 %4, %a294
  %9575 = or i1 %9573, %9574
  br i1 %9575, label %"produce blur_x710", label %"consume blur_x712"

"end for blur_y.s0.x.x.rebased705":               ; preds = %"consume blur_x712", %"end for blur_y.s0.x.x.rebased697"
  br i1 %34, label %"produce blur_x716", label %after_bb713

"produce blur_x710":                              ; preds = %"for blur_y.s0.x.x.rebased704"
  %9576 = icmp slt i32 %b300, %4
  %blur_x.s0.x.v1.base.s711 = select i1 %9576, i32 %b300, i32 %4
  %t1141 = add nsw i32 %blur_x.s0.x.v1.base.s711, %t2113
  %9577 = sext i32 %t1141 to i64
  %9578 = getelementptr inbounds i16, i16* %read_input, i64 %9577
  %9579 = getelementptr inbounds i16, i16* %9578, i64 1
  %9580 = bitcast i16* %9579 to <16 x i16>*
  %9581 = load <16 x i16>, <16 x i16>* %9580, align 2, !tbaa !396
  %9582 = getelementptr inbounds i16, i16* %9578, i64 17
  %9583 = bitcast i16* %9582 to <16 x i16>*
  %9584 = load <16 x i16>, <16 x i16>* %9583, align 2, !tbaa !396
  %9585 = getelementptr inbounds i16, i16* %9578, i64 2
  %9586 = bitcast i16* %9585 to <16 x i16>*
  %9587 = load <16 x i16>, <16 x i16>* %9586, align 2, !tbaa !396
  %9588 = getelementptr inbounds i16, i16* %9578, i64 18
  %9589 = bitcast i16* %9588 to <16 x i16>*
  %9590 = load <16 x i16>, <16 x i16>* %9589, align 2, !tbaa !396
  %9591 = bitcast i16* %9578 to <16 x i16>*
  %9592 = load <16 x i16>, <16 x i16>* %9591, align 2, !tbaa !396
  %9593 = getelementptr inbounds i16, i16* %9578, i64 16
  %9594 = bitcast i16* %9593 to <16 x i16>*
  %9595 = load <16 x i16>, <16 x i16>* %9594, align 2, !tbaa !396
  %9596 = add <16 x i16> %9587, %9581
  %9597 = add <16 x i16> %9596, %9592
  %9598 = add <16 x i16> %9590, %9584
  %9599 = add <16 x i16> %9598, %9595
  %9600 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9597, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9601 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9599, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9602 = shufflevector <16 x i16> %9600, <16 x i16> %9601, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9603 = lshr <32 x i16> %9602, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9604 = shufflevector <32 x i16> %9603, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9605 = sext i32 %blur_x.s0.x.v1.base.s711 to i64
  %9606 = add nsw i64 %9605, %9486
  %9607 = getelementptr inbounds i16, i16* %blur_x, i64 %9606
  %9608 = bitcast i16* %9607 to <16 x i16>*
  store <16 x i16> %9604, <16 x i16>* %9608, align 2, !tbaa !399
  %9609 = shufflevector <32 x i16> %9603, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9610 = getelementptr inbounds i16, i16* %9607, i64 16
  %9611 = bitcast i16* %9610 to <16 x i16>*
  store <16 x i16> %9609, <16 x i16>* %9611, align 2, !tbaa !399
  br label %"consume blur_x712"

"consume blur_x712":                              ; preds = %"for blur_y.s0.x.x.rebased704", %"produce blur_x710"
  %9612 = sext i32 %b300 to i64
  %9613 = add nsw i64 %9489, %9612
  %9614 = getelementptr inbounds i16, i16* %blur_x, i64 %9613
  %9615 = bitcast i16* %9614 to <16 x i16>*
  %9616 = load <16 x i16>, <16 x i16>* %9615, align 2, !tbaa !399
  %9617 = getelementptr inbounds i16, i16* %9614, i64 16
  %9618 = bitcast i16* %9617 to <16 x i16>*
  %9619 = load <16 x i16>, <16 x i16>* %9618, align 2, !tbaa !399
  %9620 = add nsw i64 %9492, %9612
  %9621 = getelementptr inbounds i16, i16* %blur_x, i64 %9620
  %9622 = bitcast i16* %9621 to <16 x i16>*
  %9623 = load <16 x i16>, <16 x i16>* %9622, align 2, !tbaa !399
  %9624 = getelementptr inbounds i16, i16* %9621, i64 16
  %9625 = bitcast i16* %9624 to <16 x i16>*
  %9626 = load <16 x i16>, <16 x i16>* %9625, align 2, !tbaa !399
  %9627 = add nsw i64 %9495, %9612
  %9628 = getelementptr inbounds i16, i16* %blur_x, i64 %9627
  %9629 = bitcast i16* %9628 to <16 x i16>*
  %9630 = load <16 x i16>, <16 x i16>* %9629, align 2, !tbaa !399
  %9631 = getelementptr inbounds i16, i16* %9628, i64 16
  %9632 = bitcast i16* %9631 to <16 x i16>*
  %9633 = load <16 x i16>, <16 x i16>* %9632, align 2, !tbaa !399
  %9634 = add <16 x i16> %9623, %9616
  %9635 = add <16 x i16> %9634, %9630
  %9636 = add <16 x i16> %9626, %9619
  %9637 = add <16 x i16> %9636, %9633
  %9638 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9635, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9639 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9637, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9640 = shufflevector <16 x i16> %9638, <16 x i16> %9639, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9641 = lshr <32 x i16> %9640, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9642 = shufflevector <32 x i16> %9641, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9643 = add nsw i64 %9499, %9612
  %9644 = getelementptr inbounds i16, i16* %65, i64 %9643
  %9645 = bitcast i16* %9644 to <16 x i16>*
  store <16 x i16> %9642, <16 x i16>* %9645, align 2, !tbaa !401
  %9646 = shufflevector <32 x i16> %9641, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9647 = getelementptr inbounds i16, i16* %9644, i64 16
  %9648 = bitcast i16* %9647 to <16 x i16>*
  store <16 x i16> %9646, <16 x i16>* %9648, align 2, !tbaa !401
  %9649 = add nuw nsw i32 %blur_y.s0.x.x.rebased706, 1
  %.not2523 = icmp eq i32 %9649, %t1639
  br i1 %.not2523, label %"end for blur_y.s0.x.x.rebased705", label %"for blur_y.s0.x.x.rebased704"

after_bb713:                                      ; preds = %"end for blur_y.s0.x.x.rebased705", %"produce blur_x716"
  br i1 %99, label %"for blur_y.s0.x.x.rebased718.preheader", label %"end for blur_y.s0.x.x.rebased719", !prof !386

"for blur_y.s0.x.x.rebased718.preheader":         ; preds = %after_bb713
  %9650 = sext i32 %t1638 to i64
  %9651 = zext i32 %.pre-phi3260 to i64
  %9652 = mul nsw i64 %9651, %108
  %9653 = sub nsw i64 %9652, %95
  %9654 = zext i32 %.pre-phi to i64
  %9655 = mul nsw i64 %9654, %108
  %9656 = sub nsw i64 %9655, %95
  %9657 = zext i32 %.pre-phi3254 to i64
  %9658 = mul nsw i64 %9657, %108
  %9659 = sub nsw i64 %9658, %95
  %9660 = sext i32 %a26 to i64
  %9661 = add nsw i64 %9660, 30
  %9662 = mul nsw i64 %9661, %109
  %9663 = add nsw i64 %9662, %112
  br label %"for blur_y.s0.x.x.rebased718"

"produce blur_x716":                              ; preds = %"end for blur_y.s0.x.x.rebased705"
  %9664 = getelementptr inbounds i16, i16* %read_input, i64 %171
  %9665 = getelementptr inbounds i16, i16* %9664, i64 -31
  %9666 = bitcast i16* %9665 to <16 x i16>*
  %9667 = load <16 x i16>, <16 x i16>* %9666, align 2, !tbaa !396
  %9668 = getelementptr inbounds i16, i16* %9664, i64 -15
  %9669 = bitcast i16* %9668 to <16 x i16>*
  %9670 = load <16 x i16>, <16 x i16>* %9669, align 2, !tbaa !396
  %9671 = getelementptr inbounds i16, i16* %9664, i64 -30
  %9672 = bitcast i16* %9671 to <16 x i16>*
  %9673 = load <16 x i16>, <16 x i16>* %9672, align 2, !tbaa !396
  %9674 = getelementptr inbounds i16, i16* %9664, i64 -14
  %9675 = bitcast i16* %9674 to <16 x i16>*
  %9676 = load <16 x i16>, <16 x i16>* %9675, align 2, !tbaa !396
  %9677 = getelementptr inbounds i16, i16* %9664, i64 -32
  %9678 = bitcast i16* %9677 to <16 x i16>*
  %9679 = load <16 x i16>, <16 x i16>* %9678, align 2, !tbaa !396
  %9680 = getelementptr inbounds i16, i16* %9664, i64 -16
  %9681 = bitcast i16* %9680 to <16 x i16>*
  %9682 = load <16 x i16>, <16 x i16>* %9681, align 2, !tbaa !396
  %9683 = add <16 x i16> %9673, %9667
  %9684 = add <16 x i16> %9683, %9679
  %9685 = add <16 x i16> %9676, %9670
  %9686 = add <16 x i16> %9685, %9682
  %9687 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9684, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9688 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9686, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9689 = shufflevector <16 x i16> %9687, <16 x i16> %9688, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9690 = lshr <32 x i16> %9689, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9691 = shufflevector <32 x i16> %9690, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9692 = zext i32 %.pre-phi to i64
  %9693 = mul nsw i64 %96, %9692
  %9694 = add nsw i64 %98, %9693
  %9695 = getelementptr inbounds i16, i16* %blur_x, i64 %9694
  %9696 = getelementptr inbounds i16, i16* %9695, i64 -32
  %9697 = bitcast i16* %9696 to <16 x i16>*
  store <16 x i16> %9691, <16 x i16>* %9697, align 2, !tbaa !399
  %9698 = shufflevector <32 x i16> %9690, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9699 = getelementptr inbounds i16, i16* %9695, i64 -16
  %9700 = bitcast i16* %9699 to <16 x i16>*
  store <16 x i16> %9698, <16 x i16>* %9700, align 2, !tbaa !399
  %9701 = zext i32 %.pre-phi3260 to i64
  %9702 = mul nsw i64 %9701, %108
  %9703 = add nsw i64 %9702, %93
  %9704 = getelementptr inbounds i16, i16* %blur_x, i64 %9703
  %9705 = getelementptr inbounds i16, i16* %9704, i64 -32
  %9706 = bitcast i16* %9705 to <16 x i16>*
  %9707 = load <16 x i16>, <16 x i16>* %9706, align 2, !tbaa !399
  %9708 = getelementptr inbounds i16, i16* %9704, i64 -16
  %9709 = bitcast i16* %9708 to <16 x i16>*
  %9710 = load <16 x i16>, <16 x i16>* %9709, align 2, !tbaa !399
  %9711 = mul nsw i64 %9692, %108
  %9712 = add nsw i64 %9711, %93
  %9713 = getelementptr inbounds i16, i16* %blur_x, i64 %9712
  %9714 = getelementptr inbounds i16, i16* %9713, i64 -32
  %9715 = bitcast i16* %9714 to <16 x i16>*
  %9716 = load <16 x i16>, <16 x i16>* %9715, align 2, !tbaa !399
  %9717 = getelementptr inbounds i16, i16* %9713, i64 -16
  %9718 = bitcast i16* %9717 to <16 x i16>*
  %9719 = load <16 x i16>, <16 x i16>* %9718, align 2, !tbaa !399
  %9720 = zext i32 %.pre-phi3254 to i64
  %9721 = mul nsw i64 %9720, %108
  %9722 = add nsw i64 %9721, %93
  %9723 = getelementptr inbounds i16, i16* %blur_x, i64 %9722
  %9724 = getelementptr inbounds i16, i16* %9723, i64 -32
  %9725 = bitcast i16* %9724 to <16 x i16>*
  %9726 = load <16 x i16>, <16 x i16>* %9725, align 2, !tbaa !399
  %9727 = getelementptr inbounds i16, i16* %9723, i64 -16
  %9728 = bitcast i16* %9727 to <16 x i16>*
  %9729 = load <16 x i16>, <16 x i16>* %9728, align 2, !tbaa !399
  %9730 = add <16 x i16> %9716, %9707
  %9731 = add <16 x i16> %9730, %9726
  %9732 = add <16 x i16> %9719, %9710
  %9733 = add <16 x i16> %9732, %9729
  %9734 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9731, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9735 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9733, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9736 = shufflevector <16 x i16> %9734, <16 x i16> %9735, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9737 = lshr <32 x i16> %9736, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9738 = shufflevector <32 x i16> %9737, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9739 = sext i32 %a26 to i64
  %9740 = add nsw i64 %9739, 30
  %9741 = mul nsw i64 %9740, %109
  %9742 = add nsw i64 %111, %9741
  %9743 = getelementptr inbounds i16, i16* %65, i64 %9742
  %9744 = getelementptr inbounds i16, i16* %9743, i64 -32
  %9745 = bitcast i16* %9744 to <16 x i16>*
  store <16 x i16> %9738, <16 x i16>* %9745, align 2, !tbaa !401
  %9746 = shufflevector <32 x i16> %9737, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9747 = getelementptr inbounds i16, i16* %9743, i64 -16
  %9748 = bitcast i16* %9747 to <16 x i16>*
  store <16 x i16> %9746, <16 x i16>* %9748, align 2, !tbaa !401
  br label %after_bb713

"for blur_y.s0.x.x.rebased718":                   ; preds = %"for blur_y.s0.x.x.rebased718.preheader", %"consume blur_x725"
  %indvars.iv3123 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased718.preheader" ], [ %indvars.iv.next3124, %"consume blur_x725" ]
  %9749 = add nsw i64 %indvars.iv3123, %100
  %9750 = icmp slt i64 %9749, 1
  %9751 = trunc i64 %9749 to i32
  %9752 = shl nsw i32 %9751, 5
  %9753 = icmp sgt i32 %4, %9752
  %9754 = or i1 %9750, %9753
  br i1 %9754, label %"produce blur_x724", label %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge"

"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased718"
  %.pre3319 = shl nsw i64 %9749, 5
  br label %"consume blur_x725"

"end for blur_y.s0.x.x.rebased719":               ; preds = %"consume blur_x725", %after_bb713
  br i1 %101, label %"for blur_y.s0.x.x.rebased726.preheader", label %"end for blur_y.s0.x.x.rebased727", !prof !386

"for blur_y.s0.x.x.rebased726.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased719"
  %9755 = sext i32 %t1638 to i64
  %9756 = zext i32 %.pre-phi3260 to i64
  %9757 = mul nsw i64 %9756, %108
  %9758 = sub nsw i64 %9757, %95
  %9759 = zext i32 %.pre-phi to i64
  %9760 = mul nsw i64 %9759, %108
  %9761 = sub nsw i64 %9760, %95
  %9762 = zext i32 %.pre-phi3254 to i64
  %9763 = mul nsw i64 %9762, %108
  %9764 = sub nsw i64 %9763, %95
  %9765 = sext i32 %a26 to i64
  %9766 = add nsw i64 %9765, 30
  %9767 = mul nsw i64 %9766, %109
  %9768 = add nsw i64 %9767, %112
  br label %"for blur_y.s0.x.x.rebased726"

"produce blur_x724":                              ; preds = %"for blur_y.s0.x.x.rebased718"
  %t1152 = add nsw i32 %9752, %t2129
  %9769 = sext i32 %t1152 to i64
  %9770 = getelementptr inbounds i16, i16* %read_input, i64 %9769
  %9771 = getelementptr inbounds i16, i16* %9770, i64 1
  %9772 = bitcast i16* %9771 to <16 x i16>*
  %9773 = load <16 x i16>, <16 x i16>* %9772, align 2, !tbaa !396
  %9774 = getelementptr inbounds i16, i16* %9770, i64 17
  %9775 = bitcast i16* %9774 to <16 x i16>*
  %9776 = load <16 x i16>, <16 x i16>* %9775, align 2, !tbaa !396
  %9777 = getelementptr inbounds i16, i16* %9770, i64 2
  %9778 = bitcast i16* %9777 to <16 x i16>*
  %9779 = load <16 x i16>, <16 x i16>* %9778, align 2, !tbaa !396
  %9780 = getelementptr inbounds i16, i16* %9770, i64 18
  %9781 = bitcast i16* %9780 to <16 x i16>*
  %9782 = load <16 x i16>, <16 x i16>* %9781, align 2, !tbaa !396
  %9783 = bitcast i16* %9770 to <16 x i16>*
  %9784 = load <16 x i16>, <16 x i16>* %9783, align 2, !tbaa !396
  %9785 = getelementptr inbounds i16, i16* %9770, i64 16
  %9786 = bitcast i16* %9785 to <16 x i16>*
  %9787 = load <16 x i16>, <16 x i16>* %9786, align 2, !tbaa !396
  %9788 = add <16 x i16> %9779, %9773
  %9789 = add <16 x i16> %9788, %9784
  %9790 = add <16 x i16> %9782, %9776
  %9791 = add <16 x i16> %9790, %9787
  %9792 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9789, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9793 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9791, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9794 = shufflevector <16 x i16> %9792, <16 x i16> %9793, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9795 = lshr <32 x i16> %9794, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9796 = shufflevector <32 x i16> %9795, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9797 = shl nsw i64 %9749, 5
  %9798 = add nsw i64 %9797, %9650
  %9799 = getelementptr inbounds i16, i16* %blur_x, i64 %9798
  %9800 = bitcast i16* %9799 to <16 x i16>*
  store <16 x i16> %9796, <16 x i16>* %9800, align 2, !tbaa !399
  %9801 = shufflevector <32 x i16> %9795, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9802 = getelementptr inbounds i16, i16* %9799, i64 16
  %9803 = bitcast i16* %9802 to <16 x i16>*
  store <16 x i16> %9801, <16 x i16>* %9803, align 2, !tbaa !399
  br label %"consume blur_x725"

"consume blur_x725":                              ; preds = %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge", %"produce blur_x724"
  %.pre-phi3320 = phi i64 [ %.pre3319, %"for blur_y.s0.x.x.rebased718.consume blur_x725_crit_edge" ], [ %9797, %"produce blur_x724" ]
  %9804 = add nsw i64 %9653, %.pre-phi3320
  %9805 = getelementptr inbounds i16, i16* %blur_x, i64 %9804
  %9806 = bitcast i16* %9805 to <16 x i16>*
  %9807 = load <16 x i16>, <16 x i16>* %9806, align 2, !tbaa !399
  %9808 = getelementptr inbounds i16, i16* %9805, i64 16
  %9809 = bitcast i16* %9808 to <16 x i16>*
  %9810 = load <16 x i16>, <16 x i16>* %9809, align 2, !tbaa !399
  %9811 = add nsw i64 %9656, %.pre-phi3320
  %9812 = getelementptr inbounds i16, i16* %blur_x, i64 %9811
  %9813 = bitcast i16* %9812 to <16 x i16>*
  %9814 = load <16 x i16>, <16 x i16>* %9813, align 2, !tbaa !399
  %9815 = getelementptr inbounds i16, i16* %9812, i64 16
  %9816 = bitcast i16* %9815 to <16 x i16>*
  %9817 = load <16 x i16>, <16 x i16>* %9816, align 2, !tbaa !399
  %9818 = add nsw i64 %9659, %.pre-phi3320
  %9819 = getelementptr inbounds i16, i16* %blur_x, i64 %9818
  %9820 = bitcast i16* %9819 to <16 x i16>*
  %9821 = load <16 x i16>, <16 x i16>* %9820, align 2, !tbaa !399
  %9822 = getelementptr inbounds i16, i16* %9819, i64 16
  %9823 = bitcast i16* %9822 to <16 x i16>*
  %9824 = load <16 x i16>, <16 x i16>* %9823, align 2, !tbaa !399
  %9825 = add <16 x i16> %9814, %9807
  %9826 = add <16 x i16> %9825, %9821
  %9827 = add <16 x i16> %9817, %9810
  %9828 = add <16 x i16> %9827, %9824
  %9829 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9826, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9830 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9828, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9831 = shufflevector <16 x i16> %9829, <16 x i16> %9830, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9832 = lshr <32 x i16> %9831, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9833 = shufflevector <32 x i16> %9832, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9834 = add nsw i64 %9663, %.pre-phi3320
  %9835 = getelementptr inbounds i16, i16* %65, i64 %9834
  %9836 = bitcast i16* %9835 to <16 x i16>*
  store <16 x i16> %9833, <16 x i16>* %9836, align 2, !tbaa !401
  %9837 = shufflevector <32 x i16> %9832, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9838 = getelementptr inbounds i16, i16* %9835, i64 16
  %9839 = bitcast i16* %9838 to <16 x i16>*
  store <16 x i16> %9837, <16 x i16>* %9839, align 2, !tbaa !401
  %indvars.iv.next3124 = add nuw nsw i64 %indvars.iv3123, 1
  %.not2522 = icmp eq i64 %indvars.iv.next3124, %180
  br i1 %.not2522, label %"end for blur_y.s0.x.x.rebased719", label %"for blur_y.s0.x.x.rebased718"

"for blur_y.s0.x.x.rebased726":                   ; preds = %"for blur_y.s0.x.x.rebased726.preheader", %"consume blur_x734"
  %blur_y.s0.x.x.rebased728 = phi i32 [ %9918, %"consume blur_x734" ], [ 0, %"for blur_y.s0.x.x.rebased726.preheader" ]
  %9840 = add nsw i32 %blur_y.s0.x.x.rebased728, %t1582
  %a301 = shl nsw i32 %9840, 5
  %9841 = icmp sgt i32 %a14, %a301
  %b307 = select i1 %9841, i32 %a301, i32 %a14
  %9842 = icmp slt i32 %9840, 1
  %9843 = icmp sgt i32 %4, %a301
  %9844 = or i1 %9842, %9843
  br i1 %9844, label %"produce blur_x732", label %"consume blur_x734"

"end for blur_y.s0.x.x.rebased727":               ; preds = %"consume blur_x734", %"end for blur_y.s0.x.x.rebased719"
  br i1 %34, label %"produce blur_x738", label %after_bb735

"produce blur_x732":                              ; preds = %"for blur_y.s0.x.x.rebased726"
  %9845 = icmp slt i32 %b307, %4
  %blur_x.s0.x.v1.base.s733 = select i1 %9845, i32 %b307, i32 %4
  %t1157 = add nsw i32 %blur_x.s0.x.v1.base.s733, %t2129
  %9846 = sext i32 %t1157 to i64
  %9847 = getelementptr inbounds i16, i16* %read_input, i64 %9846
  %9848 = getelementptr inbounds i16, i16* %9847, i64 1
  %9849 = bitcast i16* %9848 to <16 x i16>*
  %9850 = load <16 x i16>, <16 x i16>* %9849, align 2, !tbaa !396
  %9851 = getelementptr inbounds i16, i16* %9847, i64 17
  %9852 = bitcast i16* %9851 to <16 x i16>*
  %9853 = load <16 x i16>, <16 x i16>* %9852, align 2, !tbaa !396
  %9854 = getelementptr inbounds i16, i16* %9847, i64 2
  %9855 = bitcast i16* %9854 to <16 x i16>*
  %9856 = load <16 x i16>, <16 x i16>* %9855, align 2, !tbaa !396
  %9857 = getelementptr inbounds i16, i16* %9847, i64 18
  %9858 = bitcast i16* %9857 to <16 x i16>*
  %9859 = load <16 x i16>, <16 x i16>* %9858, align 2, !tbaa !396
  %9860 = bitcast i16* %9847 to <16 x i16>*
  %9861 = load <16 x i16>, <16 x i16>* %9860, align 2, !tbaa !396
  %9862 = getelementptr inbounds i16, i16* %9847, i64 16
  %9863 = bitcast i16* %9862 to <16 x i16>*
  %9864 = load <16 x i16>, <16 x i16>* %9863, align 2, !tbaa !396
  %9865 = add <16 x i16> %9856, %9850
  %9866 = add <16 x i16> %9865, %9861
  %9867 = add <16 x i16> %9859, %9853
  %9868 = add <16 x i16> %9867, %9864
  %9869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9866, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9870 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9868, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9871 = shufflevector <16 x i16> %9869, <16 x i16> %9870, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9872 = lshr <32 x i16> %9871, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9873 = shufflevector <32 x i16> %9872, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9874 = sext i32 %blur_x.s0.x.v1.base.s733 to i64
  %9875 = add nsw i64 %9874, %9755
  %9876 = getelementptr inbounds i16, i16* %blur_x, i64 %9875
  %9877 = bitcast i16* %9876 to <16 x i16>*
  store <16 x i16> %9873, <16 x i16>* %9877, align 2, !tbaa !399
  %9878 = shufflevector <32 x i16> %9872, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9879 = getelementptr inbounds i16, i16* %9876, i64 16
  %9880 = bitcast i16* %9879 to <16 x i16>*
  store <16 x i16> %9878, <16 x i16>* %9880, align 2, !tbaa !399
  br label %"consume blur_x734"

"consume blur_x734":                              ; preds = %"for blur_y.s0.x.x.rebased726", %"produce blur_x732"
  %9881 = sext i32 %b307 to i64
  %9882 = add nsw i64 %9758, %9881
  %9883 = getelementptr inbounds i16, i16* %blur_x, i64 %9882
  %9884 = bitcast i16* %9883 to <16 x i16>*
  %9885 = load <16 x i16>, <16 x i16>* %9884, align 2, !tbaa !399
  %9886 = getelementptr inbounds i16, i16* %9883, i64 16
  %9887 = bitcast i16* %9886 to <16 x i16>*
  %9888 = load <16 x i16>, <16 x i16>* %9887, align 2, !tbaa !399
  %9889 = add nsw i64 %9761, %9881
  %9890 = getelementptr inbounds i16, i16* %blur_x, i64 %9889
  %9891 = bitcast i16* %9890 to <16 x i16>*
  %9892 = load <16 x i16>, <16 x i16>* %9891, align 2, !tbaa !399
  %9893 = getelementptr inbounds i16, i16* %9890, i64 16
  %9894 = bitcast i16* %9893 to <16 x i16>*
  %9895 = load <16 x i16>, <16 x i16>* %9894, align 2, !tbaa !399
  %9896 = add nsw i64 %9764, %9881
  %9897 = getelementptr inbounds i16, i16* %blur_x, i64 %9896
  %9898 = bitcast i16* %9897 to <16 x i16>*
  %9899 = load <16 x i16>, <16 x i16>* %9898, align 2, !tbaa !399
  %9900 = getelementptr inbounds i16, i16* %9897, i64 16
  %9901 = bitcast i16* %9900 to <16 x i16>*
  %9902 = load <16 x i16>, <16 x i16>* %9901, align 2, !tbaa !399
  %9903 = add <16 x i16> %9892, %9885
  %9904 = add <16 x i16> %9903, %9899
  %9905 = add <16 x i16> %9895, %9888
  %9906 = add <16 x i16> %9905, %9902
  %9907 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9904, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9908 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9906, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9909 = shufflevector <16 x i16> %9907, <16 x i16> %9908, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9910 = lshr <32 x i16> %9909, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9911 = shufflevector <32 x i16> %9910, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9912 = add nsw i64 %9768, %9881
  %9913 = getelementptr inbounds i16, i16* %65, i64 %9912
  %9914 = bitcast i16* %9913 to <16 x i16>*
  store <16 x i16> %9911, <16 x i16>* %9914, align 2, !tbaa !401
  %9915 = shufflevector <32 x i16> %9910, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9916 = getelementptr inbounds i16, i16* %9913, i64 16
  %9917 = bitcast i16* %9916 to <16 x i16>*
  store <16 x i16> %9915, <16 x i16>* %9917, align 2, !tbaa !401
  %9918 = add nuw nsw i32 %blur_y.s0.x.x.rebased728, 1
  %.not2521 = icmp eq i32 %9918, %t1639
  br i1 %.not2521, label %"end for blur_y.s0.x.x.rebased727", label %"for blur_y.s0.x.x.rebased726"

after_bb735:                                      ; preds = %"end for blur_y.s0.x.x.rebased727", %"produce blur_x738"
  br i1 %99, label %"for blur_y.s0.x.x.rebased740.preheader", label %"end for blur_y.s0.x.x.rebased741", !prof !386

"for blur_y.s0.x.x.rebased740.preheader":         ; preds = %after_bb735
  %9919 = sext i32 %t1644 to i64
  %9920 = zext i32 %.pre-phi to i64
  %9921 = mul nsw i64 %9920, %108
  %9922 = sub nsw i64 %9921, %95
  %9923 = zext i32 %.pre-phi3250 to i64
  %9924 = mul nsw i64 %9923, %108
  %9925 = sub nsw i64 %9924, %95
  %9926 = zext i32 %.pre-phi3260 to i64
  %9927 = mul nsw i64 %9926, %108
  %9928 = sub nsw i64 %9927, %95
  %9929 = sext i32 %a26 to i64
  %9930 = add nsw i64 %9929, 31
  %9931 = mul nsw i64 %9930, %109
  %9932 = add nsw i64 %9931, %112
  br label %"for blur_y.s0.x.x.rebased740"

"produce blur_x738":                              ; preds = %"end for blur_y.s0.x.x.rebased727"
  %9933 = getelementptr inbounds i16, i16* %read_input, i64 %173
  %9934 = getelementptr inbounds i16, i16* %9933, i64 -31
  %9935 = bitcast i16* %9934 to <16 x i16>*
  %9936 = load <16 x i16>, <16 x i16>* %9935, align 2, !tbaa !396
  %9937 = getelementptr inbounds i16, i16* %9933, i64 -15
  %9938 = bitcast i16* %9937 to <16 x i16>*
  %9939 = load <16 x i16>, <16 x i16>* %9938, align 2, !tbaa !396
  %9940 = getelementptr inbounds i16, i16* %9933, i64 -30
  %9941 = bitcast i16* %9940 to <16 x i16>*
  %9942 = load <16 x i16>, <16 x i16>* %9941, align 2, !tbaa !396
  %9943 = getelementptr inbounds i16, i16* %9933, i64 -14
  %9944 = bitcast i16* %9943 to <16 x i16>*
  %9945 = load <16 x i16>, <16 x i16>* %9944, align 2, !tbaa !396
  %9946 = getelementptr inbounds i16, i16* %9933, i64 -32
  %9947 = bitcast i16* %9946 to <16 x i16>*
  %9948 = load <16 x i16>, <16 x i16>* %9947, align 2, !tbaa !396
  %9949 = getelementptr inbounds i16, i16* %9933, i64 -16
  %9950 = bitcast i16* %9949 to <16 x i16>*
  %9951 = load <16 x i16>, <16 x i16>* %9950, align 2, !tbaa !396
  %9952 = add <16 x i16> %9942, %9936
  %9953 = add <16 x i16> %9952, %9948
  %9954 = add <16 x i16> %9945, %9939
  %9955 = add <16 x i16> %9954, %9951
  %9956 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9953, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9957 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %9955, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %9958 = shufflevector <16 x i16> %9956, <16 x i16> %9957, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9959 = lshr <32 x i16> %9958, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %9960 = shufflevector <32 x i16> %9959, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %9961 = zext i32 %.pre-phi3250 to i64
  %9962 = mul nsw i64 %96, %9961
  %9963 = add nsw i64 %98, %9962
  %9964 = getelementptr inbounds i16, i16* %blur_x, i64 %9963
  %9965 = getelementptr inbounds i16, i16* %9964, i64 -32
  %9966 = bitcast i16* %9965 to <16 x i16>*
  store <16 x i16> %9960, <16 x i16>* %9966, align 2, !tbaa !399
  %9967 = shufflevector <32 x i16> %9959, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %9968 = getelementptr inbounds i16, i16* %9964, i64 -16
  %9969 = bitcast i16* %9968 to <16 x i16>*
  store <16 x i16> %9967, <16 x i16>* %9969, align 2, !tbaa !399
  %9970 = zext i32 %.pre-phi to i64
  %9971 = mul nsw i64 %9970, %108
  %9972 = add nsw i64 %9971, %93
  %9973 = getelementptr inbounds i16, i16* %blur_x, i64 %9972
  %9974 = getelementptr inbounds i16, i16* %9973, i64 -32
  %9975 = bitcast i16* %9974 to <16 x i16>*
  %9976 = load <16 x i16>, <16 x i16>* %9975, align 2, !tbaa !399
  %9977 = getelementptr inbounds i16, i16* %9973, i64 -16
  %9978 = bitcast i16* %9977 to <16 x i16>*
  %9979 = load <16 x i16>, <16 x i16>* %9978, align 2, !tbaa !399
  %9980 = mul nsw i64 %9961, %108
  %9981 = add nsw i64 %9980, %93
  %9982 = getelementptr inbounds i16, i16* %blur_x, i64 %9981
  %9983 = getelementptr inbounds i16, i16* %9982, i64 -32
  %9984 = bitcast i16* %9983 to <16 x i16>*
  %9985 = load <16 x i16>, <16 x i16>* %9984, align 2, !tbaa !399
  %9986 = getelementptr inbounds i16, i16* %9982, i64 -16
  %9987 = bitcast i16* %9986 to <16 x i16>*
  %9988 = load <16 x i16>, <16 x i16>* %9987, align 2, !tbaa !399
  %9989 = zext i32 %.pre-phi3260 to i64
  %9990 = mul nsw i64 %9989, %108
  %9991 = add nsw i64 %9990, %93
  %9992 = getelementptr inbounds i16, i16* %blur_x, i64 %9991
  %9993 = getelementptr inbounds i16, i16* %9992, i64 -32
  %9994 = bitcast i16* %9993 to <16 x i16>*
  %9995 = load <16 x i16>, <16 x i16>* %9994, align 2, !tbaa !399
  %9996 = getelementptr inbounds i16, i16* %9992, i64 -16
  %9997 = bitcast i16* %9996 to <16 x i16>*
  %9998 = load <16 x i16>, <16 x i16>* %9997, align 2, !tbaa !399
  %9999 = add <16 x i16> %9985, %9976
  %10000 = add <16 x i16> %9999, %9995
  %10001 = add <16 x i16> %9988, %9979
  %10002 = add <16 x i16> %10001, %9998
  %10003 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10000, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10004 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10002, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10005 = shufflevector <16 x i16> %10003, <16 x i16> %10004, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10006 = lshr <32 x i16> %10005, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10007 = shufflevector <32 x i16> %10006, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10008 = sext i32 %a26 to i64
  %10009 = add nsw i64 %10008, 31
  %10010 = mul nsw i64 %10009, %109
  %10011 = add nsw i64 %111, %10010
  %10012 = getelementptr inbounds i16, i16* %65, i64 %10011
  %10013 = getelementptr inbounds i16, i16* %10012, i64 -32
  %10014 = bitcast i16* %10013 to <16 x i16>*
  store <16 x i16> %10007, <16 x i16>* %10014, align 2, !tbaa !401
  %10015 = shufflevector <32 x i16> %10006, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10016 = getelementptr inbounds i16, i16* %10012, i64 -16
  %10017 = bitcast i16* %10016 to <16 x i16>*
  store <16 x i16> %10015, <16 x i16>* %10017, align 2, !tbaa !401
  br label %after_bb735

"for blur_y.s0.x.x.rebased740":                   ; preds = %"for blur_y.s0.x.x.rebased740.preheader", %"consume blur_x747"
  %indvars.iv3126 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased740.preheader" ], [ %indvars.iv.next3127, %"consume blur_x747" ]
  %10018 = add nsw i64 %indvars.iv3126, %100
  %10019 = icmp slt i64 %10018, 1
  %10020 = trunc i64 %10018 to i32
  %10021 = shl nsw i32 %10020, 5
  %10022 = icmp sgt i32 %4, %10021
  %10023 = or i1 %10019, %10022
  br i1 %10023, label %"produce blur_x746", label %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge"

"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased740"
  %.pre3321 = shl nsw i64 %10018, 5
  br label %"consume blur_x747"

"end for blur_y.s0.x.x.rebased741":               ; preds = %"consume blur_x747", %after_bb735
  br i1 %101, label %"for blur_y.s0.x.x.rebased748.preheader", label %"end for blur_y.s0.x.x.rebased749", !prof !386

"for blur_y.s0.x.x.rebased748.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased741"
  %10024 = sext i32 %t1644 to i64
  %10025 = zext i32 %.pre-phi to i64
  %10026 = mul nsw i64 %10025, %108
  %10027 = sub nsw i64 %10026, %95
  %10028 = zext i32 %.pre-phi3250 to i64
  %10029 = mul nsw i64 %10028, %108
  %10030 = sub nsw i64 %10029, %95
  %10031 = zext i32 %.pre-phi3260 to i64
  %10032 = mul nsw i64 %10031, %108
  %10033 = sub nsw i64 %10032, %95
  %10034 = sext i32 %a26 to i64
  %10035 = add nsw i64 %10034, 31
  %10036 = mul nsw i64 %10035, %109
  %10037 = add nsw i64 %10036, %112
  br label %"for blur_y.s0.x.x.rebased748"

"produce blur_x746":                              ; preds = %"for blur_y.s0.x.x.rebased740"
  %t1168 = add nsw i32 %10021, %t2145
  %10038 = sext i32 %t1168 to i64
  %10039 = getelementptr inbounds i16, i16* %read_input, i64 %10038
  %10040 = getelementptr inbounds i16, i16* %10039, i64 1
  %10041 = bitcast i16* %10040 to <16 x i16>*
  %10042 = load <16 x i16>, <16 x i16>* %10041, align 2, !tbaa !396
  %10043 = getelementptr inbounds i16, i16* %10039, i64 17
  %10044 = bitcast i16* %10043 to <16 x i16>*
  %10045 = load <16 x i16>, <16 x i16>* %10044, align 2, !tbaa !396
  %10046 = getelementptr inbounds i16, i16* %10039, i64 2
  %10047 = bitcast i16* %10046 to <16 x i16>*
  %10048 = load <16 x i16>, <16 x i16>* %10047, align 2, !tbaa !396
  %10049 = getelementptr inbounds i16, i16* %10039, i64 18
  %10050 = bitcast i16* %10049 to <16 x i16>*
  %10051 = load <16 x i16>, <16 x i16>* %10050, align 2, !tbaa !396
  %10052 = bitcast i16* %10039 to <16 x i16>*
  %10053 = load <16 x i16>, <16 x i16>* %10052, align 2, !tbaa !396
  %10054 = getelementptr inbounds i16, i16* %10039, i64 16
  %10055 = bitcast i16* %10054 to <16 x i16>*
  %10056 = load <16 x i16>, <16 x i16>* %10055, align 2, !tbaa !396
  %10057 = add <16 x i16> %10048, %10042
  %10058 = add <16 x i16> %10057, %10053
  %10059 = add <16 x i16> %10051, %10045
  %10060 = add <16 x i16> %10059, %10056
  %10061 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10058, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10062 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10060, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10063 = shufflevector <16 x i16> %10061, <16 x i16> %10062, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10064 = lshr <32 x i16> %10063, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10065 = shufflevector <32 x i16> %10064, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10066 = shl nsw i64 %10018, 5
  %10067 = add nsw i64 %10066, %9919
  %10068 = getelementptr inbounds i16, i16* %blur_x, i64 %10067
  %10069 = bitcast i16* %10068 to <16 x i16>*
  store <16 x i16> %10065, <16 x i16>* %10069, align 2, !tbaa !399
  %10070 = shufflevector <32 x i16> %10064, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10071 = getelementptr inbounds i16, i16* %10068, i64 16
  %10072 = bitcast i16* %10071 to <16 x i16>*
  store <16 x i16> %10070, <16 x i16>* %10072, align 2, !tbaa !399
  br label %"consume blur_x747"

"consume blur_x747":                              ; preds = %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge", %"produce blur_x746"
  %.pre-phi3322 = phi i64 [ %.pre3321, %"for blur_y.s0.x.x.rebased740.consume blur_x747_crit_edge" ], [ %10066, %"produce blur_x746" ]
  %10073 = add nsw i64 %9922, %.pre-phi3322
  %10074 = getelementptr inbounds i16, i16* %blur_x, i64 %10073
  %10075 = bitcast i16* %10074 to <16 x i16>*
  %10076 = load <16 x i16>, <16 x i16>* %10075, align 2, !tbaa !399
  %10077 = getelementptr inbounds i16, i16* %10074, i64 16
  %10078 = bitcast i16* %10077 to <16 x i16>*
  %10079 = load <16 x i16>, <16 x i16>* %10078, align 2, !tbaa !399
  %10080 = add nsw i64 %9925, %.pre-phi3322
  %10081 = getelementptr inbounds i16, i16* %blur_x, i64 %10080
  %10082 = bitcast i16* %10081 to <16 x i16>*
  %10083 = load <16 x i16>, <16 x i16>* %10082, align 2, !tbaa !399
  %10084 = getelementptr inbounds i16, i16* %10081, i64 16
  %10085 = bitcast i16* %10084 to <16 x i16>*
  %10086 = load <16 x i16>, <16 x i16>* %10085, align 2, !tbaa !399
  %10087 = add nsw i64 %9928, %.pre-phi3322
  %10088 = getelementptr inbounds i16, i16* %blur_x, i64 %10087
  %10089 = bitcast i16* %10088 to <16 x i16>*
  %10090 = load <16 x i16>, <16 x i16>* %10089, align 2, !tbaa !399
  %10091 = getelementptr inbounds i16, i16* %10088, i64 16
  %10092 = bitcast i16* %10091 to <16 x i16>*
  %10093 = load <16 x i16>, <16 x i16>* %10092, align 2, !tbaa !399
  %10094 = add <16 x i16> %10083, %10076
  %10095 = add <16 x i16> %10094, %10090
  %10096 = add <16 x i16> %10086, %10079
  %10097 = add <16 x i16> %10096, %10093
  %10098 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10095, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10099 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10097, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10100 = shufflevector <16 x i16> %10098, <16 x i16> %10099, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10101 = lshr <32 x i16> %10100, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10102 = shufflevector <32 x i16> %10101, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10103 = add nsw i64 %9932, %.pre-phi3322
  %10104 = getelementptr inbounds i16, i16* %65, i64 %10103
  %10105 = bitcast i16* %10104 to <16 x i16>*
  store <16 x i16> %10102, <16 x i16>* %10105, align 2, !tbaa !401
  %10106 = shufflevector <32 x i16> %10101, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10107 = getelementptr inbounds i16, i16* %10104, i64 16
  %10108 = bitcast i16* %10107 to <16 x i16>*
  store <16 x i16> %10106, <16 x i16>* %10108, align 2, !tbaa !401
  %indvars.iv.next3127 = add nuw nsw i64 %indvars.iv3126, 1
  %.not2520 = icmp eq i64 %indvars.iv.next3127, %180
  br i1 %.not2520, label %"end for blur_y.s0.x.x.rebased741", label %"for blur_y.s0.x.x.rebased740"

"for blur_y.s0.x.x.rebased748":                   ; preds = %"for blur_y.s0.x.x.rebased748.preheader", %"consume blur_x756"
  %blur_y.s0.x.x.rebased750 = phi i32 [ %10188, %"consume blur_x756" ], [ 0, %"for blur_y.s0.x.x.rebased748.preheader" ]
  %10109 = add nsw i32 %blur_y.s0.x.x.rebased750, %t1582
  %a308 = shl nsw i32 %10109, 5
  %10110 = icmp sgt i32 %a14, %a308
  %b314 = select i1 %10110, i32 %a308, i32 %a14
  %10111 = icmp slt i32 %10109, 1
  %10112 = icmp sgt i32 %4, %a308
  %10113 = or i1 %10111, %10112
  br i1 %10113, label %"produce blur_x754", label %"consume blur_x756"

"end for blur_y.s0.x.x.rebased749":               ; preds = %"consume blur_x756", %"end for blur_y.s0.x.x.rebased741"
  %10114 = add nuw nsw i32 %blur_y.s0.y.y, 1
  %.not2518 = icmp eq i32 %10114, %t1568
  br i1 %.not2518, label %"end for blur_y.s0.y.y.loopexit", label %"for blur_y.s0.y.y"

"produce blur_x754":                              ; preds = %"for blur_y.s0.x.x.rebased748"
  %10115 = icmp slt i32 %b314, %4
  %blur_x.s0.x.v1.base.s755 = select i1 %10115, i32 %b314, i32 %4
  %t1173 = add nsw i32 %blur_x.s0.x.v1.base.s755, %t2145
  %10116 = sext i32 %t1173 to i64
  %10117 = getelementptr inbounds i16, i16* %read_input, i64 %10116
  %10118 = getelementptr inbounds i16, i16* %10117, i64 1
  %10119 = bitcast i16* %10118 to <16 x i16>*
  %10120 = load <16 x i16>, <16 x i16>* %10119, align 2, !tbaa !396
  %10121 = getelementptr inbounds i16, i16* %10117, i64 17
  %10122 = bitcast i16* %10121 to <16 x i16>*
  %10123 = load <16 x i16>, <16 x i16>* %10122, align 2, !tbaa !396
  %10124 = getelementptr inbounds i16, i16* %10117, i64 2
  %10125 = bitcast i16* %10124 to <16 x i16>*
  %10126 = load <16 x i16>, <16 x i16>* %10125, align 2, !tbaa !396
  %10127 = getelementptr inbounds i16, i16* %10117, i64 18
  %10128 = bitcast i16* %10127 to <16 x i16>*
  %10129 = load <16 x i16>, <16 x i16>* %10128, align 2, !tbaa !396
  %10130 = bitcast i16* %10117 to <16 x i16>*
  %10131 = load <16 x i16>, <16 x i16>* %10130, align 2, !tbaa !396
  %10132 = getelementptr inbounds i16, i16* %10117, i64 16
  %10133 = bitcast i16* %10132 to <16 x i16>*
  %10134 = load <16 x i16>, <16 x i16>* %10133, align 2, !tbaa !396
  %10135 = add <16 x i16> %10126, %10120
  %10136 = add <16 x i16> %10135, %10131
  %10137 = add <16 x i16> %10129, %10123
  %10138 = add <16 x i16> %10137, %10134
  %10139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10136, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10140 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10138, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10141 = shufflevector <16 x i16> %10139, <16 x i16> %10140, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10142 = lshr <32 x i16> %10141, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10143 = shufflevector <32 x i16> %10142, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10144 = sext i32 %blur_x.s0.x.v1.base.s755 to i64
  %10145 = add nsw i64 %10144, %10024
  %10146 = getelementptr inbounds i16, i16* %blur_x, i64 %10145
  %10147 = bitcast i16* %10146 to <16 x i16>*
  store <16 x i16> %10143, <16 x i16>* %10147, align 2, !tbaa !399
  %10148 = shufflevector <32 x i16> %10142, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10149 = getelementptr inbounds i16, i16* %10146, i64 16
  %10150 = bitcast i16* %10149 to <16 x i16>*
  store <16 x i16> %10148, <16 x i16>* %10150, align 2, !tbaa !399
  br label %"consume blur_x756"

"consume blur_x756":                              ; preds = %"for blur_y.s0.x.x.rebased748", %"produce blur_x754"
  %10151 = sext i32 %b314 to i64
  %10152 = add nsw i64 %10027, %10151
  %10153 = getelementptr inbounds i16, i16* %blur_x, i64 %10152
  %10154 = bitcast i16* %10153 to <16 x i16>*
  %10155 = load <16 x i16>, <16 x i16>* %10154, align 2, !tbaa !399
  %10156 = getelementptr inbounds i16, i16* %10153, i64 16
  %10157 = bitcast i16* %10156 to <16 x i16>*
  %10158 = load <16 x i16>, <16 x i16>* %10157, align 2, !tbaa !399
  %10159 = add nsw i64 %10030, %10151
  %10160 = getelementptr inbounds i16, i16* %blur_x, i64 %10159
  %10161 = bitcast i16* %10160 to <16 x i16>*
  %10162 = load <16 x i16>, <16 x i16>* %10161, align 2, !tbaa !399
  %10163 = getelementptr inbounds i16, i16* %10160, i64 16
  %10164 = bitcast i16* %10163 to <16 x i16>*
  %10165 = load <16 x i16>, <16 x i16>* %10164, align 2, !tbaa !399
  %10166 = add nsw i64 %10033, %10151
  %10167 = getelementptr inbounds i16, i16* %blur_x, i64 %10166
  %10168 = bitcast i16* %10167 to <16 x i16>*
  %10169 = load <16 x i16>, <16 x i16>* %10168, align 2, !tbaa !399
  %10170 = getelementptr inbounds i16, i16* %10167, i64 16
  %10171 = bitcast i16* %10170 to <16 x i16>*
  %10172 = load <16 x i16>, <16 x i16>* %10171, align 2, !tbaa !399
  %10173 = add <16 x i16> %10162, %10155
  %10174 = add <16 x i16> %10173, %10169
  %10175 = add <16 x i16> %10165, %10158
  %10176 = add <16 x i16> %10175, %10172
  %10177 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10174, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10178 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %10176, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %10179 = shufflevector <16 x i16> %10177, <16 x i16> %10178, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10180 = lshr <32 x i16> %10179, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %10181 = shufflevector <32 x i16> %10180, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10182 = add nsw i64 %10037, %10151
  %10183 = getelementptr inbounds i16, i16* %65, i64 %10182
  %10184 = bitcast i16* %10183 to <16 x i16>*
  store <16 x i16> %10181, <16 x i16>* %10184, align 2, !tbaa !401
  %10185 = shufflevector <32 x i16> %10180, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10186 = getelementptr inbounds i16, i16* %10183, i64 16
  %10187 = bitcast i16* %10186 to <16 x i16>*
  store <16 x i16> %10185, <16 x i16>* %10187, align 2, !tbaa !401
  %10188 = add nuw nsw i32 %blur_y.s0.x.x.rebased750, 1
  %.not2519 = icmp eq i32 %10188, %t1639
  br i1 %.not2519, label %"end for blur_y.s0.x.x.rebased749", label %"for blur_y.s0.x.x.rebased748"

"for blur_y.s0.y.y778":                           ; preds = %"for blur_y.s0.y.y778.preheader", %"end for blur_y.s0.x.x.rebased2269"
  %blur_y.s0.y.y780 = phi i32 [ %19945, %"end for blur_y.s0.x.x.rebased2269" ], [ 0, %"for blur_y.s0.y.y778.preheader" ]
  %a335 = shl nsw i32 %blur_y.s0.y.y780, 5
  %10189 = icmp sgt i32 %b337, %a335
  %blur_y.s0.y.yi.base.s781 = select i1 %10189, i32 %a335, i32 %b337
  %10190 = load i64, i64* %.fca.1.gep, align 8, !tbaa !387
  %cmp.i2663 = icmp ult i64 %10190, %258
  %10191 = load i8*, i8** %.fca.0.gep, align 8, !tbaa !389
  br i1 %cmp.i2663, label %if.then.i2666, label %pseudostack_alloc.exit2679, !prof !390

if.then.i2666:                                    ; preds = %"for blur_y.s0.y.y778"
  %tobool1.not.i2665 = icmp ne i8* %10191, null
  %10192 = load i64, i64* %.fca.2.gep, align 8
  %cmp2.i2668 = icmp ugt i64 %10192, 16384
  %or.cond2733 = and i1 %tobool1.not.i2665, %cmp2.i2668
  br i1 %or.cond2733, label %if.then3.i2670, label %if.end.i2674

if.then3.i2670:                                   ; preds = %if.then.i2666
  call void @halide_free(i8* null, i8* nonnull %10191) #16
  %.pre3244 = load i64, i64* %.fca.2.gep, align 8, !tbaa !391
  br label %if.end.i2674

if.end.i2674:                                     ; preds = %if.then3.i2670, %if.then.i2666
  %10193 = phi i64 [ %.pre3244, %if.then3.i2670 ], [ %10192, %if.then.i2666 ]
  %add.i2672 = add i64 %10193, %258
  store i64 %add.i2672, i64* %.fca.2.gep, align 8, !tbaa !391
  %cmp7.i2673 = icmp ugt i64 %add.i2672, 16384
  br i1 %cmp7.i2673, label %if.then8.i2676, label %if.end11.i2678

if.then8.i2676:                                   ; preds = %if.end.i2674
  %call.i2675 = call i8* @halide_malloc(i8* null, i64 %258) #16
  br label %if.end11.i2678

if.end11.i2678:                                   ; preds = %if.then8.i2676, %if.end.i2674
  %storemerge.i2677 = phi i8* [ %call.i2675, %if.then8.i2676 ], [ null, %if.end.i2674 ]
  store i8* %storemerge.i2677, i8** %.fca.0.gep, align 8, !tbaa !389
  store i64 %258, i64* %.fca.1.gep, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2679

pseudostack_alloc.exit2679:                       ; preds = %"for blur_y.s0.y.y778", %if.end11.i2678
  %10194 = phi i8* [ %storemerge.i2677, %if.end11.i2678 ], [ %10191, %"for blur_y.s0.y.y778" ]
  %10195 = bitcast i8* %10194 to i16*
  %.not2434 = icmp eq i8* %10194, null
  br i1 %.not2434, label %then_bb783, label %"produce read_input785", !prof !392

"end for blur_y.s0.y.y779":                       ; preds = %"end for blur_y.s0.y.y"
  %tobool.not.i.not = icmp eq i8* %.02722, null
  br i1 %tobool.not.i.not, label %call_destructor.exit, label %if.then.i2680

if.then.i2680.loopexit:                           ; preds = %"end for blur_y.s0.x.x.rebased2269"
  %10196 = bitcast %struct.halide_pseudostack_slot_t* %read_input.pseudostack_slot to i8*
  %10197 = bitcast %struct.halide_pseudostack_slot_t* %blur_x.pseudostack_slot to i8*
  br label %if.then.i2680

if.then.i2680:                                    ; preds = %if.then.i2680.loopexit, %"end for blur_y.s0.y.y779"
  %.12730 = phi i8* [ %.0, %"end for blur_y.s0.y.y779" ], [ %10196, %if.then.i2680.loopexit ]
  %.127232727 = phi i8* [ %.02722, %"end for blur_y.s0.y.y779" ], [ %10197, %if.then.i2680.loopexit ]
  %ptr1.i = bitcast i8* %.127232727 to i8**
  %10198 = load i8*, i8** %ptr1.i, align 8, !tbaa !389
  %tobool.not.i2704 = icmp eq i8* %10198, null
  br i1 %tobool.not.i2704, label %pseudostack_free.exit, label %land.lhs.true.i2707

land.lhs.true.i2707:                              ; preds = %if.then.i2680
  %cumulative_size.i2705 = getelementptr inbounds i8, i8* %.127232727, i64 16
  %10199 = bitcast i8* %cumulative_size.i2705 to i64*
  %10200 = load i64, i64* %10199, align 8, !tbaa !391
  %cmp.i2706 = icmp ugt i64 %10200, 16384
  br i1 %cmp.i2706, label %if.then.i2708, label %pseudostack_free.exit

if.then.i2708:                                    ; preds = %land.lhs.true.i2707
  call void @halide_free(i8* null, i8* nonnull %10198) #16
  br label %pseudostack_free.exit

pseudostack_free.exit:                            ; preds = %if.then.i2680, %land.lhs.true.i2707, %if.then.i2708
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.127232727, i8 0, i64 24, i1 false)
  br label %call_destructor.exit

call_destructor.exit:                             ; preds = %"end for blur_y.s0.y.y779", %pseudostack_free.exit
  %.12729 = phi i8* [ %.0, %"end for blur_y.s0.y.y779" ], [ %.12730, %pseudostack_free.exit ]
  %tobool.not.i2682.not = icmp eq i8* %.12729, null
  br i1 %tobool.not.i2682.not, label %call_destructor.exit2685, label %if.then.i2683

if.then.i2683:                                    ; preds = %call_destructor.exit
  %ptr1.i2711 = bitcast i8* %.12729 to i8**
  %10201 = load i8*, i8** %ptr1.i2711, align 8, !tbaa !389
  %tobool.not.i2712 = icmp eq i8* %10201, null
  br i1 %tobool.not.i2712, label %pseudostack_free.exit2720, label %land.lhs.true.i2715

land.lhs.true.i2715:                              ; preds = %if.then.i2683
  %cumulative_size.i2713 = getelementptr inbounds i8, i8* %.12729, i64 16
  %10202 = bitcast i8* %cumulative_size.i2713 to i64*
  %10203 = load i64, i64* %10202, align 8, !tbaa !391
  %cmp.i2714 = icmp ugt i64 %10203, 16384
  br i1 %cmp.i2714, label %if.then.i2716, label %pseudostack_free.exit2720

if.then.i2716:                                    ; preds = %land.lhs.true.i2715
  call void @halide_free(i8* null, i8* nonnull %10201) #16
  br label %pseudostack_free.exit2720

pseudostack_free.exit2720:                        ; preds = %if.then.i2683, %land.lhs.true.i2715, %if.then.i2716
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %.12729, i8 0, i64 24, i1 false)
  br label %call_destructor.exit2685

call_destructor.exit2685:                         ; preds = %call_destructor.exit, %pseudostack_free.exit2720
  ret i32 0

then_bb783:                                       ; preds = %pseudostack_alloc.exit2679
  %10204 = alloca i8*, i64 %258, align 32
  %10205 = bitcast i8** %10204 to i16*
  store i8** %10204, i8*** %259, align 8
  br label %"produce read_input785"

"produce read_input785":                          ; preds = %pseudostack_alloc.exit2679, %then_bb783
  %read_input784 = phi i16* [ %10205, %then_bb783 ], [ %10195, %pseudostack_alloc.exit2679 ]
  %a339 = add nsw i32 %blur_y.s0.y.yi.base.s781, %195
  %10206 = icmp sgt i32 %a339, %201
  %a338 = select i1 %10206, i32 %a339, i32 %201
  %b340 = add nsw i32 %a339, 34
  %10207 = icmp sgt i32 %b340, %a338
  %read_input.s0.y.prologue786 = select i1 %10207, i32 %a338, i32 %b340
  %10208 = icmp sgt i32 %a338, %b343
  %a340 = select i1 %10208, i32 %a338, i32 %b343
  %10209 = icmp sgt i32 %b340, %a340
  %read_input.s0.y.epilogue787 = select i1 %10209, i32 %a340, i32 %b340
  %a344 = sub i32 %260, %blur_y.s0.y.yi.base.s781
  %10210 = icmp sgt i32 %a344, 0
  br i1 %10210, label %"for read_input.s0.y.rebased792.preheader", label %"end for read_input.s0.y.rebased793", !prof !386

"for read_input.s0.y.rebased792.preheader":       ; preds = %"produce read_input785"
  %t1607789 = add nsw i32 %261, %blur_y.s0.y.yi.base.s781
  %10211 = icmp slt i32 %a344, 34
  %a343 = select i1 %10211, i32 %a344, i32 34
  %10212 = sext i32 %t1607789 to i64
  %10213 = zext i32 %a343 to i64
  br label %"for read_input.s0.y.rebased792"

"for read_input.s0.y.rebased792":                 ; preds = %"for read_input.s0.y.rebased792.preheader", %"end for read_input.s0.x.x798"
  %indvars.iv3129 = phi i64 [ 0, %"for read_input.s0.y.rebased792.preheader" ], [ %indvars.iv.next3130, %"end for read_input.s0.x.x798" ]
  %10214 = add nsw i64 %indvars.iv3129, %10212
  %10215 = icmp slt i64 %10214, %364
  %10216 = trunc i64 %10214 to i32
  %a346 = select i1 %10215, i32 %10216, i32 %b349
  %10217 = mul nsw i64 %indvars.iv3129, %271
  %10218 = sub nsw i64 %10217, %272
  %10219 = icmp sgt i32 %a346, 0
  %10220 = select i1 %10219, i32 %a346, i32 0
  %10221 = mul nsw i32 %10220, %203
  %t1609795 = sub nsw i32 %10221, %199
  %10222 = insertelement <32 x i32> undef, i32 %t1609795, i32 0
  %10223 = shufflevector <32 x i32> %10222, <32 x i32> undef, <32 x i32> zeroinitializer
  br label %"for read_input.s0.x.x797"

"end for read_input.s0.y.rebased793":             ; preds = %"end for read_input.s0.x.x798", %"produce read_input785"
  %10224 = icmp sgt i32 %a353, %a339
  %a352 = select i1 %10224, i32 %a353, i32 %a339
  %10225 = icmp sgt i32 %b340, %a352
  %10226 = select i1 %10225, i32 %a352, i32 %b340
  %t1611802 = sub nsw i32 %10226, %read_input.s0.y.prologue786
  %10227 = icmp sgt i32 %t1611802, 0
  br i1 %10227, label %"for read_input.s0.y.rebased807.preheader", label %"end for read_input.s0.y.rebased808", !prof !386

"for read_input.s0.y.rebased807.preheader":       ; preds = %"end for read_input.s0.y.rebased793"
  %t1614804 = sub i32 %read_input.s0.y.prologue786, %201
  %10228 = sext i32 %blur_y.s0.y.yi.base.s781 to i64
  %a360 = sub nsw i64 %270, %10228
  %10229 = icmp slt i64 %a360, 34
  %a359 = select i1 %10229, i64 %a360, i64 34
  %10230 = icmp sgt i64 %a359, 0
  %10231 = select i1 %10230, i64 %a359, i64 0
  %10232 = sext i32 %t1614804 to i64
  %10233 = zext i32 %t1611802 to i64
  br label %"for read_input.s0.y.rebased807"

"for read_input.s0.x.x797":                       ; preds = %"for read_input.s0.y.rebased792", %"for read_input.s0.x.x797"
  %read_input.s0.x.x799 = phi i32 [ %10432, %"for read_input.s0.x.x797" ], [ 0, %"for read_input.s0.y.rebased792" ]
  %10234 = shl nsw i32 %read_input.s0.x.x799, 5
  %a348 = add nsw i32 %10234, %t1606791
  %10235 = icmp sgt i32 %b350, %a348
  %read_input.s0.x.v2.base.s800 = select i1 %10235, i32 %a348, i32 %b350
  %10236 = add nsw i32 %read_input.s0.x.v2.base.s800, -32
  %10237 = insertelement <32 x i32> undef, i32 %10236, i32 0
  %10238 = shufflevector <32 x i32> %10237, <32 x i32> undef, <32 x i32> zeroinitializer
  %a350 = add nsw <32 x i32> %10238, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10239 = shufflevector <32 x i32> %a350, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10240 = icmp sgt <8 x i32> %264, %10239
  %10241 = shufflevector <32 x i32> %a350, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10242 = icmp sgt <8 x i32> %264, %10241
  %10243 = shufflevector <32 x i32> %a350, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10244 = icmp sgt <8 x i32> %264, %10243
  %10245 = shufflevector <32 x i32> %a350, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10246 = icmp sgt <8 x i32> %264, %10245
  %10247 = select <8 x i1> %10240, <8 x i32> %10239, <8 x i32> %264
  %10248 = select <8 x i1> %10242, <8 x i32> %10241, <8 x i32> %264
  %10249 = select <8 x i1> %10244, <8 x i32> %10243, <8 x i32> %264
  %10250 = select <8 x i1> %10246, <8 x i32> %10245, <8 x i32> %264
  %10251 = icmp sgt <8 x i32> %10247, %266
  %10252 = icmp sgt <8 x i32> %10248, %266
  %10253 = icmp sgt <8 x i32> %10249, %266
  %10254 = icmp sgt <8 x i32> %10250, %266
  %10255 = select <8 x i1> %10251, <8 x i32> %10247, <8 x i32> %266
  %10256 = select <8 x i1> %10252, <8 x i32> %10248, <8 x i32> %266
  %10257 = select <8 x i1> %10253, <8 x i32> %10249, <8 x i32> %266
  %10258 = select <8 x i1> %10254, <8 x i32> %10250, <8 x i32> %266
  %10259 = shufflevector <8 x i32> %10255, <8 x i32> %10256, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10260 = shufflevector <8 x i32> %10257, <8 x i32> %10258, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10261 = shufflevector <16 x i32> %10259, <16 x i32> %10260, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10262 = add nsw <32 x i32> %10261, %10223
  %10263 = extractelement <32 x i32> %10262, i32 0
  %10264 = sext i32 %10263 to i64
  %10265 = getelementptr inbounds i16, i16* %253, i64 %10264
  %10266 = load i16, i16* %10265, align 2, !tbaa !393
  %10267 = insertelement <32 x i16> undef, i16 %10266, i32 0
  %10268 = extractelement <32 x i32> %10262, i32 1
  %10269 = sext i32 %10268 to i64
  %10270 = getelementptr inbounds i16, i16* %253, i64 %10269
  %10271 = load i16, i16* %10270, align 2, !tbaa !393
  %10272 = insertelement <32 x i16> %10267, i16 %10271, i32 1
  %10273 = extractelement <32 x i32> %10262, i32 2
  %10274 = sext i32 %10273 to i64
  %10275 = getelementptr inbounds i16, i16* %253, i64 %10274
  %10276 = load i16, i16* %10275, align 2, !tbaa !393
  %10277 = insertelement <32 x i16> %10272, i16 %10276, i32 2
  %10278 = extractelement <32 x i32> %10262, i32 3
  %10279 = sext i32 %10278 to i64
  %10280 = getelementptr inbounds i16, i16* %253, i64 %10279
  %10281 = load i16, i16* %10280, align 2, !tbaa !393
  %10282 = insertelement <32 x i16> %10277, i16 %10281, i32 3
  %10283 = extractelement <32 x i32> %10262, i32 4
  %10284 = sext i32 %10283 to i64
  %10285 = getelementptr inbounds i16, i16* %253, i64 %10284
  %10286 = load i16, i16* %10285, align 2, !tbaa !393
  %10287 = insertelement <32 x i16> %10282, i16 %10286, i32 4
  %10288 = extractelement <32 x i32> %10262, i32 5
  %10289 = sext i32 %10288 to i64
  %10290 = getelementptr inbounds i16, i16* %253, i64 %10289
  %10291 = load i16, i16* %10290, align 2, !tbaa !393
  %10292 = insertelement <32 x i16> %10287, i16 %10291, i32 5
  %10293 = extractelement <32 x i32> %10262, i32 6
  %10294 = sext i32 %10293 to i64
  %10295 = getelementptr inbounds i16, i16* %253, i64 %10294
  %10296 = load i16, i16* %10295, align 2, !tbaa !393
  %10297 = insertelement <32 x i16> %10292, i16 %10296, i32 6
  %10298 = extractelement <32 x i32> %10262, i32 7
  %10299 = sext i32 %10298 to i64
  %10300 = getelementptr inbounds i16, i16* %253, i64 %10299
  %10301 = load i16, i16* %10300, align 2, !tbaa !393
  %10302 = insertelement <32 x i16> %10297, i16 %10301, i32 7
  %10303 = extractelement <32 x i32> %10262, i32 8
  %10304 = sext i32 %10303 to i64
  %10305 = getelementptr inbounds i16, i16* %253, i64 %10304
  %10306 = load i16, i16* %10305, align 2, !tbaa !393
  %10307 = insertelement <32 x i16> %10302, i16 %10306, i32 8
  %10308 = extractelement <32 x i32> %10262, i32 9
  %10309 = sext i32 %10308 to i64
  %10310 = getelementptr inbounds i16, i16* %253, i64 %10309
  %10311 = load i16, i16* %10310, align 2, !tbaa !393
  %10312 = insertelement <32 x i16> %10307, i16 %10311, i32 9
  %10313 = extractelement <32 x i32> %10262, i32 10
  %10314 = sext i32 %10313 to i64
  %10315 = getelementptr inbounds i16, i16* %253, i64 %10314
  %10316 = load i16, i16* %10315, align 2, !tbaa !393
  %10317 = insertelement <32 x i16> %10312, i16 %10316, i32 10
  %10318 = extractelement <32 x i32> %10262, i32 11
  %10319 = sext i32 %10318 to i64
  %10320 = getelementptr inbounds i16, i16* %253, i64 %10319
  %10321 = load i16, i16* %10320, align 2, !tbaa !393
  %10322 = insertelement <32 x i16> %10317, i16 %10321, i32 11
  %10323 = extractelement <32 x i32> %10262, i32 12
  %10324 = sext i32 %10323 to i64
  %10325 = getelementptr inbounds i16, i16* %253, i64 %10324
  %10326 = load i16, i16* %10325, align 2, !tbaa !393
  %10327 = insertelement <32 x i16> %10322, i16 %10326, i32 12
  %10328 = extractelement <32 x i32> %10262, i32 13
  %10329 = sext i32 %10328 to i64
  %10330 = getelementptr inbounds i16, i16* %253, i64 %10329
  %10331 = load i16, i16* %10330, align 2, !tbaa !393
  %10332 = insertelement <32 x i16> %10327, i16 %10331, i32 13
  %10333 = extractelement <32 x i32> %10262, i32 14
  %10334 = sext i32 %10333 to i64
  %10335 = getelementptr inbounds i16, i16* %253, i64 %10334
  %10336 = load i16, i16* %10335, align 2, !tbaa !393
  %10337 = insertelement <32 x i16> %10332, i16 %10336, i32 14
  %10338 = extractelement <32 x i32> %10262, i32 15
  %10339 = sext i32 %10338 to i64
  %10340 = getelementptr inbounds i16, i16* %253, i64 %10339
  %10341 = load i16, i16* %10340, align 2, !tbaa !393
  %10342 = insertelement <32 x i16> %10337, i16 %10341, i32 15
  %10343 = extractelement <32 x i32> %10262, i32 16
  %10344 = sext i32 %10343 to i64
  %10345 = getelementptr inbounds i16, i16* %253, i64 %10344
  %10346 = load i16, i16* %10345, align 2, !tbaa !393
  %10347 = insertelement <32 x i16> %10342, i16 %10346, i32 16
  %10348 = extractelement <32 x i32> %10262, i32 17
  %10349 = sext i32 %10348 to i64
  %10350 = getelementptr inbounds i16, i16* %253, i64 %10349
  %10351 = load i16, i16* %10350, align 2, !tbaa !393
  %10352 = insertelement <32 x i16> %10347, i16 %10351, i32 17
  %10353 = extractelement <32 x i32> %10262, i32 18
  %10354 = sext i32 %10353 to i64
  %10355 = getelementptr inbounds i16, i16* %253, i64 %10354
  %10356 = load i16, i16* %10355, align 2, !tbaa !393
  %10357 = insertelement <32 x i16> %10352, i16 %10356, i32 18
  %10358 = extractelement <32 x i32> %10262, i32 19
  %10359 = sext i32 %10358 to i64
  %10360 = getelementptr inbounds i16, i16* %253, i64 %10359
  %10361 = load i16, i16* %10360, align 2, !tbaa !393
  %10362 = insertelement <32 x i16> %10357, i16 %10361, i32 19
  %10363 = extractelement <32 x i32> %10262, i32 20
  %10364 = sext i32 %10363 to i64
  %10365 = getelementptr inbounds i16, i16* %253, i64 %10364
  %10366 = load i16, i16* %10365, align 2, !tbaa !393
  %10367 = insertelement <32 x i16> %10362, i16 %10366, i32 20
  %10368 = extractelement <32 x i32> %10262, i32 21
  %10369 = sext i32 %10368 to i64
  %10370 = getelementptr inbounds i16, i16* %253, i64 %10369
  %10371 = load i16, i16* %10370, align 2, !tbaa !393
  %10372 = insertelement <32 x i16> %10367, i16 %10371, i32 21
  %10373 = extractelement <32 x i32> %10262, i32 22
  %10374 = sext i32 %10373 to i64
  %10375 = getelementptr inbounds i16, i16* %253, i64 %10374
  %10376 = load i16, i16* %10375, align 2, !tbaa !393
  %10377 = insertelement <32 x i16> %10372, i16 %10376, i32 22
  %10378 = extractelement <32 x i32> %10262, i32 23
  %10379 = sext i32 %10378 to i64
  %10380 = getelementptr inbounds i16, i16* %253, i64 %10379
  %10381 = load i16, i16* %10380, align 2, !tbaa !393
  %10382 = insertelement <32 x i16> %10377, i16 %10381, i32 23
  %10383 = extractelement <32 x i32> %10262, i32 24
  %10384 = sext i32 %10383 to i64
  %10385 = getelementptr inbounds i16, i16* %253, i64 %10384
  %10386 = load i16, i16* %10385, align 2, !tbaa !393
  %10387 = insertelement <32 x i16> %10382, i16 %10386, i32 24
  %10388 = extractelement <32 x i32> %10262, i32 25
  %10389 = sext i32 %10388 to i64
  %10390 = getelementptr inbounds i16, i16* %253, i64 %10389
  %10391 = load i16, i16* %10390, align 2, !tbaa !393
  %10392 = insertelement <32 x i16> %10387, i16 %10391, i32 25
  %10393 = extractelement <32 x i32> %10262, i32 26
  %10394 = sext i32 %10393 to i64
  %10395 = getelementptr inbounds i16, i16* %253, i64 %10394
  %10396 = load i16, i16* %10395, align 2, !tbaa !393
  %10397 = insertelement <32 x i16> %10392, i16 %10396, i32 26
  %10398 = extractelement <32 x i32> %10262, i32 27
  %10399 = sext i32 %10398 to i64
  %10400 = getelementptr inbounds i16, i16* %253, i64 %10399
  %10401 = load i16, i16* %10400, align 2, !tbaa !393
  %10402 = insertelement <32 x i16> %10397, i16 %10401, i32 27
  %10403 = extractelement <32 x i32> %10262, i32 28
  %10404 = sext i32 %10403 to i64
  %10405 = getelementptr inbounds i16, i16* %253, i64 %10404
  %10406 = load i16, i16* %10405, align 2, !tbaa !393
  %10407 = insertelement <32 x i16> %10402, i16 %10406, i32 28
  %10408 = extractelement <32 x i32> %10262, i32 29
  %10409 = sext i32 %10408 to i64
  %10410 = getelementptr inbounds i16, i16* %253, i64 %10409
  %10411 = load i16, i16* %10410, align 2, !tbaa !393
  %10412 = insertelement <32 x i16> %10407, i16 %10411, i32 29
  %10413 = extractelement <32 x i32> %10262, i32 30
  %10414 = sext i32 %10413 to i64
  %10415 = getelementptr inbounds i16, i16* %253, i64 %10414
  %10416 = load i16, i16* %10415, align 2, !tbaa !393
  %10417 = insertelement <32 x i16> %10412, i16 %10416, i32 30
  %10418 = extractelement <32 x i32> %10262, i32 31
  %10419 = sext i32 %10418 to i64
  %10420 = getelementptr inbounds i16, i16* %253, i64 %10419
  %10421 = load i16, i16* %10420, align 2, !tbaa !393
  %10422 = insertelement <32 x i16> %10417, i16 %10421, i32 31
  %10423 = shufflevector <32 x i16> %10422, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10424 = sext i32 %read_input.s0.x.v2.base.s800 to i64
  %10425 = add nsw i64 %10218, %10424
  %10426 = getelementptr inbounds i16, i16* %read_input784, i64 %10425
  %10427 = getelementptr inbounds i16, i16* %10426, i64 -32
  %10428 = bitcast i16* %10427 to <16 x i16>*
  store <16 x i16> %10423, <16 x i16>* %10428, align 2, !tbaa !396
  %10429 = shufflevector <32 x i16> %10422, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10430 = getelementptr inbounds i16, i16* %10426, i64 -16
  %10431 = bitcast i16* %10430 to <16 x i16>*
  store <16 x i16> %10429, <16 x i16>* %10431, align 2, !tbaa !396
  %10432 = add nuw nsw i32 %read_input.s0.x.x799, 1
  %.not2514 = icmp eq i32 %10432, %210
  br i1 %.not2514, label %"end for read_input.s0.x.x798", label %"for read_input.s0.x.x797"

"end for read_input.s0.x.x798":                   ; preds = %"for read_input.s0.x.x797"
  %indvars.iv.next3130 = add nuw nsw i64 %indvars.iv3129, 1
  %.not2513 = icmp eq i64 %indvars.iv.next3130, %10213
  br i1 %.not2513, label %"end for read_input.s0.y.rebased793", label %"for read_input.s0.y.rebased792"

"for read_input.s0.y.rebased807":                 ; preds = %"for read_input.s0.y.rebased807.preheader", %"end for read_input.s0.x.x.rebased823"
  %indvars.iv3136 = phi i64 [ 0, %"for read_input.s0.y.rebased807.preheader" ], [ %indvars.iv.next3137, %"end for read_input.s0.x.x.rebased823" ]
  %10433 = add nsw i64 %indvars.iv3136, %10232
  %10434 = mul nsw i64 %10433, %368
  %10435 = sub nsw i64 %10434, %369
  br i1 %267, label %"for read_input.s0.x.x811.preheader", label %"end for read_input.s0.x.x812", !prof !386

"for read_input.s0.x.x811.preheader":             ; preds = %"for read_input.s0.y.rebased807"
  %10436 = trunc i64 %10435 to i32
  %10437 = insertelement <32 x i32> undef, i32 %10436, i32 0
  %10438 = shufflevector <32 x i32> %10437, <32 x i32> undef, <32 x i32> zeroinitializer
  %10439 = add nuw nsw i64 %10231, %indvars.iv3136
  %10440 = mul nsw i64 %10439, %271
  %10441 = sub i64 %10440, %272
  br label %"for read_input.s0.x.x811"

"end for read_input.s0.y.rebased808":             ; preds = %"end for read_input.s0.x.x.rebased823", %"end for read_input.s0.y.rebased793"
  %a376 = add nsw i32 %blur_y.s0.y.yi.base.s781, %275
  %10442 = icmp slt i32 %a376, 0
  %a375 = select i1 %10442, i32 %a376, i32 0
  %10443 = icmp sgt i32 %a375, -34
  %t1631828 = sub nsw i32 %read_input.s0.y.epilogue787, %201
  br i1 %10443, label %"for read_input.s0.y.rebased831.preheader", label %"end for read_input.s0.y.rebased832", !prof !386

"for read_input.s0.y.rebased831.preheader":       ; preds = %"end for read_input.s0.y.rebased808"
  %10444 = sext i32 %blur_y.s0.y.yi.base.s781 to i64
  %a383 = sub nsw i64 %277, %10444
  %10445 = icmp slt i64 %a383, 34
  %a382 = select i1 %10445, i64 %a383, i64 34
  %10446 = icmp sgt i64 %a382, 0
  %10447 = select i1 %10446, i64 %a382, i64 0
  %a375.op = add nsw i32 %a375, 33
  %10448 = zext i32 %a375.op to i64
  br label %"for read_input.s0.y.rebased831"

"for read_input.s0.x.x811":                       ; preds = %"for read_input.s0.x.x811.preheader", %"for read_input.s0.x.x811"
  %read_input.s0.x.x813 = phi i32 [ %10647, %"for read_input.s0.x.x811" ], [ 0, %"for read_input.s0.x.x811.preheader" ]
  %10449 = shl nsw i32 %read_input.s0.x.x813, 5
  %a356 = add nsw i32 %10449, %t1606791
  %10450 = icmp sgt i32 %b350, %a356
  %read_input.s0.x.v2.base.s814 = select i1 %10450, i32 %a356, i32 %b350
  %10451 = add nsw i32 %read_input.s0.x.v2.base.s814, -32
  %10452 = insertelement <32 x i32> undef, i32 %10451, i32 0
  %10453 = shufflevector <32 x i32> %10452, <32 x i32> undef, <32 x i32> zeroinitializer
  %a358 = add nsw <32 x i32> %10453, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10454 = shufflevector <32 x i32> %a358, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10455 = icmp sgt <8 x i32> %264, %10454
  %10456 = shufflevector <32 x i32> %a358, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10457 = icmp sgt <8 x i32> %264, %10456
  %10458 = shufflevector <32 x i32> %a358, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10459 = icmp sgt <8 x i32> %264, %10458
  %10460 = shufflevector <32 x i32> %a358, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10461 = icmp sgt <8 x i32> %264, %10460
  %10462 = select <8 x i1> %10455, <8 x i32> %10454, <8 x i32> %264
  %10463 = select <8 x i1> %10457, <8 x i32> %10456, <8 x i32> %264
  %10464 = select <8 x i1> %10459, <8 x i32> %10458, <8 x i32> %264
  %10465 = select <8 x i1> %10461, <8 x i32> %10460, <8 x i32> %264
  %10466 = icmp sgt <8 x i32> %10462, %266
  %10467 = icmp sgt <8 x i32> %10463, %266
  %10468 = icmp sgt <8 x i32> %10464, %266
  %10469 = icmp sgt <8 x i32> %10465, %266
  %10470 = select <8 x i1> %10466, <8 x i32> %10462, <8 x i32> %266
  %10471 = select <8 x i1> %10467, <8 x i32> %10463, <8 x i32> %266
  %10472 = select <8 x i1> %10468, <8 x i32> %10464, <8 x i32> %266
  %10473 = select <8 x i1> %10469, <8 x i32> %10465, <8 x i32> %266
  %10474 = shufflevector <8 x i32> %10470, <8 x i32> %10471, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10475 = shufflevector <8 x i32> %10472, <8 x i32> %10473, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10476 = shufflevector <16 x i32> %10474, <16 x i32> %10475, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10477 = add nsw <32 x i32> %10476, %10438
  %10478 = extractelement <32 x i32> %10477, i32 0
  %10479 = sext i32 %10478 to i64
  %10480 = getelementptr inbounds i16, i16* %253, i64 %10479
  %10481 = load i16, i16* %10480, align 2, !tbaa !393
  %10482 = insertelement <32 x i16> undef, i16 %10481, i32 0
  %10483 = extractelement <32 x i32> %10477, i32 1
  %10484 = sext i32 %10483 to i64
  %10485 = getelementptr inbounds i16, i16* %253, i64 %10484
  %10486 = load i16, i16* %10485, align 2, !tbaa !393
  %10487 = insertelement <32 x i16> %10482, i16 %10486, i32 1
  %10488 = extractelement <32 x i32> %10477, i32 2
  %10489 = sext i32 %10488 to i64
  %10490 = getelementptr inbounds i16, i16* %253, i64 %10489
  %10491 = load i16, i16* %10490, align 2, !tbaa !393
  %10492 = insertelement <32 x i16> %10487, i16 %10491, i32 2
  %10493 = extractelement <32 x i32> %10477, i32 3
  %10494 = sext i32 %10493 to i64
  %10495 = getelementptr inbounds i16, i16* %253, i64 %10494
  %10496 = load i16, i16* %10495, align 2, !tbaa !393
  %10497 = insertelement <32 x i16> %10492, i16 %10496, i32 3
  %10498 = extractelement <32 x i32> %10477, i32 4
  %10499 = sext i32 %10498 to i64
  %10500 = getelementptr inbounds i16, i16* %253, i64 %10499
  %10501 = load i16, i16* %10500, align 2, !tbaa !393
  %10502 = insertelement <32 x i16> %10497, i16 %10501, i32 4
  %10503 = extractelement <32 x i32> %10477, i32 5
  %10504 = sext i32 %10503 to i64
  %10505 = getelementptr inbounds i16, i16* %253, i64 %10504
  %10506 = load i16, i16* %10505, align 2, !tbaa !393
  %10507 = insertelement <32 x i16> %10502, i16 %10506, i32 5
  %10508 = extractelement <32 x i32> %10477, i32 6
  %10509 = sext i32 %10508 to i64
  %10510 = getelementptr inbounds i16, i16* %253, i64 %10509
  %10511 = load i16, i16* %10510, align 2, !tbaa !393
  %10512 = insertelement <32 x i16> %10507, i16 %10511, i32 6
  %10513 = extractelement <32 x i32> %10477, i32 7
  %10514 = sext i32 %10513 to i64
  %10515 = getelementptr inbounds i16, i16* %253, i64 %10514
  %10516 = load i16, i16* %10515, align 2, !tbaa !393
  %10517 = insertelement <32 x i16> %10512, i16 %10516, i32 7
  %10518 = extractelement <32 x i32> %10477, i32 8
  %10519 = sext i32 %10518 to i64
  %10520 = getelementptr inbounds i16, i16* %253, i64 %10519
  %10521 = load i16, i16* %10520, align 2, !tbaa !393
  %10522 = insertelement <32 x i16> %10517, i16 %10521, i32 8
  %10523 = extractelement <32 x i32> %10477, i32 9
  %10524 = sext i32 %10523 to i64
  %10525 = getelementptr inbounds i16, i16* %253, i64 %10524
  %10526 = load i16, i16* %10525, align 2, !tbaa !393
  %10527 = insertelement <32 x i16> %10522, i16 %10526, i32 9
  %10528 = extractelement <32 x i32> %10477, i32 10
  %10529 = sext i32 %10528 to i64
  %10530 = getelementptr inbounds i16, i16* %253, i64 %10529
  %10531 = load i16, i16* %10530, align 2, !tbaa !393
  %10532 = insertelement <32 x i16> %10527, i16 %10531, i32 10
  %10533 = extractelement <32 x i32> %10477, i32 11
  %10534 = sext i32 %10533 to i64
  %10535 = getelementptr inbounds i16, i16* %253, i64 %10534
  %10536 = load i16, i16* %10535, align 2, !tbaa !393
  %10537 = insertelement <32 x i16> %10532, i16 %10536, i32 11
  %10538 = extractelement <32 x i32> %10477, i32 12
  %10539 = sext i32 %10538 to i64
  %10540 = getelementptr inbounds i16, i16* %253, i64 %10539
  %10541 = load i16, i16* %10540, align 2, !tbaa !393
  %10542 = insertelement <32 x i16> %10537, i16 %10541, i32 12
  %10543 = extractelement <32 x i32> %10477, i32 13
  %10544 = sext i32 %10543 to i64
  %10545 = getelementptr inbounds i16, i16* %253, i64 %10544
  %10546 = load i16, i16* %10545, align 2, !tbaa !393
  %10547 = insertelement <32 x i16> %10542, i16 %10546, i32 13
  %10548 = extractelement <32 x i32> %10477, i32 14
  %10549 = sext i32 %10548 to i64
  %10550 = getelementptr inbounds i16, i16* %253, i64 %10549
  %10551 = load i16, i16* %10550, align 2, !tbaa !393
  %10552 = insertelement <32 x i16> %10547, i16 %10551, i32 14
  %10553 = extractelement <32 x i32> %10477, i32 15
  %10554 = sext i32 %10553 to i64
  %10555 = getelementptr inbounds i16, i16* %253, i64 %10554
  %10556 = load i16, i16* %10555, align 2, !tbaa !393
  %10557 = insertelement <32 x i16> %10552, i16 %10556, i32 15
  %10558 = extractelement <32 x i32> %10477, i32 16
  %10559 = sext i32 %10558 to i64
  %10560 = getelementptr inbounds i16, i16* %253, i64 %10559
  %10561 = load i16, i16* %10560, align 2, !tbaa !393
  %10562 = insertelement <32 x i16> %10557, i16 %10561, i32 16
  %10563 = extractelement <32 x i32> %10477, i32 17
  %10564 = sext i32 %10563 to i64
  %10565 = getelementptr inbounds i16, i16* %253, i64 %10564
  %10566 = load i16, i16* %10565, align 2, !tbaa !393
  %10567 = insertelement <32 x i16> %10562, i16 %10566, i32 17
  %10568 = extractelement <32 x i32> %10477, i32 18
  %10569 = sext i32 %10568 to i64
  %10570 = getelementptr inbounds i16, i16* %253, i64 %10569
  %10571 = load i16, i16* %10570, align 2, !tbaa !393
  %10572 = insertelement <32 x i16> %10567, i16 %10571, i32 18
  %10573 = extractelement <32 x i32> %10477, i32 19
  %10574 = sext i32 %10573 to i64
  %10575 = getelementptr inbounds i16, i16* %253, i64 %10574
  %10576 = load i16, i16* %10575, align 2, !tbaa !393
  %10577 = insertelement <32 x i16> %10572, i16 %10576, i32 19
  %10578 = extractelement <32 x i32> %10477, i32 20
  %10579 = sext i32 %10578 to i64
  %10580 = getelementptr inbounds i16, i16* %253, i64 %10579
  %10581 = load i16, i16* %10580, align 2, !tbaa !393
  %10582 = insertelement <32 x i16> %10577, i16 %10581, i32 20
  %10583 = extractelement <32 x i32> %10477, i32 21
  %10584 = sext i32 %10583 to i64
  %10585 = getelementptr inbounds i16, i16* %253, i64 %10584
  %10586 = load i16, i16* %10585, align 2, !tbaa !393
  %10587 = insertelement <32 x i16> %10582, i16 %10586, i32 21
  %10588 = extractelement <32 x i32> %10477, i32 22
  %10589 = sext i32 %10588 to i64
  %10590 = getelementptr inbounds i16, i16* %253, i64 %10589
  %10591 = load i16, i16* %10590, align 2, !tbaa !393
  %10592 = insertelement <32 x i16> %10587, i16 %10591, i32 22
  %10593 = extractelement <32 x i32> %10477, i32 23
  %10594 = sext i32 %10593 to i64
  %10595 = getelementptr inbounds i16, i16* %253, i64 %10594
  %10596 = load i16, i16* %10595, align 2, !tbaa !393
  %10597 = insertelement <32 x i16> %10592, i16 %10596, i32 23
  %10598 = extractelement <32 x i32> %10477, i32 24
  %10599 = sext i32 %10598 to i64
  %10600 = getelementptr inbounds i16, i16* %253, i64 %10599
  %10601 = load i16, i16* %10600, align 2, !tbaa !393
  %10602 = insertelement <32 x i16> %10597, i16 %10601, i32 24
  %10603 = extractelement <32 x i32> %10477, i32 25
  %10604 = sext i32 %10603 to i64
  %10605 = getelementptr inbounds i16, i16* %253, i64 %10604
  %10606 = load i16, i16* %10605, align 2, !tbaa !393
  %10607 = insertelement <32 x i16> %10602, i16 %10606, i32 25
  %10608 = extractelement <32 x i32> %10477, i32 26
  %10609 = sext i32 %10608 to i64
  %10610 = getelementptr inbounds i16, i16* %253, i64 %10609
  %10611 = load i16, i16* %10610, align 2, !tbaa !393
  %10612 = insertelement <32 x i16> %10607, i16 %10611, i32 26
  %10613 = extractelement <32 x i32> %10477, i32 27
  %10614 = sext i32 %10613 to i64
  %10615 = getelementptr inbounds i16, i16* %253, i64 %10614
  %10616 = load i16, i16* %10615, align 2, !tbaa !393
  %10617 = insertelement <32 x i16> %10612, i16 %10616, i32 27
  %10618 = extractelement <32 x i32> %10477, i32 28
  %10619 = sext i32 %10618 to i64
  %10620 = getelementptr inbounds i16, i16* %253, i64 %10619
  %10621 = load i16, i16* %10620, align 2, !tbaa !393
  %10622 = insertelement <32 x i16> %10617, i16 %10621, i32 28
  %10623 = extractelement <32 x i32> %10477, i32 29
  %10624 = sext i32 %10623 to i64
  %10625 = getelementptr inbounds i16, i16* %253, i64 %10624
  %10626 = load i16, i16* %10625, align 2, !tbaa !393
  %10627 = insertelement <32 x i16> %10622, i16 %10626, i32 29
  %10628 = extractelement <32 x i32> %10477, i32 30
  %10629 = sext i32 %10628 to i64
  %10630 = getelementptr inbounds i16, i16* %253, i64 %10629
  %10631 = load i16, i16* %10630, align 2, !tbaa !393
  %10632 = insertelement <32 x i16> %10627, i16 %10631, i32 30
  %10633 = extractelement <32 x i32> %10477, i32 31
  %10634 = sext i32 %10633 to i64
  %10635 = getelementptr inbounds i16, i16* %253, i64 %10634
  %10636 = load i16, i16* %10635, align 2, !tbaa !393
  %10637 = insertelement <32 x i16> %10632, i16 %10636, i32 31
  %10638 = shufflevector <32 x i16> %10637, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10639 = sext i32 %read_input.s0.x.v2.base.s814 to i64
  %10640 = add nsw i64 %10441, %10639
  %10641 = getelementptr inbounds i16, i16* %read_input784, i64 %10640
  %10642 = getelementptr inbounds i16, i16* %10641, i64 -32
  %10643 = bitcast i16* %10642 to <16 x i16>*
  store <16 x i16> %10638, <16 x i16>* %10643, align 2, !tbaa !396
  %10644 = shufflevector <32 x i16> %10637, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10645 = getelementptr inbounds i16, i16* %10641, i64 -16
  %10646 = bitcast i16* %10645 to <16 x i16>*
  store <16 x i16> %10644, <16 x i16>* %10646, align 2, !tbaa !396
  %10647 = add nuw nsw i32 %read_input.s0.x.x813, 1
  %.not2511 = icmp eq i32 %10647, %b331
  br i1 %.not2511, label %"end for read_input.s0.x.x812", label %"for read_input.s0.x.x811"

"end for read_input.s0.x.x812":                   ; preds = %"for read_input.s0.x.x811", %"for read_input.s0.y.rebased807"
  br i1 %273, label %"for read_input.s0.x.x.rebased817.preheader", label %"end for read_input.s0.x.x.rebased818", !prof !386

"for read_input.s0.x.x.rebased817.preheader":     ; preds = %"end for read_input.s0.x.x812"
  %10648 = add nuw nsw i64 %10231, %indvars.iv3136
  %10649 = mul nsw i64 %10648, %271
  %10650 = sub i64 %10649, %272
  br i1 %372, label %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased817"

"for read_input.s0.x.x.rebased817":               ; preds = %"for read_input.s0.x.x.rebased817.preheader", %"for read_input.s0.x.x.rebased817"
  %indvars.iv3133 = phi i64 [ %indvars.iv.next3134.3, %"for read_input.s0.x.x.rebased817" ], [ 0, %"for read_input.s0.x.x.rebased817.preheader" ]
  %niter3405 = phi i64 [ %niter3405.nsub.3, %"for read_input.s0.x.x.rebased817" ], [ %unroll_iter3404, %"for read_input.s0.x.x.rebased817.preheader" ]
  %10651 = add nuw nsw i64 %indvars.iv3133, %365
  %10652 = shl nsw i64 %10651, 5
  %10653 = add nsw i64 %10652, %366
  %10654 = add nsw i64 %10653, %10435
  %10655 = getelementptr inbounds i16, i16* %253, i64 %10654
  %10656 = getelementptr inbounds i16, i16* %10655, i64 -32
  %10657 = bitcast i16* %10656 to <16 x i16>*
  %10658 = load <16 x i16>, <16 x i16>* %10657, align 2, !tbaa !393
  %10659 = getelementptr inbounds i16, i16* %10655, i64 -16
  %10660 = bitcast i16* %10659 to <16 x i16>*
  %10661 = load <16 x i16>, <16 x i16>* %10660, align 2, !tbaa !393
  %10662 = add nsw i64 %10650, %10653
  %10663 = getelementptr inbounds i16, i16* %read_input784, i64 %10662
  %10664 = getelementptr inbounds i16, i16* %10663, i64 -32
  %10665 = bitcast i16* %10664 to <16 x i16>*
  store <16 x i16> %10658, <16 x i16>* %10665, align 2, !tbaa !396
  %10666 = getelementptr inbounds i16, i16* %10663, i64 -16
  %10667 = bitcast i16* %10666 to <16 x i16>*
  store <16 x i16> %10661, <16 x i16>* %10667, align 2, !tbaa !396
  %indvars.iv.next3134 = or i64 %indvars.iv3133, 1
  %10668 = add nuw nsw i64 %indvars.iv.next3134, %365
  %10669 = shl nsw i64 %10668, 5
  %10670 = add nsw i64 %10669, %366
  %10671 = add nsw i64 %10670, %10435
  %10672 = getelementptr inbounds i16, i16* %253, i64 %10671
  %10673 = getelementptr inbounds i16, i16* %10672, i64 -32
  %10674 = bitcast i16* %10673 to <16 x i16>*
  %10675 = load <16 x i16>, <16 x i16>* %10674, align 2, !tbaa !393
  %10676 = getelementptr inbounds i16, i16* %10672, i64 -16
  %10677 = bitcast i16* %10676 to <16 x i16>*
  %10678 = load <16 x i16>, <16 x i16>* %10677, align 2, !tbaa !393
  %10679 = add nsw i64 %10650, %10670
  %10680 = getelementptr inbounds i16, i16* %read_input784, i64 %10679
  %10681 = getelementptr inbounds i16, i16* %10680, i64 -32
  %10682 = bitcast i16* %10681 to <16 x i16>*
  store <16 x i16> %10675, <16 x i16>* %10682, align 2, !tbaa !396
  %10683 = getelementptr inbounds i16, i16* %10680, i64 -16
  %10684 = bitcast i16* %10683 to <16 x i16>*
  store <16 x i16> %10678, <16 x i16>* %10684, align 2, !tbaa !396
  %indvars.iv.next3134.1 = or i64 %indvars.iv3133, 2
  %10685 = add nuw nsw i64 %indvars.iv.next3134.1, %365
  %10686 = shl nsw i64 %10685, 5
  %10687 = add nsw i64 %10686, %366
  %10688 = add nsw i64 %10687, %10435
  %10689 = getelementptr inbounds i16, i16* %253, i64 %10688
  %10690 = getelementptr inbounds i16, i16* %10689, i64 -32
  %10691 = bitcast i16* %10690 to <16 x i16>*
  %10692 = load <16 x i16>, <16 x i16>* %10691, align 2, !tbaa !393
  %10693 = getelementptr inbounds i16, i16* %10689, i64 -16
  %10694 = bitcast i16* %10693 to <16 x i16>*
  %10695 = load <16 x i16>, <16 x i16>* %10694, align 2, !tbaa !393
  %10696 = add nsw i64 %10650, %10687
  %10697 = getelementptr inbounds i16, i16* %read_input784, i64 %10696
  %10698 = getelementptr inbounds i16, i16* %10697, i64 -32
  %10699 = bitcast i16* %10698 to <16 x i16>*
  store <16 x i16> %10692, <16 x i16>* %10699, align 2, !tbaa !396
  %10700 = getelementptr inbounds i16, i16* %10697, i64 -16
  %10701 = bitcast i16* %10700 to <16 x i16>*
  store <16 x i16> %10695, <16 x i16>* %10701, align 2, !tbaa !396
  %indvars.iv.next3134.2 = or i64 %indvars.iv3133, 3
  %10702 = add nuw nsw i64 %indvars.iv.next3134.2, %365
  %10703 = shl nsw i64 %10702, 5
  %10704 = add nsw i64 %10703, %366
  %10705 = add nsw i64 %10704, %10435
  %10706 = getelementptr inbounds i16, i16* %253, i64 %10705
  %10707 = getelementptr inbounds i16, i16* %10706, i64 -32
  %10708 = bitcast i16* %10707 to <16 x i16>*
  %10709 = load <16 x i16>, <16 x i16>* %10708, align 2, !tbaa !393
  %10710 = getelementptr inbounds i16, i16* %10706, i64 -16
  %10711 = bitcast i16* %10710 to <16 x i16>*
  %10712 = load <16 x i16>, <16 x i16>* %10711, align 2, !tbaa !393
  %10713 = add nsw i64 %10650, %10704
  %10714 = getelementptr inbounds i16, i16* %read_input784, i64 %10713
  %10715 = getelementptr inbounds i16, i16* %10714, i64 -32
  %10716 = bitcast i16* %10715 to <16 x i16>*
  store <16 x i16> %10709, <16 x i16>* %10716, align 2, !tbaa !396
  %10717 = getelementptr inbounds i16, i16* %10714, i64 -16
  %10718 = bitcast i16* %10717 to <16 x i16>*
  store <16 x i16> %10712, <16 x i16>* %10718, align 2, !tbaa !396
  %indvars.iv.next3134.3 = add nuw nsw i64 %indvars.iv3133, 4
  %niter3405.nsub.3 = add i64 %niter3405, -4
  %niter3405.ncmp.3 = icmp eq i64 %niter3405.nsub.3, 0
  br i1 %niter3405.ncmp.3, label %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", label %"for read_input.s0.x.x.rebased817"

"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa": ; preds = %"for read_input.s0.x.x.rebased817", %"for read_input.s0.x.x.rebased817.preheader"
  %indvars.iv3133.unr = phi i64 [ 0, %"for read_input.s0.x.x.rebased817.preheader" ], [ %indvars.iv.next3134.3, %"for read_input.s0.x.x.rebased817" ]
  br i1 %lcmp.mod3403.not, label %"end for read_input.s0.x.x.rebased818", label %"for read_input.s0.x.x.rebased817.epil"

"for read_input.s0.x.x.rebased817.epil":          ; preds = %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased817.epil"
  %indvars.iv3133.epil = phi i64 [ %indvars.iv.next3134.epil, %"for read_input.s0.x.x.rebased817.epil" ], [ %indvars.iv3133.unr, %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa" ]
  %epil.iter3402 = phi i64 [ %epil.iter3402.sub, %"for read_input.s0.x.x.rebased817.epil" ], [ %xtraiter3401, %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa" ]
  %10719 = add nuw nsw i64 %indvars.iv3133.epil, %365
  %10720 = shl nsw i64 %10719, 5
  %10721 = add nsw i64 %10720, %366
  %10722 = add nsw i64 %10721, %10435
  %10723 = getelementptr inbounds i16, i16* %253, i64 %10722
  %10724 = getelementptr inbounds i16, i16* %10723, i64 -32
  %10725 = bitcast i16* %10724 to <16 x i16>*
  %10726 = load <16 x i16>, <16 x i16>* %10725, align 2, !tbaa !393
  %10727 = getelementptr inbounds i16, i16* %10723, i64 -16
  %10728 = bitcast i16* %10727 to <16 x i16>*
  %10729 = load <16 x i16>, <16 x i16>* %10728, align 2, !tbaa !393
  %10730 = add nsw i64 %10650, %10721
  %10731 = getelementptr inbounds i16, i16* %read_input784, i64 %10730
  %10732 = getelementptr inbounds i16, i16* %10731, i64 -32
  %10733 = bitcast i16* %10732 to <16 x i16>*
  store <16 x i16> %10726, <16 x i16>* %10733, align 2, !tbaa !396
  %10734 = getelementptr inbounds i16, i16* %10731, i64 -16
  %10735 = bitcast i16* %10734 to <16 x i16>*
  store <16 x i16> %10729, <16 x i16>* %10735, align 2, !tbaa !396
  %indvars.iv.next3134.epil = add nuw nsw i64 %indvars.iv3133.epil, 1
  %epil.iter3402.sub = add i64 %epil.iter3402, -1
  %epil.iter3402.cmp.not = icmp eq i64 %epil.iter3402.sub, 0
  br i1 %epil.iter3402.cmp.not, label %"end for read_input.s0.x.x.rebased818", label %"for read_input.s0.x.x.rebased817.epil", !llvm.loop !403

"end for read_input.s0.x.x.rebased818":           ; preds = %"end for read_input.s0.x.x.rebased818.loopexit.unr-lcssa", %"for read_input.s0.x.x.rebased817.epil", %"end for read_input.s0.x.x812"
  br i1 %274, label %"for read_input.s0.x.x.rebased822.preheader", label %"end for read_input.s0.x.x.rebased823", !prof !386

"for read_input.s0.x.x.rebased822.preheader":     ; preds = %"end for read_input.s0.x.x.rebased818"
  %10736 = trunc i64 %10435 to i32
  %10737 = insertelement <32 x i32> undef, i32 %10736, i32 0
  %10738 = shufflevector <32 x i32> %10737, <32 x i32> undef, <32 x i32> zeroinitializer
  %10739 = add nuw nsw i64 %10231, %indvars.iv3136
  %10740 = mul nsw i64 %10739, %271
  %10741 = sub i64 %10740, %272
  br label %"for read_input.s0.x.x.rebased822"

"for read_input.s0.x.x.rebased822":               ; preds = %"for read_input.s0.x.x.rebased822.preheader", %"for read_input.s0.x.x.rebased822"
  %read_input.s0.x.x.rebased824 = phi i32 [ %10941, %"for read_input.s0.x.x.rebased822" ], [ 0, %"for read_input.s0.x.x.rebased822.preheader" ]
  %10742 = add nsw i32 %read_input.s0.x.x.rebased824, %t1580775
  %10743 = shl nsw i32 %10742, 5
  %a367 = add nsw i32 %10743, %t1606791
  %10744 = icmp sgt i32 %b350, %a367
  %read_input.s0.x.v2.base.s825 = select i1 %10744, i32 %a367, i32 %b350
  %10745 = add nsw i32 %read_input.s0.x.v2.base.s825, -32
  %10746 = insertelement <32 x i32> undef, i32 %10745, i32 0
  %10747 = shufflevector <32 x i32> %10746, <32 x i32> undef, <32 x i32> zeroinitializer
  %a369 = add nsw <32 x i32> %10747, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10748 = shufflevector <32 x i32> %a369, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10749 = icmp sgt <8 x i32> %264, %10748
  %10750 = shufflevector <32 x i32> %a369, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10751 = icmp sgt <8 x i32> %264, %10750
  %10752 = shufflevector <32 x i32> %a369, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10753 = icmp sgt <8 x i32> %264, %10752
  %10754 = shufflevector <32 x i32> %a369, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10755 = icmp sgt <8 x i32> %264, %10754
  %10756 = select <8 x i1> %10749, <8 x i32> %10748, <8 x i32> %264
  %10757 = select <8 x i1> %10751, <8 x i32> %10750, <8 x i32> %264
  %10758 = select <8 x i1> %10753, <8 x i32> %10752, <8 x i32> %264
  %10759 = select <8 x i1> %10755, <8 x i32> %10754, <8 x i32> %264
  %10760 = icmp sgt <8 x i32> %10756, %266
  %10761 = icmp sgt <8 x i32> %10757, %266
  %10762 = icmp sgt <8 x i32> %10758, %266
  %10763 = icmp sgt <8 x i32> %10759, %266
  %10764 = select <8 x i1> %10760, <8 x i32> %10756, <8 x i32> %266
  %10765 = select <8 x i1> %10761, <8 x i32> %10757, <8 x i32> %266
  %10766 = select <8 x i1> %10762, <8 x i32> %10758, <8 x i32> %266
  %10767 = select <8 x i1> %10763, <8 x i32> %10759, <8 x i32> %266
  %10768 = shufflevector <8 x i32> %10764, <8 x i32> %10765, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10769 = shufflevector <8 x i32> %10766, <8 x i32> %10767, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10770 = shufflevector <16 x i32> %10768, <16 x i32> %10769, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10771 = add nsw <32 x i32> %10770, %10738
  %10772 = extractelement <32 x i32> %10771, i32 0
  %10773 = sext i32 %10772 to i64
  %10774 = getelementptr inbounds i16, i16* %253, i64 %10773
  %10775 = load i16, i16* %10774, align 2, !tbaa !393
  %10776 = insertelement <32 x i16> undef, i16 %10775, i32 0
  %10777 = extractelement <32 x i32> %10771, i32 1
  %10778 = sext i32 %10777 to i64
  %10779 = getelementptr inbounds i16, i16* %253, i64 %10778
  %10780 = load i16, i16* %10779, align 2, !tbaa !393
  %10781 = insertelement <32 x i16> %10776, i16 %10780, i32 1
  %10782 = extractelement <32 x i32> %10771, i32 2
  %10783 = sext i32 %10782 to i64
  %10784 = getelementptr inbounds i16, i16* %253, i64 %10783
  %10785 = load i16, i16* %10784, align 2, !tbaa !393
  %10786 = insertelement <32 x i16> %10781, i16 %10785, i32 2
  %10787 = extractelement <32 x i32> %10771, i32 3
  %10788 = sext i32 %10787 to i64
  %10789 = getelementptr inbounds i16, i16* %253, i64 %10788
  %10790 = load i16, i16* %10789, align 2, !tbaa !393
  %10791 = insertelement <32 x i16> %10786, i16 %10790, i32 3
  %10792 = extractelement <32 x i32> %10771, i32 4
  %10793 = sext i32 %10792 to i64
  %10794 = getelementptr inbounds i16, i16* %253, i64 %10793
  %10795 = load i16, i16* %10794, align 2, !tbaa !393
  %10796 = insertelement <32 x i16> %10791, i16 %10795, i32 4
  %10797 = extractelement <32 x i32> %10771, i32 5
  %10798 = sext i32 %10797 to i64
  %10799 = getelementptr inbounds i16, i16* %253, i64 %10798
  %10800 = load i16, i16* %10799, align 2, !tbaa !393
  %10801 = insertelement <32 x i16> %10796, i16 %10800, i32 5
  %10802 = extractelement <32 x i32> %10771, i32 6
  %10803 = sext i32 %10802 to i64
  %10804 = getelementptr inbounds i16, i16* %253, i64 %10803
  %10805 = load i16, i16* %10804, align 2, !tbaa !393
  %10806 = insertelement <32 x i16> %10801, i16 %10805, i32 6
  %10807 = extractelement <32 x i32> %10771, i32 7
  %10808 = sext i32 %10807 to i64
  %10809 = getelementptr inbounds i16, i16* %253, i64 %10808
  %10810 = load i16, i16* %10809, align 2, !tbaa !393
  %10811 = insertelement <32 x i16> %10806, i16 %10810, i32 7
  %10812 = extractelement <32 x i32> %10771, i32 8
  %10813 = sext i32 %10812 to i64
  %10814 = getelementptr inbounds i16, i16* %253, i64 %10813
  %10815 = load i16, i16* %10814, align 2, !tbaa !393
  %10816 = insertelement <32 x i16> %10811, i16 %10815, i32 8
  %10817 = extractelement <32 x i32> %10771, i32 9
  %10818 = sext i32 %10817 to i64
  %10819 = getelementptr inbounds i16, i16* %253, i64 %10818
  %10820 = load i16, i16* %10819, align 2, !tbaa !393
  %10821 = insertelement <32 x i16> %10816, i16 %10820, i32 9
  %10822 = extractelement <32 x i32> %10771, i32 10
  %10823 = sext i32 %10822 to i64
  %10824 = getelementptr inbounds i16, i16* %253, i64 %10823
  %10825 = load i16, i16* %10824, align 2, !tbaa !393
  %10826 = insertelement <32 x i16> %10821, i16 %10825, i32 10
  %10827 = extractelement <32 x i32> %10771, i32 11
  %10828 = sext i32 %10827 to i64
  %10829 = getelementptr inbounds i16, i16* %253, i64 %10828
  %10830 = load i16, i16* %10829, align 2, !tbaa !393
  %10831 = insertelement <32 x i16> %10826, i16 %10830, i32 11
  %10832 = extractelement <32 x i32> %10771, i32 12
  %10833 = sext i32 %10832 to i64
  %10834 = getelementptr inbounds i16, i16* %253, i64 %10833
  %10835 = load i16, i16* %10834, align 2, !tbaa !393
  %10836 = insertelement <32 x i16> %10831, i16 %10835, i32 12
  %10837 = extractelement <32 x i32> %10771, i32 13
  %10838 = sext i32 %10837 to i64
  %10839 = getelementptr inbounds i16, i16* %253, i64 %10838
  %10840 = load i16, i16* %10839, align 2, !tbaa !393
  %10841 = insertelement <32 x i16> %10836, i16 %10840, i32 13
  %10842 = extractelement <32 x i32> %10771, i32 14
  %10843 = sext i32 %10842 to i64
  %10844 = getelementptr inbounds i16, i16* %253, i64 %10843
  %10845 = load i16, i16* %10844, align 2, !tbaa !393
  %10846 = insertelement <32 x i16> %10841, i16 %10845, i32 14
  %10847 = extractelement <32 x i32> %10771, i32 15
  %10848 = sext i32 %10847 to i64
  %10849 = getelementptr inbounds i16, i16* %253, i64 %10848
  %10850 = load i16, i16* %10849, align 2, !tbaa !393
  %10851 = insertelement <32 x i16> %10846, i16 %10850, i32 15
  %10852 = extractelement <32 x i32> %10771, i32 16
  %10853 = sext i32 %10852 to i64
  %10854 = getelementptr inbounds i16, i16* %253, i64 %10853
  %10855 = load i16, i16* %10854, align 2, !tbaa !393
  %10856 = insertelement <32 x i16> %10851, i16 %10855, i32 16
  %10857 = extractelement <32 x i32> %10771, i32 17
  %10858 = sext i32 %10857 to i64
  %10859 = getelementptr inbounds i16, i16* %253, i64 %10858
  %10860 = load i16, i16* %10859, align 2, !tbaa !393
  %10861 = insertelement <32 x i16> %10856, i16 %10860, i32 17
  %10862 = extractelement <32 x i32> %10771, i32 18
  %10863 = sext i32 %10862 to i64
  %10864 = getelementptr inbounds i16, i16* %253, i64 %10863
  %10865 = load i16, i16* %10864, align 2, !tbaa !393
  %10866 = insertelement <32 x i16> %10861, i16 %10865, i32 18
  %10867 = extractelement <32 x i32> %10771, i32 19
  %10868 = sext i32 %10867 to i64
  %10869 = getelementptr inbounds i16, i16* %253, i64 %10868
  %10870 = load i16, i16* %10869, align 2, !tbaa !393
  %10871 = insertelement <32 x i16> %10866, i16 %10870, i32 19
  %10872 = extractelement <32 x i32> %10771, i32 20
  %10873 = sext i32 %10872 to i64
  %10874 = getelementptr inbounds i16, i16* %253, i64 %10873
  %10875 = load i16, i16* %10874, align 2, !tbaa !393
  %10876 = insertelement <32 x i16> %10871, i16 %10875, i32 20
  %10877 = extractelement <32 x i32> %10771, i32 21
  %10878 = sext i32 %10877 to i64
  %10879 = getelementptr inbounds i16, i16* %253, i64 %10878
  %10880 = load i16, i16* %10879, align 2, !tbaa !393
  %10881 = insertelement <32 x i16> %10876, i16 %10880, i32 21
  %10882 = extractelement <32 x i32> %10771, i32 22
  %10883 = sext i32 %10882 to i64
  %10884 = getelementptr inbounds i16, i16* %253, i64 %10883
  %10885 = load i16, i16* %10884, align 2, !tbaa !393
  %10886 = insertelement <32 x i16> %10881, i16 %10885, i32 22
  %10887 = extractelement <32 x i32> %10771, i32 23
  %10888 = sext i32 %10887 to i64
  %10889 = getelementptr inbounds i16, i16* %253, i64 %10888
  %10890 = load i16, i16* %10889, align 2, !tbaa !393
  %10891 = insertelement <32 x i16> %10886, i16 %10890, i32 23
  %10892 = extractelement <32 x i32> %10771, i32 24
  %10893 = sext i32 %10892 to i64
  %10894 = getelementptr inbounds i16, i16* %253, i64 %10893
  %10895 = load i16, i16* %10894, align 2, !tbaa !393
  %10896 = insertelement <32 x i16> %10891, i16 %10895, i32 24
  %10897 = extractelement <32 x i32> %10771, i32 25
  %10898 = sext i32 %10897 to i64
  %10899 = getelementptr inbounds i16, i16* %253, i64 %10898
  %10900 = load i16, i16* %10899, align 2, !tbaa !393
  %10901 = insertelement <32 x i16> %10896, i16 %10900, i32 25
  %10902 = extractelement <32 x i32> %10771, i32 26
  %10903 = sext i32 %10902 to i64
  %10904 = getelementptr inbounds i16, i16* %253, i64 %10903
  %10905 = load i16, i16* %10904, align 2, !tbaa !393
  %10906 = insertelement <32 x i16> %10901, i16 %10905, i32 26
  %10907 = extractelement <32 x i32> %10771, i32 27
  %10908 = sext i32 %10907 to i64
  %10909 = getelementptr inbounds i16, i16* %253, i64 %10908
  %10910 = load i16, i16* %10909, align 2, !tbaa !393
  %10911 = insertelement <32 x i16> %10906, i16 %10910, i32 27
  %10912 = extractelement <32 x i32> %10771, i32 28
  %10913 = sext i32 %10912 to i64
  %10914 = getelementptr inbounds i16, i16* %253, i64 %10913
  %10915 = load i16, i16* %10914, align 2, !tbaa !393
  %10916 = insertelement <32 x i16> %10911, i16 %10915, i32 28
  %10917 = extractelement <32 x i32> %10771, i32 29
  %10918 = sext i32 %10917 to i64
  %10919 = getelementptr inbounds i16, i16* %253, i64 %10918
  %10920 = load i16, i16* %10919, align 2, !tbaa !393
  %10921 = insertelement <32 x i16> %10916, i16 %10920, i32 29
  %10922 = extractelement <32 x i32> %10771, i32 30
  %10923 = sext i32 %10922 to i64
  %10924 = getelementptr inbounds i16, i16* %253, i64 %10923
  %10925 = load i16, i16* %10924, align 2, !tbaa !393
  %10926 = insertelement <32 x i16> %10921, i16 %10925, i32 30
  %10927 = extractelement <32 x i32> %10771, i32 31
  %10928 = sext i32 %10927 to i64
  %10929 = getelementptr inbounds i16, i16* %253, i64 %10928
  %10930 = load i16, i16* %10929, align 2, !tbaa !393
  %10931 = insertelement <32 x i16> %10926, i16 %10930, i32 31
  %10932 = shufflevector <32 x i16> %10931, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10933 = sext i32 %read_input.s0.x.v2.base.s825 to i64
  %10934 = add nsw i64 %10741, %10933
  %10935 = getelementptr inbounds i16, i16* %read_input784, i64 %10934
  %10936 = getelementptr inbounds i16, i16* %10935, i64 -32
  %10937 = bitcast i16* %10936 to <16 x i16>*
  store <16 x i16> %10932, <16 x i16>* %10937, align 2, !tbaa !396
  %10938 = shufflevector <32 x i16> %10931, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10939 = getelementptr inbounds i16, i16* %10935, i64 -16
  %10940 = bitcast i16* %10939 to <16 x i16>*
  store <16 x i16> %10938, <16 x i16>* %10940, align 2, !tbaa !396
  %10941 = add nuw nsw i32 %read_input.s0.x.x.rebased824, 1
  %.not2509 = icmp eq i32 %10941, %t1617803
  br i1 %.not2509, label %"end for read_input.s0.x.x.rebased823", label %"for read_input.s0.x.x.rebased822"

"end for read_input.s0.x.x.rebased823":           ; preds = %"for read_input.s0.x.x.rebased822", %"end for read_input.s0.x.x.rebased818"
  %indvars.iv.next3137 = add nuw nsw i64 %indvars.iv3136, 1
  %.not2508 = icmp eq i64 %indvars.iv.next3137, %10233
  br i1 %.not2508, label %"end for read_input.s0.y.rebased808", label %"for read_input.s0.y.rebased807"

"for read_input.s0.y.rebased831":                 ; preds = %"for read_input.s0.y.rebased831.preheader", %"end for read_input.s0.x.x836"
  %indvars.iv3139 = phi i64 [ 0, %"for read_input.s0.y.rebased831.preheader" ], [ %indvars.iv.next3140, %"end for read_input.s0.x.x836" ]
  %10942 = trunc i64 %indvars.iv3139 to i32
  %a378 = add nsw i32 %t1631828, %10942
  %10943 = icmp sgt i32 %b349, %a378
  %a377 = select i1 %10943, i32 %a378, i32 %b349
  %10944 = icmp sgt i32 %a377, 0
  %10945 = select i1 %10944, i32 %a377, i32 0
  %10946 = mul nsw i32 %10945, %203
  %t1635834 = sub nsw i32 %10946, %199
  %10947 = insertelement <32 x i32> undef, i32 %t1635834, i32 0
  %10948 = shufflevector <32 x i32> %10947, <32 x i32> undef, <32 x i32> zeroinitializer
  %10949 = add nuw nsw i64 %10447, %indvars.iv3139
  %10950 = mul nsw i64 %10949, %271
  %10951 = sub i64 %10950, %272
  br label %"for read_input.s0.x.x835"

"end for read_input.s0.y.rebased832":             ; preds = %"end for read_input.s0.x.x836", %"end for read_input.s0.y.rebased808"
  %10952 = load i64, i64* %.fca.1.gep2280, align 8, !tbaa !387
  %cmp.i2687 = icmp ult i64 %10952, %281
  %10953 = load i8*, i8** %.fca.0.gep2279, align 8, !tbaa !389
  br i1 %cmp.i2687, label %if.then.i2690, label %pseudostack_alloc.exit2703, !prof !390

if.then.i2690:                                    ; preds = %"end for read_input.s0.y.rebased832"
  %tobool1.not.i2689 = icmp ne i8* %10953, null
  %10954 = load i64, i64* %.fca.2.gep2281, align 8
  %cmp2.i2692 = icmp ugt i64 %10954, 16384
  %or.cond2734 = and i1 %tobool1.not.i2689, %cmp2.i2692
  br i1 %or.cond2734, label %if.then3.i2694, label %if.end.i2698

if.then3.i2694:                                   ; preds = %if.then.i2690
  call void @halide_free(i8* null, i8* nonnull %10953) #16
  %.pre3245 = load i64, i64* %.fca.2.gep2281, align 8, !tbaa !391
  br label %if.end.i2698

if.end.i2698:                                     ; preds = %if.then3.i2694, %if.then.i2690
  %10955 = phi i64 [ %.pre3245, %if.then3.i2694 ], [ %10954, %if.then.i2690 ]
  %add.i2696 = add i64 %10955, %281
  store i64 %add.i2696, i64* %.fca.2.gep2281, align 8, !tbaa !391
  %cmp7.i2697 = icmp ugt i64 %add.i2696, 16384
  br i1 %cmp7.i2697, label %if.then8.i2700, label %if.end11.i2702

if.then8.i2700:                                   ; preds = %if.end.i2698
  %call.i2699 = call i8* @halide_malloc(i8* null, i64 %281) #16
  br label %if.end11.i2702

if.end11.i2702:                                   ; preds = %if.then8.i2700, %if.end.i2698
  %storemerge.i2701 = phi i8* [ %call.i2699, %if.then8.i2700 ], [ null, %if.end.i2698 ]
  store i8* %storemerge.i2701, i8** %.fca.0.gep2279, align 8, !tbaa !389
  store i64 %281, i64* %.fca.1.gep2280, align 8, !tbaa !387
  br label %pseudostack_alloc.exit2703

pseudostack_alloc.exit2703:                       ; preds = %"end for read_input.s0.y.rebased832", %if.end11.i2702
  %10956 = phi i8* [ %storemerge.i2701, %if.end11.i2702 ], [ %10953, %"end for read_input.s0.y.rebased832" ]
  %10957 = bitcast i8* %10956 to i16*
  %.not2435 = icmp eq i8* %10956, null
  br i1 %.not2435, label %then_bb840, label %"consume read_input842", !prof !392

"for read_input.s0.x.x835":                       ; preds = %"for read_input.s0.y.rebased831", %"for read_input.s0.x.x835"
  %read_input.s0.x.x837 = phi i32 [ %11156, %"for read_input.s0.x.x835" ], [ 0, %"for read_input.s0.y.rebased831" ]
  %10958 = shl nsw i32 %read_input.s0.x.x837, 5
  %a379 = add nsw i32 %10958, %t1606791
  %10959 = icmp sgt i32 %b350, %a379
  %read_input.s0.x.v2.base.s838 = select i1 %10959, i32 %a379, i32 %b350
  %10960 = add nsw i32 %read_input.s0.x.v2.base.s838, -32
  %10961 = insertelement <32 x i32> undef, i32 %10960, i32 0
  %10962 = shufflevector <32 x i32> %10961, <32 x i32> undef, <32 x i32> zeroinitializer
  %a381 = add nsw <32 x i32> %10962, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10963 = shufflevector <32 x i32> %a381, <32 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %10964 = icmp sgt <8 x i32> %264, %10963
  %10965 = shufflevector <32 x i32> %a381, <32 x i32> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10966 = icmp sgt <8 x i32> %264, %10965
  %10967 = shufflevector <32 x i32> %a381, <32 x i32> undef, <8 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %10968 = icmp sgt <8 x i32> %264, %10967
  %10969 = shufflevector <32 x i32> %a381, <32 x i32> undef, <8 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10970 = icmp sgt <8 x i32> %264, %10969
  %10971 = select <8 x i1> %10964, <8 x i32> %10963, <8 x i32> %264
  %10972 = select <8 x i1> %10966, <8 x i32> %10965, <8 x i32> %264
  %10973 = select <8 x i1> %10968, <8 x i32> %10967, <8 x i32> %264
  %10974 = select <8 x i1> %10970, <8 x i32> %10969, <8 x i32> %264
  %10975 = icmp sgt <8 x i32> %10971, %266
  %10976 = icmp sgt <8 x i32> %10972, %266
  %10977 = icmp sgt <8 x i32> %10973, %266
  %10978 = icmp sgt <8 x i32> %10974, %266
  %10979 = select <8 x i1> %10975, <8 x i32> %10971, <8 x i32> %266
  %10980 = select <8 x i1> %10976, <8 x i32> %10972, <8 x i32> %266
  %10981 = select <8 x i1> %10977, <8 x i32> %10973, <8 x i32> %266
  %10982 = select <8 x i1> %10978, <8 x i32> %10974, <8 x i32> %266
  %10983 = shufflevector <8 x i32> %10979, <8 x i32> %10980, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10984 = shufflevector <8 x i32> %10981, <8 x i32> %10982, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %10985 = shufflevector <16 x i32> %10983, <16 x i32> %10984, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %10986 = add nsw <32 x i32> %10985, %10948
  %10987 = extractelement <32 x i32> %10986, i32 0
  %10988 = sext i32 %10987 to i64
  %10989 = getelementptr inbounds i16, i16* %253, i64 %10988
  %10990 = load i16, i16* %10989, align 2, !tbaa !393
  %10991 = insertelement <32 x i16> undef, i16 %10990, i32 0
  %10992 = extractelement <32 x i32> %10986, i32 1
  %10993 = sext i32 %10992 to i64
  %10994 = getelementptr inbounds i16, i16* %253, i64 %10993
  %10995 = load i16, i16* %10994, align 2, !tbaa !393
  %10996 = insertelement <32 x i16> %10991, i16 %10995, i32 1
  %10997 = extractelement <32 x i32> %10986, i32 2
  %10998 = sext i32 %10997 to i64
  %10999 = getelementptr inbounds i16, i16* %253, i64 %10998
  %11000 = load i16, i16* %10999, align 2, !tbaa !393
  %11001 = insertelement <32 x i16> %10996, i16 %11000, i32 2
  %11002 = extractelement <32 x i32> %10986, i32 3
  %11003 = sext i32 %11002 to i64
  %11004 = getelementptr inbounds i16, i16* %253, i64 %11003
  %11005 = load i16, i16* %11004, align 2, !tbaa !393
  %11006 = insertelement <32 x i16> %11001, i16 %11005, i32 3
  %11007 = extractelement <32 x i32> %10986, i32 4
  %11008 = sext i32 %11007 to i64
  %11009 = getelementptr inbounds i16, i16* %253, i64 %11008
  %11010 = load i16, i16* %11009, align 2, !tbaa !393
  %11011 = insertelement <32 x i16> %11006, i16 %11010, i32 4
  %11012 = extractelement <32 x i32> %10986, i32 5
  %11013 = sext i32 %11012 to i64
  %11014 = getelementptr inbounds i16, i16* %253, i64 %11013
  %11015 = load i16, i16* %11014, align 2, !tbaa !393
  %11016 = insertelement <32 x i16> %11011, i16 %11015, i32 5
  %11017 = extractelement <32 x i32> %10986, i32 6
  %11018 = sext i32 %11017 to i64
  %11019 = getelementptr inbounds i16, i16* %253, i64 %11018
  %11020 = load i16, i16* %11019, align 2, !tbaa !393
  %11021 = insertelement <32 x i16> %11016, i16 %11020, i32 6
  %11022 = extractelement <32 x i32> %10986, i32 7
  %11023 = sext i32 %11022 to i64
  %11024 = getelementptr inbounds i16, i16* %253, i64 %11023
  %11025 = load i16, i16* %11024, align 2, !tbaa !393
  %11026 = insertelement <32 x i16> %11021, i16 %11025, i32 7
  %11027 = extractelement <32 x i32> %10986, i32 8
  %11028 = sext i32 %11027 to i64
  %11029 = getelementptr inbounds i16, i16* %253, i64 %11028
  %11030 = load i16, i16* %11029, align 2, !tbaa !393
  %11031 = insertelement <32 x i16> %11026, i16 %11030, i32 8
  %11032 = extractelement <32 x i32> %10986, i32 9
  %11033 = sext i32 %11032 to i64
  %11034 = getelementptr inbounds i16, i16* %253, i64 %11033
  %11035 = load i16, i16* %11034, align 2, !tbaa !393
  %11036 = insertelement <32 x i16> %11031, i16 %11035, i32 9
  %11037 = extractelement <32 x i32> %10986, i32 10
  %11038 = sext i32 %11037 to i64
  %11039 = getelementptr inbounds i16, i16* %253, i64 %11038
  %11040 = load i16, i16* %11039, align 2, !tbaa !393
  %11041 = insertelement <32 x i16> %11036, i16 %11040, i32 10
  %11042 = extractelement <32 x i32> %10986, i32 11
  %11043 = sext i32 %11042 to i64
  %11044 = getelementptr inbounds i16, i16* %253, i64 %11043
  %11045 = load i16, i16* %11044, align 2, !tbaa !393
  %11046 = insertelement <32 x i16> %11041, i16 %11045, i32 11
  %11047 = extractelement <32 x i32> %10986, i32 12
  %11048 = sext i32 %11047 to i64
  %11049 = getelementptr inbounds i16, i16* %253, i64 %11048
  %11050 = load i16, i16* %11049, align 2, !tbaa !393
  %11051 = insertelement <32 x i16> %11046, i16 %11050, i32 12
  %11052 = extractelement <32 x i32> %10986, i32 13
  %11053 = sext i32 %11052 to i64
  %11054 = getelementptr inbounds i16, i16* %253, i64 %11053
  %11055 = load i16, i16* %11054, align 2, !tbaa !393
  %11056 = insertelement <32 x i16> %11051, i16 %11055, i32 13
  %11057 = extractelement <32 x i32> %10986, i32 14
  %11058 = sext i32 %11057 to i64
  %11059 = getelementptr inbounds i16, i16* %253, i64 %11058
  %11060 = load i16, i16* %11059, align 2, !tbaa !393
  %11061 = insertelement <32 x i16> %11056, i16 %11060, i32 14
  %11062 = extractelement <32 x i32> %10986, i32 15
  %11063 = sext i32 %11062 to i64
  %11064 = getelementptr inbounds i16, i16* %253, i64 %11063
  %11065 = load i16, i16* %11064, align 2, !tbaa !393
  %11066 = insertelement <32 x i16> %11061, i16 %11065, i32 15
  %11067 = extractelement <32 x i32> %10986, i32 16
  %11068 = sext i32 %11067 to i64
  %11069 = getelementptr inbounds i16, i16* %253, i64 %11068
  %11070 = load i16, i16* %11069, align 2, !tbaa !393
  %11071 = insertelement <32 x i16> %11066, i16 %11070, i32 16
  %11072 = extractelement <32 x i32> %10986, i32 17
  %11073 = sext i32 %11072 to i64
  %11074 = getelementptr inbounds i16, i16* %253, i64 %11073
  %11075 = load i16, i16* %11074, align 2, !tbaa !393
  %11076 = insertelement <32 x i16> %11071, i16 %11075, i32 17
  %11077 = extractelement <32 x i32> %10986, i32 18
  %11078 = sext i32 %11077 to i64
  %11079 = getelementptr inbounds i16, i16* %253, i64 %11078
  %11080 = load i16, i16* %11079, align 2, !tbaa !393
  %11081 = insertelement <32 x i16> %11076, i16 %11080, i32 18
  %11082 = extractelement <32 x i32> %10986, i32 19
  %11083 = sext i32 %11082 to i64
  %11084 = getelementptr inbounds i16, i16* %253, i64 %11083
  %11085 = load i16, i16* %11084, align 2, !tbaa !393
  %11086 = insertelement <32 x i16> %11081, i16 %11085, i32 19
  %11087 = extractelement <32 x i32> %10986, i32 20
  %11088 = sext i32 %11087 to i64
  %11089 = getelementptr inbounds i16, i16* %253, i64 %11088
  %11090 = load i16, i16* %11089, align 2, !tbaa !393
  %11091 = insertelement <32 x i16> %11086, i16 %11090, i32 20
  %11092 = extractelement <32 x i32> %10986, i32 21
  %11093 = sext i32 %11092 to i64
  %11094 = getelementptr inbounds i16, i16* %253, i64 %11093
  %11095 = load i16, i16* %11094, align 2, !tbaa !393
  %11096 = insertelement <32 x i16> %11091, i16 %11095, i32 21
  %11097 = extractelement <32 x i32> %10986, i32 22
  %11098 = sext i32 %11097 to i64
  %11099 = getelementptr inbounds i16, i16* %253, i64 %11098
  %11100 = load i16, i16* %11099, align 2, !tbaa !393
  %11101 = insertelement <32 x i16> %11096, i16 %11100, i32 22
  %11102 = extractelement <32 x i32> %10986, i32 23
  %11103 = sext i32 %11102 to i64
  %11104 = getelementptr inbounds i16, i16* %253, i64 %11103
  %11105 = load i16, i16* %11104, align 2, !tbaa !393
  %11106 = insertelement <32 x i16> %11101, i16 %11105, i32 23
  %11107 = extractelement <32 x i32> %10986, i32 24
  %11108 = sext i32 %11107 to i64
  %11109 = getelementptr inbounds i16, i16* %253, i64 %11108
  %11110 = load i16, i16* %11109, align 2, !tbaa !393
  %11111 = insertelement <32 x i16> %11106, i16 %11110, i32 24
  %11112 = extractelement <32 x i32> %10986, i32 25
  %11113 = sext i32 %11112 to i64
  %11114 = getelementptr inbounds i16, i16* %253, i64 %11113
  %11115 = load i16, i16* %11114, align 2, !tbaa !393
  %11116 = insertelement <32 x i16> %11111, i16 %11115, i32 25
  %11117 = extractelement <32 x i32> %10986, i32 26
  %11118 = sext i32 %11117 to i64
  %11119 = getelementptr inbounds i16, i16* %253, i64 %11118
  %11120 = load i16, i16* %11119, align 2, !tbaa !393
  %11121 = insertelement <32 x i16> %11116, i16 %11120, i32 26
  %11122 = extractelement <32 x i32> %10986, i32 27
  %11123 = sext i32 %11122 to i64
  %11124 = getelementptr inbounds i16, i16* %253, i64 %11123
  %11125 = load i16, i16* %11124, align 2, !tbaa !393
  %11126 = insertelement <32 x i16> %11121, i16 %11125, i32 27
  %11127 = extractelement <32 x i32> %10986, i32 28
  %11128 = sext i32 %11127 to i64
  %11129 = getelementptr inbounds i16, i16* %253, i64 %11128
  %11130 = load i16, i16* %11129, align 2, !tbaa !393
  %11131 = insertelement <32 x i16> %11126, i16 %11130, i32 28
  %11132 = extractelement <32 x i32> %10986, i32 29
  %11133 = sext i32 %11132 to i64
  %11134 = getelementptr inbounds i16, i16* %253, i64 %11133
  %11135 = load i16, i16* %11134, align 2, !tbaa !393
  %11136 = insertelement <32 x i16> %11131, i16 %11135, i32 29
  %11137 = extractelement <32 x i32> %10986, i32 30
  %11138 = sext i32 %11137 to i64
  %11139 = getelementptr inbounds i16, i16* %253, i64 %11138
  %11140 = load i16, i16* %11139, align 2, !tbaa !393
  %11141 = insertelement <32 x i16> %11136, i16 %11140, i32 30
  %11142 = extractelement <32 x i32> %10986, i32 31
  %11143 = sext i32 %11142 to i64
  %11144 = getelementptr inbounds i16, i16* %253, i64 %11143
  %11145 = load i16, i16* %11144, align 2, !tbaa !393
  %11146 = insertelement <32 x i16> %11141, i16 %11145, i32 31
  %11147 = shufflevector <32 x i16> %11146, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11148 = sext i32 %read_input.s0.x.v2.base.s838 to i64
  %11149 = add nsw i64 %10951, %11148
  %11150 = getelementptr inbounds i16, i16* %read_input784, i64 %11149
  %11151 = getelementptr inbounds i16, i16* %11150, i64 -32
  %11152 = bitcast i16* %11151 to <16 x i16>*
  store <16 x i16> %11147, <16 x i16>* %11152, align 2, !tbaa !396
  %11153 = shufflevector <32 x i16> %11146, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11154 = getelementptr inbounds i16, i16* %11150, i64 -16
  %11155 = bitcast i16* %11154 to <16 x i16>*
  store <16 x i16> %11153, <16 x i16>* %11155, align 2, !tbaa !396
  %11156 = add nuw nsw i32 %read_input.s0.x.x837, 1
  %.not2507 = icmp eq i32 %11156, %210
  br i1 %.not2507, label %"end for read_input.s0.x.x836", label %"for read_input.s0.x.x835"

"end for read_input.s0.x.x836":                   ; preds = %"for read_input.s0.x.x835"
  %indvars.iv.next3140 = add nuw nsw i64 %indvars.iv3139, 1
  %.not2506 = icmp eq i64 %indvars.iv3139, %10448
  br i1 %.not2506, label %"end for read_input.s0.y.rebased832", label %"for read_input.s0.y.rebased831"

then_bb840:                                       ; preds = %pseudostack_alloc.exit2703
  %11157 = alloca i8*, i64 %281, align 32
  %11158 = bitcast i8** %11157 to i16*
  store i8** %11157, i8*** %282, align 8
  br label %"consume read_input842"

"consume read_input842":                          ; preds = %pseudostack_alloc.exit2703, %then_bb840
  %blur_x841 = phi i16* [ %11158, %then_bb840 ], [ %10957, %pseudostack_alloc.exit2703 ]
  br i1 %224, label %"produce blur_x846", label %"consume read_input842.after_bb843_crit_edge"

"consume read_input842.after_bb843_crit_edge":    ; preds = %"consume read_input842"
  %.pre3323 = and i32 %a339, 3
  br label %after_bb843

after_bb843:                                      ; preds = %"consume read_input842.after_bb843_crit_edge", %"produce blur_x846"
  %.pre-phi3324 = phi i32 [ %.pre3323, %"consume read_input842.after_bb843_crit_edge" ], [ %11189, %"produce blur_x846" ]
  %11159 = mul nsw i32 %.pre-phi3324, %a386
  %t1638848 = sub nsw i32 %11159, %t1601773
  br i1 %289, label %"for blur_y.s0.x.x.rebased851.preheader", label %"end for blur_y.s0.x.x.rebased852", !prof !386

"for blur_y.s0.x.x.rebased851.preheader":         ; preds = %after_bb843
  %11160 = sext i32 %t1638848 to i64
  br label %"for blur_y.s0.x.x.rebased851"

"produce blur_x846":                              ; preds = %"consume read_input842"
  %11161 = getelementptr inbounds i16, i16* %read_input784, i64 %283
  %11162 = getelementptr inbounds i16, i16* %11161, i64 -31
  %11163 = bitcast i16* %11162 to <16 x i16>*
  %11164 = load <16 x i16>, <16 x i16>* %11163, align 2, !tbaa !396
  %11165 = getelementptr inbounds i16, i16* %11161, i64 -15
  %11166 = bitcast i16* %11165 to <16 x i16>*
  %11167 = load <16 x i16>, <16 x i16>* %11166, align 2, !tbaa !396
  %11168 = getelementptr inbounds i16, i16* %11161, i64 -30
  %11169 = bitcast i16* %11168 to <16 x i16>*
  %11170 = load <16 x i16>, <16 x i16>* %11169, align 2, !tbaa !396
  %11171 = getelementptr inbounds i16, i16* %11161, i64 -14
  %11172 = bitcast i16* %11171 to <16 x i16>*
  %11173 = load <16 x i16>, <16 x i16>* %11172, align 2, !tbaa !396
  %11174 = getelementptr inbounds i16, i16* %11161, i64 -32
  %11175 = bitcast i16* %11174 to <16 x i16>*
  %11176 = load <16 x i16>, <16 x i16>* %11175, align 2, !tbaa !396
  %11177 = getelementptr inbounds i16, i16* %11161, i64 -16
  %11178 = bitcast i16* %11177 to <16 x i16>*
  %11179 = load <16 x i16>, <16 x i16>* %11178, align 2, !tbaa !396
  %11180 = add <16 x i16> %11170, %11164
  %11181 = add <16 x i16> %11180, %11176
  %11182 = add <16 x i16> %11173, %11167
  %11183 = add <16 x i16> %11182, %11179
  %11184 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11181, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11185 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11183, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11186 = shufflevector <16 x i16> %11184, <16 x i16> %11185, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11187 = lshr <32 x i16> %11186, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11188 = shufflevector <32 x i16> %11187, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11189 = and i32 %a339, 3
  %11190 = zext i32 %11189 to i64
  %11191 = mul nsw i64 %286, %11190
  %11192 = add nsw i64 %288, %11191
  %11193 = getelementptr inbounds i16, i16* %blur_x841, i64 %11192
  %11194 = getelementptr inbounds i16, i16* %11193, i64 -32
  %11195 = bitcast i16* %11194 to <16 x i16>*
  store <16 x i16> %11188, <16 x i16>* %11195, align 2, !tbaa !399
  %11196 = shufflevector <32 x i16> %11187, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11197 = getelementptr inbounds i16, i16* %11193, i64 -16
  %11198 = bitcast i16* %11197 to <16 x i16>*
  store <16 x i16> %11196, <16 x i16>* %11198, align 2, !tbaa !399
  br label %after_bb843

"for blur_y.s0.x.x.rebased851":                   ; preds = %"for blur_y.s0.x.x.rebased851.preheader", %after_bb854
  %indvars.iv3141 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased851.preheader" ], [ %indvars.iv.next3142, %after_bb854 ]
  %11199 = add nsw i64 %indvars.iv3141, %290
  %11200 = icmp slt i64 %11199, 1
  %11201 = trunc i64 %11199 to i32
  %11202 = shl nsw i32 %11201, 5
  %11203 = icmp sgt i32 %194, %11202
  %11204 = or i1 %11200, %11203
  br i1 %11204, label %"produce blur_x858", label %after_bb854

"end for blur_y.s0.x.x.rebased852":               ; preds = %after_bb854, %after_bb843
  br i1 %291, label %"for blur_y.s0.x.x.rebased863.preheader", label %"end for blur_y.s0.x.x.rebased864", !prof !386

"for blur_y.s0.x.x.rebased863.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased852"
  %11205 = sext i32 %t1638848 to i64
  br label %"for blur_y.s0.x.x.rebased863"

after_bb854:                                      ; preds = %"for blur_y.s0.x.x.rebased851", %"produce blur_x858"
  %indvars.iv.next3142 = add nuw nsw i64 %indvars.iv3141, 1
  %.not2504 = icmp eq i64 %indvars.iv.next3142, %370
  br i1 %.not2504, label %"end for blur_y.s0.x.x.rebased852", label %"for blur_y.s0.x.x.rebased851"

"produce blur_x858":                              ; preds = %"for blur_y.s0.x.x.rebased851"
  %t656859 = sub i32 %11202, %t1601773
  %11206 = sext i32 %t656859 to i64
  %11207 = getelementptr inbounds i16, i16* %read_input784, i64 %11206
  %11208 = getelementptr inbounds i16, i16* %11207, i64 1
  %11209 = bitcast i16* %11208 to <16 x i16>*
  %11210 = load <16 x i16>, <16 x i16>* %11209, align 2, !tbaa !396
  %11211 = getelementptr inbounds i16, i16* %11207, i64 17
  %11212 = bitcast i16* %11211 to <16 x i16>*
  %11213 = load <16 x i16>, <16 x i16>* %11212, align 2, !tbaa !396
  %11214 = getelementptr inbounds i16, i16* %11207, i64 2
  %11215 = bitcast i16* %11214 to <16 x i16>*
  %11216 = load <16 x i16>, <16 x i16>* %11215, align 2, !tbaa !396
  %11217 = getelementptr inbounds i16, i16* %11207, i64 18
  %11218 = bitcast i16* %11217 to <16 x i16>*
  %11219 = load <16 x i16>, <16 x i16>* %11218, align 2, !tbaa !396
  %11220 = bitcast i16* %11207 to <16 x i16>*
  %11221 = load <16 x i16>, <16 x i16>* %11220, align 2, !tbaa !396
  %11222 = getelementptr inbounds i16, i16* %11207, i64 16
  %11223 = bitcast i16* %11222 to <16 x i16>*
  %11224 = load <16 x i16>, <16 x i16>* %11223, align 2, !tbaa !396
  %11225 = add <16 x i16> %11216, %11210
  %11226 = add <16 x i16> %11225, %11221
  %11227 = add <16 x i16> %11219, %11213
  %11228 = add <16 x i16> %11227, %11224
  %11229 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11226, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11230 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11228, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11231 = shufflevector <16 x i16> %11229, <16 x i16> %11230, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11232 = lshr <32 x i16> %11231, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11233 = shufflevector <32 x i16> %11232, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11234 = shl nsw i64 %11199, 5
  %11235 = add nsw i64 %11234, %11160
  %11236 = getelementptr inbounds i16, i16* %blur_x841, i64 %11235
  %11237 = bitcast i16* %11236 to <16 x i16>*
  store <16 x i16> %11233, <16 x i16>* %11237, align 2, !tbaa !399
  %11238 = shufflevector <32 x i16> %11232, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11239 = getelementptr inbounds i16, i16* %11236, i64 16
  %11240 = bitcast i16* %11239 to <16 x i16>*
  store <16 x i16> %11238, <16 x i16>* %11240, align 2, !tbaa !399
  br label %after_bb854

"for blur_y.s0.x.x.rebased863":                   ; preds = %"for blur_y.s0.x.x.rebased863.preheader", %after_bb866
  %blur_y.s0.x.x.rebased865 = phi i32 [ %11245, %after_bb866 ], [ 0, %"for blur_y.s0.x.x.rebased863.preheader" ]
  %t2163869 = add nsw i32 %blur_y.s0.x.x.rebased865, %t1582776
  %11241 = icmp slt i32 %t2163869, 1
  %11242 = shl nsw i32 %t2163869, 5
  %11243 = icmp sgt i32 %194, %11242
  %11244 = or i1 %11241, %11243
  br i1 %11244, label %then_bb867, label %after_bb866

"end for blur_y.s0.x.x.rebased864":               ; preds = %after_bb866, %"end for blur_y.s0.x.x.rebased852"
  br i1 %224, label %"produce blur_x876", label %"end for blur_y.s0.x.x.rebased864.after_bb873_crit_edge"

"end for blur_y.s0.x.x.rebased864.after_bb873_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased864"
  %.pre3325 = add nsw i32 %a339, 1
  %.pre3327 = and i32 %.pre3325, 3
  br label %after_bb873

after_bb866:                                      ; preds = %"for blur_y.s0.x.x.rebased863", %then_bb867
  %11245 = add nuw nsw i32 %blur_y.s0.x.x.rebased865, 1
  %.not2503 = icmp eq i32 %11245, %t1639861
  br i1 %.not2503, label %"end for blur_y.s0.x.x.rebased864", label %"for blur_y.s0.x.x.rebased863"

then_bb867:                                       ; preds = %"for blur_y.s0.x.x.rebased863"
  %11246 = icmp sgt i32 %a327, %11242
  %b396 = select i1 %11246, i32 %11242, i32 %a327
  %11247 = icmp slt i32 %b396, %194
  %blur_x.s0.x.v1.base.s871 = select i1 %11247, i32 %b396, i32 %194
  %t658872 = sub i32 %blur_x.s0.x.v1.base.s871, %t1601773
  %11248 = sext i32 %t658872 to i64
  %11249 = getelementptr inbounds i16, i16* %read_input784, i64 %11248
  %11250 = getelementptr inbounds i16, i16* %11249, i64 1
  %11251 = bitcast i16* %11250 to <16 x i16>*
  %11252 = load <16 x i16>, <16 x i16>* %11251, align 2, !tbaa !396
  %11253 = getelementptr inbounds i16, i16* %11249, i64 17
  %11254 = bitcast i16* %11253 to <16 x i16>*
  %11255 = load <16 x i16>, <16 x i16>* %11254, align 2, !tbaa !396
  %11256 = getelementptr inbounds i16, i16* %11249, i64 2
  %11257 = bitcast i16* %11256 to <16 x i16>*
  %11258 = load <16 x i16>, <16 x i16>* %11257, align 2, !tbaa !396
  %11259 = getelementptr inbounds i16, i16* %11249, i64 18
  %11260 = bitcast i16* %11259 to <16 x i16>*
  %11261 = load <16 x i16>, <16 x i16>* %11260, align 2, !tbaa !396
  %11262 = bitcast i16* %11249 to <16 x i16>*
  %11263 = load <16 x i16>, <16 x i16>* %11262, align 2, !tbaa !396
  %11264 = getelementptr inbounds i16, i16* %11249, i64 16
  %11265 = bitcast i16* %11264 to <16 x i16>*
  %11266 = load <16 x i16>, <16 x i16>* %11265, align 2, !tbaa !396
  %11267 = add <16 x i16> %11258, %11252
  %11268 = add <16 x i16> %11267, %11263
  %11269 = add <16 x i16> %11261, %11255
  %11270 = add <16 x i16> %11269, %11266
  %11271 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11268, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11272 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11270, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11273 = shufflevector <16 x i16> %11271, <16 x i16> %11272, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11274 = lshr <32 x i16> %11273, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11275 = shufflevector <32 x i16> %11274, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11276 = sext i32 %blur_x.s0.x.v1.base.s871 to i64
  %11277 = add nsw i64 %11276, %11205
  %11278 = getelementptr inbounds i16, i16* %blur_x841, i64 %11277
  %11279 = bitcast i16* %11278 to <16 x i16>*
  store <16 x i16> %11275, <16 x i16>* %11279, align 2, !tbaa !399
  %11280 = shufflevector <32 x i16> %11274, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11281 = getelementptr inbounds i16, i16* %11278, i64 16
  %11282 = bitcast i16* %11281 to <16 x i16>*
  store <16 x i16> %11280, <16 x i16>* %11282, align 2, !tbaa !399
  br label %after_bb866

after_bb873:                                      ; preds = %"end for blur_y.s0.x.x.rebased864.after_bb873_crit_edge", %"produce blur_x876"
  %.pre-phi3328 = phi i32 [ %.pre3327, %"end for blur_y.s0.x.x.rebased864.after_bb873_crit_edge" ], [ %11314, %"produce blur_x876" ]
  %11283 = mul nsw i32 %.pre-phi3328, %a386
  %t1644878 = sub nsw i32 %11283, %t1601773
  br i1 %289, label %"for blur_y.s0.x.x.rebased881.preheader", label %"end for blur_y.s0.x.x.rebased882", !prof !386

"for blur_y.s0.x.x.rebased881.preheader":         ; preds = %after_bb873
  %11284 = sext i32 %t1644878 to i64
  br label %"for blur_y.s0.x.x.rebased881"

"produce blur_x876":                              ; preds = %"end for blur_y.s0.x.x.rebased864"
  %11285 = getelementptr inbounds i16, i16* %read_input784, i64 %294
  %11286 = getelementptr inbounds i16, i16* %11285, i64 -31
  %11287 = bitcast i16* %11286 to <16 x i16>*
  %11288 = load <16 x i16>, <16 x i16>* %11287, align 2, !tbaa !396
  %11289 = getelementptr inbounds i16, i16* %11285, i64 -15
  %11290 = bitcast i16* %11289 to <16 x i16>*
  %11291 = load <16 x i16>, <16 x i16>* %11290, align 2, !tbaa !396
  %11292 = getelementptr inbounds i16, i16* %11285, i64 -30
  %11293 = bitcast i16* %11292 to <16 x i16>*
  %11294 = load <16 x i16>, <16 x i16>* %11293, align 2, !tbaa !396
  %11295 = getelementptr inbounds i16, i16* %11285, i64 -14
  %11296 = bitcast i16* %11295 to <16 x i16>*
  %11297 = load <16 x i16>, <16 x i16>* %11296, align 2, !tbaa !396
  %11298 = getelementptr inbounds i16, i16* %11285, i64 -32
  %11299 = bitcast i16* %11298 to <16 x i16>*
  %11300 = load <16 x i16>, <16 x i16>* %11299, align 2, !tbaa !396
  %11301 = getelementptr inbounds i16, i16* %11285, i64 -16
  %11302 = bitcast i16* %11301 to <16 x i16>*
  %11303 = load <16 x i16>, <16 x i16>* %11302, align 2, !tbaa !396
  %11304 = add <16 x i16> %11294, %11288
  %11305 = add <16 x i16> %11304, %11300
  %11306 = add <16 x i16> %11297, %11291
  %11307 = add <16 x i16> %11306, %11303
  %11308 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11305, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11309 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11307, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11310 = shufflevector <16 x i16> %11308, <16 x i16> %11309, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11311 = lshr <32 x i16> %11310, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11312 = shufflevector <32 x i16> %11311, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11313 = add nsw i32 %a339, 1
  %11314 = and i32 %11313, 3
  %11315 = zext i32 %11314 to i64
  %11316 = mul nsw i64 %286, %11315
  %11317 = add nsw i64 %288, %11316
  %11318 = getelementptr inbounds i16, i16* %blur_x841, i64 %11317
  %11319 = getelementptr inbounds i16, i16* %11318, i64 -32
  %11320 = bitcast i16* %11319 to <16 x i16>*
  store <16 x i16> %11312, <16 x i16>* %11320, align 2, !tbaa !399
  %11321 = shufflevector <32 x i16> %11311, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11322 = getelementptr inbounds i16, i16* %11318, i64 -16
  %11323 = bitcast i16* %11322 to <16 x i16>*
  store <16 x i16> %11321, <16 x i16>* %11323, align 2, !tbaa !399
  br label %after_bb873

"for blur_y.s0.x.x.rebased881":                   ; preds = %"for blur_y.s0.x.x.rebased881.preheader", %after_bb884
  %indvars.iv3144 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased881.preheader" ], [ %indvars.iv.next3145, %after_bb884 ]
  %11324 = add nsw i64 %indvars.iv3144, %290
  %11325 = icmp slt i64 %11324, 1
  %11326 = trunc i64 %11324 to i32
  %11327 = shl nsw i32 %11326, 5
  %11328 = icmp sgt i32 %194, %11327
  %11329 = or i1 %11325, %11328
  br i1 %11329, label %"produce blur_x888", label %after_bb884

"end for blur_y.s0.x.x.rebased882":               ; preds = %after_bb884, %after_bb873
  br i1 %291, label %"for blur_y.s0.x.x.rebased893.preheader", label %"end for blur_y.s0.x.x.rebased894", !prof !386

"for blur_y.s0.x.x.rebased893.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased882"
  %11330 = sext i32 %t1644878 to i64
  br label %"for blur_y.s0.x.x.rebased893"

after_bb884:                                      ; preds = %"for blur_y.s0.x.x.rebased881", %"produce blur_x888"
  %indvars.iv.next3145 = add nuw nsw i64 %indvars.iv3144, 1
  %.not2502 = icmp eq i64 %indvars.iv.next3145, %370
  br i1 %.not2502, label %"end for blur_y.s0.x.x.rebased882", label %"for blur_y.s0.x.x.rebased881"

"produce blur_x888":                              ; preds = %"for blur_y.s0.x.x.rebased881"
  %t662889 = add nsw i32 %11327, %t1643879
  %11331 = sext i32 %t662889 to i64
  %11332 = getelementptr inbounds i16, i16* %read_input784, i64 %11331
  %11333 = getelementptr inbounds i16, i16* %11332, i64 1
  %11334 = bitcast i16* %11333 to <16 x i16>*
  %11335 = load <16 x i16>, <16 x i16>* %11334, align 2, !tbaa !396
  %11336 = getelementptr inbounds i16, i16* %11332, i64 17
  %11337 = bitcast i16* %11336 to <16 x i16>*
  %11338 = load <16 x i16>, <16 x i16>* %11337, align 2, !tbaa !396
  %11339 = getelementptr inbounds i16, i16* %11332, i64 2
  %11340 = bitcast i16* %11339 to <16 x i16>*
  %11341 = load <16 x i16>, <16 x i16>* %11340, align 2, !tbaa !396
  %11342 = getelementptr inbounds i16, i16* %11332, i64 18
  %11343 = bitcast i16* %11342 to <16 x i16>*
  %11344 = load <16 x i16>, <16 x i16>* %11343, align 2, !tbaa !396
  %11345 = bitcast i16* %11332 to <16 x i16>*
  %11346 = load <16 x i16>, <16 x i16>* %11345, align 2, !tbaa !396
  %11347 = getelementptr inbounds i16, i16* %11332, i64 16
  %11348 = bitcast i16* %11347 to <16 x i16>*
  %11349 = load <16 x i16>, <16 x i16>* %11348, align 2, !tbaa !396
  %11350 = add <16 x i16> %11341, %11335
  %11351 = add <16 x i16> %11350, %11346
  %11352 = add <16 x i16> %11344, %11338
  %11353 = add <16 x i16> %11352, %11349
  %11354 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11351, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11355 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11353, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11356 = shufflevector <16 x i16> %11354, <16 x i16> %11355, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11357 = lshr <32 x i16> %11356, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11358 = shufflevector <32 x i16> %11357, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11359 = shl nsw i64 %11324, 5
  %11360 = add nsw i64 %11359, %11284
  %11361 = getelementptr inbounds i16, i16* %blur_x841, i64 %11360
  %11362 = bitcast i16* %11361 to <16 x i16>*
  store <16 x i16> %11358, <16 x i16>* %11362, align 2, !tbaa !399
  %11363 = shufflevector <32 x i16> %11357, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11364 = getelementptr inbounds i16, i16* %11361, i64 16
  %11365 = bitcast i16* %11364 to <16 x i16>*
  store <16 x i16> %11363, <16 x i16>* %11365, align 2, !tbaa !399
  br label %after_bb884

"for blur_y.s0.x.x.rebased893":                   ; preds = %"for blur_y.s0.x.x.rebased893.preheader", %after_bb896
  %blur_y.s0.x.x.rebased895 = phi i32 [ %11370, %after_bb896 ], [ 0, %"for blur_y.s0.x.x.rebased893.preheader" ]
  %t2165899 = add nsw i32 %blur_y.s0.x.x.rebased895, %t1582776
  %11366 = icmp slt i32 %t2165899, 1
  %11367 = shl nsw i32 %t2165899, 5
  %11368 = icmp sgt i32 %194, %11367
  %11369 = or i1 %11366, %11368
  br i1 %11369, label %then_bb897, label %after_bb896

"end for blur_y.s0.x.x.rebased894":               ; preds = %after_bb896, %"end for blur_y.s0.x.x.rebased882"
  br i1 %224, label %"produce blur_x906", label %"end for blur_y.s0.x.x.rebased894.after_bb903_crit_edge"

"end for blur_y.s0.x.x.rebased894.after_bb903_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased894"
  %.pre3329 = add nsw i32 %a339, 2
  %.pre3331 = and i32 %.pre3329, 3
  br label %after_bb903

after_bb896:                                      ; preds = %"for blur_y.s0.x.x.rebased893", %then_bb897
  %11370 = add nuw nsw i32 %blur_y.s0.x.x.rebased895, 1
  %.not2501 = icmp eq i32 %11370, %t1639861
  br i1 %.not2501, label %"end for blur_y.s0.x.x.rebased894", label %"for blur_y.s0.x.x.rebased893"

then_bb897:                                       ; preds = %"for blur_y.s0.x.x.rebased893"
  %11371 = icmp sgt i32 %a327, %11367
  %b403 = select i1 %11371, i32 %11367, i32 %a327
  %11372 = icmp slt i32 %b403, %194
  %blur_x.s0.x.v1.base.s901 = select i1 %11372, i32 %b403, i32 %194
  %t664902 = add nsw i32 %blur_x.s0.x.v1.base.s901, %t1643879
  %11373 = sext i32 %t664902 to i64
  %11374 = getelementptr inbounds i16, i16* %read_input784, i64 %11373
  %11375 = getelementptr inbounds i16, i16* %11374, i64 1
  %11376 = bitcast i16* %11375 to <16 x i16>*
  %11377 = load <16 x i16>, <16 x i16>* %11376, align 2, !tbaa !396
  %11378 = getelementptr inbounds i16, i16* %11374, i64 17
  %11379 = bitcast i16* %11378 to <16 x i16>*
  %11380 = load <16 x i16>, <16 x i16>* %11379, align 2, !tbaa !396
  %11381 = getelementptr inbounds i16, i16* %11374, i64 2
  %11382 = bitcast i16* %11381 to <16 x i16>*
  %11383 = load <16 x i16>, <16 x i16>* %11382, align 2, !tbaa !396
  %11384 = getelementptr inbounds i16, i16* %11374, i64 18
  %11385 = bitcast i16* %11384 to <16 x i16>*
  %11386 = load <16 x i16>, <16 x i16>* %11385, align 2, !tbaa !396
  %11387 = bitcast i16* %11374 to <16 x i16>*
  %11388 = load <16 x i16>, <16 x i16>* %11387, align 2, !tbaa !396
  %11389 = getelementptr inbounds i16, i16* %11374, i64 16
  %11390 = bitcast i16* %11389 to <16 x i16>*
  %11391 = load <16 x i16>, <16 x i16>* %11390, align 2, !tbaa !396
  %11392 = add <16 x i16> %11383, %11377
  %11393 = add <16 x i16> %11392, %11388
  %11394 = add <16 x i16> %11386, %11380
  %11395 = add <16 x i16> %11394, %11391
  %11396 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11393, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11395, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11398 = shufflevector <16 x i16> %11396, <16 x i16> %11397, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11399 = lshr <32 x i16> %11398, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11400 = shufflevector <32 x i16> %11399, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11401 = sext i32 %blur_x.s0.x.v1.base.s901 to i64
  %11402 = add nsw i64 %11401, %11330
  %11403 = getelementptr inbounds i16, i16* %blur_x841, i64 %11402
  %11404 = bitcast i16* %11403 to <16 x i16>*
  store <16 x i16> %11400, <16 x i16>* %11404, align 2, !tbaa !399
  %11405 = shufflevector <32 x i16> %11399, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11406 = getelementptr inbounds i16, i16* %11403, i64 16
  %11407 = bitcast i16* %11406 to <16 x i16>*
  store <16 x i16> %11405, <16 x i16>* %11407, align 2, !tbaa !399
  br label %after_bb896

after_bb903:                                      ; preds = %"end for blur_y.s0.x.x.rebased894.after_bb903_crit_edge", %"produce blur_x906"
  %.pre-phi3332 = phi i32 [ %.pre3331, %"end for blur_y.s0.x.x.rebased894.after_bb903_crit_edge" ], [ %11451, %"produce blur_x906" ]
  %11408 = mul nsw i32 %.pre-phi3332, %a386
  %t1650914 = sub nsw i32 %11408, %t1601773
  br i1 %289, label %"for blur_y.s0.x.x.rebased918.preheader", label %"end for blur_y.s0.x.x.rebased919", !prof !386

"for blur_y.s0.x.x.rebased918.preheader":         ; preds = %after_bb903
  %11409 = sext i32 %t1650914 to i64
  %11410 = zext i32 %.pre-phi3328 to i64
  %11411 = mul nsw i64 %11410, %298
  %11412 = sub nsw i64 %11411, %285
  %11413 = zext i32 %.pre-phi3332 to i64
  %11414 = mul nsw i64 %11413, %298
  %11415 = sub nsw i64 %11414, %285
  %11416 = zext i32 %.pre-phi3324 to i64
  %11417 = mul nsw i64 %11416, %298
  %11418 = sub nsw i64 %11417, %285
  %11419 = sext i32 %a339 to i64
  %11420 = mul nsw i64 %11419, %299
  %11421 = add nsw i64 %11420, %302
  br label %"for blur_y.s0.x.x.rebased918"

"produce blur_x906":                              ; preds = %"end for blur_y.s0.x.x.rebased894"
  %11422 = getelementptr inbounds i16, i16* %read_input784, i64 %297
  %11423 = getelementptr inbounds i16, i16* %11422, i64 -31
  %11424 = bitcast i16* %11423 to <16 x i16>*
  %11425 = load <16 x i16>, <16 x i16>* %11424, align 2, !tbaa !396
  %11426 = getelementptr inbounds i16, i16* %11422, i64 -15
  %11427 = bitcast i16* %11426 to <16 x i16>*
  %11428 = load <16 x i16>, <16 x i16>* %11427, align 2, !tbaa !396
  %11429 = getelementptr inbounds i16, i16* %11422, i64 -30
  %11430 = bitcast i16* %11429 to <16 x i16>*
  %11431 = load <16 x i16>, <16 x i16>* %11430, align 2, !tbaa !396
  %11432 = getelementptr inbounds i16, i16* %11422, i64 -14
  %11433 = bitcast i16* %11432 to <16 x i16>*
  %11434 = load <16 x i16>, <16 x i16>* %11433, align 2, !tbaa !396
  %11435 = getelementptr inbounds i16, i16* %11422, i64 -32
  %11436 = bitcast i16* %11435 to <16 x i16>*
  %11437 = load <16 x i16>, <16 x i16>* %11436, align 2, !tbaa !396
  %11438 = getelementptr inbounds i16, i16* %11422, i64 -16
  %11439 = bitcast i16* %11438 to <16 x i16>*
  %11440 = load <16 x i16>, <16 x i16>* %11439, align 2, !tbaa !396
  %11441 = add <16 x i16> %11431, %11425
  %11442 = add <16 x i16> %11441, %11437
  %11443 = add <16 x i16> %11434, %11428
  %11444 = add <16 x i16> %11443, %11440
  %11445 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11442, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11446 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11444, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11447 = shufflevector <16 x i16> %11445, <16 x i16> %11446, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11448 = lshr <32 x i16> %11447, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11449 = shufflevector <32 x i16> %11448, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11450 = add nsw i32 %a339, 2
  %11451 = and i32 %11450, 3
  %11452 = zext i32 %11451 to i64
  %11453 = mul nsw i64 %286, %11452
  %11454 = add nsw i64 %288, %11453
  %11455 = getelementptr inbounds i16, i16* %blur_x841, i64 %11454
  %11456 = getelementptr inbounds i16, i16* %11455, i64 -32
  %11457 = bitcast i16* %11456 to <16 x i16>*
  store <16 x i16> %11449, <16 x i16>* %11457, align 2, !tbaa !399
  %11458 = shufflevector <32 x i16> %11448, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11459 = getelementptr inbounds i16, i16* %11455, i64 -16
  %11460 = bitcast i16* %11459 to <16 x i16>*
  store <16 x i16> %11458, <16 x i16>* %11460, align 2, !tbaa !399
  %11461 = zext i32 %.pre-phi3328 to i64
  %11462 = mul nsw i64 %11461, %298
  %11463 = add nsw i64 %11462, %283
  %11464 = getelementptr inbounds i16, i16* %blur_x841, i64 %11463
  %11465 = getelementptr inbounds i16, i16* %11464, i64 -32
  %11466 = bitcast i16* %11465 to <16 x i16>*
  %11467 = load <16 x i16>, <16 x i16>* %11466, align 2, !tbaa !399
  %11468 = getelementptr inbounds i16, i16* %11464, i64 -16
  %11469 = bitcast i16* %11468 to <16 x i16>*
  %11470 = load <16 x i16>, <16 x i16>* %11469, align 2, !tbaa !399
  %11471 = mul nsw i64 %11452, %298
  %11472 = add nsw i64 %11471, %283
  %11473 = getelementptr inbounds i16, i16* %blur_x841, i64 %11472
  %11474 = getelementptr inbounds i16, i16* %11473, i64 -32
  %11475 = bitcast i16* %11474 to <16 x i16>*
  %11476 = load <16 x i16>, <16 x i16>* %11475, align 2, !tbaa !399
  %11477 = getelementptr inbounds i16, i16* %11473, i64 -16
  %11478 = bitcast i16* %11477 to <16 x i16>*
  %11479 = load <16 x i16>, <16 x i16>* %11478, align 2, !tbaa !399
  %11480 = zext i32 %.pre-phi3324 to i64
  %11481 = mul nsw i64 %11480, %298
  %11482 = add nsw i64 %11481, %283
  %11483 = getelementptr inbounds i16, i16* %blur_x841, i64 %11482
  %11484 = getelementptr inbounds i16, i16* %11483, i64 -32
  %11485 = bitcast i16* %11484 to <16 x i16>*
  %11486 = load <16 x i16>, <16 x i16>* %11485, align 2, !tbaa !399
  %11487 = getelementptr inbounds i16, i16* %11483, i64 -16
  %11488 = bitcast i16* %11487 to <16 x i16>*
  %11489 = load <16 x i16>, <16 x i16>* %11488, align 2, !tbaa !399
  %11490 = add <16 x i16> %11476, %11467
  %11491 = add <16 x i16> %11490, %11486
  %11492 = add <16 x i16> %11479, %11470
  %11493 = add <16 x i16> %11492, %11489
  %11494 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11491, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11495 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11493, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11496 = shufflevector <16 x i16> %11494, <16 x i16> %11495, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11497 = lshr <32 x i16> %11496, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11498 = shufflevector <32 x i16> %11497, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11499 = sext i32 %a339 to i64
  %11500 = mul nsw i64 %11499, %299
  %11501 = add nsw i64 %301, %11500
  %11502 = getelementptr inbounds i16, i16* %255, i64 %11501
  %11503 = getelementptr inbounds i16, i16* %11502, i64 -32
  %11504 = bitcast i16* %11503 to <16 x i16>*
  store <16 x i16> %11498, <16 x i16>* %11504, align 2, !tbaa !401
  %11505 = shufflevector <32 x i16> %11497, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11506 = getelementptr inbounds i16, i16* %11502, i64 -16
  %11507 = bitcast i16* %11506 to <16 x i16>*
  store <16 x i16> %11505, <16 x i16>* %11507, align 2, !tbaa !401
  br label %after_bb903

"for blur_y.s0.x.x.rebased918":                   ; preds = %"for blur_y.s0.x.x.rebased918.preheader", %"consume blur_x927"
  %indvars.iv3147 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased918.preheader" ], [ %indvars.iv.next3148, %"consume blur_x927" ]
  %11508 = add nsw i64 %indvars.iv3147, %290
  %11509 = icmp slt i64 %11508, 1
  %11510 = trunc i64 %11508 to i32
  %11511 = shl nsw i32 %11510, 5
  %11512 = icmp sgt i32 %194, %11511
  %11513 = or i1 %11509, %11512
  br i1 %11513, label %"produce blur_x925", label %"for blur_y.s0.x.x.rebased918.consume blur_x927_crit_edge"

"for blur_y.s0.x.x.rebased918.consume blur_x927_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased918"
  %.pre3333 = shl nsw i64 %11508, 5
  br label %"consume blur_x927"

"end for blur_y.s0.x.x.rebased919":               ; preds = %"consume blur_x927", %after_bb903
  br i1 %291, label %"for blur_y.s0.x.x.rebased935.preheader", label %"end for blur_y.s0.x.x.rebased936", !prof !386

"for blur_y.s0.x.x.rebased935.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased919"
  %11514 = sext i32 %t1650914 to i64
  %11515 = zext i32 %.pre-phi3328 to i64
  %11516 = mul nsw i64 %11515, %298
  %11517 = sub nsw i64 %11516, %285
  %11518 = zext i32 %.pre-phi3332 to i64
  %11519 = mul nsw i64 %11518, %298
  %11520 = sub nsw i64 %11519, %285
  %11521 = zext i32 %.pre-phi3324 to i64
  %11522 = mul nsw i64 %11521, %298
  %11523 = sub nsw i64 %11522, %285
  %11524 = sext i32 %a339 to i64
  %11525 = mul nsw i64 %11524, %299
  %11526 = add nsw i64 %11525, %302
  br label %"for blur_y.s0.x.x.rebased935"

"produce blur_x925":                              ; preds = %"for blur_y.s0.x.x.rebased918"
  %t672926 = add nsw i32 %11511, %295
  %11527 = sext i32 %t672926 to i64
  %11528 = getelementptr inbounds i16, i16* %read_input784, i64 %11527
  %11529 = getelementptr inbounds i16, i16* %11528, i64 1
  %11530 = bitcast i16* %11529 to <16 x i16>*
  %11531 = load <16 x i16>, <16 x i16>* %11530, align 2, !tbaa !396
  %11532 = getelementptr inbounds i16, i16* %11528, i64 17
  %11533 = bitcast i16* %11532 to <16 x i16>*
  %11534 = load <16 x i16>, <16 x i16>* %11533, align 2, !tbaa !396
  %11535 = getelementptr inbounds i16, i16* %11528, i64 2
  %11536 = bitcast i16* %11535 to <16 x i16>*
  %11537 = load <16 x i16>, <16 x i16>* %11536, align 2, !tbaa !396
  %11538 = getelementptr inbounds i16, i16* %11528, i64 18
  %11539 = bitcast i16* %11538 to <16 x i16>*
  %11540 = load <16 x i16>, <16 x i16>* %11539, align 2, !tbaa !396
  %11541 = bitcast i16* %11528 to <16 x i16>*
  %11542 = load <16 x i16>, <16 x i16>* %11541, align 2, !tbaa !396
  %11543 = getelementptr inbounds i16, i16* %11528, i64 16
  %11544 = bitcast i16* %11543 to <16 x i16>*
  %11545 = load <16 x i16>, <16 x i16>* %11544, align 2, !tbaa !396
  %11546 = add <16 x i16> %11537, %11531
  %11547 = add <16 x i16> %11546, %11542
  %11548 = add <16 x i16> %11540, %11534
  %11549 = add <16 x i16> %11548, %11545
  %11550 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11547, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11549, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11552 = shufflevector <16 x i16> %11550, <16 x i16> %11551, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11553 = lshr <32 x i16> %11552, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11554 = shufflevector <32 x i16> %11553, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11555 = shl nsw i64 %11508, 5
  %11556 = add nsw i64 %11555, %11409
  %11557 = getelementptr inbounds i16, i16* %blur_x841, i64 %11556
  %11558 = bitcast i16* %11557 to <16 x i16>*
  store <16 x i16> %11554, <16 x i16>* %11558, align 2, !tbaa !399
  %11559 = shufflevector <32 x i16> %11553, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11560 = getelementptr inbounds i16, i16* %11557, i64 16
  %11561 = bitcast i16* %11560 to <16 x i16>*
  store <16 x i16> %11559, <16 x i16>* %11561, align 2, !tbaa !399
  br label %"consume blur_x927"

"consume blur_x927":                              ; preds = %"for blur_y.s0.x.x.rebased918.consume blur_x927_crit_edge", %"produce blur_x925"
  %.pre-phi3334 = phi i64 [ %.pre3333, %"for blur_y.s0.x.x.rebased918.consume blur_x927_crit_edge" ], [ %11555, %"produce blur_x925" ]
  %11562 = add nsw i64 %11412, %.pre-phi3334
  %11563 = getelementptr inbounds i16, i16* %blur_x841, i64 %11562
  %11564 = bitcast i16* %11563 to <16 x i16>*
  %11565 = load <16 x i16>, <16 x i16>* %11564, align 2, !tbaa !399
  %11566 = getelementptr inbounds i16, i16* %11563, i64 16
  %11567 = bitcast i16* %11566 to <16 x i16>*
  %11568 = load <16 x i16>, <16 x i16>* %11567, align 2, !tbaa !399
  %11569 = add nsw i64 %11415, %.pre-phi3334
  %11570 = getelementptr inbounds i16, i16* %blur_x841, i64 %11569
  %11571 = bitcast i16* %11570 to <16 x i16>*
  %11572 = load <16 x i16>, <16 x i16>* %11571, align 2, !tbaa !399
  %11573 = getelementptr inbounds i16, i16* %11570, i64 16
  %11574 = bitcast i16* %11573 to <16 x i16>*
  %11575 = load <16 x i16>, <16 x i16>* %11574, align 2, !tbaa !399
  %11576 = add nsw i64 %11418, %.pre-phi3334
  %11577 = getelementptr inbounds i16, i16* %blur_x841, i64 %11576
  %11578 = bitcast i16* %11577 to <16 x i16>*
  %11579 = load <16 x i16>, <16 x i16>* %11578, align 2, !tbaa !399
  %11580 = getelementptr inbounds i16, i16* %11577, i64 16
  %11581 = bitcast i16* %11580 to <16 x i16>*
  %11582 = load <16 x i16>, <16 x i16>* %11581, align 2, !tbaa !399
  %11583 = add <16 x i16> %11572, %11565
  %11584 = add <16 x i16> %11583, %11579
  %11585 = add <16 x i16> %11575, %11568
  %11586 = add <16 x i16> %11585, %11582
  %11587 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11584, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11588 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11586, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11589 = shufflevector <16 x i16> %11587, <16 x i16> %11588, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11590 = lshr <32 x i16> %11589, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11591 = shufflevector <32 x i16> %11590, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11592 = add nsw i64 %11421, %.pre-phi3334
  %11593 = getelementptr inbounds i16, i16* %255, i64 %11592
  %11594 = bitcast i16* %11593 to <16 x i16>*
  store <16 x i16> %11591, <16 x i16>* %11594, align 2, !tbaa !401
  %11595 = shufflevector <32 x i16> %11590, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11596 = getelementptr inbounds i16, i16* %11593, i64 16
  %11597 = bitcast i16* %11596 to <16 x i16>*
  store <16 x i16> %11595, <16 x i16>* %11597, align 2, !tbaa !401
  %indvars.iv.next3148 = add nuw nsw i64 %indvars.iv3147, 1
  %.not2500 = icmp eq i64 %indvars.iv.next3148, %370
  br i1 %.not2500, label %"end for blur_y.s0.x.x.rebased919", label %"for blur_y.s0.x.x.rebased918"

"for blur_y.s0.x.x.rebased935":                   ; preds = %"for blur_y.s0.x.x.rebased935.preheader", %"consume blur_x945"
  %blur_y.s0.x.x.rebased937 = phi i32 [ %11676, %"consume blur_x945" ], [ 0, %"for blur_y.s0.x.x.rebased935.preheader" ]
  %11598 = add nsw i32 %blur_y.s0.x.x.rebased937, %t1582776
  %a404 = shl nsw i32 %11598, 5
  %11599 = icmp sgt i32 %a327, %a404
  %b410 = select i1 %11599, i32 %a404, i32 %a327
  %11600 = icmp slt i32 %11598, 1
  %11601 = icmp sgt i32 %194, %a404
  %11602 = or i1 %11600, %11601
  br i1 %11602, label %"produce blur_x942", label %"consume blur_x945"

"end for blur_y.s0.x.x.rebased936":               ; preds = %"consume blur_x945", %"end for blur_y.s0.x.x.rebased919"
  br i1 %224, label %"produce blur_x949", label %"end for blur_y.s0.x.x.rebased936.after_bb946_crit_edge"

"end for blur_y.s0.x.x.rebased936.after_bb946_crit_edge": ; preds = %"end for blur_y.s0.x.x.rebased936"
  %.pre3335 = add nsw i32 %a339, 3
  %.pre3337 = and i32 %.pre3335, 3
  br label %after_bb946

"produce blur_x942":                              ; preds = %"for blur_y.s0.x.x.rebased935"
  %11603 = icmp slt i32 %b410, %194
  %blur_x.s0.x.v1.base.s943 = select i1 %11603, i32 %b410, i32 %194
  %t677944 = add nsw i32 %blur_x.s0.x.v1.base.s943, %295
  %11604 = sext i32 %t677944 to i64
  %11605 = getelementptr inbounds i16, i16* %read_input784, i64 %11604
  %11606 = getelementptr inbounds i16, i16* %11605, i64 1
  %11607 = bitcast i16* %11606 to <16 x i16>*
  %11608 = load <16 x i16>, <16 x i16>* %11607, align 2, !tbaa !396
  %11609 = getelementptr inbounds i16, i16* %11605, i64 17
  %11610 = bitcast i16* %11609 to <16 x i16>*
  %11611 = load <16 x i16>, <16 x i16>* %11610, align 2, !tbaa !396
  %11612 = getelementptr inbounds i16, i16* %11605, i64 2
  %11613 = bitcast i16* %11612 to <16 x i16>*
  %11614 = load <16 x i16>, <16 x i16>* %11613, align 2, !tbaa !396
  %11615 = getelementptr inbounds i16, i16* %11605, i64 18
  %11616 = bitcast i16* %11615 to <16 x i16>*
  %11617 = load <16 x i16>, <16 x i16>* %11616, align 2, !tbaa !396
  %11618 = bitcast i16* %11605 to <16 x i16>*
  %11619 = load <16 x i16>, <16 x i16>* %11618, align 2, !tbaa !396
  %11620 = getelementptr inbounds i16, i16* %11605, i64 16
  %11621 = bitcast i16* %11620 to <16 x i16>*
  %11622 = load <16 x i16>, <16 x i16>* %11621, align 2, !tbaa !396
  %11623 = add <16 x i16> %11614, %11608
  %11624 = add <16 x i16> %11623, %11619
  %11625 = add <16 x i16> %11617, %11611
  %11626 = add <16 x i16> %11625, %11622
  %11627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11624, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11626, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11629 = shufflevector <16 x i16> %11627, <16 x i16> %11628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11630 = lshr <32 x i16> %11629, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11631 = shufflevector <32 x i16> %11630, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11632 = sext i32 %blur_x.s0.x.v1.base.s943 to i64
  %11633 = add nsw i64 %11632, %11514
  %11634 = getelementptr inbounds i16, i16* %blur_x841, i64 %11633
  %11635 = bitcast i16* %11634 to <16 x i16>*
  store <16 x i16> %11631, <16 x i16>* %11635, align 2, !tbaa !399
  %11636 = shufflevector <32 x i16> %11630, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11637 = getelementptr inbounds i16, i16* %11634, i64 16
  %11638 = bitcast i16* %11637 to <16 x i16>*
  store <16 x i16> %11636, <16 x i16>* %11638, align 2, !tbaa !399
  br label %"consume blur_x945"

"consume blur_x945":                              ; preds = %"for blur_y.s0.x.x.rebased935", %"produce blur_x942"
  %11639 = sext i32 %b410 to i64
  %11640 = add nsw i64 %11517, %11639
  %11641 = getelementptr inbounds i16, i16* %blur_x841, i64 %11640
  %11642 = bitcast i16* %11641 to <16 x i16>*
  %11643 = load <16 x i16>, <16 x i16>* %11642, align 2, !tbaa !399
  %11644 = getelementptr inbounds i16, i16* %11641, i64 16
  %11645 = bitcast i16* %11644 to <16 x i16>*
  %11646 = load <16 x i16>, <16 x i16>* %11645, align 2, !tbaa !399
  %11647 = add nsw i64 %11520, %11639
  %11648 = getelementptr inbounds i16, i16* %blur_x841, i64 %11647
  %11649 = bitcast i16* %11648 to <16 x i16>*
  %11650 = load <16 x i16>, <16 x i16>* %11649, align 2, !tbaa !399
  %11651 = getelementptr inbounds i16, i16* %11648, i64 16
  %11652 = bitcast i16* %11651 to <16 x i16>*
  %11653 = load <16 x i16>, <16 x i16>* %11652, align 2, !tbaa !399
  %11654 = add nsw i64 %11523, %11639
  %11655 = getelementptr inbounds i16, i16* %blur_x841, i64 %11654
  %11656 = bitcast i16* %11655 to <16 x i16>*
  %11657 = load <16 x i16>, <16 x i16>* %11656, align 2, !tbaa !399
  %11658 = getelementptr inbounds i16, i16* %11655, i64 16
  %11659 = bitcast i16* %11658 to <16 x i16>*
  %11660 = load <16 x i16>, <16 x i16>* %11659, align 2, !tbaa !399
  %11661 = add <16 x i16> %11650, %11643
  %11662 = add <16 x i16> %11661, %11657
  %11663 = add <16 x i16> %11653, %11646
  %11664 = add <16 x i16> %11663, %11660
  %11665 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11662, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11666 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11664, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11667 = shufflevector <16 x i16> %11665, <16 x i16> %11666, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11668 = lshr <32 x i16> %11667, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11669 = shufflevector <32 x i16> %11668, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11670 = add nsw i64 %11526, %11639
  %11671 = getelementptr inbounds i16, i16* %255, i64 %11670
  %11672 = bitcast i16* %11671 to <16 x i16>*
  store <16 x i16> %11669, <16 x i16>* %11672, align 2, !tbaa !401
  %11673 = shufflevector <32 x i16> %11668, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11674 = getelementptr inbounds i16, i16* %11671, i64 16
  %11675 = bitcast i16* %11674 to <16 x i16>*
  store <16 x i16> %11673, <16 x i16>* %11675, align 2, !tbaa !401
  %11676 = add nuw nsw i32 %blur_y.s0.x.x.rebased937, 1
  %.not2499 = icmp eq i32 %11676, %t1639861
  br i1 %.not2499, label %"end for blur_y.s0.x.x.rebased936", label %"for blur_y.s0.x.x.rebased935"

after_bb946:                                      ; preds = %"end for blur_y.s0.x.x.rebased936.after_bb946_crit_edge", %"produce blur_x949"
  %.pre-phi3338 = phi i32 [ %.pre3337, %"end for blur_y.s0.x.x.rebased936.after_bb946_crit_edge" ], [ %11721, %"produce blur_x949" ]
  %11677 = mul nsw i32 %.pre-phi3338, %a386
  %t1666957 = sub nsw i32 %11677, %t1601773
  br i1 %289, label %"for blur_y.s0.x.x.rebased961.preheader", label %"end for blur_y.s0.x.x.rebased962", !prof !386

"for blur_y.s0.x.x.rebased961.preheader":         ; preds = %after_bb946
  %11678 = sext i32 %t1666957 to i64
  %11679 = zext i32 %.pre-phi3332 to i64
  %11680 = mul nsw i64 %11679, %298
  %11681 = sub nsw i64 %11680, %285
  %11682 = zext i32 %.pre-phi3338 to i64
  %11683 = mul nsw i64 %11682, %298
  %11684 = sub nsw i64 %11683, %285
  %11685 = zext i32 %.pre-phi3328 to i64
  %11686 = mul nsw i64 %11685, %298
  %11687 = sub nsw i64 %11686, %285
  %11688 = sext i32 %a339 to i64
  %11689 = add nsw i64 %11688, 1
  %11690 = mul nsw i64 %11689, %299
  %11691 = add nsw i64 %11690, %302
  br label %"for blur_y.s0.x.x.rebased961"

"produce blur_x949":                              ; preds = %"end for blur_y.s0.x.x.rebased936"
  %11692 = getelementptr inbounds i16, i16* %read_input784, i64 %303
  %11693 = getelementptr inbounds i16, i16* %11692, i64 -31
  %11694 = bitcast i16* %11693 to <16 x i16>*
  %11695 = load <16 x i16>, <16 x i16>* %11694, align 2, !tbaa !396
  %11696 = getelementptr inbounds i16, i16* %11692, i64 -15
  %11697 = bitcast i16* %11696 to <16 x i16>*
  %11698 = load <16 x i16>, <16 x i16>* %11697, align 2, !tbaa !396
  %11699 = getelementptr inbounds i16, i16* %11692, i64 -30
  %11700 = bitcast i16* %11699 to <16 x i16>*
  %11701 = load <16 x i16>, <16 x i16>* %11700, align 2, !tbaa !396
  %11702 = getelementptr inbounds i16, i16* %11692, i64 -14
  %11703 = bitcast i16* %11702 to <16 x i16>*
  %11704 = load <16 x i16>, <16 x i16>* %11703, align 2, !tbaa !396
  %11705 = getelementptr inbounds i16, i16* %11692, i64 -32
  %11706 = bitcast i16* %11705 to <16 x i16>*
  %11707 = load <16 x i16>, <16 x i16>* %11706, align 2, !tbaa !396
  %11708 = getelementptr inbounds i16, i16* %11692, i64 -16
  %11709 = bitcast i16* %11708 to <16 x i16>*
  %11710 = load <16 x i16>, <16 x i16>* %11709, align 2, !tbaa !396
  %11711 = add <16 x i16> %11701, %11695
  %11712 = add <16 x i16> %11711, %11707
  %11713 = add <16 x i16> %11704, %11698
  %11714 = add <16 x i16> %11713, %11710
  %11715 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11712, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11716 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11714, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11717 = shufflevector <16 x i16> %11715, <16 x i16> %11716, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11718 = lshr <32 x i16> %11717, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11719 = shufflevector <32 x i16> %11718, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11720 = add nsw i32 %a339, 3
  %11721 = and i32 %11720, 3
  %11722 = zext i32 %11721 to i64
  %11723 = mul nsw i64 %286, %11722
  %11724 = add nsw i64 %288, %11723
  %11725 = getelementptr inbounds i16, i16* %blur_x841, i64 %11724
  %11726 = getelementptr inbounds i16, i16* %11725, i64 -32
  %11727 = bitcast i16* %11726 to <16 x i16>*
  store <16 x i16> %11719, <16 x i16>* %11727, align 2, !tbaa !399
  %11728 = shufflevector <32 x i16> %11718, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11729 = getelementptr inbounds i16, i16* %11725, i64 -16
  %11730 = bitcast i16* %11729 to <16 x i16>*
  store <16 x i16> %11728, <16 x i16>* %11730, align 2, !tbaa !399
  %11731 = zext i32 %.pre-phi3332 to i64
  %11732 = mul nsw i64 %11731, %298
  %11733 = add nsw i64 %11732, %283
  %11734 = getelementptr inbounds i16, i16* %blur_x841, i64 %11733
  %11735 = getelementptr inbounds i16, i16* %11734, i64 -32
  %11736 = bitcast i16* %11735 to <16 x i16>*
  %11737 = load <16 x i16>, <16 x i16>* %11736, align 2, !tbaa !399
  %11738 = getelementptr inbounds i16, i16* %11734, i64 -16
  %11739 = bitcast i16* %11738 to <16 x i16>*
  %11740 = load <16 x i16>, <16 x i16>* %11739, align 2, !tbaa !399
  %11741 = mul nsw i64 %11722, %298
  %11742 = add nsw i64 %11741, %283
  %11743 = getelementptr inbounds i16, i16* %blur_x841, i64 %11742
  %11744 = getelementptr inbounds i16, i16* %11743, i64 -32
  %11745 = bitcast i16* %11744 to <16 x i16>*
  %11746 = load <16 x i16>, <16 x i16>* %11745, align 2, !tbaa !399
  %11747 = getelementptr inbounds i16, i16* %11743, i64 -16
  %11748 = bitcast i16* %11747 to <16 x i16>*
  %11749 = load <16 x i16>, <16 x i16>* %11748, align 2, !tbaa !399
  %11750 = zext i32 %.pre-phi3328 to i64
  %11751 = mul nsw i64 %11750, %298
  %11752 = add nsw i64 %11751, %283
  %11753 = getelementptr inbounds i16, i16* %blur_x841, i64 %11752
  %11754 = getelementptr inbounds i16, i16* %11753, i64 -32
  %11755 = bitcast i16* %11754 to <16 x i16>*
  %11756 = load <16 x i16>, <16 x i16>* %11755, align 2, !tbaa !399
  %11757 = getelementptr inbounds i16, i16* %11753, i64 -16
  %11758 = bitcast i16* %11757 to <16 x i16>*
  %11759 = load <16 x i16>, <16 x i16>* %11758, align 2, !tbaa !399
  %11760 = add <16 x i16> %11746, %11737
  %11761 = add <16 x i16> %11760, %11756
  %11762 = add <16 x i16> %11749, %11740
  %11763 = add <16 x i16> %11762, %11759
  %11764 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11761, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11765 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11763, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11766 = shufflevector <16 x i16> %11764, <16 x i16> %11765, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11767 = lshr <32 x i16> %11766, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11768 = shufflevector <32 x i16> %11767, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11769 = sext i32 %a339 to i64
  %11770 = add nsw i64 %11769, 1
  %11771 = mul nsw i64 %11770, %299
  %11772 = add nsw i64 %301, %11771
  %11773 = getelementptr inbounds i16, i16* %255, i64 %11772
  %11774 = getelementptr inbounds i16, i16* %11773, i64 -32
  %11775 = bitcast i16* %11774 to <16 x i16>*
  store <16 x i16> %11768, <16 x i16>* %11775, align 2, !tbaa !401
  %11776 = shufflevector <32 x i16> %11767, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11777 = getelementptr inbounds i16, i16* %11773, i64 -16
  %11778 = bitcast i16* %11777 to <16 x i16>*
  store <16 x i16> %11776, <16 x i16>* %11778, align 2, !tbaa !401
  br label %after_bb946

"for blur_y.s0.x.x.rebased961":                   ; preds = %"for blur_y.s0.x.x.rebased961.preheader", %"consume blur_x970"
  %indvars.iv3150 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased961.preheader" ], [ %indvars.iv.next3151, %"consume blur_x970" ]
  %11779 = add nsw i64 %indvars.iv3150, %290
  %11780 = icmp slt i64 %11779, 1
  %11781 = trunc i64 %11779 to i32
  %11782 = shl nsw i32 %11781, 5
  %11783 = icmp sgt i32 %194, %11782
  %11784 = or i1 %11780, %11783
  br i1 %11784, label %"produce blur_x968", label %"for blur_y.s0.x.x.rebased961.consume blur_x970_crit_edge"

"for blur_y.s0.x.x.rebased961.consume blur_x970_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased961"
  %.pre3339 = shl nsw i64 %11779, 5
  br label %"consume blur_x970"

"end for blur_y.s0.x.x.rebased962":               ; preds = %"consume blur_x970", %after_bb946
  br i1 %291, label %"for blur_y.s0.x.x.rebased978.preheader", label %"end for blur_y.s0.x.x.rebased979", !prof !386

"for blur_y.s0.x.x.rebased978.preheader":         ; preds = %"end for blur_y.s0.x.x.rebased962"
  %11785 = sext i32 %t1666957 to i64
  %11786 = zext i32 %.pre-phi3332 to i64
  %11787 = mul nsw i64 %11786, %298
  %11788 = sub nsw i64 %11787, %285
  %11789 = zext i32 %.pre-phi3338 to i64
  %11790 = mul nsw i64 %11789, %298
  %11791 = sub nsw i64 %11790, %285
  %11792 = zext i32 %.pre-phi3328 to i64
  %11793 = mul nsw i64 %11792, %298
  %11794 = sub nsw i64 %11793, %285
  %11795 = sext i32 %a339 to i64
  %11796 = add nsw i64 %11795, 1
  %11797 = mul nsw i64 %11796, %299
  %11798 = add nsw i64 %11797, %302
  br label %"for blur_y.s0.x.x.rebased978"

"produce blur_x968":                              ; preds = %"for blur_y.s0.x.x.rebased961"
  %t688969 = add nsw i32 %11782, %t1665960
  %11799 = sext i32 %t688969 to i64
  %11800 = getelementptr inbounds i16, i16* %read_input784, i64 %11799
  %11801 = getelementptr inbounds i16, i16* %11800, i64 1
  %11802 = bitcast i16* %11801 to <16 x i16>*
  %11803 = load <16 x i16>, <16 x i16>* %11802, align 2, !tbaa !396
  %11804 = getelementptr inbounds i16, i16* %11800, i64 17
  %11805 = bitcast i16* %11804 to <16 x i16>*
  %11806 = load <16 x i16>, <16 x i16>* %11805, align 2, !tbaa !396
  %11807 = getelementptr inbounds i16, i16* %11800, i64 2
  %11808 = bitcast i16* %11807 to <16 x i16>*
  %11809 = load <16 x i16>, <16 x i16>* %11808, align 2, !tbaa !396
  %11810 = getelementptr inbounds i16, i16* %11800, i64 18
  %11811 = bitcast i16* %11810 to <16 x i16>*
  %11812 = load <16 x i16>, <16 x i16>* %11811, align 2, !tbaa !396
  %11813 = bitcast i16* %11800 to <16 x i16>*
  %11814 = load <16 x i16>, <16 x i16>* %11813, align 2, !tbaa !396
  %11815 = getelementptr inbounds i16, i16* %11800, i64 16
  %11816 = bitcast i16* %11815 to <16 x i16>*
  %11817 = load <16 x i16>, <16 x i16>* %11816, align 2, !tbaa !396
  %11818 = add <16 x i16> %11809, %11803
  %11819 = add <16 x i16> %11818, %11814
  %11820 = add <16 x i16> %11812, %11806
  %11821 = add <16 x i16> %11820, %11817
  %11822 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11819, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11823 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11821, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11824 = shufflevector <16 x i16> %11822, <16 x i16> %11823, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11825 = lshr <32 x i16> %11824, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11826 = shufflevector <32 x i16> %11825, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11827 = shl nsw i64 %11779, 5
  %11828 = add nsw i64 %11827, %11678
  %11829 = getelementptr inbounds i16, i16* %blur_x841, i64 %11828
  %11830 = bitcast i16* %11829 to <16 x i16>*
  store <16 x i16> %11826, <16 x i16>* %11830, align 2, !tbaa !399
  %11831 = shufflevector <32 x i16> %11825, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11832 = getelementptr inbounds i16, i16* %11829, i64 16
  %11833 = bitcast i16* %11832 to <16 x i16>*
  store <16 x i16> %11831, <16 x i16>* %11833, align 2, !tbaa !399
  br label %"consume blur_x970"

"consume blur_x970":                              ; preds = %"for blur_y.s0.x.x.rebased961.consume blur_x970_crit_edge", %"produce blur_x968"
  %.pre-phi3340 = phi i64 [ %.pre3339, %"for blur_y.s0.x.x.rebased961.consume blur_x970_crit_edge" ], [ %11827, %"produce blur_x968" ]
  %11834 = add nsw i64 %11681, %.pre-phi3340
  %11835 = getelementptr inbounds i16, i16* %blur_x841, i64 %11834
  %11836 = bitcast i16* %11835 to <16 x i16>*
  %11837 = load <16 x i16>, <16 x i16>* %11836, align 2, !tbaa !399
  %11838 = getelementptr inbounds i16, i16* %11835, i64 16
  %11839 = bitcast i16* %11838 to <16 x i16>*
  %11840 = load <16 x i16>, <16 x i16>* %11839, align 2, !tbaa !399
  %11841 = add nsw i64 %11684, %.pre-phi3340
  %11842 = getelementptr inbounds i16, i16* %blur_x841, i64 %11841
  %11843 = bitcast i16* %11842 to <16 x i16>*
  %11844 = load <16 x i16>, <16 x i16>* %11843, align 2, !tbaa !399
  %11845 = getelementptr inbounds i16, i16* %11842, i64 16
  %11846 = bitcast i16* %11845 to <16 x i16>*
  %11847 = load <16 x i16>, <16 x i16>* %11846, align 2, !tbaa !399
  %11848 = add nsw i64 %11687, %.pre-phi3340
  %11849 = getelementptr inbounds i16, i16* %blur_x841, i64 %11848
  %11850 = bitcast i16* %11849 to <16 x i16>*
  %11851 = load <16 x i16>, <16 x i16>* %11850, align 2, !tbaa !399
  %11852 = getelementptr inbounds i16, i16* %11849, i64 16
  %11853 = bitcast i16* %11852 to <16 x i16>*
  %11854 = load <16 x i16>, <16 x i16>* %11853, align 2, !tbaa !399
  %11855 = add <16 x i16> %11844, %11837
  %11856 = add <16 x i16> %11855, %11851
  %11857 = add <16 x i16> %11847, %11840
  %11858 = add <16 x i16> %11857, %11854
  %11859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11856, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11860 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11858, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11861 = shufflevector <16 x i16> %11859, <16 x i16> %11860, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11862 = lshr <32 x i16> %11861, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11863 = shufflevector <32 x i16> %11862, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11864 = add nsw i64 %11691, %.pre-phi3340
  %11865 = getelementptr inbounds i16, i16* %255, i64 %11864
  %11866 = bitcast i16* %11865 to <16 x i16>*
  store <16 x i16> %11863, <16 x i16>* %11866, align 2, !tbaa !401
  %11867 = shufflevector <32 x i16> %11862, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11868 = getelementptr inbounds i16, i16* %11865, i64 16
  %11869 = bitcast i16* %11868 to <16 x i16>*
  store <16 x i16> %11867, <16 x i16>* %11869, align 2, !tbaa !401
  %indvars.iv.next3151 = add nuw nsw i64 %indvars.iv3150, 1
  %.not2498 = icmp eq i64 %indvars.iv.next3151, %370
  br i1 %.not2498, label %"end for blur_y.s0.x.x.rebased962", label %"for blur_y.s0.x.x.rebased961"

"for blur_y.s0.x.x.rebased978":                   ; preds = %"for blur_y.s0.x.x.rebased978.preheader", %"consume blur_x988"
  %blur_y.s0.x.x.rebased980 = phi i32 [ %11948, %"consume blur_x988" ], [ 0, %"for blur_y.s0.x.x.rebased978.preheader" ]
  %11870 = add nsw i32 %blur_y.s0.x.x.rebased980, %t1582776
  %a411 = shl nsw i32 %11870, 5
  %11871 = icmp sgt i32 %a327, %a411
  %b417 = select i1 %11871, i32 %a411, i32 %a327
  %11872 = icmp slt i32 %11870, 1
  %11873 = icmp sgt i32 %194, %a411
  %11874 = or i1 %11872, %11873
  br i1 %11874, label %"produce blur_x985", label %"consume blur_x988"

"end for blur_y.s0.x.x.rebased979":               ; preds = %"consume blur_x988", %"end for blur_y.s0.x.x.rebased962"
  br i1 %224, label %"produce blur_x992", label %after_bb989

"produce blur_x985":                              ; preds = %"for blur_y.s0.x.x.rebased978"
  %11875 = icmp slt i32 %b417, %194
  %blur_x.s0.x.v1.base.s986 = select i1 %11875, i32 %b417, i32 %194
  %t693987 = add nsw i32 %blur_x.s0.x.v1.base.s986, %t1665960
  %11876 = sext i32 %t693987 to i64
  %11877 = getelementptr inbounds i16, i16* %read_input784, i64 %11876
  %11878 = getelementptr inbounds i16, i16* %11877, i64 1
  %11879 = bitcast i16* %11878 to <16 x i16>*
  %11880 = load <16 x i16>, <16 x i16>* %11879, align 2, !tbaa !396
  %11881 = getelementptr inbounds i16, i16* %11877, i64 17
  %11882 = bitcast i16* %11881 to <16 x i16>*
  %11883 = load <16 x i16>, <16 x i16>* %11882, align 2, !tbaa !396
  %11884 = getelementptr inbounds i16, i16* %11877, i64 2
  %11885 = bitcast i16* %11884 to <16 x i16>*
  %11886 = load <16 x i16>, <16 x i16>* %11885, align 2, !tbaa !396
  %11887 = getelementptr inbounds i16, i16* %11877, i64 18
  %11888 = bitcast i16* %11887 to <16 x i16>*
  %11889 = load <16 x i16>, <16 x i16>* %11888, align 2, !tbaa !396
  %11890 = bitcast i16* %11877 to <16 x i16>*
  %11891 = load <16 x i16>, <16 x i16>* %11890, align 2, !tbaa !396
  %11892 = getelementptr inbounds i16, i16* %11877, i64 16
  %11893 = bitcast i16* %11892 to <16 x i16>*
  %11894 = load <16 x i16>, <16 x i16>* %11893, align 2, !tbaa !396
  %11895 = add <16 x i16> %11886, %11880
  %11896 = add <16 x i16> %11895, %11891
  %11897 = add <16 x i16> %11889, %11883
  %11898 = add <16 x i16> %11897, %11894
  %11899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11896, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11900 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11898, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11901 = shufflevector <16 x i16> %11899, <16 x i16> %11900, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11902 = lshr <32 x i16> %11901, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11903 = shufflevector <32 x i16> %11902, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11904 = sext i32 %blur_x.s0.x.v1.base.s986 to i64
  %11905 = add nsw i64 %11904, %11785
  %11906 = getelementptr inbounds i16, i16* %blur_x841, i64 %11905
  %11907 = bitcast i16* %11906 to <16 x i16>*
  store <16 x i16> %11903, <16 x i16>* %11907, align 2, !tbaa !399
  %11908 = shufflevector <32 x i16> %11902, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11909 = getelementptr inbounds i16, i16* %11906, i64 16
  %11910 = bitcast i16* %11909 to <16 x i16>*
  store <16 x i16> %11908, <16 x i16>* %11910, align 2, !tbaa !399
  br label %"consume blur_x988"

"consume blur_x988":                              ; preds = %"for blur_y.s0.x.x.rebased978", %"produce blur_x985"
  %11911 = sext i32 %b417 to i64
  %11912 = add nsw i64 %11788, %11911
  %11913 = getelementptr inbounds i16, i16* %blur_x841, i64 %11912
  %11914 = bitcast i16* %11913 to <16 x i16>*
  %11915 = load <16 x i16>, <16 x i16>* %11914, align 2, !tbaa !399
  %11916 = getelementptr inbounds i16, i16* %11913, i64 16
  %11917 = bitcast i16* %11916 to <16 x i16>*
  %11918 = load <16 x i16>, <16 x i16>* %11917, align 2, !tbaa !399
  %11919 = add nsw i64 %11791, %11911
  %11920 = getelementptr inbounds i16, i16* %blur_x841, i64 %11919
  %11921 = bitcast i16* %11920 to <16 x i16>*
  %11922 = load <16 x i16>, <16 x i16>* %11921, align 2, !tbaa !399
  %11923 = getelementptr inbounds i16, i16* %11920, i64 16
  %11924 = bitcast i16* %11923 to <16 x i16>*
  %11925 = load <16 x i16>, <16 x i16>* %11924, align 2, !tbaa !399
  %11926 = add nsw i64 %11794, %11911
  %11927 = getelementptr inbounds i16, i16* %blur_x841, i64 %11926
  %11928 = bitcast i16* %11927 to <16 x i16>*
  %11929 = load <16 x i16>, <16 x i16>* %11928, align 2, !tbaa !399
  %11930 = getelementptr inbounds i16, i16* %11927, i64 16
  %11931 = bitcast i16* %11930 to <16 x i16>*
  %11932 = load <16 x i16>, <16 x i16>* %11931, align 2, !tbaa !399
  %11933 = add <16 x i16> %11922, %11915
  %11934 = add <16 x i16> %11933, %11929
  %11935 = add <16 x i16> %11925, %11918
  %11936 = add <16 x i16> %11935, %11932
  %11937 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11934, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11938 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11936, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11939 = shufflevector <16 x i16> %11937, <16 x i16> %11938, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11940 = lshr <32 x i16> %11939, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11941 = shufflevector <32 x i16> %11940, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11942 = add nsw i64 %11798, %11911
  %11943 = getelementptr inbounds i16, i16* %255, i64 %11942
  %11944 = bitcast i16* %11943 to <16 x i16>*
  store <16 x i16> %11941, <16 x i16>* %11944, align 2, !tbaa !401
  %11945 = shufflevector <32 x i16> %11940, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11946 = getelementptr inbounds i16, i16* %11943, i64 16
  %11947 = bitcast i16* %11946 to <16 x i16>*
  store <16 x i16> %11945, <16 x i16>* %11947, align 2, !tbaa !401
  %11948 = add nuw nsw i32 %blur_y.s0.x.x.rebased980, 1
  %.not2497 = icmp eq i32 %11948, %t1639861
  br i1 %.not2497, label %"end for blur_y.s0.x.x.rebased979", label %"for blur_y.s0.x.x.rebased978"

after_bb989:                                      ; preds = %"end for blur_y.s0.x.x.rebased979", %"produce blur_x992"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1004.preheader", label %"end for blur_y.s0.x.x.rebased1005", !prof !386

"for blur_y.s0.x.x.rebased1004.preheader":        ; preds = %after_bb989
  %11949 = sext i32 %t1638848 to i64
  %11950 = zext i32 %.pre-phi3338 to i64
  %11951 = mul nsw i64 %11950, %298
  %11952 = sub nsw i64 %11951, %285
  %11953 = zext i32 %.pre-phi3324 to i64
  %11954 = mul nsw i64 %11953, %298
  %11955 = sub nsw i64 %11954, %285
  %11956 = zext i32 %.pre-phi3332 to i64
  %11957 = mul nsw i64 %11956, %298
  %11958 = sub nsw i64 %11957, %285
  %11959 = sext i32 %a339 to i64
  %11960 = add nsw i64 %11959, 2
  %11961 = mul nsw i64 %11960, %299
  %11962 = add nsw i64 %11961, %302
  br label %"for blur_y.s0.x.x.rebased1004"

"produce blur_x992":                              ; preds = %"end for blur_y.s0.x.x.rebased979"
  %11963 = getelementptr inbounds i16, i16* %read_input784, i64 %305
  %11964 = getelementptr inbounds i16, i16* %11963, i64 -31
  %11965 = bitcast i16* %11964 to <16 x i16>*
  %11966 = load <16 x i16>, <16 x i16>* %11965, align 2, !tbaa !396
  %11967 = getelementptr inbounds i16, i16* %11963, i64 -15
  %11968 = bitcast i16* %11967 to <16 x i16>*
  %11969 = load <16 x i16>, <16 x i16>* %11968, align 2, !tbaa !396
  %11970 = getelementptr inbounds i16, i16* %11963, i64 -30
  %11971 = bitcast i16* %11970 to <16 x i16>*
  %11972 = load <16 x i16>, <16 x i16>* %11971, align 2, !tbaa !396
  %11973 = getelementptr inbounds i16, i16* %11963, i64 -14
  %11974 = bitcast i16* %11973 to <16 x i16>*
  %11975 = load <16 x i16>, <16 x i16>* %11974, align 2, !tbaa !396
  %11976 = getelementptr inbounds i16, i16* %11963, i64 -32
  %11977 = bitcast i16* %11976 to <16 x i16>*
  %11978 = load <16 x i16>, <16 x i16>* %11977, align 2, !tbaa !396
  %11979 = getelementptr inbounds i16, i16* %11963, i64 -16
  %11980 = bitcast i16* %11979 to <16 x i16>*
  %11981 = load <16 x i16>, <16 x i16>* %11980, align 2, !tbaa !396
  %11982 = add <16 x i16> %11972, %11966
  %11983 = add <16 x i16> %11982, %11978
  %11984 = add <16 x i16> %11975, %11969
  %11985 = add <16 x i16> %11984, %11981
  %11986 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11983, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11987 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %11985, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %11988 = shufflevector <16 x i16> %11986, <16 x i16> %11987, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11989 = lshr <32 x i16> %11988, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %11990 = shufflevector <32 x i16> %11989, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %11991 = zext i32 %.pre-phi3324 to i64
  %11992 = mul nsw i64 %286, %11991
  %11993 = add nsw i64 %288, %11992
  %11994 = getelementptr inbounds i16, i16* %blur_x841, i64 %11993
  %11995 = getelementptr inbounds i16, i16* %11994, i64 -32
  %11996 = bitcast i16* %11995 to <16 x i16>*
  store <16 x i16> %11990, <16 x i16>* %11996, align 2, !tbaa !399
  %11997 = shufflevector <32 x i16> %11989, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %11998 = getelementptr inbounds i16, i16* %11994, i64 -16
  %11999 = bitcast i16* %11998 to <16 x i16>*
  store <16 x i16> %11997, <16 x i16>* %11999, align 2, !tbaa !399
  %12000 = zext i32 %.pre-phi3338 to i64
  %12001 = mul nsw i64 %12000, %298
  %12002 = add nsw i64 %12001, %283
  %12003 = getelementptr inbounds i16, i16* %blur_x841, i64 %12002
  %12004 = getelementptr inbounds i16, i16* %12003, i64 -32
  %12005 = bitcast i16* %12004 to <16 x i16>*
  %12006 = load <16 x i16>, <16 x i16>* %12005, align 2, !tbaa !399
  %12007 = getelementptr inbounds i16, i16* %12003, i64 -16
  %12008 = bitcast i16* %12007 to <16 x i16>*
  %12009 = load <16 x i16>, <16 x i16>* %12008, align 2, !tbaa !399
  %12010 = mul nsw i64 %11991, %298
  %12011 = add nsw i64 %12010, %283
  %12012 = getelementptr inbounds i16, i16* %blur_x841, i64 %12011
  %12013 = getelementptr inbounds i16, i16* %12012, i64 -32
  %12014 = bitcast i16* %12013 to <16 x i16>*
  %12015 = load <16 x i16>, <16 x i16>* %12014, align 2, !tbaa !399
  %12016 = getelementptr inbounds i16, i16* %12012, i64 -16
  %12017 = bitcast i16* %12016 to <16 x i16>*
  %12018 = load <16 x i16>, <16 x i16>* %12017, align 2, !tbaa !399
  %12019 = zext i32 %.pre-phi3332 to i64
  %12020 = mul nsw i64 %12019, %298
  %12021 = add nsw i64 %12020, %283
  %12022 = getelementptr inbounds i16, i16* %blur_x841, i64 %12021
  %12023 = getelementptr inbounds i16, i16* %12022, i64 -32
  %12024 = bitcast i16* %12023 to <16 x i16>*
  %12025 = load <16 x i16>, <16 x i16>* %12024, align 2, !tbaa !399
  %12026 = getelementptr inbounds i16, i16* %12022, i64 -16
  %12027 = bitcast i16* %12026 to <16 x i16>*
  %12028 = load <16 x i16>, <16 x i16>* %12027, align 2, !tbaa !399
  %12029 = add <16 x i16> %12015, %12006
  %12030 = add <16 x i16> %12029, %12025
  %12031 = add <16 x i16> %12018, %12009
  %12032 = add <16 x i16> %12031, %12028
  %12033 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12030, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12034 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12032, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12035 = shufflevector <16 x i16> %12033, <16 x i16> %12034, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12036 = lshr <32 x i16> %12035, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12037 = shufflevector <32 x i16> %12036, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12038 = sext i32 %a339 to i64
  %12039 = add nsw i64 %12038, 2
  %12040 = mul nsw i64 %12039, %299
  %12041 = add nsw i64 %301, %12040
  %12042 = getelementptr inbounds i16, i16* %255, i64 %12041
  %12043 = getelementptr inbounds i16, i16* %12042, i64 -32
  %12044 = bitcast i16* %12043 to <16 x i16>*
  store <16 x i16> %12037, <16 x i16>* %12044, align 2, !tbaa !401
  %12045 = shufflevector <32 x i16> %12036, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12046 = getelementptr inbounds i16, i16* %12042, i64 -16
  %12047 = bitcast i16* %12046 to <16 x i16>*
  store <16 x i16> %12045, <16 x i16>* %12047, align 2, !tbaa !401
  br label %after_bb989

"for blur_y.s0.x.x.rebased1004":                  ; preds = %"for blur_y.s0.x.x.rebased1004.preheader", %"consume blur_x1013"
  %indvars.iv3153 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1004.preheader" ], [ %indvars.iv.next3154, %"consume blur_x1013" ]
  %12048 = add nsw i64 %indvars.iv3153, %290
  %12049 = icmp slt i64 %12048, 1
  %12050 = trunc i64 %12048 to i32
  %12051 = shl nsw i32 %12050, 5
  %12052 = icmp sgt i32 %194, %12051
  %12053 = or i1 %12049, %12052
  br i1 %12053, label %"produce blur_x1011", label %"for blur_y.s0.x.x.rebased1004.consume blur_x1013_crit_edge"

"for blur_y.s0.x.x.rebased1004.consume blur_x1013_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1004"
  %.pre3341 = shl nsw i64 %12048, 5
  br label %"consume blur_x1013"

"end for blur_y.s0.x.x.rebased1005":              ; preds = %"consume blur_x1013", %after_bb989
  br i1 %291, label %"for blur_y.s0.x.x.rebased1021.preheader", label %"end for blur_y.s0.x.x.rebased1022", !prof !386

"for blur_y.s0.x.x.rebased1021.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1005"
  %12054 = sext i32 %t1638848 to i64
  %12055 = zext i32 %.pre-phi3338 to i64
  %12056 = mul nsw i64 %12055, %298
  %12057 = sub nsw i64 %12056, %285
  %12058 = zext i32 %.pre-phi3324 to i64
  %12059 = mul nsw i64 %12058, %298
  %12060 = sub nsw i64 %12059, %285
  %12061 = zext i32 %.pre-phi3332 to i64
  %12062 = mul nsw i64 %12061, %298
  %12063 = sub nsw i64 %12062, %285
  %12064 = sext i32 %a339 to i64
  %12065 = add nsw i64 %12064, 2
  %12066 = mul nsw i64 %12065, %299
  %12067 = add nsw i64 %12066, %302
  br label %"for blur_y.s0.x.x.rebased1021"

"produce blur_x1011":                             ; preds = %"for blur_y.s0.x.x.rebased1004"
  %t7041012 = add nsw i32 %12051, %t16811001
  %12068 = sext i32 %t7041012 to i64
  %12069 = getelementptr inbounds i16, i16* %read_input784, i64 %12068
  %12070 = getelementptr inbounds i16, i16* %12069, i64 1
  %12071 = bitcast i16* %12070 to <16 x i16>*
  %12072 = load <16 x i16>, <16 x i16>* %12071, align 2, !tbaa !396
  %12073 = getelementptr inbounds i16, i16* %12069, i64 17
  %12074 = bitcast i16* %12073 to <16 x i16>*
  %12075 = load <16 x i16>, <16 x i16>* %12074, align 2, !tbaa !396
  %12076 = getelementptr inbounds i16, i16* %12069, i64 2
  %12077 = bitcast i16* %12076 to <16 x i16>*
  %12078 = load <16 x i16>, <16 x i16>* %12077, align 2, !tbaa !396
  %12079 = getelementptr inbounds i16, i16* %12069, i64 18
  %12080 = bitcast i16* %12079 to <16 x i16>*
  %12081 = load <16 x i16>, <16 x i16>* %12080, align 2, !tbaa !396
  %12082 = bitcast i16* %12069 to <16 x i16>*
  %12083 = load <16 x i16>, <16 x i16>* %12082, align 2, !tbaa !396
  %12084 = getelementptr inbounds i16, i16* %12069, i64 16
  %12085 = bitcast i16* %12084 to <16 x i16>*
  %12086 = load <16 x i16>, <16 x i16>* %12085, align 2, !tbaa !396
  %12087 = add <16 x i16> %12078, %12072
  %12088 = add <16 x i16> %12087, %12083
  %12089 = add <16 x i16> %12081, %12075
  %12090 = add <16 x i16> %12089, %12086
  %12091 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12088, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12092 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12090, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12093 = shufflevector <16 x i16> %12091, <16 x i16> %12092, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12094 = lshr <32 x i16> %12093, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12095 = shufflevector <32 x i16> %12094, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12096 = shl nsw i64 %12048, 5
  %12097 = add nsw i64 %12096, %11949
  %12098 = getelementptr inbounds i16, i16* %blur_x841, i64 %12097
  %12099 = bitcast i16* %12098 to <16 x i16>*
  store <16 x i16> %12095, <16 x i16>* %12099, align 2, !tbaa !399
  %12100 = shufflevector <32 x i16> %12094, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12101 = getelementptr inbounds i16, i16* %12098, i64 16
  %12102 = bitcast i16* %12101 to <16 x i16>*
  store <16 x i16> %12100, <16 x i16>* %12102, align 2, !tbaa !399
  br label %"consume blur_x1013"

"consume blur_x1013":                             ; preds = %"for blur_y.s0.x.x.rebased1004.consume blur_x1013_crit_edge", %"produce blur_x1011"
  %.pre-phi3342 = phi i64 [ %.pre3341, %"for blur_y.s0.x.x.rebased1004.consume blur_x1013_crit_edge" ], [ %12096, %"produce blur_x1011" ]
  %12103 = add nsw i64 %11952, %.pre-phi3342
  %12104 = getelementptr inbounds i16, i16* %blur_x841, i64 %12103
  %12105 = bitcast i16* %12104 to <16 x i16>*
  %12106 = load <16 x i16>, <16 x i16>* %12105, align 2, !tbaa !399
  %12107 = getelementptr inbounds i16, i16* %12104, i64 16
  %12108 = bitcast i16* %12107 to <16 x i16>*
  %12109 = load <16 x i16>, <16 x i16>* %12108, align 2, !tbaa !399
  %12110 = add nsw i64 %11955, %.pre-phi3342
  %12111 = getelementptr inbounds i16, i16* %blur_x841, i64 %12110
  %12112 = bitcast i16* %12111 to <16 x i16>*
  %12113 = load <16 x i16>, <16 x i16>* %12112, align 2, !tbaa !399
  %12114 = getelementptr inbounds i16, i16* %12111, i64 16
  %12115 = bitcast i16* %12114 to <16 x i16>*
  %12116 = load <16 x i16>, <16 x i16>* %12115, align 2, !tbaa !399
  %12117 = add nsw i64 %11958, %.pre-phi3342
  %12118 = getelementptr inbounds i16, i16* %blur_x841, i64 %12117
  %12119 = bitcast i16* %12118 to <16 x i16>*
  %12120 = load <16 x i16>, <16 x i16>* %12119, align 2, !tbaa !399
  %12121 = getelementptr inbounds i16, i16* %12118, i64 16
  %12122 = bitcast i16* %12121 to <16 x i16>*
  %12123 = load <16 x i16>, <16 x i16>* %12122, align 2, !tbaa !399
  %12124 = add <16 x i16> %12113, %12106
  %12125 = add <16 x i16> %12124, %12120
  %12126 = add <16 x i16> %12116, %12109
  %12127 = add <16 x i16> %12126, %12123
  %12128 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12125, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12129 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12127, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12130 = shufflevector <16 x i16> %12128, <16 x i16> %12129, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12131 = lshr <32 x i16> %12130, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12132 = shufflevector <32 x i16> %12131, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12133 = add nsw i64 %11962, %.pre-phi3342
  %12134 = getelementptr inbounds i16, i16* %255, i64 %12133
  %12135 = bitcast i16* %12134 to <16 x i16>*
  store <16 x i16> %12132, <16 x i16>* %12135, align 2, !tbaa !401
  %12136 = shufflevector <32 x i16> %12131, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12137 = getelementptr inbounds i16, i16* %12134, i64 16
  %12138 = bitcast i16* %12137 to <16 x i16>*
  store <16 x i16> %12136, <16 x i16>* %12138, align 2, !tbaa !401
  %indvars.iv.next3154 = add nuw nsw i64 %indvars.iv3153, 1
  %.not2496 = icmp eq i64 %indvars.iv.next3154, %370
  br i1 %.not2496, label %"end for blur_y.s0.x.x.rebased1005", label %"for blur_y.s0.x.x.rebased1004"

"for blur_y.s0.x.x.rebased1021":                  ; preds = %"for blur_y.s0.x.x.rebased1021.preheader", %"consume blur_x1031"
  %blur_y.s0.x.x.rebased1023 = phi i32 [ %12217, %"consume blur_x1031" ], [ 0, %"for blur_y.s0.x.x.rebased1021.preheader" ]
  %12139 = add nsw i32 %blur_y.s0.x.x.rebased1023, %t1582776
  %a418 = shl nsw i32 %12139, 5
  %12140 = icmp sgt i32 %a327, %a418
  %b424 = select i1 %12140, i32 %a418, i32 %a327
  %12141 = icmp slt i32 %12139, 1
  %12142 = icmp sgt i32 %194, %a418
  %12143 = or i1 %12141, %12142
  br i1 %12143, label %"produce blur_x1028", label %"consume blur_x1031"

"end for blur_y.s0.x.x.rebased1022":              ; preds = %"consume blur_x1031", %"end for blur_y.s0.x.x.rebased1005"
  br i1 %224, label %"produce blur_x1035", label %after_bb1032

"produce blur_x1028":                             ; preds = %"for blur_y.s0.x.x.rebased1021"
  %12144 = icmp slt i32 %b424, %194
  %blur_x.s0.x.v1.base.s1029 = select i1 %12144, i32 %b424, i32 %194
  %t7091030 = add nsw i32 %blur_x.s0.x.v1.base.s1029, %t16811001
  %12145 = sext i32 %t7091030 to i64
  %12146 = getelementptr inbounds i16, i16* %read_input784, i64 %12145
  %12147 = getelementptr inbounds i16, i16* %12146, i64 1
  %12148 = bitcast i16* %12147 to <16 x i16>*
  %12149 = load <16 x i16>, <16 x i16>* %12148, align 2, !tbaa !396
  %12150 = getelementptr inbounds i16, i16* %12146, i64 17
  %12151 = bitcast i16* %12150 to <16 x i16>*
  %12152 = load <16 x i16>, <16 x i16>* %12151, align 2, !tbaa !396
  %12153 = getelementptr inbounds i16, i16* %12146, i64 2
  %12154 = bitcast i16* %12153 to <16 x i16>*
  %12155 = load <16 x i16>, <16 x i16>* %12154, align 2, !tbaa !396
  %12156 = getelementptr inbounds i16, i16* %12146, i64 18
  %12157 = bitcast i16* %12156 to <16 x i16>*
  %12158 = load <16 x i16>, <16 x i16>* %12157, align 2, !tbaa !396
  %12159 = bitcast i16* %12146 to <16 x i16>*
  %12160 = load <16 x i16>, <16 x i16>* %12159, align 2, !tbaa !396
  %12161 = getelementptr inbounds i16, i16* %12146, i64 16
  %12162 = bitcast i16* %12161 to <16 x i16>*
  %12163 = load <16 x i16>, <16 x i16>* %12162, align 2, !tbaa !396
  %12164 = add <16 x i16> %12155, %12149
  %12165 = add <16 x i16> %12164, %12160
  %12166 = add <16 x i16> %12158, %12152
  %12167 = add <16 x i16> %12166, %12163
  %12168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12165, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12169 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12167, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12170 = shufflevector <16 x i16> %12168, <16 x i16> %12169, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12171 = lshr <32 x i16> %12170, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12172 = shufflevector <32 x i16> %12171, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12173 = sext i32 %blur_x.s0.x.v1.base.s1029 to i64
  %12174 = add nsw i64 %12173, %12054
  %12175 = getelementptr inbounds i16, i16* %blur_x841, i64 %12174
  %12176 = bitcast i16* %12175 to <16 x i16>*
  store <16 x i16> %12172, <16 x i16>* %12176, align 2, !tbaa !399
  %12177 = shufflevector <32 x i16> %12171, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12178 = getelementptr inbounds i16, i16* %12175, i64 16
  %12179 = bitcast i16* %12178 to <16 x i16>*
  store <16 x i16> %12177, <16 x i16>* %12179, align 2, !tbaa !399
  br label %"consume blur_x1031"

"consume blur_x1031":                             ; preds = %"for blur_y.s0.x.x.rebased1021", %"produce blur_x1028"
  %12180 = sext i32 %b424 to i64
  %12181 = add nsw i64 %12057, %12180
  %12182 = getelementptr inbounds i16, i16* %blur_x841, i64 %12181
  %12183 = bitcast i16* %12182 to <16 x i16>*
  %12184 = load <16 x i16>, <16 x i16>* %12183, align 2, !tbaa !399
  %12185 = getelementptr inbounds i16, i16* %12182, i64 16
  %12186 = bitcast i16* %12185 to <16 x i16>*
  %12187 = load <16 x i16>, <16 x i16>* %12186, align 2, !tbaa !399
  %12188 = add nsw i64 %12060, %12180
  %12189 = getelementptr inbounds i16, i16* %blur_x841, i64 %12188
  %12190 = bitcast i16* %12189 to <16 x i16>*
  %12191 = load <16 x i16>, <16 x i16>* %12190, align 2, !tbaa !399
  %12192 = getelementptr inbounds i16, i16* %12189, i64 16
  %12193 = bitcast i16* %12192 to <16 x i16>*
  %12194 = load <16 x i16>, <16 x i16>* %12193, align 2, !tbaa !399
  %12195 = add nsw i64 %12063, %12180
  %12196 = getelementptr inbounds i16, i16* %blur_x841, i64 %12195
  %12197 = bitcast i16* %12196 to <16 x i16>*
  %12198 = load <16 x i16>, <16 x i16>* %12197, align 2, !tbaa !399
  %12199 = getelementptr inbounds i16, i16* %12196, i64 16
  %12200 = bitcast i16* %12199 to <16 x i16>*
  %12201 = load <16 x i16>, <16 x i16>* %12200, align 2, !tbaa !399
  %12202 = add <16 x i16> %12191, %12184
  %12203 = add <16 x i16> %12202, %12198
  %12204 = add <16 x i16> %12194, %12187
  %12205 = add <16 x i16> %12204, %12201
  %12206 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12203, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12207 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12205, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12208 = shufflevector <16 x i16> %12206, <16 x i16> %12207, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12209 = lshr <32 x i16> %12208, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12210 = shufflevector <32 x i16> %12209, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12211 = add nsw i64 %12067, %12180
  %12212 = getelementptr inbounds i16, i16* %255, i64 %12211
  %12213 = bitcast i16* %12212 to <16 x i16>*
  store <16 x i16> %12210, <16 x i16>* %12213, align 2, !tbaa !401
  %12214 = shufflevector <32 x i16> %12209, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12215 = getelementptr inbounds i16, i16* %12212, i64 16
  %12216 = bitcast i16* %12215 to <16 x i16>*
  store <16 x i16> %12214, <16 x i16>* %12216, align 2, !tbaa !401
  %12217 = add nuw nsw i32 %blur_y.s0.x.x.rebased1023, 1
  %.not2495 = icmp eq i32 %12217, %t1639861
  br i1 %.not2495, label %"end for blur_y.s0.x.x.rebased1022", label %"for blur_y.s0.x.x.rebased1021"

after_bb1032:                                     ; preds = %"end for blur_y.s0.x.x.rebased1022", %"produce blur_x1035"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1047.preheader", label %"end for blur_y.s0.x.x.rebased1048", !prof !386

"for blur_y.s0.x.x.rebased1047.preheader":        ; preds = %after_bb1032
  %12218 = sext i32 %t1644878 to i64
  %12219 = zext i32 %.pre-phi3324 to i64
  %12220 = mul nsw i64 %12219, %298
  %12221 = sub nsw i64 %12220, %285
  %12222 = zext i32 %.pre-phi3328 to i64
  %12223 = mul nsw i64 %12222, %298
  %12224 = sub nsw i64 %12223, %285
  %12225 = zext i32 %.pre-phi3338 to i64
  %12226 = mul nsw i64 %12225, %298
  %12227 = sub nsw i64 %12226, %285
  %12228 = sext i32 %a339 to i64
  %12229 = add nsw i64 %12228, 3
  %12230 = mul nsw i64 %12229, %299
  %12231 = add nsw i64 %12230, %302
  br label %"for blur_y.s0.x.x.rebased1047"

"produce blur_x1035":                             ; preds = %"end for blur_y.s0.x.x.rebased1022"
  %12232 = getelementptr inbounds i16, i16* %read_input784, i64 %307
  %12233 = getelementptr inbounds i16, i16* %12232, i64 -31
  %12234 = bitcast i16* %12233 to <16 x i16>*
  %12235 = load <16 x i16>, <16 x i16>* %12234, align 2, !tbaa !396
  %12236 = getelementptr inbounds i16, i16* %12232, i64 -15
  %12237 = bitcast i16* %12236 to <16 x i16>*
  %12238 = load <16 x i16>, <16 x i16>* %12237, align 2, !tbaa !396
  %12239 = getelementptr inbounds i16, i16* %12232, i64 -30
  %12240 = bitcast i16* %12239 to <16 x i16>*
  %12241 = load <16 x i16>, <16 x i16>* %12240, align 2, !tbaa !396
  %12242 = getelementptr inbounds i16, i16* %12232, i64 -14
  %12243 = bitcast i16* %12242 to <16 x i16>*
  %12244 = load <16 x i16>, <16 x i16>* %12243, align 2, !tbaa !396
  %12245 = getelementptr inbounds i16, i16* %12232, i64 -32
  %12246 = bitcast i16* %12245 to <16 x i16>*
  %12247 = load <16 x i16>, <16 x i16>* %12246, align 2, !tbaa !396
  %12248 = getelementptr inbounds i16, i16* %12232, i64 -16
  %12249 = bitcast i16* %12248 to <16 x i16>*
  %12250 = load <16 x i16>, <16 x i16>* %12249, align 2, !tbaa !396
  %12251 = add <16 x i16> %12241, %12235
  %12252 = add <16 x i16> %12251, %12247
  %12253 = add <16 x i16> %12244, %12238
  %12254 = add <16 x i16> %12253, %12250
  %12255 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12252, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12256 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12254, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12257 = shufflevector <16 x i16> %12255, <16 x i16> %12256, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12258 = lshr <32 x i16> %12257, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12259 = shufflevector <32 x i16> %12258, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12260 = zext i32 %.pre-phi3328 to i64
  %12261 = mul nsw i64 %286, %12260
  %12262 = add nsw i64 %288, %12261
  %12263 = getelementptr inbounds i16, i16* %blur_x841, i64 %12262
  %12264 = getelementptr inbounds i16, i16* %12263, i64 -32
  %12265 = bitcast i16* %12264 to <16 x i16>*
  store <16 x i16> %12259, <16 x i16>* %12265, align 2, !tbaa !399
  %12266 = shufflevector <32 x i16> %12258, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12267 = getelementptr inbounds i16, i16* %12263, i64 -16
  %12268 = bitcast i16* %12267 to <16 x i16>*
  store <16 x i16> %12266, <16 x i16>* %12268, align 2, !tbaa !399
  %12269 = zext i32 %.pre-phi3324 to i64
  %12270 = mul nsw i64 %12269, %298
  %12271 = add nsw i64 %12270, %283
  %12272 = getelementptr inbounds i16, i16* %blur_x841, i64 %12271
  %12273 = getelementptr inbounds i16, i16* %12272, i64 -32
  %12274 = bitcast i16* %12273 to <16 x i16>*
  %12275 = load <16 x i16>, <16 x i16>* %12274, align 2, !tbaa !399
  %12276 = getelementptr inbounds i16, i16* %12272, i64 -16
  %12277 = bitcast i16* %12276 to <16 x i16>*
  %12278 = load <16 x i16>, <16 x i16>* %12277, align 2, !tbaa !399
  %12279 = mul nsw i64 %12260, %298
  %12280 = add nsw i64 %12279, %283
  %12281 = getelementptr inbounds i16, i16* %blur_x841, i64 %12280
  %12282 = getelementptr inbounds i16, i16* %12281, i64 -32
  %12283 = bitcast i16* %12282 to <16 x i16>*
  %12284 = load <16 x i16>, <16 x i16>* %12283, align 2, !tbaa !399
  %12285 = getelementptr inbounds i16, i16* %12281, i64 -16
  %12286 = bitcast i16* %12285 to <16 x i16>*
  %12287 = load <16 x i16>, <16 x i16>* %12286, align 2, !tbaa !399
  %12288 = zext i32 %.pre-phi3338 to i64
  %12289 = mul nsw i64 %12288, %298
  %12290 = add nsw i64 %12289, %283
  %12291 = getelementptr inbounds i16, i16* %blur_x841, i64 %12290
  %12292 = getelementptr inbounds i16, i16* %12291, i64 -32
  %12293 = bitcast i16* %12292 to <16 x i16>*
  %12294 = load <16 x i16>, <16 x i16>* %12293, align 2, !tbaa !399
  %12295 = getelementptr inbounds i16, i16* %12291, i64 -16
  %12296 = bitcast i16* %12295 to <16 x i16>*
  %12297 = load <16 x i16>, <16 x i16>* %12296, align 2, !tbaa !399
  %12298 = add <16 x i16> %12284, %12275
  %12299 = add <16 x i16> %12298, %12294
  %12300 = add <16 x i16> %12287, %12278
  %12301 = add <16 x i16> %12300, %12297
  %12302 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12299, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12303 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12301, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12304 = shufflevector <16 x i16> %12302, <16 x i16> %12303, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12305 = lshr <32 x i16> %12304, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12306 = shufflevector <32 x i16> %12305, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12307 = sext i32 %a339 to i64
  %12308 = add nsw i64 %12307, 3
  %12309 = mul nsw i64 %12308, %299
  %12310 = add nsw i64 %301, %12309
  %12311 = getelementptr inbounds i16, i16* %255, i64 %12310
  %12312 = getelementptr inbounds i16, i16* %12311, i64 -32
  %12313 = bitcast i16* %12312 to <16 x i16>*
  store <16 x i16> %12306, <16 x i16>* %12313, align 2, !tbaa !401
  %12314 = shufflevector <32 x i16> %12305, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12315 = getelementptr inbounds i16, i16* %12311, i64 -16
  %12316 = bitcast i16* %12315 to <16 x i16>*
  store <16 x i16> %12314, <16 x i16>* %12316, align 2, !tbaa !401
  br label %after_bb1032

"for blur_y.s0.x.x.rebased1047":                  ; preds = %"for blur_y.s0.x.x.rebased1047.preheader", %"consume blur_x1056"
  %indvars.iv3156 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1047.preheader" ], [ %indvars.iv.next3157, %"consume blur_x1056" ]
  %12317 = add nsw i64 %indvars.iv3156, %290
  %12318 = icmp slt i64 %12317, 1
  %12319 = trunc i64 %12317 to i32
  %12320 = shl nsw i32 %12319, 5
  %12321 = icmp sgt i32 %194, %12320
  %12322 = or i1 %12318, %12321
  br i1 %12322, label %"produce blur_x1054", label %"for blur_y.s0.x.x.rebased1047.consume blur_x1056_crit_edge"

"for blur_y.s0.x.x.rebased1047.consume blur_x1056_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1047"
  %.pre3343 = shl nsw i64 %12317, 5
  br label %"consume blur_x1056"

"end for blur_y.s0.x.x.rebased1048":              ; preds = %"consume blur_x1056", %after_bb1032
  br i1 %291, label %"for blur_y.s0.x.x.rebased1064.preheader", label %"end for blur_y.s0.x.x.rebased1065", !prof !386

"for blur_y.s0.x.x.rebased1064.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1048"
  %12323 = sext i32 %t1644878 to i64
  %12324 = zext i32 %.pre-phi3324 to i64
  %12325 = mul nsw i64 %12324, %298
  %12326 = sub nsw i64 %12325, %285
  %12327 = zext i32 %.pre-phi3328 to i64
  %12328 = mul nsw i64 %12327, %298
  %12329 = sub nsw i64 %12328, %285
  %12330 = zext i32 %.pre-phi3338 to i64
  %12331 = mul nsw i64 %12330, %298
  %12332 = sub nsw i64 %12331, %285
  %12333 = sext i32 %a339 to i64
  %12334 = add nsw i64 %12333, 3
  %12335 = mul nsw i64 %12334, %299
  %12336 = add nsw i64 %12335, %302
  br label %"for blur_y.s0.x.x.rebased1064"

"produce blur_x1054":                             ; preds = %"for blur_y.s0.x.x.rebased1047"
  %t7201055 = add nsw i32 %12320, %t16971044
  %12337 = sext i32 %t7201055 to i64
  %12338 = getelementptr inbounds i16, i16* %read_input784, i64 %12337
  %12339 = getelementptr inbounds i16, i16* %12338, i64 1
  %12340 = bitcast i16* %12339 to <16 x i16>*
  %12341 = load <16 x i16>, <16 x i16>* %12340, align 2, !tbaa !396
  %12342 = getelementptr inbounds i16, i16* %12338, i64 17
  %12343 = bitcast i16* %12342 to <16 x i16>*
  %12344 = load <16 x i16>, <16 x i16>* %12343, align 2, !tbaa !396
  %12345 = getelementptr inbounds i16, i16* %12338, i64 2
  %12346 = bitcast i16* %12345 to <16 x i16>*
  %12347 = load <16 x i16>, <16 x i16>* %12346, align 2, !tbaa !396
  %12348 = getelementptr inbounds i16, i16* %12338, i64 18
  %12349 = bitcast i16* %12348 to <16 x i16>*
  %12350 = load <16 x i16>, <16 x i16>* %12349, align 2, !tbaa !396
  %12351 = bitcast i16* %12338 to <16 x i16>*
  %12352 = load <16 x i16>, <16 x i16>* %12351, align 2, !tbaa !396
  %12353 = getelementptr inbounds i16, i16* %12338, i64 16
  %12354 = bitcast i16* %12353 to <16 x i16>*
  %12355 = load <16 x i16>, <16 x i16>* %12354, align 2, !tbaa !396
  %12356 = add <16 x i16> %12347, %12341
  %12357 = add <16 x i16> %12356, %12352
  %12358 = add <16 x i16> %12350, %12344
  %12359 = add <16 x i16> %12358, %12355
  %12360 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12357, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12361 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12359, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12362 = shufflevector <16 x i16> %12360, <16 x i16> %12361, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12363 = lshr <32 x i16> %12362, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12364 = shufflevector <32 x i16> %12363, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12365 = shl nsw i64 %12317, 5
  %12366 = add nsw i64 %12365, %12218
  %12367 = getelementptr inbounds i16, i16* %blur_x841, i64 %12366
  %12368 = bitcast i16* %12367 to <16 x i16>*
  store <16 x i16> %12364, <16 x i16>* %12368, align 2, !tbaa !399
  %12369 = shufflevector <32 x i16> %12363, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12370 = getelementptr inbounds i16, i16* %12367, i64 16
  %12371 = bitcast i16* %12370 to <16 x i16>*
  store <16 x i16> %12369, <16 x i16>* %12371, align 2, !tbaa !399
  br label %"consume blur_x1056"

"consume blur_x1056":                             ; preds = %"for blur_y.s0.x.x.rebased1047.consume blur_x1056_crit_edge", %"produce blur_x1054"
  %.pre-phi3344 = phi i64 [ %.pre3343, %"for blur_y.s0.x.x.rebased1047.consume blur_x1056_crit_edge" ], [ %12365, %"produce blur_x1054" ]
  %12372 = add nsw i64 %12221, %.pre-phi3344
  %12373 = getelementptr inbounds i16, i16* %blur_x841, i64 %12372
  %12374 = bitcast i16* %12373 to <16 x i16>*
  %12375 = load <16 x i16>, <16 x i16>* %12374, align 2, !tbaa !399
  %12376 = getelementptr inbounds i16, i16* %12373, i64 16
  %12377 = bitcast i16* %12376 to <16 x i16>*
  %12378 = load <16 x i16>, <16 x i16>* %12377, align 2, !tbaa !399
  %12379 = add nsw i64 %12224, %.pre-phi3344
  %12380 = getelementptr inbounds i16, i16* %blur_x841, i64 %12379
  %12381 = bitcast i16* %12380 to <16 x i16>*
  %12382 = load <16 x i16>, <16 x i16>* %12381, align 2, !tbaa !399
  %12383 = getelementptr inbounds i16, i16* %12380, i64 16
  %12384 = bitcast i16* %12383 to <16 x i16>*
  %12385 = load <16 x i16>, <16 x i16>* %12384, align 2, !tbaa !399
  %12386 = add nsw i64 %12227, %.pre-phi3344
  %12387 = getelementptr inbounds i16, i16* %blur_x841, i64 %12386
  %12388 = bitcast i16* %12387 to <16 x i16>*
  %12389 = load <16 x i16>, <16 x i16>* %12388, align 2, !tbaa !399
  %12390 = getelementptr inbounds i16, i16* %12387, i64 16
  %12391 = bitcast i16* %12390 to <16 x i16>*
  %12392 = load <16 x i16>, <16 x i16>* %12391, align 2, !tbaa !399
  %12393 = add <16 x i16> %12382, %12375
  %12394 = add <16 x i16> %12393, %12389
  %12395 = add <16 x i16> %12385, %12378
  %12396 = add <16 x i16> %12395, %12392
  %12397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12394, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12398 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12396, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12399 = shufflevector <16 x i16> %12397, <16 x i16> %12398, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12400 = lshr <32 x i16> %12399, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12401 = shufflevector <32 x i16> %12400, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12402 = add nsw i64 %12231, %.pre-phi3344
  %12403 = getelementptr inbounds i16, i16* %255, i64 %12402
  %12404 = bitcast i16* %12403 to <16 x i16>*
  store <16 x i16> %12401, <16 x i16>* %12404, align 2, !tbaa !401
  %12405 = shufflevector <32 x i16> %12400, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12406 = getelementptr inbounds i16, i16* %12403, i64 16
  %12407 = bitcast i16* %12406 to <16 x i16>*
  store <16 x i16> %12405, <16 x i16>* %12407, align 2, !tbaa !401
  %indvars.iv.next3157 = add nuw nsw i64 %indvars.iv3156, 1
  %.not2494 = icmp eq i64 %indvars.iv.next3157, %370
  br i1 %.not2494, label %"end for blur_y.s0.x.x.rebased1048", label %"for blur_y.s0.x.x.rebased1047"

"for blur_y.s0.x.x.rebased1064":                  ; preds = %"for blur_y.s0.x.x.rebased1064.preheader", %"consume blur_x1074"
  %blur_y.s0.x.x.rebased1066 = phi i32 [ %12486, %"consume blur_x1074" ], [ 0, %"for blur_y.s0.x.x.rebased1064.preheader" ]
  %12408 = add nsw i32 %blur_y.s0.x.x.rebased1066, %t1582776
  %a425 = shl nsw i32 %12408, 5
  %12409 = icmp sgt i32 %a327, %a425
  %b431 = select i1 %12409, i32 %a425, i32 %a327
  %12410 = icmp slt i32 %12408, 1
  %12411 = icmp sgt i32 %194, %a425
  %12412 = or i1 %12410, %12411
  br i1 %12412, label %"produce blur_x1071", label %"consume blur_x1074"

"end for blur_y.s0.x.x.rebased1065":              ; preds = %"consume blur_x1074", %"end for blur_y.s0.x.x.rebased1048"
  br i1 %224, label %"produce blur_x1078", label %after_bb1075

"produce blur_x1071":                             ; preds = %"for blur_y.s0.x.x.rebased1064"
  %12413 = icmp slt i32 %b431, %194
  %blur_x.s0.x.v1.base.s1072 = select i1 %12413, i32 %b431, i32 %194
  %t7251073 = add nsw i32 %blur_x.s0.x.v1.base.s1072, %t16971044
  %12414 = sext i32 %t7251073 to i64
  %12415 = getelementptr inbounds i16, i16* %read_input784, i64 %12414
  %12416 = getelementptr inbounds i16, i16* %12415, i64 1
  %12417 = bitcast i16* %12416 to <16 x i16>*
  %12418 = load <16 x i16>, <16 x i16>* %12417, align 2, !tbaa !396
  %12419 = getelementptr inbounds i16, i16* %12415, i64 17
  %12420 = bitcast i16* %12419 to <16 x i16>*
  %12421 = load <16 x i16>, <16 x i16>* %12420, align 2, !tbaa !396
  %12422 = getelementptr inbounds i16, i16* %12415, i64 2
  %12423 = bitcast i16* %12422 to <16 x i16>*
  %12424 = load <16 x i16>, <16 x i16>* %12423, align 2, !tbaa !396
  %12425 = getelementptr inbounds i16, i16* %12415, i64 18
  %12426 = bitcast i16* %12425 to <16 x i16>*
  %12427 = load <16 x i16>, <16 x i16>* %12426, align 2, !tbaa !396
  %12428 = bitcast i16* %12415 to <16 x i16>*
  %12429 = load <16 x i16>, <16 x i16>* %12428, align 2, !tbaa !396
  %12430 = getelementptr inbounds i16, i16* %12415, i64 16
  %12431 = bitcast i16* %12430 to <16 x i16>*
  %12432 = load <16 x i16>, <16 x i16>* %12431, align 2, !tbaa !396
  %12433 = add <16 x i16> %12424, %12418
  %12434 = add <16 x i16> %12433, %12429
  %12435 = add <16 x i16> %12427, %12421
  %12436 = add <16 x i16> %12435, %12432
  %12437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12434, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12438 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12436, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12439 = shufflevector <16 x i16> %12437, <16 x i16> %12438, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12440 = lshr <32 x i16> %12439, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12441 = shufflevector <32 x i16> %12440, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12442 = sext i32 %blur_x.s0.x.v1.base.s1072 to i64
  %12443 = add nsw i64 %12442, %12323
  %12444 = getelementptr inbounds i16, i16* %blur_x841, i64 %12443
  %12445 = bitcast i16* %12444 to <16 x i16>*
  store <16 x i16> %12441, <16 x i16>* %12445, align 2, !tbaa !399
  %12446 = shufflevector <32 x i16> %12440, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12447 = getelementptr inbounds i16, i16* %12444, i64 16
  %12448 = bitcast i16* %12447 to <16 x i16>*
  store <16 x i16> %12446, <16 x i16>* %12448, align 2, !tbaa !399
  br label %"consume blur_x1074"

"consume blur_x1074":                             ; preds = %"for blur_y.s0.x.x.rebased1064", %"produce blur_x1071"
  %12449 = sext i32 %b431 to i64
  %12450 = add nsw i64 %12326, %12449
  %12451 = getelementptr inbounds i16, i16* %blur_x841, i64 %12450
  %12452 = bitcast i16* %12451 to <16 x i16>*
  %12453 = load <16 x i16>, <16 x i16>* %12452, align 2, !tbaa !399
  %12454 = getelementptr inbounds i16, i16* %12451, i64 16
  %12455 = bitcast i16* %12454 to <16 x i16>*
  %12456 = load <16 x i16>, <16 x i16>* %12455, align 2, !tbaa !399
  %12457 = add nsw i64 %12329, %12449
  %12458 = getelementptr inbounds i16, i16* %blur_x841, i64 %12457
  %12459 = bitcast i16* %12458 to <16 x i16>*
  %12460 = load <16 x i16>, <16 x i16>* %12459, align 2, !tbaa !399
  %12461 = getelementptr inbounds i16, i16* %12458, i64 16
  %12462 = bitcast i16* %12461 to <16 x i16>*
  %12463 = load <16 x i16>, <16 x i16>* %12462, align 2, !tbaa !399
  %12464 = add nsw i64 %12332, %12449
  %12465 = getelementptr inbounds i16, i16* %blur_x841, i64 %12464
  %12466 = bitcast i16* %12465 to <16 x i16>*
  %12467 = load <16 x i16>, <16 x i16>* %12466, align 2, !tbaa !399
  %12468 = getelementptr inbounds i16, i16* %12465, i64 16
  %12469 = bitcast i16* %12468 to <16 x i16>*
  %12470 = load <16 x i16>, <16 x i16>* %12469, align 2, !tbaa !399
  %12471 = add <16 x i16> %12460, %12453
  %12472 = add <16 x i16> %12471, %12467
  %12473 = add <16 x i16> %12463, %12456
  %12474 = add <16 x i16> %12473, %12470
  %12475 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12472, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12476 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12474, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12477 = shufflevector <16 x i16> %12475, <16 x i16> %12476, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12478 = lshr <32 x i16> %12477, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12479 = shufflevector <32 x i16> %12478, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12480 = add nsw i64 %12336, %12449
  %12481 = getelementptr inbounds i16, i16* %255, i64 %12480
  %12482 = bitcast i16* %12481 to <16 x i16>*
  store <16 x i16> %12479, <16 x i16>* %12482, align 2, !tbaa !401
  %12483 = shufflevector <32 x i16> %12478, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12484 = getelementptr inbounds i16, i16* %12481, i64 16
  %12485 = bitcast i16* %12484 to <16 x i16>*
  store <16 x i16> %12483, <16 x i16>* %12485, align 2, !tbaa !401
  %12486 = add nuw nsw i32 %blur_y.s0.x.x.rebased1066, 1
  %.not2493 = icmp eq i32 %12486, %t1639861
  br i1 %.not2493, label %"end for blur_y.s0.x.x.rebased1065", label %"for blur_y.s0.x.x.rebased1064"

after_bb1075:                                     ; preds = %"end for blur_y.s0.x.x.rebased1065", %"produce blur_x1078"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1090.preheader", label %"end for blur_y.s0.x.x.rebased1091", !prof !386

"for blur_y.s0.x.x.rebased1090.preheader":        ; preds = %after_bb1075
  %12487 = sext i32 %t1650914 to i64
  %12488 = zext i32 %.pre-phi3328 to i64
  %12489 = mul nsw i64 %12488, %298
  %12490 = sub nsw i64 %12489, %285
  %12491 = zext i32 %.pre-phi3332 to i64
  %12492 = mul nsw i64 %12491, %298
  %12493 = sub nsw i64 %12492, %285
  %12494 = zext i32 %.pre-phi3324 to i64
  %12495 = mul nsw i64 %12494, %298
  %12496 = sub nsw i64 %12495, %285
  %12497 = sext i32 %a339 to i64
  %12498 = add nsw i64 %12497, 4
  %12499 = mul nsw i64 %12498, %299
  %12500 = add nsw i64 %12499, %302
  br label %"for blur_y.s0.x.x.rebased1090"

"produce blur_x1078":                             ; preds = %"end for blur_y.s0.x.x.rebased1065"
  %12501 = getelementptr inbounds i16, i16* %read_input784, i64 %309
  %12502 = getelementptr inbounds i16, i16* %12501, i64 -31
  %12503 = bitcast i16* %12502 to <16 x i16>*
  %12504 = load <16 x i16>, <16 x i16>* %12503, align 2, !tbaa !396
  %12505 = getelementptr inbounds i16, i16* %12501, i64 -15
  %12506 = bitcast i16* %12505 to <16 x i16>*
  %12507 = load <16 x i16>, <16 x i16>* %12506, align 2, !tbaa !396
  %12508 = getelementptr inbounds i16, i16* %12501, i64 -30
  %12509 = bitcast i16* %12508 to <16 x i16>*
  %12510 = load <16 x i16>, <16 x i16>* %12509, align 2, !tbaa !396
  %12511 = getelementptr inbounds i16, i16* %12501, i64 -14
  %12512 = bitcast i16* %12511 to <16 x i16>*
  %12513 = load <16 x i16>, <16 x i16>* %12512, align 2, !tbaa !396
  %12514 = getelementptr inbounds i16, i16* %12501, i64 -32
  %12515 = bitcast i16* %12514 to <16 x i16>*
  %12516 = load <16 x i16>, <16 x i16>* %12515, align 2, !tbaa !396
  %12517 = getelementptr inbounds i16, i16* %12501, i64 -16
  %12518 = bitcast i16* %12517 to <16 x i16>*
  %12519 = load <16 x i16>, <16 x i16>* %12518, align 2, !tbaa !396
  %12520 = add <16 x i16> %12510, %12504
  %12521 = add <16 x i16> %12520, %12516
  %12522 = add <16 x i16> %12513, %12507
  %12523 = add <16 x i16> %12522, %12519
  %12524 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12521, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12525 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12523, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12526 = shufflevector <16 x i16> %12524, <16 x i16> %12525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12527 = lshr <32 x i16> %12526, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12528 = shufflevector <32 x i16> %12527, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12529 = zext i32 %.pre-phi3332 to i64
  %12530 = mul nsw i64 %286, %12529
  %12531 = add nsw i64 %288, %12530
  %12532 = getelementptr inbounds i16, i16* %blur_x841, i64 %12531
  %12533 = getelementptr inbounds i16, i16* %12532, i64 -32
  %12534 = bitcast i16* %12533 to <16 x i16>*
  store <16 x i16> %12528, <16 x i16>* %12534, align 2, !tbaa !399
  %12535 = shufflevector <32 x i16> %12527, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12536 = getelementptr inbounds i16, i16* %12532, i64 -16
  %12537 = bitcast i16* %12536 to <16 x i16>*
  store <16 x i16> %12535, <16 x i16>* %12537, align 2, !tbaa !399
  %12538 = zext i32 %.pre-phi3328 to i64
  %12539 = mul nsw i64 %12538, %298
  %12540 = add nsw i64 %12539, %283
  %12541 = getelementptr inbounds i16, i16* %blur_x841, i64 %12540
  %12542 = getelementptr inbounds i16, i16* %12541, i64 -32
  %12543 = bitcast i16* %12542 to <16 x i16>*
  %12544 = load <16 x i16>, <16 x i16>* %12543, align 2, !tbaa !399
  %12545 = getelementptr inbounds i16, i16* %12541, i64 -16
  %12546 = bitcast i16* %12545 to <16 x i16>*
  %12547 = load <16 x i16>, <16 x i16>* %12546, align 2, !tbaa !399
  %12548 = mul nsw i64 %12529, %298
  %12549 = add nsw i64 %12548, %283
  %12550 = getelementptr inbounds i16, i16* %blur_x841, i64 %12549
  %12551 = getelementptr inbounds i16, i16* %12550, i64 -32
  %12552 = bitcast i16* %12551 to <16 x i16>*
  %12553 = load <16 x i16>, <16 x i16>* %12552, align 2, !tbaa !399
  %12554 = getelementptr inbounds i16, i16* %12550, i64 -16
  %12555 = bitcast i16* %12554 to <16 x i16>*
  %12556 = load <16 x i16>, <16 x i16>* %12555, align 2, !tbaa !399
  %12557 = zext i32 %.pre-phi3324 to i64
  %12558 = mul nsw i64 %12557, %298
  %12559 = add nsw i64 %12558, %283
  %12560 = getelementptr inbounds i16, i16* %blur_x841, i64 %12559
  %12561 = getelementptr inbounds i16, i16* %12560, i64 -32
  %12562 = bitcast i16* %12561 to <16 x i16>*
  %12563 = load <16 x i16>, <16 x i16>* %12562, align 2, !tbaa !399
  %12564 = getelementptr inbounds i16, i16* %12560, i64 -16
  %12565 = bitcast i16* %12564 to <16 x i16>*
  %12566 = load <16 x i16>, <16 x i16>* %12565, align 2, !tbaa !399
  %12567 = add <16 x i16> %12553, %12544
  %12568 = add <16 x i16> %12567, %12563
  %12569 = add <16 x i16> %12556, %12547
  %12570 = add <16 x i16> %12569, %12566
  %12571 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12568, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12572 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12570, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12573 = shufflevector <16 x i16> %12571, <16 x i16> %12572, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12574 = lshr <32 x i16> %12573, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12575 = shufflevector <32 x i16> %12574, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12576 = sext i32 %a339 to i64
  %12577 = add nsw i64 %12576, 4
  %12578 = mul nsw i64 %12577, %299
  %12579 = add nsw i64 %301, %12578
  %12580 = getelementptr inbounds i16, i16* %255, i64 %12579
  %12581 = getelementptr inbounds i16, i16* %12580, i64 -32
  %12582 = bitcast i16* %12581 to <16 x i16>*
  store <16 x i16> %12575, <16 x i16>* %12582, align 2, !tbaa !401
  %12583 = shufflevector <32 x i16> %12574, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12584 = getelementptr inbounds i16, i16* %12580, i64 -16
  %12585 = bitcast i16* %12584 to <16 x i16>*
  store <16 x i16> %12583, <16 x i16>* %12585, align 2, !tbaa !401
  br label %after_bb1075

"for blur_y.s0.x.x.rebased1090":                  ; preds = %"for blur_y.s0.x.x.rebased1090.preheader", %"consume blur_x1099"
  %indvars.iv3159 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1090.preheader" ], [ %indvars.iv.next3160, %"consume blur_x1099" ]
  %12586 = add nsw i64 %indvars.iv3159, %290
  %12587 = icmp slt i64 %12586, 1
  %12588 = trunc i64 %12586 to i32
  %12589 = shl nsw i32 %12588, 5
  %12590 = icmp sgt i32 %194, %12589
  %12591 = or i1 %12587, %12590
  br i1 %12591, label %"produce blur_x1097", label %"for blur_y.s0.x.x.rebased1090.consume blur_x1099_crit_edge"

"for blur_y.s0.x.x.rebased1090.consume blur_x1099_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1090"
  %.pre3345 = shl nsw i64 %12586, 5
  br label %"consume blur_x1099"

"end for blur_y.s0.x.x.rebased1091":              ; preds = %"consume blur_x1099", %after_bb1075
  br i1 %291, label %"for blur_y.s0.x.x.rebased1107.preheader", label %"end for blur_y.s0.x.x.rebased1108", !prof !386

"for blur_y.s0.x.x.rebased1107.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1091"
  %12592 = sext i32 %t1650914 to i64
  %12593 = zext i32 %.pre-phi3328 to i64
  %12594 = mul nsw i64 %12593, %298
  %12595 = sub nsw i64 %12594, %285
  %12596 = zext i32 %.pre-phi3332 to i64
  %12597 = mul nsw i64 %12596, %298
  %12598 = sub nsw i64 %12597, %285
  %12599 = zext i32 %.pre-phi3324 to i64
  %12600 = mul nsw i64 %12599, %298
  %12601 = sub nsw i64 %12600, %285
  %12602 = sext i32 %a339 to i64
  %12603 = add nsw i64 %12602, 4
  %12604 = mul nsw i64 %12603, %299
  %12605 = add nsw i64 %12604, %302
  br label %"for blur_y.s0.x.x.rebased1107"

"produce blur_x1097":                             ; preds = %"for blur_y.s0.x.x.rebased1090"
  %t7361098 = add nsw i32 %12589, %t17131087
  %12606 = sext i32 %t7361098 to i64
  %12607 = getelementptr inbounds i16, i16* %read_input784, i64 %12606
  %12608 = getelementptr inbounds i16, i16* %12607, i64 1
  %12609 = bitcast i16* %12608 to <16 x i16>*
  %12610 = load <16 x i16>, <16 x i16>* %12609, align 2, !tbaa !396
  %12611 = getelementptr inbounds i16, i16* %12607, i64 17
  %12612 = bitcast i16* %12611 to <16 x i16>*
  %12613 = load <16 x i16>, <16 x i16>* %12612, align 2, !tbaa !396
  %12614 = getelementptr inbounds i16, i16* %12607, i64 2
  %12615 = bitcast i16* %12614 to <16 x i16>*
  %12616 = load <16 x i16>, <16 x i16>* %12615, align 2, !tbaa !396
  %12617 = getelementptr inbounds i16, i16* %12607, i64 18
  %12618 = bitcast i16* %12617 to <16 x i16>*
  %12619 = load <16 x i16>, <16 x i16>* %12618, align 2, !tbaa !396
  %12620 = bitcast i16* %12607 to <16 x i16>*
  %12621 = load <16 x i16>, <16 x i16>* %12620, align 2, !tbaa !396
  %12622 = getelementptr inbounds i16, i16* %12607, i64 16
  %12623 = bitcast i16* %12622 to <16 x i16>*
  %12624 = load <16 x i16>, <16 x i16>* %12623, align 2, !tbaa !396
  %12625 = add <16 x i16> %12616, %12610
  %12626 = add <16 x i16> %12625, %12621
  %12627 = add <16 x i16> %12619, %12613
  %12628 = add <16 x i16> %12627, %12624
  %12629 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12626, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12630 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12628, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12631 = shufflevector <16 x i16> %12629, <16 x i16> %12630, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12632 = lshr <32 x i16> %12631, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12633 = shufflevector <32 x i16> %12632, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12634 = shl nsw i64 %12586, 5
  %12635 = add nsw i64 %12634, %12487
  %12636 = getelementptr inbounds i16, i16* %blur_x841, i64 %12635
  %12637 = bitcast i16* %12636 to <16 x i16>*
  store <16 x i16> %12633, <16 x i16>* %12637, align 2, !tbaa !399
  %12638 = shufflevector <32 x i16> %12632, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12639 = getelementptr inbounds i16, i16* %12636, i64 16
  %12640 = bitcast i16* %12639 to <16 x i16>*
  store <16 x i16> %12638, <16 x i16>* %12640, align 2, !tbaa !399
  br label %"consume blur_x1099"

"consume blur_x1099":                             ; preds = %"for blur_y.s0.x.x.rebased1090.consume blur_x1099_crit_edge", %"produce blur_x1097"
  %.pre-phi3346 = phi i64 [ %.pre3345, %"for blur_y.s0.x.x.rebased1090.consume blur_x1099_crit_edge" ], [ %12634, %"produce blur_x1097" ]
  %12641 = add nsw i64 %12490, %.pre-phi3346
  %12642 = getelementptr inbounds i16, i16* %blur_x841, i64 %12641
  %12643 = bitcast i16* %12642 to <16 x i16>*
  %12644 = load <16 x i16>, <16 x i16>* %12643, align 2, !tbaa !399
  %12645 = getelementptr inbounds i16, i16* %12642, i64 16
  %12646 = bitcast i16* %12645 to <16 x i16>*
  %12647 = load <16 x i16>, <16 x i16>* %12646, align 2, !tbaa !399
  %12648 = add nsw i64 %12493, %.pre-phi3346
  %12649 = getelementptr inbounds i16, i16* %blur_x841, i64 %12648
  %12650 = bitcast i16* %12649 to <16 x i16>*
  %12651 = load <16 x i16>, <16 x i16>* %12650, align 2, !tbaa !399
  %12652 = getelementptr inbounds i16, i16* %12649, i64 16
  %12653 = bitcast i16* %12652 to <16 x i16>*
  %12654 = load <16 x i16>, <16 x i16>* %12653, align 2, !tbaa !399
  %12655 = add nsw i64 %12496, %.pre-phi3346
  %12656 = getelementptr inbounds i16, i16* %blur_x841, i64 %12655
  %12657 = bitcast i16* %12656 to <16 x i16>*
  %12658 = load <16 x i16>, <16 x i16>* %12657, align 2, !tbaa !399
  %12659 = getelementptr inbounds i16, i16* %12656, i64 16
  %12660 = bitcast i16* %12659 to <16 x i16>*
  %12661 = load <16 x i16>, <16 x i16>* %12660, align 2, !tbaa !399
  %12662 = add <16 x i16> %12651, %12644
  %12663 = add <16 x i16> %12662, %12658
  %12664 = add <16 x i16> %12654, %12647
  %12665 = add <16 x i16> %12664, %12661
  %12666 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12663, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12667 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12665, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12668 = shufflevector <16 x i16> %12666, <16 x i16> %12667, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12669 = lshr <32 x i16> %12668, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12670 = shufflevector <32 x i16> %12669, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12671 = add nsw i64 %12500, %.pre-phi3346
  %12672 = getelementptr inbounds i16, i16* %255, i64 %12671
  %12673 = bitcast i16* %12672 to <16 x i16>*
  store <16 x i16> %12670, <16 x i16>* %12673, align 2, !tbaa !401
  %12674 = shufflevector <32 x i16> %12669, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12675 = getelementptr inbounds i16, i16* %12672, i64 16
  %12676 = bitcast i16* %12675 to <16 x i16>*
  store <16 x i16> %12674, <16 x i16>* %12676, align 2, !tbaa !401
  %indvars.iv.next3160 = add nuw nsw i64 %indvars.iv3159, 1
  %.not2492 = icmp eq i64 %indvars.iv.next3160, %370
  br i1 %.not2492, label %"end for blur_y.s0.x.x.rebased1091", label %"for blur_y.s0.x.x.rebased1090"

"for blur_y.s0.x.x.rebased1107":                  ; preds = %"for blur_y.s0.x.x.rebased1107.preheader", %"consume blur_x1117"
  %blur_y.s0.x.x.rebased1109 = phi i32 [ %12755, %"consume blur_x1117" ], [ 0, %"for blur_y.s0.x.x.rebased1107.preheader" ]
  %12677 = add nsw i32 %blur_y.s0.x.x.rebased1109, %t1582776
  %a432 = shl nsw i32 %12677, 5
  %12678 = icmp sgt i32 %a327, %a432
  %b438 = select i1 %12678, i32 %a432, i32 %a327
  %12679 = icmp slt i32 %12677, 1
  %12680 = icmp sgt i32 %194, %a432
  %12681 = or i1 %12679, %12680
  br i1 %12681, label %"produce blur_x1114", label %"consume blur_x1117"

"end for blur_y.s0.x.x.rebased1108":              ; preds = %"consume blur_x1117", %"end for blur_y.s0.x.x.rebased1091"
  br i1 %224, label %"produce blur_x1121", label %after_bb1118

"produce blur_x1114":                             ; preds = %"for blur_y.s0.x.x.rebased1107"
  %12682 = icmp slt i32 %b438, %194
  %blur_x.s0.x.v1.base.s1115 = select i1 %12682, i32 %b438, i32 %194
  %t7411116 = add nsw i32 %blur_x.s0.x.v1.base.s1115, %t17131087
  %12683 = sext i32 %t7411116 to i64
  %12684 = getelementptr inbounds i16, i16* %read_input784, i64 %12683
  %12685 = getelementptr inbounds i16, i16* %12684, i64 1
  %12686 = bitcast i16* %12685 to <16 x i16>*
  %12687 = load <16 x i16>, <16 x i16>* %12686, align 2, !tbaa !396
  %12688 = getelementptr inbounds i16, i16* %12684, i64 17
  %12689 = bitcast i16* %12688 to <16 x i16>*
  %12690 = load <16 x i16>, <16 x i16>* %12689, align 2, !tbaa !396
  %12691 = getelementptr inbounds i16, i16* %12684, i64 2
  %12692 = bitcast i16* %12691 to <16 x i16>*
  %12693 = load <16 x i16>, <16 x i16>* %12692, align 2, !tbaa !396
  %12694 = getelementptr inbounds i16, i16* %12684, i64 18
  %12695 = bitcast i16* %12694 to <16 x i16>*
  %12696 = load <16 x i16>, <16 x i16>* %12695, align 2, !tbaa !396
  %12697 = bitcast i16* %12684 to <16 x i16>*
  %12698 = load <16 x i16>, <16 x i16>* %12697, align 2, !tbaa !396
  %12699 = getelementptr inbounds i16, i16* %12684, i64 16
  %12700 = bitcast i16* %12699 to <16 x i16>*
  %12701 = load <16 x i16>, <16 x i16>* %12700, align 2, !tbaa !396
  %12702 = add <16 x i16> %12693, %12687
  %12703 = add <16 x i16> %12702, %12698
  %12704 = add <16 x i16> %12696, %12690
  %12705 = add <16 x i16> %12704, %12701
  %12706 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12703, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12707 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12705, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12708 = shufflevector <16 x i16> %12706, <16 x i16> %12707, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12709 = lshr <32 x i16> %12708, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12710 = shufflevector <32 x i16> %12709, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12711 = sext i32 %blur_x.s0.x.v1.base.s1115 to i64
  %12712 = add nsw i64 %12711, %12592
  %12713 = getelementptr inbounds i16, i16* %blur_x841, i64 %12712
  %12714 = bitcast i16* %12713 to <16 x i16>*
  store <16 x i16> %12710, <16 x i16>* %12714, align 2, !tbaa !399
  %12715 = shufflevector <32 x i16> %12709, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12716 = getelementptr inbounds i16, i16* %12713, i64 16
  %12717 = bitcast i16* %12716 to <16 x i16>*
  store <16 x i16> %12715, <16 x i16>* %12717, align 2, !tbaa !399
  br label %"consume blur_x1117"

"consume blur_x1117":                             ; preds = %"for blur_y.s0.x.x.rebased1107", %"produce blur_x1114"
  %12718 = sext i32 %b438 to i64
  %12719 = add nsw i64 %12595, %12718
  %12720 = getelementptr inbounds i16, i16* %blur_x841, i64 %12719
  %12721 = bitcast i16* %12720 to <16 x i16>*
  %12722 = load <16 x i16>, <16 x i16>* %12721, align 2, !tbaa !399
  %12723 = getelementptr inbounds i16, i16* %12720, i64 16
  %12724 = bitcast i16* %12723 to <16 x i16>*
  %12725 = load <16 x i16>, <16 x i16>* %12724, align 2, !tbaa !399
  %12726 = add nsw i64 %12598, %12718
  %12727 = getelementptr inbounds i16, i16* %blur_x841, i64 %12726
  %12728 = bitcast i16* %12727 to <16 x i16>*
  %12729 = load <16 x i16>, <16 x i16>* %12728, align 2, !tbaa !399
  %12730 = getelementptr inbounds i16, i16* %12727, i64 16
  %12731 = bitcast i16* %12730 to <16 x i16>*
  %12732 = load <16 x i16>, <16 x i16>* %12731, align 2, !tbaa !399
  %12733 = add nsw i64 %12601, %12718
  %12734 = getelementptr inbounds i16, i16* %blur_x841, i64 %12733
  %12735 = bitcast i16* %12734 to <16 x i16>*
  %12736 = load <16 x i16>, <16 x i16>* %12735, align 2, !tbaa !399
  %12737 = getelementptr inbounds i16, i16* %12734, i64 16
  %12738 = bitcast i16* %12737 to <16 x i16>*
  %12739 = load <16 x i16>, <16 x i16>* %12738, align 2, !tbaa !399
  %12740 = add <16 x i16> %12729, %12722
  %12741 = add <16 x i16> %12740, %12736
  %12742 = add <16 x i16> %12732, %12725
  %12743 = add <16 x i16> %12742, %12739
  %12744 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12741, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12745 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12743, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12746 = shufflevector <16 x i16> %12744, <16 x i16> %12745, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12747 = lshr <32 x i16> %12746, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12748 = shufflevector <32 x i16> %12747, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12749 = add nsw i64 %12605, %12718
  %12750 = getelementptr inbounds i16, i16* %255, i64 %12749
  %12751 = bitcast i16* %12750 to <16 x i16>*
  store <16 x i16> %12748, <16 x i16>* %12751, align 2, !tbaa !401
  %12752 = shufflevector <32 x i16> %12747, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12753 = getelementptr inbounds i16, i16* %12750, i64 16
  %12754 = bitcast i16* %12753 to <16 x i16>*
  store <16 x i16> %12752, <16 x i16>* %12754, align 2, !tbaa !401
  %12755 = add nuw nsw i32 %blur_y.s0.x.x.rebased1109, 1
  %.not2491 = icmp eq i32 %12755, %t1639861
  br i1 %.not2491, label %"end for blur_y.s0.x.x.rebased1108", label %"for blur_y.s0.x.x.rebased1107"

after_bb1118:                                     ; preds = %"end for blur_y.s0.x.x.rebased1108", %"produce blur_x1121"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1133.preheader", label %"end for blur_y.s0.x.x.rebased1134", !prof !386

"for blur_y.s0.x.x.rebased1133.preheader":        ; preds = %after_bb1118
  %12756 = sext i32 %t1666957 to i64
  %12757 = zext i32 %.pre-phi3332 to i64
  %12758 = mul nsw i64 %12757, %298
  %12759 = sub nsw i64 %12758, %285
  %12760 = zext i32 %.pre-phi3338 to i64
  %12761 = mul nsw i64 %12760, %298
  %12762 = sub nsw i64 %12761, %285
  %12763 = zext i32 %.pre-phi3328 to i64
  %12764 = mul nsw i64 %12763, %298
  %12765 = sub nsw i64 %12764, %285
  %12766 = sext i32 %a339 to i64
  %12767 = add nsw i64 %12766, 5
  %12768 = mul nsw i64 %12767, %299
  %12769 = add nsw i64 %12768, %302
  br label %"for blur_y.s0.x.x.rebased1133"

"produce blur_x1121":                             ; preds = %"end for blur_y.s0.x.x.rebased1108"
  %12770 = getelementptr inbounds i16, i16* %read_input784, i64 %311
  %12771 = getelementptr inbounds i16, i16* %12770, i64 -31
  %12772 = bitcast i16* %12771 to <16 x i16>*
  %12773 = load <16 x i16>, <16 x i16>* %12772, align 2, !tbaa !396
  %12774 = getelementptr inbounds i16, i16* %12770, i64 -15
  %12775 = bitcast i16* %12774 to <16 x i16>*
  %12776 = load <16 x i16>, <16 x i16>* %12775, align 2, !tbaa !396
  %12777 = getelementptr inbounds i16, i16* %12770, i64 -30
  %12778 = bitcast i16* %12777 to <16 x i16>*
  %12779 = load <16 x i16>, <16 x i16>* %12778, align 2, !tbaa !396
  %12780 = getelementptr inbounds i16, i16* %12770, i64 -14
  %12781 = bitcast i16* %12780 to <16 x i16>*
  %12782 = load <16 x i16>, <16 x i16>* %12781, align 2, !tbaa !396
  %12783 = getelementptr inbounds i16, i16* %12770, i64 -32
  %12784 = bitcast i16* %12783 to <16 x i16>*
  %12785 = load <16 x i16>, <16 x i16>* %12784, align 2, !tbaa !396
  %12786 = getelementptr inbounds i16, i16* %12770, i64 -16
  %12787 = bitcast i16* %12786 to <16 x i16>*
  %12788 = load <16 x i16>, <16 x i16>* %12787, align 2, !tbaa !396
  %12789 = add <16 x i16> %12779, %12773
  %12790 = add <16 x i16> %12789, %12785
  %12791 = add <16 x i16> %12782, %12776
  %12792 = add <16 x i16> %12791, %12788
  %12793 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12790, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12794 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12792, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12795 = shufflevector <16 x i16> %12793, <16 x i16> %12794, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12796 = lshr <32 x i16> %12795, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12797 = shufflevector <32 x i16> %12796, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12798 = zext i32 %.pre-phi3338 to i64
  %12799 = mul nsw i64 %286, %12798
  %12800 = add nsw i64 %288, %12799
  %12801 = getelementptr inbounds i16, i16* %blur_x841, i64 %12800
  %12802 = getelementptr inbounds i16, i16* %12801, i64 -32
  %12803 = bitcast i16* %12802 to <16 x i16>*
  store <16 x i16> %12797, <16 x i16>* %12803, align 2, !tbaa !399
  %12804 = shufflevector <32 x i16> %12796, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12805 = getelementptr inbounds i16, i16* %12801, i64 -16
  %12806 = bitcast i16* %12805 to <16 x i16>*
  store <16 x i16> %12804, <16 x i16>* %12806, align 2, !tbaa !399
  %12807 = zext i32 %.pre-phi3332 to i64
  %12808 = mul nsw i64 %12807, %298
  %12809 = add nsw i64 %12808, %283
  %12810 = getelementptr inbounds i16, i16* %blur_x841, i64 %12809
  %12811 = getelementptr inbounds i16, i16* %12810, i64 -32
  %12812 = bitcast i16* %12811 to <16 x i16>*
  %12813 = load <16 x i16>, <16 x i16>* %12812, align 2, !tbaa !399
  %12814 = getelementptr inbounds i16, i16* %12810, i64 -16
  %12815 = bitcast i16* %12814 to <16 x i16>*
  %12816 = load <16 x i16>, <16 x i16>* %12815, align 2, !tbaa !399
  %12817 = mul nsw i64 %12798, %298
  %12818 = add nsw i64 %12817, %283
  %12819 = getelementptr inbounds i16, i16* %blur_x841, i64 %12818
  %12820 = getelementptr inbounds i16, i16* %12819, i64 -32
  %12821 = bitcast i16* %12820 to <16 x i16>*
  %12822 = load <16 x i16>, <16 x i16>* %12821, align 2, !tbaa !399
  %12823 = getelementptr inbounds i16, i16* %12819, i64 -16
  %12824 = bitcast i16* %12823 to <16 x i16>*
  %12825 = load <16 x i16>, <16 x i16>* %12824, align 2, !tbaa !399
  %12826 = zext i32 %.pre-phi3328 to i64
  %12827 = mul nsw i64 %12826, %298
  %12828 = add nsw i64 %12827, %283
  %12829 = getelementptr inbounds i16, i16* %blur_x841, i64 %12828
  %12830 = getelementptr inbounds i16, i16* %12829, i64 -32
  %12831 = bitcast i16* %12830 to <16 x i16>*
  %12832 = load <16 x i16>, <16 x i16>* %12831, align 2, !tbaa !399
  %12833 = getelementptr inbounds i16, i16* %12829, i64 -16
  %12834 = bitcast i16* %12833 to <16 x i16>*
  %12835 = load <16 x i16>, <16 x i16>* %12834, align 2, !tbaa !399
  %12836 = add <16 x i16> %12822, %12813
  %12837 = add <16 x i16> %12836, %12832
  %12838 = add <16 x i16> %12825, %12816
  %12839 = add <16 x i16> %12838, %12835
  %12840 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12837, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12841 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12839, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12842 = shufflevector <16 x i16> %12840, <16 x i16> %12841, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12843 = lshr <32 x i16> %12842, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12844 = shufflevector <32 x i16> %12843, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12845 = sext i32 %a339 to i64
  %12846 = add nsw i64 %12845, 5
  %12847 = mul nsw i64 %12846, %299
  %12848 = add nsw i64 %301, %12847
  %12849 = getelementptr inbounds i16, i16* %255, i64 %12848
  %12850 = getelementptr inbounds i16, i16* %12849, i64 -32
  %12851 = bitcast i16* %12850 to <16 x i16>*
  store <16 x i16> %12844, <16 x i16>* %12851, align 2, !tbaa !401
  %12852 = shufflevector <32 x i16> %12843, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12853 = getelementptr inbounds i16, i16* %12849, i64 -16
  %12854 = bitcast i16* %12853 to <16 x i16>*
  store <16 x i16> %12852, <16 x i16>* %12854, align 2, !tbaa !401
  br label %after_bb1118

"for blur_y.s0.x.x.rebased1133":                  ; preds = %"for blur_y.s0.x.x.rebased1133.preheader", %"consume blur_x1142"
  %indvars.iv3162 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1133.preheader" ], [ %indvars.iv.next3163, %"consume blur_x1142" ]
  %12855 = add nsw i64 %indvars.iv3162, %290
  %12856 = icmp slt i64 %12855, 1
  %12857 = trunc i64 %12855 to i32
  %12858 = shl nsw i32 %12857, 5
  %12859 = icmp sgt i32 %194, %12858
  %12860 = or i1 %12856, %12859
  br i1 %12860, label %"produce blur_x1140", label %"for blur_y.s0.x.x.rebased1133.consume blur_x1142_crit_edge"

"for blur_y.s0.x.x.rebased1133.consume blur_x1142_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1133"
  %.pre3347 = shl nsw i64 %12855, 5
  br label %"consume blur_x1142"

"end for blur_y.s0.x.x.rebased1134":              ; preds = %"consume blur_x1142", %after_bb1118
  br i1 %291, label %"for blur_y.s0.x.x.rebased1150.preheader", label %"end for blur_y.s0.x.x.rebased1151", !prof !386

"for blur_y.s0.x.x.rebased1150.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1134"
  %12861 = sext i32 %t1666957 to i64
  %12862 = zext i32 %.pre-phi3332 to i64
  %12863 = mul nsw i64 %12862, %298
  %12864 = sub nsw i64 %12863, %285
  %12865 = zext i32 %.pre-phi3338 to i64
  %12866 = mul nsw i64 %12865, %298
  %12867 = sub nsw i64 %12866, %285
  %12868 = zext i32 %.pre-phi3328 to i64
  %12869 = mul nsw i64 %12868, %298
  %12870 = sub nsw i64 %12869, %285
  %12871 = sext i32 %a339 to i64
  %12872 = add nsw i64 %12871, 5
  %12873 = mul nsw i64 %12872, %299
  %12874 = add nsw i64 %12873, %302
  br label %"for blur_y.s0.x.x.rebased1150"

"produce blur_x1140":                             ; preds = %"for blur_y.s0.x.x.rebased1133"
  %t7521141 = add nsw i32 %12858, %t17291130
  %12875 = sext i32 %t7521141 to i64
  %12876 = getelementptr inbounds i16, i16* %read_input784, i64 %12875
  %12877 = getelementptr inbounds i16, i16* %12876, i64 1
  %12878 = bitcast i16* %12877 to <16 x i16>*
  %12879 = load <16 x i16>, <16 x i16>* %12878, align 2, !tbaa !396
  %12880 = getelementptr inbounds i16, i16* %12876, i64 17
  %12881 = bitcast i16* %12880 to <16 x i16>*
  %12882 = load <16 x i16>, <16 x i16>* %12881, align 2, !tbaa !396
  %12883 = getelementptr inbounds i16, i16* %12876, i64 2
  %12884 = bitcast i16* %12883 to <16 x i16>*
  %12885 = load <16 x i16>, <16 x i16>* %12884, align 2, !tbaa !396
  %12886 = getelementptr inbounds i16, i16* %12876, i64 18
  %12887 = bitcast i16* %12886 to <16 x i16>*
  %12888 = load <16 x i16>, <16 x i16>* %12887, align 2, !tbaa !396
  %12889 = bitcast i16* %12876 to <16 x i16>*
  %12890 = load <16 x i16>, <16 x i16>* %12889, align 2, !tbaa !396
  %12891 = getelementptr inbounds i16, i16* %12876, i64 16
  %12892 = bitcast i16* %12891 to <16 x i16>*
  %12893 = load <16 x i16>, <16 x i16>* %12892, align 2, !tbaa !396
  %12894 = add <16 x i16> %12885, %12879
  %12895 = add <16 x i16> %12894, %12890
  %12896 = add <16 x i16> %12888, %12882
  %12897 = add <16 x i16> %12896, %12893
  %12898 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12895, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12899 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12897, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12900 = shufflevector <16 x i16> %12898, <16 x i16> %12899, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12901 = lshr <32 x i16> %12900, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12902 = shufflevector <32 x i16> %12901, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12903 = shl nsw i64 %12855, 5
  %12904 = add nsw i64 %12903, %12756
  %12905 = getelementptr inbounds i16, i16* %blur_x841, i64 %12904
  %12906 = bitcast i16* %12905 to <16 x i16>*
  store <16 x i16> %12902, <16 x i16>* %12906, align 2, !tbaa !399
  %12907 = shufflevector <32 x i16> %12901, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12908 = getelementptr inbounds i16, i16* %12905, i64 16
  %12909 = bitcast i16* %12908 to <16 x i16>*
  store <16 x i16> %12907, <16 x i16>* %12909, align 2, !tbaa !399
  br label %"consume blur_x1142"

"consume blur_x1142":                             ; preds = %"for blur_y.s0.x.x.rebased1133.consume blur_x1142_crit_edge", %"produce blur_x1140"
  %.pre-phi3348 = phi i64 [ %.pre3347, %"for blur_y.s0.x.x.rebased1133.consume blur_x1142_crit_edge" ], [ %12903, %"produce blur_x1140" ]
  %12910 = add nsw i64 %12759, %.pre-phi3348
  %12911 = getelementptr inbounds i16, i16* %blur_x841, i64 %12910
  %12912 = bitcast i16* %12911 to <16 x i16>*
  %12913 = load <16 x i16>, <16 x i16>* %12912, align 2, !tbaa !399
  %12914 = getelementptr inbounds i16, i16* %12911, i64 16
  %12915 = bitcast i16* %12914 to <16 x i16>*
  %12916 = load <16 x i16>, <16 x i16>* %12915, align 2, !tbaa !399
  %12917 = add nsw i64 %12762, %.pre-phi3348
  %12918 = getelementptr inbounds i16, i16* %blur_x841, i64 %12917
  %12919 = bitcast i16* %12918 to <16 x i16>*
  %12920 = load <16 x i16>, <16 x i16>* %12919, align 2, !tbaa !399
  %12921 = getelementptr inbounds i16, i16* %12918, i64 16
  %12922 = bitcast i16* %12921 to <16 x i16>*
  %12923 = load <16 x i16>, <16 x i16>* %12922, align 2, !tbaa !399
  %12924 = add nsw i64 %12765, %.pre-phi3348
  %12925 = getelementptr inbounds i16, i16* %blur_x841, i64 %12924
  %12926 = bitcast i16* %12925 to <16 x i16>*
  %12927 = load <16 x i16>, <16 x i16>* %12926, align 2, !tbaa !399
  %12928 = getelementptr inbounds i16, i16* %12925, i64 16
  %12929 = bitcast i16* %12928 to <16 x i16>*
  %12930 = load <16 x i16>, <16 x i16>* %12929, align 2, !tbaa !399
  %12931 = add <16 x i16> %12920, %12913
  %12932 = add <16 x i16> %12931, %12927
  %12933 = add <16 x i16> %12923, %12916
  %12934 = add <16 x i16> %12933, %12930
  %12935 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12932, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12936 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12934, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12937 = shufflevector <16 x i16> %12935, <16 x i16> %12936, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12938 = lshr <32 x i16> %12937, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12939 = shufflevector <32 x i16> %12938, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12940 = add nsw i64 %12769, %.pre-phi3348
  %12941 = getelementptr inbounds i16, i16* %255, i64 %12940
  %12942 = bitcast i16* %12941 to <16 x i16>*
  store <16 x i16> %12939, <16 x i16>* %12942, align 2, !tbaa !401
  %12943 = shufflevector <32 x i16> %12938, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12944 = getelementptr inbounds i16, i16* %12941, i64 16
  %12945 = bitcast i16* %12944 to <16 x i16>*
  store <16 x i16> %12943, <16 x i16>* %12945, align 2, !tbaa !401
  %indvars.iv.next3163 = add nuw nsw i64 %indvars.iv3162, 1
  %.not2490 = icmp eq i64 %indvars.iv.next3163, %370
  br i1 %.not2490, label %"end for blur_y.s0.x.x.rebased1134", label %"for blur_y.s0.x.x.rebased1133"

"for blur_y.s0.x.x.rebased1150":                  ; preds = %"for blur_y.s0.x.x.rebased1150.preheader", %"consume blur_x1160"
  %blur_y.s0.x.x.rebased1152 = phi i32 [ %13024, %"consume blur_x1160" ], [ 0, %"for blur_y.s0.x.x.rebased1150.preheader" ]
  %12946 = add nsw i32 %blur_y.s0.x.x.rebased1152, %t1582776
  %a439 = shl nsw i32 %12946, 5
  %12947 = icmp sgt i32 %a327, %a439
  %b445 = select i1 %12947, i32 %a439, i32 %a327
  %12948 = icmp slt i32 %12946, 1
  %12949 = icmp sgt i32 %194, %a439
  %12950 = or i1 %12948, %12949
  br i1 %12950, label %"produce blur_x1157", label %"consume blur_x1160"

"end for blur_y.s0.x.x.rebased1151":              ; preds = %"consume blur_x1160", %"end for blur_y.s0.x.x.rebased1134"
  br i1 %224, label %"produce blur_x1164", label %after_bb1161

"produce blur_x1157":                             ; preds = %"for blur_y.s0.x.x.rebased1150"
  %12951 = icmp slt i32 %b445, %194
  %blur_x.s0.x.v1.base.s1158 = select i1 %12951, i32 %b445, i32 %194
  %t7571159 = add nsw i32 %blur_x.s0.x.v1.base.s1158, %t17291130
  %12952 = sext i32 %t7571159 to i64
  %12953 = getelementptr inbounds i16, i16* %read_input784, i64 %12952
  %12954 = getelementptr inbounds i16, i16* %12953, i64 1
  %12955 = bitcast i16* %12954 to <16 x i16>*
  %12956 = load <16 x i16>, <16 x i16>* %12955, align 2, !tbaa !396
  %12957 = getelementptr inbounds i16, i16* %12953, i64 17
  %12958 = bitcast i16* %12957 to <16 x i16>*
  %12959 = load <16 x i16>, <16 x i16>* %12958, align 2, !tbaa !396
  %12960 = getelementptr inbounds i16, i16* %12953, i64 2
  %12961 = bitcast i16* %12960 to <16 x i16>*
  %12962 = load <16 x i16>, <16 x i16>* %12961, align 2, !tbaa !396
  %12963 = getelementptr inbounds i16, i16* %12953, i64 18
  %12964 = bitcast i16* %12963 to <16 x i16>*
  %12965 = load <16 x i16>, <16 x i16>* %12964, align 2, !tbaa !396
  %12966 = bitcast i16* %12953 to <16 x i16>*
  %12967 = load <16 x i16>, <16 x i16>* %12966, align 2, !tbaa !396
  %12968 = getelementptr inbounds i16, i16* %12953, i64 16
  %12969 = bitcast i16* %12968 to <16 x i16>*
  %12970 = load <16 x i16>, <16 x i16>* %12969, align 2, !tbaa !396
  %12971 = add <16 x i16> %12962, %12956
  %12972 = add <16 x i16> %12971, %12967
  %12973 = add <16 x i16> %12965, %12959
  %12974 = add <16 x i16> %12973, %12970
  %12975 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12972, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12976 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %12974, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %12977 = shufflevector <16 x i16> %12975, <16 x i16> %12976, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12978 = lshr <32 x i16> %12977, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %12979 = shufflevector <32 x i16> %12978, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %12980 = sext i32 %blur_x.s0.x.v1.base.s1158 to i64
  %12981 = add nsw i64 %12980, %12861
  %12982 = getelementptr inbounds i16, i16* %blur_x841, i64 %12981
  %12983 = bitcast i16* %12982 to <16 x i16>*
  store <16 x i16> %12979, <16 x i16>* %12983, align 2, !tbaa !399
  %12984 = shufflevector <32 x i16> %12978, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %12985 = getelementptr inbounds i16, i16* %12982, i64 16
  %12986 = bitcast i16* %12985 to <16 x i16>*
  store <16 x i16> %12984, <16 x i16>* %12986, align 2, !tbaa !399
  br label %"consume blur_x1160"

"consume blur_x1160":                             ; preds = %"for blur_y.s0.x.x.rebased1150", %"produce blur_x1157"
  %12987 = sext i32 %b445 to i64
  %12988 = add nsw i64 %12864, %12987
  %12989 = getelementptr inbounds i16, i16* %blur_x841, i64 %12988
  %12990 = bitcast i16* %12989 to <16 x i16>*
  %12991 = load <16 x i16>, <16 x i16>* %12990, align 2, !tbaa !399
  %12992 = getelementptr inbounds i16, i16* %12989, i64 16
  %12993 = bitcast i16* %12992 to <16 x i16>*
  %12994 = load <16 x i16>, <16 x i16>* %12993, align 2, !tbaa !399
  %12995 = add nsw i64 %12867, %12987
  %12996 = getelementptr inbounds i16, i16* %blur_x841, i64 %12995
  %12997 = bitcast i16* %12996 to <16 x i16>*
  %12998 = load <16 x i16>, <16 x i16>* %12997, align 2, !tbaa !399
  %12999 = getelementptr inbounds i16, i16* %12996, i64 16
  %13000 = bitcast i16* %12999 to <16 x i16>*
  %13001 = load <16 x i16>, <16 x i16>* %13000, align 2, !tbaa !399
  %13002 = add nsw i64 %12870, %12987
  %13003 = getelementptr inbounds i16, i16* %blur_x841, i64 %13002
  %13004 = bitcast i16* %13003 to <16 x i16>*
  %13005 = load <16 x i16>, <16 x i16>* %13004, align 2, !tbaa !399
  %13006 = getelementptr inbounds i16, i16* %13003, i64 16
  %13007 = bitcast i16* %13006 to <16 x i16>*
  %13008 = load <16 x i16>, <16 x i16>* %13007, align 2, !tbaa !399
  %13009 = add <16 x i16> %12998, %12991
  %13010 = add <16 x i16> %13009, %13005
  %13011 = add <16 x i16> %13001, %12994
  %13012 = add <16 x i16> %13011, %13008
  %13013 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13010, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13014 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13012, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13015 = shufflevector <16 x i16> %13013, <16 x i16> %13014, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13016 = lshr <32 x i16> %13015, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13017 = shufflevector <32 x i16> %13016, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13018 = add nsw i64 %12874, %12987
  %13019 = getelementptr inbounds i16, i16* %255, i64 %13018
  %13020 = bitcast i16* %13019 to <16 x i16>*
  store <16 x i16> %13017, <16 x i16>* %13020, align 2, !tbaa !401
  %13021 = shufflevector <32 x i16> %13016, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13022 = getelementptr inbounds i16, i16* %13019, i64 16
  %13023 = bitcast i16* %13022 to <16 x i16>*
  store <16 x i16> %13021, <16 x i16>* %13023, align 2, !tbaa !401
  %13024 = add nuw nsw i32 %blur_y.s0.x.x.rebased1152, 1
  %.not2489 = icmp eq i32 %13024, %t1639861
  br i1 %.not2489, label %"end for blur_y.s0.x.x.rebased1151", label %"for blur_y.s0.x.x.rebased1150"

after_bb1161:                                     ; preds = %"end for blur_y.s0.x.x.rebased1151", %"produce blur_x1164"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1176.preheader", label %"end for blur_y.s0.x.x.rebased1177", !prof !386

"for blur_y.s0.x.x.rebased1176.preheader":        ; preds = %after_bb1161
  %13025 = sext i32 %t1638848 to i64
  %13026 = zext i32 %.pre-phi3338 to i64
  %13027 = mul nsw i64 %13026, %298
  %13028 = sub nsw i64 %13027, %285
  %13029 = zext i32 %.pre-phi3324 to i64
  %13030 = mul nsw i64 %13029, %298
  %13031 = sub nsw i64 %13030, %285
  %13032 = zext i32 %.pre-phi3332 to i64
  %13033 = mul nsw i64 %13032, %298
  %13034 = sub nsw i64 %13033, %285
  %13035 = sext i32 %a339 to i64
  %13036 = add nsw i64 %13035, 6
  %13037 = mul nsw i64 %13036, %299
  %13038 = add nsw i64 %13037, %302
  br label %"for blur_y.s0.x.x.rebased1176"

"produce blur_x1164":                             ; preds = %"end for blur_y.s0.x.x.rebased1151"
  %13039 = getelementptr inbounds i16, i16* %read_input784, i64 %313
  %13040 = getelementptr inbounds i16, i16* %13039, i64 -31
  %13041 = bitcast i16* %13040 to <16 x i16>*
  %13042 = load <16 x i16>, <16 x i16>* %13041, align 2, !tbaa !396
  %13043 = getelementptr inbounds i16, i16* %13039, i64 -15
  %13044 = bitcast i16* %13043 to <16 x i16>*
  %13045 = load <16 x i16>, <16 x i16>* %13044, align 2, !tbaa !396
  %13046 = getelementptr inbounds i16, i16* %13039, i64 -30
  %13047 = bitcast i16* %13046 to <16 x i16>*
  %13048 = load <16 x i16>, <16 x i16>* %13047, align 2, !tbaa !396
  %13049 = getelementptr inbounds i16, i16* %13039, i64 -14
  %13050 = bitcast i16* %13049 to <16 x i16>*
  %13051 = load <16 x i16>, <16 x i16>* %13050, align 2, !tbaa !396
  %13052 = getelementptr inbounds i16, i16* %13039, i64 -32
  %13053 = bitcast i16* %13052 to <16 x i16>*
  %13054 = load <16 x i16>, <16 x i16>* %13053, align 2, !tbaa !396
  %13055 = getelementptr inbounds i16, i16* %13039, i64 -16
  %13056 = bitcast i16* %13055 to <16 x i16>*
  %13057 = load <16 x i16>, <16 x i16>* %13056, align 2, !tbaa !396
  %13058 = add <16 x i16> %13048, %13042
  %13059 = add <16 x i16> %13058, %13054
  %13060 = add <16 x i16> %13051, %13045
  %13061 = add <16 x i16> %13060, %13057
  %13062 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13059, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13063 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13061, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13064 = shufflevector <16 x i16> %13062, <16 x i16> %13063, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13065 = lshr <32 x i16> %13064, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13066 = shufflevector <32 x i16> %13065, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13067 = zext i32 %.pre-phi3324 to i64
  %13068 = mul nsw i64 %286, %13067
  %13069 = add nsw i64 %288, %13068
  %13070 = getelementptr inbounds i16, i16* %blur_x841, i64 %13069
  %13071 = getelementptr inbounds i16, i16* %13070, i64 -32
  %13072 = bitcast i16* %13071 to <16 x i16>*
  store <16 x i16> %13066, <16 x i16>* %13072, align 2, !tbaa !399
  %13073 = shufflevector <32 x i16> %13065, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13074 = getelementptr inbounds i16, i16* %13070, i64 -16
  %13075 = bitcast i16* %13074 to <16 x i16>*
  store <16 x i16> %13073, <16 x i16>* %13075, align 2, !tbaa !399
  %13076 = zext i32 %.pre-phi3338 to i64
  %13077 = mul nsw i64 %13076, %298
  %13078 = add nsw i64 %13077, %283
  %13079 = getelementptr inbounds i16, i16* %blur_x841, i64 %13078
  %13080 = getelementptr inbounds i16, i16* %13079, i64 -32
  %13081 = bitcast i16* %13080 to <16 x i16>*
  %13082 = load <16 x i16>, <16 x i16>* %13081, align 2, !tbaa !399
  %13083 = getelementptr inbounds i16, i16* %13079, i64 -16
  %13084 = bitcast i16* %13083 to <16 x i16>*
  %13085 = load <16 x i16>, <16 x i16>* %13084, align 2, !tbaa !399
  %13086 = mul nsw i64 %13067, %298
  %13087 = add nsw i64 %13086, %283
  %13088 = getelementptr inbounds i16, i16* %blur_x841, i64 %13087
  %13089 = getelementptr inbounds i16, i16* %13088, i64 -32
  %13090 = bitcast i16* %13089 to <16 x i16>*
  %13091 = load <16 x i16>, <16 x i16>* %13090, align 2, !tbaa !399
  %13092 = getelementptr inbounds i16, i16* %13088, i64 -16
  %13093 = bitcast i16* %13092 to <16 x i16>*
  %13094 = load <16 x i16>, <16 x i16>* %13093, align 2, !tbaa !399
  %13095 = zext i32 %.pre-phi3332 to i64
  %13096 = mul nsw i64 %13095, %298
  %13097 = add nsw i64 %13096, %283
  %13098 = getelementptr inbounds i16, i16* %blur_x841, i64 %13097
  %13099 = getelementptr inbounds i16, i16* %13098, i64 -32
  %13100 = bitcast i16* %13099 to <16 x i16>*
  %13101 = load <16 x i16>, <16 x i16>* %13100, align 2, !tbaa !399
  %13102 = getelementptr inbounds i16, i16* %13098, i64 -16
  %13103 = bitcast i16* %13102 to <16 x i16>*
  %13104 = load <16 x i16>, <16 x i16>* %13103, align 2, !tbaa !399
  %13105 = add <16 x i16> %13091, %13082
  %13106 = add <16 x i16> %13105, %13101
  %13107 = add <16 x i16> %13094, %13085
  %13108 = add <16 x i16> %13107, %13104
  %13109 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13106, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13110 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13108, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13111 = shufflevector <16 x i16> %13109, <16 x i16> %13110, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13112 = lshr <32 x i16> %13111, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13113 = shufflevector <32 x i16> %13112, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13114 = sext i32 %a339 to i64
  %13115 = add nsw i64 %13114, 6
  %13116 = mul nsw i64 %13115, %299
  %13117 = add nsw i64 %301, %13116
  %13118 = getelementptr inbounds i16, i16* %255, i64 %13117
  %13119 = getelementptr inbounds i16, i16* %13118, i64 -32
  %13120 = bitcast i16* %13119 to <16 x i16>*
  store <16 x i16> %13113, <16 x i16>* %13120, align 2, !tbaa !401
  %13121 = shufflevector <32 x i16> %13112, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13122 = getelementptr inbounds i16, i16* %13118, i64 -16
  %13123 = bitcast i16* %13122 to <16 x i16>*
  store <16 x i16> %13121, <16 x i16>* %13123, align 2, !tbaa !401
  br label %after_bb1161

"for blur_y.s0.x.x.rebased1176":                  ; preds = %"for blur_y.s0.x.x.rebased1176.preheader", %"consume blur_x1185"
  %indvars.iv3165 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1176.preheader" ], [ %indvars.iv.next3166, %"consume blur_x1185" ]
  %13124 = add nsw i64 %indvars.iv3165, %290
  %13125 = icmp slt i64 %13124, 1
  %13126 = trunc i64 %13124 to i32
  %13127 = shl nsw i32 %13126, 5
  %13128 = icmp sgt i32 %194, %13127
  %13129 = or i1 %13125, %13128
  br i1 %13129, label %"produce blur_x1183", label %"for blur_y.s0.x.x.rebased1176.consume blur_x1185_crit_edge"

"for blur_y.s0.x.x.rebased1176.consume blur_x1185_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1176"
  %.pre3349 = shl nsw i64 %13124, 5
  br label %"consume blur_x1185"

"end for blur_y.s0.x.x.rebased1177":              ; preds = %"consume blur_x1185", %after_bb1161
  br i1 %291, label %"for blur_y.s0.x.x.rebased1193.preheader", label %"end for blur_y.s0.x.x.rebased1194", !prof !386

"for blur_y.s0.x.x.rebased1193.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1177"
  %13130 = sext i32 %t1638848 to i64
  %13131 = zext i32 %.pre-phi3338 to i64
  %13132 = mul nsw i64 %13131, %298
  %13133 = sub nsw i64 %13132, %285
  %13134 = zext i32 %.pre-phi3324 to i64
  %13135 = mul nsw i64 %13134, %298
  %13136 = sub nsw i64 %13135, %285
  %13137 = zext i32 %.pre-phi3332 to i64
  %13138 = mul nsw i64 %13137, %298
  %13139 = sub nsw i64 %13138, %285
  %13140 = sext i32 %a339 to i64
  %13141 = add nsw i64 %13140, 6
  %13142 = mul nsw i64 %13141, %299
  %13143 = add nsw i64 %13142, %302
  br label %"for blur_y.s0.x.x.rebased1193"

"produce blur_x1183":                             ; preds = %"for blur_y.s0.x.x.rebased1176"
  %t7681184 = add nsw i32 %13127, %t17451173
  %13144 = sext i32 %t7681184 to i64
  %13145 = getelementptr inbounds i16, i16* %read_input784, i64 %13144
  %13146 = getelementptr inbounds i16, i16* %13145, i64 1
  %13147 = bitcast i16* %13146 to <16 x i16>*
  %13148 = load <16 x i16>, <16 x i16>* %13147, align 2, !tbaa !396
  %13149 = getelementptr inbounds i16, i16* %13145, i64 17
  %13150 = bitcast i16* %13149 to <16 x i16>*
  %13151 = load <16 x i16>, <16 x i16>* %13150, align 2, !tbaa !396
  %13152 = getelementptr inbounds i16, i16* %13145, i64 2
  %13153 = bitcast i16* %13152 to <16 x i16>*
  %13154 = load <16 x i16>, <16 x i16>* %13153, align 2, !tbaa !396
  %13155 = getelementptr inbounds i16, i16* %13145, i64 18
  %13156 = bitcast i16* %13155 to <16 x i16>*
  %13157 = load <16 x i16>, <16 x i16>* %13156, align 2, !tbaa !396
  %13158 = bitcast i16* %13145 to <16 x i16>*
  %13159 = load <16 x i16>, <16 x i16>* %13158, align 2, !tbaa !396
  %13160 = getelementptr inbounds i16, i16* %13145, i64 16
  %13161 = bitcast i16* %13160 to <16 x i16>*
  %13162 = load <16 x i16>, <16 x i16>* %13161, align 2, !tbaa !396
  %13163 = add <16 x i16> %13154, %13148
  %13164 = add <16 x i16> %13163, %13159
  %13165 = add <16 x i16> %13157, %13151
  %13166 = add <16 x i16> %13165, %13162
  %13167 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13164, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13168 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13166, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13169 = shufflevector <16 x i16> %13167, <16 x i16> %13168, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13170 = lshr <32 x i16> %13169, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13171 = shufflevector <32 x i16> %13170, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13172 = shl nsw i64 %13124, 5
  %13173 = add nsw i64 %13172, %13025
  %13174 = getelementptr inbounds i16, i16* %blur_x841, i64 %13173
  %13175 = bitcast i16* %13174 to <16 x i16>*
  store <16 x i16> %13171, <16 x i16>* %13175, align 2, !tbaa !399
  %13176 = shufflevector <32 x i16> %13170, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13177 = getelementptr inbounds i16, i16* %13174, i64 16
  %13178 = bitcast i16* %13177 to <16 x i16>*
  store <16 x i16> %13176, <16 x i16>* %13178, align 2, !tbaa !399
  br label %"consume blur_x1185"

"consume blur_x1185":                             ; preds = %"for blur_y.s0.x.x.rebased1176.consume blur_x1185_crit_edge", %"produce blur_x1183"
  %.pre-phi3350 = phi i64 [ %.pre3349, %"for blur_y.s0.x.x.rebased1176.consume blur_x1185_crit_edge" ], [ %13172, %"produce blur_x1183" ]
  %13179 = add nsw i64 %13028, %.pre-phi3350
  %13180 = getelementptr inbounds i16, i16* %blur_x841, i64 %13179
  %13181 = bitcast i16* %13180 to <16 x i16>*
  %13182 = load <16 x i16>, <16 x i16>* %13181, align 2, !tbaa !399
  %13183 = getelementptr inbounds i16, i16* %13180, i64 16
  %13184 = bitcast i16* %13183 to <16 x i16>*
  %13185 = load <16 x i16>, <16 x i16>* %13184, align 2, !tbaa !399
  %13186 = add nsw i64 %13031, %.pre-phi3350
  %13187 = getelementptr inbounds i16, i16* %blur_x841, i64 %13186
  %13188 = bitcast i16* %13187 to <16 x i16>*
  %13189 = load <16 x i16>, <16 x i16>* %13188, align 2, !tbaa !399
  %13190 = getelementptr inbounds i16, i16* %13187, i64 16
  %13191 = bitcast i16* %13190 to <16 x i16>*
  %13192 = load <16 x i16>, <16 x i16>* %13191, align 2, !tbaa !399
  %13193 = add nsw i64 %13034, %.pre-phi3350
  %13194 = getelementptr inbounds i16, i16* %blur_x841, i64 %13193
  %13195 = bitcast i16* %13194 to <16 x i16>*
  %13196 = load <16 x i16>, <16 x i16>* %13195, align 2, !tbaa !399
  %13197 = getelementptr inbounds i16, i16* %13194, i64 16
  %13198 = bitcast i16* %13197 to <16 x i16>*
  %13199 = load <16 x i16>, <16 x i16>* %13198, align 2, !tbaa !399
  %13200 = add <16 x i16> %13189, %13182
  %13201 = add <16 x i16> %13200, %13196
  %13202 = add <16 x i16> %13192, %13185
  %13203 = add <16 x i16> %13202, %13199
  %13204 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13201, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13205 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13203, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13206 = shufflevector <16 x i16> %13204, <16 x i16> %13205, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13207 = lshr <32 x i16> %13206, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13208 = shufflevector <32 x i16> %13207, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13209 = add nsw i64 %13038, %.pre-phi3350
  %13210 = getelementptr inbounds i16, i16* %255, i64 %13209
  %13211 = bitcast i16* %13210 to <16 x i16>*
  store <16 x i16> %13208, <16 x i16>* %13211, align 2, !tbaa !401
  %13212 = shufflevector <32 x i16> %13207, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13213 = getelementptr inbounds i16, i16* %13210, i64 16
  %13214 = bitcast i16* %13213 to <16 x i16>*
  store <16 x i16> %13212, <16 x i16>* %13214, align 2, !tbaa !401
  %indvars.iv.next3166 = add nuw nsw i64 %indvars.iv3165, 1
  %.not2488 = icmp eq i64 %indvars.iv.next3166, %370
  br i1 %.not2488, label %"end for blur_y.s0.x.x.rebased1177", label %"for blur_y.s0.x.x.rebased1176"

"for blur_y.s0.x.x.rebased1193":                  ; preds = %"for blur_y.s0.x.x.rebased1193.preheader", %"consume blur_x1203"
  %blur_y.s0.x.x.rebased1195 = phi i32 [ %13293, %"consume blur_x1203" ], [ 0, %"for blur_y.s0.x.x.rebased1193.preheader" ]
  %13215 = add nsw i32 %blur_y.s0.x.x.rebased1195, %t1582776
  %a446 = shl nsw i32 %13215, 5
  %13216 = icmp sgt i32 %a327, %a446
  %b452 = select i1 %13216, i32 %a446, i32 %a327
  %13217 = icmp slt i32 %13215, 1
  %13218 = icmp sgt i32 %194, %a446
  %13219 = or i1 %13217, %13218
  br i1 %13219, label %"produce blur_x1200", label %"consume blur_x1203"

"end for blur_y.s0.x.x.rebased1194":              ; preds = %"consume blur_x1203", %"end for blur_y.s0.x.x.rebased1177"
  br i1 %224, label %"produce blur_x1207", label %after_bb1204

"produce blur_x1200":                             ; preds = %"for blur_y.s0.x.x.rebased1193"
  %13220 = icmp slt i32 %b452, %194
  %blur_x.s0.x.v1.base.s1201 = select i1 %13220, i32 %b452, i32 %194
  %t7731202 = add nsw i32 %blur_x.s0.x.v1.base.s1201, %t17451173
  %13221 = sext i32 %t7731202 to i64
  %13222 = getelementptr inbounds i16, i16* %read_input784, i64 %13221
  %13223 = getelementptr inbounds i16, i16* %13222, i64 1
  %13224 = bitcast i16* %13223 to <16 x i16>*
  %13225 = load <16 x i16>, <16 x i16>* %13224, align 2, !tbaa !396
  %13226 = getelementptr inbounds i16, i16* %13222, i64 17
  %13227 = bitcast i16* %13226 to <16 x i16>*
  %13228 = load <16 x i16>, <16 x i16>* %13227, align 2, !tbaa !396
  %13229 = getelementptr inbounds i16, i16* %13222, i64 2
  %13230 = bitcast i16* %13229 to <16 x i16>*
  %13231 = load <16 x i16>, <16 x i16>* %13230, align 2, !tbaa !396
  %13232 = getelementptr inbounds i16, i16* %13222, i64 18
  %13233 = bitcast i16* %13232 to <16 x i16>*
  %13234 = load <16 x i16>, <16 x i16>* %13233, align 2, !tbaa !396
  %13235 = bitcast i16* %13222 to <16 x i16>*
  %13236 = load <16 x i16>, <16 x i16>* %13235, align 2, !tbaa !396
  %13237 = getelementptr inbounds i16, i16* %13222, i64 16
  %13238 = bitcast i16* %13237 to <16 x i16>*
  %13239 = load <16 x i16>, <16 x i16>* %13238, align 2, !tbaa !396
  %13240 = add <16 x i16> %13231, %13225
  %13241 = add <16 x i16> %13240, %13236
  %13242 = add <16 x i16> %13234, %13228
  %13243 = add <16 x i16> %13242, %13239
  %13244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13241, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13245 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13243, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13246 = shufflevector <16 x i16> %13244, <16 x i16> %13245, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13247 = lshr <32 x i16> %13246, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13248 = shufflevector <32 x i16> %13247, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13249 = sext i32 %blur_x.s0.x.v1.base.s1201 to i64
  %13250 = add nsw i64 %13249, %13130
  %13251 = getelementptr inbounds i16, i16* %blur_x841, i64 %13250
  %13252 = bitcast i16* %13251 to <16 x i16>*
  store <16 x i16> %13248, <16 x i16>* %13252, align 2, !tbaa !399
  %13253 = shufflevector <32 x i16> %13247, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13254 = getelementptr inbounds i16, i16* %13251, i64 16
  %13255 = bitcast i16* %13254 to <16 x i16>*
  store <16 x i16> %13253, <16 x i16>* %13255, align 2, !tbaa !399
  br label %"consume blur_x1203"

"consume blur_x1203":                             ; preds = %"for blur_y.s0.x.x.rebased1193", %"produce blur_x1200"
  %13256 = sext i32 %b452 to i64
  %13257 = add nsw i64 %13133, %13256
  %13258 = getelementptr inbounds i16, i16* %blur_x841, i64 %13257
  %13259 = bitcast i16* %13258 to <16 x i16>*
  %13260 = load <16 x i16>, <16 x i16>* %13259, align 2, !tbaa !399
  %13261 = getelementptr inbounds i16, i16* %13258, i64 16
  %13262 = bitcast i16* %13261 to <16 x i16>*
  %13263 = load <16 x i16>, <16 x i16>* %13262, align 2, !tbaa !399
  %13264 = add nsw i64 %13136, %13256
  %13265 = getelementptr inbounds i16, i16* %blur_x841, i64 %13264
  %13266 = bitcast i16* %13265 to <16 x i16>*
  %13267 = load <16 x i16>, <16 x i16>* %13266, align 2, !tbaa !399
  %13268 = getelementptr inbounds i16, i16* %13265, i64 16
  %13269 = bitcast i16* %13268 to <16 x i16>*
  %13270 = load <16 x i16>, <16 x i16>* %13269, align 2, !tbaa !399
  %13271 = add nsw i64 %13139, %13256
  %13272 = getelementptr inbounds i16, i16* %blur_x841, i64 %13271
  %13273 = bitcast i16* %13272 to <16 x i16>*
  %13274 = load <16 x i16>, <16 x i16>* %13273, align 2, !tbaa !399
  %13275 = getelementptr inbounds i16, i16* %13272, i64 16
  %13276 = bitcast i16* %13275 to <16 x i16>*
  %13277 = load <16 x i16>, <16 x i16>* %13276, align 2, !tbaa !399
  %13278 = add <16 x i16> %13267, %13260
  %13279 = add <16 x i16> %13278, %13274
  %13280 = add <16 x i16> %13270, %13263
  %13281 = add <16 x i16> %13280, %13277
  %13282 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13279, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13283 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13281, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13284 = shufflevector <16 x i16> %13282, <16 x i16> %13283, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13285 = lshr <32 x i16> %13284, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13286 = shufflevector <32 x i16> %13285, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13287 = add nsw i64 %13143, %13256
  %13288 = getelementptr inbounds i16, i16* %255, i64 %13287
  %13289 = bitcast i16* %13288 to <16 x i16>*
  store <16 x i16> %13286, <16 x i16>* %13289, align 2, !tbaa !401
  %13290 = shufflevector <32 x i16> %13285, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13291 = getelementptr inbounds i16, i16* %13288, i64 16
  %13292 = bitcast i16* %13291 to <16 x i16>*
  store <16 x i16> %13290, <16 x i16>* %13292, align 2, !tbaa !401
  %13293 = add nuw nsw i32 %blur_y.s0.x.x.rebased1195, 1
  %.not2487 = icmp eq i32 %13293, %t1639861
  br i1 %.not2487, label %"end for blur_y.s0.x.x.rebased1194", label %"for blur_y.s0.x.x.rebased1193"

after_bb1204:                                     ; preds = %"end for blur_y.s0.x.x.rebased1194", %"produce blur_x1207"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1219.preheader", label %"end for blur_y.s0.x.x.rebased1220", !prof !386

"for blur_y.s0.x.x.rebased1219.preheader":        ; preds = %after_bb1204
  %13294 = sext i32 %t1644878 to i64
  %13295 = zext i32 %.pre-phi3324 to i64
  %13296 = mul nsw i64 %13295, %298
  %13297 = sub nsw i64 %13296, %285
  %13298 = zext i32 %.pre-phi3328 to i64
  %13299 = mul nsw i64 %13298, %298
  %13300 = sub nsw i64 %13299, %285
  %13301 = zext i32 %.pre-phi3338 to i64
  %13302 = mul nsw i64 %13301, %298
  %13303 = sub nsw i64 %13302, %285
  %13304 = sext i32 %a339 to i64
  %13305 = add nsw i64 %13304, 7
  %13306 = mul nsw i64 %13305, %299
  %13307 = add nsw i64 %13306, %302
  br label %"for blur_y.s0.x.x.rebased1219"

"produce blur_x1207":                             ; preds = %"end for blur_y.s0.x.x.rebased1194"
  %13308 = getelementptr inbounds i16, i16* %read_input784, i64 %315
  %13309 = getelementptr inbounds i16, i16* %13308, i64 -31
  %13310 = bitcast i16* %13309 to <16 x i16>*
  %13311 = load <16 x i16>, <16 x i16>* %13310, align 2, !tbaa !396
  %13312 = getelementptr inbounds i16, i16* %13308, i64 -15
  %13313 = bitcast i16* %13312 to <16 x i16>*
  %13314 = load <16 x i16>, <16 x i16>* %13313, align 2, !tbaa !396
  %13315 = getelementptr inbounds i16, i16* %13308, i64 -30
  %13316 = bitcast i16* %13315 to <16 x i16>*
  %13317 = load <16 x i16>, <16 x i16>* %13316, align 2, !tbaa !396
  %13318 = getelementptr inbounds i16, i16* %13308, i64 -14
  %13319 = bitcast i16* %13318 to <16 x i16>*
  %13320 = load <16 x i16>, <16 x i16>* %13319, align 2, !tbaa !396
  %13321 = getelementptr inbounds i16, i16* %13308, i64 -32
  %13322 = bitcast i16* %13321 to <16 x i16>*
  %13323 = load <16 x i16>, <16 x i16>* %13322, align 2, !tbaa !396
  %13324 = getelementptr inbounds i16, i16* %13308, i64 -16
  %13325 = bitcast i16* %13324 to <16 x i16>*
  %13326 = load <16 x i16>, <16 x i16>* %13325, align 2, !tbaa !396
  %13327 = add <16 x i16> %13317, %13311
  %13328 = add <16 x i16> %13327, %13323
  %13329 = add <16 x i16> %13320, %13314
  %13330 = add <16 x i16> %13329, %13326
  %13331 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13328, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13332 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13330, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13333 = shufflevector <16 x i16> %13331, <16 x i16> %13332, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13334 = lshr <32 x i16> %13333, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13335 = shufflevector <32 x i16> %13334, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13336 = zext i32 %.pre-phi3328 to i64
  %13337 = mul nsw i64 %286, %13336
  %13338 = add nsw i64 %288, %13337
  %13339 = getelementptr inbounds i16, i16* %blur_x841, i64 %13338
  %13340 = getelementptr inbounds i16, i16* %13339, i64 -32
  %13341 = bitcast i16* %13340 to <16 x i16>*
  store <16 x i16> %13335, <16 x i16>* %13341, align 2, !tbaa !399
  %13342 = shufflevector <32 x i16> %13334, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13343 = getelementptr inbounds i16, i16* %13339, i64 -16
  %13344 = bitcast i16* %13343 to <16 x i16>*
  store <16 x i16> %13342, <16 x i16>* %13344, align 2, !tbaa !399
  %13345 = zext i32 %.pre-phi3324 to i64
  %13346 = mul nsw i64 %13345, %298
  %13347 = add nsw i64 %13346, %283
  %13348 = getelementptr inbounds i16, i16* %blur_x841, i64 %13347
  %13349 = getelementptr inbounds i16, i16* %13348, i64 -32
  %13350 = bitcast i16* %13349 to <16 x i16>*
  %13351 = load <16 x i16>, <16 x i16>* %13350, align 2, !tbaa !399
  %13352 = getelementptr inbounds i16, i16* %13348, i64 -16
  %13353 = bitcast i16* %13352 to <16 x i16>*
  %13354 = load <16 x i16>, <16 x i16>* %13353, align 2, !tbaa !399
  %13355 = mul nsw i64 %13336, %298
  %13356 = add nsw i64 %13355, %283
  %13357 = getelementptr inbounds i16, i16* %blur_x841, i64 %13356
  %13358 = getelementptr inbounds i16, i16* %13357, i64 -32
  %13359 = bitcast i16* %13358 to <16 x i16>*
  %13360 = load <16 x i16>, <16 x i16>* %13359, align 2, !tbaa !399
  %13361 = getelementptr inbounds i16, i16* %13357, i64 -16
  %13362 = bitcast i16* %13361 to <16 x i16>*
  %13363 = load <16 x i16>, <16 x i16>* %13362, align 2, !tbaa !399
  %13364 = zext i32 %.pre-phi3338 to i64
  %13365 = mul nsw i64 %13364, %298
  %13366 = add nsw i64 %13365, %283
  %13367 = getelementptr inbounds i16, i16* %blur_x841, i64 %13366
  %13368 = getelementptr inbounds i16, i16* %13367, i64 -32
  %13369 = bitcast i16* %13368 to <16 x i16>*
  %13370 = load <16 x i16>, <16 x i16>* %13369, align 2, !tbaa !399
  %13371 = getelementptr inbounds i16, i16* %13367, i64 -16
  %13372 = bitcast i16* %13371 to <16 x i16>*
  %13373 = load <16 x i16>, <16 x i16>* %13372, align 2, !tbaa !399
  %13374 = add <16 x i16> %13360, %13351
  %13375 = add <16 x i16> %13374, %13370
  %13376 = add <16 x i16> %13363, %13354
  %13377 = add <16 x i16> %13376, %13373
  %13378 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13375, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13379 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13377, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13380 = shufflevector <16 x i16> %13378, <16 x i16> %13379, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13381 = lshr <32 x i16> %13380, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13382 = shufflevector <32 x i16> %13381, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13383 = sext i32 %a339 to i64
  %13384 = add nsw i64 %13383, 7
  %13385 = mul nsw i64 %13384, %299
  %13386 = add nsw i64 %301, %13385
  %13387 = getelementptr inbounds i16, i16* %255, i64 %13386
  %13388 = getelementptr inbounds i16, i16* %13387, i64 -32
  %13389 = bitcast i16* %13388 to <16 x i16>*
  store <16 x i16> %13382, <16 x i16>* %13389, align 2, !tbaa !401
  %13390 = shufflevector <32 x i16> %13381, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13391 = getelementptr inbounds i16, i16* %13387, i64 -16
  %13392 = bitcast i16* %13391 to <16 x i16>*
  store <16 x i16> %13390, <16 x i16>* %13392, align 2, !tbaa !401
  br label %after_bb1204

"for blur_y.s0.x.x.rebased1219":                  ; preds = %"for blur_y.s0.x.x.rebased1219.preheader", %"consume blur_x1228"
  %indvars.iv3168 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1219.preheader" ], [ %indvars.iv.next3169, %"consume blur_x1228" ]
  %13393 = add nsw i64 %indvars.iv3168, %290
  %13394 = icmp slt i64 %13393, 1
  %13395 = trunc i64 %13393 to i32
  %13396 = shl nsw i32 %13395, 5
  %13397 = icmp sgt i32 %194, %13396
  %13398 = or i1 %13394, %13397
  br i1 %13398, label %"produce blur_x1226", label %"for blur_y.s0.x.x.rebased1219.consume blur_x1228_crit_edge"

"for blur_y.s0.x.x.rebased1219.consume blur_x1228_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1219"
  %.pre3351 = shl nsw i64 %13393, 5
  br label %"consume blur_x1228"

"end for blur_y.s0.x.x.rebased1220":              ; preds = %"consume blur_x1228", %after_bb1204
  br i1 %291, label %"for blur_y.s0.x.x.rebased1236.preheader", label %"end for blur_y.s0.x.x.rebased1237", !prof !386

"for blur_y.s0.x.x.rebased1236.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1220"
  %13399 = sext i32 %t1644878 to i64
  %13400 = zext i32 %.pre-phi3324 to i64
  %13401 = mul nsw i64 %13400, %298
  %13402 = sub nsw i64 %13401, %285
  %13403 = zext i32 %.pre-phi3328 to i64
  %13404 = mul nsw i64 %13403, %298
  %13405 = sub nsw i64 %13404, %285
  %13406 = zext i32 %.pre-phi3338 to i64
  %13407 = mul nsw i64 %13406, %298
  %13408 = sub nsw i64 %13407, %285
  %13409 = sext i32 %a339 to i64
  %13410 = add nsw i64 %13409, 7
  %13411 = mul nsw i64 %13410, %299
  %13412 = add nsw i64 %13411, %302
  br label %"for blur_y.s0.x.x.rebased1236"

"produce blur_x1226":                             ; preds = %"for blur_y.s0.x.x.rebased1219"
  %t7841227 = add nsw i32 %13396, %t17611216
  %13413 = sext i32 %t7841227 to i64
  %13414 = getelementptr inbounds i16, i16* %read_input784, i64 %13413
  %13415 = getelementptr inbounds i16, i16* %13414, i64 1
  %13416 = bitcast i16* %13415 to <16 x i16>*
  %13417 = load <16 x i16>, <16 x i16>* %13416, align 2, !tbaa !396
  %13418 = getelementptr inbounds i16, i16* %13414, i64 17
  %13419 = bitcast i16* %13418 to <16 x i16>*
  %13420 = load <16 x i16>, <16 x i16>* %13419, align 2, !tbaa !396
  %13421 = getelementptr inbounds i16, i16* %13414, i64 2
  %13422 = bitcast i16* %13421 to <16 x i16>*
  %13423 = load <16 x i16>, <16 x i16>* %13422, align 2, !tbaa !396
  %13424 = getelementptr inbounds i16, i16* %13414, i64 18
  %13425 = bitcast i16* %13424 to <16 x i16>*
  %13426 = load <16 x i16>, <16 x i16>* %13425, align 2, !tbaa !396
  %13427 = bitcast i16* %13414 to <16 x i16>*
  %13428 = load <16 x i16>, <16 x i16>* %13427, align 2, !tbaa !396
  %13429 = getelementptr inbounds i16, i16* %13414, i64 16
  %13430 = bitcast i16* %13429 to <16 x i16>*
  %13431 = load <16 x i16>, <16 x i16>* %13430, align 2, !tbaa !396
  %13432 = add <16 x i16> %13423, %13417
  %13433 = add <16 x i16> %13432, %13428
  %13434 = add <16 x i16> %13426, %13420
  %13435 = add <16 x i16> %13434, %13431
  %13436 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13433, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13437 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13435, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13438 = shufflevector <16 x i16> %13436, <16 x i16> %13437, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13439 = lshr <32 x i16> %13438, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13440 = shufflevector <32 x i16> %13439, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13441 = shl nsw i64 %13393, 5
  %13442 = add nsw i64 %13441, %13294
  %13443 = getelementptr inbounds i16, i16* %blur_x841, i64 %13442
  %13444 = bitcast i16* %13443 to <16 x i16>*
  store <16 x i16> %13440, <16 x i16>* %13444, align 2, !tbaa !399
  %13445 = shufflevector <32 x i16> %13439, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13446 = getelementptr inbounds i16, i16* %13443, i64 16
  %13447 = bitcast i16* %13446 to <16 x i16>*
  store <16 x i16> %13445, <16 x i16>* %13447, align 2, !tbaa !399
  br label %"consume blur_x1228"

"consume blur_x1228":                             ; preds = %"for blur_y.s0.x.x.rebased1219.consume blur_x1228_crit_edge", %"produce blur_x1226"
  %.pre-phi3352 = phi i64 [ %.pre3351, %"for blur_y.s0.x.x.rebased1219.consume blur_x1228_crit_edge" ], [ %13441, %"produce blur_x1226" ]
  %13448 = add nsw i64 %13297, %.pre-phi3352
  %13449 = getelementptr inbounds i16, i16* %blur_x841, i64 %13448
  %13450 = bitcast i16* %13449 to <16 x i16>*
  %13451 = load <16 x i16>, <16 x i16>* %13450, align 2, !tbaa !399
  %13452 = getelementptr inbounds i16, i16* %13449, i64 16
  %13453 = bitcast i16* %13452 to <16 x i16>*
  %13454 = load <16 x i16>, <16 x i16>* %13453, align 2, !tbaa !399
  %13455 = add nsw i64 %13300, %.pre-phi3352
  %13456 = getelementptr inbounds i16, i16* %blur_x841, i64 %13455
  %13457 = bitcast i16* %13456 to <16 x i16>*
  %13458 = load <16 x i16>, <16 x i16>* %13457, align 2, !tbaa !399
  %13459 = getelementptr inbounds i16, i16* %13456, i64 16
  %13460 = bitcast i16* %13459 to <16 x i16>*
  %13461 = load <16 x i16>, <16 x i16>* %13460, align 2, !tbaa !399
  %13462 = add nsw i64 %13303, %.pre-phi3352
  %13463 = getelementptr inbounds i16, i16* %blur_x841, i64 %13462
  %13464 = bitcast i16* %13463 to <16 x i16>*
  %13465 = load <16 x i16>, <16 x i16>* %13464, align 2, !tbaa !399
  %13466 = getelementptr inbounds i16, i16* %13463, i64 16
  %13467 = bitcast i16* %13466 to <16 x i16>*
  %13468 = load <16 x i16>, <16 x i16>* %13467, align 2, !tbaa !399
  %13469 = add <16 x i16> %13458, %13451
  %13470 = add <16 x i16> %13469, %13465
  %13471 = add <16 x i16> %13461, %13454
  %13472 = add <16 x i16> %13471, %13468
  %13473 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13470, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13474 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13472, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13475 = shufflevector <16 x i16> %13473, <16 x i16> %13474, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13476 = lshr <32 x i16> %13475, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13477 = shufflevector <32 x i16> %13476, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13478 = add nsw i64 %13307, %.pre-phi3352
  %13479 = getelementptr inbounds i16, i16* %255, i64 %13478
  %13480 = bitcast i16* %13479 to <16 x i16>*
  store <16 x i16> %13477, <16 x i16>* %13480, align 2, !tbaa !401
  %13481 = shufflevector <32 x i16> %13476, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13482 = getelementptr inbounds i16, i16* %13479, i64 16
  %13483 = bitcast i16* %13482 to <16 x i16>*
  store <16 x i16> %13481, <16 x i16>* %13483, align 2, !tbaa !401
  %indvars.iv.next3169 = add nuw nsw i64 %indvars.iv3168, 1
  %.not2486 = icmp eq i64 %indvars.iv.next3169, %370
  br i1 %.not2486, label %"end for blur_y.s0.x.x.rebased1220", label %"for blur_y.s0.x.x.rebased1219"

"for blur_y.s0.x.x.rebased1236":                  ; preds = %"for blur_y.s0.x.x.rebased1236.preheader", %"consume blur_x1246"
  %blur_y.s0.x.x.rebased1238 = phi i32 [ %13562, %"consume blur_x1246" ], [ 0, %"for blur_y.s0.x.x.rebased1236.preheader" ]
  %13484 = add nsw i32 %blur_y.s0.x.x.rebased1238, %t1582776
  %a453 = shl nsw i32 %13484, 5
  %13485 = icmp sgt i32 %a327, %a453
  %b459 = select i1 %13485, i32 %a453, i32 %a327
  %13486 = icmp slt i32 %13484, 1
  %13487 = icmp sgt i32 %194, %a453
  %13488 = or i1 %13486, %13487
  br i1 %13488, label %"produce blur_x1243", label %"consume blur_x1246"

"end for blur_y.s0.x.x.rebased1237":              ; preds = %"consume blur_x1246", %"end for blur_y.s0.x.x.rebased1220"
  br i1 %224, label %"produce blur_x1250", label %after_bb1247

"produce blur_x1243":                             ; preds = %"for blur_y.s0.x.x.rebased1236"
  %13489 = icmp slt i32 %b459, %194
  %blur_x.s0.x.v1.base.s1244 = select i1 %13489, i32 %b459, i32 %194
  %t7891245 = add nsw i32 %blur_x.s0.x.v1.base.s1244, %t17611216
  %13490 = sext i32 %t7891245 to i64
  %13491 = getelementptr inbounds i16, i16* %read_input784, i64 %13490
  %13492 = getelementptr inbounds i16, i16* %13491, i64 1
  %13493 = bitcast i16* %13492 to <16 x i16>*
  %13494 = load <16 x i16>, <16 x i16>* %13493, align 2, !tbaa !396
  %13495 = getelementptr inbounds i16, i16* %13491, i64 17
  %13496 = bitcast i16* %13495 to <16 x i16>*
  %13497 = load <16 x i16>, <16 x i16>* %13496, align 2, !tbaa !396
  %13498 = getelementptr inbounds i16, i16* %13491, i64 2
  %13499 = bitcast i16* %13498 to <16 x i16>*
  %13500 = load <16 x i16>, <16 x i16>* %13499, align 2, !tbaa !396
  %13501 = getelementptr inbounds i16, i16* %13491, i64 18
  %13502 = bitcast i16* %13501 to <16 x i16>*
  %13503 = load <16 x i16>, <16 x i16>* %13502, align 2, !tbaa !396
  %13504 = bitcast i16* %13491 to <16 x i16>*
  %13505 = load <16 x i16>, <16 x i16>* %13504, align 2, !tbaa !396
  %13506 = getelementptr inbounds i16, i16* %13491, i64 16
  %13507 = bitcast i16* %13506 to <16 x i16>*
  %13508 = load <16 x i16>, <16 x i16>* %13507, align 2, !tbaa !396
  %13509 = add <16 x i16> %13500, %13494
  %13510 = add <16 x i16> %13509, %13505
  %13511 = add <16 x i16> %13503, %13497
  %13512 = add <16 x i16> %13511, %13508
  %13513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13510, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13514 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13512, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13515 = shufflevector <16 x i16> %13513, <16 x i16> %13514, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13516 = lshr <32 x i16> %13515, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13517 = shufflevector <32 x i16> %13516, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13518 = sext i32 %blur_x.s0.x.v1.base.s1244 to i64
  %13519 = add nsw i64 %13518, %13399
  %13520 = getelementptr inbounds i16, i16* %blur_x841, i64 %13519
  %13521 = bitcast i16* %13520 to <16 x i16>*
  store <16 x i16> %13517, <16 x i16>* %13521, align 2, !tbaa !399
  %13522 = shufflevector <32 x i16> %13516, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13523 = getelementptr inbounds i16, i16* %13520, i64 16
  %13524 = bitcast i16* %13523 to <16 x i16>*
  store <16 x i16> %13522, <16 x i16>* %13524, align 2, !tbaa !399
  br label %"consume blur_x1246"

"consume blur_x1246":                             ; preds = %"for blur_y.s0.x.x.rebased1236", %"produce blur_x1243"
  %13525 = sext i32 %b459 to i64
  %13526 = add nsw i64 %13402, %13525
  %13527 = getelementptr inbounds i16, i16* %blur_x841, i64 %13526
  %13528 = bitcast i16* %13527 to <16 x i16>*
  %13529 = load <16 x i16>, <16 x i16>* %13528, align 2, !tbaa !399
  %13530 = getelementptr inbounds i16, i16* %13527, i64 16
  %13531 = bitcast i16* %13530 to <16 x i16>*
  %13532 = load <16 x i16>, <16 x i16>* %13531, align 2, !tbaa !399
  %13533 = add nsw i64 %13405, %13525
  %13534 = getelementptr inbounds i16, i16* %blur_x841, i64 %13533
  %13535 = bitcast i16* %13534 to <16 x i16>*
  %13536 = load <16 x i16>, <16 x i16>* %13535, align 2, !tbaa !399
  %13537 = getelementptr inbounds i16, i16* %13534, i64 16
  %13538 = bitcast i16* %13537 to <16 x i16>*
  %13539 = load <16 x i16>, <16 x i16>* %13538, align 2, !tbaa !399
  %13540 = add nsw i64 %13408, %13525
  %13541 = getelementptr inbounds i16, i16* %blur_x841, i64 %13540
  %13542 = bitcast i16* %13541 to <16 x i16>*
  %13543 = load <16 x i16>, <16 x i16>* %13542, align 2, !tbaa !399
  %13544 = getelementptr inbounds i16, i16* %13541, i64 16
  %13545 = bitcast i16* %13544 to <16 x i16>*
  %13546 = load <16 x i16>, <16 x i16>* %13545, align 2, !tbaa !399
  %13547 = add <16 x i16> %13536, %13529
  %13548 = add <16 x i16> %13547, %13543
  %13549 = add <16 x i16> %13539, %13532
  %13550 = add <16 x i16> %13549, %13546
  %13551 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13548, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13552 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13550, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13553 = shufflevector <16 x i16> %13551, <16 x i16> %13552, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13554 = lshr <32 x i16> %13553, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13555 = shufflevector <32 x i16> %13554, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13556 = add nsw i64 %13412, %13525
  %13557 = getelementptr inbounds i16, i16* %255, i64 %13556
  %13558 = bitcast i16* %13557 to <16 x i16>*
  store <16 x i16> %13555, <16 x i16>* %13558, align 2, !tbaa !401
  %13559 = shufflevector <32 x i16> %13554, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13560 = getelementptr inbounds i16, i16* %13557, i64 16
  %13561 = bitcast i16* %13560 to <16 x i16>*
  store <16 x i16> %13559, <16 x i16>* %13561, align 2, !tbaa !401
  %13562 = add nuw nsw i32 %blur_y.s0.x.x.rebased1238, 1
  %.not2485 = icmp eq i32 %13562, %t1639861
  br i1 %.not2485, label %"end for blur_y.s0.x.x.rebased1237", label %"for blur_y.s0.x.x.rebased1236"

after_bb1247:                                     ; preds = %"end for blur_y.s0.x.x.rebased1237", %"produce blur_x1250"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1262.preheader", label %"end for blur_y.s0.x.x.rebased1263", !prof !386

"for blur_y.s0.x.x.rebased1262.preheader":        ; preds = %after_bb1247
  %13563 = sext i32 %t1650914 to i64
  %13564 = zext i32 %.pre-phi3328 to i64
  %13565 = mul nsw i64 %13564, %298
  %13566 = sub nsw i64 %13565, %285
  %13567 = zext i32 %.pre-phi3332 to i64
  %13568 = mul nsw i64 %13567, %298
  %13569 = sub nsw i64 %13568, %285
  %13570 = zext i32 %.pre-phi3324 to i64
  %13571 = mul nsw i64 %13570, %298
  %13572 = sub nsw i64 %13571, %285
  %13573 = sext i32 %a339 to i64
  %13574 = add nsw i64 %13573, 8
  %13575 = mul nsw i64 %13574, %299
  %13576 = add nsw i64 %13575, %302
  br label %"for blur_y.s0.x.x.rebased1262"

"produce blur_x1250":                             ; preds = %"end for blur_y.s0.x.x.rebased1237"
  %13577 = getelementptr inbounds i16, i16* %read_input784, i64 %317
  %13578 = getelementptr inbounds i16, i16* %13577, i64 -31
  %13579 = bitcast i16* %13578 to <16 x i16>*
  %13580 = load <16 x i16>, <16 x i16>* %13579, align 2, !tbaa !396
  %13581 = getelementptr inbounds i16, i16* %13577, i64 -15
  %13582 = bitcast i16* %13581 to <16 x i16>*
  %13583 = load <16 x i16>, <16 x i16>* %13582, align 2, !tbaa !396
  %13584 = getelementptr inbounds i16, i16* %13577, i64 -30
  %13585 = bitcast i16* %13584 to <16 x i16>*
  %13586 = load <16 x i16>, <16 x i16>* %13585, align 2, !tbaa !396
  %13587 = getelementptr inbounds i16, i16* %13577, i64 -14
  %13588 = bitcast i16* %13587 to <16 x i16>*
  %13589 = load <16 x i16>, <16 x i16>* %13588, align 2, !tbaa !396
  %13590 = getelementptr inbounds i16, i16* %13577, i64 -32
  %13591 = bitcast i16* %13590 to <16 x i16>*
  %13592 = load <16 x i16>, <16 x i16>* %13591, align 2, !tbaa !396
  %13593 = getelementptr inbounds i16, i16* %13577, i64 -16
  %13594 = bitcast i16* %13593 to <16 x i16>*
  %13595 = load <16 x i16>, <16 x i16>* %13594, align 2, !tbaa !396
  %13596 = add <16 x i16> %13586, %13580
  %13597 = add <16 x i16> %13596, %13592
  %13598 = add <16 x i16> %13589, %13583
  %13599 = add <16 x i16> %13598, %13595
  %13600 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13597, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13601 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13599, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13602 = shufflevector <16 x i16> %13600, <16 x i16> %13601, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13603 = lshr <32 x i16> %13602, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13604 = shufflevector <32 x i16> %13603, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13605 = zext i32 %.pre-phi3332 to i64
  %13606 = mul nsw i64 %286, %13605
  %13607 = add nsw i64 %288, %13606
  %13608 = getelementptr inbounds i16, i16* %blur_x841, i64 %13607
  %13609 = getelementptr inbounds i16, i16* %13608, i64 -32
  %13610 = bitcast i16* %13609 to <16 x i16>*
  store <16 x i16> %13604, <16 x i16>* %13610, align 2, !tbaa !399
  %13611 = shufflevector <32 x i16> %13603, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13612 = getelementptr inbounds i16, i16* %13608, i64 -16
  %13613 = bitcast i16* %13612 to <16 x i16>*
  store <16 x i16> %13611, <16 x i16>* %13613, align 2, !tbaa !399
  %13614 = zext i32 %.pre-phi3328 to i64
  %13615 = mul nsw i64 %13614, %298
  %13616 = add nsw i64 %13615, %283
  %13617 = getelementptr inbounds i16, i16* %blur_x841, i64 %13616
  %13618 = getelementptr inbounds i16, i16* %13617, i64 -32
  %13619 = bitcast i16* %13618 to <16 x i16>*
  %13620 = load <16 x i16>, <16 x i16>* %13619, align 2, !tbaa !399
  %13621 = getelementptr inbounds i16, i16* %13617, i64 -16
  %13622 = bitcast i16* %13621 to <16 x i16>*
  %13623 = load <16 x i16>, <16 x i16>* %13622, align 2, !tbaa !399
  %13624 = mul nsw i64 %13605, %298
  %13625 = add nsw i64 %13624, %283
  %13626 = getelementptr inbounds i16, i16* %blur_x841, i64 %13625
  %13627 = getelementptr inbounds i16, i16* %13626, i64 -32
  %13628 = bitcast i16* %13627 to <16 x i16>*
  %13629 = load <16 x i16>, <16 x i16>* %13628, align 2, !tbaa !399
  %13630 = getelementptr inbounds i16, i16* %13626, i64 -16
  %13631 = bitcast i16* %13630 to <16 x i16>*
  %13632 = load <16 x i16>, <16 x i16>* %13631, align 2, !tbaa !399
  %13633 = zext i32 %.pre-phi3324 to i64
  %13634 = mul nsw i64 %13633, %298
  %13635 = add nsw i64 %13634, %283
  %13636 = getelementptr inbounds i16, i16* %blur_x841, i64 %13635
  %13637 = getelementptr inbounds i16, i16* %13636, i64 -32
  %13638 = bitcast i16* %13637 to <16 x i16>*
  %13639 = load <16 x i16>, <16 x i16>* %13638, align 2, !tbaa !399
  %13640 = getelementptr inbounds i16, i16* %13636, i64 -16
  %13641 = bitcast i16* %13640 to <16 x i16>*
  %13642 = load <16 x i16>, <16 x i16>* %13641, align 2, !tbaa !399
  %13643 = add <16 x i16> %13629, %13620
  %13644 = add <16 x i16> %13643, %13639
  %13645 = add <16 x i16> %13632, %13623
  %13646 = add <16 x i16> %13645, %13642
  %13647 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13644, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13648 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13646, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13649 = shufflevector <16 x i16> %13647, <16 x i16> %13648, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13650 = lshr <32 x i16> %13649, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13651 = shufflevector <32 x i16> %13650, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13652 = sext i32 %a339 to i64
  %13653 = add nsw i64 %13652, 8
  %13654 = mul nsw i64 %13653, %299
  %13655 = add nsw i64 %301, %13654
  %13656 = getelementptr inbounds i16, i16* %255, i64 %13655
  %13657 = getelementptr inbounds i16, i16* %13656, i64 -32
  %13658 = bitcast i16* %13657 to <16 x i16>*
  store <16 x i16> %13651, <16 x i16>* %13658, align 2, !tbaa !401
  %13659 = shufflevector <32 x i16> %13650, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13660 = getelementptr inbounds i16, i16* %13656, i64 -16
  %13661 = bitcast i16* %13660 to <16 x i16>*
  store <16 x i16> %13659, <16 x i16>* %13661, align 2, !tbaa !401
  br label %after_bb1247

"for blur_y.s0.x.x.rebased1262":                  ; preds = %"for blur_y.s0.x.x.rebased1262.preheader", %"consume blur_x1271"
  %indvars.iv3171 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1262.preheader" ], [ %indvars.iv.next3172, %"consume blur_x1271" ]
  %13662 = add nsw i64 %indvars.iv3171, %290
  %13663 = icmp slt i64 %13662, 1
  %13664 = trunc i64 %13662 to i32
  %13665 = shl nsw i32 %13664, 5
  %13666 = icmp sgt i32 %194, %13665
  %13667 = or i1 %13663, %13666
  br i1 %13667, label %"produce blur_x1269", label %"for blur_y.s0.x.x.rebased1262.consume blur_x1271_crit_edge"

"for blur_y.s0.x.x.rebased1262.consume blur_x1271_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1262"
  %.pre3353 = shl nsw i64 %13662, 5
  br label %"consume blur_x1271"

"end for blur_y.s0.x.x.rebased1263":              ; preds = %"consume blur_x1271", %after_bb1247
  br i1 %291, label %"for blur_y.s0.x.x.rebased1279.preheader", label %"end for blur_y.s0.x.x.rebased1280", !prof !386

"for blur_y.s0.x.x.rebased1279.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1263"
  %13668 = sext i32 %t1650914 to i64
  %13669 = zext i32 %.pre-phi3328 to i64
  %13670 = mul nsw i64 %13669, %298
  %13671 = sub nsw i64 %13670, %285
  %13672 = zext i32 %.pre-phi3332 to i64
  %13673 = mul nsw i64 %13672, %298
  %13674 = sub nsw i64 %13673, %285
  %13675 = zext i32 %.pre-phi3324 to i64
  %13676 = mul nsw i64 %13675, %298
  %13677 = sub nsw i64 %13676, %285
  %13678 = sext i32 %a339 to i64
  %13679 = add nsw i64 %13678, 8
  %13680 = mul nsw i64 %13679, %299
  %13681 = add nsw i64 %13680, %302
  br label %"for blur_y.s0.x.x.rebased1279"

"produce blur_x1269":                             ; preds = %"for blur_y.s0.x.x.rebased1262"
  %t8001270 = add nsw i32 %13665, %t17771259
  %13682 = sext i32 %t8001270 to i64
  %13683 = getelementptr inbounds i16, i16* %read_input784, i64 %13682
  %13684 = getelementptr inbounds i16, i16* %13683, i64 1
  %13685 = bitcast i16* %13684 to <16 x i16>*
  %13686 = load <16 x i16>, <16 x i16>* %13685, align 2, !tbaa !396
  %13687 = getelementptr inbounds i16, i16* %13683, i64 17
  %13688 = bitcast i16* %13687 to <16 x i16>*
  %13689 = load <16 x i16>, <16 x i16>* %13688, align 2, !tbaa !396
  %13690 = getelementptr inbounds i16, i16* %13683, i64 2
  %13691 = bitcast i16* %13690 to <16 x i16>*
  %13692 = load <16 x i16>, <16 x i16>* %13691, align 2, !tbaa !396
  %13693 = getelementptr inbounds i16, i16* %13683, i64 18
  %13694 = bitcast i16* %13693 to <16 x i16>*
  %13695 = load <16 x i16>, <16 x i16>* %13694, align 2, !tbaa !396
  %13696 = bitcast i16* %13683 to <16 x i16>*
  %13697 = load <16 x i16>, <16 x i16>* %13696, align 2, !tbaa !396
  %13698 = getelementptr inbounds i16, i16* %13683, i64 16
  %13699 = bitcast i16* %13698 to <16 x i16>*
  %13700 = load <16 x i16>, <16 x i16>* %13699, align 2, !tbaa !396
  %13701 = add <16 x i16> %13692, %13686
  %13702 = add <16 x i16> %13701, %13697
  %13703 = add <16 x i16> %13695, %13689
  %13704 = add <16 x i16> %13703, %13700
  %13705 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13702, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13706 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13704, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13707 = shufflevector <16 x i16> %13705, <16 x i16> %13706, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13708 = lshr <32 x i16> %13707, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13709 = shufflevector <32 x i16> %13708, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13710 = shl nsw i64 %13662, 5
  %13711 = add nsw i64 %13710, %13563
  %13712 = getelementptr inbounds i16, i16* %blur_x841, i64 %13711
  %13713 = bitcast i16* %13712 to <16 x i16>*
  store <16 x i16> %13709, <16 x i16>* %13713, align 2, !tbaa !399
  %13714 = shufflevector <32 x i16> %13708, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13715 = getelementptr inbounds i16, i16* %13712, i64 16
  %13716 = bitcast i16* %13715 to <16 x i16>*
  store <16 x i16> %13714, <16 x i16>* %13716, align 2, !tbaa !399
  br label %"consume blur_x1271"

"consume blur_x1271":                             ; preds = %"for blur_y.s0.x.x.rebased1262.consume blur_x1271_crit_edge", %"produce blur_x1269"
  %.pre-phi3354 = phi i64 [ %.pre3353, %"for blur_y.s0.x.x.rebased1262.consume blur_x1271_crit_edge" ], [ %13710, %"produce blur_x1269" ]
  %13717 = add nsw i64 %13566, %.pre-phi3354
  %13718 = getelementptr inbounds i16, i16* %blur_x841, i64 %13717
  %13719 = bitcast i16* %13718 to <16 x i16>*
  %13720 = load <16 x i16>, <16 x i16>* %13719, align 2, !tbaa !399
  %13721 = getelementptr inbounds i16, i16* %13718, i64 16
  %13722 = bitcast i16* %13721 to <16 x i16>*
  %13723 = load <16 x i16>, <16 x i16>* %13722, align 2, !tbaa !399
  %13724 = add nsw i64 %13569, %.pre-phi3354
  %13725 = getelementptr inbounds i16, i16* %blur_x841, i64 %13724
  %13726 = bitcast i16* %13725 to <16 x i16>*
  %13727 = load <16 x i16>, <16 x i16>* %13726, align 2, !tbaa !399
  %13728 = getelementptr inbounds i16, i16* %13725, i64 16
  %13729 = bitcast i16* %13728 to <16 x i16>*
  %13730 = load <16 x i16>, <16 x i16>* %13729, align 2, !tbaa !399
  %13731 = add nsw i64 %13572, %.pre-phi3354
  %13732 = getelementptr inbounds i16, i16* %blur_x841, i64 %13731
  %13733 = bitcast i16* %13732 to <16 x i16>*
  %13734 = load <16 x i16>, <16 x i16>* %13733, align 2, !tbaa !399
  %13735 = getelementptr inbounds i16, i16* %13732, i64 16
  %13736 = bitcast i16* %13735 to <16 x i16>*
  %13737 = load <16 x i16>, <16 x i16>* %13736, align 2, !tbaa !399
  %13738 = add <16 x i16> %13727, %13720
  %13739 = add <16 x i16> %13738, %13734
  %13740 = add <16 x i16> %13730, %13723
  %13741 = add <16 x i16> %13740, %13737
  %13742 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13739, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13743 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13741, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13744 = shufflevector <16 x i16> %13742, <16 x i16> %13743, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13745 = lshr <32 x i16> %13744, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13746 = shufflevector <32 x i16> %13745, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13747 = add nsw i64 %13576, %.pre-phi3354
  %13748 = getelementptr inbounds i16, i16* %255, i64 %13747
  %13749 = bitcast i16* %13748 to <16 x i16>*
  store <16 x i16> %13746, <16 x i16>* %13749, align 2, !tbaa !401
  %13750 = shufflevector <32 x i16> %13745, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13751 = getelementptr inbounds i16, i16* %13748, i64 16
  %13752 = bitcast i16* %13751 to <16 x i16>*
  store <16 x i16> %13750, <16 x i16>* %13752, align 2, !tbaa !401
  %indvars.iv.next3172 = add nuw nsw i64 %indvars.iv3171, 1
  %.not2484 = icmp eq i64 %indvars.iv.next3172, %370
  br i1 %.not2484, label %"end for blur_y.s0.x.x.rebased1263", label %"for blur_y.s0.x.x.rebased1262"

"for blur_y.s0.x.x.rebased1279":                  ; preds = %"for blur_y.s0.x.x.rebased1279.preheader", %"consume blur_x1289"
  %blur_y.s0.x.x.rebased1281 = phi i32 [ %13831, %"consume blur_x1289" ], [ 0, %"for blur_y.s0.x.x.rebased1279.preheader" ]
  %13753 = add nsw i32 %blur_y.s0.x.x.rebased1281, %t1582776
  %a460 = shl nsw i32 %13753, 5
  %13754 = icmp sgt i32 %a327, %a460
  %b466 = select i1 %13754, i32 %a460, i32 %a327
  %13755 = icmp slt i32 %13753, 1
  %13756 = icmp sgt i32 %194, %a460
  %13757 = or i1 %13755, %13756
  br i1 %13757, label %"produce blur_x1286", label %"consume blur_x1289"

"end for blur_y.s0.x.x.rebased1280":              ; preds = %"consume blur_x1289", %"end for blur_y.s0.x.x.rebased1263"
  br i1 %224, label %"produce blur_x1293", label %after_bb1290

"produce blur_x1286":                             ; preds = %"for blur_y.s0.x.x.rebased1279"
  %13758 = icmp slt i32 %b466, %194
  %blur_x.s0.x.v1.base.s1287 = select i1 %13758, i32 %b466, i32 %194
  %t8051288 = add nsw i32 %blur_x.s0.x.v1.base.s1287, %t17771259
  %13759 = sext i32 %t8051288 to i64
  %13760 = getelementptr inbounds i16, i16* %read_input784, i64 %13759
  %13761 = getelementptr inbounds i16, i16* %13760, i64 1
  %13762 = bitcast i16* %13761 to <16 x i16>*
  %13763 = load <16 x i16>, <16 x i16>* %13762, align 2, !tbaa !396
  %13764 = getelementptr inbounds i16, i16* %13760, i64 17
  %13765 = bitcast i16* %13764 to <16 x i16>*
  %13766 = load <16 x i16>, <16 x i16>* %13765, align 2, !tbaa !396
  %13767 = getelementptr inbounds i16, i16* %13760, i64 2
  %13768 = bitcast i16* %13767 to <16 x i16>*
  %13769 = load <16 x i16>, <16 x i16>* %13768, align 2, !tbaa !396
  %13770 = getelementptr inbounds i16, i16* %13760, i64 18
  %13771 = bitcast i16* %13770 to <16 x i16>*
  %13772 = load <16 x i16>, <16 x i16>* %13771, align 2, !tbaa !396
  %13773 = bitcast i16* %13760 to <16 x i16>*
  %13774 = load <16 x i16>, <16 x i16>* %13773, align 2, !tbaa !396
  %13775 = getelementptr inbounds i16, i16* %13760, i64 16
  %13776 = bitcast i16* %13775 to <16 x i16>*
  %13777 = load <16 x i16>, <16 x i16>* %13776, align 2, !tbaa !396
  %13778 = add <16 x i16> %13769, %13763
  %13779 = add <16 x i16> %13778, %13774
  %13780 = add <16 x i16> %13772, %13766
  %13781 = add <16 x i16> %13780, %13777
  %13782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13779, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13783 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13781, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13784 = shufflevector <16 x i16> %13782, <16 x i16> %13783, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13785 = lshr <32 x i16> %13784, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13786 = shufflevector <32 x i16> %13785, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13787 = sext i32 %blur_x.s0.x.v1.base.s1287 to i64
  %13788 = add nsw i64 %13787, %13668
  %13789 = getelementptr inbounds i16, i16* %blur_x841, i64 %13788
  %13790 = bitcast i16* %13789 to <16 x i16>*
  store <16 x i16> %13786, <16 x i16>* %13790, align 2, !tbaa !399
  %13791 = shufflevector <32 x i16> %13785, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13792 = getelementptr inbounds i16, i16* %13789, i64 16
  %13793 = bitcast i16* %13792 to <16 x i16>*
  store <16 x i16> %13791, <16 x i16>* %13793, align 2, !tbaa !399
  br label %"consume blur_x1289"

"consume blur_x1289":                             ; preds = %"for blur_y.s0.x.x.rebased1279", %"produce blur_x1286"
  %13794 = sext i32 %b466 to i64
  %13795 = add nsw i64 %13671, %13794
  %13796 = getelementptr inbounds i16, i16* %blur_x841, i64 %13795
  %13797 = bitcast i16* %13796 to <16 x i16>*
  %13798 = load <16 x i16>, <16 x i16>* %13797, align 2, !tbaa !399
  %13799 = getelementptr inbounds i16, i16* %13796, i64 16
  %13800 = bitcast i16* %13799 to <16 x i16>*
  %13801 = load <16 x i16>, <16 x i16>* %13800, align 2, !tbaa !399
  %13802 = add nsw i64 %13674, %13794
  %13803 = getelementptr inbounds i16, i16* %blur_x841, i64 %13802
  %13804 = bitcast i16* %13803 to <16 x i16>*
  %13805 = load <16 x i16>, <16 x i16>* %13804, align 2, !tbaa !399
  %13806 = getelementptr inbounds i16, i16* %13803, i64 16
  %13807 = bitcast i16* %13806 to <16 x i16>*
  %13808 = load <16 x i16>, <16 x i16>* %13807, align 2, !tbaa !399
  %13809 = add nsw i64 %13677, %13794
  %13810 = getelementptr inbounds i16, i16* %blur_x841, i64 %13809
  %13811 = bitcast i16* %13810 to <16 x i16>*
  %13812 = load <16 x i16>, <16 x i16>* %13811, align 2, !tbaa !399
  %13813 = getelementptr inbounds i16, i16* %13810, i64 16
  %13814 = bitcast i16* %13813 to <16 x i16>*
  %13815 = load <16 x i16>, <16 x i16>* %13814, align 2, !tbaa !399
  %13816 = add <16 x i16> %13805, %13798
  %13817 = add <16 x i16> %13816, %13812
  %13818 = add <16 x i16> %13808, %13801
  %13819 = add <16 x i16> %13818, %13815
  %13820 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13817, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13821 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13819, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13822 = shufflevector <16 x i16> %13820, <16 x i16> %13821, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13823 = lshr <32 x i16> %13822, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13824 = shufflevector <32 x i16> %13823, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13825 = add nsw i64 %13681, %13794
  %13826 = getelementptr inbounds i16, i16* %255, i64 %13825
  %13827 = bitcast i16* %13826 to <16 x i16>*
  store <16 x i16> %13824, <16 x i16>* %13827, align 2, !tbaa !401
  %13828 = shufflevector <32 x i16> %13823, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13829 = getelementptr inbounds i16, i16* %13826, i64 16
  %13830 = bitcast i16* %13829 to <16 x i16>*
  store <16 x i16> %13828, <16 x i16>* %13830, align 2, !tbaa !401
  %13831 = add nuw nsw i32 %blur_y.s0.x.x.rebased1281, 1
  %.not2483 = icmp eq i32 %13831, %t1639861
  br i1 %.not2483, label %"end for blur_y.s0.x.x.rebased1280", label %"for blur_y.s0.x.x.rebased1279"

after_bb1290:                                     ; preds = %"end for blur_y.s0.x.x.rebased1280", %"produce blur_x1293"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1305.preheader", label %"end for blur_y.s0.x.x.rebased1306", !prof !386

"for blur_y.s0.x.x.rebased1305.preheader":        ; preds = %after_bb1290
  %13832 = sext i32 %t1666957 to i64
  %13833 = zext i32 %.pre-phi3332 to i64
  %13834 = mul nsw i64 %13833, %298
  %13835 = sub nsw i64 %13834, %285
  %13836 = zext i32 %.pre-phi3338 to i64
  %13837 = mul nsw i64 %13836, %298
  %13838 = sub nsw i64 %13837, %285
  %13839 = zext i32 %.pre-phi3328 to i64
  %13840 = mul nsw i64 %13839, %298
  %13841 = sub nsw i64 %13840, %285
  %13842 = sext i32 %a339 to i64
  %13843 = add nsw i64 %13842, 9
  %13844 = mul nsw i64 %13843, %299
  %13845 = add nsw i64 %13844, %302
  br label %"for blur_y.s0.x.x.rebased1305"

"produce blur_x1293":                             ; preds = %"end for blur_y.s0.x.x.rebased1280"
  %13846 = getelementptr inbounds i16, i16* %read_input784, i64 %319
  %13847 = getelementptr inbounds i16, i16* %13846, i64 -31
  %13848 = bitcast i16* %13847 to <16 x i16>*
  %13849 = load <16 x i16>, <16 x i16>* %13848, align 2, !tbaa !396
  %13850 = getelementptr inbounds i16, i16* %13846, i64 -15
  %13851 = bitcast i16* %13850 to <16 x i16>*
  %13852 = load <16 x i16>, <16 x i16>* %13851, align 2, !tbaa !396
  %13853 = getelementptr inbounds i16, i16* %13846, i64 -30
  %13854 = bitcast i16* %13853 to <16 x i16>*
  %13855 = load <16 x i16>, <16 x i16>* %13854, align 2, !tbaa !396
  %13856 = getelementptr inbounds i16, i16* %13846, i64 -14
  %13857 = bitcast i16* %13856 to <16 x i16>*
  %13858 = load <16 x i16>, <16 x i16>* %13857, align 2, !tbaa !396
  %13859 = getelementptr inbounds i16, i16* %13846, i64 -32
  %13860 = bitcast i16* %13859 to <16 x i16>*
  %13861 = load <16 x i16>, <16 x i16>* %13860, align 2, !tbaa !396
  %13862 = getelementptr inbounds i16, i16* %13846, i64 -16
  %13863 = bitcast i16* %13862 to <16 x i16>*
  %13864 = load <16 x i16>, <16 x i16>* %13863, align 2, !tbaa !396
  %13865 = add <16 x i16> %13855, %13849
  %13866 = add <16 x i16> %13865, %13861
  %13867 = add <16 x i16> %13858, %13852
  %13868 = add <16 x i16> %13867, %13864
  %13869 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13866, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13870 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13868, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13871 = shufflevector <16 x i16> %13869, <16 x i16> %13870, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13872 = lshr <32 x i16> %13871, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13873 = shufflevector <32 x i16> %13872, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13874 = zext i32 %.pre-phi3338 to i64
  %13875 = mul nsw i64 %286, %13874
  %13876 = add nsw i64 %288, %13875
  %13877 = getelementptr inbounds i16, i16* %blur_x841, i64 %13876
  %13878 = getelementptr inbounds i16, i16* %13877, i64 -32
  %13879 = bitcast i16* %13878 to <16 x i16>*
  store <16 x i16> %13873, <16 x i16>* %13879, align 2, !tbaa !399
  %13880 = shufflevector <32 x i16> %13872, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13881 = getelementptr inbounds i16, i16* %13877, i64 -16
  %13882 = bitcast i16* %13881 to <16 x i16>*
  store <16 x i16> %13880, <16 x i16>* %13882, align 2, !tbaa !399
  %13883 = zext i32 %.pre-phi3332 to i64
  %13884 = mul nsw i64 %13883, %298
  %13885 = add nsw i64 %13884, %283
  %13886 = getelementptr inbounds i16, i16* %blur_x841, i64 %13885
  %13887 = getelementptr inbounds i16, i16* %13886, i64 -32
  %13888 = bitcast i16* %13887 to <16 x i16>*
  %13889 = load <16 x i16>, <16 x i16>* %13888, align 2, !tbaa !399
  %13890 = getelementptr inbounds i16, i16* %13886, i64 -16
  %13891 = bitcast i16* %13890 to <16 x i16>*
  %13892 = load <16 x i16>, <16 x i16>* %13891, align 2, !tbaa !399
  %13893 = mul nsw i64 %13874, %298
  %13894 = add nsw i64 %13893, %283
  %13895 = getelementptr inbounds i16, i16* %blur_x841, i64 %13894
  %13896 = getelementptr inbounds i16, i16* %13895, i64 -32
  %13897 = bitcast i16* %13896 to <16 x i16>*
  %13898 = load <16 x i16>, <16 x i16>* %13897, align 2, !tbaa !399
  %13899 = getelementptr inbounds i16, i16* %13895, i64 -16
  %13900 = bitcast i16* %13899 to <16 x i16>*
  %13901 = load <16 x i16>, <16 x i16>* %13900, align 2, !tbaa !399
  %13902 = zext i32 %.pre-phi3328 to i64
  %13903 = mul nsw i64 %13902, %298
  %13904 = add nsw i64 %13903, %283
  %13905 = getelementptr inbounds i16, i16* %blur_x841, i64 %13904
  %13906 = getelementptr inbounds i16, i16* %13905, i64 -32
  %13907 = bitcast i16* %13906 to <16 x i16>*
  %13908 = load <16 x i16>, <16 x i16>* %13907, align 2, !tbaa !399
  %13909 = getelementptr inbounds i16, i16* %13905, i64 -16
  %13910 = bitcast i16* %13909 to <16 x i16>*
  %13911 = load <16 x i16>, <16 x i16>* %13910, align 2, !tbaa !399
  %13912 = add <16 x i16> %13898, %13889
  %13913 = add <16 x i16> %13912, %13908
  %13914 = add <16 x i16> %13901, %13892
  %13915 = add <16 x i16> %13914, %13911
  %13916 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13913, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13917 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13915, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13918 = shufflevector <16 x i16> %13916, <16 x i16> %13917, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13919 = lshr <32 x i16> %13918, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13920 = shufflevector <32 x i16> %13919, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13921 = sext i32 %a339 to i64
  %13922 = add nsw i64 %13921, 9
  %13923 = mul nsw i64 %13922, %299
  %13924 = add nsw i64 %301, %13923
  %13925 = getelementptr inbounds i16, i16* %255, i64 %13924
  %13926 = getelementptr inbounds i16, i16* %13925, i64 -32
  %13927 = bitcast i16* %13926 to <16 x i16>*
  store <16 x i16> %13920, <16 x i16>* %13927, align 2, !tbaa !401
  %13928 = shufflevector <32 x i16> %13919, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13929 = getelementptr inbounds i16, i16* %13925, i64 -16
  %13930 = bitcast i16* %13929 to <16 x i16>*
  store <16 x i16> %13928, <16 x i16>* %13930, align 2, !tbaa !401
  br label %after_bb1290

"for blur_y.s0.x.x.rebased1305":                  ; preds = %"for blur_y.s0.x.x.rebased1305.preheader", %"consume blur_x1314"
  %indvars.iv3174 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1305.preheader" ], [ %indvars.iv.next3175, %"consume blur_x1314" ]
  %13931 = add nsw i64 %indvars.iv3174, %290
  %13932 = icmp slt i64 %13931, 1
  %13933 = trunc i64 %13931 to i32
  %13934 = shl nsw i32 %13933, 5
  %13935 = icmp sgt i32 %194, %13934
  %13936 = or i1 %13932, %13935
  br i1 %13936, label %"produce blur_x1312", label %"for blur_y.s0.x.x.rebased1305.consume blur_x1314_crit_edge"

"for blur_y.s0.x.x.rebased1305.consume blur_x1314_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1305"
  %.pre3355 = shl nsw i64 %13931, 5
  br label %"consume blur_x1314"

"end for blur_y.s0.x.x.rebased1306":              ; preds = %"consume blur_x1314", %after_bb1290
  br i1 %291, label %"for blur_y.s0.x.x.rebased1322.preheader", label %"end for blur_y.s0.x.x.rebased1323", !prof !386

"for blur_y.s0.x.x.rebased1322.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1306"
  %13937 = sext i32 %t1666957 to i64
  %13938 = zext i32 %.pre-phi3332 to i64
  %13939 = mul nsw i64 %13938, %298
  %13940 = sub nsw i64 %13939, %285
  %13941 = zext i32 %.pre-phi3338 to i64
  %13942 = mul nsw i64 %13941, %298
  %13943 = sub nsw i64 %13942, %285
  %13944 = zext i32 %.pre-phi3328 to i64
  %13945 = mul nsw i64 %13944, %298
  %13946 = sub nsw i64 %13945, %285
  %13947 = sext i32 %a339 to i64
  %13948 = add nsw i64 %13947, 9
  %13949 = mul nsw i64 %13948, %299
  %13950 = add nsw i64 %13949, %302
  br label %"for blur_y.s0.x.x.rebased1322"

"produce blur_x1312":                             ; preds = %"for blur_y.s0.x.x.rebased1305"
  %t8161313 = add nsw i32 %13934, %t17931302
  %13951 = sext i32 %t8161313 to i64
  %13952 = getelementptr inbounds i16, i16* %read_input784, i64 %13951
  %13953 = getelementptr inbounds i16, i16* %13952, i64 1
  %13954 = bitcast i16* %13953 to <16 x i16>*
  %13955 = load <16 x i16>, <16 x i16>* %13954, align 2, !tbaa !396
  %13956 = getelementptr inbounds i16, i16* %13952, i64 17
  %13957 = bitcast i16* %13956 to <16 x i16>*
  %13958 = load <16 x i16>, <16 x i16>* %13957, align 2, !tbaa !396
  %13959 = getelementptr inbounds i16, i16* %13952, i64 2
  %13960 = bitcast i16* %13959 to <16 x i16>*
  %13961 = load <16 x i16>, <16 x i16>* %13960, align 2, !tbaa !396
  %13962 = getelementptr inbounds i16, i16* %13952, i64 18
  %13963 = bitcast i16* %13962 to <16 x i16>*
  %13964 = load <16 x i16>, <16 x i16>* %13963, align 2, !tbaa !396
  %13965 = bitcast i16* %13952 to <16 x i16>*
  %13966 = load <16 x i16>, <16 x i16>* %13965, align 2, !tbaa !396
  %13967 = getelementptr inbounds i16, i16* %13952, i64 16
  %13968 = bitcast i16* %13967 to <16 x i16>*
  %13969 = load <16 x i16>, <16 x i16>* %13968, align 2, !tbaa !396
  %13970 = add <16 x i16> %13961, %13955
  %13971 = add <16 x i16> %13970, %13966
  %13972 = add <16 x i16> %13964, %13958
  %13973 = add <16 x i16> %13972, %13969
  %13974 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13971, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13975 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %13973, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %13976 = shufflevector <16 x i16> %13974, <16 x i16> %13975, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13977 = lshr <32 x i16> %13976, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %13978 = shufflevector <32 x i16> %13977, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %13979 = shl nsw i64 %13931, 5
  %13980 = add nsw i64 %13979, %13832
  %13981 = getelementptr inbounds i16, i16* %blur_x841, i64 %13980
  %13982 = bitcast i16* %13981 to <16 x i16>*
  store <16 x i16> %13978, <16 x i16>* %13982, align 2, !tbaa !399
  %13983 = shufflevector <32 x i16> %13977, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %13984 = getelementptr inbounds i16, i16* %13981, i64 16
  %13985 = bitcast i16* %13984 to <16 x i16>*
  store <16 x i16> %13983, <16 x i16>* %13985, align 2, !tbaa !399
  br label %"consume blur_x1314"

"consume blur_x1314":                             ; preds = %"for blur_y.s0.x.x.rebased1305.consume blur_x1314_crit_edge", %"produce blur_x1312"
  %.pre-phi3356 = phi i64 [ %.pre3355, %"for blur_y.s0.x.x.rebased1305.consume blur_x1314_crit_edge" ], [ %13979, %"produce blur_x1312" ]
  %13986 = add nsw i64 %13835, %.pre-phi3356
  %13987 = getelementptr inbounds i16, i16* %blur_x841, i64 %13986
  %13988 = bitcast i16* %13987 to <16 x i16>*
  %13989 = load <16 x i16>, <16 x i16>* %13988, align 2, !tbaa !399
  %13990 = getelementptr inbounds i16, i16* %13987, i64 16
  %13991 = bitcast i16* %13990 to <16 x i16>*
  %13992 = load <16 x i16>, <16 x i16>* %13991, align 2, !tbaa !399
  %13993 = add nsw i64 %13838, %.pre-phi3356
  %13994 = getelementptr inbounds i16, i16* %blur_x841, i64 %13993
  %13995 = bitcast i16* %13994 to <16 x i16>*
  %13996 = load <16 x i16>, <16 x i16>* %13995, align 2, !tbaa !399
  %13997 = getelementptr inbounds i16, i16* %13994, i64 16
  %13998 = bitcast i16* %13997 to <16 x i16>*
  %13999 = load <16 x i16>, <16 x i16>* %13998, align 2, !tbaa !399
  %14000 = add nsw i64 %13841, %.pre-phi3356
  %14001 = getelementptr inbounds i16, i16* %blur_x841, i64 %14000
  %14002 = bitcast i16* %14001 to <16 x i16>*
  %14003 = load <16 x i16>, <16 x i16>* %14002, align 2, !tbaa !399
  %14004 = getelementptr inbounds i16, i16* %14001, i64 16
  %14005 = bitcast i16* %14004 to <16 x i16>*
  %14006 = load <16 x i16>, <16 x i16>* %14005, align 2, !tbaa !399
  %14007 = add <16 x i16> %13996, %13989
  %14008 = add <16 x i16> %14007, %14003
  %14009 = add <16 x i16> %13999, %13992
  %14010 = add <16 x i16> %14009, %14006
  %14011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14008, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14012 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14010, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14013 = shufflevector <16 x i16> %14011, <16 x i16> %14012, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14014 = lshr <32 x i16> %14013, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14015 = shufflevector <32 x i16> %14014, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14016 = add nsw i64 %13845, %.pre-phi3356
  %14017 = getelementptr inbounds i16, i16* %255, i64 %14016
  %14018 = bitcast i16* %14017 to <16 x i16>*
  store <16 x i16> %14015, <16 x i16>* %14018, align 2, !tbaa !401
  %14019 = shufflevector <32 x i16> %14014, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14020 = getelementptr inbounds i16, i16* %14017, i64 16
  %14021 = bitcast i16* %14020 to <16 x i16>*
  store <16 x i16> %14019, <16 x i16>* %14021, align 2, !tbaa !401
  %indvars.iv.next3175 = add nuw nsw i64 %indvars.iv3174, 1
  %.not2482 = icmp eq i64 %indvars.iv.next3175, %370
  br i1 %.not2482, label %"end for blur_y.s0.x.x.rebased1306", label %"for blur_y.s0.x.x.rebased1305"

"for blur_y.s0.x.x.rebased1322":                  ; preds = %"for blur_y.s0.x.x.rebased1322.preheader", %"consume blur_x1332"
  %blur_y.s0.x.x.rebased1324 = phi i32 [ %14100, %"consume blur_x1332" ], [ 0, %"for blur_y.s0.x.x.rebased1322.preheader" ]
  %14022 = add nsw i32 %blur_y.s0.x.x.rebased1324, %t1582776
  %a467 = shl nsw i32 %14022, 5
  %14023 = icmp sgt i32 %a327, %a467
  %b473 = select i1 %14023, i32 %a467, i32 %a327
  %14024 = icmp slt i32 %14022, 1
  %14025 = icmp sgt i32 %194, %a467
  %14026 = or i1 %14024, %14025
  br i1 %14026, label %"produce blur_x1329", label %"consume blur_x1332"

"end for blur_y.s0.x.x.rebased1323":              ; preds = %"consume blur_x1332", %"end for blur_y.s0.x.x.rebased1306"
  br i1 %224, label %"produce blur_x1336", label %after_bb1333

"produce blur_x1329":                             ; preds = %"for blur_y.s0.x.x.rebased1322"
  %14027 = icmp slt i32 %b473, %194
  %blur_x.s0.x.v1.base.s1330 = select i1 %14027, i32 %b473, i32 %194
  %t8211331 = add nsw i32 %blur_x.s0.x.v1.base.s1330, %t17931302
  %14028 = sext i32 %t8211331 to i64
  %14029 = getelementptr inbounds i16, i16* %read_input784, i64 %14028
  %14030 = getelementptr inbounds i16, i16* %14029, i64 1
  %14031 = bitcast i16* %14030 to <16 x i16>*
  %14032 = load <16 x i16>, <16 x i16>* %14031, align 2, !tbaa !396
  %14033 = getelementptr inbounds i16, i16* %14029, i64 17
  %14034 = bitcast i16* %14033 to <16 x i16>*
  %14035 = load <16 x i16>, <16 x i16>* %14034, align 2, !tbaa !396
  %14036 = getelementptr inbounds i16, i16* %14029, i64 2
  %14037 = bitcast i16* %14036 to <16 x i16>*
  %14038 = load <16 x i16>, <16 x i16>* %14037, align 2, !tbaa !396
  %14039 = getelementptr inbounds i16, i16* %14029, i64 18
  %14040 = bitcast i16* %14039 to <16 x i16>*
  %14041 = load <16 x i16>, <16 x i16>* %14040, align 2, !tbaa !396
  %14042 = bitcast i16* %14029 to <16 x i16>*
  %14043 = load <16 x i16>, <16 x i16>* %14042, align 2, !tbaa !396
  %14044 = getelementptr inbounds i16, i16* %14029, i64 16
  %14045 = bitcast i16* %14044 to <16 x i16>*
  %14046 = load <16 x i16>, <16 x i16>* %14045, align 2, !tbaa !396
  %14047 = add <16 x i16> %14038, %14032
  %14048 = add <16 x i16> %14047, %14043
  %14049 = add <16 x i16> %14041, %14035
  %14050 = add <16 x i16> %14049, %14046
  %14051 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14048, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14052 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14050, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14053 = shufflevector <16 x i16> %14051, <16 x i16> %14052, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14054 = lshr <32 x i16> %14053, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14055 = shufflevector <32 x i16> %14054, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14056 = sext i32 %blur_x.s0.x.v1.base.s1330 to i64
  %14057 = add nsw i64 %14056, %13937
  %14058 = getelementptr inbounds i16, i16* %blur_x841, i64 %14057
  %14059 = bitcast i16* %14058 to <16 x i16>*
  store <16 x i16> %14055, <16 x i16>* %14059, align 2, !tbaa !399
  %14060 = shufflevector <32 x i16> %14054, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14061 = getelementptr inbounds i16, i16* %14058, i64 16
  %14062 = bitcast i16* %14061 to <16 x i16>*
  store <16 x i16> %14060, <16 x i16>* %14062, align 2, !tbaa !399
  br label %"consume blur_x1332"

"consume blur_x1332":                             ; preds = %"for blur_y.s0.x.x.rebased1322", %"produce blur_x1329"
  %14063 = sext i32 %b473 to i64
  %14064 = add nsw i64 %13940, %14063
  %14065 = getelementptr inbounds i16, i16* %blur_x841, i64 %14064
  %14066 = bitcast i16* %14065 to <16 x i16>*
  %14067 = load <16 x i16>, <16 x i16>* %14066, align 2, !tbaa !399
  %14068 = getelementptr inbounds i16, i16* %14065, i64 16
  %14069 = bitcast i16* %14068 to <16 x i16>*
  %14070 = load <16 x i16>, <16 x i16>* %14069, align 2, !tbaa !399
  %14071 = add nsw i64 %13943, %14063
  %14072 = getelementptr inbounds i16, i16* %blur_x841, i64 %14071
  %14073 = bitcast i16* %14072 to <16 x i16>*
  %14074 = load <16 x i16>, <16 x i16>* %14073, align 2, !tbaa !399
  %14075 = getelementptr inbounds i16, i16* %14072, i64 16
  %14076 = bitcast i16* %14075 to <16 x i16>*
  %14077 = load <16 x i16>, <16 x i16>* %14076, align 2, !tbaa !399
  %14078 = add nsw i64 %13946, %14063
  %14079 = getelementptr inbounds i16, i16* %blur_x841, i64 %14078
  %14080 = bitcast i16* %14079 to <16 x i16>*
  %14081 = load <16 x i16>, <16 x i16>* %14080, align 2, !tbaa !399
  %14082 = getelementptr inbounds i16, i16* %14079, i64 16
  %14083 = bitcast i16* %14082 to <16 x i16>*
  %14084 = load <16 x i16>, <16 x i16>* %14083, align 2, !tbaa !399
  %14085 = add <16 x i16> %14074, %14067
  %14086 = add <16 x i16> %14085, %14081
  %14087 = add <16 x i16> %14077, %14070
  %14088 = add <16 x i16> %14087, %14084
  %14089 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14086, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14090 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14088, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14091 = shufflevector <16 x i16> %14089, <16 x i16> %14090, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14092 = lshr <32 x i16> %14091, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14093 = shufflevector <32 x i16> %14092, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14094 = add nsw i64 %13950, %14063
  %14095 = getelementptr inbounds i16, i16* %255, i64 %14094
  %14096 = bitcast i16* %14095 to <16 x i16>*
  store <16 x i16> %14093, <16 x i16>* %14096, align 2, !tbaa !401
  %14097 = shufflevector <32 x i16> %14092, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14098 = getelementptr inbounds i16, i16* %14095, i64 16
  %14099 = bitcast i16* %14098 to <16 x i16>*
  store <16 x i16> %14097, <16 x i16>* %14099, align 2, !tbaa !401
  %14100 = add nuw nsw i32 %blur_y.s0.x.x.rebased1324, 1
  %.not2481 = icmp eq i32 %14100, %t1639861
  br i1 %.not2481, label %"end for blur_y.s0.x.x.rebased1323", label %"for blur_y.s0.x.x.rebased1322"

after_bb1333:                                     ; preds = %"end for blur_y.s0.x.x.rebased1323", %"produce blur_x1336"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1348.preheader", label %"end for blur_y.s0.x.x.rebased1349", !prof !386

"for blur_y.s0.x.x.rebased1348.preheader":        ; preds = %after_bb1333
  %14101 = sext i32 %t1638848 to i64
  %14102 = zext i32 %.pre-phi3338 to i64
  %14103 = mul nsw i64 %14102, %298
  %14104 = sub nsw i64 %14103, %285
  %14105 = zext i32 %.pre-phi3324 to i64
  %14106 = mul nsw i64 %14105, %298
  %14107 = sub nsw i64 %14106, %285
  %14108 = zext i32 %.pre-phi3332 to i64
  %14109 = mul nsw i64 %14108, %298
  %14110 = sub nsw i64 %14109, %285
  %14111 = sext i32 %a339 to i64
  %14112 = add nsw i64 %14111, 10
  %14113 = mul nsw i64 %14112, %299
  %14114 = add nsw i64 %14113, %302
  br label %"for blur_y.s0.x.x.rebased1348"

"produce blur_x1336":                             ; preds = %"end for blur_y.s0.x.x.rebased1323"
  %14115 = getelementptr inbounds i16, i16* %read_input784, i64 %321
  %14116 = getelementptr inbounds i16, i16* %14115, i64 -31
  %14117 = bitcast i16* %14116 to <16 x i16>*
  %14118 = load <16 x i16>, <16 x i16>* %14117, align 2, !tbaa !396
  %14119 = getelementptr inbounds i16, i16* %14115, i64 -15
  %14120 = bitcast i16* %14119 to <16 x i16>*
  %14121 = load <16 x i16>, <16 x i16>* %14120, align 2, !tbaa !396
  %14122 = getelementptr inbounds i16, i16* %14115, i64 -30
  %14123 = bitcast i16* %14122 to <16 x i16>*
  %14124 = load <16 x i16>, <16 x i16>* %14123, align 2, !tbaa !396
  %14125 = getelementptr inbounds i16, i16* %14115, i64 -14
  %14126 = bitcast i16* %14125 to <16 x i16>*
  %14127 = load <16 x i16>, <16 x i16>* %14126, align 2, !tbaa !396
  %14128 = getelementptr inbounds i16, i16* %14115, i64 -32
  %14129 = bitcast i16* %14128 to <16 x i16>*
  %14130 = load <16 x i16>, <16 x i16>* %14129, align 2, !tbaa !396
  %14131 = getelementptr inbounds i16, i16* %14115, i64 -16
  %14132 = bitcast i16* %14131 to <16 x i16>*
  %14133 = load <16 x i16>, <16 x i16>* %14132, align 2, !tbaa !396
  %14134 = add <16 x i16> %14124, %14118
  %14135 = add <16 x i16> %14134, %14130
  %14136 = add <16 x i16> %14127, %14121
  %14137 = add <16 x i16> %14136, %14133
  %14138 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14135, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14139 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14137, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14140 = shufflevector <16 x i16> %14138, <16 x i16> %14139, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14141 = lshr <32 x i16> %14140, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14142 = shufflevector <32 x i16> %14141, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14143 = zext i32 %.pre-phi3324 to i64
  %14144 = mul nsw i64 %286, %14143
  %14145 = add nsw i64 %288, %14144
  %14146 = getelementptr inbounds i16, i16* %blur_x841, i64 %14145
  %14147 = getelementptr inbounds i16, i16* %14146, i64 -32
  %14148 = bitcast i16* %14147 to <16 x i16>*
  store <16 x i16> %14142, <16 x i16>* %14148, align 2, !tbaa !399
  %14149 = shufflevector <32 x i16> %14141, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14150 = getelementptr inbounds i16, i16* %14146, i64 -16
  %14151 = bitcast i16* %14150 to <16 x i16>*
  store <16 x i16> %14149, <16 x i16>* %14151, align 2, !tbaa !399
  %14152 = zext i32 %.pre-phi3338 to i64
  %14153 = mul nsw i64 %14152, %298
  %14154 = add nsw i64 %14153, %283
  %14155 = getelementptr inbounds i16, i16* %blur_x841, i64 %14154
  %14156 = getelementptr inbounds i16, i16* %14155, i64 -32
  %14157 = bitcast i16* %14156 to <16 x i16>*
  %14158 = load <16 x i16>, <16 x i16>* %14157, align 2, !tbaa !399
  %14159 = getelementptr inbounds i16, i16* %14155, i64 -16
  %14160 = bitcast i16* %14159 to <16 x i16>*
  %14161 = load <16 x i16>, <16 x i16>* %14160, align 2, !tbaa !399
  %14162 = mul nsw i64 %14143, %298
  %14163 = add nsw i64 %14162, %283
  %14164 = getelementptr inbounds i16, i16* %blur_x841, i64 %14163
  %14165 = getelementptr inbounds i16, i16* %14164, i64 -32
  %14166 = bitcast i16* %14165 to <16 x i16>*
  %14167 = load <16 x i16>, <16 x i16>* %14166, align 2, !tbaa !399
  %14168 = getelementptr inbounds i16, i16* %14164, i64 -16
  %14169 = bitcast i16* %14168 to <16 x i16>*
  %14170 = load <16 x i16>, <16 x i16>* %14169, align 2, !tbaa !399
  %14171 = zext i32 %.pre-phi3332 to i64
  %14172 = mul nsw i64 %14171, %298
  %14173 = add nsw i64 %14172, %283
  %14174 = getelementptr inbounds i16, i16* %blur_x841, i64 %14173
  %14175 = getelementptr inbounds i16, i16* %14174, i64 -32
  %14176 = bitcast i16* %14175 to <16 x i16>*
  %14177 = load <16 x i16>, <16 x i16>* %14176, align 2, !tbaa !399
  %14178 = getelementptr inbounds i16, i16* %14174, i64 -16
  %14179 = bitcast i16* %14178 to <16 x i16>*
  %14180 = load <16 x i16>, <16 x i16>* %14179, align 2, !tbaa !399
  %14181 = add <16 x i16> %14167, %14158
  %14182 = add <16 x i16> %14181, %14177
  %14183 = add <16 x i16> %14170, %14161
  %14184 = add <16 x i16> %14183, %14180
  %14185 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14182, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14186 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14184, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14187 = shufflevector <16 x i16> %14185, <16 x i16> %14186, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14188 = lshr <32 x i16> %14187, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14189 = shufflevector <32 x i16> %14188, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14190 = sext i32 %a339 to i64
  %14191 = add nsw i64 %14190, 10
  %14192 = mul nsw i64 %14191, %299
  %14193 = add nsw i64 %301, %14192
  %14194 = getelementptr inbounds i16, i16* %255, i64 %14193
  %14195 = getelementptr inbounds i16, i16* %14194, i64 -32
  %14196 = bitcast i16* %14195 to <16 x i16>*
  store <16 x i16> %14189, <16 x i16>* %14196, align 2, !tbaa !401
  %14197 = shufflevector <32 x i16> %14188, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14198 = getelementptr inbounds i16, i16* %14194, i64 -16
  %14199 = bitcast i16* %14198 to <16 x i16>*
  store <16 x i16> %14197, <16 x i16>* %14199, align 2, !tbaa !401
  br label %after_bb1333

"for blur_y.s0.x.x.rebased1348":                  ; preds = %"for blur_y.s0.x.x.rebased1348.preheader", %"consume blur_x1357"
  %indvars.iv3177 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1348.preheader" ], [ %indvars.iv.next3178, %"consume blur_x1357" ]
  %14200 = add nsw i64 %indvars.iv3177, %290
  %14201 = icmp slt i64 %14200, 1
  %14202 = trunc i64 %14200 to i32
  %14203 = shl nsw i32 %14202, 5
  %14204 = icmp sgt i32 %194, %14203
  %14205 = or i1 %14201, %14204
  br i1 %14205, label %"produce blur_x1355", label %"for blur_y.s0.x.x.rebased1348.consume blur_x1357_crit_edge"

"for blur_y.s0.x.x.rebased1348.consume blur_x1357_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1348"
  %.pre3357 = shl nsw i64 %14200, 5
  br label %"consume blur_x1357"

"end for blur_y.s0.x.x.rebased1349":              ; preds = %"consume blur_x1357", %after_bb1333
  br i1 %291, label %"for blur_y.s0.x.x.rebased1365.preheader", label %"end for blur_y.s0.x.x.rebased1366", !prof !386

"for blur_y.s0.x.x.rebased1365.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1349"
  %14206 = sext i32 %t1638848 to i64
  %14207 = zext i32 %.pre-phi3338 to i64
  %14208 = mul nsw i64 %14207, %298
  %14209 = sub nsw i64 %14208, %285
  %14210 = zext i32 %.pre-phi3324 to i64
  %14211 = mul nsw i64 %14210, %298
  %14212 = sub nsw i64 %14211, %285
  %14213 = zext i32 %.pre-phi3332 to i64
  %14214 = mul nsw i64 %14213, %298
  %14215 = sub nsw i64 %14214, %285
  %14216 = sext i32 %a339 to i64
  %14217 = add nsw i64 %14216, 10
  %14218 = mul nsw i64 %14217, %299
  %14219 = add nsw i64 %14218, %302
  br label %"for blur_y.s0.x.x.rebased1365"

"produce blur_x1355":                             ; preds = %"for blur_y.s0.x.x.rebased1348"
  %t8321356 = add nsw i32 %14203, %t18091345
  %14220 = sext i32 %t8321356 to i64
  %14221 = getelementptr inbounds i16, i16* %read_input784, i64 %14220
  %14222 = getelementptr inbounds i16, i16* %14221, i64 1
  %14223 = bitcast i16* %14222 to <16 x i16>*
  %14224 = load <16 x i16>, <16 x i16>* %14223, align 2, !tbaa !396
  %14225 = getelementptr inbounds i16, i16* %14221, i64 17
  %14226 = bitcast i16* %14225 to <16 x i16>*
  %14227 = load <16 x i16>, <16 x i16>* %14226, align 2, !tbaa !396
  %14228 = getelementptr inbounds i16, i16* %14221, i64 2
  %14229 = bitcast i16* %14228 to <16 x i16>*
  %14230 = load <16 x i16>, <16 x i16>* %14229, align 2, !tbaa !396
  %14231 = getelementptr inbounds i16, i16* %14221, i64 18
  %14232 = bitcast i16* %14231 to <16 x i16>*
  %14233 = load <16 x i16>, <16 x i16>* %14232, align 2, !tbaa !396
  %14234 = bitcast i16* %14221 to <16 x i16>*
  %14235 = load <16 x i16>, <16 x i16>* %14234, align 2, !tbaa !396
  %14236 = getelementptr inbounds i16, i16* %14221, i64 16
  %14237 = bitcast i16* %14236 to <16 x i16>*
  %14238 = load <16 x i16>, <16 x i16>* %14237, align 2, !tbaa !396
  %14239 = add <16 x i16> %14230, %14224
  %14240 = add <16 x i16> %14239, %14235
  %14241 = add <16 x i16> %14233, %14227
  %14242 = add <16 x i16> %14241, %14238
  %14243 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14240, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14244 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14242, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14245 = shufflevector <16 x i16> %14243, <16 x i16> %14244, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14246 = lshr <32 x i16> %14245, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14247 = shufflevector <32 x i16> %14246, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14248 = shl nsw i64 %14200, 5
  %14249 = add nsw i64 %14248, %14101
  %14250 = getelementptr inbounds i16, i16* %blur_x841, i64 %14249
  %14251 = bitcast i16* %14250 to <16 x i16>*
  store <16 x i16> %14247, <16 x i16>* %14251, align 2, !tbaa !399
  %14252 = shufflevector <32 x i16> %14246, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14253 = getelementptr inbounds i16, i16* %14250, i64 16
  %14254 = bitcast i16* %14253 to <16 x i16>*
  store <16 x i16> %14252, <16 x i16>* %14254, align 2, !tbaa !399
  br label %"consume blur_x1357"

"consume blur_x1357":                             ; preds = %"for blur_y.s0.x.x.rebased1348.consume blur_x1357_crit_edge", %"produce blur_x1355"
  %.pre-phi3358 = phi i64 [ %.pre3357, %"for blur_y.s0.x.x.rebased1348.consume blur_x1357_crit_edge" ], [ %14248, %"produce blur_x1355" ]
  %14255 = add nsw i64 %14104, %.pre-phi3358
  %14256 = getelementptr inbounds i16, i16* %blur_x841, i64 %14255
  %14257 = bitcast i16* %14256 to <16 x i16>*
  %14258 = load <16 x i16>, <16 x i16>* %14257, align 2, !tbaa !399
  %14259 = getelementptr inbounds i16, i16* %14256, i64 16
  %14260 = bitcast i16* %14259 to <16 x i16>*
  %14261 = load <16 x i16>, <16 x i16>* %14260, align 2, !tbaa !399
  %14262 = add nsw i64 %14107, %.pre-phi3358
  %14263 = getelementptr inbounds i16, i16* %blur_x841, i64 %14262
  %14264 = bitcast i16* %14263 to <16 x i16>*
  %14265 = load <16 x i16>, <16 x i16>* %14264, align 2, !tbaa !399
  %14266 = getelementptr inbounds i16, i16* %14263, i64 16
  %14267 = bitcast i16* %14266 to <16 x i16>*
  %14268 = load <16 x i16>, <16 x i16>* %14267, align 2, !tbaa !399
  %14269 = add nsw i64 %14110, %.pre-phi3358
  %14270 = getelementptr inbounds i16, i16* %blur_x841, i64 %14269
  %14271 = bitcast i16* %14270 to <16 x i16>*
  %14272 = load <16 x i16>, <16 x i16>* %14271, align 2, !tbaa !399
  %14273 = getelementptr inbounds i16, i16* %14270, i64 16
  %14274 = bitcast i16* %14273 to <16 x i16>*
  %14275 = load <16 x i16>, <16 x i16>* %14274, align 2, !tbaa !399
  %14276 = add <16 x i16> %14265, %14258
  %14277 = add <16 x i16> %14276, %14272
  %14278 = add <16 x i16> %14268, %14261
  %14279 = add <16 x i16> %14278, %14275
  %14280 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14277, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14281 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14279, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14282 = shufflevector <16 x i16> %14280, <16 x i16> %14281, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14283 = lshr <32 x i16> %14282, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14284 = shufflevector <32 x i16> %14283, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14285 = add nsw i64 %14114, %.pre-phi3358
  %14286 = getelementptr inbounds i16, i16* %255, i64 %14285
  %14287 = bitcast i16* %14286 to <16 x i16>*
  store <16 x i16> %14284, <16 x i16>* %14287, align 2, !tbaa !401
  %14288 = shufflevector <32 x i16> %14283, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14289 = getelementptr inbounds i16, i16* %14286, i64 16
  %14290 = bitcast i16* %14289 to <16 x i16>*
  store <16 x i16> %14288, <16 x i16>* %14290, align 2, !tbaa !401
  %indvars.iv.next3178 = add nuw nsw i64 %indvars.iv3177, 1
  %.not2480 = icmp eq i64 %indvars.iv.next3178, %370
  br i1 %.not2480, label %"end for blur_y.s0.x.x.rebased1349", label %"for blur_y.s0.x.x.rebased1348"

"for blur_y.s0.x.x.rebased1365":                  ; preds = %"for blur_y.s0.x.x.rebased1365.preheader", %"consume blur_x1375"
  %blur_y.s0.x.x.rebased1367 = phi i32 [ %14369, %"consume blur_x1375" ], [ 0, %"for blur_y.s0.x.x.rebased1365.preheader" ]
  %14291 = add nsw i32 %blur_y.s0.x.x.rebased1367, %t1582776
  %a474 = shl nsw i32 %14291, 5
  %14292 = icmp sgt i32 %a327, %a474
  %b480 = select i1 %14292, i32 %a474, i32 %a327
  %14293 = icmp slt i32 %14291, 1
  %14294 = icmp sgt i32 %194, %a474
  %14295 = or i1 %14293, %14294
  br i1 %14295, label %"produce blur_x1372", label %"consume blur_x1375"

"end for blur_y.s0.x.x.rebased1366":              ; preds = %"consume blur_x1375", %"end for blur_y.s0.x.x.rebased1349"
  br i1 %224, label %"produce blur_x1379", label %after_bb1376

"produce blur_x1372":                             ; preds = %"for blur_y.s0.x.x.rebased1365"
  %14296 = icmp slt i32 %b480, %194
  %blur_x.s0.x.v1.base.s1373 = select i1 %14296, i32 %b480, i32 %194
  %t8371374 = add nsw i32 %blur_x.s0.x.v1.base.s1373, %t18091345
  %14297 = sext i32 %t8371374 to i64
  %14298 = getelementptr inbounds i16, i16* %read_input784, i64 %14297
  %14299 = getelementptr inbounds i16, i16* %14298, i64 1
  %14300 = bitcast i16* %14299 to <16 x i16>*
  %14301 = load <16 x i16>, <16 x i16>* %14300, align 2, !tbaa !396
  %14302 = getelementptr inbounds i16, i16* %14298, i64 17
  %14303 = bitcast i16* %14302 to <16 x i16>*
  %14304 = load <16 x i16>, <16 x i16>* %14303, align 2, !tbaa !396
  %14305 = getelementptr inbounds i16, i16* %14298, i64 2
  %14306 = bitcast i16* %14305 to <16 x i16>*
  %14307 = load <16 x i16>, <16 x i16>* %14306, align 2, !tbaa !396
  %14308 = getelementptr inbounds i16, i16* %14298, i64 18
  %14309 = bitcast i16* %14308 to <16 x i16>*
  %14310 = load <16 x i16>, <16 x i16>* %14309, align 2, !tbaa !396
  %14311 = bitcast i16* %14298 to <16 x i16>*
  %14312 = load <16 x i16>, <16 x i16>* %14311, align 2, !tbaa !396
  %14313 = getelementptr inbounds i16, i16* %14298, i64 16
  %14314 = bitcast i16* %14313 to <16 x i16>*
  %14315 = load <16 x i16>, <16 x i16>* %14314, align 2, !tbaa !396
  %14316 = add <16 x i16> %14307, %14301
  %14317 = add <16 x i16> %14316, %14312
  %14318 = add <16 x i16> %14310, %14304
  %14319 = add <16 x i16> %14318, %14315
  %14320 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14317, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14321 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14319, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14322 = shufflevector <16 x i16> %14320, <16 x i16> %14321, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14323 = lshr <32 x i16> %14322, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14324 = shufflevector <32 x i16> %14323, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14325 = sext i32 %blur_x.s0.x.v1.base.s1373 to i64
  %14326 = add nsw i64 %14325, %14206
  %14327 = getelementptr inbounds i16, i16* %blur_x841, i64 %14326
  %14328 = bitcast i16* %14327 to <16 x i16>*
  store <16 x i16> %14324, <16 x i16>* %14328, align 2, !tbaa !399
  %14329 = shufflevector <32 x i16> %14323, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14330 = getelementptr inbounds i16, i16* %14327, i64 16
  %14331 = bitcast i16* %14330 to <16 x i16>*
  store <16 x i16> %14329, <16 x i16>* %14331, align 2, !tbaa !399
  br label %"consume blur_x1375"

"consume blur_x1375":                             ; preds = %"for blur_y.s0.x.x.rebased1365", %"produce blur_x1372"
  %14332 = sext i32 %b480 to i64
  %14333 = add nsw i64 %14209, %14332
  %14334 = getelementptr inbounds i16, i16* %blur_x841, i64 %14333
  %14335 = bitcast i16* %14334 to <16 x i16>*
  %14336 = load <16 x i16>, <16 x i16>* %14335, align 2, !tbaa !399
  %14337 = getelementptr inbounds i16, i16* %14334, i64 16
  %14338 = bitcast i16* %14337 to <16 x i16>*
  %14339 = load <16 x i16>, <16 x i16>* %14338, align 2, !tbaa !399
  %14340 = add nsw i64 %14212, %14332
  %14341 = getelementptr inbounds i16, i16* %blur_x841, i64 %14340
  %14342 = bitcast i16* %14341 to <16 x i16>*
  %14343 = load <16 x i16>, <16 x i16>* %14342, align 2, !tbaa !399
  %14344 = getelementptr inbounds i16, i16* %14341, i64 16
  %14345 = bitcast i16* %14344 to <16 x i16>*
  %14346 = load <16 x i16>, <16 x i16>* %14345, align 2, !tbaa !399
  %14347 = add nsw i64 %14215, %14332
  %14348 = getelementptr inbounds i16, i16* %blur_x841, i64 %14347
  %14349 = bitcast i16* %14348 to <16 x i16>*
  %14350 = load <16 x i16>, <16 x i16>* %14349, align 2, !tbaa !399
  %14351 = getelementptr inbounds i16, i16* %14348, i64 16
  %14352 = bitcast i16* %14351 to <16 x i16>*
  %14353 = load <16 x i16>, <16 x i16>* %14352, align 2, !tbaa !399
  %14354 = add <16 x i16> %14343, %14336
  %14355 = add <16 x i16> %14354, %14350
  %14356 = add <16 x i16> %14346, %14339
  %14357 = add <16 x i16> %14356, %14353
  %14358 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14355, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14359 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14357, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14360 = shufflevector <16 x i16> %14358, <16 x i16> %14359, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14361 = lshr <32 x i16> %14360, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14362 = shufflevector <32 x i16> %14361, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14363 = add nsw i64 %14219, %14332
  %14364 = getelementptr inbounds i16, i16* %255, i64 %14363
  %14365 = bitcast i16* %14364 to <16 x i16>*
  store <16 x i16> %14362, <16 x i16>* %14365, align 2, !tbaa !401
  %14366 = shufflevector <32 x i16> %14361, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14367 = getelementptr inbounds i16, i16* %14364, i64 16
  %14368 = bitcast i16* %14367 to <16 x i16>*
  store <16 x i16> %14366, <16 x i16>* %14368, align 2, !tbaa !401
  %14369 = add nuw nsw i32 %blur_y.s0.x.x.rebased1367, 1
  %.not2479 = icmp eq i32 %14369, %t1639861
  br i1 %.not2479, label %"end for blur_y.s0.x.x.rebased1366", label %"for blur_y.s0.x.x.rebased1365"

after_bb1376:                                     ; preds = %"end for blur_y.s0.x.x.rebased1366", %"produce blur_x1379"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1391.preheader", label %"end for blur_y.s0.x.x.rebased1392", !prof !386

"for blur_y.s0.x.x.rebased1391.preheader":        ; preds = %after_bb1376
  %14370 = sext i32 %t1644878 to i64
  %14371 = zext i32 %.pre-phi3324 to i64
  %14372 = mul nsw i64 %14371, %298
  %14373 = sub nsw i64 %14372, %285
  %14374 = zext i32 %.pre-phi3328 to i64
  %14375 = mul nsw i64 %14374, %298
  %14376 = sub nsw i64 %14375, %285
  %14377 = zext i32 %.pre-phi3338 to i64
  %14378 = mul nsw i64 %14377, %298
  %14379 = sub nsw i64 %14378, %285
  %14380 = sext i32 %a339 to i64
  %14381 = add nsw i64 %14380, 11
  %14382 = mul nsw i64 %14381, %299
  %14383 = add nsw i64 %14382, %302
  br label %"for blur_y.s0.x.x.rebased1391"

"produce blur_x1379":                             ; preds = %"end for blur_y.s0.x.x.rebased1366"
  %14384 = getelementptr inbounds i16, i16* %read_input784, i64 %323
  %14385 = getelementptr inbounds i16, i16* %14384, i64 -31
  %14386 = bitcast i16* %14385 to <16 x i16>*
  %14387 = load <16 x i16>, <16 x i16>* %14386, align 2, !tbaa !396
  %14388 = getelementptr inbounds i16, i16* %14384, i64 -15
  %14389 = bitcast i16* %14388 to <16 x i16>*
  %14390 = load <16 x i16>, <16 x i16>* %14389, align 2, !tbaa !396
  %14391 = getelementptr inbounds i16, i16* %14384, i64 -30
  %14392 = bitcast i16* %14391 to <16 x i16>*
  %14393 = load <16 x i16>, <16 x i16>* %14392, align 2, !tbaa !396
  %14394 = getelementptr inbounds i16, i16* %14384, i64 -14
  %14395 = bitcast i16* %14394 to <16 x i16>*
  %14396 = load <16 x i16>, <16 x i16>* %14395, align 2, !tbaa !396
  %14397 = getelementptr inbounds i16, i16* %14384, i64 -32
  %14398 = bitcast i16* %14397 to <16 x i16>*
  %14399 = load <16 x i16>, <16 x i16>* %14398, align 2, !tbaa !396
  %14400 = getelementptr inbounds i16, i16* %14384, i64 -16
  %14401 = bitcast i16* %14400 to <16 x i16>*
  %14402 = load <16 x i16>, <16 x i16>* %14401, align 2, !tbaa !396
  %14403 = add <16 x i16> %14393, %14387
  %14404 = add <16 x i16> %14403, %14399
  %14405 = add <16 x i16> %14396, %14390
  %14406 = add <16 x i16> %14405, %14402
  %14407 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14404, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14408 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14406, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14409 = shufflevector <16 x i16> %14407, <16 x i16> %14408, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14410 = lshr <32 x i16> %14409, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14411 = shufflevector <32 x i16> %14410, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14412 = zext i32 %.pre-phi3328 to i64
  %14413 = mul nsw i64 %286, %14412
  %14414 = add nsw i64 %288, %14413
  %14415 = getelementptr inbounds i16, i16* %blur_x841, i64 %14414
  %14416 = getelementptr inbounds i16, i16* %14415, i64 -32
  %14417 = bitcast i16* %14416 to <16 x i16>*
  store <16 x i16> %14411, <16 x i16>* %14417, align 2, !tbaa !399
  %14418 = shufflevector <32 x i16> %14410, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14419 = getelementptr inbounds i16, i16* %14415, i64 -16
  %14420 = bitcast i16* %14419 to <16 x i16>*
  store <16 x i16> %14418, <16 x i16>* %14420, align 2, !tbaa !399
  %14421 = zext i32 %.pre-phi3324 to i64
  %14422 = mul nsw i64 %14421, %298
  %14423 = add nsw i64 %14422, %283
  %14424 = getelementptr inbounds i16, i16* %blur_x841, i64 %14423
  %14425 = getelementptr inbounds i16, i16* %14424, i64 -32
  %14426 = bitcast i16* %14425 to <16 x i16>*
  %14427 = load <16 x i16>, <16 x i16>* %14426, align 2, !tbaa !399
  %14428 = getelementptr inbounds i16, i16* %14424, i64 -16
  %14429 = bitcast i16* %14428 to <16 x i16>*
  %14430 = load <16 x i16>, <16 x i16>* %14429, align 2, !tbaa !399
  %14431 = mul nsw i64 %14412, %298
  %14432 = add nsw i64 %14431, %283
  %14433 = getelementptr inbounds i16, i16* %blur_x841, i64 %14432
  %14434 = getelementptr inbounds i16, i16* %14433, i64 -32
  %14435 = bitcast i16* %14434 to <16 x i16>*
  %14436 = load <16 x i16>, <16 x i16>* %14435, align 2, !tbaa !399
  %14437 = getelementptr inbounds i16, i16* %14433, i64 -16
  %14438 = bitcast i16* %14437 to <16 x i16>*
  %14439 = load <16 x i16>, <16 x i16>* %14438, align 2, !tbaa !399
  %14440 = zext i32 %.pre-phi3338 to i64
  %14441 = mul nsw i64 %14440, %298
  %14442 = add nsw i64 %14441, %283
  %14443 = getelementptr inbounds i16, i16* %blur_x841, i64 %14442
  %14444 = getelementptr inbounds i16, i16* %14443, i64 -32
  %14445 = bitcast i16* %14444 to <16 x i16>*
  %14446 = load <16 x i16>, <16 x i16>* %14445, align 2, !tbaa !399
  %14447 = getelementptr inbounds i16, i16* %14443, i64 -16
  %14448 = bitcast i16* %14447 to <16 x i16>*
  %14449 = load <16 x i16>, <16 x i16>* %14448, align 2, !tbaa !399
  %14450 = add <16 x i16> %14436, %14427
  %14451 = add <16 x i16> %14450, %14446
  %14452 = add <16 x i16> %14439, %14430
  %14453 = add <16 x i16> %14452, %14449
  %14454 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14451, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14455 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14453, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14456 = shufflevector <16 x i16> %14454, <16 x i16> %14455, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14457 = lshr <32 x i16> %14456, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14458 = shufflevector <32 x i16> %14457, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14459 = sext i32 %a339 to i64
  %14460 = add nsw i64 %14459, 11
  %14461 = mul nsw i64 %14460, %299
  %14462 = add nsw i64 %301, %14461
  %14463 = getelementptr inbounds i16, i16* %255, i64 %14462
  %14464 = getelementptr inbounds i16, i16* %14463, i64 -32
  %14465 = bitcast i16* %14464 to <16 x i16>*
  store <16 x i16> %14458, <16 x i16>* %14465, align 2, !tbaa !401
  %14466 = shufflevector <32 x i16> %14457, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14467 = getelementptr inbounds i16, i16* %14463, i64 -16
  %14468 = bitcast i16* %14467 to <16 x i16>*
  store <16 x i16> %14466, <16 x i16>* %14468, align 2, !tbaa !401
  br label %after_bb1376

"for blur_y.s0.x.x.rebased1391":                  ; preds = %"for blur_y.s0.x.x.rebased1391.preheader", %"consume blur_x1400"
  %indvars.iv3180 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1391.preheader" ], [ %indvars.iv.next3181, %"consume blur_x1400" ]
  %14469 = add nsw i64 %indvars.iv3180, %290
  %14470 = icmp slt i64 %14469, 1
  %14471 = trunc i64 %14469 to i32
  %14472 = shl nsw i32 %14471, 5
  %14473 = icmp sgt i32 %194, %14472
  %14474 = or i1 %14470, %14473
  br i1 %14474, label %"produce blur_x1398", label %"for blur_y.s0.x.x.rebased1391.consume blur_x1400_crit_edge"

"for blur_y.s0.x.x.rebased1391.consume blur_x1400_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1391"
  %.pre3359 = shl nsw i64 %14469, 5
  br label %"consume blur_x1400"

"end for blur_y.s0.x.x.rebased1392":              ; preds = %"consume blur_x1400", %after_bb1376
  br i1 %291, label %"for blur_y.s0.x.x.rebased1408.preheader", label %"end for blur_y.s0.x.x.rebased1409", !prof !386

"for blur_y.s0.x.x.rebased1408.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1392"
  %14475 = sext i32 %t1644878 to i64
  %14476 = zext i32 %.pre-phi3324 to i64
  %14477 = mul nsw i64 %14476, %298
  %14478 = sub nsw i64 %14477, %285
  %14479 = zext i32 %.pre-phi3328 to i64
  %14480 = mul nsw i64 %14479, %298
  %14481 = sub nsw i64 %14480, %285
  %14482 = zext i32 %.pre-phi3338 to i64
  %14483 = mul nsw i64 %14482, %298
  %14484 = sub nsw i64 %14483, %285
  %14485 = sext i32 %a339 to i64
  %14486 = add nsw i64 %14485, 11
  %14487 = mul nsw i64 %14486, %299
  %14488 = add nsw i64 %14487, %302
  br label %"for blur_y.s0.x.x.rebased1408"

"produce blur_x1398":                             ; preds = %"for blur_y.s0.x.x.rebased1391"
  %t8481399 = add nsw i32 %14472, %t18251388
  %14489 = sext i32 %t8481399 to i64
  %14490 = getelementptr inbounds i16, i16* %read_input784, i64 %14489
  %14491 = getelementptr inbounds i16, i16* %14490, i64 1
  %14492 = bitcast i16* %14491 to <16 x i16>*
  %14493 = load <16 x i16>, <16 x i16>* %14492, align 2, !tbaa !396
  %14494 = getelementptr inbounds i16, i16* %14490, i64 17
  %14495 = bitcast i16* %14494 to <16 x i16>*
  %14496 = load <16 x i16>, <16 x i16>* %14495, align 2, !tbaa !396
  %14497 = getelementptr inbounds i16, i16* %14490, i64 2
  %14498 = bitcast i16* %14497 to <16 x i16>*
  %14499 = load <16 x i16>, <16 x i16>* %14498, align 2, !tbaa !396
  %14500 = getelementptr inbounds i16, i16* %14490, i64 18
  %14501 = bitcast i16* %14500 to <16 x i16>*
  %14502 = load <16 x i16>, <16 x i16>* %14501, align 2, !tbaa !396
  %14503 = bitcast i16* %14490 to <16 x i16>*
  %14504 = load <16 x i16>, <16 x i16>* %14503, align 2, !tbaa !396
  %14505 = getelementptr inbounds i16, i16* %14490, i64 16
  %14506 = bitcast i16* %14505 to <16 x i16>*
  %14507 = load <16 x i16>, <16 x i16>* %14506, align 2, !tbaa !396
  %14508 = add <16 x i16> %14499, %14493
  %14509 = add <16 x i16> %14508, %14504
  %14510 = add <16 x i16> %14502, %14496
  %14511 = add <16 x i16> %14510, %14507
  %14512 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14509, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14513 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14511, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14514 = shufflevector <16 x i16> %14512, <16 x i16> %14513, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14515 = lshr <32 x i16> %14514, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14516 = shufflevector <32 x i16> %14515, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14517 = shl nsw i64 %14469, 5
  %14518 = add nsw i64 %14517, %14370
  %14519 = getelementptr inbounds i16, i16* %blur_x841, i64 %14518
  %14520 = bitcast i16* %14519 to <16 x i16>*
  store <16 x i16> %14516, <16 x i16>* %14520, align 2, !tbaa !399
  %14521 = shufflevector <32 x i16> %14515, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14522 = getelementptr inbounds i16, i16* %14519, i64 16
  %14523 = bitcast i16* %14522 to <16 x i16>*
  store <16 x i16> %14521, <16 x i16>* %14523, align 2, !tbaa !399
  br label %"consume blur_x1400"

"consume blur_x1400":                             ; preds = %"for blur_y.s0.x.x.rebased1391.consume blur_x1400_crit_edge", %"produce blur_x1398"
  %.pre-phi3360 = phi i64 [ %.pre3359, %"for blur_y.s0.x.x.rebased1391.consume blur_x1400_crit_edge" ], [ %14517, %"produce blur_x1398" ]
  %14524 = add nsw i64 %14373, %.pre-phi3360
  %14525 = getelementptr inbounds i16, i16* %blur_x841, i64 %14524
  %14526 = bitcast i16* %14525 to <16 x i16>*
  %14527 = load <16 x i16>, <16 x i16>* %14526, align 2, !tbaa !399
  %14528 = getelementptr inbounds i16, i16* %14525, i64 16
  %14529 = bitcast i16* %14528 to <16 x i16>*
  %14530 = load <16 x i16>, <16 x i16>* %14529, align 2, !tbaa !399
  %14531 = add nsw i64 %14376, %.pre-phi3360
  %14532 = getelementptr inbounds i16, i16* %blur_x841, i64 %14531
  %14533 = bitcast i16* %14532 to <16 x i16>*
  %14534 = load <16 x i16>, <16 x i16>* %14533, align 2, !tbaa !399
  %14535 = getelementptr inbounds i16, i16* %14532, i64 16
  %14536 = bitcast i16* %14535 to <16 x i16>*
  %14537 = load <16 x i16>, <16 x i16>* %14536, align 2, !tbaa !399
  %14538 = add nsw i64 %14379, %.pre-phi3360
  %14539 = getelementptr inbounds i16, i16* %blur_x841, i64 %14538
  %14540 = bitcast i16* %14539 to <16 x i16>*
  %14541 = load <16 x i16>, <16 x i16>* %14540, align 2, !tbaa !399
  %14542 = getelementptr inbounds i16, i16* %14539, i64 16
  %14543 = bitcast i16* %14542 to <16 x i16>*
  %14544 = load <16 x i16>, <16 x i16>* %14543, align 2, !tbaa !399
  %14545 = add <16 x i16> %14534, %14527
  %14546 = add <16 x i16> %14545, %14541
  %14547 = add <16 x i16> %14537, %14530
  %14548 = add <16 x i16> %14547, %14544
  %14549 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14546, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14550 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14548, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14551 = shufflevector <16 x i16> %14549, <16 x i16> %14550, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14552 = lshr <32 x i16> %14551, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14553 = shufflevector <32 x i16> %14552, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14554 = add nsw i64 %14383, %.pre-phi3360
  %14555 = getelementptr inbounds i16, i16* %255, i64 %14554
  %14556 = bitcast i16* %14555 to <16 x i16>*
  store <16 x i16> %14553, <16 x i16>* %14556, align 2, !tbaa !401
  %14557 = shufflevector <32 x i16> %14552, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14558 = getelementptr inbounds i16, i16* %14555, i64 16
  %14559 = bitcast i16* %14558 to <16 x i16>*
  store <16 x i16> %14557, <16 x i16>* %14559, align 2, !tbaa !401
  %indvars.iv.next3181 = add nuw nsw i64 %indvars.iv3180, 1
  %.not2478 = icmp eq i64 %indvars.iv.next3181, %370
  br i1 %.not2478, label %"end for blur_y.s0.x.x.rebased1392", label %"for blur_y.s0.x.x.rebased1391"

"for blur_y.s0.x.x.rebased1408":                  ; preds = %"for blur_y.s0.x.x.rebased1408.preheader", %"consume blur_x1418"
  %blur_y.s0.x.x.rebased1410 = phi i32 [ %14638, %"consume blur_x1418" ], [ 0, %"for blur_y.s0.x.x.rebased1408.preheader" ]
  %14560 = add nsw i32 %blur_y.s0.x.x.rebased1410, %t1582776
  %a481 = shl nsw i32 %14560, 5
  %14561 = icmp sgt i32 %a327, %a481
  %b487 = select i1 %14561, i32 %a481, i32 %a327
  %14562 = icmp slt i32 %14560, 1
  %14563 = icmp sgt i32 %194, %a481
  %14564 = or i1 %14562, %14563
  br i1 %14564, label %"produce blur_x1415", label %"consume blur_x1418"

"end for blur_y.s0.x.x.rebased1409":              ; preds = %"consume blur_x1418", %"end for blur_y.s0.x.x.rebased1392"
  br i1 %224, label %"produce blur_x1422", label %after_bb1419

"produce blur_x1415":                             ; preds = %"for blur_y.s0.x.x.rebased1408"
  %14565 = icmp slt i32 %b487, %194
  %blur_x.s0.x.v1.base.s1416 = select i1 %14565, i32 %b487, i32 %194
  %t8531417 = add nsw i32 %blur_x.s0.x.v1.base.s1416, %t18251388
  %14566 = sext i32 %t8531417 to i64
  %14567 = getelementptr inbounds i16, i16* %read_input784, i64 %14566
  %14568 = getelementptr inbounds i16, i16* %14567, i64 1
  %14569 = bitcast i16* %14568 to <16 x i16>*
  %14570 = load <16 x i16>, <16 x i16>* %14569, align 2, !tbaa !396
  %14571 = getelementptr inbounds i16, i16* %14567, i64 17
  %14572 = bitcast i16* %14571 to <16 x i16>*
  %14573 = load <16 x i16>, <16 x i16>* %14572, align 2, !tbaa !396
  %14574 = getelementptr inbounds i16, i16* %14567, i64 2
  %14575 = bitcast i16* %14574 to <16 x i16>*
  %14576 = load <16 x i16>, <16 x i16>* %14575, align 2, !tbaa !396
  %14577 = getelementptr inbounds i16, i16* %14567, i64 18
  %14578 = bitcast i16* %14577 to <16 x i16>*
  %14579 = load <16 x i16>, <16 x i16>* %14578, align 2, !tbaa !396
  %14580 = bitcast i16* %14567 to <16 x i16>*
  %14581 = load <16 x i16>, <16 x i16>* %14580, align 2, !tbaa !396
  %14582 = getelementptr inbounds i16, i16* %14567, i64 16
  %14583 = bitcast i16* %14582 to <16 x i16>*
  %14584 = load <16 x i16>, <16 x i16>* %14583, align 2, !tbaa !396
  %14585 = add <16 x i16> %14576, %14570
  %14586 = add <16 x i16> %14585, %14581
  %14587 = add <16 x i16> %14579, %14573
  %14588 = add <16 x i16> %14587, %14584
  %14589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14586, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14590 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14588, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14591 = shufflevector <16 x i16> %14589, <16 x i16> %14590, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14592 = lshr <32 x i16> %14591, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14593 = shufflevector <32 x i16> %14592, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14594 = sext i32 %blur_x.s0.x.v1.base.s1416 to i64
  %14595 = add nsw i64 %14594, %14475
  %14596 = getelementptr inbounds i16, i16* %blur_x841, i64 %14595
  %14597 = bitcast i16* %14596 to <16 x i16>*
  store <16 x i16> %14593, <16 x i16>* %14597, align 2, !tbaa !399
  %14598 = shufflevector <32 x i16> %14592, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14599 = getelementptr inbounds i16, i16* %14596, i64 16
  %14600 = bitcast i16* %14599 to <16 x i16>*
  store <16 x i16> %14598, <16 x i16>* %14600, align 2, !tbaa !399
  br label %"consume blur_x1418"

"consume blur_x1418":                             ; preds = %"for blur_y.s0.x.x.rebased1408", %"produce blur_x1415"
  %14601 = sext i32 %b487 to i64
  %14602 = add nsw i64 %14478, %14601
  %14603 = getelementptr inbounds i16, i16* %blur_x841, i64 %14602
  %14604 = bitcast i16* %14603 to <16 x i16>*
  %14605 = load <16 x i16>, <16 x i16>* %14604, align 2, !tbaa !399
  %14606 = getelementptr inbounds i16, i16* %14603, i64 16
  %14607 = bitcast i16* %14606 to <16 x i16>*
  %14608 = load <16 x i16>, <16 x i16>* %14607, align 2, !tbaa !399
  %14609 = add nsw i64 %14481, %14601
  %14610 = getelementptr inbounds i16, i16* %blur_x841, i64 %14609
  %14611 = bitcast i16* %14610 to <16 x i16>*
  %14612 = load <16 x i16>, <16 x i16>* %14611, align 2, !tbaa !399
  %14613 = getelementptr inbounds i16, i16* %14610, i64 16
  %14614 = bitcast i16* %14613 to <16 x i16>*
  %14615 = load <16 x i16>, <16 x i16>* %14614, align 2, !tbaa !399
  %14616 = add nsw i64 %14484, %14601
  %14617 = getelementptr inbounds i16, i16* %blur_x841, i64 %14616
  %14618 = bitcast i16* %14617 to <16 x i16>*
  %14619 = load <16 x i16>, <16 x i16>* %14618, align 2, !tbaa !399
  %14620 = getelementptr inbounds i16, i16* %14617, i64 16
  %14621 = bitcast i16* %14620 to <16 x i16>*
  %14622 = load <16 x i16>, <16 x i16>* %14621, align 2, !tbaa !399
  %14623 = add <16 x i16> %14612, %14605
  %14624 = add <16 x i16> %14623, %14619
  %14625 = add <16 x i16> %14615, %14608
  %14626 = add <16 x i16> %14625, %14622
  %14627 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14624, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14628 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14626, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14629 = shufflevector <16 x i16> %14627, <16 x i16> %14628, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14630 = lshr <32 x i16> %14629, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14631 = shufflevector <32 x i16> %14630, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14632 = add nsw i64 %14488, %14601
  %14633 = getelementptr inbounds i16, i16* %255, i64 %14632
  %14634 = bitcast i16* %14633 to <16 x i16>*
  store <16 x i16> %14631, <16 x i16>* %14634, align 2, !tbaa !401
  %14635 = shufflevector <32 x i16> %14630, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14636 = getelementptr inbounds i16, i16* %14633, i64 16
  %14637 = bitcast i16* %14636 to <16 x i16>*
  store <16 x i16> %14635, <16 x i16>* %14637, align 2, !tbaa !401
  %14638 = add nuw nsw i32 %blur_y.s0.x.x.rebased1410, 1
  %.not2477 = icmp eq i32 %14638, %t1639861
  br i1 %.not2477, label %"end for blur_y.s0.x.x.rebased1409", label %"for blur_y.s0.x.x.rebased1408"

after_bb1419:                                     ; preds = %"end for blur_y.s0.x.x.rebased1409", %"produce blur_x1422"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1434.preheader", label %"end for blur_y.s0.x.x.rebased1435", !prof !386

"for blur_y.s0.x.x.rebased1434.preheader":        ; preds = %after_bb1419
  %14639 = sext i32 %t1650914 to i64
  %14640 = zext i32 %.pre-phi3328 to i64
  %14641 = mul nsw i64 %14640, %298
  %14642 = sub nsw i64 %14641, %285
  %14643 = zext i32 %.pre-phi3332 to i64
  %14644 = mul nsw i64 %14643, %298
  %14645 = sub nsw i64 %14644, %285
  %14646 = zext i32 %.pre-phi3324 to i64
  %14647 = mul nsw i64 %14646, %298
  %14648 = sub nsw i64 %14647, %285
  %14649 = sext i32 %a339 to i64
  %14650 = add nsw i64 %14649, 12
  %14651 = mul nsw i64 %14650, %299
  %14652 = add nsw i64 %14651, %302
  br label %"for blur_y.s0.x.x.rebased1434"

"produce blur_x1422":                             ; preds = %"end for blur_y.s0.x.x.rebased1409"
  %14653 = getelementptr inbounds i16, i16* %read_input784, i64 %325
  %14654 = getelementptr inbounds i16, i16* %14653, i64 -31
  %14655 = bitcast i16* %14654 to <16 x i16>*
  %14656 = load <16 x i16>, <16 x i16>* %14655, align 2, !tbaa !396
  %14657 = getelementptr inbounds i16, i16* %14653, i64 -15
  %14658 = bitcast i16* %14657 to <16 x i16>*
  %14659 = load <16 x i16>, <16 x i16>* %14658, align 2, !tbaa !396
  %14660 = getelementptr inbounds i16, i16* %14653, i64 -30
  %14661 = bitcast i16* %14660 to <16 x i16>*
  %14662 = load <16 x i16>, <16 x i16>* %14661, align 2, !tbaa !396
  %14663 = getelementptr inbounds i16, i16* %14653, i64 -14
  %14664 = bitcast i16* %14663 to <16 x i16>*
  %14665 = load <16 x i16>, <16 x i16>* %14664, align 2, !tbaa !396
  %14666 = getelementptr inbounds i16, i16* %14653, i64 -32
  %14667 = bitcast i16* %14666 to <16 x i16>*
  %14668 = load <16 x i16>, <16 x i16>* %14667, align 2, !tbaa !396
  %14669 = getelementptr inbounds i16, i16* %14653, i64 -16
  %14670 = bitcast i16* %14669 to <16 x i16>*
  %14671 = load <16 x i16>, <16 x i16>* %14670, align 2, !tbaa !396
  %14672 = add <16 x i16> %14662, %14656
  %14673 = add <16 x i16> %14672, %14668
  %14674 = add <16 x i16> %14665, %14659
  %14675 = add <16 x i16> %14674, %14671
  %14676 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14673, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14677 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14675, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14678 = shufflevector <16 x i16> %14676, <16 x i16> %14677, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14679 = lshr <32 x i16> %14678, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14680 = shufflevector <32 x i16> %14679, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14681 = zext i32 %.pre-phi3332 to i64
  %14682 = mul nsw i64 %286, %14681
  %14683 = add nsw i64 %288, %14682
  %14684 = getelementptr inbounds i16, i16* %blur_x841, i64 %14683
  %14685 = getelementptr inbounds i16, i16* %14684, i64 -32
  %14686 = bitcast i16* %14685 to <16 x i16>*
  store <16 x i16> %14680, <16 x i16>* %14686, align 2, !tbaa !399
  %14687 = shufflevector <32 x i16> %14679, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14688 = getelementptr inbounds i16, i16* %14684, i64 -16
  %14689 = bitcast i16* %14688 to <16 x i16>*
  store <16 x i16> %14687, <16 x i16>* %14689, align 2, !tbaa !399
  %14690 = zext i32 %.pre-phi3328 to i64
  %14691 = mul nsw i64 %14690, %298
  %14692 = add nsw i64 %14691, %283
  %14693 = getelementptr inbounds i16, i16* %blur_x841, i64 %14692
  %14694 = getelementptr inbounds i16, i16* %14693, i64 -32
  %14695 = bitcast i16* %14694 to <16 x i16>*
  %14696 = load <16 x i16>, <16 x i16>* %14695, align 2, !tbaa !399
  %14697 = getelementptr inbounds i16, i16* %14693, i64 -16
  %14698 = bitcast i16* %14697 to <16 x i16>*
  %14699 = load <16 x i16>, <16 x i16>* %14698, align 2, !tbaa !399
  %14700 = mul nsw i64 %14681, %298
  %14701 = add nsw i64 %14700, %283
  %14702 = getelementptr inbounds i16, i16* %blur_x841, i64 %14701
  %14703 = getelementptr inbounds i16, i16* %14702, i64 -32
  %14704 = bitcast i16* %14703 to <16 x i16>*
  %14705 = load <16 x i16>, <16 x i16>* %14704, align 2, !tbaa !399
  %14706 = getelementptr inbounds i16, i16* %14702, i64 -16
  %14707 = bitcast i16* %14706 to <16 x i16>*
  %14708 = load <16 x i16>, <16 x i16>* %14707, align 2, !tbaa !399
  %14709 = zext i32 %.pre-phi3324 to i64
  %14710 = mul nsw i64 %14709, %298
  %14711 = add nsw i64 %14710, %283
  %14712 = getelementptr inbounds i16, i16* %blur_x841, i64 %14711
  %14713 = getelementptr inbounds i16, i16* %14712, i64 -32
  %14714 = bitcast i16* %14713 to <16 x i16>*
  %14715 = load <16 x i16>, <16 x i16>* %14714, align 2, !tbaa !399
  %14716 = getelementptr inbounds i16, i16* %14712, i64 -16
  %14717 = bitcast i16* %14716 to <16 x i16>*
  %14718 = load <16 x i16>, <16 x i16>* %14717, align 2, !tbaa !399
  %14719 = add <16 x i16> %14705, %14696
  %14720 = add <16 x i16> %14719, %14715
  %14721 = add <16 x i16> %14708, %14699
  %14722 = add <16 x i16> %14721, %14718
  %14723 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14720, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14724 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14722, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14725 = shufflevector <16 x i16> %14723, <16 x i16> %14724, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14726 = lshr <32 x i16> %14725, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14727 = shufflevector <32 x i16> %14726, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14728 = sext i32 %a339 to i64
  %14729 = add nsw i64 %14728, 12
  %14730 = mul nsw i64 %14729, %299
  %14731 = add nsw i64 %301, %14730
  %14732 = getelementptr inbounds i16, i16* %255, i64 %14731
  %14733 = getelementptr inbounds i16, i16* %14732, i64 -32
  %14734 = bitcast i16* %14733 to <16 x i16>*
  store <16 x i16> %14727, <16 x i16>* %14734, align 2, !tbaa !401
  %14735 = shufflevector <32 x i16> %14726, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14736 = getelementptr inbounds i16, i16* %14732, i64 -16
  %14737 = bitcast i16* %14736 to <16 x i16>*
  store <16 x i16> %14735, <16 x i16>* %14737, align 2, !tbaa !401
  br label %after_bb1419

"for blur_y.s0.x.x.rebased1434":                  ; preds = %"for blur_y.s0.x.x.rebased1434.preheader", %"consume blur_x1443"
  %indvars.iv3183 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1434.preheader" ], [ %indvars.iv.next3184, %"consume blur_x1443" ]
  %14738 = add nsw i64 %indvars.iv3183, %290
  %14739 = icmp slt i64 %14738, 1
  %14740 = trunc i64 %14738 to i32
  %14741 = shl nsw i32 %14740, 5
  %14742 = icmp sgt i32 %194, %14741
  %14743 = or i1 %14739, %14742
  br i1 %14743, label %"produce blur_x1441", label %"for blur_y.s0.x.x.rebased1434.consume blur_x1443_crit_edge"

"for blur_y.s0.x.x.rebased1434.consume blur_x1443_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1434"
  %.pre3361 = shl nsw i64 %14738, 5
  br label %"consume blur_x1443"

"end for blur_y.s0.x.x.rebased1435":              ; preds = %"consume blur_x1443", %after_bb1419
  br i1 %291, label %"for blur_y.s0.x.x.rebased1451.preheader", label %"end for blur_y.s0.x.x.rebased1452", !prof !386

"for blur_y.s0.x.x.rebased1451.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1435"
  %14744 = sext i32 %t1650914 to i64
  %14745 = zext i32 %.pre-phi3328 to i64
  %14746 = mul nsw i64 %14745, %298
  %14747 = sub nsw i64 %14746, %285
  %14748 = zext i32 %.pre-phi3332 to i64
  %14749 = mul nsw i64 %14748, %298
  %14750 = sub nsw i64 %14749, %285
  %14751 = zext i32 %.pre-phi3324 to i64
  %14752 = mul nsw i64 %14751, %298
  %14753 = sub nsw i64 %14752, %285
  %14754 = sext i32 %a339 to i64
  %14755 = add nsw i64 %14754, 12
  %14756 = mul nsw i64 %14755, %299
  %14757 = add nsw i64 %14756, %302
  br label %"for blur_y.s0.x.x.rebased1451"

"produce blur_x1441":                             ; preds = %"for blur_y.s0.x.x.rebased1434"
  %t8641442 = add nsw i32 %14741, %t18411431
  %14758 = sext i32 %t8641442 to i64
  %14759 = getelementptr inbounds i16, i16* %read_input784, i64 %14758
  %14760 = getelementptr inbounds i16, i16* %14759, i64 1
  %14761 = bitcast i16* %14760 to <16 x i16>*
  %14762 = load <16 x i16>, <16 x i16>* %14761, align 2, !tbaa !396
  %14763 = getelementptr inbounds i16, i16* %14759, i64 17
  %14764 = bitcast i16* %14763 to <16 x i16>*
  %14765 = load <16 x i16>, <16 x i16>* %14764, align 2, !tbaa !396
  %14766 = getelementptr inbounds i16, i16* %14759, i64 2
  %14767 = bitcast i16* %14766 to <16 x i16>*
  %14768 = load <16 x i16>, <16 x i16>* %14767, align 2, !tbaa !396
  %14769 = getelementptr inbounds i16, i16* %14759, i64 18
  %14770 = bitcast i16* %14769 to <16 x i16>*
  %14771 = load <16 x i16>, <16 x i16>* %14770, align 2, !tbaa !396
  %14772 = bitcast i16* %14759 to <16 x i16>*
  %14773 = load <16 x i16>, <16 x i16>* %14772, align 2, !tbaa !396
  %14774 = getelementptr inbounds i16, i16* %14759, i64 16
  %14775 = bitcast i16* %14774 to <16 x i16>*
  %14776 = load <16 x i16>, <16 x i16>* %14775, align 2, !tbaa !396
  %14777 = add <16 x i16> %14768, %14762
  %14778 = add <16 x i16> %14777, %14773
  %14779 = add <16 x i16> %14771, %14765
  %14780 = add <16 x i16> %14779, %14776
  %14781 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14778, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14782 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14780, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14783 = shufflevector <16 x i16> %14781, <16 x i16> %14782, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14784 = lshr <32 x i16> %14783, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14785 = shufflevector <32 x i16> %14784, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14786 = shl nsw i64 %14738, 5
  %14787 = add nsw i64 %14786, %14639
  %14788 = getelementptr inbounds i16, i16* %blur_x841, i64 %14787
  %14789 = bitcast i16* %14788 to <16 x i16>*
  store <16 x i16> %14785, <16 x i16>* %14789, align 2, !tbaa !399
  %14790 = shufflevector <32 x i16> %14784, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14791 = getelementptr inbounds i16, i16* %14788, i64 16
  %14792 = bitcast i16* %14791 to <16 x i16>*
  store <16 x i16> %14790, <16 x i16>* %14792, align 2, !tbaa !399
  br label %"consume blur_x1443"

"consume blur_x1443":                             ; preds = %"for blur_y.s0.x.x.rebased1434.consume blur_x1443_crit_edge", %"produce blur_x1441"
  %.pre-phi3362 = phi i64 [ %.pre3361, %"for blur_y.s0.x.x.rebased1434.consume blur_x1443_crit_edge" ], [ %14786, %"produce blur_x1441" ]
  %14793 = add nsw i64 %14642, %.pre-phi3362
  %14794 = getelementptr inbounds i16, i16* %blur_x841, i64 %14793
  %14795 = bitcast i16* %14794 to <16 x i16>*
  %14796 = load <16 x i16>, <16 x i16>* %14795, align 2, !tbaa !399
  %14797 = getelementptr inbounds i16, i16* %14794, i64 16
  %14798 = bitcast i16* %14797 to <16 x i16>*
  %14799 = load <16 x i16>, <16 x i16>* %14798, align 2, !tbaa !399
  %14800 = add nsw i64 %14645, %.pre-phi3362
  %14801 = getelementptr inbounds i16, i16* %blur_x841, i64 %14800
  %14802 = bitcast i16* %14801 to <16 x i16>*
  %14803 = load <16 x i16>, <16 x i16>* %14802, align 2, !tbaa !399
  %14804 = getelementptr inbounds i16, i16* %14801, i64 16
  %14805 = bitcast i16* %14804 to <16 x i16>*
  %14806 = load <16 x i16>, <16 x i16>* %14805, align 2, !tbaa !399
  %14807 = add nsw i64 %14648, %.pre-phi3362
  %14808 = getelementptr inbounds i16, i16* %blur_x841, i64 %14807
  %14809 = bitcast i16* %14808 to <16 x i16>*
  %14810 = load <16 x i16>, <16 x i16>* %14809, align 2, !tbaa !399
  %14811 = getelementptr inbounds i16, i16* %14808, i64 16
  %14812 = bitcast i16* %14811 to <16 x i16>*
  %14813 = load <16 x i16>, <16 x i16>* %14812, align 2, !tbaa !399
  %14814 = add <16 x i16> %14803, %14796
  %14815 = add <16 x i16> %14814, %14810
  %14816 = add <16 x i16> %14806, %14799
  %14817 = add <16 x i16> %14816, %14813
  %14818 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14815, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14819 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14817, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14820 = shufflevector <16 x i16> %14818, <16 x i16> %14819, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14821 = lshr <32 x i16> %14820, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14822 = shufflevector <32 x i16> %14821, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14823 = add nsw i64 %14652, %.pre-phi3362
  %14824 = getelementptr inbounds i16, i16* %255, i64 %14823
  %14825 = bitcast i16* %14824 to <16 x i16>*
  store <16 x i16> %14822, <16 x i16>* %14825, align 2, !tbaa !401
  %14826 = shufflevector <32 x i16> %14821, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14827 = getelementptr inbounds i16, i16* %14824, i64 16
  %14828 = bitcast i16* %14827 to <16 x i16>*
  store <16 x i16> %14826, <16 x i16>* %14828, align 2, !tbaa !401
  %indvars.iv.next3184 = add nuw nsw i64 %indvars.iv3183, 1
  %.not2476 = icmp eq i64 %indvars.iv.next3184, %370
  br i1 %.not2476, label %"end for blur_y.s0.x.x.rebased1435", label %"for blur_y.s0.x.x.rebased1434"

"for blur_y.s0.x.x.rebased1451":                  ; preds = %"for blur_y.s0.x.x.rebased1451.preheader", %"consume blur_x1461"
  %blur_y.s0.x.x.rebased1453 = phi i32 [ %14907, %"consume blur_x1461" ], [ 0, %"for blur_y.s0.x.x.rebased1451.preheader" ]
  %14829 = add nsw i32 %blur_y.s0.x.x.rebased1453, %t1582776
  %a488 = shl nsw i32 %14829, 5
  %14830 = icmp sgt i32 %a327, %a488
  %b494 = select i1 %14830, i32 %a488, i32 %a327
  %14831 = icmp slt i32 %14829, 1
  %14832 = icmp sgt i32 %194, %a488
  %14833 = or i1 %14831, %14832
  br i1 %14833, label %"produce blur_x1458", label %"consume blur_x1461"

"end for blur_y.s0.x.x.rebased1452":              ; preds = %"consume blur_x1461", %"end for blur_y.s0.x.x.rebased1435"
  br i1 %224, label %"produce blur_x1465", label %after_bb1462

"produce blur_x1458":                             ; preds = %"for blur_y.s0.x.x.rebased1451"
  %14834 = icmp slt i32 %b494, %194
  %blur_x.s0.x.v1.base.s1459 = select i1 %14834, i32 %b494, i32 %194
  %t8691460 = add nsw i32 %blur_x.s0.x.v1.base.s1459, %t18411431
  %14835 = sext i32 %t8691460 to i64
  %14836 = getelementptr inbounds i16, i16* %read_input784, i64 %14835
  %14837 = getelementptr inbounds i16, i16* %14836, i64 1
  %14838 = bitcast i16* %14837 to <16 x i16>*
  %14839 = load <16 x i16>, <16 x i16>* %14838, align 2, !tbaa !396
  %14840 = getelementptr inbounds i16, i16* %14836, i64 17
  %14841 = bitcast i16* %14840 to <16 x i16>*
  %14842 = load <16 x i16>, <16 x i16>* %14841, align 2, !tbaa !396
  %14843 = getelementptr inbounds i16, i16* %14836, i64 2
  %14844 = bitcast i16* %14843 to <16 x i16>*
  %14845 = load <16 x i16>, <16 x i16>* %14844, align 2, !tbaa !396
  %14846 = getelementptr inbounds i16, i16* %14836, i64 18
  %14847 = bitcast i16* %14846 to <16 x i16>*
  %14848 = load <16 x i16>, <16 x i16>* %14847, align 2, !tbaa !396
  %14849 = bitcast i16* %14836 to <16 x i16>*
  %14850 = load <16 x i16>, <16 x i16>* %14849, align 2, !tbaa !396
  %14851 = getelementptr inbounds i16, i16* %14836, i64 16
  %14852 = bitcast i16* %14851 to <16 x i16>*
  %14853 = load <16 x i16>, <16 x i16>* %14852, align 2, !tbaa !396
  %14854 = add <16 x i16> %14845, %14839
  %14855 = add <16 x i16> %14854, %14850
  %14856 = add <16 x i16> %14848, %14842
  %14857 = add <16 x i16> %14856, %14853
  %14858 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14855, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14859 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14857, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14860 = shufflevector <16 x i16> %14858, <16 x i16> %14859, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14861 = lshr <32 x i16> %14860, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14862 = shufflevector <32 x i16> %14861, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14863 = sext i32 %blur_x.s0.x.v1.base.s1459 to i64
  %14864 = add nsw i64 %14863, %14744
  %14865 = getelementptr inbounds i16, i16* %blur_x841, i64 %14864
  %14866 = bitcast i16* %14865 to <16 x i16>*
  store <16 x i16> %14862, <16 x i16>* %14866, align 2, !tbaa !399
  %14867 = shufflevector <32 x i16> %14861, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14868 = getelementptr inbounds i16, i16* %14865, i64 16
  %14869 = bitcast i16* %14868 to <16 x i16>*
  store <16 x i16> %14867, <16 x i16>* %14869, align 2, !tbaa !399
  br label %"consume blur_x1461"

"consume blur_x1461":                             ; preds = %"for blur_y.s0.x.x.rebased1451", %"produce blur_x1458"
  %14870 = sext i32 %b494 to i64
  %14871 = add nsw i64 %14747, %14870
  %14872 = getelementptr inbounds i16, i16* %blur_x841, i64 %14871
  %14873 = bitcast i16* %14872 to <16 x i16>*
  %14874 = load <16 x i16>, <16 x i16>* %14873, align 2, !tbaa !399
  %14875 = getelementptr inbounds i16, i16* %14872, i64 16
  %14876 = bitcast i16* %14875 to <16 x i16>*
  %14877 = load <16 x i16>, <16 x i16>* %14876, align 2, !tbaa !399
  %14878 = add nsw i64 %14750, %14870
  %14879 = getelementptr inbounds i16, i16* %blur_x841, i64 %14878
  %14880 = bitcast i16* %14879 to <16 x i16>*
  %14881 = load <16 x i16>, <16 x i16>* %14880, align 2, !tbaa !399
  %14882 = getelementptr inbounds i16, i16* %14879, i64 16
  %14883 = bitcast i16* %14882 to <16 x i16>*
  %14884 = load <16 x i16>, <16 x i16>* %14883, align 2, !tbaa !399
  %14885 = add nsw i64 %14753, %14870
  %14886 = getelementptr inbounds i16, i16* %blur_x841, i64 %14885
  %14887 = bitcast i16* %14886 to <16 x i16>*
  %14888 = load <16 x i16>, <16 x i16>* %14887, align 2, !tbaa !399
  %14889 = getelementptr inbounds i16, i16* %14886, i64 16
  %14890 = bitcast i16* %14889 to <16 x i16>*
  %14891 = load <16 x i16>, <16 x i16>* %14890, align 2, !tbaa !399
  %14892 = add <16 x i16> %14881, %14874
  %14893 = add <16 x i16> %14892, %14888
  %14894 = add <16 x i16> %14884, %14877
  %14895 = add <16 x i16> %14894, %14891
  %14896 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14893, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14897 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14895, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14898 = shufflevector <16 x i16> %14896, <16 x i16> %14897, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14899 = lshr <32 x i16> %14898, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14900 = shufflevector <32 x i16> %14899, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14901 = add nsw i64 %14757, %14870
  %14902 = getelementptr inbounds i16, i16* %255, i64 %14901
  %14903 = bitcast i16* %14902 to <16 x i16>*
  store <16 x i16> %14900, <16 x i16>* %14903, align 2, !tbaa !401
  %14904 = shufflevector <32 x i16> %14899, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14905 = getelementptr inbounds i16, i16* %14902, i64 16
  %14906 = bitcast i16* %14905 to <16 x i16>*
  store <16 x i16> %14904, <16 x i16>* %14906, align 2, !tbaa !401
  %14907 = add nuw nsw i32 %blur_y.s0.x.x.rebased1453, 1
  %.not2475 = icmp eq i32 %14907, %t1639861
  br i1 %.not2475, label %"end for blur_y.s0.x.x.rebased1452", label %"for blur_y.s0.x.x.rebased1451"

after_bb1462:                                     ; preds = %"end for blur_y.s0.x.x.rebased1452", %"produce blur_x1465"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1477.preheader", label %"end for blur_y.s0.x.x.rebased1478", !prof !386

"for blur_y.s0.x.x.rebased1477.preheader":        ; preds = %after_bb1462
  %14908 = sext i32 %t1666957 to i64
  %14909 = zext i32 %.pre-phi3332 to i64
  %14910 = mul nsw i64 %14909, %298
  %14911 = sub nsw i64 %14910, %285
  %14912 = zext i32 %.pre-phi3338 to i64
  %14913 = mul nsw i64 %14912, %298
  %14914 = sub nsw i64 %14913, %285
  %14915 = zext i32 %.pre-phi3328 to i64
  %14916 = mul nsw i64 %14915, %298
  %14917 = sub nsw i64 %14916, %285
  %14918 = sext i32 %a339 to i64
  %14919 = add nsw i64 %14918, 13
  %14920 = mul nsw i64 %14919, %299
  %14921 = add nsw i64 %14920, %302
  br label %"for blur_y.s0.x.x.rebased1477"

"produce blur_x1465":                             ; preds = %"end for blur_y.s0.x.x.rebased1452"
  %14922 = getelementptr inbounds i16, i16* %read_input784, i64 %327
  %14923 = getelementptr inbounds i16, i16* %14922, i64 -31
  %14924 = bitcast i16* %14923 to <16 x i16>*
  %14925 = load <16 x i16>, <16 x i16>* %14924, align 2, !tbaa !396
  %14926 = getelementptr inbounds i16, i16* %14922, i64 -15
  %14927 = bitcast i16* %14926 to <16 x i16>*
  %14928 = load <16 x i16>, <16 x i16>* %14927, align 2, !tbaa !396
  %14929 = getelementptr inbounds i16, i16* %14922, i64 -30
  %14930 = bitcast i16* %14929 to <16 x i16>*
  %14931 = load <16 x i16>, <16 x i16>* %14930, align 2, !tbaa !396
  %14932 = getelementptr inbounds i16, i16* %14922, i64 -14
  %14933 = bitcast i16* %14932 to <16 x i16>*
  %14934 = load <16 x i16>, <16 x i16>* %14933, align 2, !tbaa !396
  %14935 = getelementptr inbounds i16, i16* %14922, i64 -32
  %14936 = bitcast i16* %14935 to <16 x i16>*
  %14937 = load <16 x i16>, <16 x i16>* %14936, align 2, !tbaa !396
  %14938 = getelementptr inbounds i16, i16* %14922, i64 -16
  %14939 = bitcast i16* %14938 to <16 x i16>*
  %14940 = load <16 x i16>, <16 x i16>* %14939, align 2, !tbaa !396
  %14941 = add <16 x i16> %14931, %14925
  %14942 = add <16 x i16> %14941, %14937
  %14943 = add <16 x i16> %14934, %14928
  %14944 = add <16 x i16> %14943, %14940
  %14945 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14942, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14946 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14944, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14947 = shufflevector <16 x i16> %14945, <16 x i16> %14946, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14948 = lshr <32 x i16> %14947, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14949 = shufflevector <32 x i16> %14948, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14950 = zext i32 %.pre-phi3338 to i64
  %14951 = mul nsw i64 %286, %14950
  %14952 = add nsw i64 %288, %14951
  %14953 = getelementptr inbounds i16, i16* %blur_x841, i64 %14952
  %14954 = getelementptr inbounds i16, i16* %14953, i64 -32
  %14955 = bitcast i16* %14954 to <16 x i16>*
  store <16 x i16> %14949, <16 x i16>* %14955, align 2, !tbaa !399
  %14956 = shufflevector <32 x i16> %14948, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14957 = getelementptr inbounds i16, i16* %14953, i64 -16
  %14958 = bitcast i16* %14957 to <16 x i16>*
  store <16 x i16> %14956, <16 x i16>* %14958, align 2, !tbaa !399
  %14959 = zext i32 %.pre-phi3332 to i64
  %14960 = mul nsw i64 %14959, %298
  %14961 = add nsw i64 %14960, %283
  %14962 = getelementptr inbounds i16, i16* %blur_x841, i64 %14961
  %14963 = getelementptr inbounds i16, i16* %14962, i64 -32
  %14964 = bitcast i16* %14963 to <16 x i16>*
  %14965 = load <16 x i16>, <16 x i16>* %14964, align 2, !tbaa !399
  %14966 = getelementptr inbounds i16, i16* %14962, i64 -16
  %14967 = bitcast i16* %14966 to <16 x i16>*
  %14968 = load <16 x i16>, <16 x i16>* %14967, align 2, !tbaa !399
  %14969 = mul nsw i64 %14950, %298
  %14970 = add nsw i64 %14969, %283
  %14971 = getelementptr inbounds i16, i16* %blur_x841, i64 %14970
  %14972 = getelementptr inbounds i16, i16* %14971, i64 -32
  %14973 = bitcast i16* %14972 to <16 x i16>*
  %14974 = load <16 x i16>, <16 x i16>* %14973, align 2, !tbaa !399
  %14975 = getelementptr inbounds i16, i16* %14971, i64 -16
  %14976 = bitcast i16* %14975 to <16 x i16>*
  %14977 = load <16 x i16>, <16 x i16>* %14976, align 2, !tbaa !399
  %14978 = zext i32 %.pre-phi3328 to i64
  %14979 = mul nsw i64 %14978, %298
  %14980 = add nsw i64 %14979, %283
  %14981 = getelementptr inbounds i16, i16* %blur_x841, i64 %14980
  %14982 = getelementptr inbounds i16, i16* %14981, i64 -32
  %14983 = bitcast i16* %14982 to <16 x i16>*
  %14984 = load <16 x i16>, <16 x i16>* %14983, align 2, !tbaa !399
  %14985 = getelementptr inbounds i16, i16* %14981, i64 -16
  %14986 = bitcast i16* %14985 to <16 x i16>*
  %14987 = load <16 x i16>, <16 x i16>* %14986, align 2, !tbaa !399
  %14988 = add <16 x i16> %14974, %14965
  %14989 = add <16 x i16> %14988, %14984
  %14990 = add <16 x i16> %14977, %14968
  %14991 = add <16 x i16> %14990, %14987
  %14992 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14989, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14993 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %14991, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %14994 = shufflevector <16 x i16> %14992, <16 x i16> %14993, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %14995 = lshr <32 x i16> %14994, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %14996 = shufflevector <32 x i16> %14995, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %14997 = sext i32 %a339 to i64
  %14998 = add nsw i64 %14997, 13
  %14999 = mul nsw i64 %14998, %299
  %15000 = add nsw i64 %301, %14999
  %15001 = getelementptr inbounds i16, i16* %255, i64 %15000
  %15002 = getelementptr inbounds i16, i16* %15001, i64 -32
  %15003 = bitcast i16* %15002 to <16 x i16>*
  store <16 x i16> %14996, <16 x i16>* %15003, align 2, !tbaa !401
  %15004 = shufflevector <32 x i16> %14995, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15005 = getelementptr inbounds i16, i16* %15001, i64 -16
  %15006 = bitcast i16* %15005 to <16 x i16>*
  store <16 x i16> %15004, <16 x i16>* %15006, align 2, !tbaa !401
  br label %after_bb1462

"for blur_y.s0.x.x.rebased1477":                  ; preds = %"for blur_y.s0.x.x.rebased1477.preheader", %"consume blur_x1486"
  %indvars.iv3186 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1477.preheader" ], [ %indvars.iv.next3187, %"consume blur_x1486" ]
  %15007 = add nsw i64 %indvars.iv3186, %290
  %15008 = icmp slt i64 %15007, 1
  %15009 = trunc i64 %15007 to i32
  %15010 = shl nsw i32 %15009, 5
  %15011 = icmp sgt i32 %194, %15010
  %15012 = or i1 %15008, %15011
  br i1 %15012, label %"produce blur_x1484", label %"for blur_y.s0.x.x.rebased1477.consume blur_x1486_crit_edge"

"for blur_y.s0.x.x.rebased1477.consume blur_x1486_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1477"
  %.pre3363 = shl nsw i64 %15007, 5
  br label %"consume blur_x1486"

"end for blur_y.s0.x.x.rebased1478":              ; preds = %"consume blur_x1486", %after_bb1462
  br i1 %291, label %"for blur_y.s0.x.x.rebased1494.preheader", label %"end for blur_y.s0.x.x.rebased1495", !prof !386

"for blur_y.s0.x.x.rebased1494.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1478"
  %15013 = sext i32 %t1666957 to i64
  %15014 = zext i32 %.pre-phi3332 to i64
  %15015 = mul nsw i64 %15014, %298
  %15016 = sub nsw i64 %15015, %285
  %15017 = zext i32 %.pre-phi3338 to i64
  %15018 = mul nsw i64 %15017, %298
  %15019 = sub nsw i64 %15018, %285
  %15020 = zext i32 %.pre-phi3328 to i64
  %15021 = mul nsw i64 %15020, %298
  %15022 = sub nsw i64 %15021, %285
  %15023 = sext i32 %a339 to i64
  %15024 = add nsw i64 %15023, 13
  %15025 = mul nsw i64 %15024, %299
  %15026 = add nsw i64 %15025, %302
  br label %"for blur_y.s0.x.x.rebased1494"

"produce blur_x1484":                             ; preds = %"for blur_y.s0.x.x.rebased1477"
  %t8801485 = add nsw i32 %15010, %t18571474
  %15027 = sext i32 %t8801485 to i64
  %15028 = getelementptr inbounds i16, i16* %read_input784, i64 %15027
  %15029 = getelementptr inbounds i16, i16* %15028, i64 1
  %15030 = bitcast i16* %15029 to <16 x i16>*
  %15031 = load <16 x i16>, <16 x i16>* %15030, align 2, !tbaa !396
  %15032 = getelementptr inbounds i16, i16* %15028, i64 17
  %15033 = bitcast i16* %15032 to <16 x i16>*
  %15034 = load <16 x i16>, <16 x i16>* %15033, align 2, !tbaa !396
  %15035 = getelementptr inbounds i16, i16* %15028, i64 2
  %15036 = bitcast i16* %15035 to <16 x i16>*
  %15037 = load <16 x i16>, <16 x i16>* %15036, align 2, !tbaa !396
  %15038 = getelementptr inbounds i16, i16* %15028, i64 18
  %15039 = bitcast i16* %15038 to <16 x i16>*
  %15040 = load <16 x i16>, <16 x i16>* %15039, align 2, !tbaa !396
  %15041 = bitcast i16* %15028 to <16 x i16>*
  %15042 = load <16 x i16>, <16 x i16>* %15041, align 2, !tbaa !396
  %15043 = getelementptr inbounds i16, i16* %15028, i64 16
  %15044 = bitcast i16* %15043 to <16 x i16>*
  %15045 = load <16 x i16>, <16 x i16>* %15044, align 2, !tbaa !396
  %15046 = add <16 x i16> %15037, %15031
  %15047 = add <16 x i16> %15046, %15042
  %15048 = add <16 x i16> %15040, %15034
  %15049 = add <16 x i16> %15048, %15045
  %15050 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15047, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15051 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15049, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15052 = shufflevector <16 x i16> %15050, <16 x i16> %15051, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15053 = lshr <32 x i16> %15052, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15054 = shufflevector <32 x i16> %15053, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15055 = shl nsw i64 %15007, 5
  %15056 = add nsw i64 %15055, %14908
  %15057 = getelementptr inbounds i16, i16* %blur_x841, i64 %15056
  %15058 = bitcast i16* %15057 to <16 x i16>*
  store <16 x i16> %15054, <16 x i16>* %15058, align 2, !tbaa !399
  %15059 = shufflevector <32 x i16> %15053, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15060 = getelementptr inbounds i16, i16* %15057, i64 16
  %15061 = bitcast i16* %15060 to <16 x i16>*
  store <16 x i16> %15059, <16 x i16>* %15061, align 2, !tbaa !399
  br label %"consume blur_x1486"

"consume blur_x1486":                             ; preds = %"for blur_y.s0.x.x.rebased1477.consume blur_x1486_crit_edge", %"produce blur_x1484"
  %.pre-phi3364 = phi i64 [ %.pre3363, %"for blur_y.s0.x.x.rebased1477.consume blur_x1486_crit_edge" ], [ %15055, %"produce blur_x1484" ]
  %15062 = add nsw i64 %14911, %.pre-phi3364
  %15063 = getelementptr inbounds i16, i16* %blur_x841, i64 %15062
  %15064 = bitcast i16* %15063 to <16 x i16>*
  %15065 = load <16 x i16>, <16 x i16>* %15064, align 2, !tbaa !399
  %15066 = getelementptr inbounds i16, i16* %15063, i64 16
  %15067 = bitcast i16* %15066 to <16 x i16>*
  %15068 = load <16 x i16>, <16 x i16>* %15067, align 2, !tbaa !399
  %15069 = add nsw i64 %14914, %.pre-phi3364
  %15070 = getelementptr inbounds i16, i16* %blur_x841, i64 %15069
  %15071 = bitcast i16* %15070 to <16 x i16>*
  %15072 = load <16 x i16>, <16 x i16>* %15071, align 2, !tbaa !399
  %15073 = getelementptr inbounds i16, i16* %15070, i64 16
  %15074 = bitcast i16* %15073 to <16 x i16>*
  %15075 = load <16 x i16>, <16 x i16>* %15074, align 2, !tbaa !399
  %15076 = add nsw i64 %14917, %.pre-phi3364
  %15077 = getelementptr inbounds i16, i16* %blur_x841, i64 %15076
  %15078 = bitcast i16* %15077 to <16 x i16>*
  %15079 = load <16 x i16>, <16 x i16>* %15078, align 2, !tbaa !399
  %15080 = getelementptr inbounds i16, i16* %15077, i64 16
  %15081 = bitcast i16* %15080 to <16 x i16>*
  %15082 = load <16 x i16>, <16 x i16>* %15081, align 2, !tbaa !399
  %15083 = add <16 x i16> %15072, %15065
  %15084 = add <16 x i16> %15083, %15079
  %15085 = add <16 x i16> %15075, %15068
  %15086 = add <16 x i16> %15085, %15082
  %15087 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15084, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15088 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15086, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15089 = shufflevector <16 x i16> %15087, <16 x i16> %15088, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15090 = lshr <32 x i16> %15089, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15091 = shufflevector <32 x i16> %15090, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15092 = add nsw i64 %14921, %.pre-phi3364
  %15093 = getelementptr inbounds i16, i16* %255, i64 %15092
  %15094 = bitcast i16* %15093 to <16 x i16>*
  store <16 x i16> %15091, <16 x i16>* %15094, align 2, !tbaa !401
  %15095 = shufflevector <32 x i16> %15090, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15096 = getelementptr inbounds i16, i16* %15093, i64 16
  %15097 = bitcast i16* %15096 to <16 x i16>*
  store <16 x i16> %15095, <16 x i16>* %15097, align 2, !tbaa !401
  %indvars.iv.next3187 = add nuw nsw i64 %indvars.iv3186, 1
  %.not2474 = icmp eq i64 %indvars.iv.next3187, %370
  br i1 %.not2474, label %"end for blur_y.s0.x.x.rebased1478", label %"for blur_y.s0.x.x.rebased1477"

"for blur_y.s0.x.x.rebased1494":                  ; preds = %"for blur_y.s0.x.x.rebased1494.preheader", %"consume blur_x1504"
  %blur_y.s0.x.x.rebased1496 = phi i32 [ %15176, %"consume blur_x1504" ], [ 0, %"for blur_y.s0.x.x.rebased1494.preheader" ]
  %15098 = add nsw i32 %blur_y.s0.x.x.rebased1496, %t1582776
  %a495 = shl nsw i32 %15098, 5
  %15099 = icmp sgt i32 %a327, %a495
  %b501 = select i1 %15099, i32 %a495, i32 %a327
  %15100 = icmp slt i32 %15098, 1
  %15101 = icmp sgt i32 %194, %a495
  %15102 = or i1 %15100, %15101
  br i1 %15102, label %"produce blur_x1501", label %"consume blur_x1504"

"end for blur_y.s0.x.x.rebased1495":              ; preds = %"consume blur_x1504", %"end for blur_y.s0.x.x.rebased1478"
  br i1 %224, label %"produce blur_x1508", label %after_bb1505

"produce blur_x1501":                             ; preds = %"for blur_y.s0.x.x.rebased1494"
  %15103 = icmp slt i32 %b501, %194
  %blur_x.s0.x.v1.base.s1502 = select i1 %15103, i32 %b501, i32 %194
  %t8851503 = add nsw i32 %blur_x.s0.x.v1.base.s1502, %t18571474
  %15104 = sext i32 %t8851503 to i64
  %15105 = getelementptr inbounds i16, i16* %read_input784, i64 %15104
  %15106 = getelementptr inbounds i16, i16* %15105, i64 1
  %15107 = bitcast i16* %15106 to <16 x i16>*
  %15108 = load <16 x i16>, <16 x i16>* %15107, align 2, !tbaa !396
  %15109 = getelementptr inbounds i16, i16* %15105, i64 17
  %15110 = bitcast i16* %15109 to <16 x i16>*
  %15111 = load <16 x i16>, <16 x i16>* %15110, align 2, !tbaa !396
  %15112 = getelementptr inbounds i16, i16* %15105, i64 2
  %15113 = bitcast i16* %15112 to <16 x i16>*
  %15114 = load <16 x i16>, <16 x i16>* %15113, align 2, !tbaa !396
  %15115 = getelementptr inbounds i16, i16* %15105, i64 18
  %15116 = bitcast i16* %15115 to <16 x i16>*
  %15117 = load <16 x i16>, <16 x i16>* %15116, align 2, !tbaa !396
  %15118 = bitcast i16* %15105 to <16 x i16>*
  %15119 = load <16 x i16>, <16 x i16>* %15118, align 2, !tbaa !396
  %15120 = getelementptr inbounds i16, i16* %15105, i64 16
  %15121 = bitcast i16* %15120 to <16 x i16>*
  %15122 = load <16 x i16>, <16 x i16>* %15121, align 2, !tbaa !396
  %15123 = add <16 x i16> %15114, %15108
  %15124 = add <16 x i16> %15123, %15119
  %15125 = add <16 x i16> %15117, %15111
  %15126 = add <16 x i16> %15125, %15122
  %15127 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15124, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15128 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15126, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15129 = shufflevector <16 x i16> %15127, <16 x i16> %15128, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15130 = lshr <32 x i16> %15129, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15131 = shufflevector <32 x i16> %15130, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15132 = sext i32 %blur_x.s0.x.v1.base.s1502 to i64
  %15133 = add nsw i64 %15132, %15013
  %15134 = getelementptr inbounds i16, i16* %blur_x841, i64 %15133
  %15135 = bitcast i16* %15134 to <16 x i16>*
  store <16 x i16> %15131, <16 x i16>* %15135, align 2, !tbaa !399
  %15136 = shufflevector <32 x i16> %15130, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15137 = getelementptr inbounds i16, i16* %15134, i64 16
  %15138 = bitcast i16* %15137 to <16 x i16>*
  store <16 x i16> %15136, <16 x i16>* %15138, align 2, !tbaa !399
  br label %"consume blur_x1504"

"consume blur_x1504":                             ; preds = %"for blur_y.s0.x.x.rebased1494", %"produce blur_x1501"
  %15139 = sext i32 %b501 to i64
  %15140 = add nsw i64 %15016, %15139
  %15141 = getelementptr inbounds i16, i16* %blur_x841, i64 %15140
  %15142 = bitcast i16* %15141 to <16 x i16>*
  %15143 = load <16 x i16>, <16 x i16>* %15142, align 2, !tbaa !399
  %15144 = getelementptr inbounds i16, i16* %15141, i64 16
  %15145 = bitcast i16* %15144 to <16 x i16>*
  %15146 = load <16 x i16>, <16 x i16>* %15145, align 2, !tbaa !399
  %15147 = add nsw i64 %15019, %15139
  %15148 = getelementptr inbounds i16, i16* %blur_x841, i64 %15147
  %15149 = bitcast i16* %15148 to <16 x i16>*
  %15150 = load <16 x i16>, <16 x i16>* %15149, align 2, !tbaa !399
  %15151 = getelementptr inbounds i16, i16* %15148, i64 16
  %15152 = bitcast i16* %15151 to <16 x i16>*
  %15153 = load <16 x i16>, <16 x i16>* %15152, align 2, !tbaa !399
  %15154 = add nsw i64 %15022, %15139
  %15155 = getelementptr inbounds i16, i16* %blur_x841, i64 %15154
  %15156 = bitcast i16* %15155 to <16 x i16>*
  %15157 = load <16 x i16>, <16 x i16>* %15156, align 2, !tbaa !399
  %15158 = getelementptr inbounds i16, i16* %15155, i64 16
  %15159 = bitcast i16* %15158 to <16 x i16>*
  %15160 = load <16 x i16>, <16 x i16>* %15159, align 2, !tbaa !399
  %15161 = add <16 x i16> %15150, %15143
  %15162 = add <16 x i16> %15161, %15157
  %15163 = add <16 x i16> %15153, %15146
  %15164 = add <16 x i16> %15163, %15160
  %15165 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15162, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15166 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15164, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15167 = shufflevector <16 x i16> %15165, <16 x i16> %15166, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15168 = lshr <32 x i16> %15167, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15169 = shufflevector <32 x i16> %15168, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15170 = add nsw i64 %15026, %15139
  %15171 = getelementptr inbounds i16, i16* %255, i64 %15170
  %15172 = bitcast i16* %15171 to <16 x i16>*
  store <16 x i16> %15169, <16 x i16>* %15172, align 2, !tbaa !401
  %15173 = shufflevector <32 x i16> %15168, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15174 = getelementptr inbounds i16, i16* %15171, i64 16
  %15175 = bitcast i16* %15174 to <16 x i16>*
  store <16 x i16> %15173, <16 x i16>* %15175, align 2, !tbaa !401
  %15176 = add nuw nsw i32 %blur_y.s0.x.x.rebased1496, 1
  %.not2473 = icmp eq i32 %15176, %t1639861
  br i1 %.not2473, label %"end for blur_y.s0.x.x.rebased1495", label %"for blur_y.s0.x.x.rebased1494"

after_bb1505:                                     ; preds = %"end for blur_y.s0.x.x.rebased1495", %"produce blur_x1508"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1520.preheader", label %"end for blur_y.s0.x.x.rebased1521", !prof !386

"for blur_y.s0.x.x.rebased1520.preheader":        ; preds = %after_bb1505
  %15177 = sext i32 %t1638848 to i64
  %15178 = zext i32 %.pre-phi3338 to i64
  %15179 = mul nsw i64 %15178, %298
  %15180 = sub nsw i64 %15179, %285
  %15181 = zext i32 %.pre-phi3324 to i64
  %15182 = mul nsw i64 %15181, %298
  %15183 = sub nsw i64 %15182, %285
  %15184 = zext i32 %.pre-phi3332 to i64
  %15185 = mul nsw i64 %15184, %298
  %15186 = sub nsw i64 %15185, %285
  %15187 = sext i32 %a339 to i64
  %15188 = add nsw i64 %15187, 14
  %15189 = mul nsw i64 %15188, %299
  %15190 = add nsw i64 %15189, %302
  br label %"for blur_y.s0.x.x.rebased1520"

"produce blur_x1508":                             ; preds = %"end for blur_y.s0.x.x.rebased1495"
  %15191 = getelementptr inbounds i16, i16* %read_input784, i64 %329
  %15192 = getelementptr inbounds i16, i16* %15191, i64 -31
  %15193 = bitcast i16* %15192 to <16 x i16>*
  %15194 = load <16 x i16>, <16 x i16>* %15193, align 2, !tbaa !396
  %15195 = getelementptr inbounds i16, i16* %15191, i64 -15
  %15196 = bitcast i16* %15195 to <16 x i16>*
  %15197 = load <16 x i16>, <16 x i16>* %15196, align 2, !tbaa !396
  %15198 = getelementptr inbounds i16, i16* %15191, i64 -30
  %15199 = bitcast i16* %15198 to <16 x i16>*
  %15200 = load <16 x i16>, <16 x i16>* %15199, align 2, !tbaa !396
  %15201 = getelementptr inbounds i16, i16* %15191, i64 -14
  %15202 = bitcast i16* %15201 to <16 x i16>*
  %15203 = load <16 x i16>, <16 x i16>* %15202, align 2, !tbaa !396
  %15204 = getelementptr inbounds i16, i16* %15191, i64 -32
  %15205 = bitcast i16* %15204 to <16 x i16>*
  %15206 = load <16 x i16>, <16 x i16>* %15205, align 2, !tbaa !396
  %15207 = getelementptr inbounds i16, i16* %15191, i64 -16
  %15208 = bitcast i16* %15207 to <16 x i16>*
  %15209 = load <16 x i16>, <16 x i16>* %15208, align 2, !tbaa !396
  %15210 = add <16 x i16> %15200, %15194
  %15211 = add <16 x i16> %15210, %15206
  %15212 = add <16 x i16> %15203, %15197
  %15213 = add <16 x i16> %15212, %15209
  %15214 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15211, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15215 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15213, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15216 = shufflevector <16 x i16> %15214, <16 x i16> %15215, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15217 = lshr <32 x i16> %15216, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15218 = shufflevector <32 x i16> %15217, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15219 = zext i32 %.pre-phi3324 to i64
  %15220 = mul nsw i64 %286, %15219
  %15221 = add nsw i64 %288, %15220
  %15222 = getelementptr inbounds i16, i16* %blur_x841, i64 %15221
  %15223 = getelementptr inbounds i16, i16* %15222, i64 -32
  %15224 = bitcast i16* %15223 to <16 x i16>*
  store <16 x i16> %15218, <16 x i16>* %15224, align 2, !tbaa !399
  %15225 = shufflevector <32 x i16> %15217, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15226 = getelementptr inbounds i16, i16* %15222, i64 -16
  %15227 = bitcast i16* %15226 to <16 x i16>*
  store <16 x i16> %15225, <16 x i16>* %15227, align 2, !tbaa !399
  %15228 = zext i32 %.pre-phi3338 to i64
  %15229 = mul nsw i64 %15228, %298
  %15230 = add nsw i64 %15229, %283
  %15231 = getelementptr inbounds i16, i16* %blur_x841, i64 %15230
  %15232 = getelementptr inbounds i16, i16* %15231, i64 -32
  %15233 = bitcast i16* %15232 to <16 x i16>*
  %15234 = load <16 x i16>, <16 x i16>* %15233, align 2, !tbaa !399
  %15235 = getelementptr inbounds i16, i16* %15231, i64 -16
  %15236 = bitcast i16* %15235 to <16 x i16>*
  %15237 = load <16 x i16>, <16 x i16>* %15236, align 2, !tbaa !399
  %15238 = mul nsw i64 %15219, %298
  %15239 = add nsw i64 %15238, %283
  %15240 = getelementptr inbounds i16, i16* %blur_x841, i64 %15239
  %15241 = getelementptr inbounds i16, i16* %15240, i64 -32
  %15242 = bitcast i16* %15241 to <16 x i16>*
  %15243 = load <16 x i16>, <16 x i16>* %15242, align 2, !tbaa !399
  %15244 = getelementptr inbounds i16, i16* %15240, i64 -16
  %15245 = bitcast i16* %15244 to <16 x i16>*
  %15246 = load <16 x i16>, <16 x i16>* %15245, align 2, !tbaa !399
  %15247 = zext i32 %.pre-phi3332 to i64
  %15248 = mul nsw i64 %15247, %298
  %15249 = add nsw i64 %15248, %283
  %15250 = getelementptr inbounds i16, i16* %blur_x841, i64 %15249
  %15251 = getelementptr inbounds i16, i16* %15250, i64 -32
  %15252 = bitcast i16* %15251 to <16 x i16>*
  %15253 = load <16 x i16>, <16 x i16>* %15252, align 2, !tbaa !399
  %15254 = getelementptr inbounds i16, i16* %15250, i64 -16
  %15255 = bitcast i16* %15254 to <16 x i16>*
  %15256 = load <16 x i16>, <16 x i16>* %15255, align 2, !tbaa !399
  %15257 = add <16 x i16> %15243, %15234
  %15258 = add <16 x i16> %15257, %15253
  %15259 = add <16 x i16> %15246, %15237
  %15260 = add <16 x i16> %15259, %15256
  %15261 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15258, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15262 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15260, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15263 = shufflevector <16 x i16> %15261, <16 x i16> %15262, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15264 = lshr <32 x i16> %15263, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15265 = shufflevector <32 x i16> %15264, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15266 = sext i32 %a339 to i64
  %15267 = add nsw i64 %15266, 14
  %15268 = mul nsw i64 %15267, %299
  %15269 = add nsw i64 %301, %15268
  %15270 = getelementptr inbounds i16, i16* %255, i64 %15269
  %15271 = getelementptr inbounds i16, i16* %15270, i64 -32
  %15272 = bitcast i16* %15271 to <16 x i16>*
  store <16 x i16> %15265, <16 x i16>* %15272, align 2, !tbaa !401
  %15273 = shufflevector <32 x i16> %15264, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15274 = getelementptr inbounds i16, i16* %15270, i64 -16
  %15275 = bitcast i16* %15274 to <16 x i16>*
  store <16 x i16> %15273, <16 x i16>* %15275, align 2, !tbaa !401
  br label %after_bb1505

"for blur_y.s0.x.x.rebased1520":                  ; preds = %"for blur_y.s0.x.x.rebased1520.preheader", %"consume blur_x1529"
  %indvars.iv3189 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1520.preheader" ], [ %indvars.iv.next3190, %"consume blur_x1529" ]
  %15276 = add nsw i64 %indvars.iv3189, %290
  %15277 = icmp slt i64 %15276, 1
  %15278 = trunc i64 %15276 to i32
  %15279 = shl nsw i32 %15278, 5
  %15280 = icmp sgt i32 %194, %15279
  %15281 = or i1 %15277, %15280
  br i1 %15281, label %"produce blur_x1527", label %"for blur_y.s0.x.x.rebased1520.consume blur_x1529_crit_edge"

"for blur_y.s0.x.x.rebased1520.consume blur_x1529_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1520"
  %.pre3365 = shl nsw i64 %15276, 5
  br label %"consume blur_x1529"

"end for blur_y.s0.x.x.rebased1521":              ; preds = %"consume blur_x1529", %after_bb1505
  br i1 %291, label %"for blur_y.s0.x.x.rebased1537.preheader", label %"end for blur_y.s0.x.x.rebased1538", !prof !386

"for blur_y.s0.x.x.rebased1537.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1521"
  %15282 = sext i32 %t1638848 to i64
  %15283 = zext i32 %.pre-phi3338 to i64
  %15284 = mul nsw i64 %15283, %298
  %15285 = sub nsw i64 %15284, %285
  %15286 = zext i32 %.pre-phi3324 to i64
  %15287 = mul nsw i64 %15286, %298
  %15288 = sub nsw i64 %15287, %285
  %15289 = zext i32 %.pre-phi3332 to i64
  %15290 = mul nsw i64 %15289, %298
  %15291 = sub nsw i64 %15290, %285
  %15292 = sext i32 %a339 to i64
  %15293 = add nsw i64 %15292, 14
  %15294 = mul nsw i64 %15293, %299
  %15295 = add nsw i64 %15294, %302
  br label %"for blur_y.s0.x.x.rebased1537"

"produce blur_x1527":                             ; preds = %"for blur_y.s0.x.x.rebased1520"
  %t8961528 = add nsw i32 %15279, %t18731517
  %15296 = sext i32 %t8961528 to i64
  %15297 = getelementptr inbounds i16, i16* %read_input784, i64 %15296
  %15298 = getelementptr inbounds i16, i16* %15297, i64 1
  %15299 = bitcast i16* %15298 to <16 x i16>*
  %15300 = load <16 x i16>, <16 x i16>* %15299, align 2, !tbaa !396
  %15301 = getelementptr inbounds i16, i16* %15297, i64 17
  %15302 = bitcast i16* %15301 to <16 x i16>*
  %15303 = load <16 x i16>, <16 x i16>* %15302, align 2, !tbaa !396
  %15304 = getelementptr inbounds i16, i16* %15297, i64 2
  %15305 = bitcast i16* %15304 to <16 x i16>*
  %15306 = load <16 x i16>, <16 x i16>* %15305, align 2, !tbaa !396
  %15307 = getelementptr inbounds i16, i16* %15297, i64 18
  %15308 = bitcast i16* %15307 to <16 x i16>*
  %15309 = load <16 x i16>, <16 x i16>* %15308, align 2, !tbaa !396
  %15310 = bitcast i16* %15297 to <16 x i16>*
  %15311 = load <16 x i16>, <16 x i16>* %15310, align 2, !tbaa !396
  %15312 = getelementptr inbounds i16, i16* %15297, i64 16
  %15313 = bitcast i16* %15312 to <16 x i16>*
  %15314 = load <16 x i16>, <16 x i16>* %15313, align 2, !tbaa !396
  %15315 = add <16 x i16> %15306, %15300
  %15316 = add <16 x i16> %15315, %15311
  %15317 = add <16 x i16> %15309, %15303
  %15318 = add <16 x i16> %15317, %15314
  %15319 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15316, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15320 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15318, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15321 = shufflevector <16 x i16> %15319, <16 x i16> %15320, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15322 = lshr <32 x i16> %15321, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15323 = shufflevector <32 x i16> %15322, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15324 = shl nsw i64 %15276, 5
  %15325 = add nsw i64 %15324, %15177
  %15326 = getelementptr inbounds i16, i16* %blur_x841, i64 %15325
  %15327 = bitcast i16* %15326 to <16 x i16>*
  store <16 x i16> %15323, <16 x i16>* %15327, align 2, !tbaa !399
  %15328 = shufflevector <32 x i16> %15322, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15329 = getelementptr inbounds i16, i16* %15326, i64 16
  %15330 = bitcast i16* %15329 to <16 x i16>*
  store <16 x i16> %15328, <16 x i16>* %15330, align 2, !tbaa !399
  br label %"consume blur_x1529"

"consume blur_x1529":                             ; preds = %"for blur_y.s0.x.x.rebased1520.consume blur_x1529_crit_edge", %"produce blur_x1527"
  %.pre-phi3366 = phi i64 [ %.pre3365, %"for blur_y.s0.x.x.rebased1520.consume blur_x1529_crit_edge" ], [ %15324, %"produce blur_x1527" ]
  %15331 = add nsw i64 %15180, %.pre-phi3366
  %15332 = getelementptr inbounds i16, i16* %blur_x841, i64 %15331
  %15333 = bitcast i16* %15332 to <16 x i16>*
  %15334 = load <16 x i16>, <16 x i16>* %15333, align 2, !tbaa !399
  %15335 = getelementptr inbounds i16, i16* %15332, i64 16
  %15336 = bitcast i16* %15335 to <16 x i16>*
  %15337 = load <16 x i16>, <16 x i16>* %15336, align 2, !tbaa !399
  %15338 = add nsw i64 %15183, %.pre-phi3366
  %15339 = getelementptr inbounds i16, i16* %blur_x841, i64 %15338
  %15340 = bitcast i16* %15339 to <16 x i16>*
  %15341 = load <16 x i16>, <16 x i16>* %15340, align 2, !tbaa !399
  %15342 = getelementptr inbounds i16, i16* %15339, i64 16
  %15343 = bitcast i16* %15342 to <16 x i16>*
  %15344 = load <16 x i16>, <16 x i16>* %15343, align 2, !tbaa !399
  %15345 = add nsw i64 %15186, %.pre-phi3366
  %15346 = getelementptr inbounds i16, i16* %blur_x841, i64 %15345
  %15347 = bitcast i16* %15346 to <16 x i16>*
  %15348 = load <16 x i16>, <16 x i16>* %15347, align 2, !tbaa !399
  %15349 = getelementptr inbounds i16, i16* %15346, i64 16
  %15350 = bitcast i16* %15349 to <16 x i16>*
  %15351 = load <16 x i16>, <16 x i16>* %15350, align 2, !tbaa !399
  %15352 = add <16 x i16> %15341, %15334
  %15353 = add <16 x i16> %15352, %15348
  %15354 = add <16 x i16> %15344, %15337
  %15355 = add <16 x i16> %15354, %15351
  %15356 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15353, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15357 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15355, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15358 = shufflevector <16 x i16> %15356, <16 x i16> %15357, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15359 = lshr <32 x i16> %15358, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15360 = shufflevector <32 x i16> %15359, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15361 = add nsw i64 %15190, %.pre-phi3366
  %15362 = getelementptr inbounds i16, i16* %255, i64 %15361
  %15363 = bitcast i16* %15362 to <16 x i16>*
  store <16 x i16> %15360, <16 x i16>* %15363, align 2, !tbaa !401
  %15364 = shufflevector <32 x i16> %15359, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15365 = getelementptr inbounds i16, i16* %15362, i64 16
  %15366 = bitcast i16* %15365 to <16 x i16>*
  store <16 x i16> %15364, <16 x i16>* %15366, align 2, !tbaa !401
  %indvars.iv.next3190 = add nuw nsw i64 %indvars.iv3189, 1
  %.not2472 = icmp eq i64 %indvars.iv.next3190, %370
  br i1 %.not2472, label %"end for blur_y.s0.x.x.rebased1521", label %"for blur_y.s0.x.x.rebased1520"

"for blur_y.s0.x.x.rebased1537":                  ; preds = %"for blur_y.s0.x.x.rebased1537.preheader", %"consume blur_x1547"
  %blur_y.s0.x.x.rebased1539 = phi i32 [ %15445, %"consume blur_x1547" ], [ 0, %"for blur_y.s0.x.x.rebased1537.preheader" ]
  %15367 = add nsw i32 %blur_y.s0.x.x.rebased1539, %t1582776
  %a502 = shl nsw i32 %15367, 5
  %15368 = icmp sgt i32 %a327, %a502
  %b508 = select i1 %15368, i32 %a502, i32 %a327
  %15369 = icmp slt i32 %15367, 1
  %15370 = icmp sgt i32 %194, %a502
  %15371 = or i1 %15369, %15370
  br i1 %15371, label %"produce blur_x1544", label %"consume blur_x1547"

"end for blur_y.s0.x.x.rebased1538":              ; preds = %"consume blur_x1547", %"end for blur_y.s0.x.x.rebased1521"
  br i1 %224, label %"produce blur_x1551", label %after_bb1548

"produce blur_x1544":                             ; preds = %"for blur_y.s0.x.x.rebased1537"
  %15372 = icmp slt i32 %b508, %194
  %blur_x.s0.x.v1.base.s1545 = select i1 %15372, i32 %b508, i32 %194
  %t9011546 = add nsw i32 %blur_x.s0.x.v1.base.s1545, %t18731517
  %15373 = sext i32 %t9011546 to i64
  %15374 = getelementptr inbounds i16, i16* %read_input784, i64 %15373
  %15375 = getelementptr inbounds i16, i16* %15374, i64 1
  %15376 = bitcast i16* %15375 to <16 x i16>*
  %15377 = load <16 x i16>, <16 x i16>* %15376, align 2, !tbaa !396
  %15378 = getelementptr inbounds i16, i16* %15374, i64 17
  %15379 = bitcast i16* %15378 to <16 x i16>*
  %15380 = load <16 x i16>, <16 x i16>* %15379, align 2, !tbaa !396
  %15381 = getelementptr inbounds i16, i16* %15374, i64 2
  %15382 = bitcast i16* %15381 to <16 x i16>*
  %15383 = load <16 x i16>, <16 x i16>* %15382, align 2, !tbaa !396
  %15384 = getelementptr inbounds i16, i16* %15374, i64 18
  %15385 = bitcast i16* %15384 to <16 x i16>*
  %15386 = load <16 x i16>, <16 x i16>* %15385, align 2, !tbaa !396
  %15387 = bitcast i16* %15374 to <16 x i16>*
  %15388 = load <16 x i16>, <16 x i16>* %15387, align 2, !tbaa !396
  %15389 = getelementptr inbounds i16, i16* %15374, i64 16
  %15390 = bitcast i16* %15389 to <16 x i16>*
  %15391 = load <16 x i16>, <16 x i16>* %15390, align 2, !tbaa !396
  %15392 = add <16 x i16> %15383, %15377
  %15393 = add <16 x i16> %15392, %15388
  %15394 = add <16 x i16> %15386, %15380
  %15395 = add <16 x i16> %15394, %15391
  %15396 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15393, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15397 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15395, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15398 = shufflevector <16 x i16> %15396, <16 x i16> %15397, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15399 = lshr <32 x i16> %15398, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15400 = shufflevector <32 x i16> %15399, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15401 = sext i32 %blur_x.s0.x.v1.base.s1545 to i64
  %15402 = add nsw i64 %15401, %15282
  %15403 = getelementptr inbounds i16, i16* %blur_x841, i64 %15402
  %15404 = bitcast i16* %15403 to <16 x i16>*
  store <16 x i16> %15400, <16 x i16>* %15404, align 2, !tbaa !399
  %15405 = shufflevector <32 x i16> %15399, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15406 = getelementptr inbounds i16, i16* %15403, i64 16
  %15407 = bitcast i16* %15406 to <16 x i16>*
  store <16 x i16> %15405, <16 x i16>* %15407, align 2, !tbaa !399
  br label %"consume blur_x1547"

"consume blur_x1547":                             ; preds = %"for blur_y.s0.x.x.rebased1537", %"produce blur_x1544"
  %15408 = sext i32 %b508 to i64
  %15409 = add nsw i64 %15285, %15408
  %15410 = getelementptr inbounds i16, i16* %blur_x841, i64 %15409
  %15411 = bitcast i16* %15410 to <16 x i16>*
  %15412 = load <16 x i16>, <16 x i16>* %15411, align 2, !tbaa !399
  %15413 = getelementptr inbounds i16, i16* %15410, i64 16
  %15414 = bitcast i16* %15413 to <16 x i16>*
  %15415 = load <16 x i16>, <16 x i16>* %15414, align 2, !tbaa !399
  %15416 = add nsw i64 %15288, %15408
  %15417 = getelementptr inbounds i16, i16* %blur_x841, i64 %15416
  %15418 = bitcast i16* %15417 to <16 x i16>*
  %15419 = load <16 x i16>, <16 x i16>* %15418, align 2, !tbaa !399
  %15420 = getelementptr inbounds i16, i16* %15417, i64 16
  %15421 = bitcast i16* %15420 to <16 x i16>*
  %15422 = load <16 x i16>, <16 x i16>* %15421, align 2, !tbaa !399
  %15423 = add nsw i64 %15291, %15408
  %15424 = getelementptr inbounds i16, i16* %blur_x841, i64 %15423
  %15425 = bitcast i16* %15424 to <16 x i16>*
  %15426 = load <16 x i16>, <16 x i16>* %15425, align 2, !tbaa !399
  %15427 = getelementptr inbounds i16, i16* %15424, i64 16
  %15428 = bitcast i16* %15427 to <16 x i16>*
  %15429 = load <16 x i16>, <16 x i16>* %15428, align 2, !tbaa !399
  %15430 = add <16 x i16> %15419, %15412
  %15431 = add <16 x i16> %15430, %15426
  %15432 = add <16 x i16> %15422, %15415
  %15433 = add <16 x i16> %15432, %15429
  %15434 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15431, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15435 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15433, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15436 = shufflevector <16 x i16> %15434, <16 x i16> %15435, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15437 = lshr <32 x i16> %15436, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15438 = shufflevector <32 x i16> %15437, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15439 = add nsw i64 %15295, %15408
  %15440 = getelementptr inbounds i16, i16* %255, i64 %15439
  %15441 = bitcast i16* %15440 to <16 x i16>*
  store <16 x i16> %15438, <16 x i16>* %15441, align 2, !tbaa !401
  %15442 = shufflevector <32 x i16> %15437, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15443 = getelementptr inbounds i16, i16* %15440, i64 16
  %15444 = bitcast i16* %15443 to <16 x i16>*
  store <16 x i16> %15442, <16 x i16>* %15444, align 2, !tbaa !401
  %15445 = add nuw nsw i32 %blur_y.s0.x.x.rebased1539, 1
  %.not2471 = icmp eq i32 %15445, %t1639861
  br i1 %.not2471, label %"end for blur_y.s0.x.x.rebased1538", label %"for blur_y.s0.x.x.rebased1537"

after_bb1548:                                     ; preds = %"end for blur_y.s0.x.x.rebased1538", %"produce blur_x1551"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1563.preheader", label %"end for blur_y.s0.x.x.rebased1564", !prof !386

"for blur_y.s0.x.x.rebased1563.preheader":        ; preds = %after_bb1548
  %15446 = sext i32 %t1644878 to i64
  %15447 = zext i32 %.pre-phi3324 to i64
  %15448 = mul nsw i64 %15447, %298
  %15449 = sub nsw i64 %15448, %285
  %15450 = zext i32 %.pre-phi3328 to i64
  %15451 = mul nsw i64 %15450, %298
  %15452 = sub nsw i64 %15451, %285
  %15453 = zext i32 %.pre-phi3338 to i64
  %15454 = mul nsw i64 %15453, %298
  %15455 = sub nsw i64 %15454, %285
  %15456 = sext i32 %a339 to i64
  %15457 = add nsw i64 %15456, 15
  %15458 = mul nsw i64 %15457, %299
  %15459 = add nsw i64 %15458, %302
  br label %"for blur_y.s0.x.x.rebased1563"

"produce blur_x1551":                             ; preds = %"end for blur_y.s0.x.x.rebased1538"
  %15460 = getelementptr inbounds i16, i16* %read_input784, i64 %331
  %15461 = getelementptr inbounds i16, i16* %15460, i64 -31
  %15462 = bitcast i16* %15461 to <16 x i16>*
  %15463 = load <16 x i16>, <16 x i16>* %15462, align 2, !tbaa !396
  %15464 = getelementptr inbounds i16, i16* %15460, i64 -15
  %15465 = bitcast i16* %15464 to <16 x i16>*
  %15466 = load <16 x i16>, <16 x i16>* %15465, align 2, !tbaa !396
  %15467 = getelementptr inbounds i16, i16* %15460, i64 -30
  %15468 = bitcast i16* %15467 to <16 x i16>*
  %15469 = load <16 x i16>, <16 x i16>* %15468, align 2, !tbaa !396
  %15470 = getelementptr inbounds i16, i16* %15460, i64 -14
  %15471 = bitcast i16* %15470 to <16 x i16>*
  %15472 = load <16 x i16>, <16 x i16>* %15471, align 2, !tbaa !396
  %15473 = getelementptr inbounds i16, i16* %15460, i64 -32
  %15474 = bitcast i16* %15473 to <16 x i16>*
  %15475 = load <16 x i16>, <16 x i16>* %15474, align 2, !tbaa !396
  %15476 = getelementptr inbounds i16, i16* %15460, i64 -16
  %15477 = bitcast i16* %15476 to <16 x i16>*
  %15478 = load <16 x i16>, <16 x i16>* %15477, align 2, !tbaa !396
  %15479 = add <16 x i16> %15469, %15463
  %15480 = add <16 x i16> %15479, %15475
  %15481 = add <16 x i16> %15472, %15466
  %15482 = add <16 x i16> %15481, %15478
  %15483 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15480, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15484 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15482, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15485 = shufflevector <16 x i16> %15483, <16 x i16> %15484, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15486 = lshr <32 x i16> %15485, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15487 = shufflevector <32 x i16> %15486, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15488 = zext i32 %.pre-phi3328 to i64
  %15489 = mul nsw i64 %286, %15488
  %15490 = add nsw i64 %288, %15489
  %15491 = getelementptr inbounds i16, i16* %blur_x841, i64 %15490
  %15492 = getelementptr inbounds i16, i16* %15491, i64 -32
  %15493 = bitcast i16* %15492 to <16 x i16>*
  store <16 x i16> %15487, <16 x i16>* %15493, align 2, !tbaa !399
  %15494 = shufflevector <32 x i16> %15486, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15495 = getelementptr inbounds i16, i16* %15491, i64 -16
  %15496 = bitcast i16* %15495 to <16 x i16>*
  store <16 x i16> %15494, <16 x i16>* %15496, align 2, !tbaa !399
  %15497 = zext i32 %.pre-phi3324 to i64
  %15498 = mul nsw i64 %15497, %298
  %15499 = add nsw i64 %15498, %283
  %15500 = getelementptr inbounds i16, i16* %blur_x841, i64 %15499
  %15501 = getelementptr inbounds i16, i16* %15500, i64 -32
  %15502 = bitcast i16* %15501 to <16 x i16>*
  %15503 = load <16 x i16>, <16 x i16>* %15502, align 2, !tbaa !399
  %15504 = getelementptr inbounds i16, i16* %15500, i64 -16
  %15505 = bitcast i16* %15504 to <16 x i16>*
  %15506 = load <16 x i16>, <16 x i16>* %15505, align 2, !tbaa !399
  %15507 = mul nsw i64 %15488, %298
  %15508 = add nsw i64 %15507, %283
  %15509 = getelementptr inbounds i16, i16* %blur_x841, i64 %15508
  %15510 = getelementptr inbounds i16, i16* %15509, i64 -32
  %15511 = bitcast i16* %15510 to <16 x i16>*
  %15512 = load <16 x i16>, <16 x i16>* %15511, align 2, !tbaa !399
  %15513 = getelementptr inbounds i16, i16* %15509, i64 -16
  %15514 = bitcast i16* %15513 to <16 x i16>*
  %15515 = load <16 x i16>, <16 x i16>* %15514, align 2, !tbaa !399
  %15516 = zext i32 %.pre-phi3338 to i64
  %15517 = mul nsw i64 %15516, %298
  %15518 = add nsw i64 %15517, %283
  %15519 = getelementptr inbounds i16, i16* %blur_x841, i64 %15518
  %15520 = getelementptr inbounds i16, i16* %15519, i64 -32
  %15521 = bitcast i16* %15520 to <16 x i16>*
  %15522 = load <16 x i16>, <16 x i16>* %15521, align 2, !tbaa !399
  %15523 = getelementptr inbounds i16, i16* %15519, i64 -16
  %15524 = bitcast i16* %15523 to <16 x i16>*
  %15525 = load <16 x i16>, <16 x i16>* %15524, align 2, !tbaa !399
  %15526 = add <16 x i16> %15512, %15503
  %15527 = add <16 x i16> %15526, %15522
  %15528 = add <16 x i16> %15515, %15506
  %15529 = add <16 x i16> %15528, %15525
  %15530 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15527, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15531 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15529, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15532 = shufflevector <16 x i16> %15530, <16 x i16> %15531, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15533 = lshr <32 x i16> %15532, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15534 = shufflevector <32 x i16> %15533, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15535 = sext i32 %a339 to i64
  %15536 = add nsw i64 %15535, 15
  %15537 = mul nsw i64 %15536, %299
  %15538 = add nsw i64 %301, %15537
  %15539 = getelementptr inbounds i16, i16* %255, i64 %15538
  %15540 = getelementptr inbounds i16, i16* %15539, i64 -32
  %15541 = bitcast i16* %15540 to <16 x i16>*
  store <16 x i16> %15534, <16 x i16>* %15541, align 2, !tbaa !401
  %15542 = shufflevector <32 x i16> %15533, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15543 = getelementptr inbounds i16, i16* %15539, i64 -16
  %15544 = bitcast i16* %15543 to <16 x i16>*
  store <16 x i16> %15542, <16 x i16>* %15544, align 2, !tbaa !401
  br label %after_bb1548

"for blur_y.s0.x.x.rebased1563":                  ; preds = %"for blur_y.s0.x.x.rebased1563.preheader", %"consume blur_x1572"
  %indvars.iv3192 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1563.preheader" ], [ %indvars.iv.next3193, %"consume blur_x1572" ]
  %15545 = add nsw i64 %indvars.iv3192, %290
  %15546 = icmp slt i64 %15545, 1
  %15547 = trunc i64 %15545 to i32
  %15548 = shl nsw i32 %15547, 5
  %15549 = icmp sgt i32 %194, %15548
  %15550 = or i1 %15546, %15549
  br i1 %15550, label %"produce blur_x1570", label %"for blur_y.s0.x.x.rebased1563.consume blur_x1572_crit_edge"

"for blur_y.s0.x.x.rebased1563.consume blur_x1572_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1563"
  %.pre3367 = shl nsw i64 %15545, 5
  br label %"consume blur_x1572"

"end for blur_y.s0.x.x.rebased1564":              ; preds = %"consume blur_x1572", %after_bb1548
  br i1 %291, label %"for blur_y.s0.x.x.rebased1580.preheader", label %"end for blur_y.s0.x.x.rebased1581", !prof !386

"for blur_y.s0.x.x.rebased1580.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1564"
  %15551 = sext i32 %t1644878 to i64
  %15552 = zext i32 %.pre-phi3324 to i64
  %15553 = mul nsw i64 %15552, %298
  %15554 = sub nsw i64 %15553, %285
  %15555 = zext i32 %.pre-phi3328 to i64
  %15556 = mul nsw i64 %15555, %298
  %15557 = sub nsw i64 %15556, %285
  %15558 = zext i32 %.pre-phi3338 to i64
  %15559 = mul nsw i64 %15558, %298
  %15560 = sub nsw i64 %15559, %285
  %15561 = sext i32 %a339 to i64
  %15562 = add nsw i64 %15561, 15
  %15563 = mul nsw i64 %15562, %299
  %15564 = add nsw i64 %15563, %302
  br label %"for blur_y.s0.x.x.rebased1580"

"produce blur_x1570":                             ; preds = %"for blur_y.s0.x.x.rebased1563"
  %t9121571 = add nsw i32 %15548, %t18891560
  %15565 = sext i32 %t9121571 to i64
  %15566 = getelementptr inbounds i16, i16* %read_input784, i64 %15565
  %15567 = getelementptr inbounds i16, i16* %15566, i64 1
  %15568 = bitcast i16* %15567 to <16 x i16>*
  %15569 = load <16 x i16>, <16 x i16>* %15568, align 2, !tbaa !396
  %15570 = getelementptr inbounds i16, i16* %15566, i64 17
  %15571 = bitcast i16* %15570 to <16 x i16>*
  %15572 = load <16 x i16>, <16 x i16>* %15571, align 2, !tbaa !396
  %15573 = getelementptr inbounds i16, i16* %15566, i64 2
  %15574 = bitcast i16* %15573 to <16 x i16>*
  %15575 = load <16 x i16>, <16 x i16>* %15574, align 2, !tbaa !396
  %15576 = getelementptr inbounds i16, i16* %15566, i64 18
  %15577 = bitcast i16* %15576 to <16 x i16>*
  %15578 = load <16 x i16>, <16 x i16>* %15577, align 2, !tbaa !396
  %15579 = bitcast i16* %15566 to <16 x i16>*
  %15580 = load <16 x i16>, <16 x i16>* %15579, align 2, !tbaa !396
  %15581 = getelementptr inbounds i16, i16* %15566, i64 16
  %15582 = bitcast i16* %15581 to <16 x i16>*
  %15583 = load <16 x i16>, <16 x i16>* %15582, align 2, !tbaa !396
  %15584 = add <16 x i16> %15575, %15569
  %15585 = add <16 x i16> %15584, %15580
  %15586 = add <16 x i16> %15578, %15572
  %15587 = add <16 x i16> %15586, %15583
  %15588 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15585, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15589 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15587, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15590 = shufflevector <16 x i16> %15588, <16 x i16> %15589, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15591 = lshr <32 x i16> %15590, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15592 = shufflevector <32 x i16> %15591, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15593 = shl nsw i64 %15545, 5
  %15594 = add nsw i64 %15593, %15446
  %15595 = getelementptr inbounds i16, i16* %blur_x841, i64 %15594
  %15596 = bitcast i16* %15595 to <16 x i16>*
  store <16 x i16> %15592, <16 x i16>* %15596, align 2, !tbaa !399
  %15597 = shufflevector <32 x i16> %15591, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15598 = getelementptr inbounds i16, i16* %15595, i64 16
  %15599 = bitcast i16* %15598 to <16 x i16>*
  store <16 x i16> %15597, <16 x i16>* %15599, align 2, !tbaa !399
  br label %"consume blur_x1572"

"consume blur_x1572":                             ; preds = %"for blur_y.s0.x.x.rebased1563.consume blur_x1572_crit_edge", %"produce blur_x1570"
  %.pre-phi3368 = phi i64 [ %.pre3367, %"for blur_y.s0.x.x.rebased1563.consume blur_x1572_crit_edge" ], [ %15593, %"produce blur_x1570" ]
  %15600 = add nsw i64 %15449, %.pre-phi3368
  %15601 = getelementptr inbounds i16, i16* %blur_x841, i64 %15600
  %15602 = bitcast i16* %15601 to <16 x i16>*
  %15603 = load <16 x i16>, <16 x i16>* %15602, align 2, !tbaa !399
  %15604 = getelementptr inbounds i16, i16* %15601, i64 16
  %15605 = bitcast i16* %15604 to <16 x i16>*
  %15606 = load <16 x i16>, <16 x i16>* %15605, align 2, !tbaa !399
  %15607 = add nsw i64 %15452, %.pre-phi3368
  %15608 = getelementptr inbounds i16, i16* %blur_x841, i64 %15607
  %15609 = bitcast i16* %15608 to <16 x i16>*
  %15610 = load <16 x i16>, <16 x i16>* %15609, align 2, !tbaa !399
  %15611 = getelementptr inbounds i16, i16* %15608, i64 16
  %15612 = bitcast i16* %15611 to <16 x i16>*
  %15613 = load <16 x i16>, <16 x i16>* %15612, align 2, !tbaa !399
  %15614 = add nsw i64 %15455, %.pre-phi3368
  %15615 = getelementptr inbounds i16, i16* %blur_x841, i64 %15614
  %15616 = bitcast i16* %15615 to <16 x i16>*
  %15617 = load <16 x i16>, <16 x i16>* %15616, align 2, !tbaa !399
  %15618 = getelementptr inbounds i16, i16* %15615, i64 16
  %15619 = bitcast i16* %15618 to <16 x i16>*
  %15620 = load <16 x i16>, <16 x i16>* %15619, align 2, !tbaa !399
  %15621 = add <16 x i16> %15610, %15603
  %15622 = add <16 x i16> %15621, %15617
  %15623 = add <16 x i16> %15613, %15606
  %15624 = add <16 x i16> %15623, %15620
  %15625 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15622, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15626 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15624, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15627 = shufflevector <16 x i16> %15625, <16 x i16> %15626, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15628 = lshr <32 x i16> %15627, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15629 = shufflevector <32 x i16> %15628, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15630 = add nsw i64 %15459, %.pre-phi3368
  %15631 = getelementptr inbounds i16, i16* %255, i64 %15630
  %15632 = bitcast i16* %15631 to <16 x i16>*
  store <16 x i16> %15629, <16 x i16>* %15632, align 2, !tbaa !401
  %15633 = shufflevector <32 x i16> %15628, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15634 = getelementptr inbounds i16, i16* %15631, i64 16
  %15635 = bitcast i16* %15634 to <16 x i16>*
  store <16 x i16> %15633, <16 x i16>* %15635, align 2, !tbaa !401
  %indvars.iv.next3193 = add nuw nsw i64 %indvars.iv3192, 1
  %.not2470 = icmp eq i64 %indvars.iv.next3193, %370
  br i1 %.not2470, label %"end for blur_y.s0.x.x.rebased1564", label %"for blur_y.s0.x.x.rebased1563"

"for blur_y.s0.x.x.rebased1580":                  ; preds = %"for blur_y.s0.x.x.rebased1580.preheader", %"consume blur_x1590"
  %blur_y.s0.x.x.rebased1582 = phi i32 [ %15714, %"consume blur_x1590" ], [ 0, %"for blur_y.s0.x.x.rebased1580.preheader" ]
  %15636 = add nsw i32 %blur_y.s0.x.x.rebased1582, %t1582776
  %a509 = shl nsw i32 %15636, 5
  %15637 = icmp sgt i32 %a327, %a509
  %b515 = select i1 %15637, i32 %a509, i32 %a327
  %15638 = icmp slt i32 %15636, 1
  %15639 = icmp sgt i32 %194, %a509
  %15640 = or i1 %15638, %15639
  br i1 %15640, label %"produce blur_x1587", label %"consume blur_x1590"

"end for blur_y.s0.x.x.rebased1581":              ; preds = %"consume blur_x1590", %"end for blur_y.s0.x.x.rebased1564"
  br i1 %224, label %"produce blur_x1594", label %after_bb1591

"produce blur_x1587":                             ; preds = %"for blur_y.s0.x.x.rebased1580"
  %15641 = icmp slt i32 %b515, %194
  %blur_x.s0.x.v1.base.s1588 = select i1 %15641, i32 %b515, i32 %194
  %t9171589 = add nsw i32 %blur_x.s0.x.v1.base.s1588, %t18891560
  %15642 = sext i32 %t9171589 to i64
  %15643 = getelementptr inbounds i16, i16* %read_input784, i64 %15642
  %15644 = getelementptr inbounds i16, i16* %15643, i64 1
  %15645 = bitcast i16* %15644 to <16 x i16>*
  %15646 = load <16 x i16>, <16 x i16>* %15645, align 2, !tbaa !396
  %15647 = getelementptr inbounds i16, i16* %15643, i64 17
  %15648 = bitcast i16* %15647 to <16 x i16>*
  %15649 = load <16 x i16>, <16 x i16>* %15648, align 2, !tbaa !396
  %15650 = getelementptr inbounds i16, i16* %15643, i64 2
  %15651 = bitcast i16* %15650 to <16 x i16>*
  %15652 = load <16 x i16>, <16 x i16>* %15651, align 2, !tbaa !396
  %15653 = getelementptr inbounds i16, i16* %15643, i64 18
  %15654 = bitcast i16* %15653 to <16 x i16>*
  %15655 = load <16 x i16>, <16 x i16>* %15654, align 2, !tbaa !396
  %15656 = bitcast i16* %15643 to <16 x i16>*
  %15657 = load <16 x i16>, <16 x i16>* %15656, align 2, !tbaa !396
  %15658 = getelementptr inbounds i16, i16* %15643, i64 16
  %15659 = bitcast i16* %15658 to <16 x i16>*
  %15660 = load <16 x i16>, <16 x i16>* %15659, align 2, !tbaa !396
  %15661 = add <16 x i16> %15652, %15646
  %15662 = add <16 x i16> %15661, %15657
  %15663 = add <16 x i16> %15655, %15649
  %15664 = add <16 x i16> %15663, %15660
  %15665 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15662, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15666 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15664, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15667 = shufflevector <16 x i16> %15665, <16 x i16> %15666, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15668 = lshr <32 x i16> %15667, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15669 = shufflevector <32 x i16> %15668, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15670 = sext i32 %blur_x.s0.x.v1.base.s1588 to i64
  %15671 = add nsw i64 %15670, %15551
  %15672 = getelementptr inbounds i16, i16* %blur_x841, i64 %15671
  %15673 = bitcast i16* %15672 to <16 x i16>*
  store <16 x i16> %15669, <16 x i16>* %15673, align 2, !tbaa !399
  %15674 = shufflevector <32 x i16> %15668, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15675 = getelementptr inbounds i16, i16* %15672, i64 16
  %15676 = bitcast i16* %15675 to <16 x i16>*
  store <16 x i16> %15674, <16 x i16>* %15676, align 2, !tbaa !399
  br label %"consume blur_x1590"

"consume blur_x1590":                             ; preds = %"for blur_y.s0.x.x.rebased1580", %"produce blur_x1587"
  %15677 = sext i32 %b515 to i64
  %15678 = add nsw i64 %15554, %15677
  %15679 = getelementptr inbounds i16, i16* %blur_x841, i64 %15678
  %15680 = bitcast i16* %15679 to <16 x i16>*
  %15681 = load <16 x i16>, <16 x i16>* %15680, align 2, !tbaa !399
  %15682 = getelementptr inbounds i16, i16* %15679, i64 16
  %15683 = bitcast i16* %15682 to <16 x i16>*
  %15684 = load <16 x i16>, <16 x i16>* %15683, align 2, !tbaa !399
  %15685 = add nsw i64 %15557, %15677
  %15686 = getelementptr inbounds i16, i16* %blur_x841, i64 %15685
  %15687 = bitcast i16* %15686 to <16 x i16>*
  %15688 = load <16 x i16>, <16 x i16>* %15687, align 2, !tbaa !399
  %15689 = getelementptr inbounds i16, i16* %15686, i64 16
  %15690 = bitcast i16* %15689 to <16 x i16>*
  %15691 = load <16 x i16>, <16 x i16>* %15690, align 2, !tbaa !399
  %15692 = add nsw i64 %15560, %15677
  %15693 = getelementptr inbounds i16, i16* %blur_x841, i64 %15692
  %15694 = bitcast i16* %15693 to <16 x i16>*
  %15695 = load <16 x i16>, <16 x i16>* %15694, align 2, !tbaa !399
  %15696 = getelementptr inbounds i16, i16* %15693, i64 16
  %15697 = bitcast i16* %15696 to <16 x i16>*
  %15698 = load <16 x i16>, <16 x i16>* %15697, align 2, !tbaa !399
  %15699 = add <16 x i16> %15688, %15681
  %15700 = add <16 x i16> %15699, %15695
  %15701 = add <16 x i16> %15691, %15684
  %15702 = add <16 x i16> %15701, %15698
  %15703 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15700, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15704 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15702, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15705 = shufflevector <16 x i16> %15703, <16 x i16> %15704, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15706 = lshr <32 x i16> %15705, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15707 = shufflevector <32 x i16> %15706, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15708 = add nsw i64 %15564, %15677
  %15709 = getelementptr inbounds i16, i16* %255, i64 %15708
  %15710 = bitcast i16* %15709 to <16 x i16>*
  store <16 x i16> %15707, <16 x i16>* %15710, align 2, !tbaa !401
  %15711 = shufflevector <32 x i16> %15706, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15712 = getelementptr inbounds i16, i16* %15709, i64 16
  %15713 = bitcast i16* %15712 to <16 x i16>*
  store <16 x i16> %15711, <16 x i16>* %15713, align 2, !tbaa !401
  %15714 = add nuw nsw i32 %blur_y.s0.x.x.rebased1582, 1
  %.not2469 = icmp eq i32 %15714, %t1639861
  br i1 %.not2469, label %"end for blur_y.s0.x.x.rebased1581", label %"for blur_y.s0.x.x.rebased1580"

after_bb1591:                                     ; preds = %"end for blur_y.s0.x.x.rebased1581", %"produce blur_x1594"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1606.preheader", label %"end for blur_y.s0.x.x.rebased1607", !prof !386

"for blur_y.s0.x.x.rebased1606.preheader":        ; preds = %after_bb1591
  %15715 = sext i32 %t1650914 to i64
  %15716 = zext i32 %.pre-phi3328 to i64
  %15717 = mul nsw i64 %15716, %298
  %15718 = sub nsw i64 %15717, %285
  %15719 = zext i32 %.pre-phi3332 to i64
  %15720 = mul nsw i64 %15719, %298
  %15721 = sub nsw i64 %15720, %285
  %15722 = zext i32 %.pre-phi3324 to i64
  %15723 = mul nsw i64 %15722, %298
  %15724 = sub nsw i64 %15723, %285
  %15725 = sext i32 %a339 to i64
  %15726 = add nsw i64 %15725, 16
  %15727 = mul nsw i64 %15726, %299
  %15728 = add nsw i64 %15727, %302
  br label %"for blur_y.s0.x.x.rebased1606"

"produce blur_x1594":                             ; preds = %"end for blur_y.s0.x.x.rebased1581"
  %15729 = getelementptr inbounds i16, i16* %read_input784, i64 %333
  %15730 = getelementptr inbounds i16, i16* %15729, i64 -31
  %15731 = bitcast i16* %15730 to <16 x i16>*
  %15732 = load <16 x i16>, <16 x i16>* %15731, align 2, !tbaa !396
  %15733 = getelementptr inbounds i16, i16* %15729, i64 -15
  %15734 = bitcast i16* %15733 to <16 x i16>*
  %15735 = load <16 x i16>, <16 x i16>* %15734, align 2, !tbaa !396
  %15736 = getelementptr inbounds i16, i16* %15729, i64 -30
  %15737 = bitcast i16* %15736 to <16 x i16>*
  %15738 = load <16 x i16>, <16 x i16>* %15737, align 2, !tbaa !396
  %15739 = getelementptr inbounds i16, i16* %15729, i64 -14
  %15740 = bitcast i16* %15739 to <16 x i16>*
  %15741 = load <16 x i16>, <16 x i16>* %15740, align 2, !tbaa !396
  %15742 = getelementptr inbounds i16, i16* %15729, i64 -32
  %15743 = bitcast i16* %15742 to <16 x i16>*
  %15744 = load <16 x i16>, <16 x i16>* %15743, align 2, !tbaa !396
  %15745 = getelementptr inbounds i16, i16* %15729, i64 -16
  %15746 = bitcast i16* %15745 to <16 x i16>*
  %15747 = load <16 x i16>, <16 x i16>* %15746, align 2, !tbaa !396
  %15748 = add <16 x i16> %15738, %15732
  %15749 = add <16 x i16> %15748, %15744
  %15750 = add <16 x i16> %15741, %15735
  %15751 = add <16 x i16> %15750, %15747
  %15752 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15749, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15753 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15751, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15754 = shufflevector <16 x i16> %15752, <16 x i16> %15753, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15755 = lshr <32 x i16> %15754, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15756 = shufflevector <32 x i16> %15755, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15757 = zext i32 %.pre-phi3332 to i64
  %15758 = mul nsw i64 %286, %15757
  %15759 = add nsw i64 %288, %15758
  %15760 = getelementptr inbounds i16, i16* %blur_x841, i64 %15759
  %15761 = getelementptr inbounds i16, i16* %15760, i64 -32
  %15762 = bitcast i16* %15761 to <16 x i16>*
  store <16 x i16> %15756, <16 x i16>* %15762, align 2, !tbaa !399
  %15763 = shufflevector <32 x i16> %15755, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15764 = getelementptr inbounds i16, i16* %15760, i64 -16
  %15765 = bitcast i16* %15764 to <16 x i16>*
  store <16 x i16> %15763, <16 x i16>* %15765, align 2, !tbaa !399
  %15766 = zext i32 %.pre-phi3328 to i64
  %15767 = mul nsw i64 %15766, %298
  %15768 = add nsw i64 %15767, %283
  %15769 = getelementptr inbounds i16, i16* %blur_x841, i64 %15768
  %15770 = getelementptr inbounds i16, i16* %15769, i64 -32
  %15771 = bitcast i16* %15770 to <16 x i16>*
  %15772 = load <16 x i16>, <16 x i16>* %15771, align 2, !tbaa !399
  %15773 = getelementptr inbounds i16, i16* %15769, i64 -16
  %15774 = bitcast i16* %15773 to <16 x i16>*
  %15775 = load <16 x i16>, <16 x i16>* %15774, align 2, !tbaa !399
  %15776 = mul nsw i64 %15757, %298
  %15777 = add nsw i64 %15776, %283
  %15778 = getelementptr inbounds i16, i16* %blur_x841, i64 %15777
  %15779 = getelementptr inbounds i16, i16* %15778, i64 -32
  %15780 = bitcast i16* %15779 to <16 x i16>*
  %15781 = load <16 x i16>, <16 x i16>* %15780, align 2, !tbaa !399
  %15782 = getelementptr inbounds i16, i16* %15778, i64 -16
  %15783 = bitcast i16* %15782 to <16 x i16>*
  %15784 = load <16 x i16>, <16 x i16>* %15783, align 2, !tbaa !399
  %15785 = zext i32 %.pre-phi3324 to i64
  %15786 = mul nsw i64 %15785, %298
  %15787 = add nsw i64 %15786, %283
  %15788 = getelementptr inbounds i16, i16* %blur_x841, i64 %15787
  %15789 = getelementptr inbounds i16, i16* %15788, i64 -32
  %15790 = bitcast i16* %15789 to <16 x i16>*
  %15791 = load <16 x i16>, <16 x i16>* %15790, align 2, !tbaa !399
  %15792 = getelementptr inbounds i16, i16* %15788, i64 -16
  %15793 = bitcast i16* %15792 to <16 x i16>*
  %15794 = load <16 x i16>, <16 x i16>* %15793, align 2, !tbaa !399
  %15795 = add <16 x i16> %15781, %15772
  %15796 = add <16 x i16> %15795, %15791
  %15797 = add <16 x i16> %15784, %15775
  %15798 = add <16 x i16> %15797, %15794
  %15799 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15796, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15800 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15798, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15801 = shufflevector <16 x i16> %15799, <16 x i16> %15800, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15802 = lshr <32 x i16> %15801, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15803 = shufflevector <32 x i16> %15802, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15804 = sext i32 %a339 to i64
  %15805 = add nsw i64 %15804, 16
  %15806 = mul nsw i64 %15805, %299
  %15807 = add nsw i64 %301, %15806
  %15808 = getelementptr inbounds i16, i16* %255, i64 %15807
  %15809 = getelementptr inbounds i16, i16* %15808, i64 -32
  %15810 = bitcast i16* %15809 to <16 x i16>*
  store <16 x i16> %15803, <16 x i16>* %15810, align 2, !tbaa !401
  %15811 = shufflevector <32 x i16> %15802, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15812 = getelementptr inbounds i16, i16* %15808, i64 -16
  %15813 = bitcast i16* %15812 to <16 x i16>*
  store <16 x i16> %15811, <16 x i16>* %15813, align 2, !tbaa !401
  br label %after_bb1591

"for blur_y.s0.x.x.rebased1606":                  ; preds = %"for blur_y.s0.x.x.rebased1606.preheader", %"consume blur_x1615"
  %indvars.iv3195 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1606.preheader" ], [ %indvars.iv.next3196, %"consume blur_x1615" ]
  %15814 = add nsw i64 %indvars.iv3195, %290
  %15815 = icmp slt i64 %15814, 1
  %15816 = trunc i64 %15814 to i32
  %15817 = shl nsw i32 %15816, 5
  %15818 = icmp sgt i32 %194, %15817
  %15819 = or i1 %15815, %15818
  br i1 %15819, label %"produce blur_x1613", label %"for blur_y.s0.x.x.rebased1606.consume blur_x1615_crit_edge"

"for blur_y.s0.x.x.rebased1606.consume blur_x1615_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1606"
  %.pre3369 = shl nsw i64 %15814, 5
  br label %"consume blur_x1615"

"end for blur_y.s0.x.x.rebased1607":              ; preds = %"consume blur_x1615", %after_bb1591
  br i1 %291, label %"for blur_y.s0.x.x.rebased1623.preheader", label %"end for blur_y.s0.x.x.rebased1624", !prof !386

"for blur_y.s0.x.x.rebased1623.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1607"
  %15820 = sext i32 %t1650914 to i64
  %15821 = zext i32 %.pre-phi3328 to i64
  %15822 = mul nsw i64 %15821, %298
  %15823 = sub nsw i64 %15822, %285
  %15824 = zext i32 %.pre-phi3332 to i64
  %15825 = mul nsw i64 %15824, %298
  %15826 = sub nsw i64 %15825, %285
  %15827 = zext i32 %.pre-phi3324 to i64
  %15828 = mul nsw i64 %15827, %298
  %15829 = sub nsw i64 %15828, %285
  %15830 = sext i32 %a339 to i64
  %15831 = add nsw i64 %15830, 16
  %15832 = mul nsw i64 %15831, %299
  %15833 = add nsw i64 %15832, %302
  br label %"for blur_y.s0.x.x.rebased1623"

"produce blur_x1613":                             ; preds = %"for blur_y.s0.x.x.rebased1606"
  %t9281614 = add nsw i32 %15817, %t19051603
  %15834 = sext i32 %t9281614 to i64
  %15835 = getelementptr inbounds i16, i16* %read_input784, i64 %15834
  %15836 = getelementptr inbounds i16, i16* %15835, i64 1
  %15837 = bitcast i16* %15836 to <16 x i16>*
  %15838 = load <16 x i16>, <16 x i16>* %15837, align 2, !tbaa !396
  %15839 = getelementptr inbounds i16, i16* %15835, i64 17
  %15840 = bitcast i16* %15839 to <16 x i16>*
  %15841 = load <16 x i16>, <16 x i16>* %15840, align 2, !tbaa !396
  %15842 = getelementptr inbounds i16, i16* %15835, i64 2
  %15843 = bitcast i16* %15842 to <16 x i16>*
  %15844 = load <16 x i16>, <16 x i16>* %15843, align 2, !tbaa !396
  %15845 = getelementptr inbounds i16, i16* %15835, i64 18
  %15846 = bitcast i16* %15845 to <16 x i16>*
  %15847 = load <16 x i16>, <16 x i16>* %15846, align 2, !tbaa !396
  %15848 = bitcast i16* %15835 to <16 x i16>*
  %15849 = load <16 x i16>, <16 x i16>* %15848, align 2, !tbaa !396
  %15850 = getelementptr inbounds i16, i16* %15835, i64 16
  %15851 = bitcast i16* %15850 to <16 x i16>*
  %15852 = load <16 x i16>, <16 x i16>* %15851, align 2, !tbaa !396
  %15853 = add <16 x i16> %15844, %15838
  %15854 = add <16 x i16> %15853, %15849
  %15855 = add <16 x i16> %15847, %15841
  %15856 = add <16 x i16> %15855, %15852
  %15857 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15854, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15858 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15856, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15859 = shufflevector <16 x i16> %15857, <16 x i16> %15858, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15860 = lshr <32 x i16> %15859, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15861 = shufflevector <32 x i16> %15860, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15862 = shl nsw i64 %15814, 5
  %15863 = add nsw i64 %15862, %15715
  %15864 = getelementptr inbounds i16, i16* %blur_x841, i64 %15863
  %15865 = bitcast i16* %15864 to <16 x i16>*
  store <16 x i16> %15861, <16 x i16>* %15865, align 2, !tbaa !399
  %15866 = shufflevector <32 x i16> %15860, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15867 = getelementptr inbounds i16, i16* %15864, i64 16
  %15868 = bitcast i16* %15867 to <16 x i16>*
  store <16 x i16> %15866, <16 x i16>* %15868, align 2, !tbaa !399
  br label %"consume blur_x1615"

"consume blur_x1615":                             ; preds = %"for blur_y.s0.x.x.rebased1606.consume blur_x1615_crit_edge", %"produce blur_x1613"
  %.pre-phi3370 = phi i64 [ %.pre3369, %"for blur_y.s0.x.x.rebased1606.consume blur_x1615_crit_edge" ], [ %15862, %"produce blur_x1613" ]
  %15869 = add nsw i64 %15718, %.pre-phi3370
  %15870 = getelementptr inbounds i16, i16* %blur_x841, i64 %15869
  %15871 = bitcast i16* %15870 to <16 x i16>*
  %15872 = load <16 x i16>, <16 x i16>* %15871, align 2, !tbaa !399
  %15873 = getelementptr inbounds i16, i16* %15870, i64 16
  %15874 = bitcast i16* %15873 to <16 x i16>*
  %15875 = load <16 x i16>, <16 x i16>* %15874, align 2, !tbaa !399
  %15876 = add nsw i64 %15721, %.pre-phi3370
  %15877 = getelementptr inbounds i16, i16* %blur_x841, i64 %15876
  %15878 = bitcast i16* %15877 to <16 x i16>*
  %15879 = load <16 x i16>, <16 x i16>* %15878, align 2, !tbaa !399
  %15880 = getelementptr inbounds i16, i16* %15877, i64 16
  %15881 = bitcast i16* %15880 to <16 x i16>*
  %15882 = load <16 x i16>, <16 x i16>* %15881, align 2, !tbaa !399
  %15883 = add nsw i64 %15724, %.pre-phi3370
  %15884 = getelementptr inbounds i16, i16* %blur_x841, i64 %15883
  %15885 = bitcast i16* %15884 to <16 x i16>*
  %15886 = load <16 x i16>, <16 x i16>* %15885, align 2, !tbaa !399
  %15887 = getelementptr inbounds i16, i16* %15884, i64 16
  %15888 = bitcast i16* %15887 to <16 x i16>*
  %15889 = load <16 x i16>, <16 x i16>* %15888, align 2, !tbaa !399
  %15890 = add <16 x i16> %15879, %15872
  %15891 = add <16 x i16> %15890, %15886
  %15892 = add <16 x i16> %15882, %15875
  %15893 = add <16 x i16> %15892, %15889
  %15894 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15891, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15895 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15893, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15896 = shufflevector <16 x i16> %15894, <16 x i16> %15895, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15897 = lshr <32 x i16> %15896, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15898 = shufflevector <32 x i16> %15897, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15899 = add nsw i64 %15728, %.pre-phi3370
  %15900 = getelementptr inbounds i16, i16* %255, i64 %15899
  %15901 = bitcast i16* %15900 to <16 x i16>*
  store <16 x i16> %15898, <16 x i16>* %15901, align 2, !tbaa !401
  %15902 = shufflevector <32 x i16> %15897, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15903 = getelementptr inbounds i16, i16* %15900, i64 16
  %15904 = bitcast i16* %15903 to <16 x i16>*
  store <16 x i16> %15902, <16 x i16>* %15904, align 2, !tbaa !401
  %indvars.iv.next3196 = add nuw nsw i64 %indvars.iv3195, 1
  %.not2468 = icmp eq i64 %indvars.iv.next3196, %370
  br i1 %.not2468, label %"end for blur_y.s0.x.x.rebased1607", label %"for blur_y.s0.x.x.rebased1606"

"for blur_y.s0.x.x.rebased1623":                  ; preds = %"for blur_y.s0.x.x.rebased1623.preheader", %"consume blur_x1633"
  %blur_y.s0.x.x.rebased1625 = phi i32 [ %15983, %"consume blur_x1633" ], [ 0, %"for blur_y.s0.x.x.rebased1623.preheader" ]
  %15905 = add nsw i32 %blur_y.s0.x.x.rebased1625, %t1582776
  %a516 = shl nsw i32 %15905, 5
  %15906 = icmp sgt i32 %a327, %a516
  %b522 = select i1 %15906, i32 %a516, i32 %a327
  %15907 = icmp slt i32 %15905, 1
  %15908 = icmp sgt i32 %194, %a516
  %15909 = or i1 %15907, %15908
  br i1 %15909, label %"produce blur_x1630", label %"consume blur_x1633"

"end for blur_y.s0.x.x.rebased1624":              ; preds = %"consume blur_x1633", %"end for blur_y.s0.x.x.rebased1607"
  br i1 %224, label %"produce blur_x1637", label %after_bb1634

"produce blur_x1630":                             ; preds = %"for blur_y.s0.x.x.rebased1623"
  %15910 = icmp slt i32 %b522, %194
  %blur_x.s0.x.v1.base.s1631 = select i1 %15910, i32 %b522, i32 %194
  %t9331632 = add nsw i32 %blur_x.s0.x.v1.base.s1631, %t19051603
  %15911 = sext i32 %t9331632 to i64
  %15912 = getelementptr inbounds i16, i16* %read_input784, i64 %15911
  %15913 = getelementptr inbounds i16, i16* %15912, i64 1
  %15914 = bitcast i16* %15913 to <16 x i16>*
  %15915 = load <16 x i16>, <16 x i16>* %15914, align 2, !tbaa !396
  %15916 = getelementptr inbounds i16, i16* %15912, i64 17
  %15917 = bitcast i16* %15916 to <16 x i16>*
  %15918 = load <16 x i16>, <16 x i16>* %15917, align 2, !tbaa !396
  %15919 = getelementptr inbounds i16, i16* %15912, i64 2
  %15920 = bitcast i16* %15919 to <16 x i16>*
  %15921 = load <16 x i16>, <16 x i16>* %15920, align 2, !tbaa !396
  %15922 = getelementptr inbounds i16, i16* %15912, i64 18
  %15923 = bitcast i16* %15922 to <16 x i16>*
  %15924 = load <16 x i16>, <16 x i16>* %15923, align 2, !tbaa !396
  %15925 = bitcast i16* %15912 to <16 x i16>*
  %15926 = load <16 x i16>, <16 x i16>* %15925, align 2, !tbaa !396
  %15927 = getelementptr inbounds i16, i16* %15912, i64 16
  %15928 = bitcast i16* %15927 to <16 x i16>*
  %15929 = load <16 x i16>, <16 x i16>* %15928, align 2, !tbaa !396
  %15930 = add <16 x i16> %15921, %15915
  %15931 = add <16 x i16> %15930, %15926
  %15932 = add <16 x i16> %15924, %15918
  %15933 = add <16 x i16> %15932, %15929
  %15934 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15931, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15935 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15933, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15936 = shufflevector <16 x i16> %15934, <16 x i16> %15935, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15937 = lshr <32 x i16> %15936, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15938 = shufflevector <32 x i16> %15937, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15939 = sext i32 %blur_x.s0.x.v1.base.s1631 to i64
  %15940 = add nsw i64 %15939, %15820
  %15941 = getelementptr inbounds i16, i16* %blur_x841, i64 %15940
  %15942 = bitcast i16* %15941 to <16 x i16>*
  store <16 x i16> %15938, <16 x i16>* %15942, align 2, !tbaa !399
  %15943 = shufflevector <32 x i16> %15937, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15944 = getelementptr inbounds i16, i16* %15941, i64 16
  %15945 = bitcast i16* %15944 to <16 x i16>*
  store <16 x i16> %15943, <16 x i16>* %15945, align 2, !tbaa !399
  br label %"consume blur_x1633"

"consume blur_x1633":                             ; preds = %"for blur_y.s0.x.x.rebased1623", %"produce blur_x1630"
  %15946 = sext i32 %b522 to i64
  %15947 = add nsw i64 %15823, %15946
  %15948 = getelementptr inbounds i16, i16* %blur_x841, i64 %15947
  %15949 = bitcast i16* %15948 to <16 x i16>*
  %15950 = load <16 x i16>, <16 x i16>* %15949, align 2, !tbaa !399
  %15951 = getelementptr inbounds i16, i16* %15948, i64 16
  %15952 = bitcast i16* %15951 to <16 x i16>*
  %15953 = load <16 x i16>, <16 x i16>* %15952, align 2, !tbaa !399
  %15954 = add nsw i64 %15826, %15946
  %15955 = getelementptr inbounds i16, i16* %blur_x841, i64 %15954
  %15956 = bitcast i16* %15955 to <16 x i16>*
  %15957 = load <16 x i16>, <16 x i16>* %15956, align 2, !tbaa !399
  %15958 = getelementptr inbounds i16, i16* %15955, i64 16
  %15959 = bitcast i16* %15958 to <16 x i16>*
  %15960 = load <16 x i16>, <16 x i16>* %15959, align 2, !tbaa !399
  %15961 = add nsw i64 %15829, %15946
  %15962 = getelementptr inbounds i16, i16* %blur_x841, i64 %15961
  %15963 = bitcast i16* %15962 to <16 x i16>*
  %15964 = load <16 x i16>, <16 x i16>* %15963, align 2, !tbaa !399
  %15965 = getelementptr inbounds i16, i16* %15962, i64 16
  %15966 = bitcast i16* %15965 to <16 x i16>*
  %15967 = load <16 x i16>, <16 x i16>* %15966, align 2, !tbaa !399
  %15968 = add <16 x i16> %15957, %15950
  %15969 = add <16 x i16> %15968, %15964
  %15970 = add <16 x i16> %15960, %15953
  %15971 = add <16 x i16> %15970, %15967
  %15972 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15969, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15973 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %15971, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %15974 = shufflevector <16 x i16> %15972, <16 x i16> %15973, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15975 = lshr <32 x i16> %15974, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %15976 = shufflevector <32 x i16> %15975, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %15977 = add nsw i64 %15833, %15946
  %15978 = getelementptr inbounds i16, i16* %255, i64 %15977
  %15979 = bitcast i16* %15978 to <16 x i16>*
  store <16 x i16> %15976, <16 x i16>* %15979, align 2, !tbaa !401
  %15980 = shufflevector <32 x i16> %15975, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %15981 = getelementptr inbounds i16, i16* %15978, i64 16
  %15982 = bitcast i16* %15981 to <16 x i16>*
  store <16 x i16> %15980, <16 x i16>* %15982, align 2, !tbaa !401
  %15983 = add nuw nsw i32 %blur_y.s0.x.x.rebased1625, 1
  %.not2467 = icmp eq i32 %15983, %t1639861
  br i1 %.not2467, label %"end for blur_y.s0.x.x.rebased1624", label %"for blur_y.s0.x.x.rebased1623"

after_bb1634:                                     ; preds = %"end for blur_y.s0.x.x.rebased1624", %"produce blur_x1637"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1649.preheader", label %"end for blur_y.s0.x.x.rebased1650", !prof !386

"for blur_y.s0.x.x.rebased1649.preheader":        ; preds = %after_bb1634
  %15984 = sext i32 %t1666957 to i64
  %15985 = zext i32 %.pre-phi3332 to i64
  %15986 = mul nsw i64 %15985, %298
  %15987 = sub nsw i64 %15986, %285
  %15988 = zext i32 %.pre-phi3338 to i64
  %15989 = mul nsw i64 %15988, %298
  %15990 = sub nsw i64 %15989, %285
  %15991 = zext i32 %.pre-phi3328 to i64
  %15992 = mul nsw i64 %15991, %298
  %15993 = sub nsw i64 %15992, %285
  %15994 = sext i32 %a339 to i64
  %15995 = add nsw i64 %15994, 17
  %15996 = mul nsw i64 %15995, %299
  %15997 = add nsw i64 %15996, %302
  br label %"for blur_y.s0.x.x.rebased1649"

"produce blur_x1637":                             ; preds = %"end for blur_y.s0.x.x.rebased1624"
  %15998 = getelementptr inbounds i16, i16* %read_input784, i64 %335
  %15999 = getelementptr inbounds i16, i16* %15998, i64 -31
  %16000 = bitcast i16* %15999 to <16 x i16>*
  %16001 = load <16 x i16>, <16 x i16>* %16000, align 2, !tbaa !396
  %16002 = getelementptr inbounds i16, i16* %15998, i64 -15
  %16003 = bitcast i16* %16002 to <16 x i16>*
  %16004 = load <16 x i16>, <16 x i16>* %16003, align 2, !tbaa !396
  %16005 = getelementptr inbounds i16, i16* %15998, i64 -30
  %16006 = bitcast i16* %16005 to <16 x i16>*
  %16007 = load <16 x i16>, <16 x i16>* %16006, align 2, !tbaa !396
  %16008 = getelementptr inbounds i16, i16* %15998, i64 -14
  %16009 = bitcast i16* %16008 to <16 x i16>*
  %16010 = load <16 x i16>, <16 x i16>* %16009, align 2, !tbaa !396
  %16011 = getelementptr inbounds i16, i16* %15998, i64 -32
  %16012 = bitcast i16* %16011 to <16 x i16>*
  %16013 = load <16 x i16>, <16 x i16>* %16012, align 2, !tbaa !396
  %16014 = getelementptr inbounds i16, i16* %15998, i64 -16
  %16015 = bitcast i16* %16014 to <16 x i16>*
  %16016 = load <16 x i16>, <16 x i16>* %16015, align 2, !tbaa !396
  %16017 = add <16 x i16> %16007, %16001
  %16018 = add <16 x i16> %16017, %16013
  %16019 = add <16 x i16> %16010, %16004
  %16020 = add <16 x i16> %16019, %16016
  %16021 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16018, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16022 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16020, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16023 = shufflevector <16 x i16> %16021, <16 x i16> %16022, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16024 = lshr <32 x i16> %16023, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16025 = shufflevector <32 x i16> %16024, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16026 = zext i32 %.pre-phi3338 to i64
  %16027 = mul nsw i64 %286, %16026
  %16028 = add nsw i64 %288, %16027
  %16029 = getelementptr inbounds i16, i16* %blur_x841, i64 %16028
  %16030 = getelementptr inbounds i16, i16* %16029, i64 -32
  %16031 = bitcast i16* %16030 to <16 x i16>*
  store <16 x i16> %16025, <16 x i16>* %16031, align 2, !tbaa !399
  %16032 = shufflevector <32 x i16> %16024, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16033 = getelementptr inbounds i16, i16* %16029, i64 -16
  %16034 = bitcast i16* %16033 to <16 x i16>*
  store <16 x i16> %16032, <16 x i16>* %16034, align 2, !tbaa !399
  %16035 = zext i32 %.pre-phi3332 to i64
  %16036 = mul nsw i64 %16035, %298
  %16037 = add nsw i64 %16036, %283
  %16038 = getelementptr inbounds i16, i16* %blur_x841, i64 %16037
  %16039 = getelementptr inbounds i16, i16* %16038, i64 -32
  %16040 = bitcast i16* %16039 to <16 x i16>*
  %16041 = load <16 x i16>, <16 x i16>* %16040, align 2, !tbaa !399
  %16042 = getelementptr inbounds i16, i16* %16038, i64 -16
  %16043 = bitcast i16* %16042 to <16 x i16>*
  %16044 = load <16 x i16>, <16 x i16>* %16043, align 2, !tbaa !399
  %16045 = mul nsw i64 %16026, %298
  %16046 = add nsw i64 %16045, %283
  %16047 = getelementptr inbounds i16, i16* %blur_x841, i64 %16046
  %16048 = getelementptr inbounds i16, i16* %16047, i64 -32
  %16049 = bitcast i16* %16048 to <16 x i16>*
  %16050 = load <16 x i16>, <16 x i16>* %16049, align 2, !tbaa !399
  %16051 = getelementptr inbounds i16, i16* %16047, i64 -16
  %16052 = bitcast i16* %16051 to <16 x i16>*
  %16053 = load <16 x i16>, <16 x i16>* %16052, align 2, !tbaa !399
  %16054 = zext i32 %.pre-phi3328 to i64
  %16055 = mul nsw i64 %16054, %298
  %16056 = add nsw i64 %16055, %283
  %16057 = getelementptr inbounds i16, i16* %blur_x841, i64 %16056
  %16058 = getelementptr inbounds i16, i16* %16057, i64 -32
  %16059 = bitcast i16* %16058 to <16 x i16>*
  %16060 = load <16 x i16>, <16 x i16>* %16059, align 2, !tbaa !399
  %16061 = getelementptr inbounds i16, i16* %16057, i64 -16
  %16062 = bitcast i16* %16061 to <16 x i16>*
  %16063 = load <16 x i16>, <16 x i16>* %16062, align 2, !tbaa !399
  %16064 = add <16 x i16> %16050, %16041
  %16065 = add <16 x i16> %16064, %16060
  %16066 = add <16 x i16> %16053, %16044
  %16067 = add <16 x i16> %16066, %16063
  %16068 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16065, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16069 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16067, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16070 = shufflevector <16 x i16> %16068, <16 x i16> %16069, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16071 = lshr <32 x i16> %16070, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16072 = shufflevector <32 x i16> %16071, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16073 = sext i32 %a339 to i64
  %16074 = add nsw i64 %16073, 17
  %16075 = mul nsw i64 %16074, %299
  %16076 = add nsw i64 %301, %16075
  %16077 = getelementptr inbounds i16, i16* %255, i64 %16076
  %16078 = getelementptr inbounds i16, i16* %16077, i64 -32
  %16079 = bitcast i16* %16078 to <16 x i16>*
  store <16 x i16> %16072, <16 x i16>* %16079, align 2, !tbaa !401
  %16080 = shufflevector <32 x i16> %16071, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16081 = getelementptr inbounds i16, i16* %16077, i64 -16
  %16082 = bitcast i16* %16081 to <16 x i16>*
  store <16 x i16> %16080, <16 x i16>* %16082, align 2, !tbaa !401
  br label %after_bb1634

"for blur_y.s0.x.x.rebased1649":                  ; preds = %"for blur_y.s0.x.x.rebased1649.preheader", %"consume blur_x1658"
  %indvars.iv3198 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1649.preheader" ], [ %indvars.iv.next3199, %"consume blur_x1658" ]
  %16083 = add nsw i64 %indvars.iv3198, %290
  %16084 = icmp slt i64 %16083, 1
  %16085 = trunc i64 %16083 to i32
  %16086 = shl nsw i32 %16085, 5
  %16087 = icmp sgt i32 %194, %16086
  %16088 = or i1 %16084, %16087
  br i1 %16088, label %"produce blur_x1656", label %"for blur_y.s0.x.x.rebased1649.consume blur_x1658_crit_edge"

"for blur_y.s0.x.x.rebased1649.consume blur_x1658_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1649"
  %.pre3371 = shl nsw i64 %16083, 5
  br label %"consume blur_x1658"

"end for blur_y.s0.x.x.rebased1650":              ; preds = %"consume blur_x1658", %after_bb1634
  br i1 %291, label %"for blur_y.s0.x.x.rebased1666.preheader", label %"end for blur_y.s0.x.x.rebased1667", !prof !386

"for blur_y.s0.x.x.rebased1666.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1650"
  %16089 = sext i32 %t1666957 to i64
  %16090 = zext i32 %.pre-phi3332 to i64
  %16091 = mul nsw i64 %16090, %298
  %16092 = sub nsw i64 %16091, %285
  %16093 = zext i32 %.pre-phi3338 to i64
  %16094 = mul nsw i64 %16093, %298
  %16095 = sub nsw i64 %16094, %285
  %16096 = zext i32 %.pre-phi3328 to i64
  %16097 = mul nsw i64 %16096, %298
  %16098 = sub nsw i64 %16097, %285
  %16099 = sext i32 %a339 to i64
  %16100 = add nsw i64 %16099, 17
  %16101 = mul nsw i64 %16100, %299
  %16102 = add nsw i64 %16101, %302
  br label %"for blur_y.s0.x.x.rebased1666"

"produce blur_x1656":                             ; preds = %"for blur_y.s0.x.x.rebased1649"
  %t9441657 = add nsw i32 %16086, %t19211646
  %16103 = sext i32 %t9441657 to i64
  %16104 = getelementptr inbounds i16, i16* %read_input784, i64 %16103
  %16105 = getelementptr inbounds i16, i16* %16104, i64 1
  %16106 = bitcast i16* %16105 to <16 x i16>*
  %16107 = load <16 x i16>, <16 x i16>* %16106, align 2, !tbaa !396
  %16108 = getelementptr inbounds i16, i16* %16104, i64 17
  %16109 = bitcast i16* %16108 to <16 x i16>*
  %16110 = load <16 x i16>, <16 x i16>* %16109, align 2, !tbaa !396
  %16111 = getelementptr inbounds i16, i16* %16104, i64 2
  %16112 = bitcast i16* %16111 to <16 x i16>*
  %16113 = load <16 x i16>, <16 x i16>* %16112, align 2, !tbaa !396
  %16114 = getelementptr inbounds i16, i16* %16104, i64 18
  %16115 = bitcast i16* %16114 to <16 x i16>*
  %16116 = load <16 x i16>, <16 x i16>* %16115, align 2, !tbaa !396
  %16117 = bitcast i16* %16104 to <16 x i16>*
  %16118 = load <16 x i16>, <16 x i16>* %16117, align 2, !tbaa !396
  %16119 = getelementptr inbounds i16, i16* %16104, i64 16
  %16120 = bitcast i16* %16119 to <16 x i16>*
  %16121 = load <16 x i16>, <16 x i16>* %16120, align 2, !tbaa !396
  %16122 = add <16 x i16> %16113, %16107
  %16123 = add <16 x i16> %16122, %16118
  %16124 = add <16 x i16> %16116, %16110
  %16125 = add <16 x i16> %16124, %16121
  %16126 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16123, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16127 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16125, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16128 = shufflevector <16 x i16> %16126, <16 x i16> %16127, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16129 = lshr <32 x i16> %16128, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16130 = shufflevector <32 x i16> %16129, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16131 = shl nsw i64 %16083, 5
  %16132 = add nsw i64 %16131, %15984
  %16133 = getelementptr inbounds i16, i16* %blur_x841, i64 %16132
  %16134 = bitcast i16* %16133 to <16 x i16>*
  store <16 x i16> %16130, <16 x i16>* %16134, align 2, !tbaa !399
  %16135 = shufflevector <32 x i16> %16129, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16136 = getelementptr inbounds i16, i16* %16133, i64 16
  %16137 = bitcast i16* %16136 to <16 x i16>*
  store <16 x i16> %16135, <16 x i16>* %16137, align 2, !tbaa !399
  br label %"consume blur_x1658"

"consume blur_x1658":                             ; preds = %"for blur_y.s0.x.x.rebased1649.consume blur_x1658_crit_edge", %"produce blur_x1656"
  %.pre-phi3372 = phi i64 [ %.pre3371, %"for blur_y.s0.x.x.rebased1649.consume blur_x1658_crit_edge" ], [ %16131, %"produce blur_x1656" ]
  %16138 = add nsw i64 %15987, %.pre-phi3372
  %16139 = getelementptr inbounds i16, i16* %blur_x841, i64 %16138
  %16140 = bitcast i16* %16139 to <16 x i16>*
  %16141 = load <16 x i16>, <16 x i16>* %16140, align 2, !tbaa !399
  %16142 = getelementptr inbounds i16, i16* %16139, i64 16
  %16143 = bitcast i16* %16142 to <16 x i16>*
  %16144 = load <16 x i16>, <16 x i16>* %16143, align 2, !tbaa !399
  %16145 = add nsw i64 %15990, %.pre-phi3372
  %16146 = getelementptr inbounds i16, i16* %blur_x841, i64 %16145
  %16147 = bitcast i16* %16146 to <16 x i16>*
  %16148 = load <16 x i16>, <16 x i16>* %16147, align 2, !tbaa !399
  %16149 = getelementptr inbounds i16, i16* %16146, i64 16
  %16150 = bitcast i16* %16149 to <16 x i16>*
  %16151 = load <16 x i16>, <16 x i16>* %16150, align 2, !tbaa !399
  %16152 = add nsw i64 %15993, %.pre-phi3372
  %16153 = getelementptr inbounds i16, i16* %blur_x841, i64 %16152
  %16154 = bitcast i16* %16153 to <16 x i16>*
  %16155 = load <16 x i16>, <16 x i16>* %16154, align 2, !tbaa !399
  %16156 = getelementptr inbounds i16, i16* %16153, i64 16
  %16157 = bitcast i16* %16156 to <16 x i16>*
  %16158 = load <16 x i16>, <16 x i16>* %16157, align 2, !tbaa !399
  %16159 = add <16 x i16> %16148, %16141
  %16160 = add <16 x i16> %16159, %16155
  %16161 = add <16 x i16> %16151, %16144
  %16162 = add <16 x i16> %16161, %16158
  %16163 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16160, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16164 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16162, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16165 = shufflevector <16 x i16> %16163, <16 x i16> %16164, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16166 = lshr <32 x i16> %16165, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16167 = shufflevector <32 x i16> %16166, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16168 = add nsw i64 %15997, %.pre-phi3372
  %16169 = getelementptr inbounds i16, i16* %255, i64 %16168
  %16170 = bitcast i16* %16169 to <16 x i16>*
  store <16 x i16> %16167, <16 x i16>* %16170, align 2, !tbaa !401
  %16171 = shufflevector <32 x i16> %16166, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16172 = getelementptr inbounds i16, i16* %16169, i64 16
  %16173 = bitcast i16* %16172 to <16 x i16>*
  store <16 x i16> %16171, <16 x i16>* %16173, align 2, !tbaa !401
  %indvars.iv.next3199 = add nuw nsw i64 %indvars.iv3198, 1
  %.not2466 = icmp eq i64 %indvars.iv.next3199, %370
  br i1 %.not2466, label %"end for blur_y.s0.x.x.rebased1650", label %"for blur_y.s0.x.x.rebased1649"

"for blur_y.s0.x.x.rebased1666":                  ; preds = %"for blur_y.s0.x.x.rebased1666.preheader", %"consume blur_x1676"
  %blur_y.s0.x.x.rebased1668 = phi i32 [ %16252, %"consume blur_x1676" ], [ 0, %"for blur_y.s0.x.x.rebased1666.preheader" ]
  %16174 = add nsw i32 %blur_y.s0.x.x.rebased1668, %t1582776
  %a523 = shl nsw i32 %16174, 5
  %16175 = icmp sgt i32 %a327, %a523
  %b529 = select i1 %16175, i32 %a523, i32 %a327
  %16176 = icmp slt i32 %16174, 1
  %16177 = icmp sgt i32 %194, %a523
  %16178 = or i1 %16176, %16177
  br i1 %16178, label %"produce blur_x1673", label %"consume blur_x1676"

"end for blur_y.s0.x.x.rebased1667":              ; preds = %"consume blur_x1676", %"end for blur_y.s0.x.x.rebased1650"
  br i1 %224, label %"produce blur_x1680", label %after_bb1677

"produce blur_x1673":                             ; preds = %"for blur_y.s0.x.x.rebased1666"
  %16179 = icmp slt i32 %b529, %194
  %blur_x.s0.x.v1.base.s1674 = select i1 %16179, i32 %b529, i32 %194
  %t9491675 = add nsw i32 %blur_x.s0.x.v1.base.s1674, %t19211646
  %16180 = sext i32 %t9491675 to i64
  %16181 = getelementptr inbounds i16, i16* %read_input784, i64 %16180
  %16182 = getelementptr inbounds i16, i16* %16181, i64 1
  %16183 = bitcast i16* %16182 to <16 x i16>*
  %16184 = load <16 x i16>, <16 x i16>* %16183, align 2, !tbaa !396
  %16185 = getelementptr inbounds i16, i16* %16181, i64 17
  %16186 = bitcast i16* %16185 to <16 x i16>*
  %16187 = load <16 x i16>, <16 x i16>* %16186, align 2, !tbaa !396
  %16188 = getelementptr inbounds i16, i16* %16181, i64 2
  %16189 = bitcast i16* %16188 to <16 x i16>*
  %16190 = load <16 x i16>, <16 x i16>* %16189, align 2, !tbaa !396
  %16191 = getelementptr inbounds i16, i16* %16181, i64 18
  %16192 = bitcast i16* %16191 to <16 x i16>*
  %16193 = load <16 x i16>, <16 x i16>* %16192, align 2, !tbaa !396
  %16194 = bitcast i16* %16181 to <16 x i16>*
  %16195 = load <16 x i16>, <16 x i16>* %16194, align 2, !tbaa !396
  %16196 = getelementptr inbounds i16, i16* %16181, i64 16
  %16197 = bitcast i16* %16196 to <16 x i16>*
  %16198 = load <16 x i16>, <16 x i16>* %16197, align 2, !tbaa !396
  %16199 = add <16 x i16> %16190, %16184
  %16200 = add <16 x i16> %16199, %16195
  %16201 = add <16 x i16> %16193, %16187
  %16202 = add <16 x i16> %16201, %16198
  %16203 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16200, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16204 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16202, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16205 = shufflevector <16 x i16> %16203, <16 x i16> %16204, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16206 = lshr <32 x i16> %16205, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16207 = shufflevector <32 x i16> %16206, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16208 = sext i32 %blur_x.s0.x.v1.base.s1674 to i64
  %16209 = add nsw i64 %16208, %16089
  %16210 = getelementptr inbounds i16, i16* %blur_x841, i64 %16209
  %16211 = bitcast i16* %16210 to <16 x i16>*
  store <16 x i16> %16207, <16 x i16>* %16211, align 2, !tbaa !399
  %16212 = shufflevector <32 x i16> %16206, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16213 = getelementptr inbounds i16, i16* %16210, i64 16
  %16214 = bitcast i16* %16213 to <16 x i16>*
  store <16 x i16> %16212, <16 x i16>* %16214, align 2, !tbaa !399
  br label %"consume blur_x1676"

"consume blur_x1676":                             ; preds = %"for blur_y.s0.x.x.rebased1666", %"produce blur_x1673"
  %16215 = sext i32 %b529 to i64
  %16216 = add nsw i64 %16092, %16215
  %16217 = getelementptr inbounds i16, i16* %blur_x841, i64 %16216
  %16218 = bitcast i16* %16217 to <16 x i16>*
  %16219 = load <16 x i16>, <16 x i16>* %16218, align 2, !tbaa !399
  %16220 = getelementptr inbounds i16, i16* %16217, i64 16
  %16221 = bitcast i16* %16220 to <16 x i16>*
  %16222 = load <16 x i16>, <16 x i16>* %16221, align 2, !tbaa !399
  %16223 = add nsw i64 %16095, %16215
  %16224 = getelementptr inbounds i16, i16* %blur_x841, i64 %16223
  %16225 = bitcast i16* %16224 to <16 x i16>*
  %16226 = load <16 x i16>, <16 x i16>* %16225, align 2, !tbaa !399
  %16227 = getelementptr inbounds i16, i16* %16224, i64 16
  %16228 = bitcast i16* %16227 to <16 x i16>*
  %16229 = load <16 x i16>, <16 x i16>* %16228, align 2, !tbaa !399
  %16230 = add nsw i64 %16098, %16215
  %16231 = getelementptr inbounds i16, i16* %blur_x841, i64 %16230
  %16232 = bitcast i16* %16231 to <16 x i16>*
  %16233 = load <16 x i16>, <16 x i16>* %16232, align 2, !tbaa !399
  %16234 = getelementptr inbounds i16, i16* %16231, i64 16
  %16235 = bitcast i16* %16234 to <16 x i16>*
  %16236 = load <16 x i16>, <16 x i16>* %16235, align 2, !tbaa !399
  %16237 = add <16 x i16> %16226, %16219
  %16238 = add <16 x i16> %16237, %16233
  %16239 = add <16 x i16> %16229, %16222
  %16240 = add <16 x i16> %16239, %16236
  %16241 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16238, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16242 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16240, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16243 = shufflevector <16 x i16> %16241, <16 x i16> %16242, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16244 = lshr <32 x i16> %16243, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16245 = shufflevector <32 x i16> %16244, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16246 = add nsw i64 %16102, %16215
  %16247 = getelementptr inbounds i16, i16* %255, i64 %16246
  %16248 = bitcast i16* %16247 to <16 x i16>*
  store <16 x i16> %16245, <16 x i16>* %16248, align 2, !tbaa !401
  %16249 = shufflevector <32 x i16> %16244, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16250 = getelementptr inbounds i16, i16* %16247, i64 16
  %16251 = bitcast i16* %16250 to <16 x i16>*
  store <16 x i16> %16249, <16 x i16>* %16251, align 2, !tbaa !401
  %16252 = add nuw nsw i32 %blur_y.s0.x.x.rebased1668, 1
  %.not2465 = icmp eq i32 %16252, %t1639861
  br i1 %.not2465, label %"end for blur_y.s0.x.x.rebased1667", label %"for blur_y.s0.x.x.rebased1666"

after_bb1677:                                     ; preds = %"end for blur_y.s0.x.x.rebased1667", %"produce blur_x1680"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1692.preheader", label %"end for blur_y.s0.x.x.rebased1693", !prof !386

"for blur_y.s0.x.x.rebased1692.preheader":        ; preds = %after_bb1677
  %16253 = sext i32 %t1638848 to i64
  %16254 = zext i32 %.pre-phi3338 to i64
  %16255 = mul nsw i64 %16254, %298
  %16256 = sub nsw i64 %16255, %285
  %16257 = zext i32 %.pre-phi3324 to i64
  %16258 = mul nsw i64 %16257, %298
  %16259 = sub nsw i64 %16258, %285
  %16260 = zext i32 %.pre-phi3332 to i64
  %16261 = mul nsw i64 %16260, %298
  %16262 = sub nsw i64 %16261, %285
  %16263 = sext i32 %a339 to i64
  %16264 = add nsw i64 %16263, 18
  %16265 = mul nsw i64 %16264, %299
  %16266 = add nsw i64 %16265, %302
  br label %"for blur_y.s0.x.x.rebased1692"

"produce blur_x1680":                             ; preds = %"end for blur_y.s0.x.x.rebased1667"
  %16267 = getelementptr inbounds i16, i16* %read_input784, i64 %337
  %16268 = getelementptr inbounds i16, i16* %16267, i64 -31
  %16269 = bitcast i16* %16268 to <16 x i16>*
  %16270 = load <16 x i16>, <16 x i16>* %16269, align 2, !tbaa !396
  %16271 = getelementptr inbounds i16, i16* %16267, i64 -15
  %16272 = bitcast i16* %16271 to <16 x i16>*
  %16273 = load <16 x i16>, <16 x i16>* %16272, align 2, !tbaa !396
  %16274 = getelementptr inbounds i16, i16* %16267, i64 -30
  %16275 = bitcast i16* %16274 to <16 x i16>*
  %16276 = load <16 x i16>, <16 x i16>* %16275, align 2, !tbaa !396
  %16277 = getelementptr inbounds i16, i16* %16267, i64 -14
  %16278 = bitcast i16* %16277 to <16 x i16>*
  %16279 = load <16 x i16>, <16 x i16>* %16278, align 2, !tbaa !396
  %16280 = getelementptr inbounds i16, i16* %16267, i64 -32
  %16281 = bitcast i16* %16280 to <16 x i16>*
  %16282 = load <16 x i16>, <16 x i16>* %16281, align 2, !tbaa !396
  %16283 = getelementptr inbounds i16, i16* %16267, i64 -16
  %16284 = bitcast i16* %16283 to <16 x i16>*
  %16285 = load <16 x i16>, <16 x i16>* %16284, align 2, !tbaa !396
  %16286 = add <16 x i16> %16276, %16270
  %16287 = add <16 x i16> %16286, %16282
  %16288 = add <16 x i16> %16279, %16273
  %16289 = add <16 x i16> %16288, %16285
  %16290 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16287, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16291 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16289, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16292 = shufflevector <16 x i16> %16290, <16 x i16> %16291, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16293 = lshr <32 x i16> %16292, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16294 = shufflevector <32 x i16> %16293, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16295 = zext i32 %.pre-phi3324 to i64
  %16296 = mul nsw i64 %286, %16295
  %16297 = add nsw i64 %288, %16296
  %16298 = getelementptr inbounds i16, i16* %blur_x841, i64 %16297
  %16299 = getelementptr inbounds i16, i16* %16298, i64 -32
  %16300 = bitcast i16* %16299 to <16 x i16>*
  store <16 x i16> %16294, <16 x i16>* %16300, align 2, !tbaa !399
  %16301 = shufflevector <32 x i16> %16293, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16302 = getelementptr inbounds i16, i16* %16298, i64 -16
  %16303 = bitcast i16* %16302 to <16 x i16>*
  store <16 x i16> %16301, <16 x i16>* %16303, align 2, !tbaa !399
  %16304 = zext i32 %.pre-phi3338 to i64
  %16305 = mul nsw i64 %16304, %298
  %16306 = add nsw i64 %16305, %283
  %16307 = getelementptr inbounds i16, i16* %blur_x841, i64 %16306
  %16308 = getelementptr inbounds i16, i16* %16307, i64 -32
  %16309 = bitcast i16* %16308 to <16 x i16>*
  %16310 = load <16 x i16>, <16 x i16>* %16309, align 2, !tbaa !399
  %16311 = getelementptr inbounds i16, i16* %16307, i64 -16
  %16312 = bitcast i16* %16311 to <16 x i16>*
  %16313 = load <16 x i16>, <16 x i16>* %16312, align 2, !tbaa !399
  %16314 = mul nsw i64 %16295, %298
  %16315 = add nsw i64 %16314, %283
  %16316 = getelementptr inbounds i16, i16* %blur_x841, i64 %16315
  %16317 = getelementptr inbounds i16, i16* %16316, i64 -32
  %16318 = bitcast i16* %16317 to <16 x i16>*
  %16319 = load <16 x i16>, <16 x i16>* %16318, align 2, !tbaa !399
  %16320 = getelementptr inbounds i16, i16* %16316, i64 -16
  %16321 = bitcast i16* %16320 to <16 x i16>*
  %16322 = load <16 x i16>, <16 x i16>* %16321, align 2, !tbaa !399
  %16323 = zext i32 %.pre-phi3332 to i64
  %16324 = mul nsw i64 %16323, %298
  %16325 = add nsw i64 %16324, %283
  %16326 = getelementptr inbounds i16, i16* %blur_x841, i64 %16325
  %16327 = getelementptr inbounds i16, i16* %16326, i64 -32
  %16328 = bitcast i16* %16327 to <16 x i16>*
  %16329 = load <16 x i16>, <16 x i16>* %16328, align 2, !tbaa !399
  %16330 = getelementptr inbounds i16, i16* %16326, i64 -16
  %16331 = bitcast i16* %16330 to <16 x i16>*
  %16332 = load <16 x i16>, <16 x i16>* %16331, align 2, !tbaa !399
  %16333 = add <16 x i16> %16319, %16310
  %16334 = add <16 x i16> %16333, %16329
  %16335 = add <16 x i16> %16322, %16313
  %16336 = add <16 x i16> %16335, %16332
  %16337 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16334, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16338 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16336, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16339 = shufflevector <16 x i16> %16337, <16 x i16> %16338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16340 = lshr <32 x i16> %16339, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16341 = shufflevector <32 x i16> %16340, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16342 = sext i32 %a339 to i64
  %16343 = add nsw i64 %16342, 18
  %16344 = mul nsw i64 %16343, %299
  %16345 = add nsw i64 %301, %16344
  %16346 = getelementptr inbounds i16, i16* %255, i64 %16345
  %16347 = getelementptr inbounds i16, i16* %16346, i64 -32
  %16348 = bitcast i16* %16347 to <16 x i16>*
  store <16 x i16> %16341, <16 x i16>* %16348, align 2, !tbaa !401
  %16349 = shufflevector <32 x i16> %16340, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16350 = getelementptr inbounds i16, i16* %16346, i64 -16
  %16351 = bitcast i16* %16350 to <16 x i16>*
  store <16 x i16> %16349, <16 x i16>* %16351, align 2, !tbaa !401
  br label %after_bb1677

"for blur_y.s0.x.x.rebased1692":                  ; preds = %"for blur_y.s0.x.x.rebased1692.preheader", %"consume blur_x1701"
  %indvars.iv3201 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1692.preheader" ], [ %indvars.iv.next3202, %"consume blur_x1701" ]
  %16352 = add nsw i64 %indvars.iv3201, %290
  %16353 = icmp slt i64 %16352, 1
  %16354 = trunc i64 %16352 to i32
  %16355 = shl nsw i32 %16354, 5
  %16356 = icmp sgt i32 %194, %16355
  %16357 = or i1 %16353, %16356
  br i1 %16357, label %"produce blur_x1699", label %"for blur_y.s0.x.x.rebased1692.consume blur_x1701_crit_edge"

"for blur_y.s0.x.x.rebased1692.consume blur_x1701_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1692"
  %.pre3373 = shl nsw i64 %16352, 5
  br label %"consume blur_x1701"

"end for blur_y.s0.x.x.rebased1693":              ; preds = %"consume blur_x1701", %after_bb1677
  br i1 %291, label %"for blur_y.s0.x.x.rebased1709.preheader", label %"end for blur_y.s0.x.x.rebased1710", !prof !386

"for blur_y.s0.x.x.rebased1709.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1693"
  %16358 = sext i32 %t1638848 to i64
  %16359 = zext i32 %.pre-phi3338 to i64
  %16360 = mul nsw i64 %16359, %298
  %16361 = sub nsw i64 %16360, %285
  %16362 = zext i32 %.pre-phi3324 to i64
  %16363 = mul nsw i64 %16362, %298
  %16364 = sub nsw i64 %16363, %285
  %16365 = zext i32 %.pre-phi3332 to i64
  %16366 = mul nsw i64 %16365, %298
  %16367 = sub nsw i64 %16366, %285
  %16368 = sext i32 %a339 to i64
  %16369 = add nsw i64 %16368, 18
  %16370 = mul nsw i64 %16369, %299
  %16371 = add nsw i64 %16370, %302
  br label %"for blur_y.s0.x.x.rebased1709"

"produce blur_x1699":                             ; preds = %"for blur_y.s0.x.x.rebased1692"
  %t9601700 = add nsw i32 %16355, %t19371689
  %16372 = sext i32 %t9601700 to i64
  %16373 = getelementptr inbounds i16, i16* %read_input784, i64 %16372
  %16374 = getelementptr inbounds i16, i16* %16373, i64 1
  %16375 = bitcast i16* %16374 to <16 x i16>*
  %16376 = load <16 x i16>, <16 x i16>* %16375, align 2, !tbaa !396
  %16377 = getelementptr inbounds i16, i16* %16373, i64 17
  %16378 = bitcast i16* %16377 to <16 x i16>*
  %16379 = load <16 x i16>, <16 x i16>* %16378, align 2, !tbaa !396
  %16380 = getelementptr inbounds i16, i16* %16373, i64 2
  %16381 = bitcast i16* %16380 to <16 x i16>*
  %16382 = load <16 x i16>, <16 x i16>* %16381, align 2, !tbaa !396
  %16383 = getelementptr inbounds i16, i16* %16373, i64 18
  %16384 = bitcast i16* %16383 to <16 x i16>*
  %16385 = load <16 x i16>, <16 x i16>* %16384, align 2, !tbaa !396
  %16386 = bitcast i16* %16373 to <16 x i16>*
  %16387 = load <16 x i16>, <16 x i16>* %16386, align 2, !tbaa !396
  %16388 = getelementptr inbounds i16, i16* %16373, i64 16
  %16389 = bitcast i16* %16388 to <16 x i16>*
  %16390 = load <16 x i16>, <16 x i16>* %16389, align 2, !tbaa !396
  %16391 = add <16 x i16> %16382, %16376
  %16392 = add <16 x i16> %16391, %16387
  %16393 = add <16 x i16> %16385, %16379
  %16394 = add <16 x i16> %16393, %16390
  %16395 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16392, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16396 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16394, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16397 = shufflevector <16 x i16> %16395, <16 x i16> %16396, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16398 = lshr <32 x i16> %16397, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16399 = shufflevector <32 x i16> %16398, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16400 = shl nsw i64 %16352, 5
  %16401 = add nsw i64 %16400, %16253
  %16402 = getelementptr inbounds i16, i16* %blur_x841, i64 %16401
  %16403 = bitcast i16* %16402 to <16 x i16>*
  store <16 x i16> %16399, <16 x i16>* %16403, align 2, !tbaa !399
  %16404 = shufflevector <32 x i16> %16398, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16405 = getelementptr inbounds i16, i16* %16402, i64 16
  %16406 = bitcast i16* %16405 to <16 x i16>*
  store <16 x i16> %16404, <16 x i16>* %16406, align 2, !tbaa !399
  br label %"consume blur_x1701"

"consume blur_x1701":                             ; preds = %"for blur_y.s0.x.x.rebased1692.consume blur_x1701_crit_edge", %"produce blur_x1699"
  %.pre-phi3374 = phi i64 [ %.pre3373, %"for blur_y.s0.x.x.rebased1692.consume blur_x1701_crit_edge" ], [ %16400, %"produce blur_x1699" ]
  %16407 = add nsw i64 %16256, %.pre-phi3374
  %16408 = getelementptr inbounds i16, i16* %blur_x841, i64 %16407
  %16409 = bitcast i16* %16408 to <16 x i16>*
  %16410 = load <16 x i16>, <16 x i16>* %16409, align 2, !tbaa !399
  %16411 = getelementptr inbounds i16, i16* %16408, i64 16
  %16412 = bitcast i16* %16411 to <16 x i16>*
  %16413 = load <16 x i16>, <16 x i16>* %16412, align 2, !tbaa !399
  %16414 = add nsw i64 %16259, %.pre-phi3374
  %16415 = getelementptr inbounds i16, i16* %blur_x841, i64 %16414
  %16416 = bitcast i16* %16415 to <16 x i16>*
  %16417 = load <16 x i16>, <16 x i16>* %16416, align 2, !tbaa !399
  %16418 = getelementptr inbounds i16, i16* %16415, i64 16
  %16419 = bitcast i16* %16418 to <16 x i16>*
  %16420 = load <16 x i16>, <16 x i16>* %16419, align 2, !tbaa !399
  %16421 = add nsw i64 %16262, %.pre-phi3374
  %16422 = getelementptr inbounds i16, i16* %blur_x841, i64 %16421
  %16423 = bitcast i16* %16422 to <16 x i16>*
  %16424 = load <16 x i16>, <16 x i16>* %16423, align 2, !tbaa !399
  %16425 = getelementptr inbounds i16, i16* %16422, i64 16
  %16426 = bitcast i16* %16425 to <16 x i16>*
  %16427 = load <16 x i16>, <16 x i16>* %16426, align 2, !tbaa !399
  %16428 = add <16 x i16> %16417, %16410
  %16429 = add <16 x i16> %16428, %16424
  %16430 = add <16 x i16> %16420, %16413
  %16431 = add <16 x i16> %16430, %16427
  %16432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16429, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16433 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16431, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16434 = shufflevector <16 x i16> %16432, <16 x i16> %16433, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16435 = lshr <32 x i16> %16434, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16436 = shufflevector <32 x i16> %16435, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16437 = add nsw i64 %16266, %.pre-phi3374
  %16438 = getelementptr inbounds i16, i16* %255, i64 %16437
  %16439 = bitcast i16* %16438 to <16 x i16>*
  store <16 x i16> %16436, <16 x i16>* %16439, align 2, !tbaa !401
  %16440 = shufflevector <32 x i16> %16435, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16441 = getelementptr inbounds i16, i16* %16438, i64 16
  %16442 = bitcast i16* %16441 to <16 x i16>*
  store <16 x i16> %16440, <16 x i16>* %16442, align 2, !tbaa !401
  %indvars.iv.next3202 = add nuw nsw i64 %indvars.iv3201, 1
  %.not2464 = icmp eq i64 %indvars.iv.next3202, %370
  br i1 %.not2464, label %"end for blur_y.s0.x.x.rebased1693", label %"for blur_y.s0.x.x.rebased1692"

"for blur_y.s0.x.x.rebased1709":                  ; preds = %"for blur_y.s0.x.x.rebased1709.preheader", %"consume blur_x1719"
  %blur_y.s0.x.x.rebased1711 = phi i32 [ %16521, %"consume blur_x1719" ], [ 0, %"for blur_y.s0.x.x.rebased1709.preheader" ]
  %16443 = add nsw i32 %blur_y.s0.x.x.rebased1711, %t1582776
  %a530 = shl nsw i32 %16443, 5
  %16444 = icmp sgt i32 %a327, %a530
  %b536 = select i1 %16444, i32 %a530, i32 %a327
  %16445 = icmp slt i32 %16443, 1
  %16446 = icmp sgt i32 %194, %a530
  %16447 = or i1 %16445, %16446
  br i1 %16447, label %"produce blur_x1716", label %"consume blur_x1719"

"end for blur_y.s0.x.x.rebased1710":              ; preds = %"consume blur_x1719", %"end for blur_y.s0.x.x.rebased1693"
  br i1 %224, label %"produce blur_x1723", label %after_bb1720

"produce blur_x1716":                             ; preds = %"for blur_y.s0.x.x.rebased1709"
  %16448 = icmp slt i32 %b536, %194
  %blur_x.s0.x.v1.base.s1717 = select i1 %16448, i32 %b536, i32 %194
  %t9651718 = add nsw i32 %blur_x.s0.x.v1.base.s1717, %t19371689
  %16449 = sext i32 %t9651718 to i64
  %16450 = getelementptr inbounds i16, i16* %read_input784, i64 %16449
  %16451 = getelementptr inbounds i16, i16* %16450, i64 1
  %16452 = bitcast i16* %16451 to <16 x i16>*
  %16453 = load <16 x i16>, <16 x i16>* %16452, align 2, !tbaa !396
  %16454 = getelementptr inbounds i16, i16* %16450, i64 17
  %16455 = bitcast i16* %16454 to <16 x i16>*
  %16456 = load <16 x i16>, <16 x i16>* %16455, align 2, !tbaa !396
  %16457 = getelementptr inbounds i16, i16* %16450, i64 2
  %16458 = bitcast i16* %16457 to <16 x i16>*
  %16459 = load <16 x i16>, <16 x i16>* %16458, align 2, !tbaa !396
  %16460 = getelementptr inbounds i16, i16* %16450, i64 18
  %16461 = bitcast i16* %16460 to <16 x i16>*
  %16462 = load <16 x i16>, <16 x i16>* %16461, align 2, !tbaa !396
  %16463 = bitcast i16* %16450 to <16 x i16>*
  %16464 = load <16 x i16>, <16 x i16>* %16463, align 2, !tbaa !396
  %16465 = getelementptr inbounds i16, i16* %16450, i64 16
  %16466 = bitcast i16* %16465 to <16 x i16>*
  %16467 = load <16 x i16>, <16 x i16>* %16466, align 2, !tbaa !396
  %16468 = add <16 x i16> %16459, %16453
  %16469 = add <16 x i16> %16468, %16464
  %16470 = add <16 x i16> %16462, %16456
  %16471 = add <16 x i16> %16470, %16467
  %16472 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16469, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16473 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16471, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16474 = shufflevector <16 x i16> %16472, <16 x i16> %16473, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16475 = lshr <32 x i16> %16474, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16476 = shufflevector <32 x i16> %16475, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16477 = sext i32 %blur_x.s0.x.v1.base.s1717 to i64
  %16478 = add nsw i64 %16477, %16358
  %16479 = getelementptr inbounds i16, i16* %blur_x841, i64 %16478
  %16480 = bitcast i16* %16479 to <16 x i16>*
  store <16 x i16> %16476, <16 x i16>* %16480, align 2, !tbaa !399
  %16481 = shufflevector <32 x i16> %16475, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16482 = getelementptr inbounds i16, i16* %16479, i64 16
  %16483 = bitcast i16* %16482 to <16 x i16>*
  store <16 x i16> %16481, <16 x i16>* %16483, align 2, !tbaa !399
  br label %"consume blur_x1719"

"consume blur_x1719":                             ; preds = %"for blur_y.s0.x.x.rebased1709", %"produce blur_x1716"
  %16484 = sext i32 %b536 to i64
  %16485 = add nsw i64 %16361, %16484
  %16486 = getelementptr inbounds i16, i16* %blur_x841, i64 %16485
  %16487 = bitcast i16* %16486 to <16 x i16>*
  %16488 = load <16 x i16>, <16 x i16>* %16487, align 2, !tbaa !399
  %16489 = getelementptr inbounds i16, i16* %16486, i64 16
  %16490 = bitcast i16* %16489 to <16 x i16>*
  %16491 = load <16 x i16>, <16 x i16>* %16490, align 2, !tbaa !399
  %16492 = add nsw i64 %16364, %16484
  %16493 = getelementptr inbounds i16, i16* %blur_x841, i64 %16492
  %16494 = bitcast i16* %16493 to <16 x i16>*
  %16495 = load <16 x i16>, <16 x i16>* %16494, align 2, !tbaa !399
  %16496 = getelementptr inbounds i16, i16* %16493, i64 16
  %16497 = bitcast i16* %16496 to <16 x i16>*
  %16498 = load <16 x i16>, <16 x i16>* %16497, align 2, !tbaa !399
  %16499 = add nsw i64 %16367, %16484
  %16500 = getelementptr inbounds i16, i16* %blur_x841, i64 %16499
  %16501 = bitcast i16* %16500 to <16 x i16>*
  %16502 = load <16 x i16>, <16 x i16>* %16501, align 2, !tbaa !399
  %16503 = getelementptr inbounds i16, i16* %16500, i64 16
  %16504 = bitcast i16* %16503 to <16 x i16>*
  %16505 = load <16 x i16>, <16 x i16>* %16504, align 2, !tbaa !399
  %16506 = add <16 x i16> %16495, %16488
  %16507 = add <16 x i16> %16506, %16502
  %16508 = add <16 x i16> %16498, %16491
  %16509 = add <16 x i16> %16508, %16505
  %16510 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16507, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16511 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16509, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16512 = shufflevector <16 x i16> %16510, <16 x i16> %16511, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16513 = lshr <32 x i16> %16512, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16514 = shufflevector <32 x i16> %16513, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16515 = add nsw i64 %16371, %16484
  %16516 = getelementptr inbounds i16, i16* %255, i64 %16515
  %16517 = bitcast i16* %16516 to <16 x i16>*
  store <16 x i16> %16514, <16 x i16>* %16517, align 2, !tbaa !401
  %16518 = shufflevector <32 x i16> %16513, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16519 = getelementptr inbounds i16, i16* %16516, i64 16
  %16520 = bitcast i16* %16519 to <16 x i16>*
  store <16 x i16> %16518, <16 x i16>* %16520, align 2, !tbaa !401
  %16521 = add nuw nsw i32 %blur_y.s0.x.x.rebased1711, 1
  %.not2463 = icmp eq i32 %16521, %t1639861
  br i1 %.not2463, label %"end for blur_y.s0.x.x.rebased1710", label %"for blur_y.s0.x.x.rebased1709"

after_bb1720:                                     ; preds = %"end for blur_y.s0.x.x.rebased1710", %"produce blur_x1723"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1735.preheader", label %"end for blur_y.s0.x.x.rebased1736", !prof !386

"for blur_y.s0.x.x.rebased1735.preheader":        ; preds = %after_bb1720
  %16522 = sext i32 %t1644878 to i64
  %16523 = zext i32 %.pre-phi3324 to i64
  %16524 = mul nsw i64 %16523, %298
  %16525 = sub nsw i64 %16524, %285
  %16526 = zext i32 %.pre-phi3328 to i64
  %16527 = mul nsw i64 %16526, %298
  %16528 = sub nsw i64 %16527, %285
  %16529 = zext i32 %.pre-phi3338 to i64
  %16530 = mul nsw i64 %16529, %298
  %16531 = sub nsw i64 %16530, %285
  %16532 = sext i32 %a339 to i64
  %16533 = add nsw i64 %16532, 19
  %16534 = mul nsw i64 %16533, %299
  %16535 = add nsw i64 %16534, %302
  br label %"for blur_y.s0.x.x.rebased1735"

"produce blur_x1723":                             ; preds = %"end for blur_y.s0.x.x.rebased1710"
  %16536 = getelementptr inbounds i16, i16* %read_input784, i64 %339
  %16537 = getelementptr inbounds i16, i16* %16536, i64 -31
  %16538 = bitcast i16* %16537 to <16 x i16>*
  %16539 = load <16 x i16>, <16 x i16>* %16538, align 2, !tbaa !396
  %16540 = getelementptr inbounds i16, i16* %16536, i64 -15
  %16541 = bitcast i16* %16540 to <16 x i16>*
  %16542 = load <16 x i16>, <16 x i16>* %16541, align 2, !tbaa !396
  %16543 = getelementptr inbounds i16, i16* %16536, i64 -30
  %16544 = bitcast i16* %16543 to <16 x i16>*
  %16545 = load <16 x i16>, <16 x i16>* %16544, align 2, !tbaa !396
  %16546 = getelementptr inbounds i16, i16* %16536, i64 -14
  %16547 = bitcast i16* %16546 to <16 x i16>*
  %16548 = load <16 x i16>, <16 x i16>* %16547, align 2, !tbaa !396
  %16549 = getelementptr inbounds i16, i16* %16536, i64 -32
  %16550 = bitcast i16* %16549 to <16 x i16>*
  %16551 = load <16 x i16>, <16 x i16>* %16550, align 2, !tbaa !396
  %16552 = getelementptr inbounds i16, i16* %16536, i64 -16
  %16553 = bitcast i16* %16552 to <16 x i16>*
  %16554 = load <16 x i16>, <16 x i16>* %16553, align 2, !tbaa !396
  %16555 = add <16 x i16> %16545, %16539
  %16556 = add <16 x i16> %16555, %16551
  %16557 = add <16 x i16> %16548, %16542
  %16558 = add <16 x i16> %16557, %16554
  %16559 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16556, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16560 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16558, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16561 = shufflevector <16 x i16> %16559, <16 x i16> %16560, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16562 = lshr <32 x i16> %16561, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16563 = shufflevector <32 x i16> %16562, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16564 = zext i32 %.pre-phi3328 to i64
  %16565 = mul nsw i64 %286, %16564
  %16566 = add nsw i64 %288, %16565
  %16567 = getelementptr inbounds i16, i16* %blur_x841, i64 %16566
  %16568 = getelementptr inbounds i16, i16* %16567, i64 -32
  %16569 = bitcast i16* %16568 to <16 x i16>*
  store <16 x i16> %16563, <16 x i16>* %16569, align 2, !tbaa !399
  %16570 = shufflevector <32 x i16> %16562, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16571 = getelementptr inbounds i16, i16* %16567, i64 -16
  %16572 = bitcast i16* %16571 to <16 x i16>*
  store <16 x i16> %16570, <16 x i16>* %16572, align 2, !tbaa !399
  %16573 = zext i32 %.pre-phi3324 to i64
  %16574 = mul nsw i64 %16573, %298
  %16575 = add nsw i64 %16574, %283
  %16576 = getelementptr inbounds i16, i16* %blur_x841, i64 %16575
  %16577 = getelementptr inbounds i16, i16* %16576, i64 -32
  %16578 = bitcast i16* %16577 to <16 x i16>*
  %16579 = load <16 x i16>, <16 x i16>* %16578, align 2, !tbaa !399
  %16580 = getelementptr inbounds i16, i16* %16576, i64 -16
  %16581 = bitcast i16* %16580 to <16 x i16>*
  %16582 = load <16 x i16>, <16 x i16>* %16581, align 2, !tbaa !399
  %16583 = mul nsw i64 %16564, %298
  %16584 = add nsw i64 %16583, %283
  %16585 = getelementptr inbounds i16, i16* %blur_x841, i64 %16584
  %16586 = getelementptr inbounds i16, i16* %16585, i64 -32
  %16587 = bitcast i16* %16586 to <16 x i16>*
  %16588 = load <16 x i16>, <16 x i16>* %16587, align 2, !tbaa !399
  %16589 = getelementptr inbounds i16, i16* %16585, i64 -16
  %16590 = bitcast i16* %16589 to <16 x i16>*
  %16591 = load <16 x i16>, <16 x i16>* %16590, align 2, !tbaa !399
  %16592 = zext i32 %.pre-phi3338 to i64
  %16593 = mul nsw i64 %16592, %298
  %16594 = add nsw i64 %16593, %283
  %16595 = getelementptr inbounds i16, i16* %blur_x841, i64 %16594
  %16596 = getelementptr inbounds i16, i16* %16595, i64 -32
  %16597 = bitcast i16* %16596 to <16 x i16>*
  %16598 = load <16 x i16>, <16 x i16>* %16597, align 2, !tbaa !399
  %16599 = getelementptr inbounds i16, i16* %16595, i64 -16
  %16600 = bitcast i16* %16599 to <16 x i16>*
  %16601 = load <16 x i16>, <16 x i16>* %16600, align 2, !tbaa !399
  %16602 = add <16 x i16> %16588, %16579
  %16603 = add <16 x i16> %16602, %16598
  %16604 = add <16 x i16> %16591, %16582
  %16605 = add <16 x i16> %16604, %16601
  %16606 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16603, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16607 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16605, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16608 = shufflevector <16 x i16> %16606, <16 x i16> %16607, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16609 = lshr <32 x i16> %16608, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16610 = shufflevector <32 x i16> %16609, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16611 = sext i32 %a339 to i64
  %16612 = add nsw i64 %16611, 19
  %16613 = mul nsw i64 %16612, %299
  %16614 = add nsw i64 %301, %16613
  %16615 = getelementptr inbounds i16, i16* %255, i64 %16614
  %16616 = getelementptr inbounds i16, i16* %16615, i64 -32
  %16617 = bitcast i16* %16616 to <16 x i16>*
  store <16 x i16> %16610, <16 x i16>* %16617, align 2, !tbaa !401
  %16618 = shufflevector <32 x i16> %16609, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16619 = getelementptr inbounds i16, i16* %16615, i64 -16
  %16620 = bitcast i16* %16619 to <16 x i16>*
  store <16 x i16> %16618, <16 x i16>* %16620, align 2, !tbaa !401
  br label %after_bb1720

"for blur_y.s0.x.x.rebased1735":                  ; preds = %"for blur_y.s0.x.x.rebased1735.preheader", %"consume blur_x1744"
  %indvars.iv3204 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1735.preheader" ], [ %indvars.iv.next3205, %"consume blur_x1744" ]
  %16621 = add nsw i64 %indvars.iv3204, %290
  %16622 = icmp slt i64 %16621, 1
  %16623 = trunc i64 %16621 to i32
  %16624 = shl nsw i32 %16623, 5
  %16625 = icmp sgt i32 %194, %16624
  %16626 = or i1 %16622, %16625
  br i1 %16626, label %"produce blur_x1742", label %"for blur_y.s0.x.x.rebased1735.consume blur_x1744_crit_edge"

"for blur_y.s0.x.x.rebased1735.consume blur_x1744_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1735"
  %.pre3375 = shl nsw i64 %16621, 5
  br label %"consume blur_x1744"

"end for blur_y.s0.x.x.rebased1736":              ; preds = %"consume blur_x1744", %after_bb1720
  br i1 %291, label %"for blur_y.s0.x.x.rebased1752.preheader", label %"end for blur_y.s0.x.x.rebased1753", !prof !386

"for blur_y.s0.x.x.rebased1752.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1736"
  %16627 = sext i32 %t1644878 to i64
  %16628 = zext i32 %.pre-phi3324 to i64
  %16629 = mul nsw i64 %16628, %298
  %16630 = sub nsw i64 %16629, %285
  %16631 = zext i32 %.pre-phi3328 to i64
  %16632 = mul nsw i64 %16631, %298
  %16633 = sub nsw i64 %16632, %285
  %16634 = zext i32 %.pre-phi3338 to i64
  %16635 = mul nsw i64 %16634, %298
  %16636 = sub nsw i64 %16635, %285
  %16637 = sext i32 %a339 to i64
  %16638 = add nsw i64 %16637, 19
  %16639 = mul nsw i64 %16638, %299
  %16640 = add nsw i64 %16639, %302
  br label %"for blur_y.s0.x.x.rebased1752"

"produce blur_x1742":                             ; preds = %"for blur_y.s0.x.x.rebased1735"
  %t9761743 = add nsw i32 %16624, %t19531732
  %16641 = sext i32 %t9761743 to i64
  %16642 = getelementptr inbounds i16, i16* %read_input784, i64 %16641
  %16643 = getelementptr inbounds i16, i16* %16642, i64 1
  %16644 = bitcast i16* %16643 to <16 x i16>*
  %16645 = load <16 x i16>, <16 x i16>* %16644, align 2, !tbaa !396
  %16646 = getelementptr inbounds i16, i16* %16642, i64 17
  %16647 = bitcast i16* %16646 to <16 x i16>*
  %16648 = load <16 x i16>, <16 x i16>* %16647, align 2, !tbaa !396
  %16649 = getelementptr inbounds i16, i16* %16642, i64 2
  %16650 = bitcast i16* %16649 to <16 x i16>*
  %16651 = load <16 x i16>, <16 x i16>* %16650, align 2, !tbaa !396
  %16652 = getelementptr inbounds i16, i16* %16642, i64 18
  %16653 = bitcast i16* %16652 to <16 x i16>*
  %16654 = load <16 x i16>, <16 x i16>* %16653, align 2, !tbaa !396
  %16655 = bitcast i16* %16642 to <16 x i16>*
  %16656 = load <16 x i16>, <16 x i16>* %16655, align 2, !tbaa !396
  %16657 = getelementptr inbounds i16, i16* %16642, i64 16
  %16658 = bitcast i16* %16657 to <16 x i16>*
  %16659 = load <16 x i16>, <16 x i16>* %16658, align 2, !tbaa !396
  %16660 = add <16 x i16> %16651, %16645
  %16661 = add <16 x i16> %16660, %16656
  %16662 = add <16 x i16> %16654, %16648
  %16663 = add <16 x i16> %16662, %16659
  %16664 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16661, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16665 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16663, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16666 = shufflevector <16 x i16> %16664, <16 x i16> %16665, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16667 = lshr <32 x i16> %16666, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16668 = shufflevector <32 x i16> %16667, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16669 = shl nsw i64 %16621, 5
  %16670 = add nsw i64 %16669, %16522
  %16671 = getelementptr inbounds i16, i16* %blur_x841, i64 %16670
  %16672 = bitcast i16* %16671 to <16 x i16>*
  store <16 x i16> %16668, <16 x i16>* %16672, align 2, !tbaa !399
  %16673 = shufflevector <32 x i16> %16667, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16674 = getelementptr inbounds i16, i16* %16671, i64 16
  %16675 = bitcast i16* %16674 to <16 x i16>*
  store <16 x i16> %16673, <16 x i16>* %16675, align 2, !tbaa !399
  br label %"consume blur_x1744"

"consume blur_x1744":                             ; preds = %"for blur_y.s0.x.x.rebased1735.consume blur_x1744_crit_edge", %"produce blur_x1742"
  %.pre-phi3376 = phi i64 [ %.pre3375, %"for blur_y.s0.x.x.rebased1735.consume blur_x1744_crit_edge" ], [ %16669, %"produce blur_x1742" ]
  %16676 = add nsw i64 %16525, %.pre-phi3376
  %16677 = getelementptr inbounds i16, i16* %blur_x841, i64 %16676
  %16678 = bitcast i16* %16677 to <16 x i16>*
  %16679 = load <16 x i16>, <16 x i16>* %16678, align 2, !tbaa !399
  %16680 = getelementptr inbounds i16, i16* %16677, i64 16
  %16681 = bitcast i16* %16680 to <16 x i16>*
  %16682 = load <16 x i16>, <16 x i16>* %16681, align 2, !tbaa !399
  %16683 = add nsw i64 %16528, %.pre-phi3376
  %16684 = getelementptr inbounds i16, i16* %blur_x841, i64 %16683
  %16685 = bitcast i16* %16684 to <16 x i16>*
  %16686 = load <16 x i16>, <16 x i16>* %16685, align 2, !tbaa !399
  %16687 = getelementptr inbounds i16, i16* %16684, i64 16
  %16688 = bitcast i16* %16687 to <16 x i16>*
  %16689 = load <16 x i16>, <16 x i16>* %16688, align 2, !tbaa !399
  %16690 = add nsw i64 %16531, %.pre-phi3376
  %16691 = getelementptr inbounds i16, i16* %blur_x841, i64 %16690
  %16692 = bitcast i16* %16691 to <16 x i16>*
  %16693 = load <16 x i16>, <16 x i16>* %16692, align 2, !tbaa !399
  %16694 = getelementptr inbounds i16, i16* %16691, i64 16
  %16695 = bitcast i16* %16694 to <16 x i16>*
  %16696 = load <16 x i16>, <16 x i16>* %16695, align 2, !tbaa !399
  %16697 = add <16 x i16> %16686, %16679
  %16698 = add <16 x i16> %16697, %16693
  %16699 = add <16 x i16> %16689, %16682
  %16700 = add <16 x i16> %16699, %16696
  %16701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16698, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16702 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16700, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16703 = shufflevector <16 x i16> %16701, <16 x i16> %16702, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16704 = lshr <32 x i16> %16703, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16705 = shufflevector <32 x i16> %16704, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16706 = add nsw i64 %16535, %.pre-phi3376
  %16707 = getelementptr inbounds i16, i16* %255, i64 %16706
  %16708 = bitcast i16* %16707 to <16 x i16>*
  store <16 x i16> %16705, <16 x i16>* %16708, align 2, !tbaa !401
  %16709 = shufflevector <32 x i16> %16704, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16710 = getelementptr inbounds i16, i16* %16707, i64 16
  %16711 = bitcast i16* %16710 to <16 x i16>*
  store <16 x i16> %16709, <16 x i16>* %16711, align 2, !tbaa !401
  %indvars.iv.next3205 = add nuw nsw i64 %indvars.iv3204, 1
  %.not2462 = icmp eq i64 %indvars.iv.next3205, %370
  br i1 %.not2462, label %"end for blur_y.s0.x.x.rebased1736", label %"for blur_y.s0.x.x.rebased1735"

"for blur_y.s0.x.x.rebased1752":                  ; preds = %"for blur_y.s0.x.x.rebased1752.preheader", %"consume blur_x1762"
  %blur_y.s0.x.x.rebased1754 = phi i32 [ %16790, %"consume blur_x1762" ], [ 0, %"for blur_y.s0.x.x.rebased1752.preheader" ]
  %16712 = add nsw i32 %blur_y.s0.x.x.rebased1754, %t1582776
  %a537 = shl nsw i32 %16712, 5
  %16713 = icmp sgt i32 %a327, %a537
  %b543 = select i1 %16713, i32 %a537, i32 %a327
  %16714 = icmp slt i32 %16712, 1
  %16715 = icmp sgt i32 %194, %a537
  %16716 = or i1 %16714, %16715
  br i1 %16716, label %"produce blur_x1759", label %"consume blur_x1762"

"end for blur_y.s0.x.x.rebased1753":              ; preds = %"consume blur_x1762", %"end for blur_y.s0.x.x.rebased1736"
  br i1 %224, label %"produce blur_x1766", label %after_bb1763

"produce blur_x1759":                             ; preds = %"for blur_y.s0.x.x.rebased1752"
  %16717 = icmp slt i32 %b543, %194
  %blur_x.s0.x.v1.base.s1760 = select i1 %16717, i32 %b543, i32 %194
  %t9811761 = add nsw i32 %blur_x.s0.x.v1.base.s1760, %t19531732
  %16718 = sext i32 %t9811761 to i64
  %16719 = getelementptr inbounds i16, i16* %read_input784, i64 %16718
  %16720 = getelementptr inbounds i16, i16* %16719, i64 1
  %16721 = bitcast i16* %16720 to <16 x i16>*
  %16722 = load <16 x i16>, <16 x i16>* %16721, align 2, !tbaa !396
  %16723 = getelementptr inbounds i16, i16* %16719, i64 17
  %16724 = bitcast i16* %16723 to <16 x i16>*
  %16725 = load <16 x i16>, <16 x i16>* %16724, align 2, !tbaa !396
  %16726 = getelementptr inbounds i16, i16* %16719, i64 2
  %16727 = bitcast i16* %16726 to <16 x i16>*
  %16728 = load <16 x i16>, <16 x i16>* %16727, align 2, !tbaa !396
  %16729 = getelementptr inbounds i16, i16* %16719, i64 18
  %16730 = bitcast i16* %16729 to <16 x i16>*
  %16731 = load <16 x i16>, <16 x i16>* %16730, align 2, !tbaa !396
  %16732 = bitcast i16* %16719 to <16 x i16>*
  %16733 = load <16 x i16>, <16 x i16>* %16732, align 2, !tbaa !396
  %16734 = getelementptr inbounds i16, i16* %16719, i64 16
  %16735 = bitcast i16* %16734 to <16 x i16>*
  %16736 = load <16 x i16>, <16 x i16>* %16735, align 2, !tbaa !396
  %16737 = add <16 x i16> %16728, %16722
  %16738 = add <16 x i16> %16737, %16733
  %16739 = add <16 x i16> %16731, %16725
  %16740 = add <16 x i16> %16739, %16736
  %16741 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16738, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16742 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16740, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16743 = shufflevector <16 x i16> %16741, <16 x i16> %16742, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16744 = lshr <32 x i16> %16743, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16745 = shufflevector <32 x i16> %16744, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16746 = sext i32 %blur_x.s0.x.v1.base.s1760 to i64
  %16747 = add nsw i64 %16746, %16627
  %16748 = getelementptr inbounds i16, i16* %blur_x841, i64 %16747
  %16749 = bitcast i16* %16748 to <16 x i16>*
  store <16 x i16> %16745, <16 x i16>* %16749, align 2, !tbaa !399
  %16750 = shufflevector <32 x i16> %16744, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16751 = getelementptr inbounds i16, i16* %16748, i64 16
  %16752 = bitcast i16* %16751 to <16 x i16>*
  store <16 x i16> %16750, <16 x i16>* %16752, align 2, !tbaa !399
  br label %"consume blur_x1762"

"consume blur_x1762":                             ; preds = %"for blur_y.s0.x.x.rebased1752", %"produce blur_x1759"
  %16753 = sext i32 %b543 to i64
  %16754 = add nsw i64 %16630, %16753
  %16755 = getelementptr inbounds i16, i16* %blur_x841, i64 %16754
  %16756 = bitcast i16* %16755 to <16 x i16>*
  %16757 = load <16 x i16>, <16 x i16>* %16756, align 2, !tbaa !399
  %16758 = getelementptr inbounds i16, i16* %16755, i64 16
  %16759 = bitcast i16* %16758 to <16 x i16>*
  %16760 = load <16 x i16>, <16 x i16>* %16759, align 2, !tbaa !399
  %16761 = add nsw i64 %16633, %16753
  %16762 = getelementptr inbounds i16, i16* %blur_x841, i64 %16761
  %16763 = bitcast i16* %16762 to <16 x i16>*
  %16764 = load <16 x i16>, <16 x i16>* %16763, align 2, !tbaa !399
  %16765 = getelementptr inbounds i16, i16* %16762, i64 16
  %16766 = bitcast i16* %16765 to <16 x i16>*
  %16767 = load <16 x i16>, <16 x i16>* %16766, align 2, !tbaa !399
  %16768 = add nsw i64 %16636, %16753
  %16769 = getelementptr inbounds i16, i16* %blur_x841, i64 %16768
  %16770 = bitcast i16* %16769 to <16 x i16>*
  %16771 = load <16 x i16>, <16 x i16>* %16770, align 2, !tbaa !399
  %16772 = getelementptr inbounds i16, i16* %16769, i64 16
  %16773 = bitcast i16* %16772 to <16 x i16>*
  %16774 = load <16 x i16>, <16 x i16>* %16773, align 2, !tbaa !399
  %16775 = add <16 x i16> %16764, %16757
  %16776 = add <16 x i16> %16775, %16771
  %16777 = add <16 x i16> %16767, %16760
  %16778 = add <16 x i16> %16777, %16774
  %16779 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16776, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16780 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16778, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16781 = shufflevector <16 x i16> %16779, <16 x i16> %16780, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16782 = lshr <32 x i16> %16781, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16783 = shufflevector <32 x i16> %16782, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16784 = add nsw i64 %16640, %16753
  %16785 = getelementptr inbounds i16, i16* %255, i64 %16784
  %16786 = bitcast i16* %16785 to <16 x i16>*
  store <16 x i16> %16783, <16 x i16>* %16786, align 2, !tbaa !401
  %16787 = shufflevector <32 x i16> %16782, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16788 = getelementptr inbounds i16, i16* %16785, i64 16
  %16789 = bitcast i16* %16788 to <16 x i16>*
  store <16 x i16> %16787, <16 x i16>* %16789, align 2, !tbaa !401
  %16790 = add nuw nsw i32 %blur_y.s0.x.x.rebased1754, 1
  %.not2461 = icmp eq i32 %16790, %t1639861
  br i1 %.not2461, label %"end for blur_y.s0.x.x.rebased1753", label %"for blur_y.s0.x.x.rebased1752"

after_bb1763:                                     ; preds = %"end for blur_y.s0.x.x.rebased1753", %"produce blur_x1766"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1778.preheader", label %"end for blur_y.s0.x.x.rebased1779", !prof !386

"for blur_y.s0.x.x.rebased1778.preheader":        ; preds = %after_bb1763
  %16791 = sext i32 %t1650914 to i64
  %16792 = zext i32 %.pre-phi3328 to i64
  %16793 = mul nsw i64 %16792, %298
  %16794 = sub nsw i64 %16793, %285
  %16795 = zext i32 %.pre-phi3332 to i64
  %16796 = mul nsw i64 %16795, %298
  %16797 = sub nsw i64 %16796, %285
  %16798 = zext i32 %.pre-phi3324 to i64
  %16799 = mul nsw i64 %16798, %298
  %16800 = sub nsw i64 %16799, %285
  %16801 = sext i32 %a339 to i64
  %16802 = add nsw i64 %16801, 20
  %16803 = mul nsw i64 %16802, %299
  %16804 = add nsw i64 %16803, %302
  br label %"for blur_y.s0.x.x.rebased1778"

"produce blur_x1766":                             ; preds = %"end for blur_y.s0.x.x.rebased1753"
  %16805 = getelementptr inbounds i16, i16* %read_input784, i64 %341
  %16806 = getelementptr inbounds i16, i16* %16805, i64 -31
  %16807 = bitcast i16* %16806 to <16 x i16>*
  %16808 = load <16 x i16>, <16 x i16>* %16807, align 2, !tbaa !396
  %16809 = getelementptr inbounds i16, i16* %16805, i64 -15
  %16810 = bitcast i16* %16809 to <16 x i16>*
  %16811 = load <16 x i16>, <16 x i16>* %16810, align 2, !tbaa !396
  %16812 = getelementptr inbounds i16, i16* %16805, i64 -30
  %16813 = bitcast i16* %16812 to <16 x i16>*
  %16814 = load <16 x i16>, <16 x i16>* %16813, align 2, !tbaa !396
  %16815 = getelementptr inbounds i16, i16* %16805, i64 -14
  %16816 = bitcast i16* %16815 to <16 x i16>*
  %16817 = load <16 x i16>, <16 x i16>* %16816, align 2, !tbaa !396
  %16818 = getelementptr inbounds i16, i16* %16805, i64 -32
  %16819 = bitcast i16* %16818 to <16 x i16>*
  %16820 = load <16 x i16>, <16 x i16>* %16819, align 2, !tbaa !396
  %16821 = getelementptr inbounds i16, i16* %16805, i64 -16
  %16822 = bitcast i16* %16821 to <16 x i16>*
  %16823 = load <16 x i16>, <16 x i16>* %16822, align 2, !tbaa !396
  %16824 = add <16 x i16> %16814, %16808
  %16825 = add <16 x i16> %16824, %16820
  %16826 = add <16 x i16> %16817, %16811
  %16827 = add <16 x i16> %16826, %16823
  %16828 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16825, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16829 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16827, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16830 = shufflevector <16 x i16> %16828, <16 x i16> %16829, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16831 = lshr <32 x i16> %16830, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16832 = shufflevector <32 x i16> %16831, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16833 = zext i32 %.pre-phi3332 to i64
  %16834 = mul nsw i64 %286, %16833
  %16835 = add nsw i64 %288, %16834
  %16836 = getelementptr inbounds i16, i16* %blur_x841, i64 %16835
  %16837 = getelementptr inbounds i16, i16* %16836, i64 -32
  %16838 = bitcast i16* %16837 to <16 x i16>*
  store <16 x i16> %16832, <16 x i16>* %16838, align 2, !tbaa !399
  %16839 = shufflevector <32 x i16> %16831, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16840 = getelementptr inbounds i16, i16* %16836, i64 -16
  %16841 = bitcast i16* %16840 to <16 x i16>*
  store <16 x i16> %16839, <16 x i16>* %16841, align 2, !tbaa !399
  %16842 = zext i32 %.pre-phi3328 to i64
  %16843 = mul nsw i64 %16842, %298
  %16844 = add nsw i64 %16843, %283
  %16845 = getelementptr inbounds i16, i16* %blur_x841, i64 %16844
  %16846 = getelementptr inbounds i16, i16* %16845, i64 -32
  %16847 = bitcast i16* %16846 to <16 x i16>*
  %16848 = load <16 x i16>, <16 x i16>* %16847, align 2, !tbaa !399
  %16849 = getelementptr inbounds i16, i16* %16845, i64 -16
  %16850 = bitcast i16* %16849 to <16 x i16>*
  %16851 = load <16 x i16>, <16 x i16>* %16850, align 2, !tbaa !399
  %16852 = mul nsw i64 %16833, %298
  %16853 = add nsw i64 %16852, %283
  %16854 = getelementptr inbounds i16, i16* %blur_x841, i64 %16853
  %16855 = getelementptr inbounds i16, i16* %16854, i64 -32
  %16856 = bitcast i16* %16855 to <16 x i16>*
  %16857 = load <16 x i16>, <16 x i16>* %16856, align 2, !tbaa !399
  %16858 = getelementptr inbounds i16, i16* %16854, i64 -16
  %16859 = bitcast i16* %16858 to <16 x i16>*
  %16860 = load <16 x i16>, <16 x i16>* %16859, align 2, !tbaa !399
  %16861 = zext i32 %.pre-phi3324 to i64
  %16862 = mul nsw i64 %16861, %298
  %16863 = add nsw i64 %16862, %283
  %16864 = getelementptr inbounds i16, i16* %blur_x841, i64 %16863
  %16865 = getelementptr inbounds i16, i16* %16864, i64 -32
  %16866 = bitcast i16* %16865 to <16 x i16>*
  %16867 = load <16 x i16>, <16 x i16>* %16866, align 2, !tbaa !399
  %16868 = getelementptr inbounds i16, i16* %16864, i64 -16
  %16869 = bitcast i16* %16868 to <16 x i16>*
  %16870 = load <16 x i16>, <16 x i16>* %16869, align 2, !tbaa !399
  %16871 = add <16 x i16> %16857, %16848
  %16872 = add <16 x i16> %16871, %16867
  %16873 = add <16 x i16> %16860, %16851
  %16874 = add <16 x i16> %16873, %16870
  %16875 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16872, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16876 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16874, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16877 = shufflevector <16 x i16> %16875, <16 x i16> %16876, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16878 = lshr <32 x i16> %16877, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16879 = shufflevector <32 x i16> %16878, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16880 = sext i32 %a339 to i64
  %16881 = add nsw i64 %16880, 20
  %16882 = mul nsw i64 %16881, %299
  %16883 = add nsw i64 %301, %16882
  %16884 = getelementptr inbounds i16, i16* %255, i64 %16883
  %16885 = getelementptr inbounds i16, i16* %16884, i64 -32
  %16886 = bitcast i16* %16885 to <16 x i16>*
  store <16 x i16> %16879, <16 x i16>* %16886, align 2, !tbaa !401
  %16887 = shufflevector <32 x i16> %16878, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16888 = getelementptr inbounds i16, i16* %16884, i64 -16
  %16889 = bitcast i16* %16888 to <16 x i16>*
  store <16 x i16> %16887, <16 x i16>* %16889, align 2, !tbaa !401
  br label %after_bb1763

"for blur_y.s0.x.x.rebased1778":                  ; preds = %"for blur_y.s0.x.x.rebased1778.preheader", %"consume blur_x1787"
  %indvars.iv3207 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1778.preheader" ], [ %indvars.iv.next3208, %"consume blur_x1787" ]
  %16890 = add nsw i64 %indvars.iv3207, %290
  %16891 = icmp slt i64 %16890, 1
  %16892 = trunc i64 %16890 to i32
  %16893 = shl nsw i32 %16892, 5
  %16894 = icmp sgt i32 %194, %16893
  %16895 = or i1 %16891, %16894
  br i1 %16895, label %"produce blur_x1785", label %"for blur_y.s0.x.x.rebased1778.consume blur_x1787_crit_edge"

"for blur_y.s0.x.x.rebased1778.consume blur_x1787_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1778"
  %.pre3377 = shl nsw i64 %16890, 5
  br label %"consume blur_x1787"

"end for blur_y.s0.x.x.rebased1779":              ; preds = %"consume blur_x1787", %after_bb1763
  br i1 %291, label %"for blur_y.s0.x.x.rebased1795.preheader", label %"end for blur_y.s0.x.x.rebased1796", !prof !386

"for blur_y.s0.x.x.rebased1795.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1779"
  %16896 = sext i32 %t1650914 to i64
  %16897 = zext i32 %.pre-phi3328 to i64
  %16898 = mul nsw i64 %16897, %298
  %16899 = sub nsw i64 %16898, %285
  %16900 = zext i32 %.pre-phi3332 to i64
  %16901 = mul nsw i64 %16900, %298
  %16902 = sub nsw i64 %16901, %285
  %16903 = zext i32 %.pre-phi3324 to i64
  %16904 = mul nsw i64 %16903, %298
  %16905 = sub nsw i64 %16904, %285
  %16906 = sext i32 %a339 to i64
  %16907 = add nsw i64 %16906, 20
  %16908 = mul nsw i64 %16907, %299
  %16909 = add nsw i64 %16908, %302
  br label %"for blur_y.s0.x.x.rebased1795"

"produce blur_x1785":                             ; preds = %"for blur_y.s0.x.x.rebased1778"
  %t9921786 = add nsw i32 %16893, %t19691775
  %16910 = sext i32 %t9921786 to i64
  %16911 = getelementptr inbounds i16, i16* %read_input784, i64 %16910
  %16912 = getelementptr inbounds i16, i16* %16911, i64 1
  %16913 = bitcast i16* %16912 to <16 x i16>*
  %16914 = load <16 x i16>, <16 x i16>* %16913, align 2, !tbaa !396
  %16915 = getelementptr inbounds i16, i16* %16911, i64 17
  %16916 = bitcast i16* %16915 to <16 x i16>*
  %16917 = load <16 x i16>, <16 x i16>* %16916, align 2, !tbaa !396
  %16918 = getelementptr inbounds i16, i16* %16911, i64 2
  %16919 = bitcast i16* %16918 to <16 x i16>*
  %16920 = load <16 x i16>, <16 x i16>* %16919, align 2, !tbaa !396
  %16921 = getelementptr inbounds i16, i16* %16911, i64 18
  %16922 = bitcast i16* %16921 to <16 x i16>*
  %16923 = load <16 x i16>, <16 x i16>* %16922, align 2, !tbaa !396
  %16924 = bitcast i16* %16911 to <16 x i16>*
  %16925 = load <16 x i16>, <16 x i16>* %16924, align 2, !tbaa !396
  %16926 = getelementptr inbounds i16, i16* %16911, i64 16
  %16927 = bitcast i16* %16926 to <16 x i16>*
  %16928 = load <16 x i16>, <16 x i16>* %16927, align 2, !tbaa !396
  %16929 = add <16 x i16> %16920, %16914
  %16930 = add <16 x i16> %16929, %16925
  %16931 = add <16 x i16> %16923, %16917
  %16932 = add <16 x i16> %16931, %16928
  %16933 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16930, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16934 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16932, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16935 = shufflevector <16 x i16> %16933, <16 x i16> %16934, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16936 = lshr <32 x i16> %16935, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16937 = shufflevector <32 x i16> %16936, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16938 = shl nsw i64 %16890, 5
  %16939 = add nsw i64 %16938, %16791
  %16940 = getelementptr inbounds i16, i16* %blur_x841, i64 %16939
  %16941 = bitcast i16* %16940 to <16 x i16>*
  store <16 x i16> %16937, <16 x i16>* %16941, align 2, !tbaa !399
  %16942 = shufflevector <32 x i16> %16936, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16943 = getelementptr inbounds i16, i16* %16940, i64 16
  %16944 = bitcast i16* %16943 to <16 x i16>*
  store <16 x i16> %16942, <16 x i16>* %16944, align 2, !tbaa !399
  br label %"consume blur_x1787"

"consume blur_x1787":                             ; preds = %"for blur_y.s0.x.x.rebased1778.consume blur_x1787_crit_edge", %"produce blur_x1785"
  %.pre-phi3378 = phi i64 [ %.pre3377, %"for blur_y.s0.x.x.rebased1778.consume blur_x1787_crit_edge" ], [ %16938, %"produce blur_x1785" ]
  %16945 = add nsw i64 %16794, %.pre-phi3378
  %16946 = getelementptr inbounds i16, i16* %blur_x841, i64 %16945
  %16947 = bitcast i16* %16946 to <16 x i16>*
  %16948 = load <16 x i16>, <16 x i16>* %16947, align 2, !tbaa !399
  %16949 = getelementptr inbounds i16, i16* %16946, i64 16
  %16950 = bitcast i16* %16949 to <16 x i16>*
  %16951 = load <16 x i16>, <16 x i16>* %16950, align 2, !tbaa !399
  %16952 = add nsw i64 %16797, %.pre-phi3378
  %16953 = getelementptr inbounds i16, i16* %blur_x841, i64 %16952
  %16954 = bitcast i16* %16953 to <16 x i16>*
  %16955 = load <16 x i16>, <16 x i16>* %16954, align 2, !tbaa !399
  %16956 = getelementptr inbounds i16, i16* %16953, i64 16
  %16957 = bitcast i16* %16956 to <16 x i16>*
  %16958 = load <16 x i16>, <16 x i16>* %16957, align 2, !tbaa !399
  %16959 = add nsw i64 %16800, %.pre-phi3378
  %16960 = getelementptr inbounds i16, i16* %blur_x841, i64 %16959
  %16961 = bitcast i16* %16960 to <16 x i16>*
  %16962 = load <16 x i16>, <16 x i16>* %16961, align 2, !tbaa !399
  %16963 = getelementptr inbounds i16, i16* %16960, i64 16
  %16964 = bitcast i16* %16963 to <16 x i16>*
  %16965 = load <16 x i16>, <16 x i16>* %16964, align 2, !tbaa !399
  %16966 = add <16 x i16> %16955, %16948
  %16967 = add <16 x i16> %16966, %16962
  %16968 = add <16 x i16> %16958, %16951
  %16969 = add <16 x i16> %16968, %16965
  %16970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16967, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %16969, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %16972 = shufflevector <16 x i16> %16970, <16 x i16> %16971, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16973 = lshr <32 x i16> %16972, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %16974 = shufflevector <32 x i16> %16973, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %16975 = add nsw i64 %16804, %.pre-phi3378
  %16976 = getelementptr inbounds i16, i16* %255, i64 %16975
  %16977 = bitcast i16* %16976 to <16 x i16>*
  store <16 x i16> %16974, <16 x i16>* %16977, align 2, !tbaa !401
  %16978 = shufflevector <32 x i16> %16973, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %16979 = getelementptr inbounds i16, i16* %16976, i64 16
  %16980 = bitcast i16* %16979 to <16 x i16>*
  store <16 x i16> %16978, <16 x i16>* %16980, align 2, !tbaa !401
  %indvars.iv.next3208 = add nuw nsw i64 %indvars.iv3207, 1
  %.not2460 = icmp eq i64 %indvars.iv.next3208, %370
  br i1 %.not2460, label %"end for blur_y.s0.x.x.rebased1779", label %"for blur_y.s0.x.x.rebased1778"

"for blur_y.s0.x.x.rebased1795":                  ; preds = %"for blur_y.s0.x.x.rebased1795.preheader", %"consume blur_x1805"
  %blur_y.s0.x.x.rebased1797 = phi i32 [ %17059, %"consume blur_x1805" ], [ 0, %"for blur_y.s0.x.x.rebased1795.preheader" ]
  %16981 = add nsw i32 %blur_y.s0.x.x.rebased1797, %t1582776
  %a544 = shl nsw i32 %16981, 5
  %16982 = icmp sgt i32 %a327, %a544
  %b550 = select i1 %16982, i32 %a544, i32 %a327
  %16983 = icmp slt i32 %16981, 1
  %16984 = icmp sgt i32 %194, %a544
  %16985 = or i1 %16983, %16984
  br i1 %16985, label %"produce blur_x1802", label %"consume blur_x1805"

"end for blur_y.s0.x.x.rebased1796":              ; preds = %"consume blur_x1805", %"end for blur_y.s0.x.x.rebased1779"
  br i1 %224, label %"produce blur_x1809", label %after_bb1806

"produce blur_x1802":                             ; preds = %"for blur_y.s0.x.x.rebased1795"
  %16986 = icmp slt i32 %b550, %194
  %blur_x.s0.x.v1.base.s1803 = select i1 %16986, i32 %b550, i32 %194
  %t9971804 = add nsw i32 %blur_x.s0.x.v1.base.s1803, %t19691775
  %16987 = sext i32 %t9971804 to i64
  %16988 = getelementptr inbounds i16, i16* %read_input784, i64 %16987
  %16989 = getelementptr inbounds i16, i16* %16988, i64 1
  %16990 = bitcast i16* %16989 to <16 x i16>*
  %16991 = load <16 x i16>, <16 x i16>* %16990, align 2, !tbaa !396
  %16992 = getelementptr inbounds i16, i16* %16988, i64 17
  %16993 = bitcast i16* %16992 to <16 x i16>*
  %16994 = load <16 x i16>, <16 x i16>* %16993, align 2, !tbaa !396
  %16995 = getelementptr inbounds i16, i16* %16988, i64 2
  %16996 = bitcast i16* %16995 to <16 x i16>*
  %16997 = load <16 x i16>, <16 x i16>* %16996, align 2, !tbaa !396
  %16998 = getelementptr inbounds i16, i16* %16988, i64 18
  %16999 = bitcast i16* %16998 to <16 x i16>*
  %17000 = load <16 x i16>, <16 x i16>* %16999, align 2, !tbaa !396
  %17001 = bitcast i16* %16988 to <16 x i16>*
  %17002 = load <16 x i16>, <16 x i16>* %17001, align 2, !tbaa !396
  %17003 = getelementptr inbounds i16, i16* %16988, i64 16
  %17004 = bitcast i16* %17003 to <16 x i16>*
  %17005 = load <16 x i16>, <16 x i16>* %17004, align 2, !tbaa !396
  %17006 = add <16 x i16> %16997, %16991
  %17007 = add <16 x i16> %17006, %17002
  %17008 = add <16 x i16> %17000, %16994
  %17009 = add <16 x i16> %17008, %17005
  %17010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17007, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17011 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17009, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17012 = shufflevector <16 x i16> %17010, <16 x i16> %17011, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17013 = lshr <32 x i16> %17012, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17014 = shufflevector <32 x i16> %17013, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17015 = sext i32 %blur_x.s0.x.v1.base.s1803 to i64
  %17016 = add nsw i64 %17015, %16896
  %17017 = getelementptr inbounds i16, i16* %blur_x841, i64 %17016
  %17018 = bitcast i16* %17017 to <16 x i16>*
  store <16 x i16> %17014, <16 x i16>* %17018, align 2, !tbaa !399
  %17019 = shufflevector <32 x i16> %17013, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17020 = getelementptr inbounds i16, i16* %17017, i64 16
  %17021 = bitcast i16* %17020 to <16 x i16>*
  store <16 x i16> %17019, <16 x i16>* %17021, align 2, !tbaa !399
  br label %"consume blur_x1805"

"consume blur_x1805":                             ; preds = %"for blur_y.s0.x.x.rebased1795", %"produce blur_x1802"
  %17022 = sext i32 %b550 to i64
  %17023 = add nsw i64 %16899, %17022
  %17024 = getelementptr inbounds i16, i16* %blur_x841, i64 %17023
  %17025 = bitcast i16* %17024 to <16 x i16>*
  %17026 = load <16 x i16>, <16 x i16>* %17025, align 2, !tbaa !399
  %17027 = getelementptr inbounds i16, i16* %17024, i64 16
  %17028 = bitcast i16* %17027 to <16 x i16>*
  %17029 = load <16 x i16>, <16 x i16>* %17028, align 2, !tbaa !399
  %17030 = add nsw i64 %16902, %17022
  %17031 = getelementptr inbounds i16, i16* %blur_x841, i64 %17030
  %17032 = bitcast i16* %17031 to <16 x i16>*
  %17033 = load <16 x i16>, <16 x i16>* %17032, align 2, !tbaa !399
  %17034 = getelementptr inbounds i16, i16* %17031, i64 16
  %17035 = bitcast i16* %17034 to <16 x i16>*
  %17036 = load <16 x i16>, <16 x i16>* %17035, align 2, !tbaa !399
  %17037 = add nsw i64 %16905, %17022
  %17038 = getelementptr inbounds i16, i16* %blur_x841, i64 %17037
  %17039 = bitcast i16* %17038 to <16 x i16>*
  %17040 = load <16 x i16>, <16 x i16>* %17039, align 2, !tbaa !399
  %17041 = getelementptr inbounds i16, i16* %17038, i64 16
  %17042 = bitcast i16* %17041 to <16 x i16>*
  %17043 = load <16 x i16>, <16 x i16>* %17042, align 2, !tbaa !399
  %17044 = add <16 x i16> %17033, %17026
  %17045 = add <16 x i16> %17044, %17040
  %17046 = add <16 x i16> %17036, %17029
  %17047 = add <16 x i16> %17046, %17043
  %17048 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17045, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17049 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17047, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17050 = shufflevector <16 x i16> %17048, <16 x i16> %17049, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17051 = lshr <32 x i16> %17050, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17052 = shufflevector <32 x i16> %17051, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17053 = add nsw i64 %16909, %17022
  %17054 = getelementptr inbounds i16, i16* %255, i64 %17053
  %17055 = bitcast i16* %17054 to <16 x i16>*
  store <16 x i16> %17052, <16 x i16>* %17055, align 2, !tbaa !401
  %17056 = shufflevector <32 x i16> %17051, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17057 = getelementptr inbounds i16, i16* %17054, i64 16
  %17058 = bitcast i16* %17057 to <16 x i16>*
  store <16 x i16> %17056, <16 x i16>* %17058, align 2, !tbaa !401
  %17059 = add nuw nsw i32 %blur_y.s0.x.x.rebased1797, 1
  %.not2459 = icmp eq i32 %17059, %t1639861
  br i1 %.not2459, label %"end for blur_y.s0.x.x.rebased1796", label %"for blur_y.s0.x.x.rebased1795"

after_bb1806:                                     ; preds = %"end for blur_y.s0.x.x.rebased1796", %"produce blur_x1809"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1821.preheader", label %"end for blur_y.s0.x.x.rebased1822", !prof !386

"for blur_y.s0.x.x.rebased1821.preheader":        ; preds = %after_bb1806
  %17060 = sext i32 %t1666957 to i64
  %17061 = zext i32 %.pre-phi3332 to i64
  %17062 = mul nsw i64 %17061, %298
  %17063 = sub nsw i64 %17062, %285
  %17064 = zext i32 %.pre-phi3338 to i64
  %17065 = mul nsw i64 %17064, %298
  %17066 = sub nsw i64 %17065, %285
  %17067 = zext i32 %.pre-phi3328 to i64
  %17068 = mul nsw i64 %17067, %298
  %17069 = sub nsw i64 %17068, %285
  %17070 = sext i32 %a339 to i64
  %17071 = add nsw i64 %17070, 21
  %17072 = mul nsw i64 %17071, %299
  %17073 = add nsw i64 %17072, %302
  br label %"for blur_y.s0.x.x.rebased1821"

"produce blur_x1809":                             ; preds = %"end for blur_y.s0.x.x.rebased1796"
  %17074 = getelementptr inbounds i16, i16* %read_input784, i64 %343
  %17075 = getelementptr inbounds i16, i16* %17074, i64 -31
  %17076 = bitcast i16* %17075 to <16 x i16>*
  %17077 = load <16 x i16>, <16 x i16>* %17076, align 2, !tbaa !396
  %17078 = getelementptr inbounds i16, i16* %17074, i64 -15
  %17079 = bitcast i16* %17078 to <16 x i16>*
  %17080 = load <16 x i16>, <16 x i16>* %17079, align 2, !tbaa !396
  %17081 = getelementptr inbounds i16, i16* %17074, i64 -30
  %17082 = bitcast i16* %17081 to <16 x i16>*
  %17083 = load <16 x i16>, <16 x i16>* %17082, align 2, !tbaa !396
  %17084 = getelementptr inbounds i16, i16* %17074, i64 -14
  %17085 = bitcast i16* %17084 to <16 x i16>*
  %17086 = load <16 x i16>, <16 x i16>* %17085, align 2, !tbaa !396
  %17087 = getelementptr inbounds i16, i16* %17074, i64 -32
  %17088 = bitcast i16* %17087 to <16 x i16>*
  %17089 = load <16 x i16>, <16 x i16>* %17088, align 2, !tbaa !396
  %17090 = getelementptr inbounds i16, i16* %17074, i64 -16
  %17091 = bitcast i16* %17090 to <16 x i16>*
  %17092 = load <16 x i16>, <16 x i16>* %17091, align 2, !tbaa !396
  %17093 = add <16 x i16> %17083, %17077
  %17094 = add <16 x i16> %17093, %17089
  %17095 = add <16 x i16> %17086, %17080
  %17096 = add <16 x i16> %17095, %17092
  %17097 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17094, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17098 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17096, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17099 = shufflevector <16 x i16> %17097, <16 x i16> %17098, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17100 = lshr <32 x i16> %17099, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17101 = shufflevector <32 x i16> %17100, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17102 = zext i32 %.pre-phi3338 to i64
  %17103 = mul nsw i64 %286, %17102
  %17104 = add nsw i64 %288, %17103
  %17105 = getelementptr inbounds i16, i16* %blur_x841, i64 %17104
  %17106 = getelementptr inbounds i16, i16* %17105, i64 -32
  %17107 = bitcast i16* %17106 to <16 x i16>*
  store <16 x i16> %17101, <16 x i16>* %17107, align 2, !tbaa !399
  %17108 = shufflevector <32 x i16> %17100, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17109 = getelementptr inbounds i16, i16* %17105, i64 -16
  %17110 = bitcast i16* %17109 to <16 x i16>*
  store <16 x i16> %17108, <16 x i16>* %17110, align 2, !tbaa !399
  %17111 = zext i32 %.pre-phi3332 to i64
  %17112 = mul nsw i64 %17111, %298
  %17113 = add nsw i64 %17112, %283
  %17114 = getelementptr inbounds i16, i16* %blur_x841, i64 %17113
  %17115 = getelementptr inbounds i16, i16* %17114, i64 -32
  %17116 = bitcast i16* %17115 to <16 x i16>*
  %17117 = load <16 x i16>, <16 x i16>* %17116, align 2, !tbaa !399
  %17118 = getelementptr inbounds i16, i16* %17114, i64 -16
  %17119 = bitcast i16* %17118 to <16 x i16>*
  %17120 = load <16 x i16>, <16 x i16>* %17119, align 2, !tbaa !399
  %17121 = mul nsw i64 %17102, %298
  %17122 = add nsw i64 %17121, %283
  %17123 = getelementptr inbounds i16, i16* %blur_x841, i64 %17122
  %17124 = getelementptr inbounds i16, i16* %17123, i64 -32
  %17125 = bitcast i16* %17124 to <16 x i16>*
  %17126 = load <16 x i16>, <16 x i16>* %17125, align 2, !tbaa !399
  %17127 = getelementptr inbounds i16, i16* %17123, i64 -16
  %17128 = bitcast i16* %17127 to <16 x i16>*
  %17129 = load <16 x i16>, <16 x i16>* %17128, align 2, !tbaa !399
  %17130 = zext i32 %.pre-phi3328 to i64
  %17131 = mul nsw i64 %17130, %298
  %17132 = add nsw i64 %17131, %283
  %17133 = getelementptr inbounds i16, i16* %blur_x841, i64 %17132
  %17134 = getelementptr inbounds i16, i16* %17133, i64 -32
  %17135 = bitcast i16* %17134 to <16 x i16>*
  %17136 = load <16 x i16>, <16 x i16>* %17135, align 2, !tbaa !399
  %17137 = getelementptr inbounds i16, i16* %17133, i64 -16
  %17138 = bitcast i16* %17137 to <16 x i16>*
  %17139 = load <16 x i16>, <16 x i16>* %17138, align 2, !tbaa !399
  %17140 = add <16 x i16> %17126, %17117
  %17141 = add <16 x i16> %17140, %17136
  %17142 = add <16 x i16> %17129, %17120
  %17143 = add <16 x i16> %17142, %17139
  %17144 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17141, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17145 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17143, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17146 = shufflevector <16 x i16> %17144, <16 x i16> %17145, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17147 = lshr <32 x i16> %17146, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17148 = shufflevector <32 x i16> %17147, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17149 = sext i32 %a339 to i64
  %17150 = add nsw i64 %17149, 21
  %17151 = mul nsw i64 %17150, %299
  %17152 = add nsw i64 %301, %17151
  %17153 = getelementptr inbounds i16, i16* %255, i64 %17152
  %17154 = getelementptr inbounds i16, i16* %17153, i64 -32
  %17155 = bitcast i16* %17154 to <16 x i16>*
  store <16 x i16> %17148, <16 x i16>* %17155, align 2, !tbaa !401
  %17156 = shufflevector <32 x i16> %17147, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17157 = getelementptr inbounds i16, i16* %17153, i64 -16
  %17158 = bitcast i16* %17157 to <16 x i16>*
  store <16 x i16> %17156, <16 x i16>* %17158, align 2, !tbaa !401
  br label %after_bb1806

"for blur_y.s0.x.x.rebased1821":                  ; preds = %"for blur_y.s0.x.x.rebased1821.preheader", %"consume blur_x1830"
  %indvars.iv3210 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1821.preheader" ], [ %indvars.iv.next3211, %"consume blur_x1830" ]
  %17159 = add nsw i64 %indvars.iv3210, %290
  %17160 = icmp slt i64 %17159, 1
  %17161 = trunc i64 %17159 to i32
  %17162 = shl nsw i32 %17161, 5
  %17163 = icmp sgt i32 %194, %17162
  %17164 = or i1 %17160, %17163
  br i1 %17164, label %"produce blur_x1828", label %"for blur_y.s0.x.x.rebased1821.consume blur_x1830_crit_edge"

"for blur_y.s0.x.x.rebased1821.consume blur_x1830_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1821"
  %.pre3379 = shl nsw i64 %17159, 5
  br label %"consume blur_x1830"

"end for blur_y.s0.x.x.rebased1822":              ; preds = %"consume blur_x1830", %after_bb1806
  br i1 %291, label %"for blur_y.s0.x.x.rebased1838.preheader", label %"end for blur_y.s0.x.x.rebased1839", !prof !386

"for blur_y.s0.x.x.rebased1838.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1822"
  %17165 = sext i32 %t1666957 to i64
  %17166 = zext i32 %.pre-phi3332 to i64
  %17167 = mul nsw i64 %17166, %298
  %17168 = sub nsw i64 %17167, %285
  %17169 = zext i32 %.pre-phi3338 to i64
  %17170 = mul nsw i64 %17169, %298
  %17171 = sub nsw i64 %17170, %285
  %17172 = zext i32 %.pre-phi3328 to i64
  %17173 = mul nsw i64 %17172, %298
  %17174 = sub nsw i64 %17173, %285
  %17175 = sext i32 %a339 to i64
  %17176 = add nsw i64 %17175, 21
  %17177 = mul nsw i64 %17176, %299
  %17178 = add nsw i64 %17177, %302
  br label %"for blur_y.s0.x.x.rebased1838"

"produce blur_x1828":                             ; preds = %"for blur_y.s0.x.x.rebased1821"
  %t10081829 = add nsw i32 %17162, %t19851818
  %17179 = sext i32 %t10081829 to i64
  %17180 = getelementptr inbounds i16, i16* %read_input784, i64 %17179
  %17181 = getelementptr inbounds i16, i16* %17180, i64 1
  %17182 = bitcast i16* %17181 to <16 x i16>*
  %17183 = load <16 x i16>, <16 x i16>* %17182, align 2, !tbaa !396
  %17184 = getelementptr inbounds i16, i16* %17180, i64 17
  %17185 = bitcast i16* %17184 to <16 x i16>*
  %17186 = load <16 x i16>, <16 x i16>* %17185, align 2, !tbaa !396
  %17187 = getelementptr inbounds i16, i16* %17180, i64 2
  %17188 = bitcast i16* %17187 to <16 x i16>*
  %17189 = load <16 x i16>, <16 x i16>* %17188, align 2, !tbaa !396
  %17190 = getelementptr inbounds i16, i16* %17180, i64 18
  %17191 = bitcast i16* %17190 to <16 x i16>*
  %17192 = load <16 x i16>, <16 x i16>* %17191, align 2, !tbaa !396
  %17193 = bitcast i16* %17180 to <16 x i16>*
  %17194 = load <16 x i16>, <16 x i16>* %17193, align 2, !tbaa !396
  %17195 = getelementptr inbounds i16, i16* %17180, i64 16
  %17196 = bitcast i16* %17195 to <16 x i16>*
  %17197 = load <16 x i16>, <16 x i16>* %17196, align 2, !tbaa !396
  %17198 = add <16 x i16> %17189, %17183
  %17199 = add <16 x i16> %17198, %17194
  %17200 = add <16 x i16> %17192, %17186
  %17201 = add <16 x i16> %17200, %17197
  %17202 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17199, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17203 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17201, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17204 = shufflevector <16 x i16> %17202, <16 x i16> %17203, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17205 = lshr <32 x i16> %17204, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17206 = shufflevector <32 x i16> %17205, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17207 = shl nsw i64 %17159, 5
  %17208 = add nsw i64 %17207, %17060
  %17209 = getelementptr inbounds i16, i16* %blur_x841, i64 %17208
  %17210 = bitcast i16* %17209 to <16 x i16>*
  store <16 x i16> %17206, <16 x i16>* %17210, align 2, !tbaa !399
  %17211 = shufflevector <32 x i16> %17205, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17212 = getelementptr inbounds i16, i16* %17209, i64 16
  %17213 = bitcast i16* %17212 to <16 x i16>*
  store <16 x i16> %17211, <16 x i16>* %17213, align 2, !tbaa !399
  br label %"consume blur_x1830"

"consume blur_x1830":                             ; preds = %"for blur_y.s0.x.x.rebased1821.consume blur_x1830_crit_edge", %"produce blur_x1828"
  %.pre-phi3380 = phi i64 [ %.pre3379, %"for blur_y.s0.x.x.rebased1821.consume blur_x1830_crit_edge" ], [ %17207, %"produce blur_x1828" ]
  %17214 = add nsw i64 %17063, %.pre-phi3380
  %17215 = getelementptr inbounds i16, i16* %blur_x841, i64 %17214
  %17216 = bitcast i16* %17215 to <16 x i16>*
  %17217 = load <16 x i16>, <16 x i16>* %17216, align 2, !tbaa !399
  %17218 = getelementptr inbounds i16, i16* %17215, i64 16
  %17219 = bitcast i16* %17218 to <16 x i16>*
  %17220 = load <16 x i16>, <16 x i16>* %17219, align 2, !tbaa !399
  %17221 = add nsw i64 %17066, %.pre-phi3380
  %17222 = getelementptr inbounds i16, i16* %blur_x841, i64 %17221
  %17223 = bitcast i16* %17222 to <16 x i16>*
  %17224 = load <16 x i16>, <16 x i16>* %17223, align 2, !tbaa !399
  %17225 = getelementptr inbounds i16, i16* %17222, i64 16
  %17226 = bitcast i16* %17225 to <16 x i16>*
  %17227 = load <16 x i16>, <16 x i16>* %17226, align 2, !tbaa !399
  %17228 = add nsw i64 %17069, %.pre-phi3380
  %17229 = getelementptr inbounds i16, i16* %blur_x841, i64 %17228
  %17230 = bitcast i16* %17229 to <16 x i16>*
  %17231 = load <16 x i16>, <16 x i16>* %17230, align 2, !tbaa !399
  %17232 = getelementptr inbounds i16, i16* %17229, i64 16
  %17233 = bitcast i16* %17232 to <16 x i16>*
  %17234 = load <16 x i16>, <16 x i16>* %17233, align 2, !tbaa !399
  %17235 = add <16 x i16> %17224, %17217
  %17236 = add <16 x i16> %17235, %17231
  %17237 = add <16 x i16> %17227, %17220
  %17238 = add <16 x i16> %17237, %17234
  %17239 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17236, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17240 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17238, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17241 = shufflevector <16 x i16> %17239, <16 x i16> %17240, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17242 = lshr <32 x i16> %17241, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17243 = shufflevector <32 x i16> %17242, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17244 = add nsw i64 %17073, %.pre-phi3380
  %17245 = getelementptr inbounds i16, i16* %255, i64 %17244
  %17246 = bitcast i16* %17245 to <16 x i16>*
  store <16 x i16> %17243, <16 x i16>* %17246, align 2, !tbaa !401
  %17247 = shufflevector <32 x i16> %17242, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17248 = getelementptr inbounds i16, i16* %17245, i64 16
  %17249 = bitcast i16* %17248 to <16 x i16>*
  store <16 x i16> %17247, <16 x i16>* %17249, align 2, !tbaa !401
  %indvars.iv.next3211 = add nuw nsw i64 %indvars.iv3210, 1
  %.not2458 = icmp eq i64 %indvars.iv.next3211, %370
  br i1 %.not2458, label %"end for blur_y.s0.x.x.rebased1822", label %"for blur_y.s0.x.x.rebased1821"

"for blur_y.s0.x.x.rebased1838":                  ; preds = %"for blur_y.s0.x.x.rebased1838.preheader", %"consume blur_x1848"
  %blur_y.s0.x.x.rebased1840 = phi i32 [ %17328, %"consume blur_x1848" ], [ 0, %"for blur_y.s0.x.x.rebased1838.preheader" ]
  %17250 = add nsw i32 %blur_y.s0.x.x.rebased1840, %t1582776
  %a551 = shl nsw i32 %17250, 5
  %17251 = icmp sgt i32 %a327, %a551
  %b557 = select i1 %17251, i32 %a551, i32 %a327
  %17252 = icmp slt i32 %17250, 1
  %17253 = icmp sgt i32 %194, %a551
  %17254 = or i1 %17252, %17253
  br i1 %17254, label %"produce blur_x1845", label %"consume blur_x1848"

"end for blur_y.s0.x.x.rebased1839":              ; preds = %"consume blur_x1848", %"end for blur_y.s0.x.x.rebased1822"
  br i1 %224, label %"produce blur_x1852", label %after_bb1849

"produce blur_x1845":                             ; preds = %"for blur_y.s0.x.x.rebased1838"
  %17255 = icmp slt i32 %b557, %194
  %blur_x.s0.x.v1.base.s1846 = select i1 %17255, i32 %b557, i32 %194
  %t10131847 = add nsw i32 %blur_x.s0.x.v1.base.s1846, %t19851818
  %17256 = sext i32 %t10131847 to i64
  %17257 = getelementptr inbounds i16, i16* %read_input784, i64 %17256
  %17258 = getelementptr inbounds i16, i16* %17257, i64 1
  %17259 = bitcast i16* %17258 to <16 x i16>*
  %17260 = load <16 x i16>, <16 x i16>* %17259, align 2, !tbaa !396
  %17261 = getelementptr inbounds i16, i16* %17257, i64 17
  %17262 = bitcast i16* %17261 to <16 x i16>*
  %17263 = load <16 x i16>, <16 x i16>* %17262, align 2, !tbaa !396
  %17264 = getelementptr inbounds i16, i16* %17257, i64 2
  %17265 = bitcast i16* %17264 to <16 x i16>*
  %17266 = load <16 x i16>, <16 x i16>* %17265, align 2, !tbaa !396
  %17267 = getelementptr inbounds i16, i16* %17257, i64 18
  %17268 = bitcast i16* %17267 to <16 x i16>*
  %17269 = load <16 x i16>, <16 x i16>* %17268, align 2, !tbaa !396
  %17270 = bitcast i16* %17257 to <16 x i16>*
  %17271 = load <16 x i16>, <16 x i16>* %17270, align 2, !tbaa !396
  %17272 = getelementptr inbounds i16, i16* %17257, i64 16
  %17273 = bitcast i16* %17272 to <16 x i16>*
  %17274 = load <16 x i16>, <16 x i16>* %17273, align 2, !tbaa !396
  %17275 = add <16 x i16> %17266, %17260
  %17276 = add <16 x i16> %17275, %17271
  %17277 = add <16 x i16> %17269, %17263
  %17278 = add <16 x i16> %17277, %17274
  %17279 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17276, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17280 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17278, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17281 = shufflevector <16 x i16> %17279, <16 x i16> %17280, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17282 = lshr <32 x i16> %17281, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17283 = shufflevector <32 x i16> %17282, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17284 = sext i32 %blur_x.s0.x.v1.base.s1846 to i64
  %17285 = add nsw i64 %17284, %17165
  %17286 = getelementptr inbounds i16, i16* %blur_x841, i64 %17285
  %17287 = bitcast i16* %17286 to <16 x i16>*
  store <16 x i16> %17283, <16 x i16>* %17287, align 2, !tbaa !399
  %17288 = shufflevector <32 x i16> %17282, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17289 = getelementptr inbounds i16, i16* %17286, i64 16
  %17290 = bitcast i16* %17289 to <16 x i16>*
  store <16 x i16> %17288, <16 x i16>* %17290, align 2, !tbaa !399
  br label %"consume blur_x1848"

"consume blur_x1848":                             ; preds = %"for blur_y.s0.x.x.rebased1838", %"produce blur_x1845"
  %17291 = sext i32 %b557 to i64
  %17292 = add nsw i64 %17168, %17291
  %17293 = getelementptr inbounds i16, i16* %blur_x841, i64 %17292
  %17294 = bitcast i16* %17293 to <16 x i16>*
  %17295 = load <16 x i16>, <16 x i16>* %17294, align 2, !tbaa !399
  %17296 = getelementptr inbounds i16, i16* %17293, i64 16
  %17297 = bitcast i16* %17296 to <16 x i16>*
  %17298 = load <16 x i16>, <16 x i16>* %17297, align 2, !tbaa !399
  %17299 = add nsw i64 %17171, %17291
  %17300 = getelementptr inbounds i16, i16* %blur_x841, i64 %17299
  %17301 = bitcast i16* %17300 to <16 x i16>*
  %17302 = load <16 x i16>, <16 x i16>* %17301, align 2, !tbaa !399
  %17303 = getelementptr inbounds i16, i16* %17300, i64 16
  %17304 = bitcast i16* %17303 to <16 x i16>*
  %17305 = load <16 x i16>, <16 x i16>* %17304, align 2, !tbaa !399
  %17306 = add nsw i64 %17174, %17291
  %17307 = getelementptr inbounds i16, i16* %blur_x841, i64 %17306
  %17308 = bitcast i16* %17307 to <16 x i16>*
  %17309 = load <16 x i16>, <16 x i16>* %17308, align 2, !tbaa !399
  %17310 = getelementptr inbounds i16, i16* %17307, i64 16
  %17311 = bitcast i16* %17310 to <16 x i16>*
  %17312 = load <16 x i16>, <16 x i16>* %17311, align 2, !tbaa !399
  %17313 = add <16 x i16> %17302, %17295
  %17314 = add <16 x i16> %17313, %17309
  %17315 = add <16 x i16> %17305, %17298
  %17316 = add <16 x i16> %17315, %17312
  %17317 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17314, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17318 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17316, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17319 = shufflevector <16 x i16> %17317, <16 x i16> %17318, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17320 = lshr <32 x i16> %17319, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17321 = shufflevector <32 x i16> %17320, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17322 = add nsw i64 %17178, %17291
  %17323 = getelementptr inbounds i16, i16* %255, i64 %17322
  %17324 = bitcast i16* %17323 to <16 x i16>*
  store <16 x i16> %17321, <16 x i16>* %17324, align 2, !tbaa !401
  %17325 = shufflevector <32 x i16> %17320, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17326 = getelementptr inbounds i16, i16* %17323, i64 16
  %17327 = bitcast i16* %17326 to <16 x i16>*
  store <16 x i16> %17325, <16 x i16>* %17327, align 2, !tbaa !401
  %17328 = add nuw nsw i32 %blur_y.s0.x.x.rebased1840, 1
  %.not2457 = icmp eq i32 %17328, %t1639861
  br i1 %.not2457, label %"end for blur_y.s0.x.x.rebased1839", label %"for blur_y.s0.x.x.rebased1838"

after_bb1849:                                     ; preds = %"end for blur_y.s0.x.x.rebased1839", %"produce blur_x1852"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1864.preheader", label %"end for blur_y.s0.x.x.rebased1865", !prof !386

"for blur_y.s0.x.x.rebased1864.preheader":        ; preds = %after_bb1849
  %17329 = sext i32 %t1638848 to i64
  %17330 = zext i32 %.pre-phi3338 to i64
  %17331 = mul nsw i64 %17330, %298
  %17332 = sub nsw i64 %17331, %285
  %17333 = zext i32 %.pre-phi3324 to i64
  %17334 = mul nsw i64 %17333, %298
  %17335 = sub nsw i64 %17334, %285
  %17336 = zext i32 %.pre-phi3332 to i64
  %17337 = mul nsw i64 %17336, %298
  %17338 = sub nsw i64 %17337, %285
  %17339 = sext i32 %a339 to i64
  %17340 = add nsw i64 %17339, 22
  %17341 = mul nsw i64 %17340, %299
  %17342 = add nsw i64 %17341, %302
  br label %"for blur_y.s0.x.x.rebased1864"

"produce blur_x1852":                             ; preds = %"end for blur_y.s0.x.x.rebased1839"
  %17343 = getelementptr inbounds i16, i16* %read_input784, i64 %345
  %17344 = getelementptr inbounds i16, i16* %17343, i64 -31
  %17345 = bitcast i16* %17344 to <16 x i16>*
  %17346 = load <16 x i16>, <16 x i16>* %17345, align 2, !tbaa !396
  %17347 = getelementptr inbounds i16, i16* %17343, i64 -15
  %17348 = bitcast i16* %17347 to <16 x i16>*
  %17349 = load <16 x i16>, <16 x i16>* %17348, align 2, !tbaa !396
  %17350 = getelementptr inbounds i16, i16* %17343, i64 -30
  %17351 = bitcast i16* %17350 to <16 x i16>*
  %17352 = load <16 x i16>, <16 x i16>* %17351, align 2, !tbaa !396
  %17353 = getelementptr inbounds i16, i16* %17343, i64 -14
  %17354 = bitcast i16* %17353 to <16 x i16>*
  %17355 = load <16 x i16>, <16 x i16>* %17354, align 2, !tbaa !396
  %17356 = getelementptr inbounds i16, i16* %17343, i64 -32
  %17357 = bitcast i16* %17356 to <16 x i16>*
  %17358 = load <16 x i16>, <16 x i16>* %17357, align 2, !tbaa !396
  %17359 = getelementptr inbounds i16, i16* %17343, i64 -16
  %17360 = bitcast i16* %17359 to <16 x i16>*
  %17361 = load <16 x i16>, <16 x i16>* %17360, align 2, !tbaa !396
  %17362 = add <16 x i16> %17352, %17346
  %17363 = add <16 x i16> %17362, %17358
  %17364 = add <16 x i16> %17355, %17349
  %17365 = add <16 x i16> %17364, %17361
  %17366 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17363, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17367 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17365, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17368 = shufflevector <16 x i16> %17366, <16 x i16> %17367, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17369 = lshr <32 x i16> %17368, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17370 = shufflevector <32 x i16> %17369, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17371 = zext i32 %.pre-phi3324 to i64
  %17372 = mul nsw i64 %286, %17371
  %17373 = add nsw i64 %288, %17372
  %17374 = getelementptr inbounds i16, i16* %blur_x841, i64 %17373
  %17375 = getelementptr inbounds i16, i16* %17374, i64 -32
  %17376 = bitcast i16* %17375 to <16 x i16>*
  store <16 x i16> %17370, <16 x i16>* %17376, align 2, !tbaa !399
  %17377 = shufflevector <32 x i16> %17369, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17378 = getelementptr inbounds i16, i16* %17374, i64 -16
  %17379 = bitcast i16* %17378 to <16 x i16>*
  store <16 x i16> %17377, <16 x i16>* %17379, align 2, !tbaa !399
  %17380 = zext i32 %.pre-phi3338 to i64
  %17381 = mul nsw i64 %17380, %298
  %17382 = add nsw i64 %17381, %283
  %17383 = getelementptr inbounds i16, i16* %blur_x841, i64 %17382
  %17384 = getelementptr inbounds i16, i16* %17383, i64 -32
  %17385 = bitcast i16* %17384 to <16 x i16>*
  %17386 = load <16 x i16>, <16 x i16>* %17385, align 2, !tbaa !399
  %17387 = getelementptr inbounds i16, i16* %17383, i64 -16
  %17388 = bitcast i16* %17387 to <16 x i16>*
  %17389 = load <16 x i16>, <16 x i16>* %17388, align 2, !tbaa !399
  %17390 = mul nsw i64 %17371, %298
  %17391 = add nsw i64 %17390, %283
  %17392 = getelementptr inbounds i16, i16* %blur_x841, i64 %17391
  %17393 = getelementptr inbounds i16, i16* %17392, i64 -32
  %17394 = bitcast i16* %17393 to <16 x i16>*
  %17395 = load <16 x i16>, <16 x i16>* %17394, align 2, !tbaa !399
  %17396 = getelementptr inbounds i16, i16* %17392, i64 -16
  %17397 = bitcast i16* %17396 to <16 x i16>*
  %17398 = load <16 x i16>, <16 x i16>* %17397, align 2, !tbaa !399
  %17399 = zext i32 %.pre-phi3332 to i64
  %17400 = mul nsw i64 %17399, %298
  %17401 = add nsw i64 %17400, %283
  %17402 = getelementptr inbounds i16, i16* %blur_x841, i64 %17401
  %17403 = getelementptr inbounds i16, i16* %17402, i64 -32
  %17404 = bitcast i16* %17403 to <16 x i16>*
  %17405 = load <16 x i16>, <16 x i16>* %17404, align 2, !tbaa !399
  %17406 = getelementptr inbounds i16, i16* %17402, i64 -16
  %17407 = bitcast i16* %17406 to <16 x i16>*
  %17408 = load <16 x i16>, <16 x i16>* %17407, align 2, !tbaa !399
  %17409 = add <16 x i16> %17395, %17386
  %17410 = add <16 x i16> %17409, %17405
  %17411 = add <16 x i16> %17398, %17389
  %17412 = add <16 x i16> %17411, %17408
  %17413 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17410, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17414 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17412, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17415 = shufflevector <16 x i16> %17413, <16 x i16> %17414, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17416 = lshr <32 x i16> %17415, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17417 = shufflevector <32 x i16> %17416, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17418 = sext i32 %a339 to i64
  %17419 = add nsw i64 %17418, 22
  %17420 = mul nsw i64 %17419, %299
  %17421 = add nsw i64 %301, %17420
  %17422 = getelementptr inbounds i16, i16* %255, i64 %17421
  %17423 = getelementptr inbounds i16, i16* %17422, i64 -32
  %17424 = bitcast i16* %17423 to <16 x i16>*
  store <16 x i16> %17417, <16 x i16>* %17424, align 2, !tbaa !401
  %17425 = shufflevector <32 x i16> %17416, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17426 = getelementptr inbounds i16, i16* %17422, i64 -16
  %17427 = bitcast i16* %17426 to <16 x i16>*
  store <16 x i16> %17425, <16 x i16>* %17427, align 2, !tbaa !401
  br label %after_bb1849

"for blur_y.s0.x.x.rebased1864":                  ; preds = %"for blur_y.s0.x.x.rebased1864.preheader", %"consume blur_x1873"
  %indvars.iv3213 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1864.preheader" ], [ %indvars.iv.next3214, %"consume blur_x1873" ]
  %17428 = add nsw i64 %indvars.iv3213, %290
  %17429 = icmp slt i64 %17428, 1
  %17430 = trunc i64 %17428 to i32
  %17431 = shl nsw i32 %17430, 5
  %17432 = icmp sgt i32 %194, %17431
  %17433 = or i1 %17429, %17432
  br i1 %17433, label %"produce blur_x1871", label %"for blur_y.s0.x.x.rebased1864.consume blur_x1873_crit_edge"

"for blur_y.s0.x.x.rebased1864.consume blur_x1873_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1864"
  %.pre3381 = shl nsw i64 %17428, 5
  br label %"consume blur_x1873"

"end for blur_y.s0.x.x.rebased1865":              ; preds = %"consume blur_x1873", %after_bb1849
  br i1 %291, label %"for blur_y.s0.x.x.rebased1881.preheader", label %"end for blur_y.s0.x.x.rebased1882", !prof !386

"for blur_y.s0.x.x.rebased1881.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1865"
  %17434 = sext i32 %t1638848 to i64
  %17435 = zext i32 %.pre-phi3338 to i64
  %17436 = mul nsw i64 %17435, %298
  %17437 = sub nsw i64 %17436, %285
  %17438 = zext i32 %.pre-phi3324 to i64
  %17439 = mul nsw i64 %17438, %298
  %17440 = sub nsw i64 %17439, %285
  %17441 = zext i32 %.pre-phi3332 to i64
  %17442 = mul nsw i64 %17441, %298
  %17443 = sub nsw i64 %17442, %285
  %17444 = sext i32 %a339 to i64
  %17445 = add nsw i64 %17444, 22
  %17446 = mul nsw i64 %17445, %299
  %17447 = add nsw i64 %17446, %302
  br label %"for blur_y.s0.x.x.rebased1881"

"produce blur_x1871":                             ; preds = %"for blur_y.s0.x.x.rebased1864"
  %t10241872 = add nsw i32 %17431, %t20011861
  %17448 = sext i32 %t10241872 to i64
  %17449 = getelementptr inbounds i16, i16* %read_input784, i64 %17448
  %17450 = getelementptr inbounds i16, i16* %17449, i64 1
  %17451 = bitcast i16* %17450 to <16 x i16>*
  %17452 = load <16 x i16>, <16 x i16>* %17451, align 2, !tbaa !396
  %17453 = getelementptr inbounds i16, i16* %17449, i64 17
  %17454 = bitcast i16* %17453 to <16 x i16>*
  %17455 = load <16 x i16>, <16 x i16>* %17454, align 2, !tbaa !396
  %17456 = getelementptr inbounds i16, i16* %17449, i64 2
  %17457 = bitcast i16* %17456 to <16 x i16>*
  %17458 = load <16 x i16>, <16 x i16>* %17457, align 2, !tbaa !396
  %17459 = getelementptr inbounds i16, i16* %17449, i64 18
  %17460 = bitcast i16* %17459 to <16 x i16>*
  %17461 = load <16 x i16>, <16 x i16>* %17460, align 2, !tbaa !396
  %17462 = bitcast i16* %17449 to <16 x i16>*
  %17463 = load <16 x i16>, <16 x i16>* %17462, align 2, !tbaa !396
  %17464 = getelementptr inbounds i16, i16* %17449, i64 16
  %17465 = bitcast i16* %17464 to <16 x i16>*
  %17466 = load <16 x i16>, <16 x i16>* %17465, align 2, !tbaa !396
  %17467 = add <16 x i16> %17458, %17452
  %17468 = add <16 x i16> %17467, %17463
  %17469 = add <16 x i16> %17461, %17455
  %17470 = add <16 x i16> %17469, %17466
  %17471 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17468, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17472 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17470, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17473 = shufflevector <16 x i16> %17471, <16 x i16> %17472, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17474 = lshr <32 x i16> %17473, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17475 = shufflevector <32 x i16> %17474, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17476 = shl nsw i64 %17428, 5
  %17477 = add nsw i64 %17476, %17329
  %17478 = getelementptr inbounds i16, i16* %blur_x841, i64 %17477
  %17479 = bitcast i16* %17478 to <16 x i16>*
  store <16 x i16> %17475, <16 x i16>* %17479, align 2, !tbaa !399
  %17480 = shufflevector <32 x i16> %17474, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17481 = getelementptr inbounds i16, i16* %17478, i64 16
  %17482 = bitcast i16* %17481 to <16 x i16>*
  store <16 x i16> %17480, <16 x i16>* %17482, align 2, !tbaa !399
  br label %"consume blur_x1873"

"consume blur_x1873":                             ; preds = %"for blur_y.s0.x.x.rebased1864.consume blur_x1873_crit_edge", %"produce blur_x1871"
  %.pre-phi3382 = phi i64 [ %.pre3381, %"for blur_y.s0.x.x.rebased1864.consume blur_x1873_crit_edge" ], [ %17476, %"produce blur_x1871" ]
  %17483 = add nsw i64 %17332, %.pre-phi3382
  %17484 = getelementptr inbounds i16, i16* %blur_x841, i64 %17483
  %17485 = bitcast i16* %17484 to <16 x i16>*
  %17486 = load <16 x i16>, <16 x i16>* %17485, align 2, !tbaa !399
  %17487 = getelementptr inbounds i16, i16* %17484, i64 16
  %17488 = bitcast i16* %17487 to <16 x i16>*
  %17489 = load <16 x i16>, <16 x i16>* %17488, align 2, !tbaa !399
  %17490 = add nsw i64 %17335, %.pre-phi3382
  %17491 = getelementptr inbounds i16, i16* %blur_x841, i64 %17490
  %17492 = bitcast i16* %17491 to <16 x i16>*
  %17493 = load <16 x i16>, <16 x i16>* %17492, align 2, !tbaa !399
  %17494 = getelementptr inbounds i16, i16* %17491, i64 16
  %17495 = bitcast i16* %17494 to <16 x i16>*
  %17496 = load <16 x i16>, <16 x i16>* %17495, align 2, !tbaa !399
  %17497 = add nsw i64 %17338, %.pre-phi3382
  %17498 = getelementptr inbounds i16, i16* %blur_x841, i64 %17497
  %17499 = bitcast i16* %17498 to <16 x i16>*
  %17500 = load <16 x i16>, <16 x i16>* %17499, align 2, !tbaa !399
  %17501 = getelementptr inbounds i16, i16* %17498, i64 16
  %17502 = bitcast i16* %17501 to <16 x i16>*
  %17503 = load <16 x i16>, <16 x i16>* %17502, align 2, !tbaa !399
  %17504 = add <16 x i16> %17493, %17486
  %17505 = add <16 x i16> %17504, %17500
  %17506 = add <16 x i16> %17496, %17489
  %17507 = add <16 x i16> %17506, %17503
  %17508 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17505, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17509 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17507, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17510 = shufflevector <16 x i16> %17508, <16 x i16> %17509, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17511 = lshr <32 x i16> %17510, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17512 = shufflevector <32 x i16> %17511, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17513 = add nsw i64 %17342, %.pre-phi3382
  %17514 = getelementptr inbounds i16, i16* %255, i64 %17513
  %17515 = bitcast i16* %17514 to <16 x i16>*
  store <16 x i16> %17512, <16 x i16>* %17515, align 2, !tbaa !401
  %17516 = shufflevector <32 x i16> %17511, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17517 = getelementptr inbounds i16, i16* %17514, i64 16
  %17518 = bitcast i16* %17517 to <16 x i16>*
  store <16 x i16> %17516, <16 x i16>* %17518, align 2, !tbaa !401
  %indvars.iv.next3214 = add nuw nsw i64 %indvars.iv3213, 1
  %.not2456 = icmp eq i64 %indvars.iv.next3214, %370
  br i1 %.not2456, label %"end for blur_y.s0.x.x.rebased1865", label %"for blur_y.s0.x.x.rebased1864"

"for blur_y.s0.x.x.rebased1881":                  ; preds = %"for blur_y.s0.x.x.rebased1881.preheader", %"consume blur_x1891"
  %blur_y.s0.x.x.rebased1883 = phi i32 [ %17597, %"consume blur_x1891" ], [ 0, %"for blur_y.s0.x.x.rebased1881.preheader" ]
  %17519 = add nsw i32 %blur_y.s0.x.x.rebased1883, %t1582776
  %a558 = shl nsw i32 %17519, 5
  %17520 = icmp sgt i32 %a327, %a558
  %b564 = select i1 %17520, i32 %a558, i32 %a327
  %17521 = icmp slt i32 %17519, 1
  %17522 = icmp sgt i32 %194, %a558
  %17523 = or i1 %17521, %17522
  br i1 %17523, label %"produce blur_x1888", label %"consume blur_x1891"

"end for blur_y.s0.x.x.rebased1882":              ; preds = %"consume blur_x1891", %"end for blur_y.s0.x.x.rebased1865"
  br i1 %224, label %"produce blur_x1895", label %after_bb1892

"produce blur_x1888":                             ; preds = %"for blur_y.s0.x.x.rebased1881"
  %17524 = icmp slt i32 %b564, %194
  %blur_x.s0.x.v1.base.s1889 = select i1 %17524, i32 %b564, i32 %194
  %t10291890 = add nsw i32 %blur_x.s0.x.v1.base.s1889, %t20011861
  %17525 = sext i32 %t10291890 to i64
  %17526 = getelementptr inbounds i16, i16* %read_input784, i64 %17525
  %17527 = getelementptr inbounds i16, i16* %17526, i64 1
  %17528 = bitcast i16* %17527 to <16 x i16>*
  %17529 = load <16 x i16>, <16 x i16>* %17528, align 2, !tbaa !396
  %17530 = getelementptr inbounds i16, i16* %17526, i64 17
  %17531 = bitcast i16* %17530 to <16 x i16>*
  %17532 = load <16 x i16>, <16 x i16>* %17531, align 2, !tbaa !396
  %17533 = getelementptr inbounds i16, i16* %17526, i64 2
  %17534 = bitcast i16* %17533 to <16 x i16>*
  %17535 = load <16 x i16>, <16 x i16>* %17534, align 2, !tbaa !396
  %17536 = getelementptr inbounds i16, i16* %17526, i64 18
  %17537 = bitcast i16* %17536 to <16 x i16>*
  %17538 = load <16 x i16>, <16 x i16>* %17537, align 2, !tbaa !396
  %17539 = bitcast i16* %17526 to <16 x i16>*
  %17540 = load <16 x i16>, <16 x i16>* %17539, align 2, !tbaa !396
  %17541 = getelementptr inbounds i16, i16* %17526, i64 16
  %17542 = bitcast i16* %17541 to <16 x i16>*
  %17543 = load <16 x i16>, <16 x i16>* %17542, align 2, !tbaa !396
  %17544 = add <16 x i16> %17535, %17529
  %17545 = add <16 x i16> %17544, %17540
  %17546 = add <16 x i16> %17538, %17532
  %17547 = add <16 x i16> %17546, %17543
  %17548 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17545, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17549 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17547, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17550 = shufflevector <16 x i16> %17548, <16 x i16> %17549, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17551 = lshr <32 x i16> %17550, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17552 = shufflevector <32 x i16> %17551, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17553 = sext i32 %blur_x.s0.x.v1.base.s1889 to i64
  %17554 = add nsw i64 %17553, %17434
  %17555 = getelementptr inbounds i16, i16* %blur_x841, i64 %17554
  %17556 = bitcast i16* %17555 to <16 x i16>*
  store <16 x i16> %17552, <16 x i16>* %17556, align 2, !tbaa !399
  %17557 = shufflevector <32 x i16> %17551, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17558 = getelementptr inbounds i16, i16* %17555, i64 16
  %17559 = bitcast i16* %17558 to <16 x i16>*
  store <16 x i16> %17557, <16 x i16>* %17559, align 2, !tbaa !399
  br label %"consume blur_x1891"

"consume blur_x1891":                             ; preds = %"for blur_y.s0.x.x.rebased1881", %"produce blur_x1888"
  %17560 = sext i32 %b564 to i64
  %17561 = add nsw i64 %17437, %17560
  %17562 = getelementptr inbounds i16, i16* %blur_x841, i64 %17561
  %17563 = bitcast i16* %17562 to <16 x i16>*
  %17564 = load <16 x i16>, <16 x i16>* %17563, align 2, !tbaa !399
  %17565 = getelementptr inbounds i16, i16* %17562, i64 16
  %17566 = bitcast i16* %17565 to <16 x i16>*
  %17567 = load <16 x i16>, <16 x i16>* %17566, align 2, !tbaa !399
  %17568 = add nsw i64 %17440, %17560
  %17569 = getelementptr inbounds i16, i16* %blur_x841, i64 %17568
  %17570 = bitcast i16* %17569 to <16 x i16>*
  %17571 = load <16 x i16>, <16 x i16>* %17570, align 2, !tbaa !399
  %17572 = getelementptr inbounds i16, i16* %17569, i64 16
  %17573 = bitcast i16* %17572 to <16 x i16>*
  %17574 = load <16 x i16>, <16 x i16>* %17573, align 2, !tbaa !399
  %17575 = add nsw i64 %17443, %17560
  %17576 = getelementptr inbounds i16, i16* %blur_x841, i64 %17575
  %17577 = bitcast i16* %17576 to <16 x i16>*
  %17578 = load <16 x i16>, <16 x i16>* %17577, align 2, !tbaa !399
  %17579 = getelementptr inbounds i16, i16* %17576, i64 16
  %17580 = bitcast i16* %17579 to <16 x i16>*
  %17581 = load <16 x i16>, <16 x i16>* %17580, align 2, !tbaa !399
  %17582 = add <16 x i16> %17571, %17564
  %17583 = add <16 x i16> %17582, %17578
  %17584 = add <16 x i16> %17574, %17567
  %17585 = add <16 x i16> %17584, %17581
  %17586 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17583, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17587 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17585, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17588 = shufflevector <16 x i16> %17586, <16 x i16> %17587, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17589 = lshr <32 x i16> %17588, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17590 = shufflevector <32 x i16> %17589, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17591 = add nsw i64 %17447, %17560
  %17592 = getelementptr inbounds i16, i16* %255, i64 %17591
  %17593 = bitcast i16* %17592 to <16 x i16>*
  store <16 x i16> %17590, <16 x i16>* %17593, align 2, !tbaa !401
  %17594 = shufflevector <32 x i16> %17589, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17595 = getelementptr inbounds i16, i16* %17592, i64 16
  %17596 = bitcast i16* %17595 to <16 x i16>*
  store <16 x i16> %17594, <16 x i16>* %17596, align 2, !tbaa !401
  %17597 = add nuw nsw i32 %blur_y.s0.x.x.rebased1883, 1
  %.not2455 = icmp eq i32 %17597, %t1639861
  br i1 %.not2455, label %"end for blur_y.s0.x.x.rebased1882", label %"for blur_y.s0.x.x.rebased1881"

after_bb1892:                                     ; preds = %"end for blur_y.s0.x.x.rebased1882", %"produce blur_x1895"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1907.preheader", label %"end for blur_y.s0.x.x.rebased1908", !prof !386

"for blur_y.s0.x.x.rebased1907.preheader":        ; preds = %after_bb1892
  %17598 = sext i32 %t1644878 to i64
  %17599 = zext i32 %.pre-phi3324 to i64
  %17600 = mul nsw i64 %17599, %298
  %17601 = sub nsw i64 %17600, %285
  %17602 = zext i32 %.pre-phi3328 to i64
  %17603 = mul nsw i64 %17602, %298
  %17604 = sub nsw i64 %17603, %285
  %17605 = zext i32 %.pre-phi3338 to i64
  %17606 = mul nsw i64 %17605, %298
  %17607 = sub nsw i64 %17606, %285
  %17608 = sext i32 %a339 to i64
  %17609 = add nsw i64 %17608, 23
  %17610 = mul nsw i64 %17609, %299
  %17611 = add nsw i64 %17610, %302
  br label %"for blur_y.s0.x.x.rebased1907"

"produce blur_x1895":                             ; preds = %"end for blur_y.s0.x.x.rebased1882"
  %17612 = getelementptr inbounds i16, i16* %read_input784, i64 %347
  %17613 = getelementptr inbounds i16, i16* %17612, i64 -31
  %17614 = bitcast i16* %17613 to <16 x i16>*
  %17615 = load <16 x i16>, <16 x i16>* %17614, align 2, !tbaa !396
  %17616 = getelementptr inbounds i16, i16* %17612, i64 -15
  %17617 = bitcast i16* %17616 to <16 x i16>*
  %17618 = load <16 x i16>, <16 x i16>* %17617, align 2, !tbaa !396
  %17619 = getelementptr inbounds i16, i16* %17612, i64 -30
  %17620 = bitcast i16* %17619 to <16 x i16>*
  %17621 = load <16 x i16>, <16 x i16>* %17620, align 2, !tbaa !396
  %17622 = getelementptr inbounds i16, i16* %17612, i64 -14
  %17623 = bitcast i16* %17622 to <16 x i16>*
  %17624 = load <16 x i16>, <16 x i16>* %17623, align 2, !tbaa !396
  %17625 = getelementptr inbounds i16, i16* %17612, i64 -32
  %17626 = bitcast i16* %17625 to <16 x i16>*
  %17627 = load <16 x i16>, <16 x i16>* %17626, align 2, !tbaa !396
  %17628 = getelementptr inbounds i16, i16* %17612, i64 -16
  %17629 = bitcast i16* %17628 to <16 x i16>*
  %17630 = load <16 x i16>, <16 x i16>* %17629, align 2, !tbaa !396
  %17631 = add <16 x i16> %17621, %17615
  %17632 = add <16 x i16> %17631, %17627
  %17633 = add <16 x i16> %17624, %17618
  %17634 = add <16 x i16> %17633, %17630
  %17635 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17632, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17636 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17634, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17637 = shufflevector <16 x i16> %17635, <16 x i16> %17636, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17638 = lshr <32 x i16> %17637, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17639 = shufflevector <32 x i16> %17638, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17640 = zext i32 %.pre-phi3328 to i64
  %17641 = mul nsw i64 %286, %17640
  %17642 = add nsw i64 %288, %17641
  %17643 = getelementptr inbounds i16, i16* %blur_x841, i64 %17642
  %17644 = getelementptr inbounds i16, i16* %17643, i64 -32
  %17645 = bitcast i16* %17644 to <16 x i16>*
  store <16 x i16> %17639, <16 x i16>* %17645, align 2, !tbaa !399
  %17646 = shufflevector <32 x i16> %17638, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17647 = getelementptr inbounds i16, i16* %17643, i64 -16
  %17648 = bitcast i16* %17647 to <16 x i16>*
  store <16 x i16> %17646, <16 x i16>* %17648, align 2, !tbaa !399
  %17649 = zext i32 %.pre-phi3324 to i64
  %17650 = mul nsw i64 %17649, %298
  %17651 = add nsw i64 %17650, %283
  %17652 = getelementptr inbounds i16, i16* %blur_x841, i64 %17651
  %17653 = getelementptr inbounds i16, i16* %17652, i64 -32
  %17654 = bitcast i16* %17653 to <16 x i16>*
  %17655 = load <16 x i16>, <16 x i16>* %17654, align 2, !tbaa !399
  %17656 = getelementptr inbounds i16, i16* %17652, i64 -16
  %17657 = bitcast i16* %17656 to <16 x i16>*
  %17658 = load <16 x i16>, <16 x i16>* %17657, align 2, !tbaa !399
  %17659 = mul nsw i64 %17640, %298
  %17660 = add nsw i64 %17659, %283
  %17661 = getelementptr inbounds i16, i16* %blur_x841, i64 %17660
  %17662 = getelementptr inbounds i16, i16* %17661, i64 -32
  %17663 = bitcast i16* %17662 to <16 x i16>*
  %17664 = load <16 x i16>, <16 x i16>* %17663, align 2, !tbaa !399
  %17665 = getelementptr inbounds i16, i16* %17661, i64 -16
  %17666 = bitcast i16* %17665 to <16 x i16>*
  %17667 = load <16 x i16>, <16 x i16>* %17666, align 2, !tbaa !399
  %17668 = zext i32 %.pre-phi3338 to i64
  %17669 = mul nsw i64 %17668, %298
  %17670 = add nsw i64 %17669, %283
  %17671 = getelementptr inbounds i16, i16* %blur_x841, i64 %17670
  %17672 = getelementptr inbounds i16, i16* %17671, i64 -32
  %17673 = bitcast i16* %17672 to <16 x i16>*
  %17674 = load <16 x i16>, <16 x i16>* %17673, align 2, !tbaa !399
  %17675 = getelementptr inbounds i16, i16* %17671, i64 -16
  %17676 = bitcast i16* %17675 to <16 x i16>*
  %17677 = load <16 x i16>, <16 x i16>* %17676, align 2, !tbaa !399
  %17678 = add <16 x i16> %17664, %17655
  %17679 = add <16 x i16> %17678, %17674
  %17680 = add <16 x i16> %17667, %17658
  %17681 = add <16 x i16> %17680, %17677
  %17682 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17679, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17683 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17681, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17684 = shufflevector <16 x i16> %17682, <16 x i16> %17683, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17685 = lshr <32 x i16> %17684, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17686 = shufflevector <32 x i16> %17685, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17687 = sext i32 %a339 to i64
  %17688 = add nsw i64 %17687, 23
  %17689 = mul nsw i64 %17688, %299
  %17690 = add nsw i64 %301, %17689
  %17691 = getelementptr inbounds i16, i16* %255, i64 %17690
  %17692 = getelementptr inbounds i16, i16* %17691, i64 -32
  %17693 = bitcast i16* %17692 to <16 x i16>*
  store <16 x i16> %17686, <16 x i16>* %17693, align 2, !tbaa !401
  %17694 = shufflevector <32 x i16> %17685, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17695 = getelementptr inbounds i16, i16* %17691, i64 -16
  %17696 = bitcast i16* %17695 to <16 x i16>*
  store <16 x i16> %17694, <16 x i16>* %17696, align 2, !tbaa !401
  br label %after_bb1892

"for blur_y.s0.x.x.rebased1907":                  ; preds = %"for blur_y.s0.x.x.rebased1907.preheader", %"consume blur_x1916"
  %indvars.iv3216 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1907.preheader" ], [ %indvars.iv.next3217, %"consume blur_x1916" ]
  %17697 = add nsw i64 %indvars.iv3216, %290
  %17698 = icmp slt i64 %17697, 1
  %17699 = trunc i64 %17697 to i32
  %17700 = shl nsw i32 %17699, 5
  %17701 = icmp sgt i32 %194, %17700
  %17702 = or i1 %17698, %17701
  br i1 %17702, label %"produce blur_x1914", label %"for blur_y.s0.x.x.rebased1907.consume blur_x1916_crit_edge"

"for blur_y.s0.x.x.rebased1907.consume blur_x1916_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1907"
  %.pre3383 = shl nsw i64 %17697, 5
  br label %"consume blur_x1916"

"end for blur_y.s0.x.x.rebased1908":              ; preds = %"consume blur_x1916", %after_bb1892
  br i1 %291, label %"for blur_y.s0.x.x.rebased1924.preheader", label %"end for blur_y.s0.x.x.rebased1925", !prof !386

"for blur_y.s0.x.x.rebased1924.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1908"
  %17703 = sext i32 %t1644878 to i64
  %17704 = zext i32 %.pre-phi3324 to i64
  %17705 = mul nsw i64 %17704, %298
  %17706 = sub nsw i64 %17705, %285
  %17707 = zext i32 %.pre-phi3328 to i64
  %17708 = mul nsw i64 %17707, %298
  %17709 = sub nsw i64 %17708, %285
  %17710 = zext i32 %.pre-phi3338 to i64
  %17711 = mul nsw i64 %17710, %298
  %17712 = sub nsw i64 %17711, %285
  %17713 = sext i32 %a339 to i64
  %17714 = add nsw i64 %17713, 23
  %17715 = mul nsw i64 %17714, %299
  %17716 = add nsw i64 %17715, %302
  br label %"for blur_y.s0.x.x.rebased1924"

"produce blur_x1914":                             ; preds = %"for blur_y.s0.x.x.rebased1907"
  %t10401915 = add nsw i32 %17700, %t20171904
  %17717 = sext i32 %t10401915 to i64
  %17718 = getelementptr inbounds i16, i16* %read_input784, i64 %17717
  %17719 = getelementptr inbounds i16, i16* %17718, i64 1
  %17720 = bitcast i16* %17719 to <16 x i16>*
  %17721 = load <16 x i16>, <16 x i16>* %17720, align 2, !tbaa !396
  %17722 = getelementptr inbounds i16, i16* %17718, i64 17
  %17723 = bitcast i16* %17722 to <16 x i16>*
  %17724 = load <16 x i16>, <16 x i16>* %17723, align 2, !tbaa !396
  %17725 = getelementptr inbounds i16, i16* %17718, i64 2
  %17726 = bitcast i16* %17725 to <16 x i16>*
  %17727 = load <16 x i16>, <16 x i16>* %17726, align 2, !tbaa !396
  %17728 = getelementptr inbounds i16, i16* %17718, i64 18
  %17729 = bitcast i16* %17728 to <16 x i16>*
  %17730 = load <16 x i16>, <16 x i16>* %17729, align 2, !tbaa !396
  %17731 = bitcast i16* %17718 to <16 x i16>*
  %17732 = load <16 x i16>, <16 x i16>* %17731, align 2, !tbaa !396
  %17733 = getelementptr inbounds i16, i16* %17718, i64 16
  %17734 = bitcast i16* %17733 to <16 x i16>*
  %17735 = load <16 x i16>, <16 x i16>* %17734, align 2, !tbaa !396
  %17736 = add <16 x i16> %17727, %17721
  %17737 = add <16 x i16> %17736, %17732
  %17738 = add <16 x i16> %17730, %17724
  %17739 = add <16 x i16> %17738, %17735
  %17740 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17737, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17741 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17739, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17742 = shufflevector <16 x i16> %17740, <16 x i16> %17741, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17743 = lshr <32 x i16> %17742, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17744 = shufflevector <32 x i16> %17743, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17745 = shl nsw i64 %17697, 5
  %17746 = add nsw i64 %17745, %17598
  %17747 = getelementptr inbounds i16, i16* %blur_x841, i64 %17746
  %17748 = bitcast i16* %17747 to <16 x i16>*
  store <16 x i16> %17744, <16 x i16>* %17748, align 2, !tbaa !399
  %17749 = shufflevector <32 x i16> %17743, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17750 = getelementptr inbounds i16, i16* %17747, i64 16
  %17751 = bitcast i16* %17750 to <16 x i16>*
  store <16 x i16> %17749, <16 x i16>* %17751, align 2, !tbaa !399
  br label %"consume blur_x1916"

"consume blur_x1916":                             ; preds = %"for blur_y.s0.x.x.rebased1907.consume blur_x1916_crit_edge", %"produce blur_x1914"
  %.pre-phi3384 = phi i64 [ %.pre3383, %"for blur_y.s0.x.x.rebased1907.consume blur_x1916_crit_edge" ], [ %17745, %"produce blur_x1914" ]
  %17752 = add nsw i64 %17601, %.pre-phi3384
  %17753 = getelementptr inbounds i16, i16* %blur_x841, i64 %17752
  %17754 = bitcast i16* %17753 to <16 x i16>*
  %17755 = load <16 x i16>, <16 x i16>* %17754, align 2, !tbaa !399
  %17756 = getelementptr inbounds i16, i16* %17753, i64 16
  %17757 = bitcast i16* %17756 to <16 x i16>*
  %17758 = load <16 x i16>, <16 x i16>* %17757, align 2, !tbaa !399
  %17759 = add nsw i64 %17604, %.pre-phi3384
  %17760 = getelementptr inbounds i16, i16* %blur_x841, i64 %17759
  %17761 = bitcast i16* %17760 to <16 x i16>*
  %17762 = load <16 x i16>, <16 x i16>* %17761, align 2, !tbaa !399
  %17763 = getelementptr inbounds i16, i16* %17760, i64 16
  %17764 = bitcast i16* %17763 to <16 x i16>*
  %17765 = load <16 x i16>, <16 x i16>* %17764, align 2, !tbaa !399
  %17766 = add nsw i64 %17607, %.pre-phi3384
  %17767 = getelementptr inbounds i16, i16* %blur_x841, i64 %17766
  %17768 = bitcast i16* %17767 to <16 x i16>*
  %17769 = load <16 x i16>, <16 x i16>* %17768, align 2, !tbaa !399
  %17770 = getelementptr inbounds i16, i16* %17767, i64 16
  %17771 = bitcast i16* %17770 to <16 x i16>*
  %17772 = load <16 x i16>, <16 x i16>* %17771, align 2, !tbaa !399
  %17773 = add <16 x i16> %17762, %17755
  %17774 = add <16 x i16> %17773, %17769
  %17775 = add <16 x i16> %17765, %17758
  %17776 = add <16 x i16> %17775, %17772
  %17777 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17774, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17778 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17776, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17779 = shufflevector <16 x i16> %17777, <16 x i16> %17778, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17780 = lshr <32 x i16> %17779, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17781 = shufflevector <32 x i16> %17780, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17782 = add nsw i64 %17611, %.pre-phi3384
  %17783 = getelementptr inbounds i16, i16* %255, i64 %17782
  %17784 = bitcast i16* %17783 to <16 x i16>*
  store <16 x i16> %17781, <16 x i16>* %17784, align 2, !tbaa !401
  %17785 = shufflevector <32 x i16> %17780, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17786 = getelementptr inbounds i16, i16* %17783, i64 16
  %17787 = bitcast i16* %17786 to <16 x i16>*
  store <16 x i16> %17785, <16 x i16>* %17787, align 2, !tbaa !401
  %indvars.iv.next3217 = add nuw nsw i64 %indvars.iv3216, 1
  %.not2454 = icmp eq i64 %indvars.iv.next3217, %370
  br i1 %.not2454, label %"end for blur_y.s0.x.x.rebased1908", label %"for blur_y.s0.x.x.rebased1907"

"for blur_y.s0.x.x.rebased1924":                  ; preds = %"for blur_y.s0.x.x.rebased1924.preheader", %"consume blur_x1934"
  %blur_y.s0.x.x.rebased1926 = phi i32 [ %17866, %"consume blur_x1934" ], [ 0, %"for blur_y.s0.x.x.rebased1924.preheader" ]
  %17788 = add nsw i32 %blur_y.s0.x.x.rebased1926, %t1582776
  %a565 = shl nsw i32 %17788, 5
  %17789 = icmp sgt i32 %a327, %a565
  %b571 = select i1 %17789, i32 %a565, i32 %a327
  %17790 = icmp slt i32 %17788, 1
  %17791 = icmp sgt i32 %194, %a565
  %17792 = or i1 %17790, %17791
  br i1 %17792, label %"produce blur_x1931", label %"consume blur_x1934"

"end for blur_y.s0.x.x.rebased1925":              ; preds = %"consume blur_x1934", %"end for blur_y.s0.x.x.rebased1908"
  br i1 %224, label %"produce blur_x1938", label %after_bb1935

"produce blur_x1931":                             ; preds = %"for blur_y.s0.x.x.rebased1924"
  %17793 = icmp slt i32 %b571, %194
  %blur_x.s0.x.v1.base.s1932 = select i1 %17793, i32 %b571, i32 %194
  %t10451933 = add nsw i32 %blur_x.s0.x.v1.base.s1932, %t20171904
  %17794 = sext i32 %t10451933 to i64
  %17795 = getelementptr inbounds i16, i16* %read_input784, i64 %17794
  %17796 = getelementptr inbounds i16, i16* %17795, i64 1
  %17797 = bitcast i16* %17796 to <16 x i16>*
  %17798 = load <16 x i16>, <16 x i16>* %17797, align 2, !tbaa !396
  %17799 = getelementptr inbounds i16, i16* %17795, i64 17
  %17800 = bitcast i16* %17799 to <16 x i16>*
  %17801 = load <16 x i16>, <16 x i16>* %17800, align 2, !tbaa !396
  %17802 = getelementptr inbounds i16, i16* %17795, i64 2
  %17803 = bitcast i16* %17802 to <16 x i16>*
  %17804 = load <16 x i16>, <16 x i16>* %17803, align 2, !tbaa !396
  %17805 = getelementptr inbounds i16, i16* %17795, i64 18
  %17806 = bitcast i16* %17805 to <16 x i16>*
  %17807 = load <16 x i16>, <16 x i16>* %17806, align 2, !tbaa !396
  %17808 = bitcast i16* %17795 to <16 x i16>*
  %17809 = load <16 x i16>, <16 x i16>* %17808, align 2, !tbaa !396
  %17810 = getelementptr inbounds i16, i16* %17795, i64 16
  %17811 = bitcast i16* %17810 to <16 x i16>*
  %17812 = load <16 x i16>, <16 x i16>* %17811, align 2, !tbaa !396
  %17813 = add <16 x i16> %17804, %17798
  %17814 = add <16 x i16> %17813, %17809
  %17815 = add <16 x i16> %17807, %17801
  %17816 = add <16 x i16> %17815, %17812
  %17817 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17814, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17818 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17816, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17819 = shufflevector <16 x i16> %17817, <16 x i16> %17818, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17820 = lshr <32 x i16> %17819, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17821 = shufflevector <32 x i16> %17820, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17822 = sext i32 %blur_x.s0.x.v1.base.s1932 to i64
  %17823 = add nsw i64 %17822, %17703
  %17824 = getelementptr inbounds i16, i16* %blur_x841, i64 %17823
  %17825 = bitcast i16* %17824 to <16 x i16>*
  store <16 x i16> %17821, <16 x i16>* %17825, align 2, !tbaa !399
  %17826 = shufflevector <32 x i16> %17820, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17827 = getelementptr inbounds i16, i16* %17824, i64 16
  %17828 = bitcast i16* %17827 to <16 x i16>*
  store <16 x i16> %17826, <16 x i16>* %17828, align 2, !tbaa !399
  br label %"consume blur_x1934"

"consume blur_x1934":                             ; preds = %"for blur_y.s0.x.x.rebased1924", %"produce blur_x1931"
  %17829 = sext i32 %b571 to i64
  %17830 = add nsw i64 %17706, %17829
  %17831 = getelementptr inbounds i16, i16* %blur_x841, i64 %17830
  %17832 = bitcast i16* %17831 to <16 x i16>*
  %17833 = load <16 x i16>, <16 x i16>* %17832, align 2, !tbaa !399
  %17834 = getelementptr inbounds i16, i16* %17831, i64 16
  %17835 = bitcast i16* %17834 to <16 x i16>*
  %17836 = load <16 x i16>, <16 x i16>* %17835, align 2, !tbaa !399
  %17837 = add nsw i64 %17709, %17829
  %17838 = getelementptr inbounds i16, i16* %blur_x841, i64 %17837
  %17839 = bitcast i16* %17838 to <16 x i16>*
  %17840 = load <16 x i16>, <16 x i16>* %17839, align 2, !tbaa !399
  %17841 = getelementptr inbounds i16, i16* %17838, i64 16
  %17842 = bitcast i16* %17841 to <16 x i16>*
  %17843 = load <16 x i16>, <16 x i16>* %17842, align 2, !tbaa !399
  %17844 = add nsw i64 %17712, %17829
  %17845 = getelementptr inbounds i16, i16* %blur_x841, i64 %17844
  %17846 = bitcast i16* %17845 to <16 x i16>*
  %17847 = load <16 x i16>, <16 x i16>* %17846, align 2, !tbaa !399
  %17848 = getelementptr inbounds i16, i16* %17845, i64 16
  %17849 = bitcast i16* %17848 to <16 x i16>*
  %17850 = load <16 x i16>, <16 x i16>* %17849, align 2, !tbaa !399
  %17851 = add <16 x i16> %17840, %17833
  %17852 = add <16 x i16> %17851, %17847
  %17853 = add <16 x i16> %17843, %17836
  %17854 = add <16 x i16> %17853, %17850
  %17855 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17852, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17856 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17854, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17857 = shufflevector <16 x i16> %17855, <16 x i16> %17856, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17858 = lshr <32 x i16> %17857, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17859 = shufflevector <32 x i16> %17858, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17860 = add nsw i64 %17716, %17829
  %17861 = getelementptr inbounds i16, i16* %255, i64 %17860
  %17862 = bitcast i16* %17861 to <16 x i16>*
  store <16 x i16> %17859, <16 x i16>* %17862, align 2, !tbaa !401
  %17863 = shufflevector <32 x i16> %17858, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17864 = getelementptr inbounds i16, i16* %17861, i64 16
  %17865 = bitcast i16* %17864 to <16 x i16>*
  store <16 x i16> %17863, <16 x i16>* %17865, align 2, !tbaa !401
  %17866 = add nuw nsw i32 %blur_y.s0.x.x.rebased1926, 1
  %.not2453 = icmp eq i32 %17866, %t1639861
  br i1 %.not2453, label %"end for blur_y.s0.x.x.rebased1925", label %"for blur_y.s0.x.x.rebased1924"

after_bb1935:                                     ; preds = %"end for blur_y.s0.x.x.rebased1925", %"produce blur_x1938"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1950.preheader", label %"end for blur_y.s0.x.x.rebased1951", !prof !386

"for blur_y.s0.x.x.rebased1950.preheader":        ; preds = %after_bb1935
  %17867 = sext i32 %t1650914 to i64
  %17868 = zext i32 %.pre-phi3328 to i64
  %17869 = mul nsw i64 %17868, %298
  %17870 = sub nsw i64 %17869, %285
  %17871 = zext i32 %.pre-phi3332 to i64
  %17872 = mul nsw i64 %17871, %298
  %17873 = sub nsw i64 %17872, %285
  %17874 = zext i32 %.pre-phi3324 to i64
  %17875 = mul nsw i64 %17874, %298
  %17876 = sub nsw i64 %17875, %285
  %17877 = sext i32 %a339 to i64
  %17878 = add nsw i64 %17877, 24
  %17879 = mul nsw i64 %17878, %299
  %17880 = add nsw i64 %17879, %302
  br label %"for blur_y.s0.x.x.rebased1950"

"produce blur_x1938":                             ; preds = %"end for blur_y.s0.x.x.rebased1925"
  %17881 = getelementptr inbounds i16, i16* %read_input784, i64 %349
  %17882 = getelementptr inbounds i16, i16* %17881, i64 -31
  %17883 = bitcast i16* %17882 to <16 x i16>*
  %17884 = load <16 x i16>, <16 x i16>* %17883, align 2, !tbaa !396
  %17885 = getelementptr inbounds i16, i16* %17881, i64 -15
  %17886 = bitcast i16* %17885 to <16 x i16>*
  %17887 = load <16 x i16>, <16 x i16>* %17886, align 2, !tbaa !396
  %17888 = getelementptr inbounds i16, i16* %17881, i64 -30
  %17889 = bitcast i16* %17888 to <16 x i16>*
  %17890 = load <16 x i16>, <16 x i16>* %17889, align 2, !tbaa !396
  %17891 = getelementptr inbounds i16, i16* %17881, i64 -14
  %17892 = bitcast i16* %17891 to <16 x i16>*
  %17893 = load <16 x i16>, <16 x i16>* %17892, align 2, !tbaa !396
  %17894 = getelementptr inbounds i16, i16* %17881, i64 -32
  %17895 = bitcast i16* %17894 to <16 x i16>*
  %17896 = load <16 x i16>, <16 x i16>* %17895, align 2, !tbaa !396
  %17897 = getelementptr inbounds i16, i16* %17881, i64 -16
  %17898 = bitcast i16* %17897 to <16 x i16>*
  %17899 = load <16 x i16>, <16 x i16>* %17898, align 2, !tbaa !396
  %17900 = add <16 x i16> %17890, %17884
  %17901 = add <16 x i16> %17900, %17896
  %17902 = add <16 x i16> %17893, %17887
  %17903 = add <16 x i16> %17902, %17899
  %17904 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17901, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17905 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17903, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17906 = shufflevector <16 x i16> %17904, <16 x i16> %17905, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17907 = lshr <32 x i16> %17906, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17908 = shufflevector <32 x i16> %17907, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17909 = zext i32 %.pre-phi3332 to i64
  %17910 = mul nsw i64 %286, %17909
  %17911 = add nsw i64 %288, %17910
  %17912 = getelementptr inbounds i16, i16* %blur_x841, i64 %17911
  %17913 = getelementptr inbounds i16, i16* %17912, i64 -32
  %17914 = bitcast i16* %17913 to <16 x i16>*
  store <16 x i16> %17908, <16 x i16>* %17914, align 2, !tbaa !399
  %17915 = shufflevector <32 x i16> %17907, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17916 = getelementptr inbounds i16, i16* %17912, i64 -16
  %17917 = bitcast i16* %17916 to <16 x i16>*
  store <16 x i16> %17915, <16 x i16>* %17917, align 2, !tbaa !399
  %17918 = zext i32 %.pre-phi3328 to i64
  %17919 = mul nsw i64 %17918, %298
  %17920 = add nsw i64 %17919, %283
  %17921 = getelementptr inbounds i16, i16* %blur_x841, i64 %17920
  %17922 = getelementptr inbounds i16, i16* %17921, i64 -32
  %17923 = bitcast i16* %17922 to <16 x i16>*
  %17924 = load <16 x i16>, <16 x i16>* %17923, align 2, !tbaa !399
  %17925 = getelementptr inbounds i16, i16* %17921, i64 -16
  %17926 = bitcast i16* %17925 to <16 x i16>*
  %17927 = load <16 x i16>, <16 x i16>* %17926, align 2, !tbaa !399
  %17928 = mul nsw i64 %17909, %298
  %17929 = add nsw i64 %17928, %283
  %17930 = getelementptr inbounds i16, i16* %blur_x841, i64 %17929
  %17931 = getelementptr inbounds i16, i16* %17930, i64 -32
  %17932 = bitcast i16* %17931 to <16 x i16>*
  %17933 = load <16 x i16>, <16 x i16>* %17932, align 2, !tbaa !399
  %17934 = getelementptr inbounds i16, i16* %17930, i64 -16
  %17935 = bitcast i16* %17934 to <16 x i16>*
  %17936 = load <16 x i16>, <16 x i16>* %17935, align 2, !tbaa !399
  %17937 = zext i32 %.pre-phi3324 to i64
  %17938 = mul nsw i64 %17937, %298
  %17939 = add nsw i64 %17938, %283
  %17940 = getelementptr inbounds i16, i16* %blur_x841, i64 %17939
  %17941 = getelementptr inbounds i16, i16* %17940, i64 -32
  %17942 = bitcast i16* %17941 to <16 x i16>*
  %17943 = load <16 x i16>, <16 x i16>* %17942, align 2, !tbaa !399
  %17944 = getelementptr inbounds i16, i16* %17940, i64 -16
  %17945 = bitcast i16* %17944 to <16 x i16>*
  %17946 = load <16 x i16>, <16 x i16>* %17945, align 2, !tbaa !399
  %17947 = add <16 x i16> %17933, %17924
  %17948 = add <16 x i16> %17947, %17943
  %17949 = add <16 x i16> %17936, %17927
  %17950 = add <16 x i16> %17949, %17946
  %17951 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17948, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17952 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %17950, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %17953 = shufflevector <16 x i16> %17951, <16 x i16> %17952, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17954 = lshr <32 x i16> %17953, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %17955 = shufflevector <32 x i16> %17954, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %17956 = sext i32 %a339 to i64
  %17957 = add nsw i64 %17956, 24
  %17958 = mul nsw i64 %17957, %299
  %17959 = add nsw i64 %301, %17958
  %17960 = getelementptr inbounds i16, i16* %255, i64 %17959
  %17961 = getelementptr inbounds i16, i16* %17960, i64 -32
  %17962 = bitcast i16* %17961 to <16 x i16>*
  store <16 x i16> %17955, <16 x i16>* %17962, align 2, !tbaa !401
  %17963 = shufflevector <32 x i16> %17954, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %17964 = getelementptr inbounds i16, i16* %17960, i64 -16
  %17965 = bitcast i16* %17964 to <16 x i16>*
  store <16 x i16> %17963, <16 x i16>* %17965, align 2, !tbaa !401
  br label %after_bb1935

"for blur_y.s0.x.x.rebased1950":                  ; preds = %"for blur_y.s0.x.x.rebased1950.preheader", %"consume blur_x1959"
  %indvars.iv3219 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1950.preheader" ], [ %indvars.iv.next3220, %"consume blur_x1959" ]
  %17966 = add nsw i64 %indvars.iv3219, %290
  %17967 = icmp slt i64 %17966, 1
  %17968 = trunc i64 %17966 to i32
  %17969 = shl nsw i32 %17968, 5
  %17970 = icmp sgt i32 %194, %17969
  %17971 = or i1 %17967, %17970
  br i1 %17971, label %"produce blur_x1957", label %"for blur_y.s0.x.x.rebased1950.consume blur_x1959_crit_edge"

"for blur_y.s0.x.x.rebased1950.consume blur_x1959_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1950"
  %.pre3385 = shl nsw i64 %17966, 5
  br label %"consume blur_x1959"

"end for blur_y.s0.x.x.rebased1951":              ; preds = %"consume blur_x1959", %after_bb1935
  br i1 %291, label %"for blur_y.s0.x.x.rebased1967.preheader", label %"end for blur_y.s0.x.x.rebased1968", !prof !386

"for blur_y.s0.x.x.rebased1967.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1951"
  %17972 = sext i32 %t1650914 to i64
  %17973 = zext i32 %.pre-phi3328 to i64
  %17974 = mul nsw i64 %17973, %298
  %17975 = sub nsw i64 %17974, %285
  %17976 = zext i32 %.pre-phi3332 to i64
  %17977 = mul nsw i64 %17976, %298
  %17978 = sub nsw i64 %17977, %285
  %17979 = zext i32 %.pre-phi3324 to i64
  %17980 = mul nsw i64 %17979, %298
  %17981 = sub nsw i64 %17980, %285
  %17982 = sext i32 %a339 to i64
  %17983 = add nsw i64 %17982, 24
  %17984 = mul nsw i64 %17983, %299
  %17985 = add nsw i64 %17984, %302
  br label %"for blur_y.s0.x.x.rebased1967"

"produce blur_x1957":                             ; preds = %"for blur_y.s0.x.x.rebased1950"
  %t10561958 = add nsw i32 %17969, %t20331947
  %17986 = sext i32 %t10561958 to i64
  %17987 = getelementptr inbounds i16, i16* %read_input784, i64 %17986
  %17988 = getelementptr inbounds i16, i16* %17987, i64 1
  %17989 = bitcast i16* %17988 to <16 x i16>*
  %17990 = load <16 x i16>, <16 x i16>* %17989, align 2, !tbaa !396
  %17991 = getelementptr inbounds i16, i16* %17987, i64 17
  %17992 = bitcast i16* %17991 to <16 x i16>*
  %17993 = load <16 x i16>, <16 x i16>* %17992, align 2, !tbaa !396
  %17994 = getelementptr inbounds i16, i16* %17987, i64 2
  %17995 = bitcast i16* %17994 to <16 x i16>*
  %17996 = load <16 x i16>, <16 x i16>* %17995, align 2, !tbaa !396
  %17997 = getelementptr inbounds i16, i16* %17987, i64 18
  %17998 = bitcast i16* %17997 to <16 x i16>*
  %17999 = load <16 x i16>, <16 x i16>* %17998, align 2, !tbaa !396
  %18000 = bitcast i16* %17987 to <16 x i16>*
  %18001 = load <16 x i16>, <16 x i16>* %18000, align 2, !tbaa !396
  %18002 = getelementptr inbounds i16, i16* %17987, i64 16
  %18003 = bitcast i16* %18002 to <16 x i16>*
  %18004 = load <16 x i16>, <16 x i16>* %18003, align 2, !tbaa !396
  %18005 = add <16 x i16> %17996, %17990
  %18006 = add <16 x i16> %18005, %18001
  %18007 = add <16 x i16> %17999, %17993
  %18008 = add <16 x i16> %18007, %18004
  %18009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18006, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18010 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18008, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18011 = shufflevector <16 x i16> %18009, <16 x i16> %18010, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18012 = lshr <32 x i16> %18011, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18013 = shufflevector <32 x i16> %18012, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18014 = shl nsw i64 %17966, 5
  %18015 = add nsw i64 %18014, %17867
  %18016 = getelementptr inbounds i16, i16* %blur_x841, i64 %18015
  %18017 = bitcast i16* %18016 to <16 x i16>*
  store <16 x i16> %18013, <16 x i16>* %18017, align 2, !tbaa !399
  %18018 = shufflevector <32 x i16> %18012, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18019 = getelementptr inbounds i16, i16* %18016, i64 16
  %18020 = bitcast i16* %18019 to <16 x i16>*
  store <16 x i16> %18018, <16 x i16>* %18020, align 2, !tbaa !399
  br label %"consume blur_x1959"

"consume blur_x1959":                             ; preds = %"for blur_y.s0.x.x.rebased1950.consume blur_x1959_crit_edge", %"produce blur_x1957"
  %.pre-phi3386 = phi i64 [ %.pre3385, %"for blur_y.s0.x.x.rebased1950.consume blur_x1959_crit_edge" ], [ %18014, %"produce blur_x1957" ]
  %18021 = add nsw i64 %17870, %.pre-phi3386
  %18022 = getelementptr inbounds i16, i16* %blur_x841, i64 %18021
  %18023 = bitcast i16* %18022 to <16 x i16>*
  %18024 = load <16 x i16>, <16 x i16>* %18023, align 2, !tbaa !399
  %18025 = getelementptr inbounds i16, i16* %18022, i64 16
  %18026 = bitcast i16* %18025 to <16 x i16>*
  %18027 = load <16 x i16>, <16 x i16>* %18026, align 2, !tbaa !399
  %18028 = add nsw i64 %17873, %.pre-phi3386
  %18029 = getelementptr inbounds i16, i16* %blur_x841, i64 %18028
  %18030 = bitcast i16* %18029 to <16 x i16>*
  %18031 = load <16 x i16>, <16 x i16>* %18030, align 2, !tbaa !399
  %18032 = getelementptr inbounds i16, i16* %18029, i64 16
  %18033 = bitcast i16* %18032 to <16 x i16>*
  %18034 = load <16 x i16>, <16 x i16>* %18033, align 2, !tbaa !399
  %18035 = add nsw i64 %17876, %.pre-phi3386
  %18036 = getelementptr inbounds i16, i16* %blur_x841, i64 %18035
  %18037 = bitcast i16* %18036 to <16 x i16>*
  %18038 = load <16 x i16>, <16 x i16>* %18037, align 2, !tbaa !399
  %18039 = getelementptr inbounds i16, i16* %18036, i64 16
  %18040 = bitcast i16* %18039 to <16 x i16>*
  %18041 = load <16 x i16>, <16 x i16>* %18040, align 2, !tbaa !399
  %18042 = add <16 x i16> %18031, %18024
  %18043 = add <16 x i16> %18042, %18038
  %18044 = add <16 x i16> %18034, %18027
  %18045 = add <16 x i16> %18044, %18041
  %18046 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18043, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18047 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18045, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18048 = shufflevector <16 x i16> %18046, <16 x i16> %18047, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18049 = lshr <32 x i16> %18048, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18050 = shufflevector <32 x i16> %18049, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18051 = add nsw i64 %17880, %.pre-phi3386
  %18052 = getelementptr inbounds i16, i16* %255, i64 %18051
  %18053 = bitcast i16* %18052 to <16 x i16>*
  store <16 x i16> %18050, <16 x i16>* %18053, align 2, !tbaa !401
  %18054 = shufflevector <32 x i16> %18049, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18055 = getelementptr inbounds i16, i16* %18052, i64 16
  %18056 = bitcast i16* %18055 to <16 x i16>*
  store <16 x i16> %18054, <16 x i16>* %18056, align 2, !tbaa !401
  %indvars.iv.next3220 = add nuw nsw i64 %indvars.iv3219, 1
  %.not2452 = icmp eq i64 %indvars.iv.next3220, %370
  br i1 %.not2452, label %"end for blur_y.s0.x.x.rebased1951", label %"for blur_y.s0.x.x.rebased1950"

"for blur_y.s0.x.x.rebased1967":                  ; preds = %"for blur_y.s0.x.x.rebased1967.preheader", %"consume blur_x1977"
  %blur_y.s0.x.x.rebased1969 = phi i32 [ %18135, %"consume blur_x1977" ], [ 0, %"for blur_y.s0.x.x.rebased1967.preheader" ]
  %18057 = add nsw i32 %blur_y.s0.x.x.rebased1969, %t1582776
  %a572 = shl nsw i32 %18057, 5
  %18058 = icmp sgt i32 %a327, %a572
  %b578 = select i1 %18058, i32 %a572, i32 %a327
  %18059 = icmp slt i32 %18057, 1
  %18060 = icmp sgt i32 %194, %a572
  %18061 = or i1 %18059, %18060
  br i1 %18061, label %"produce blur_x1974", label %"consume blur_x1977"

"end for blur_y.s0.x.x.rebased1968":              ; preds = %"consume blur_x1977", %"end for blur_y.s0.x.x.rebased1951"
  br i1 %224, label %"produce blur_x1981", label %after_bb1978

"produce blur_x1974":                             ; preds = %"for blur_y.s0.x.x.rebased1967"
  %18062 = icmp slt i32 %b578, %194
  %blur_x.s0.x.v1.base.s1975 = select i1 %18062, i32 %b578, i32 %194
  %t10611976 = add nsw i32 %blur_x.s0.x.v1.base.s1975, %t20331947
  %18063 = sext i32 %t10611976 to i64
  %18064 = getelementptr inbounds i16, i16* %read_input784, i64 %18063
  %18065 = getelementptr inbounds i16, i16* %18064, i64 1
  %18066 = bitcast i16* %18065 to <16 x i16>*
  %18067 = load <16 x i16>, <16 x i16>* %18066, align 2, !tbaa !396
  %18068 = getelementptr inbounds i16, i16* %18064, i64 17
  %18069 = bitcast i16* %18068 to <16 x i16>*
  %18070 = load <16 x i16>, <16 x i16>* %18069, align 2, !tbaa !396
  %18071 = getelementptr inbounds i16, i16* %18064, i64 2
  %18072 = bitcast i16* %18071 to <16 x i16>*
  %18073 = load <16 x i16>, <16 x i16>* %18072, align 2, !tbaa !396
  %18074 = getelementptr inbounds i16, i16* %18064, i64 18
  %18075 = bitcast i16* %18074 to <16 x i16>*
  %18076 = load <16 x i16>, <16 x i16>* %18075, align 2, !tbaa !396
  %18077 = bitcast i16* %18064 to <16 x i16>*
  %18078 = load <16 x i16>, <16 x i16>* %18077, align 2, !tbaa !396
  %18079 = getelementptr inbounds i16, i16* %18064, i64 16
  %18080 = bitcast i16* %18079 to <16 x i16>*
  %18081 = load <16 x i16>, <16 x i16>* %18080, align 2, !tbaa !396
  %18082 = add <16 x i16> %18073, %18067
  %18083 = add <16 x i16> %18082, %18078
  %18084 = add <16 x i16> %18076, %18070
  %18085 = add <16 x i16> %18084, %18081
  %18086 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18083, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18087 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18085, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18088 = shufflevector <16 x i16> %18086, <16 x i16> %18087, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18089 = lshr <32 x i16> %18088, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18090 = shufflevector <32 x i16> %18089, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18091 = sext i32 %blur_x.s0.x.v1.base.s1975 to i64
  %18092 = add nsw i64 %18091, %17972
  %18093 = getelementptr inbounds i16, i16* %blur_x841, i64 %18092
  %18094 = bitcast i16* %18093 to <16 x i16>*
  store <16 x i16> %18090, <16 x i16>* %18094, align 2, !tbaa !399
  %18095 = shufflevector <32 x i16> %18089, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18096 = getelementptr inbounds i16, i16* %18093, i64 16
  %18097 = bitcast i16* %18096 to <16 x i16>*
  store <16 x i16> %18095, <16 x i16>* %18097, align 2, !tbaa !399
  br label %"consume blur_x1977"

"consume blur_x1977":                             ; preds = %"for blur_y.s0.x.x.rebased1967", %"produce blur_x1974"
  %18098 = sext i32 %b578 to i64
  %18099 = add nsw i64 %17975, %18098
  %18100 = getelementptr inbounds i16, i16* %blur_x841, i64 %18099
  %18101 = bitcast i16* %18100 to <16 x i16>*
  %18102 = load <16 x i16>, <16 x i16>* %18101, align 2, !tbaa !399
  %18103 = getelementptr inbounds i16, i16* %18100, i64 16
  %18104 = bitcast i16* %18103 to <16 x i16>*
  %18105 = load <16 x i16>, <16 x i16>* %18104, align 2, !tbaa !399
  %18106 = add nsw i64 %17978, %18098
  %18107 = getelementptr inbounds i16, i16* %blur_x841, i64 %18106
  %18108 = bitcast i16* %18107 to <16 x i16>*
  %18109 = load <16 x i16>, <16 x i16>* %18108, align 2, !tbaa !399
  %18110 = getelementptr inbounds i16, i16* %18107, i64 16
  %18111 = bitcast i16* %18110 to <16 x i16>*
  %18112 = load <16 x i16>, <16 x i16>* %18111, align 2, !tbaa !399
  %18113 = add nsw i64 %17981, %18098
  %18114 = getelementptr inbounds i16, i16* %blur_x841, i64 %18113
  %18115 = bitcast i16* %18114 to <16 x i16>*
  %18116 = load <16 x i16>, <16 x i16>* %18115, align 2, !tbaa !399
  %18117 = getelementptr inbounds i16, i16* %18114, i64 16
  %18118 = bitcast i16* %18117 to <16 x i16>*
  %18119 = load <16 x i16>, <16 x i16>* %18118, align 2, !tbaa !399
  %18120 = add <16 x i16> %18109, %18102
  %18121 = add <16 x i16> %18120, %18116
  %18122 = add <16 x i16> %18112, %18105
  %18123 = add <16 x i16> %18122, %18119
  %18124 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18121, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18125 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18123, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18126 = shufflevector <16 x i16> %18124, <16 x i16> %18125, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18127 = lshr <32 x i16> %18126, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18128 = shufflevector <32 x i16> %18127, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18129 = add nsw i64 %17985, %18098
  %18130 = getelementptr inbounds i16, i16* %255, i64 %18129
  %18131 = bitcast i16* %18130 to <16 x i16>*
  store <16 x i16> %18128, <16 x i16>* %18131, align 2, !tbaa !401
  %18132 = shufflevector <32 x i16> %18127, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18133 = getelementptr inbounds i16, i16* %18130, i64 16
  %18134 = bitcast i16* %18133 to <16 x i16>*
  store <16 x i16> %18132, <16 x i16>* %18134, align 2, !tbaa !401
  %18135 = add nuw nsw i32 %blur_y.s0.x.x.rebased1969, 1
  %.not2451 = icmp eq i32 %18135, %t1639861
  br i1 %.not2451, label %"end for blur_y.s0.x.x.rebased1968", label %"for blur_y.s0.x.x.rebased1967"

after_bb1978:                                     ; preds = %"end for blur_y.s0.x.x.rebased1968", %"produce blur_x1981"
  br i1 %289, label %"for blur_y.s0.x.x.rebased1993.preheader", label %"end for blur_y.s0.x.x.rebased1994", !prof !386

"for blur_y.s0.x.x.rebased1993.preheader":        ; preds = %after_bb1978
  %18136 = sext i32 %t1666957 to i64
  %18137 = zext i32 %.pre-phi3332 to i64
  %18138 = mul nsw i64 %18137, %298
  %18139 = sub nsw i64 %18138, %285
  %18140 = zext i32 %.pre-phi3338 to i64
  %18141 = mul nsw i64 %18140, %298
  %18142 = sub nsw i64 %18141, %285
  %18143 = zext i32 %.pre-phi3328 to i64
  %18144 = mul nsw i64 %18143, %298
  %18145 = sub nsw i64 %18144, %285
  %18146 = sext i32 %a339 to i64
  %18147 = add nsw i64 %18146, 25
  %18148 = mul nsw i64 %18147, %299
  %18149 = add nsw i64 %18148, %302
  br label %"for blur_y.s0.x.x.rebased1993"

"produce blur_x1981":                             ; preds = %"end for blur_y.s0.x.x.rebased1968"
  %18150 = getelementptr inbounds i16, i16* %read_input784, i64 %351
  %18151 = getelementptr inbounds i16, i16* %18150, i64 -31
  %18152 = bitcast i16* %18151 to <16 x i16>*
  %18153 = load <16 x i16>, <16 x i16>* %18152, align 2, !tbaa !396
  %18154 = getelementptr inbounds i16, i16* %18150, i64 -15
  %18155 = bitcast i16* %18154 to <16 x i16>*
  %18156 = load <16 x i16>, <16 x i16>* %18155, align 2, !tbaa !396
  %18157 = getelementptr inbounds i16, i16* %18150, i64 -30
  %18158 = bitcast i16* %18157 to <16 x i16>*
  %18159 = load <16 x i16>, <16 x i16>* %18158, align 2, !tbaa !396
  %18160 = getelementptr inbounds i16, i16* %18150, i64 -14
  %18161 = bitcast i16* %18160 to <16 x i16>*
  %18162 = load <16 x i16>, <16 x i16>* %18161, align 2, !tbaa !396
  %18163 = getelementptr inbounds i16, i16* %18150, i64 -32
  %18164 = bitcast i16* %18163 to <16 x i16>*
  %18165 = load <16 x i16>, <16 x i16>* %18164, align 2, !tbaa !396
  %18166 = getelementptr inbounds i16, i16* %18150, i64 -16
  %18167 = bitcast i16* %18166 to <16 x i16>*
  %18168 = load <16 x i16>, <16 x i16>* %18167, align 2, !tbaa !396
  %18169 = add <16 x i16> %18159, %18153
  %18170 = add <16 x i16> %18169, %18165
  %18171 = add <16 x i16> %18162, %18156
  %18172 = add <16 x i16> %18171, %18168
  %18173 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18170, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18174 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18172, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18175 = shufflevector <16 x i16> %18173, <16 x i16> %18174, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18176 = lshr <32 x i16> %18175, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18177 = shufflevector <32 x i16> %18176, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18178 = zext i32 %.pre-phi3338 to i64
  %18179 = mul nsw i64 %286, %18178
  %18180 = add nsw i64 %288, %18179
  %18181 = getelementptr inbounds i16, i16* %blur_x841, i64 %18180
  %18182 = getelementptr inbounds i16, i16* %18181, i64 -32
  %18183 = bitcast i16* %18182 to <16 x i16>*
  store <16 x i16> %18177, <16 x i16>* %18183, align 2, !tbaa !399
  %18184 = shufflevector <32 x i16> %18176, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18185 = getelementptr inbounds i16, i16* %18181, i64 -16
  %18186 = bitcast i16* %18185 to <16 x i16>*
  store <16 x i16> %18184, <16 x i16>* %18186, align 2, !tbaa !399
  %18187 = zext i32 %.pre-phi3332 to i64
  %18188 = mul nsw i64 %18187, %298
  %18189 = add nsw i64 %18188, %283
  %18190 = getelementptr inbounds i16, i16* %blur_x841, i64 %18189
  %18191 = getelementptr inbounds i16, i16* %18190, i64 -32
  %18192 = bitcast i16* %18191 to <16 x i16>*
  %18193 = load <16 x i16>, <16 x i16>* %18192, align 2, !tbaa !399
  %18194 = getelementptr inbounds i16, i16* %18190, i64 -16
  %18195 = bitcast i16* %18194 to <16 x i16>*
  %18196 = load <16 x i16>, <16 x i16>* %18195, align 2, !tbaa !399
  %18197 = mul nsw i64 %18178, %298
  %18198 = add nsw i64 %18197, %283
  %18199 = getelementptr inbounds i16, i16* %blur_x841, i64 %18198
  %18200 = getelementptr inbounds i16, i16* %18199, i64 -32
  %18201 = bitcast i16* %18200 to <16 x i16>*
  %18202 = load <16 x i16>, <16 x i16>* %18201, align 2, !tbaa !399
  %18203 = getelementptr inbounds i16, i16* %18199, i64 -16
  %18204 = bitcast i16* %18203 to <16 x i16>*
  %18205 = load <16 x i16>, <16 x i16>* %18204, align 2, !tbaa !399
  %18206 = zext i32 %.pre-phi3328 to i64
  %18207 = mul nsw i64 %18206, %298
  %18208 = add nsw i64 %18207, %283
  %18209 = getelementptr inbounds i16, i16* %blur_x841, i64 %18208
  %18210 = getelementptr inbounds i16, i16* %18209, i64 -32
  %18211 = bitcast i16* %18210 to <16 x i16>*
  %18212 = load <16 x i16>, <16 x i16>* %18211, align 2, !tbaa !399
  %18213 = getelementptr inbounds i16, i16* %18209, i64 -16
  %18214 = bitcast i16* %18213 to <16 x i16>*
  %18215 = load <16 x i16>, <16 x i16>* %18214, align 2, !tbaa !399
  %18216 = add <16 x i16> %18202, %18193
  %18217 = add <16 x i16> %18216, %18212
  %18218 = add <16 x i16> %18205, %18196
  %18219 = add <16 x i16> %18218, %18215
  %18220 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18217, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18221 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18219, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18222 = shufflevector <16 x i16> %18220, <16 x i16> %18221, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18223 = lshr <32 x i16> %18222, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18224 = shufflevector <32 x i16> %18223, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18225 = sext i32 %a339 to i64
  %18226 = add nsw i64 %18225, 25
  %18227 = mul nsw i64 %18226, %299
  %18228 = add nsw i64 %301, %18227
  %18229 = getelementptr inbounds i16, i16* %255, i64 %18228
  %18230 = getelementptr inbounds i16, i16* %18229, i64 -32
  %18231 = bitcast i16* %18230 to <16 x i16>*
  store <16 x i16> %18224, <16 x i16>* %18231, align 2, !tbaa !401
  %18232 = shufflevector <32 x i16> %18223, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18233 = getelementptr inbounds i16, i16* %18229, i64 -16
  %18234 = bitcast i16* %18233 to <16 x i16>*
  store <16 x i16> %18232, <16 x i16>* %18234, align 2, !tbaa !401
  br label %after_bb1978

"for blur_y.s0.x.x.rebased1993":                  ; preds = %"for blur_y.s0.x.x.rebased1993.preheader", %"consume blur_x2002"
  %indvars.iv3222 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased1993.preheader" ], [ %indvars.iv.next3223, %"consume blur_x2002" ]
  %18235 = add nsw i64 %indvars.iv3222, %290
  %18236 = icmp slt i64 %18235, 1
  %18237 = trunc i64 %18235 to i32
  %18238 = shl nsw i32 %18237, 5
  %18239 = icmp sgt i32 %194, %18238
  %18240 = or i1 %18236, %18239
  br i1 %18240, label %"produce blur_x2000", label %"for blur_y.s0.x.x.rebased1993.consume blur_x2002_crit_edge"

"for blur_y.s0.x.x.rebased1993.consume blur_x2002_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased1993"
  %.pre3387 = shl nsw i64 %18235, 5
  br label %"consume blur_x2002"

"end for blur_y.s0.x.x.rebased1994":              ; preds = %"consume blur_x2002", %after_bb1978
  br i1 %291, label %"for blur_y.s0.x.x.rebased2010.preheader", label %"end for blur_y.s0.x.x.rebased2011", !prof !386

"for blur_y.s0.x.x.rebased2010.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased1994"
  %18241 = sext i32 %t1666957 to i64
  %18242 = zext i32 %.pre-phi3332 to i64
  %18243 = mul nsw i64 %18242, %298
  %18244 = sub nsw i64 %18243, %285
  %18245 = zext i32 %.pre-phi3338 to i64
  %18246 = mul nsw i64 %18245, %298
  %18247 = sub nsw i64 %18246, %285
  %18248 = zext i32 %.pre-phi3328 to i64
  %18249 = mul nsw i64 %18248, %298
  %18250 = sub nsw i64 %18249, %285
  %18251 = sext i32 %a339 to i64
  %18252 = add nsw i64 %18251, 25
  %18253 = mul nsw i64 %18252, %299
  %18254 = add nsw i64 %18253, %302
  br label %"for blur_y.s0.x.x.rebased2010"

"produce blur_x2000":                             ; preds = %"for blur_y.s0.x.x.rebased1993"
  %t10722001 = add nsw i32 %18238, %t20491990
  %18255 = sext i32 %t10722001 to i64
  %18256 = getelementptr inbounds i16, i16* %read_input784, i64 %18255
  %18257 = getelementptr inbounds i16, i16* %18256, i64 1
  %18258 = bitcast i16* %18257 to <16 x i16>*
  %18259 = load <16 x i16>, <16 x i16>* %18258, align 2, !tbaa !396
  %18260 = getelementptr inbounds i16, i16* %18256, i64 17
  %18261 = bitcast i16* %18260 to <16 x i16>*
  %18262 = load <16 x i16>, <16 x i16>* %18261, align 2, !tbaa !396
  %18263 = getelementptr inbounds i16, i16* %18256, i64 2
  %18264 = bitcast i16* %18263 to <16 x i16>*
  %18265 = load <16 x i16>, <16 x i16>* %18264, align 2, !tbaa !396
  %18266 = getelementptr inbounds i16, i16* %18256, i64 18
  %18267 = bitcast i16* %18266 to <16 x i16>*
  %18268 = load <16 x i16>, <16 x i16>* %18267, align 2, !tbaa !396
  %18269 = bitcast i16* %18256 to <16 x i16>*
  %18270 = load <16 x i16>, <16 x i16>* %18269, align 2, !tbaa !396
  %18271 = getelementptr inbounds i16, i16* %18256, i64 16
  %18272 = bitcast i16* %18271 to <16 x i16>*
  %18273 = load <16 x i16>, <16 x i16>* %18272, align 2, !tbaa !396
  %18274 = add <16 x i16> %18265, %18259
  %18275 = add <16 x i16> %18274, %18270
  %18276 = add <16 x i16> %18268, %18262
  %18277 = add <16 x i16> %18276, %18273
  %18278 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18275, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18279 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18277, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18280 = shufflevector <16 x i16> %18278, <16 x i16> %18279, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18281 = lshr <32 x i16> %18280, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18282 = shufflevector <32 x i16> %18281, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18283 = shl nsw i64 %18235, 5
  %18284 = add nsw i64 %18283, %18136
  %18285 = getelementptr inbounds i16, i16* %blur_x841, i64 %18284
  %18286 = bitcast i16* %18285 to <16 x i16>*
  store <16 x i16> %18282, <16 x i16>* %18286, align 2, !tbaa !399
  %18287 = shufflevector <32 x i16> %18281, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18288 = getelementptr inbounds i16, i16* %18285, i64 16
  %18289 = bitcast i16* %18288 to <16 x i16>*
  store <16 x i16> %18287, <16 x i16>* %18289, align 2, !tbaa !399
  br label %"consume blur_x2002"

"consume blur_x2002":                             ; preds = %"for blur_y.s0.x.x.rebased1993.consume blur_x2002_crit_edge", %"produce blur_x2000"
  %.pre-phi3388 = phi i64 [ %.pre3387, %"for blur_y.s0.x.x.rebased1993.consume blur_x2002_crit_edge" ], [ %18283, %"produce blur_x2000" ]
  %18290 = add nsw i64 %18139, %.pre-phi3388
  %18291 = getelementptr inbounds i16, i16* %blur_x841, i64 %18290
  %18292 = bitcast i16* %18291 to <16 x i16>*
  %18293 = load <16 x i16>, <16 x i16>* %18292, align 2, !tbaa !399
  %18294 = getelementptr inbounds i16, i16* %18291, i64 16
  %18295 = bitcast i16* %18294 to <16 x i16>*
  %18296 = load <16 x i16>, <16 x i16>* %18295, align 2, !tbaa !399
  %18297 = add nsw i64 %18142, %.pre-phi3388
  %18298 = getelementptr inbounds i16, i16* %blur_x841, i64 %18297
  %18299 = bitcast i16* %18298 to <16 x i16>*
  %18300 = load <16 x i16>, <16 x i16>* %18299, align 2, !tbaa !399
  %18301 = getelementptr inbounds i16, i16* %18298, i64 16
  %18302 = bitcast i16* %18301 to <16 x i16>*
  %18303 = load <16 x i16>, <16 x i16>* %18302, align 2, !tbaa !399
  %18304 = add nsw i64 %18145, %.pre-phi3388
  %18305 = getelementptr inbounds i16, i16* %blur_x841, i64 %18304
  %18306 = bitcast i16* %18305 to <16 x i16>*
  %18307 = load <16 x i16>, <16 x i16>* %18306, align 2, !tbaa !399
  %18308 = getelementptr inbounds i16, i16* %18305, i64 16
  %18309 = bitcast i16* %18308 to <16 x i16>*
  %18310 = load <16 x i16>, <16 x i16>* %18309, align 2, !tbaa !399
  %18311 = add <16 x i16> %18300, %18293
  %18312 = add <16 x i16> %18311, %18307
  %18313 = add <16 x i16> %18303, %18296
  %18314 = add <16 x i16> %18313, %18310
  %18315 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18312, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18316 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18314, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18317 = shufflevector <16 x i16> %18315, <16 x i16> %18316, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18318 = lshr <32 x i16> %18317, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18319 = shufflevector <32 x i16> %18318, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18320 = add nsw i64 %18149, %.pre-phi3388
  %18321 = getelementptr inbounds i16, i16* %255, i64 %18320
  %18322 = bitcast i16* %18321 to <16 x i16>*
  store <16 x i16> %18319, <16 x i16>* %18322, align 2, !tbaa !401
  %18323 = shufflevector <32 x i16> %18318, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18324 = getelementptr inbounds i16, i16* %18321, i64 16
  %18325 = bitcast i16* %18324 to <16 x i16>*
  store <16 x i16> %18323, <16 x i16>* %18325, align 2, !tbaa !401
  %indvars.iv.next3223 = add nuw nsw i64 %indvars.iv3222, 1
  %.not2450 = icmp eq i64 %indvars.iv.next3223, %370
  br i1 %.not2450, label %"end for blur_y.s0.x.x.rebased1994", label %"for blur_y.s0.x.x.rebased1993"

"for blur_y.s0.x.x.rebased2010":                  ; preds = %"for blur_y.s0.x.x.rebased2010.preheader", %"consume blur_x2020"
  %blur_y.s0.x.x.rebased2012 = phi i32 [ %18404, %"consume blur_x2020" ], [ 0, %"for blur_y.s0.x.x.rebased2010.preheader" ]
  %18326 = add nsw i32 %blur_y.s0.x.x.rebased2012, %t1582776
  %a579 = shl nsw i32 %18326, 5
  %18327 = icmp sgt i32 %a327, %a579
  %b585 = select i1 %18327, i32 %a579, i32 %a327
  %18328 = icmp slt i32 %18326, 1
  %18329 = icmp sgt i32 %194, %a579
  %18330 = or i1 %18328, %18329
  br i1 %18330, label %"produce blur_x2017", label %"consume blur_x2020"

"end for blur_y.s0.x.x.rebased2011":              ; preds = %"consume blur_x2020", %"end for blur_y.s0.x.x.rebased1994"
  br i1 %224, label %"produce blur_x2024", label %after_bb2021

"produce blur_x2017":                             ; preds = %"for blur_y.s0.x.x.rebased2010"
  %18331 = icmp slt i32 %b585, %194
  %blur_x.s0.x.v1.base.s2018 = select i1 %18331, i32 %b585, i32 %194
  %t10772019 = add nsw i32 %blur_x.s0.x.v1.base.s2018, %t20491990
  %18332 = sext i32 %t10772019 to i64
  %18333 = getelementptr inbounds i16, i16* %read_input784, i64 %18332
  %18334 = getelementptr inbounds i16, i16* %18333, i64 1
  %18335 = bitcast i16* %18334 to <16 x i16>*
  %18336 = load <16 x i16>, <16 x i16>* %18335, align 2, !tbaa !396
  %18337 = getelementptr inbounds i16, i16* %18333, i64 17
  %18338 = bitcast i16* %18337 to <16 x i16>*
  %18339 = load <16 x i16>, <16 x i16>* %18338, align 2, !tbaa !396
  %18340 = getelementptr inbounds i16, i16* %18333, i64 2
  %18341 = bitcast i16* %18340 to <16 x i16>*
  %18342 = load <16 x i16>, <16 x i16>* %18341, align 2, !tbaa !396
  %18343 = getelementptr inbounds i16, i16* %18333, i64 18
  %18344 = bitcast i16* %18343 to <16 x i16>*
  %18345 = load <16 x i16>, <16 x i16>* %18344, align 2, !tbaa !396
  %18346 = bitcast i16* %18333 to <16 x i16>*
  %18347 = load <16 x i16>, <16 x i16>* %18346, align 2, !tbaa !396
  %18348 = getelementptr inbounds i16, i16* %18333, i64 16
  %18349 = bitcast i16* %18348 to <16 x i16>*
  %18350 = load <16 x i16>, <16 x i16>* %18349, align 2, !tbaa !396
  %18351 = add <16 x i16> %18342, %18336
  %18352 = add <16 x i16> %18351, %18347
  %18353 = add <16 x i16> %18345, %18339
  %18354 = add <16 x i16> %18353, %18350
  %18355 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18352, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18356 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18354, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18357 = shufflevector <16 x i16> %18355, <16 x i16> %18356, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18358 = lshr <32 x i16> %18357, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18359 = shufflevector <32 x i16> %18358, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18360 = sext i32 %blur_x.s0.x.v1.base.s2018 to i64
  %18361 = add nsw i64 %18360, %18241
  %18362 = getelementptr inbounds i16, i16* %blur_x841, i64 %18361
  %18363 = bitcast i16* %18362 to <16 x i16>*
  store <16 x i16> %18359, <16 x i16>* %18363, align 2, !tbaa !399
  %18364 = shufflevector <32 x i16> %18358, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18365 = getelementptr inbounds i16, i16* %18362, i64 16
  %18366 = bitcast i16* %18365 to <16 x i16>*
  store <16 x i16> %18364, <16 x i16>* %18366, align 2, !tbaa !399
  br label %"consume blur_x2020"

"consume blur_x2020":                             ; preds = %"for blur_y.s0.x.x.rebased2010", %"produce blur_x2017"
  %18367 = sext i32 %b585 to i64
  %18368 = add nsw i64 %18244, %18367
  %18369 = getelementptr inbounds i16, i16* %blur_x841, i64 %18368
  %18370 = bitcast i16* %18369 to <16 x i16>*
  %18371 = load <16 x i16>, <16 x i16>* %18370, align 2, !tbaa !399
  %18372 = getelementptr inbounds i16, i16* %18369, i64 16
  %18373 = bitcast i16* %18372 to <16 x i16>*
  %18374 = load <16 x i16>, <16 x i16>* %18373, align 2, !tbaa !399
  %18375 = add nsw i64 %18247, %18367
  %18376 = getelementptr inbounds i16, i16* %blur_x841, i64 %18375
  %18377 = bitcast i16* %18376 to <16 x i16>*
  %18378 = load <16 x i16>, <16 x i16>* %18377, align 2, !tbaa !399
  %18379 = getelementptr inbounds i16, i16* %18376, i64 16
  %18380 = bitcast i16* %18379 to <16 x i16>*
  %18381 = load <16 x i16>, <16 x i16>* %18380, align 2, !tbaa !399
  %18382 = add nsw i64 %18250, %18367
  %18383 = getelementptr inbounds i16, i16* %blur_x841, i64 %18382
  %18384 = bitcast i16* %18383 to <16 x i16>*
  %18385 = load <16 x i16>, <16 x i16>* %18384, align 2, !tbaa !399
  %18386 = getelementptr inbounds i16, i16* %18383, i64 16
  %18387 = bitcast i16* %18386 to <16 x i16>*
  %18388 = load <16 x i16>, <16 x i16>* %18387, align 2, !tbaa !399
  %18389 = add <16 x i16> %18378, %18371
  %18390 = add <16 x i16> %18389, %18385
  %18391 = add <16 x i16> %18381, %18374
  %18392 = add <16 x i16> %18391, %18388
  %18393 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18390, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18394 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18392, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18395 = shufflevector <16 x i16> %18393, <16 x i16> %18394, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18396 = lshr <32 x i16> %18395, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18397 = shufflevector <32 x i16> %18396, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18398 = add nsw i64 %18254, %18367
  %18399 = getelementptr inbounds i16, i16* %255, i64 %18398
  %18400 = bitcast i16* %18399 to <16 x i16>*
  store <16 x i16> %18397, <16 x i16>* %18400, align 2, !tbaa !401
  %18401 = shufflevector <32 x i16> %18396, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18402 = getelementptr inbounds i16, i16* %18399, i64 16
  %18403 = bitcast i16* %18402 to <16 x i16>*
  store <16 x i16> %18401, <16 x i16>* %18403, align 2, !tbaa !401
  %18404 = add nuw nsw i32 %blur_y.s0.x.x.rebased2012, 1
  %.not2449 = icmp eq i32 %18404, %t1639861
  br i1 %.not2449, label %"end for blur_y.s0.x.x.rebased2011", label %"for blur_y.s0.x.x.rebased2010"

after_bb2021:                                     ; preds = %"end for blur_y.s0.x.x.rebased2011", %"produce blur_x2024"
  br i1 %289, label %"for blur_y.s0.x.x.rebased2036.preheader", label %"end for blur_y.s0.x.x.rebased2037", !prof !386

"for blur_y.s0.x.x.rebased2036.preheader":        ; preds = %after_bb2021
  %18405 = sext i32 %t1638848 to i64
  %18406 = zext i32 %.pre-phi3338 to i64
  %18407 = mul nsw i64 %18406, %298
  %18408 = sub nsw i64 %18407, %285
  %18409 = zext i32 %.pre-phi3324 to i64
  %18410 = mul nsw i64 %18409, %298
  %18411 = sub nsw i64 %18410, %285
  %18412 = zext i32 %.pre-phi3332 to i64
  %18413 = mul nsw i64 %18412, %298
  %18414 = sub nsw i64 %18413, %285
  %18415 = sext i32 %a339 to i64
  %18416 = add nsw i64 %18415, 26
  %18417 = mul nsw i64 %18416, %299
  %18418 = add nsw i64 %18417, %302
  br label %"for blur_y.s0.x.x.rebased2036"

"produce blur_x2024":                             ; preds = %"end for blur_y.s0.x.x.rebased2011"
  %18419 = getelementptr inbounds i16, i16* %read_input784, i64 %353
  %18420 = getelementptr inbounds i16, i16* %18419, i64 -31
  %18421 = bitcast i16* %18420 to <16 x i16>*
  %18422 = load <16 x i16>, <16 x i16>* %18421, align 2, !tbaa !396
  %18423 = getelementptr inbounds i16, i16* %18419, i64 -15
  %18424 = bitcast i16* %18423 to <16 x i16>*
  %18425 = load <16 x i16>, <16 x i16>* %18424, align 2, !tbaa !396
  %18426 = getelementptr inbounds i16, i16* %18419, i64 -30
  %18427 = bitcast i16* %18426 to <16 x i16>*
  %18428 = load <16 x i16>, <16 x i16>* %18427, align 2, !tbaa !396
  %18429 = getelementptr inbounds i16, i16* %18419, i64 -14
  %18430 = bitcast i16* %18429 to <16 x i16>*
  %18431 = load <16 x i16>, <16 x i16>* %18430, align 2, !tbaa !396
  %18432 = getelementptr inbounds i16, i16* %18419, i64 -32
  %18433 = bitcast i16* %18432 to <16 x i16>*
  %18434 = load <16 x i16>, <16 x i16>* %18433, align 2, !tbaa !396
  %18435 = getelementptr inbounds i16, i16* %18419, i64 -16
  %18436 = bitcast i16* %18435 to <16 x i16>*
  %18437 = load <16 x i16>, <16 x i16>* %18436, align 2, !tbaa !396
  %18438 = add <16 x i16> %18428, %18422
  %18439 = add <16 x i16> %18438, %18434
  %18440 = add <16 x i16> %18431, %18425
  %18441 = add <16 x i16> %18440, %18437
  %18442 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18439, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18443 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18441, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18444 = shufflevector <16 x i16> %18442, <16 x i16> %18443, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18445 = lshr <32 x i16> %18444, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18446 = shufflevector <32 x i16> %18445, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18447 = zext i32 %.pre-phi3324 to i64
  %18448 = mul nsw i64 %286, %18447
  %18449 = add nsw i64 %288, %18448
  %18450 = getelementptr inbounds i16, i16* %blur_x841, i64 %18449
  %18451 = getelementptr inbounds i16, i16* %18450, i64 -32
  %18452 = bitcast i16* %18451 to <16 x i16>*
  store <16 x i16> %18446, <16 x i16>* %18452, align 2, !tbaa !399
  %18453 = shufflevector <32 x i16> %18445, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18454 = getelementptr inbounds i16, i16* %18450, i64 -16
  %18455 = bitcast i16* %18454 to <16 x i16>*
  store <16 x i16> %18453, <16 x i16>* %18455, align 2, !tbaa !399
  %18456 = zext i32 %.pre-phi3338 to i64
  %18457 = mul nsw i64 %18456, %298
  %18458 = add nsw i64 %18457, %283
  %18459 = getelementptr inbounds i16, i16* %blur_x841, i64 %18458
  %18460 = getelementptr inbounds i16, i16* %18459, i64 -32
  %18461 = bitcast i16* %18460 to <16 x i16>*
  %18462 = load <16 x i16>, <16 x i16>* %18461, align 2, !tbaa !399
  %18463 = getelementptr inbounds i16, i16* %18459, i64 -16
  %18464 = bitcast i16* %18463 to <16 x i16>*
  %18465 = load <16 x i16>, <16 x i16>* %18464, align 2, !tbaa !399
  %18466 = mul nsw i64 %18447, %298
  %18467 = add nsw i64 %18466, %283
  %18468 = getelementptr inbounds i16, i16* %blur_x841, i64 %18467
  %18469 = getelementptr inbounds i16, i16* %18468, i64 -32
  %18470 = bitcast i16* %18469 to <16 x i16>*
  %18471 = load <16 x i16>, <16 x i16>* %18470, align 2, !tbaa !399
  %18472 = getelementptr inbounds i16, i16* %18468, i64 -16
  %18473 = bitcast i16* %18472 to <16 x i16>*
  %18474 = load <16 x i16>, <16 x i16>* %18473, align 2, !tbaa !399
  %18475 = zext i32 %.pre-phi3332 to i64
  %18476 = mul nsw i64 %18475, %298
  %18477 = add nsw i64 %18476, %283
  %18478 = getelementptr inbounds i16, i16* %blur_x841, i64 %18477
  %18479 = getelementptr inbounds i16, i16* %18478, i64 -32
  %18480 = bitcast i16* %18479 to <16 x i16>*
  %18481 = load <16 x i16>, <16 x i16>* %18480, align 2, !tbaa !399
  %18482 = getelementptr inbounds i16, i16* %18478, i64 -16
  %18483 = bitcast i16* %18482 to <16 x i16>*
  %18484 = load <16 x i16>, <16 x i16>* %18483, align 2, !tbaa !399
  %18485 = add <16 x i16> %18471, %18462
  %18486 = add <16 x i16> %18485, %18481
  %18487 = add <16 x i16> %18474, %18465
  %18488 = add <16 x i16> %18487, %18484
  %18489 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18486, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18490 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18488, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18491 = shufflevector <16 x i16> %18489, <16 x i16> %18490, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18492 = lshr <32 x i16> %18491, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18493 = shufflevector <32 x i16> %18492, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18494 = sext i32 %a339 to i64
  %18495 = add nsw i64 %18494, 26
  %18496 = mul nsw i64 %18495, %299
  %18497 = add nsw i64 %301, %18496
  %18498 = getelementptr inbounds i16, i16* %255, i64 %18497
  %18499 = getelementptr inbounds i16, i16* %18498, i64 -32
  %18500 = bitcast i16* %18499 to <16 x i16>*
  store <16 x i16> %18493, <16 x i16>* %18500, align 2, !tbaa !401
  %18501 = shufflevector <32 x i16> %18492, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18502 = getelementptr inbounds i16, i16* %18498, i64 -16
  %18503 = bitcast i16* %18502 to <16 x i16>*
  store <16 x i16> %18501, <16 x i16>* %18503, align 2, !tbaa !401
  br label %after_bb2021

"for blur_y.s0.x.x.rebased2036":                  ; preds = %"for blur_y.s0.x.x.rebased2036.preheader", %"consume blur_x2045"
  %indvars.iv3225 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2036.preheader" ], [ %indvars.iv.next3226, %"consume blur_x2045" ]
  %18504 = add nsw i64 %indvars.iv3225, %290
  %18505 = icmp slt i64 %18504, 1
  %18506 = trunc i64 %18504 to i32
  %18507 = shl nsw i32 %18506, 5
  %18508 = icmp sgt i32 %194, %18507
  %18509 = or i1 %18505, %18508
  br i1 %18509, label %"produce blur_x2043", label %"for blur_y.s0.x.x.rebased2036.consume blur_x2045_crit_edge"

"for blur_y.s0.x.x.rebased2036.consume blur_x2045_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2036"
  %.pre3389 = shl nsw i64 %18504, 5
  br label %"consume blur_x2045"

"end for blur_y.s0.x.x.rebased2037":              ; preds = %"consume blur_x2045", %after_bb2021
  br i1 %291, label %"for blur_y.s0.x.x.rebased2053.preheader", label %"end for blur_y.s0.x.x.rebased2054", !prof !386

"for blur_y.s0.x.x.rebased2053.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2037"
  %18510 = sext i32 %t1638848 to i64
  %18511 = zext i32 %.pre-phi3338 to i64
  %18512 = mul nsw i64 %18511, %298
  %18513 = sub nsw i64 %18512, %285
  %18514 = zext i32 %.pre-phi3324 to i64
  %18515 = mul nsw i64 %18514, %298
  %18516 = sub nsw i64 %18515, %285
  %18517 = zext i32 %.pre-phi3332 to i64
  %18518 = mul nsw i64 %18517, %298
  %18519 = sub nsw i64 %18518, %285
  %18520 = sext i32 %a339 to i64
  %18521 = add nsw i64 %18520, 26
  %18522 = mul nsw i64 %18521, %299
  %18523 = add nsw i64 %18522, %302
  br label %"for blur_y.s0.x.x.rebased2053"

"produce blur_x2043":                             ; preds = %"for blur_y.s0.x.x.rebased2036"
  %t10882044 = add nsw i32 %18507, %t20652033
  %18524 = sext i32 %t10882044 to i64
  %18525 = getelementptr inbounds i16, i16* %read_input784, i64 %18524
  %18526 = getelementptr inbounds i16, i16* %18525, i64 1
  %18527 = bitcast i16* %18526 to <16 x i16>*
  %18528 = load <16 x i16>, <16 x i16>* %18527, align 2, !tbaa !396
  %18529 = getelementptr inbounds i16, i16* %18525, i64 17
  %18530 = bitcast i16* %18529 to <16 x i16>*
  %18531 = load <16 x i16>, <16 x i16>* %18530, align 2, !tbaa !396
  %18532 = getelementptr inbounds i16, i16* %18525, i64 2
  %18533 = bitcast i16* %18532 to <16 x i16>*
  %18534 = load <16 x i16>, <16 x i16>* %18533, align 2, !tbaa !396
  %18535 = getelementptr inbounds i16, i16* %18525, i64 18
  %18536 = bitcast i16* %18535 to <16 x i16>*
  %18537 = load <16 x i16>, <16 x i16>* %18536, align 2, !tbaa !396
  %18538 = bitcast i16* %18525 to <16 x i16>*
  %18539 = load <16 x i16>, <16 x i16>* %18538, align 2, !tbaa !396
  %18540 = getelementptr inbounds i16, i16* %18525, i64 16
  %18541 = bitcast i16* %18540 to <16 x i16>*
  %18542 = load <16 x i16>, <16 x i16>* %18541, align 2, !tbaa !396
  %18543 = add <16 x i16> %18534, %18528
  %18544 = add <16 x i16> %18543, %18539
  %18545 = add <16 x i16> %18537, %18531
  %18546 = add <16 x i16> %18545, %18542
  %18547 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18544, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18548 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18546, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18549 = shufflevector <16 x i16> %18547, <16 x i16> %18548, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18550 = lshr <32 x i16> %18549, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18551 = shufflevector <32 x i16> %18550, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18552 = shl nsw i64 %18504, 5
  %18553 = add nsw i64 %18552, %18405
  %18554 = getelementptr inbounds i16, i16* %blur_x841, i64 %18553
  %18555 = bitcast i16* %18554 to <16 x i16>*
  store <16 x i16> %18551, <16 x i16>* %18555, align 2, !tbaa !399
  %18556 = shufflevector <32 x i16> %18550, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18557 = getelementptr inbounds i16, i16* %18554, i64 16
  %18558 = bitcast i16* %18557 to <16 x i16>*
  store <16 x i16> %18556, <16 x i16>* %18558, align 2, !tbaa !399
  br label %"consume blur_x2045"

"consume blur_x2045":                             ; preds = %"for blur_y.s0.x.x.rebased2036.consume blur_x2045_crit_edge", %"produce blur_x2043"
  %.pre-phi3390 = phi i64 [ %.pre3389, %"for blur_y.s0.x.x.rebased2036.consume blur_x2045_crit_edge" ], [ %18552, %"produce blur_x2043" ]
  %18559 = add nsw i64 %18408, %.pre-phi3390
  %18560 = getelementptr inbounds i16, i16* %blur_x841, i64 %18559
  %18561 = bitcast i16* %18560 to <16 x i16>*
  %18562 = load <16 x i16>, <16 x i16>* %18561, align 2, !tbaa !399
  %18563 = getelementptr inbounds i16, i16* %18560, i64 16
  %18564 = bitcast i16* %18563 to <16 x i16>*
  %18565 = load <16 x i16>, <16 x i16>* %18564, align 2, !tbaa !399
  %18566 = add nsw i64 %18411, %.pre-phi3390
  %18567 = getelementptr inbounds i16, i16* %blur_x841, i64 %18566
  %18568 = bitcast i16* %18567 to <16 x i16>*
  %18569 = load <16 x i16>, <16 x i16>* %18568, align 2, !tbaa !399
  %18570 = getelementptr inbounds i16, i16* %18567, i64 16
  %18571 = bitcast i16* %18570 to <16 x i16>*
  %18572 = load <16 x i16>, <16 x i16>* %18571, align 2, !tbaa !399
  %18573 = add nsw i64 %18414, %.pre-phi3390
  %18574 = getelementptr inbounds i16, i16* %blur_x841, i64 %18573
  %18575 = bitcast i16* %18574 to <16 x i16>*
  %18576 = load <16 x i16>, <16 x i16>* %18575, align 2, !tbaa !399
  %18577 = getelementptr inbounds i16, i16* %18574, i64 16
  %18578 = bitcast i16* %18577 to <16 x i16>*
  %18579 = load <16 x i16>, <16 x i16>* %18578, align 2, !tbaa !399
  %18580 = add <16 x i16> %18569, %18562
  %18581 = add <16 x i16> %18580, %18576
  %18582 = add <16 x i16> %18572, %18565
  %18583 = add <16 x i16> %18582, %18579
  %18584 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18581, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18585 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18583, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18586 = shufflevector <16 x i16> %18584, <16 x i16> %18585, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18587 = lshr <32 x i16> %18586, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18588 = shufflevector <32 x i16> %18587, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18589 = add nsw i64 %18418, %.pre-phi3390
  %18590 = getelementptr inbounds i16, i16* %255, i64 %18589
  %18591 = bitcast i16* %18590 to <16 x i16>*
  store <16 x i16> %18588, <16 x i16>* %18591, align 2, !tbaa !401
  %18592 = shufflevector <32 x i16> %18587, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18593 = getelementptr inbounds i16, i16* %18590, i64 16
  %18594 = bitcast i16* %18593 to <16 x i16>*
  store <16 x i16> %18592, <16 x i16>* %18594, align 2, !tbaa !401
  %indvars.iv.next3226 = add nuw nsw i64 %indvars.iv3225, 1
  %.not2448 = icmp eq i64 %indvars.iv.next3226, %370
  br i1 %.not2448, label %"end for blur_y.s0.x.x.rebased2037", label %"for blur_y.s0.x.x.rebased2036"

"for blur_y.s0.x.x.rebased2053":                  ; preds = %"for blur_y.s0.x.x.rebased2053.preheader", %"consume blur_x2063"
  %blur_y.s0.x.x.rebased2055 = phi i32 [ %18673, %"consume blur_x2063" ], [ 0, %"for blur_y.s0.x.x.rebased2053.preheader" ]
  %18595 = add nsw i32 %blur_y.s0.x.x.rebased2055, %t1582776
  %a586 = shl nsw i32 %18595, 5
  %18596 = icmp sgt i32 %a327, %a586
  %b592 = select i1 %18596, i32 %a586, i32 %a327
  %18597 = icmp slt i32 %18595, 1
  %18598 = icmp sgt i32 %194, %a586
  %18599 = or i1 %18597, %18598
  br i1 %18599, label %"produce blur_x2060", label %"consume blur_x2063"

"end for blur_y.s0.x.x.rebased2054":              ; preds = %"consume blur_x2063", %"end for blur_y.s0.x.x.rebased2037"
  br i1 %224, label %"produce blur_x2067", label %after_bb2064

"produce blur_x2060":                             ; preds = %"for blur_y.s0.x.x.rebased2053"
  %18600 = icmp slt i32 %b592, %194
  %blur_x.s0.x.v1.base.s2061 = select i1 %18600, i32 %b592, i32 %194
  %t10932062 = add nsw i32 %blur_x.s0.x.v1.base.s2061, %t20652033
  %18601 = sext i32 %t10932062 to i64
  %18602 = getelementptr inbounds i16, i16* %read_input784, i64 %18601
  %18603 = getelementptr inbounds i16, i16* %18602, i64 1
  %18604 = bitcast i16* %18603 to <16 x i16>*
  %18605 = load <16 x i16>, <16 x i16>* %18604, align 2, !tbaa !396
  %18606 = getelementptr inbounds i16, i16* %18602, i64 17
  %18607 = bitcast i16* %18606 to <16 x i16>*
  %18608 = load <16 x i16>, <16 x i16>* %18607, align 2, !tbaa !396
  %18609 = getelementptr inbounds i16, i16* %18602, i64 2
  %18610 = bitcast i16* %18609 to <16 x i16>*
  %18611 = load <16 x i16>, <16 x i16>* %18610, align 2, !tbaa !396
  %18612 = getelementptr inbounds i16, i16* %18602, i64 18
  %18613 = bitcast i16* %18612 to <16 x i16>*
  %18614 = load <16 x i16>, <16 x i16>* %18613, align 2, !tbaa !396
  %18615 = bitcast i16* %18602 to <16 x i16>*
  %18616 = load <16 x i16>, <16 x i16>* %18615, align 2, !tbaa !396
  %18617 = getelementptr inbounds i16, i16* %18602, i64 16
  %18618 = bitcast i16* %18617 to <16 x i16>*
  %18619 = load <16 x i16>, <16 x i16>* %18618, align 2, !tbaa !396
  %18620 = add <16 x i16> %18611, %18605
  %18621 = add <16 x i16> %18620, %18616
  %18622 = add <16 x i16> %18614, %18608
  %18623 = add <16 x i16> %18622, %18619
  %18624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18621, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18625 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18623, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18626 = shufflevector <16 x i16> %18624, <16 x i16> %18625, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18627 = lshr <32 x i16> %18626, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18628 = shufflevector <32 x i16> %18627, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18629 = sext i32 %blur_x.s0.x.v1.base.s2061 to i64
  %18630 = add nsw i64 %18629, %18510
  %18631 = getelementptr inbounds i16, i16* %blur_x841, i64 %18630
  %18632 = bitcast i16* %18631 to <16 x i16>*
  store <16 x i16> %18628, <16 x i16>* %18632, align 2, !tbaa !399
  %18633 = shufflevector <32 x i16> %18627, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18634 = getelementptr inbounds i16, i16* %18631, i64 16
  %18635 = bitcast i16* %18634 to <16 x i16>*
  store <16 x i16> %18633, <16 x i16>* %18635, align 2, !tbaa !399
  br label %"consume blur_x2063"

"consume blur_x2063":                             ; preds = %"for blur_y.s0.x.x.rebased2053", %"produce blur_x2060"
  %18636 = sext i32 %b592 to i64
  %18637 = add nsw i64 %18513, %18636
  %18638 = getelementptr inbounds i16, i16* %blur_x841, i64 %18637
  %18639 = bitcast i16* %18638 to <16 x i16>*
  %18640 = load <16 x i16>, <16 x i16>* %18639, align 2, !tbaa !399
  %18641 = getelementptr inbounds i16, i16* %18638, i64 16
  %18642 = bitcast i16* %18641 to <16 x i16>*
  %18643 = load <16 x i16>, <16 x i16>* %18642, align 2, !tbaa !399
  %18644 = add nsw i64 %18516, %18636
  %18645 = getelementptr inbounds i16, i16* %blur_x841, i64 %18644
  %18646 = bitcast i16* %18645 to <16 x i16>*
  %18647 = load <16 x i16>, <16 x i16>* %18646, align 2, !tbaa !399
  %18648 = getelementptr inbounds i16, i16* %18645, i64 16
  %18649 = bitcast i16* %18648 to <16 x i16>*
  %18650 = load <16 x i16>, <16 x i16>* %18649, align 2, !tbaa !399
  %18651 = add nsw i64 %18519, %18636
  %18652 = getelementptr inbounds i16, i16* %blur_x841, i64 %18651
  %18653 = bitcast i16* %18652 to <16 x i16>*
  %18654 = load <16 x i16>, <16 x i16>* %18653, align 2, !tbaa !399
  %18655 = getelementptr inbounds i16, i16* %18652, i64 16
  %18656 = bitcast i16* %18655 to <16 x i16>*
  %18657 = load <16 x i16>, <16 x i16>* %18656, align 2, !tbaa !399
  %18658 = add <16 x i16> %18647, %18640
  %18659 = add <16 x i16> %18658, %18654
  %18660 = add <16 x i16> %18650, %18643
  %18661 = add <16 x i16> %18660, %18657
  %18662 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18659, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18663 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18661, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18664 = shufflevector <16 x i16> %18662, <16 x i16> %18663, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18665 = lshr <32 x i16> %18664, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18666 = shufflevector <32 x i16> %18665, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18667 = add nsw i64 %18523, %18636
  %18668 = getelementptr inbounds i16, i16* %255, i64 %18667
  %18669 = bitcast i16* %18668 to <16 x i16>*
  store <16 x i16> %18666, <16 x i16>* %18669, align 2, !tbaa !401
  %18670 = shufflevector <32 x i16> %18665, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18671 = getelementptr inbounds i16, i16* %18668, i64 16
  %18672 = bitcast i16* %18671 to <16 x i16>*
  store <16 x i16> %18670, <16 x i16>* %18672, align 2, !tbaa !401
  %18673 = add nuw nsw i32 %blur_y.s0.x.x.rebased2055, 1
  %.not2447 = icmp eq i32 %18673, %t1639861
  br i1 %.not2447, label %"end for blur_y.s0.x.x.rebased2054", label %"for blur_y.s0.x.x.rebased2053"

after_bb2064:                                     ; preds = %"end for blur_y.s0.x.x.rebased2054", %"produce blur_x2067"
  br i1 %289, label %"for blur_y.s0.x.x.rebased2079.preheader", label %"end for blur_y.s0.x.x.rebased2080", !prof !386

"for blur_y.s0.x.x.rebased2079.preheader":        ; preds = %after_bb2064
  %18674 = sext i32 %t1644878 to i64
  %18675 = zext i32 %.pre-phi3324 to i64
  %18676 = mul nsw i64 %18675, %298
  %18677 = sub nsw i64 %18676, %285
  %18678 = zext i32 %.pre-phi3328 to i64
  %18679 = mul nsw i64 %18678, %298
  %18680 = sub nsw i64 %18679, %285
  %18681 = zext i32 %.pre-phi3338 to i64
  %18682 = mul nsw i64 %18681, %298
  %18683 = sub nsw i64 %18682, %285
  %18684 = sext i32 %a339 to i64
  %18685 = add nsw i64 %18684, 27
  %18686 = mul nsw i64 %18685, %299
  %18687 = add nsw i64 %18686, %302
  br label %"for blur_y.s0.x.x.rebased2079"

"produce blur_x2067":                             ; preds = %"end for blur_y.s0.x.x.rebased2054"
  %18688 = getelementptr inbounds i16, i16* %read_input784, i64 %355
  %18689 = getelementptr inbounds i16, i16* %18688, i64 -31
  %18690 = bitcast i16* %18689 to <16 x i16>*
  %18691 = load <16 x i16>, <16 x i16>* %18690, align 2, !tbaa !396
  %18692 = getelementptr inbounds i16, i16* %18688, i64 -15
  %18693 = bitcast i16* %18692 to <16 x i16>*
  %18694 = load <16 x i16>, <16 x i16>* %18693, align 2, !tbaa !396
  %18695 = getelementptr inbounds i16, i16* %18688, i64 -30
  %18696 = bitcast i16* %18695 to <16 x i16>*
  %18697 = load <16 x i16>, <16 x i16>* %18696, align 2, !tbaa !396
  %18698 = getelementptr inbounds i16, i16* %18688, i64 -14
  %18699 = bitcast i16* %18698 to <16 x i16>*
  %18700 = load <16 x i16>, <16 x i16>* %18699, align 2, !tbaa !396
  %18701 = getelementptr inbounds i16, i16* %18688, i64 -32
  %18702 = bitcast i16* %18701 to <16 x i16>*
  %18703 = load <16 x i16>, <16 x i16>* %18702, align 2, !tbaa !396
  %18704 = getelementptr inbounds i16, i16* %18688, i64 -16
  %18705 = bitcast i16* %18704 to <16 x i16>*
  %18706 = load <16 x i16>, <16 x i16>* %18705, align 2, !tbaa !396
  %18707 = add <16 x i16> %18697, %18691
  %18708 = add <16 x i16> %18707, %18703
  %18709 = add <16 x i16> %18700, %18694
  %18710 = add <16 x i16> %18709, %18706
  %18711 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18708, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18712 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18710, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18713 = shufflevector <16 x i16> %18711, <16 x i16> %18712, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18714 = lshr <32 x i16> %18713, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18715 = shufflevector <32 x i16> %18714, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18716 = zext i32 %.pre-phi3328 to i64
  %18717 = mul nsw i64 %286, %18716
  %18718 = add nsw i64 %288, %18717
  %18719 = getelementptr inbounds i16, i16* %blur_x841, i64 %18718
  %18720 = getelementptr inbounds i16, i16* %18719, i64 -32
  %18721 = bitcast i16* %18720 to <16 x i16>*
  store <16 x i16> %18715, <16 x i16>* %18721, align 2, !tbaa !399
  %18722 = shufflevector <32 x i16> %18714, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18723 = getelementptr inbounds i16, i16* %18719, i64 -16
  %18724 = bitcast i16* %18723 to <16 x i16>*
  store <16 x i16> %18722, <16 x i16>* %18724, align 2, !tbaa !399
  %18725 = zext i32 %.pre-phi3324 to i64
  %18726 = mul nsw i64 %18725, %298
  %18727 = add nsw i64 %18726, %283
  %18728 = getelementptr inbounds i16, i16* %blur_x841, i64 %18727
  %18729 = getelementptr inbounds i16, i16* %18728, i64 -32
  %18730 = bitcast i16* %18729 to <16 x i16>*
  %18731 = load <16 x i16>, <16 x i16>* %18730, align 2, !tbaa !399
  %18732 = getelementptr inbounds i16, i16* %18728, i64 -16
  %18733 = bitcast i16* %18732 to <16 x i16>*
  %18734 = load <16 x i16>, <16 x i16>* %18733, align 2, !tbaa !399
  %18735 = mul nsw i64 %18716, %298
  %18736 = add nsw i64 %18735, %283
  %18737 = getelementptr inbounds i16, i16* %blur_x841, i64 %18736
  %18738 = getelementptr inbounds i16, i16* %18737, i64 -32
  %18739 = bitcast i16* %18738 to <16 x i16>*
  %18740 = load <16 x i16>, <16 x i16>* %18739, align 2, !tbaa !399
  %18741 = getelementptr inbounds i16, i16* %18737, i64 -16
  %18742 = bitcast i16* %18741 to <16 x i16>*
  %18743 = load <16 x i16>, <16 x i16>* %18742, align 2, !tbaa !399
  %18744 = zext i32 %.pre-phi3338 to i64
  %18745 = mul nsw i64 %18744, %298
  %18746 = add nsw i64 %18745, %283
  %18747 = getelementptr inbounds i16, i16* %blur_x841, i64 %18746
  %18748 = getelementptr inbounds i16, i16* %18747, i64 -32
  %18749 = bitcast i16* %18748 to <16 x i16>*
  %18750 = load <16 x i16>, <16 x i16>* %18749, align 2, !tbaa !399
  %18751 = getelementptr inbounds i16, i16* %18747, i64 -16
  %18752 = bitcast i16* %18751 to <16 x i16>*
  %18753 = load <16 x i16>, <16 x i16>* %18752, align 2, !tbaa !399
  %18754 = add <16 x i16> %18740, %18731
  %18755 = add <16 x i16> %18754, %18750
  %18756 = add <16 x i16> %18743, %18734
  %18757 = add <16 x i16> %18756, %18753
  %18758 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18755, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18759 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18757, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18760 = shufflevector <16 x i16> %18758, <16 x i16> %18759, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18761 = lshr <32 x i16> %18760, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18762 = shufflevector <32 x i16> %18761, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18763 = sext i32 %a339 to i64
  %18764 = add nsw i64 %18763, 27
  %18765 = mul nsw i64 %18764, %299
  %18766 = add nsw i64 %301, %18765
  %18767 = getelementptr inbounds i16, i16* %255, i64 %18766
  %18768 = getelementptr inbounds i16, i16* %18767, i64 -32
  %18769 = bitcast i16* %18768 to <16 x i16>*
  store <16 x i16> %18762, <16 x i16>* %18769, align 2, !tbaa !401
  %18770 = shufflevector <32 x i16> %18761, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18771 = getelementptr inbounds i16, i16* %18767, i64 -16
  %18772 = bitcast i16* %18771 to <16 x i16>*
  store <16 x i16> %18770, <16 x i16>* %18772, align 2, !tbaa !401
  br label %after_bb2064

"for blur_y.s0.x.x.rebased2079":                  ; preds = %"for blur_y.s0.x.x.rebased2079.preheader", %"consume blur_x2088"
  %indvars.iv3228 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2079.preheader" ], [ %indvars.iv.next3229, %"consume blur_x2088" ]
  %18773 = add nsw i64 %indvars.iv3228, %290
  %18774 = icmp slt i64 %18773, 1
  %18775 = trunc i64 %18773 to i32
  %18776 = shl nsw i32 %18775, 5
  %18777 = icmp sgt i32 %194, %18776
  %18778 = or i1 %18774, %18777
  br i1 %18778, label %"produce blur_x2086", label %"for blur_y.s0.x.x.rebased2079.consume blur_x2088_crit_edge"

"for blur_y.s0.x.x.rebased2079.consume blur_x2088_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2079"
  %.pre3391 = shl nsw i64 %18773, 5
  br label %"consume blur_x2088"

"end for blur_y.s0.x.x.rebased2080":              ; preds = %"consume blur_x2088", %after_bb2064
  br i1 %291, label %"for blur_y.s0.x.x.rebased2096.preheader", label %"end for blur_y.s0.x.x.rebased2097", !prof !386

"for blur_y.s0.x.x.rebased2096.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2080"
  %18779 = sext i32 %t1644878 to i64
  %18780 = zext i32 %.pre-phi3324 to i64
  %18781 = mul nsw i64 %18780, %298
  %18782 = sub nsw i64 %18781, %285
  %18783 = zext i32 %.pre-phi3328 to i64
  %18784 = mul nsw i64 %18783, %298
  %18785 = sub nsw i64 %18784, %285
  %18786 = zext i32 %.pre-phi3338 to i64
  %18787 = mul nsw i64 %18786, %298
  %18788 = sub nsw i64 %18787, %285
  %18789 = sext i32 %a339 to i64
  %18790 = add nsw i64 %18789, 27
  %18791 = mul nsw i64 %18790, %299
  %18792 = add nsw i64 %18791, %302
  br label %"for blur_y.s0.x.x.rebased2096"

"produce blur_x2086":                             ; preds = %"for blur_y.s0.x.x.rebased2079"
  %t11042087 = add nsw i32 %18776, %t20812076
  %18793 = sext i32 %t11042087 to i64
  %18794 = getelementptr inbounds i16, i16* %read_input784, i64 %18793
  %18795 = getelementptr inbounds i16, i16* %18794, i64 1
  %18796 = bitcast i16* %18795 to <16 x i16>*
  %18797 = load <16 x i16>, <16 x i16>* %18796, align 2, !tbaa !396
  %18798 = getelementptr inbounds i16, i16* %18794, i64 17
  %18799 = bitcast i16* %18798 to <16 x i16>*
  %18800 = load <16 x i16>, <16 x i16>* %18799, align 2, !tbaa !396
  %18801 = getelementptr inbounds i16, i16* %18794, i64 2
  %18802 = bitcast i16* %18801 to <16 x i16>*
  %18803 = load <16 x i16>, <16 x i16>* %18802, align 2, !tbaa !396
  %18804 = getelementptr inbounds i16, i16* %18794, i64 18
  %18805 = bitcast i16* %18804 to <16 x i16>*
  %18806 = load <16 x i16>, <16 x i16>* %18805, align 2, !tbaa !396
  %18807 = bitcast i16* %18794 to <16 x i16>*
  %18808 = load <16 x i16>, <16 x i16>* %18807, align 2, !tbaa !396
  %18809 = getelementptr inbounds i16, i16* %18794, i64 16
  %18810 = bitcast i16* %18809 to <16 x i16>*
  %18811 = load <16 x i16>, <16 x i16>* %18810, align 2, !tbaa !396
  %18812 = add <16 x i16> %18803, %18797
  %18813 = add <16 x i16> %18812, %18808
  %18814 = add <16 x i16> %18806, %18800
  %18815 = add <16 x i16> %18814, %18811
  %18816 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18813, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18817 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18815, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18818 = shufflevector <16 x i16> %18816, <16 x i16> %18817, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18819 = lshr <32 x i16> %18818, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18820 = shufflevector <32 x i16> %18819, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18821 = shl nsw i64 %18773, 5
  %18822 = add nsw i64 %18821, %18674
  %18823 = getelementptr inbounds i16, i16* %blur_x841, i64 %18822
  %18824 = bitcast i16* %18823 to <16 x i16>*
  store <16 x i16> %18820, <16 x i16>* %18824, align 2, !tbaa !399
  %18825 = shufflevector <32 x i16> %18819, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18826 = getelementptr inbounds i16, i16* %18823, i64 16
  %18827 = bitcast i16* %18826 to <16 x i16>*
  store <16 x i16> %18825, <16 x i16>* %18827, align 2, !tbaa !399
  br label %"consume blur_x2088"

"consume blur_x2088":                             ; preds = %"for blur_y.s0.x.x.rebased2079.consume blur_x2088_crit_edge", %"produce blur_x2086"
  %.pre-phi3392 = phi i64 [ %.pre3391, %"for blur_y.s0.x.x.rebased2079.consume blur_x2088_crit_edge" ], [ %18821, %"produce blur_x2086" ]
  %18828 = add nsw i64 %18677, %.pre-phi3392
  %18829 = getelementptr inbounds i16, i16* %blur_x841, i64 %18828
  %18830 = bitcast i16* %18829 to <16 x i16>*
  %18831 = load <16 x i16>, <16 x i16>* %18830, align 2, !tbaa !399
  %18832 = getelementptr inbounds i16, i16* %18829, i64 16
  %18833 = bitcast i16* %18832 to <16 x i16>*
  %18834 = load <16 x i16>, <16 x i16>* %18833, align 2, !tbaa !399
  %18835 = add nsw i64 %18680, %.pre-phi3392
  %18836 = getelementptr inbounds i16, i16* %blur_x841, i64 %18835
  %18837 = bitcast i16* %18836 to <16 x i16>*
  %18838 = load <16 x i16>, <16 x i16>* %18837, align 2, !tbaa !399
  %18839 = getelementptr inbounds i16, i16* %18836, i64 16
  %18840 = bitcast i16* %18839 to <16 x i16>*
  %18841 = load <16 x i16>, <16 x i16>* %18840, align 2, !tbaa !399
  %18842 = add nsw i64 %18683, %.pre-phi3392
  %18843 = getelementptr inbounds i16, i16* %blur_x841, i64 %18842
  %18844 = bitcast i16* %18843 to <16 x i16>*
  %18845 = load <16 x i16>, <16 x i16>* %18844, align 2, !tbaa !399
  %18846 = getelementptr inbounds i16, i16* %18843, i64 16
  %18847 = bitcast i16* %18846 to <16 x i16>*
  %18848 = load <16 x i16>, <16 x i16>* %18847, align 2, !tbaa !399
  %18849 = add <16 x i16> %18838, %18831
  %18850 = add <16 x i16> %18849, %18845
  %18851 = add <16 x i16> %18841, %18834
  %18852 = add <16 x i16> %18851, %18848
  %18853 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18850, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18854 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18852, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18855 = shufflevector <16 x i16> %18853, <16 x i16> %18854, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18856 = lshr <32 x i16> %18855, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18857 = shufflevector <32 x i16> %18856, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18858 = add nsw i64 %18687, %.pre-phi3392
  %18859 = getelementptr inbounds i16, i16* %255, i64 %18858
  %18860 = bitcast i16* %18859 to <16 x i16>*
  store <16 x i16> %18857, <16 x i16>* %18860, align 2, !tbaa !401
  %18861 = shufflevector <32 x i16> %18856, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18862 = getelementptr inbounds i16, i16* %18859, i64 16
  %18863 = bitcast i16* %18862 to <16 x i16>*
  store <16 x i16> %18861, <16 x i16>* %18863, align 2, !tbaa !401
  %indvars.iv.next3229 = add nuw nsw i64 %indvars.iv3228, 1
  %.not2446 = icmp eq i64 %indvars.iv.next3229, %370
  br i1 %.not2446, label %"end for blur_y.s0.x.x.rebased2080", label %"for blur_y.s0.x.x.rebased2079"

"for blur_y.s0.x.x.rebased2096":                  ; preds = %"for blur_y.s0.x.x.rebased2096.preheader", %"consume blur_x2106"
  %blur_y.s0.x.x.rebased2098 = phi i32 [ %18942, %"consume blur_x2106" ], [ 0, %"for blur_y.s0.x.x.rebased2096.preheader" ]
  %18864 = add nsw i32 %blur_y.s0.x.x.rebased2098, %t1582776
  %a593 = shl nsw i32 %18864, 5
  %18865 = icmp sgt i32 %a327, %a593
  %b599 = select i1 %18865, i32 %a593, i32 %a327
  %18866 = icmp slt i32 %18864, 1
  %18867 = icmp sgt i32 %194, %a593
  %18868 = or i1 %18866, %18867
  br i1 %18868, label %"produce blur_x2103", label %"consume blur_x2106"

"end for blur_y.s0.x.x.rebased2097":              ; preds = %"consume blur_x2106", %"end for blur_y.s0.x.x.rebased2080"
  br i1 %224, label %"produce blur_x2110", label %after_bb2107

"produce blur_x2103":                             ; preds = %"for blur_y.s0.x.x.rebased2096"
  %18869 = icmp slt i32 %b599, %194
  %blur_x.s0.x.v1.base.s2104 = select i1 %18869, i32 %b599, i32 %194
  %t11092105 = add nsw i32 %blur_x.s0.x.v1.base.s2104, %t20812076
  %18870 = sext i32 %t11092105 to i64
  %18871 = getelementptr inbounds i16, i16* %read_input784, i64 %18870
  %18872 = getelementptr inbounds i16, i16* %18871, i64 1
  %18873 = bitcast i16* %18872 to <16 x i16>*
  %18874 = load <16 x i16>, <16 x i16>* %18873, align 2, !tbaa !396
  %18875 = getelementptr inbounds i16, i16* %18871, i64 17
  %18876 = bitcast i16* %18875 to <16 x i16>*
  %18877 = load <16 x i16>, <16 x i16>* %18876, align 2, !tbaa !396
  %18878 = getelementptr inbounds i16, i16* %18871, i64 2
  %18879 = bitcast i16* %18878 to <16 x i16>*
  %18880 = load <16 x i16>, <16 x i16>* %18879, align 2, !tbaa !396
  %18881 = getelementptr inbounds i16, i16* %18871, i64 18
  %18882 = bitcast i16* %18881 to <16 x i16>*
  %18883 = load <16 x i16>, <16 x i16>* %18882, align 2, !tbaa !396
  %18884 = bitcast i16* %18871 to <16 x i16>*
  %18885 = load <16 x i16>, <16 x i16>* %18884, align 2, !tbaa !396
  %18886 = getelementptr inbounds i16, i16* %18871, i64 16
  %18887 = bitcast i16* %18886 to <16 x i16>*
  %18888 = load <16 x i16>, <16 x i16>* %18887, align 2, !tbaa !396
  %18889 = add <16 x i16> %18880, %18874
  %18890 = add <16 x i16> %18889, %18885
  %18891 = add <16 x i16> %18883, %18877
  %18892 = add <16 x i16> %18891, %18888
  %18893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18890, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18894 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18892, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18895 = shufflevector <16 x i16> %18893, <16 x i16> %18894, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18896 = lshr <32 x i16> %18895, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18897 = shufflevector <32 x i16> %18896, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18898 = sext i32 %blur_x.s0.x.v1.base.s2104 to i64
  %18899 = add nsw i64 %18898, %18779
  %18900 = getelementptr inbounds i16, i16* %blur_x841, i64 %18899
  %18901 = bitcast i16* %18900 to <16 x i16>*
  store <16 x i16> %18897, <16 x i16>* %18901, align 2, !tbaa !399
  %18902 = shufflevector <32 x i16> %18896, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18903 = getelementptr inbounds i16, i16* %18900, i64 16
  %18904 = bitcast i16* %18903 to <16 x i16>*
  store <16 x i16> %18902, <16 x i16>* %18904, align 2, !tbaa !399
  br label %"consume blur_x2106"

"consume blur_x2106":                             ; preds = %"for blur_y.s0.x.x.rebased2096", %"produce blur_x2103"
  %18905 = sext i32 %b599 to i64
  %18906 = add nsw i64 %18782, %18905
  %18907 = getelementptr inbounds i16, i16* %blur_x841, i64 %18906
  %18908 = bitcast i16* %18907 to <16 x i16>*
  %18909 = load <16 x i16>, <16 x i16>* %18908, align 2, !tbaa !399
  %18910 = getelementptr inbounds i16, i16* %18907, i64 16
  %18911 = bitcast i16* %18910 to <16 x i16>*
  %18912 = load <16 x i16>, <16 x i16>* %18911, align 2, !tbaa !399
  %18913 = add nsw i64 %18785, %18905
  %18914 = getelementptr inbounds i16, i16* %blur_x841, i64 %18913
  %18915 = bitcast i16* %18914 to <16 x i16>*
  %18916 = load <16 x i16>, <16 x i16>* %18915, align 2, !tbaa !399
  %18917 = getelementptr inbounds i16, i16* %18914, i64 16
  %18918 = bitcast i16* %18917 to <16 x i16>*
  %18919 = load <16 x i16>, <16 x i16>* %18918, align 2, !tbaa !399
  %18920 = add nsw i64 %18788, %18905
  %18921 = getelementptr inbounds i16, i16* %blur_x841, i64 %18920
  %18922 = bitcast i16* %18921 to <16 x i16>*
  %18923 = load <16 x i16>, <16 x i16>* %18922, align 2, !tbaa !399
  %18924 = getelementptr inbounds i16, i16* %18921, i64 16
  %18925 = bitcast i16* %18924 to <16 x i16>*
  %18926 = load <16 x i16>, <16 x i16>* %18925, align 2, !tbaa !399
  %18927 = add <16 x i16> %18916, %18909
  %18928 = add <16 x i16> %18927, %18923
  %18929 = add <16 x i16> %18919, %18912
  %18930 = add <16 x i16> %18929, %18926
  %18931 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18928, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18932 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18930, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18933 = shufflevector <16 x i16> %18931, <16 x i16> %18932, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18934 = lshr <32 x i16> %18933, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18935 = shufflevector <32 x i16> %18934, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18936 = add nsw i64 %18792, %18905
  %18937 = getelementptr inbounds i16, i16* %255, i64 %18936
  %18938 = bitcast i16* %18937 to <16 x i16>*
  store <16 x i16> %18935, <16 x i16>* %18938, align 2, !tbaa !401
  %18939 = shufflevector <32 x i16> %18934, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18940 = getelementptr inbounds i16, i16* %18937, i64 16
  %18941 = bitcast i16* %18940 to <16 x i16>*
  store <16 x i16> %18939, <16 x i16>* %18941, align 2, !tbaa !401
  %18942 = add nuw nsw i32 %blur_y.s0.x.x.rebased2098, 1
  %.not2445 = icmp eq i32 %18942, %t1639861
  br i1 %.not2445, label %"end for blur_y.s0.x.x.rebased2097", label %"for blur_y.s0.x.x.rebased2096"

after_bb2107:                                     ; preds = %"end for blur_y.s0.x.x.rebased2097", %"produce blur_x2110"
  br i1 %289, label %"for blur_y.s0.x.x.rebased2122.preheader", label %"end for blur_y.s0.x.x.rebased2123", !prof !386

"for blur_y.s0.x.x.rebased2122.preheader":        ; preds = %after_bb2107
  %18943 = sext i32 %t1650914 to i64
  %18944 = zext i32 %.pre-phi3328 to i64
  %18945 = mul nsw i64 %18944, %298
  %18946 = sub nsw i64 %18945, %285
  %18947 = zext i32 %.pre-phi3332 to i64
  %18948 = mul nsw i64 %18947, %298
  %18949 = sub nsw i64 %18948, %285
  %18950 = zext i32 %.pre-phi3324 to i64
  %18951 = mul nsw i64 %18950, %298
  %18952 = sub nsw i64 %18951, %285
  %18953 = sext i32 %a339 to i64
  %18954 = add nsw i64 %18953, 28
  %18955 = mul nsw i64 %18954, %299
  %18956 = add nsw i64 %18955, %302
  br label %"for blur_y.s0.x.x.rebased2122"

"produce blur_x2110":                             ; preds = %"end for blur_y.s0.x.x.rebased2097"
  %18957 = getelementptr inbounds i16, i16* %read_input784, i64 %357
  %18958 = getelementptr inbounds i16, i16* %18957, i64 -31
  %18959 = bitcast i16* %18958 to <16 x i16>*
  %18960 = load <16 x i16>, <16 x i16>* %18959, align 2, !tbaa !396
  %18961 = getelementptr inbounds i16, i16* %18957, i64 -15
  %18962 = bitcast i16* %18961 to <16 x i16>*
  %18963 = load <16 x i16>, <16 x i16>* %18962, align 2, !tbaa !396
  %18964 = getelementptr inbounds i16, i16* %18957, i64 -30
  %18965 = bitcast i16* %18964 to <16 x i16>*
  %18966 = load <16 x i16>, <16 x i16>* %18965, align 2, !tbaa !396
  %18967 = getelementptr inbounds i16, i16* %18957, i64 -14
  %18968 = bitcast i16* %18967 to <16 x i16>*
  %18969 = load <16 x i16>, <16 x i16>* %18968, align 2, !tbaa !396
  %18970 = getelementptr inbounds i16, i16* %18957, i64 -32
  %18971 = bitcast i16* %18970 to <16 x i16>*
  %18972 = load <16 x i16>, <16 x i16>* %18971, align 2, !tbaa !396
  %18973 = getelementptr inbounds i16, i16* %18957, i64 -16
  %18974 = bitcast i16* %18973 to <16 x i16>*
  %18975 = load <16 x i16>, <16 x i16>* %18974, align 2, !tbaa !396
  %18976 = add <16 x i16> %18966, %18960
  %18977 = add <16 x i16> %18976, %18972
  %18978 = add <16 x i16> %18969, %18963
  %18979 = add <16 x i16> %18978, %18975
  %18980 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18977, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18981 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %18979, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %18982 = shufflevector <16 x i16> %18980, <16 x i16> %18981, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18983 = lshr <32 x i16> %18982, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %18984 = shufflevector <32 x i16> %18983, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %18985 = zext i32 %.pre-phi3332 to i64
  %18986 = mul nsw i64 %286, %18985
  %18987 = add nsw i64 %288, %18986
  %18988 = getelementptr inbounds i16, i16* %blur_x841, i64 %18987
  %18989 = getelementptr inbounds i16, i16* %18988, i64 -32
  %18990 = bitcast i16* %18989 to <16 x i16>*
  store <16 x i16> %18984, <16 x i16>* %18990, align 2, !tbaa !399
  %18991 = shufflevector <32 x i16> %18983, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %18992 = getelementptr inbounds i16, i16* %18988, i64 -16
  %18993 = bitcast i16* %18992 to <16 x i16>*
  store <16 x i16> %18991, <16 x i16>* %18993, align 2, !tbaa !399
  %18994 = zext i32 %.pre-phi3328 to i64
  %18995 = mul nsw i64 %18994, %298
  %18996 = add nsw i64 %18995, %283
  %18997 = getelementptr inbounds i16, i16* %blur_x841, i64 %18996
  %18998 = getelementptr inbounds i16, i16* %18997, i64 -32
  %18999 = bitcast i16* %18998 to <16 x i16>*
  %19000 = load <16 x i16>, <16 x i16>* %18999, align 2, !tbaa !399
  %19001 = getelementptr inbounds i16, i16* %18997, i64 -16
  %19002 = bitcast i16* %19001 to <16 x i16>*
  %19003 = load <16 x i16>, <16 x i16>* %19002, align 2, !tbaa !399
  %19004 = mul nsw i64 %18985, %298
  %19005 = add nsw i64 %19004, %283
  %19006 = getelementptr inbounds i16, i16* %blur_x841, i64 %19005
  %19007 = getelementptr inbounds i16, i16* %19006, i64 -32
  %19008 = bitcast i16* %19007 to <16 x i16>*
  %19009 = load <16 x i16>, <16 x i16>* %19008, align 2, !tbaa !399
  %19010 = getelementptr inbounds i16, i16* %19006, i64 -16
  %19011 = bitcast i16* %19010 to <16 x i16>*
  %19012 = load <16 x i16>, <16 x i16>* %19011, align 2, !tbaa !399
  %19013 = zext i32 %.pre-phi3324 to i64
  %19014 = mul nsw i64 %19013, %298
  %19015 = add nsw i64 %19014, %283
  %19016 = getelementptr inbounds i16, i16* %blur_x841, i64 %19015
  %19017 = getelementptr inbounds i16, i16* %19016, i64 -32
  %19018 = bitcast i16* %19017 to <16 x i16>*
  %19019 = load <16 x i16>, <16 x i16>* %19018, align 2, !tbaa !399
  %19020 = getelementptr inbounds i16, i16* %19016, i64 -16
  %19021 = bitcast i16* %19020 to <16 x i16>*
  %19022 = load <16 x i16>, <16 x i16>* %19021, align 2, !tbaa !399
  %19023 = add <16 x i16> %19009, %19000
  %19024 = add <16 x i16> %19023, %19019
  %19025 = add <16 x i16> %19012, %19003
  %19026 = add <16 x i16> %19025, %19022
  %19027 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19024, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19028 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19026, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19029 = shufflevector <16 x i16> %19027, <16 x i16> %19028, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19030 = lshr <32 x i16> %19029, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19031 = shufflevector <32 x i16> %19030, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19032 = sext i32 %a339 to i64
  %19033 = add nsw i64 %19032, 28
  %19034 = mul nsw i64 %19033, %299
  %19035 = add nsw i64 %301, %19034
  %19036 = getelementptr inbounds i16, i16* %255, i64 %19035
  %19037 = getelementptr inbounds i16, i16* %19036, i64 -32
  %19038 = bitcast i16* %19037 to <16 x i16>*
  store <16 x i16> %19031, <16 x i16>* %19038, align 2, !tbaa !401
  %19039 = shufflevector <32 x i16> %19030, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19040 = getelementptr inbounds i16, i16* %19036, i64 -16
  %19041 = bitcast i16* %19040 to <16 x i16>*
  store <16 x i16> %19039, <16 x i16>* %19041, align 2, !tbaa !401
  br label %after_bb2107

"for blur_y.s0.x.x.rebased2122":                  ; preds = %"for blur_y.s0.x.x.rebased2122.preheader", %"consume blur_x2131"
  %indvars.iv3231 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2122.preheader" ], [ %indvars.iv.next3232, %"consume blur_x2131" ]
  %19042 = add nsw i64 %indvars.iv3231, %290
  %19043 = icmp slt i64 %19042, 1
  %19044 = trunc i64 %19042 to i32
  %19045 = shl nsw i32 %19044, 5
  %19046 = icmp sgt i32 %194, %19045
  %19047 = or i1 %19043, %19046
  br i1 %19047, label %"produce blur_x2129", label %"for blur_y.s0.x.x.rebased2122.consume blur_x2131_crit_edge"

"for blur_y.s0.x.x.rebased2122.consume blur_x2131_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2122"
  %.pre3393 = shl nsw i64 %19042, 5
  br label %"consume blur_x2131"

"end for blur_y.s0.x.x.rebased2123":              ; preds = %"consume blur_x2131", %after_bb2107
  br i1 %291, label %"for blur_y.s0.x.x.rebased2139.preheader", label %"end for blur_y.s0.x.x.rebased2140", !prof !386

"for blur_y.s0.x.x.rebased2139.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2123"
  %19048 = sext i32 %t1650914 to i64
  %19049 = zext i32 %.pre-phi3328 to i64
  %19050 = mul nsw i64 %19049, %298
  %19051 = sub nsw i64 %19050, %285
  %19052 = zext i32 %.pre-phi3332 to i64
  %19053 = mul nsw i64 %19052, %298
  %19054 = sub nsw i64 %19053, %285
  %19055 = zext i32 %.pre-phi3324 to i64
  %19056 = mul nsw i64 %19055, %298
  %19057 = sub nsw i64 %19056, %285
  %19058 = sext i32 %a339 to i64
  %19059 = add nsw i64 %19058, 28
  %19060 = mul nsw i64 %19059, %299
  %19061 = add nsw i64 %19060, %302
  br label %"for blur_y.s0.x.x.rebased2139"

"produce blur_x2129":                             ; preds = %"for blur_y.s0.x.x.rebased2122"
  %t11202130 = add nsw i32 %19045, %t20972119
  %19062 = sext i32 %t11202130 to i64
  %19063 = getelementptr inbounds i16, i16* %read_input784, i64 %19062
  %19064 = getelementptr inbounds i16, i16* %19063, i64 1
  %19065 = bitcast i16* %19064 to <16 x i16>*
  %19066 = load <16 x i16>, <16 x i16>* %19065, align 2, !tbaa !396
  %19067 = getelementptr inbounds i16, i16* %19063, i64 17
  %19068 = bitcast i16* %19067 to <16 x i16>*
  %19069 = load <16 x i16>, <16 x i16>* %19068, align 2, !tbaa !396
  %19070 = getelementptr inbounds i16, i16* %19063, i64 2
  %19071 = bitcast i16* %19070 to <16 x i16>*
  %19072 = load <16 x i16>, <16 x i16>* %19071, align 2, !tbaa !396
  %19073 = getelementptr inbounds i16, i16* %19063, i64 18
  %19074 = bitcast i16* %19073 to <16 x i16>*
  %19075 = load <16 x i16>, <16 x i16>* %19074, align 2, !tbaa !396
  %19076 = bitcast i16* %19063 to <16 x i16>*
  %19077 = load <16 x i16>, <16 x i16>* %19076, align 2, !tbaa !396
  %19078 = getelementptr inbounds i16, i16* %19063, i64 16
  %19079 = bitcast i16* %19078 to <16 x i16>*
  %19080 = load <16 x i16>, <16 x i16>* %19079, align 2, !tbaa !396
  %19081 = add <16 x i16> %19072, %19066
  %19082 = add <16 x i16> %19081, %19077
  %19083 = add <16 x i16> %19075, %19069
  %19084 = add <16 x i16> %19083, %19080
  %19085 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19082, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19086 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19084, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19087 = shufflevector <16 x i16> %19085, <16 x i16> %19086, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19088 = lshr <32 x i16> %19087, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19089 = shufflevector <32 x i16> %19088, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19090 = shl nsw i64 %19042, 5
  %19091 = add nsw i64 %19090, %18943
  %19092 = getelementptr inbounds i16, i16* %blur_x841, i64 %19091
  %19093 = bitcast i16* %19092 to <16 x i16>*
  store <16 x i16> %19089, <16 x i16>* %19093, align 2, !tbaa !399
  %19094 = shufflevector <32 x i16> %19088, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19095 = getelementptr inbounds i16, i16* %19092, i64 16
  %19096 = bitcast i16* %19095 to <16 x i16>*
  store <16 x i16> %19094, <16 x i16>* %19096, align 2, !tbaa !399
  br label %"consume blur_x2131"

"consume blur_x2131":                             ; preds = %"for blur_y.s0.x.x.rebased2122.consume blur_x2131_crit_edge", %"produce blur_x2129"
  %.pre-phi3394 = phi i64 [ %.pre3393, %"for blur_y.s0.x.x.rebased2122.consume blur_x2131_crit_edge" ], [ %19090, %"produce blur_x2129" ]
  %19097 = add nsw i64 %18946, %.pre-phi3394
  %19098 = getelementptr inbounds i16, i16* %blur_x841, i64 %19097
  %19099 = bitcast i16* %19098 to <16 x i16>*
  %19100 = load <16 x i16>, <16 x i16>* %19099, align 2, !tbaa !399
  %19101 = getelementptr inbounds i16, i16* %19098, i64 16
  %19102 = bitcast i16* %19101 to <16 x i16>*
  %19103 = load <16 x i16>, <16 x i16>* %19102, align 2, !tbaa !399
  %19104 = add nsw i64 %18949, %.pre-phi3394
  %19105 = getelementptr inbounds i16, i16* %blur_x841, i64 %19104
  %19106 = bitcast i16* %19105 to <16 x i16>*
  %19107 = load <16 x i16>, <16 x i16>* %19106, align 2, !tbaa !399
  %19108 = getelementptr inbounds i16, i16* %19105, i64 16
  %19109 = bitcast i16* %19108 to <16 x i16>*
  %19110 = load <16 x i16>, <16 x i16>* %19109, align 2, !tbaa !399
  %19111 = add nsw i64 %18952, %.pre-phi3394
  %19112 = getelementptr inbounds i16, i16* %blur_x841, i64 %19111
  %19113 = bitcast i16* %19112 to <16 x i16>*
  %19114 = load <16 x i16>, <16 x i16>* %19113, align 2, !tbaa !399
  %19115 = getelementptr inbounds i16, i16* %19112, i64 16
  %19116 = bitcast i16* %19115 to <16 x i16>*
  %19117 = load <16 x i16>, <16 x i16>* %19116, align 2, !tbaa !399
  %19118 = add <16 x i16> %19107, %19100
  %19119 = add <16 x i16> %19118, %19114
  %19120 = add <16 x i16> %19110, %19103
  %19121 = add <16 x i16> %19120, %19117
  %19122 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19119, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19123 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19121, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19124 = shufflevector <16 x i16> %19122, <16 x i16> %19123, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19125 = lshr <32 x i16> %19124, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19126 = shufflevector <32 x i16> %19125, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19127 = add nsw i64 %18956, %.pre-phi3394
  %19128 = getelementptr inbounds i16, i16* %255, i64 %19127
  %19129 = bitcast i16* %19128 to <16 x i16>*
  store <16 x i16> %19126, <16 x i16>* %19129, align 2, !tbaa !401
  %19130 = shufflevector <32 x i16> %19125, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19131 = getelementptr inbounds i16, i16* %19128, i64 16
  %19132 = bitcast i16* %19131 to <16 x i16>*
  store <16 x i16> %19130, <16 x i16>* %19132, align 2, !tbaa !401
  %indvars.iv.next3232 = add nuw nsw i64 %indvars.iv3231, 1
  %.not2444 = icmp eq i64 %indvars.iv.next3232, %370
  br i1 %.not2444, label %"end for blur_y.s0.x.x.rebased2123", label %"for blur_y.s0.x.x.rebased2122"

"for blur_y.s0.x.x.rebased2139":                  ; preds = %"for blur_y.s0.x.x.rebased2139.preheader", %"consume blur_x2149"
  %blur_y.s0.x.x.rebased2141 = phi i32 [ %19211, %"consume blur_x2149" ], [ 0, %"for blur_y.s0.x.x.rebased2139.preheader" ]
  %19133 = add nsw i32 %blur_y.s0.x.x.rebased2141, %t1582776
  %a600 = shl nsw i32 %19133, 5
  %19134 = icmp sgt i32 %a327, %a600
  %b606 = select i1 %19134, i32 %a600, i32 %a327
  %19135 = icmp slt i32 %19133, 1
  %19136 = icmp sgt i32 %194, %a600
  %19137 = or i1 %19135, %19136
  br i1 %19137, label %"produce blur_x2146", label %"consume blur_x2149"

"end for blur_y.s0.x.x.rebased2140":              ; preds = %"consume blur_x2149", %"end for blur_y.s0.x.x.rebased2123"
  br i1 %224, label %"produce blur_x2153", label %after_bb2150

"produce blur_x2146":                             ; preds = %"for blur_y.s0.x.x.rebased2139"
  %19138 = icmp slt i32 %b606, %194
  %blur_x.s0.x.v1.base.s2147 = select i1 %19138, i32 %b606, i32 %194
  %t11252148 = add nsw i32 %blur_x.s0.x.v1.base.s2147, %t20972119
  %19139 = sext i32 %t11252148 to i64
  %19140 = getelementptr inbounds i16, i16* %read_input784, i64 %19139
  %19141 = getelementptr inbounds i16, i16* %19140, i64 1
  %19142 = bitcast i16* %19141 to <16 x i16>*
  %19143 = load <16 x i16>, <16 x i16>* %19142, align 2, !tbaa !396
  %19144 = getelementptr inbounds i16, i16* %19140, i64 17
  %19145 = bitcast i16* %19144 to <16 x i16>*
  %19146 = load <16 x i16>, <16 x i16>* %19145, align 2, !tbaa !396
  %19147 = getelementptr inbounds i16, i16* %19140, i64 2
  %19148 = bitcast i16* %19147 to <16 x i16>*
  %19149 = load <16 x i16>, <16 x i16>* %19148, align 2, !tbaa !396
  %19150 = getelementptr inbounds i16, i16* %19140, i64 18
  %19151 = bitcast i16* %19150 to <16 x i16>*
  %19152 = load <16 x i16>, <16 x i16>* %19151, align 2, !tbaa !396
  %19153 = bitcast i16* %19140 to <16 x i16>*
  %19154 = load <16 x i16>, <16 x i16>* %19153, align 2, !tbaa !396
  %19155 = getelementptr inbounds i16, i16* %19140, i64 16
  %19156 = bitcast i16* %19155 to <16 x i16>*
  %19157 = load <16 x i16>, <16 x i16>* %19156, align 2, !tbaa !396
  %19158 = add <16 x i16> %19149, %19143
  %19159 = add <16 x i16> %19158, %19154
  %19160 = add <16 x i16> %19152, %19146
  %19161 = add <16 x i16> %19160, %19157
  %19162 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19159, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19163 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19161, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19164 = shufflevector <16 x i16> %19162, <16 x i16> %19163, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19165 = lshr <32 x i16> %19164, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19166 = shufflevector <32 x i16> %19165, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19167 = sext i32 %blur_x.s0.x.v1.base.s2147 to i64
  %19168 = add nsw i64 %19167, %19048
  %19169 = getelementptr inbounds i16, i16* %blur_x841, i64 %19168
  %19170 = bitcast i16* %19169 to <16 x i16>*
  store <16 x i16> %19166, <16 x i16>* %19170, align 2, !tbaa !399
  %19171 = shufflevector <32 x i16> %19165, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19172 = getelementptr inbounds i16, i16* %19169, i64 16
  %19173 = bitcast i16* %19172 to <16 x i16>*
  store <16 x i16> %19171, <16 x i16>* %19173, align 2, !tbaa !399
  br label %"consume blur_x2149"

"consume blur_x2149":                             ; preds = %"for blur_y.s0.x.x.rebased2139", %"produce blur_x2146"
  %19174 = sext i32 %b606 to i64
  %19175 = add nsw i64 %19051, %19174
  %19176 = getelementptr inbounds i16, i16* %blur_x841, i64 %19175
  %19177 = bitcast i16* %19176 to <16 x i16>*
  %19178 = load <16 x i16>, <16 x i16>* %19177, align 2, !tbaa !399
  %19179 = getelementptr inbounds i16, i16* %19176, i64 16
  %19180 = bitcast i16* %19179 to <16 x i16>*
  %19181 = load <16 x i16>, <16 x i16>* %19180, align 2, !tbaa !399
  %19182 = add nsw i64 %19054, %19174
  %19183 = getelementptr inbounds i16, i16* %blur_x841, i64 %19182
  %19184 = bitcast i16* %19183 to <16 x i16>*
  %19185 = load <16 x i16>, <16 x i16>* %19184, align 2, !tbaa !399
  %19186 = getelementptr inbounds i16, i16* %19183, i64 16
  %19187 = bitcast i16* %19186 to <16 x i16>*
  %19188 = load <16 x i16>, <16 x i16>* %19187, align 2, !tbaa !399
  %19189 = add nsw i64 %19057, %19174
  %19190 = getelementptr inbounds i16, i16* %blur_x841, i64 %19189
  %19191 = bitcast i16* %19190 to <16 x i16>*
  %19192 = load <16 x i16>, <16 x i16>* %19191, align 2, !tbaa !399
  %19193 = getelementptr inbounds i16, i16* %19190, i64 16
  %19194 = bitcast i16* %19193 to <16 x i16>*
  %19195 = load <16 x i16>, <16 x i16>* %19194, align 2, !tbaa !399
  %19196 = add <16 x i16> %19185, %19178
  %19197 = add <16 x i16> %19196, %19192
  %19198 = add <16 x i16> %19188, %19181
  %19199 = add <16 x i16> %19198, %19195
  %19200 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19197, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19201 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19199, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19202 = shufflevector <16 x i16> %19200, <16 x i16> %19201, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19203 = lshr <32 x i16> %19202, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19204 = shufflevector <32 x i16> %19203, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19205 = add nsw i64 %19061, %19174
  %19206 = getelementptr inbounds i16, i16* %255, i64 %19205
  %19207 = bitcast i16* %19206 to <16 x i16>*
  store <16 x i16> %19204, <16 x i16>* %19207, align 2, !tbaa !401
  %19208 = shufflevector <32 x i16> %19203, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19209 = getelementptr inbounds i16, i16* %19206, i64 16
  %19210 = bitcast i16* %19209 to <16 x i16>*
  store <16 x i16> %19208, <16 x i16>* %19210, align 2, !tbaa !401
  %19211 = add nuw nsw i32 %blur_y.s0.x.x.rebased2141, 1
  %.not2443 = icmp eq i32 %19211, %t1639861
  br i1 %.not2443, label %"end for blur_y.s0.x.x.rebased2140", label %"for blur_y.s0.x.x.rebased2139"

after_bb2150:                                     ; preds = %"end for blur_y.s0.x.x.rebased2140", %"produce blur_x2153"
  br i1 %289, label %"for blur_y.s0.x.x.rebased2165.preheader", label %"end for blur_y.s0.x.x.rebased2166", !prof !386

"for blur_y.s0.x.x.rebased2165.preheader":        ; preds = %after_bb2150
  %19212 = sext i32 %t1666957 to i64
  %19213 = zext i32 %.pre-phi3332 to i64
  %19214 = mul nsw i64 %19213, %298
  %19215 = sub nsw i64 %19214, %285
  %19216 = zext i32 %.pre-phi3338 to i64
  %19217 = mul nsw i64 %19216, %298
  %19218 = sub nsw i64 %19217, %285
  %19219 = zext i32 %.pre-phi3328 to i64
  %19220 = mul nsw i64 %19219, %298
  %19221 = sub nsw i64 %19220, %285
  %19222 = sext i32 %a339 to i64
  %19223 = add nsw i64 %19222, 29
  %19224 = mul nsw i64 %19223, %299
  %19225 = add nsw i64 %19224, %302
  br label %"for blur_y.s0.x.x.rebased2165"

"produce blur_x2153":                             ; preds = %"end for blur_y.s0.x.x.rebased2140"
  %19226 = getelementptr inbounds i16, i16* %read_input784, i64 %359
  %19227 = getelementptr inbounds i16, i16* %19226, i64 -31
  %19228 = bitcast i16* %19227 to <16 x i16>*
  %19229 = load <16 x i16>, <16 x i16>* %19228, align 2, !tbaa !396
  %19230 = getelementptr inbounds i16, i16* %19226, i64 -15
  %19231 = bitcast i16* %19230 to <16 x i16>*
  %19232 = load <16 x i16>, <16 x i16>* %19231, align 2, !tbaa !396
  %19233 = getelementptr inbounds i16, i16* %19226, i64 -30
  %19234 = bitcast i16* %19233 to <16 x i16>*
  %19235 = load <16 x i16>, <16 x i16>* %19234, align 2, !tbaa !396
  %19236 = getelementptr inbounds i16, i16* %19226, i64 -14
  %19237 = bitcast i16* %19236 to <16 x i16>*
  %19238 = load <16 x i16>, <16 x i16>* %19237, align 2, !tbaa !396
  %19239 = getelementptr inbounds i16, i16* %19226, i64 -32
  %19240 = bitcast i16* %19239 to <16 x i16>*
  %19241 = load <16 x i16>, <16 x i16>* %19240, align 2, !tbaa !396
  %19242 = getelementptr inbounds i16, i16* %19226, i64 -16
  %19243 = bitcast i16* %19242 to <16 x i16>*
  %19244 = load <16 x i16>, <16 x i16>* %19243, align 2, !tbaa !396
  %19245 = add <16 x i16> %19235, %19229
  %19246 = add <16 x i16> %19245, %19241
  %19247 = add <16 x i16> %19238, %19232
  %19248 = add <16 x i16> %19247, %19244
  %19249 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19246, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19250 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19248, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19251 = shufflevector <16 x i16> %19249, <16 x i16> %19250, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19252 = lshr <32 x i16> %19251, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19253 = shufflevector <32 x i16> %19252, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19254 = zext i32 %.pre-phi3338 to i64
  %19255 = mul nsw i64 %286, %19254
  %19256 = add nsw i64 %288, %19255
  %19257 = getelementptr inbounds i16, i16* %blur_x841, i64 %19256
  %19258 = getelementptr inbounds i16, i16* %19257, i64 -32
  %19259 = bitcast i16* %19258 to <16 x i16>*
  store <16 x i16> %19253, <16 x i16>* %19259, align 2, !tbaa !399
  %19260 = shufflevector <32 x i16> %19252, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19261 = getelementptr inbounds i16, i16* %19257, i64 -16
  %19262 = bitcast i16* %19261 to <16 x i16>*
  store <16 x i16> %19260, <16 x i16>* %19262, align 2, !tbaa !399
  %19263 = zext i32 %.pre-phi3332 to i64
  %19264 = mul nsw i64 %19263, %298
  %19265 = add nsw i64 %19264, %283
  %19266 = getelementptr inbounds i16, i16* %blur_x841, i64 %19265
  %19267 = getelementptr inbounds i16, i16* %19266, i64 -32
  %19268 = bitcast i16* %19267 to <16 x i16>*
  %19269 = load <16 x i16>, <16 x i16>* %19268, align 2, !tbaa !399
  %19270 = getelementptr inbounds i16, i16* %19266, i64 -16
  %19271 = bitcast i16* %19270 to <16 x i16>*
  %19272 = load <16 x i16>, <16 x i16>* %19271, align 2, !tbaa !399
  %19273 = mul nsw i64 %19254, %298
  %19274 = add nsw i64 %19273, %283
  %19275 = getelementptr inbounds i16, i16* %blur_x841, i64 %19274
  %19276 = getelementptr inbounds i16, i16* %19275, i64 -32
  %19277 = bitcast i16* %19276 to <16 x i16>*
  %19278 = load <16 x i16>, <16 x i16>* %19277, align 2, !tbaa !399
  %19279 = getelementptr inbounds i16, i16* %19275, i64 -16
  %19280 = bitcast i16* %19279 to <16 x i16>*
  %19281 = load <16 x i16>, <16 x i16>* %19280, align 2, !tbaa !399
  %19282 = zext i32 %.pre-phi3328 to i64
  %19283 = mul nsw i64 %19282, %298
  %19284 = add nsw i64 %19283, %283
  %19285 = getelementptr inbounds i16, i16* %blur_x841, i64 %19284
  %19286 = getelementptr inbounds i16, i16* %19285, i64 -32
  %19287 = bitcast i16* %19286 to <16 x i16>*
  %19288 = load <16 x i16>, <16 x i16>* %19287, align 2, !tbaa !399
  %19289 = getelementptr inbounds i16, i16* %19285, i64 -16
  %19290 = bitcast i16* %19289 to <16 x i16>*
  %19291 = load <16 x i16>, <16 x i16>* %19290, align 2, !tbaa !399
  %19292 = add <16 x i16> %19278, %19269
  %19293 = add <16 x i16> %19292, %19288
  %19294 = add <16 x i16> %19281, %19272
  %19295 = add <16 x i16> %19294, %19291
  %19296 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19293, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19297 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19295, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19298 = shufflevector <16 x i16> %19296, <16 x i16> %19297, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19299 = lshr <32 x i16> %19298, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19300 = shufflevector <32 x i16> %19299, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19301 = sext i32 %a339 to i64
  %19302 = add nsw i64 %19301, 29
  %19303 = mul nsw i64 %19302, %299
  %19304 = add nsw i64 %301, %19303
  %19305 = getelementptr inbounds i16, i16* %255, i64 %19304
  %19306 = getelementptr inbounds i16, i16* %19305, i64 -32
  %19307 = bitcast i16* %19306 to <16 x i16>*
  store <16 x i16> %19300, <16 x i16>* %19307, align 2, !tbaa !401
  %19308 = shufflevector <32 x i16> %19299, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19309 = getelementptr inbounds i16, i16* %19305, i64 -16
  %19310 = bitcast i16* %19309 to <16 x i16>*
  store <16 x i16> %19308, <16 x i16>* %19310, align 2, !tbaa !401
  br label %after_bb2150

"for blur_y.s0.x.x.rebased2165":                  ; preds = %"for blur_y.s0.x.x.rebased2165.preheader", %"consume blur_x2174"
  %indvars.iv3234 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2165.preheader" ], [ %indvars.iv.next3235, %"consume blur_x2174" ]
  %19311 = add nsw i64 %indvars.iv3234, %290
  %19312 = icmp slt i64 %19311, 1
  %19313 = trunc i64 %19311 to i32
  %19314 = shl nsw i32 %19313, 5
  %19315 = icmp sgt i32 %194, %19314
  %19316 = or i1 %19312, %19315
  br i1 %19316, label %"produce blur_x2172", label %"for blur_y.s0.x.x.rebased2165.consume blur_x2174_crit_edge"

"for blur_y.s0.x.x.rebased2165.consume blur_x2174_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2165"
  %.pre3395 = shl nsw i64 %19311, 5
  br label %"consume blur_x2174"

"end for blur_y.s0.x.x.rebased2166":              ; preds = %"consume blur_x2174", %after_bb2150
  br i1 %291, label %"for blur_y.s0.x.x.rebased2182.preheader", label %"end for blur_y.s0.x.x.rebased2183", !prof !386

"for blur_y.s0.x.x.rebased2182.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2166"
  %19317 = sext i32 %t1666957 to i64
  %19318 = zext i32 %.pre-phi3332 to i64
  %19319 = mul nsw i64 %19318, %298
  %19320 = sub nsw i64 %19319, %285
  %19321 = zext i32 %.pre-phi3338 to i64
  %19322 = mul nsw i64 %19321, %298
  %19323 = sub nsw i64 %19322, %285
  %19324 = zext i32 %.pre-phi3328 to i64
  %19325 = mul nsw i64 %19324, %298
  %19326 = sub nsw i64 %19325, %285
  %19327 = sext i32 %a339 to i64
  %19328 = add nsw i64 %19327, 29
  %19329 = mul nsw i64 %19328, %299
  %19330 = add nsw i64 %19329, %302
  br label %"for blur_y.s0.x.x.rebased2182"

"produce blur_x2172":                             ; preds = %"for blur_y.s0.x.x.rebased2165"
  %t11362173 = add nsw i32 %19314, %t21132162
  %19331 = sext i32 %t11362173 to i64
  %19332 = getelementptr inbounds i16, i16* %read_input784, i64 %19331
  %19333 = getelementptr inbounds i16, i16* %19332, i64 1
  %19334 = bitcast i16* %19333 to <16 x i16>*
  %19335 = load <16 x i16>, <16 x i16>* %19334, align 2, !tbaa !396
  %19336 = getelementptr inbounds i16, i16* %19332, i64 17
  %19337 = bitcast i16* %19336 to <16 x i16>*
  %19338 = load <16 x i16>, <16 x i16>* %19337, align 2, !tbaa !396
  %19339 = getelementptr inbounds i16, i16* %19332, i64 2
  %19340 = bitcast i16* %19339 to <16 x i16>*
  %19341 = load <16 x i16>, <16 x i16>* %19340, align 2, !tbaa !396
  %19342 = getelementptr inbounds i16, i16* %19332, i64 18
  %19343 = bitcast i16* %19342 to <16 x i16>*
  %19344 = load <16 x i16>, <16 x i16>* %19343, align 2, !tbaa !396
  %19345 = bitcast i16* %19332 to <16 x i16>*
  %19346 = load <16 x i16>, <16 x i16>* %19345, align 2, !tbaa !396
  %19347 = getelementptr inbounds i16, i16* %19332, i64 16
  %19348 = bitcast i16* %19347 to <16 x i16>*
  %19349 = load <16 x i16>, <16 x i16>* %19348, align 2, !tbaa !396
  %19350 = add <16 x i16> %19341, %19335
  %19351 = add <16 x i16> %19350, %19346
  %19352 = add <16 x i16> %19344, %19338
  %19353 = add <16 x i16> %19352, %19349
  %19354 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19351, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19355 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19353, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19356 = shufflevector <16 x i16> %19354, <16 x i16> %19355, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19357 = lshr <32 x i16> %19356, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19358 = shufflevector <32 x i16> %19357, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19359 = shl nsw i64 %19311, 5
  %19360 = add nsw i64 %19359, %19212
  %19361 = getelementptr inbounds i16, i16* %blur_x841, i64 %19360
  %19362 = bitcast i16* %19361 to <16 x i16>*
  store <16 x i16> %19358, <16 x i16>* %19362, align 2, !tbaa !399
  %19363 = shufflevector <32 x i16> %19357, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19364 = getelementptr inbounds i16, i16* %19361, i64 16
  %19365 = bitcast i16* %19364 to <16 x i16>*
  store <16 x i16> %19363, <16 x i16>* %19365, align 2, !tbaa !399
  br label %"consume blur_x2174"

"consume blur_x2174":                             ; preds = %"for blur_y.s0.x.x.rebased2165.consume blur_x2174_crit_edge", %"produce blur_x2172"
  %.pre-phi3396 = phi i64 [ %.pre3395, %"for blur_y.s0.x.x.rebased2165.consume blur_x2174_crit_edge" ], [ %19359, %"produce blur_x2172" ]
  %19366 = add nsw i64 %19215, %.pre-phi3396
  %19367 = getelementptr inbounds i16, i16* %blur_x841, i64 %19366
  %19368 = bitcast i16* %19367 to <16 x i16>*
  %19369 = load <16 x i16>, <16 x i16>* %19368, align 2, !tbaa !399
  %19370 = getelementptr inbounds i16, i16* %19367, i64 16
  %19371 = bitcast i16* %19370 to <16 x i16>*
  %19372 = load <16 x i16>, <16 x i16>* %19371, align 2, !tbaa !399
  %19373 = add nsw i64 %19218, %.pre-phi3396
  %19374 = getelementptr inbounds i16, i16* %blur_x841, i64 %19373
  %19375 = bitcast i16* %19374 to <16 x i16>*
  %19376 = load <16 x i16>, <16 x i16>* %19375, align 2, !tbaa !399
  %19377 = getelementptr inbounds i16, i16* %19374, i64 16
  %19378 = bitcast i16* %19377 to <16 x i16>*
  %19379 = load <16 x i16>, <16 x i16>* %19378, align 2, !tbaa !399
  %19380 = add nsw i64 %19221, %.pre-phi3396
  %19381 = getelementptr inbounds i16, i16* %blur_x841, i64 %19380
  %19382 = bitcast i16* %19381 to <16 x i16>*
  %19383 = load <16 x i16>, <16 x i16>* %19382, align 2, !tbaa !399
  %19384 = getelementptr inbounds i16, i16* %19381, i64 16
  %19385 = bitcast i16* %19384 to <16 x i16>*
  %19386 = load <16 x i16>, <16 x i16>* %19385, align 2, !tbaa !399
  %19387 = add <16 x i16> %19376, %19369
  %19388 = add <16 x i16> %19387, %19383
  %19389 = add <16 x i16> %19379, %19372
  %19390 = add <16 x i16> %19389, %19386
  %19391 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19388, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19392 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19390, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19393 = shufflevector <16 x i16> %19391, <16 x i16> %19392, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19394 = lshr <32 x i16> %19393, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19395 = shufflevector <32 x i16> %19394, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19396 = add nsw i64 %19225, %.pre-phi3396
  %19397 = getelementptr inbounds i16, i16* %255, i64 %19396
  %19398 = bitcast i16* %19397 to <16 x i16>*
  store <16 x i16> %19395, <16 x i16>* %19398, align 2, !tbaa !401
  %19399 = shufflevector <32 x i16> %19394, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19400 = getelementptr inbounds i16, i16* %19397, i64 16
  %19401 = bitcast i16* %19400 to <16 x i16>*
  store <16 x i16> %19399, <16 x i16>* %19401, align 2, !tbaa !401
  %indvars.iv.next3235 = add nuw nsw i64 %indvars.iv3234, 1
  %.not2442 = icmp eq i64 %indvars.iv.next3235, %370
  br i1 %.not2442, label %"end for blur_y.s0.x.x.rebased2166", label %"for blur_y.s0.x.x.rebased2165"

"for blur_y.s0.x.x.rebased2182":                  ; preds = %"for blur_y.s0.x.x.rebased2182.preheader", %"consume blur_x2192"
  %blur_y.s0.x.x.rebased2184 = phi i32 [ %19480, %"consume blur_x2192" ], [ 0, %"for blur_y.s0.x.x.rebased2182.preheader" ]
  %19402 = add nsw i32 %blur_y.s0.x.x.rebased2184, %t1582776
  %a607 = shl nsw i32 %19402, 5
  %19403 = icmp sgt i32 %a327, %a607
  %b613 = select i1 %19403, i32 %a607, i32 %a327
  %19404 = icmp slt i32 %19402, 1
  %19405 = icmp sgt i32 %194, %a607
  %19406 = or i1 %19404, %19405
  br i1 %19406, label %"produce blur_x2189", label %"consume blur_x2192"

"end for blur_y.s0.x.x.rebased2183":              ; preds = %"consume blur_x2192", %"end for blur_y.s0.x.x.rebased2166"
  br i1 %224, label %"produce blur_x2196", label %after_bb2193

"produce blur_x2189":                             ; preds = %"for blur_y.s0.x.x.rebased2182"
  %19407 = icmp slt i32 %b613, %194
  %blur_x.s0.x.v1.base.s2190 = select i1 %19407, i32 %b613, i32 %194
  %t11412191 = add nsw i32 %blur_x.s0.x.v1.base.s2190, %t21132162
  %19408 = sext i32 %t11412191 to i64
  %19409 = getelementptr inbounds i16, i16* %read_input784, i64 %19408
  %19410 = getelementptr inbounds i16, i16* %19409, i64 1
  %19411 = bitcast i16* %19410 to <16 x i16>*
  %19412 = load <16 x i16>, <16 x i16>* %19411, align 2, !tbaa !396
  %19413 = getelementptr inbounds i16, i16* %19409, i64 17
  %19414 = bitcast i16* %19413 to <16 x i16>*
  %19415 = load <16 x i16>, <16 x i16>* %19414, align 2, !tbaa !396
  %19416 = getelementptr inbounds i16, i16* %19409, i64 2
  %19417 = bitcast i16* %19416 to <16 x i16>*
  %19418 = load <16 x i16>, <16 x i16>* %19417, align 2, !tbaa !396
  %19419 = getelementptr inbounds i16, i16* %19409, i64 18
  %19420 = bitcast i16* %19419 to <16 x i16>*
  %19421 = load <16 x i16>, <16 x i16>* %19420, align 2, !tbaa !396
  %19422 = bitcast i16* %19409 to <16 x i16>*
  %19423 = load <16 x i16>, <16 x i16>* %19422, align 2, !tbaa !396
  %19424 = getelementptr inbounds i16, i16* %19409, i64 16
  %19425 = bitcast i16* %19424 to <16 x i16>*
  %19426 = load <16 x i16>, <16 x i16>* %19425, align 2, !tbaa !396
  %19427 = add <16 x i16> %19418, %19412
  %19428 = add <16 x i16> %19427, %19423
  %19429 = add <16 x i16> %19421, %19415
  %19430 = add <16 x i16> %19429, %19426
  %19431 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19428, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19432 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19430, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19433 = shufflevector <16 x i16> %19431, <16 x i16> %19432, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19434 = lshr <32 x i16> %19433, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19435 = shufflevector <32 x i16> %19434, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19436 = sext i32 %blur_x.s0.x.v1.base.s2190 to i64
  %19437 = add nsw i64 %19436, %19317
  %19438 = getelementptr inbounds i16, i16* %blur_x841, i64 %19437
  %19439 = bitcast i16* %19438 to <16 x i16>*
  store <16 x i16> %19435, <16 x i16>* %19439, align 2, !tbaa !399
  %19440 = shufflevector <32 x i16> %19434, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19441 = getelementptr inbounds i16, i16* %19438, i64 16
  %19442 = bitcast i16* %19441 to <16 x i16>*
  store <16 x i16> %19440, <16 x i16>* %19442, align 2, !tbaa !399
  br label %"consume blur_x2192"

"consume blur_x2192":                             ; preds = %"for blur_y.s0.x.x.rebased2182", %"produce blur_x2189"
  %19443 = sext i32 %b613 to i64
  %19444 = add nsw i64 %19320, %19443
  %19445 = getelementptr inbounds i16, i16* %blur_x841, i64 %19444
  %19446 = bitcast i16* %19445 to <16 x i16>*
  %19447 = load <16 x i16>, <16 x i16>* %19446, align 2, !tbaa !399
  %19448 = getelementptr inbounds i16, i16* %19445, i64 16
  %19449 = bitcast i16* %19448 to <16 x i16>*
  %19450 = load <16 x i16>, <16 x i16>* %19449, align 2, !tbaa !399
  %19451 = add nsw i64 %19323, %19443
  %19452 = getelementptr inbounds i16, i16* %blur_x841, i64 %19451
  %19453 = bitcast i16* %19452 to <16 x i16>*
  %19454 = load <16 x i16>, <16 x i16>* %19453, align 2, !tbaa !399
  %19455 = getelementptr inbounds i16, i16* %19452, i64 16
  %19456 = bitcast i16* %19455 to <16 x i16>*
  %19457 = load <16 x i16>, <16 x i16>* %19456, align 2, !tbaa !399
  %19458 = add nsw i64 %19326, %19443
  %19459 = getelementptr inbounds i16, i16* %blur_x841, i64 %19458
  %19460 = bitcast i16* %19459 to <16 x i16>*
  %19461 = load <16 x i16>, <16 x i16>* %19460, align 2, !tbaa !399
  %19462 = getelementptr inbounds i16, i16* %19459, i64 16
  %19463 = bitcast i16* %19462 to <16 x i16>*
  %19464 = load <16 x i16>, <16 x i16>* %19463, align 2, !tbaa !399
  %19465 = add <16 x i16> %19454, %19447
  %19466 = add <16 x i16> %19465, %19461
  %19467 = add <16 x i16> %19457, %19450
  %19468 = add <16 x i16> %19467, %19464
  %19469 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19466, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19470 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19468, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19471 = shufflevector <16 x i16> %19469, <16 x i16> %19470, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19472 = lshr <32 x i16> %19471, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19473 = shufflevector <32 x i16> %19472, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19474 = add nsw i64 %19330, %19443
  %19475 = getelementptr inbounds i16, i16* %255, i64 %19474
  %19476 = bitcast i16* %19475 to <16 x i16>*
  store <16 x i16> %19473, <16 x i16>* %19476, align 2, !tbaa !401
  %19477 = shufflevector <32 x i16> %19472, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19478 = getelementptr inbounds i16, i16* %19475, i64 16
  %19479 = bitcast i16* %19478 to <16 x i16>*
  store <16 x i16> %19477, <16 x i16>* %19479, align 2, !tbaa !401
  %19480 = add nuw nsw i32 %blur_y.s0.x.x.rebased2184, 1
  %.not2441 = icmp eq i32 %19480, %t1639861
  br i1 %.not2441, label %"end for blur_y.s0.x.x.rebased2183", label %"for blur_y.s0.x.x.rebased2182"

after_bb2193:                                     ; preds = %"end for blur_y.s0.x.x.rebased2183", %"produce blur_x2196"
  br i1 %289, label %"for blur_y.s0.x.x.rebased2208.preheader", label %"end for blur_y.s0.x.x.rebased2209", !prof !386

"for blur_y.s0.x.x.rebased2208.preheader":        ; preds = %after_bb2193
  %19481 = sext i32 %t1638848 to i64
  %19482 = zext i32 %.pre-phi3338 to i64
  %19483 = mul nsw i64 %19482, %298
  %19484 = sub nsw i64 %19483, %285
  %19485 = zext i32 %.pre-phi3324 to i64
  %19486 = mul nsw i64 %19485, %298
  %19487 = sub nsw i64 %19486, %285
  %19488 = zext i32 %.pre-phi3332 to i64
  %19489 = mul nsw i64 %19488, %298
  %19490 = sub nsw i64 %19489, %285
  %19491 = sext i32 %a339 to i64
  %19492 = add nsw i64 %19491, 30
  %19493 = mul nsw i64 %19492, %299
  %19494 = add nsw i64 %19493, %302
  br label %"for blur_y.s0.x.x.rebased2208"

"produce blur_x2196":                             ; preds = %"end for blur_y.s0.x.x.rebased2183"
  %19495 = getelementptr inbounds i16, i16* %read_input784, i64 %361
  %19496 = getelementptr inbounds i16, i16* %19495, i64 -31
  %19497 = bitcast i16* %19496 to <16 x i16>*
  %19498 = load <16 x i16>, <16 x i16>* %19497, align 2, !tbaa !396
  %19499 = getelementptr inbounds i16, i16* %19495, i64 -15
  %19500 = bitcast i16* %19499 to <16 x i16>*
  %19501 = load <16 x i16>, <16 x i16>* %19500, align 2, !tbaa !396
  %19502 = getelementptr inbounds i16, i16* %19495, i64 -30
  %19503 = bitcast i16* %19502 to <16 x i16>*
  %19504 = load <16 x i16>, <16 x i16>* %19503, align 2, !tbaa !396
  %19505 = getelementptr inbounds i16, i16* %19495, i64 -14
  %19506 = bitcast i16* %19505 to <16 x i16>*
  %19507 = load <16 x i16>, <16 x i16>* %19506, align 2, !tbaa !396
  %19508 = getelementptr inbounds i16, i16* %19495, i64 -32
  %19509 = bitcast i16* %19508 to <16 x i16>*
  %19510 = load <16 x i16>, <16 x i16>* %19509, align 2, !tbaa !396
  %19511 = getelementptr inbounds i16, i16* %19495, i64 -16
  %19512 = bitcast i16* %19511 to <16 x i16>*
  %19513 = load <16 x i16>, <16 x i16>* %19512, align 2, !tbaa !396
  %19514 = add <16 x i16> %19504, %19498
  %19515 = add <16 x i16> %19514, %19510
  %19516 = add <16 x i16> %19507, %19501
  %19517 = add <16 x i16> %19516, %19513
  %19518 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19515, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19519 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19517, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19520 = shufflevector <16 x i16> %19518, <16 x i16> %19519, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19521 = lshr <32 x i16> %19520, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19522 = shufflevector <32 x i16> %19521, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19523 = zext i32 %.pre-phi3324 to i64
  %19524 = mul nsw i64 %286, %19523
  %19525 = add nsw i64 %288, %19524
  %19526 = getelementptr inbounds i16, i16* %blur_x841, i64 %19525
  %19527 = getelementptr inbounds i16, i16* %19526, i64 -32
  %19528 = bitcast i16* %19527 to <16 x i16>*
  store <16 x i16> %19522, <16 x i16>* %19528, align 2, !tbaa !399
  %19529 = shufflevector <32 x i16> %19521, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19530 = getelementptr inbounds i16, i16* %19526, i64 -16
  %19531 = bitcast i16* %19530 to <16 x i16>*
  store <16 x i16> %19529, <16 x i16>* %19531, align 2, !tbaa !399
  %19532 = zext i32 %.pre-phi3338 to i64
  %19533 = mul nsw i64 %19532, %298
  %19534 = add nsw i64 %19533, %283
  %19535 = getelementptr inbounds i16, i16* %blur_x841, i64 %19534
  %19536 = getelementptr inbounds i16, i16* %19535, i64 -32
  %19537 = bitcast i16* %19536 to <16 x i16>*
  %19538 = load <16 x i16>, <16 x i16>* %19537, align 2, !tbaa !399
  %19539 = getelementptr inbounds i16, i16* %19535, i64 -16
  %19540 = bitcast i16* %19539 to <16 x i16>*
  %19541 = load <16 x i16>, <16 x i16>* %19540, align 2, !tbaa !399
  %19542 = mul nsw i64 %19523, %298
  %19543 = add nsw i64 %19542, %283
  %19544 = getelementptr inbounds i16, i16* %blur_x841, i64 %19543
  %19545 = getelementptr inbounds i16, i16* %19544, i64 -32
  %19546 = bitcast i16* %19545 to <16 x i16>*
  %19547 = load <16 x i16>, <16 x i16>* %19546, align 2, !tbaa !399
  %19548 = getelementptr inbounds i16, i16* %19544, i64 -16
  %19549 = bitcast i16* %19548 to <16 x i16>*
  %19550 = load <16 x i16>, <16 x i16>* %19549, align 2, !tbaa !399
  %19551 = zext i32 %.pre-phi3332 to i64
  %19552 = mul nsw i64 %19551, %298
  %19553 = add nsw i64 %19552, %283
  %19554 = getelementptr inbounds i16, i16* %blur_x841, i64 %19553
  %19555 = getelementptr inbounds i16, i16* %19554, i64 -32
  %19556 = bitcast i16* %19555 to <16 x i16>*
  %19557 = load <16 x i16>, <16 x i16>* %19556, align 2, !tbaa !399
  %19558 = getelementptr inbounds i16, i16* %19554, i64 -16
  %19559 = bitcast i16* %19558 to <16 x i16>*
  %19560 = load <16 x i16>, <16 x i16>* %19559, align 2, !tbaa !399
  %19561 = add <16 x i16> %19547, %19538
  %19562 = add <16 x i16> %19561, %19557
  %19563 = add <16 x i16> %19550, %19541
  %19564 = add <16 x i16> %19563, %19560
  %19565 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19562, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19566 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19564, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19567 = shufflevector <16 x i16> %19565, <16 x i16> %19566, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19568 = lshr <32 x i16> %19567, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19569 = shufflevector <32 x i16> %19568, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19570 = sext i32 %a339 to i64
  %19571 = add nsw i64 %19570, 30
  %19572 = mul nsw i64 %19571, %299
  %19573 = add nsw i64 %301, %19572
  %19574 = getelementptr inbounds i16, i16* %255, i64 %19573
  %19575 = getelementptr inbounds i16, i16* %19574, i64 -32
  %19576 = bitcast i16* %19575 to <16 x i16>*
  store <16 x i16> %19569, <16 x i16>* %19576, align 2, !tbaa !401
  %19577 = shufflevector <32 x i16> %19568, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19578 = getelementptr inbounds i16, i16* %19574, i64 -16
  %19579 = bitcast i16* %19578 to <16 x i16>*
  store <16 x i16> %19577, <16 x i16>* %19579, align 2, !tbaa !401
  br label %after_bb2193

"for blur_y.s0.x.x.rebased2208":                  ; preds = %"for blur_y.s0.x.x.rebased2208.preheader", %"consume blur_x2217"
  %indvars.iv3237 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2208.preheader" ], [ %indvars.iv.next3238, %"consume blur_x2217" ]
  %19580 = add nsw i64 %indvars.iv3237, %290
  %19581 = icmp slt i64 %19580, 1
  %19582 = trunc i64 %19580 to i32
  %19583 = shl nsw i32 %19582, 5
  %19584 = icmp sgt i32 %194, %19583
  %19585 = or i1 %19581, %19584
  br i1 %19585, label %"produce blur_x2215", label %"for blur_y.s0.x.x.rebased2208.consume blur_x2217_crit_edge"

"for blur_y.s0.x.x.rebased2208.consume blur_x2217_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2208"
  %.pre3397 = shl nsw i64 %19580, 5
  br label %"consume blur_x2217"

"end for blur_y.s0.x.x.rebased2209":              ; preds = %"consume blur_x2217", %after_bb2193
  br i1 %291, label %"for blur_y.s0.x.x.rebased2225.preheader", label %"end for blur_y.s0.x.x.rebased2226", !prof !386

"for blur_y.s0.x.x.rebased2225.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2209"
  %19586 = sext i32 %t1638848 to i64
  %19587 = zext i32 %.pre-phi3338 to i64
  %19588 = mul nsw i64 %19587, %298
  %19589 = sub nsw i64 %19588, %285
  %19590 = zext i32 %.pre-phi3324 to i64
  %19591 = mul nsw i64 %19590, %298
  %19592 = sub nsw i64 %19591, %285
  %19593 = zext i32 %.pre-phi3332 to i64
  %19594 = mul nsw i64 %19593, %298
  %19595 = sub nsw i64 %19594, %285
  %19596 = sext i32 %a339 to i64
  %19597 = add nsw i64 %19596, 30
  %19598 = mul nsw i64 %19597, %299
  %19599 = add nsw i64 %19598, %302
  br label %"for blur_y.s0.x.x.rebased2225"

"produce blur_x2215":                             ; preds = %"for blur_y.s0.x.x.rebased2208"
  %t11522216 = add nsw i32 %19583, %t21292205
  %19600 = sext i32 %t11522216 to i64
  %19601 = getelementptr inbounds i16, i16* %read_input784, i64 %19600
  %19602 = getelementptr inbounds i16, i16* %19601, i64 1
  %19603 = bitcast i16* %19602 to <16 x i16>*
  %19604 = load <16 x i16>, <16 x i16>* %19603, align 2, !tbaa !396
  %19605 = getelementptr inbounds i16, i16* %19601, i64 17
  %19606 = bitcast i16* %19605 to <16 x i16>*
  %19607 = load <16 x i16>, <16 x i16>* %19606, align 2, !tbaa !396
  %19608 = getelementptr inbounds i16, i16* %19601, i64 2
  %19609 = bitcast i16* %19608 to <16 x i16>*
  %19610 = load <16 x i16>, <16 x i16>* %19609, align 2, !tbaa !396
  %19611 = getelementptr inbounds i16, i16* %19601, i64 18
  %19612 = bitcast i16* %19611 to <16 x i16>*
  %19613 = load <16 x i16>, <16 x i16>* %19612, align 2, !tbaa !396
  %19614 = bitcast i16* %19601 to <16 x i16>*
  %19615 = load <16 x i16>, <16 x i16>* %19614, align 2, !tbaa !396
  %19616 = getelementptr inbounds i16, i16* %19601, i64 16
  %19617 = bitcast i16* %19616 to <16 x i16>*
  %19618 = load <16 x i16>, <16 x i16>* %19617, align 2, !tbaa !396
  %19619 = add <16 x i16> %19610, %19604
  %19620 = add <16 x i16> %19619, %19615
  %19621 = add <16 x i16> %19613, %19607
  %19622 = add <16 x i16> %19621, %19618
  %19623 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19620, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19624 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19622, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19625 = shufflevector <16 x i16> %19623, <16 x i16> %19624, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19626 = lshr <32 x i16> %19625, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19627 = shufflevector <32 x i16> %19626, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19628 = shl nsw i64 %19580, 5
  %19629 = add nsw i64 %19628, %19481
  %19630 = getelementptr inbounds i16, i16* %blur_x841, i64 %19629
  %19631 = bitcast i16* %19630 to <16 x i16>*
  store <16 x i16> %19627, <16 x i16>* %19631, align 2, !tbaa !399
  %19632 = shufflevector <32 x i16> %19626, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19633 = getelementptr inbounds i16, i16* %19630, i64 16
  %19634 = bitcast i16* %19633 to <16 x i16>*
  store <16 x i16> %19632, <16 x i16>* %19634, align 2, !tbaa !399
  br label %"consume blur_x2217"

"consume blur_x2217":                             ; preds = %"for blur_y.s0.x.x.rebased2208.consume blur_x2217_crit_edge", %"produce blur_x2215"
  %.pre-phi3398 = phi i64 [ %.pre3397, %"for blur_y.s0.x.x.rebased2208.consume blur_x2217_crit_edge" ], [ %19628, %"produce blur_x2215" ]
  %19635 = add nsw i64 %19484, %.pre-phi3398
  %19636 = getelementptr inbounds i16, i16* %blur_x841, i64 %19635
  %19637 = bitcast i16* %19636 to <16 x i16>*
  %19638 = load <16 x i16>, <16 x i16>* %19637, align 2, !tbaa !399
  %19639 = getelementptr inbounds i16, i16* %19636, i64 16
  %19640 = bitcast i16* %19639 to <16 x i16>*
  %19641 = load <16 x i16>, <16 x i16>* %19640, align 2, !tbaa !399
  %19642 = add nsw i64 %19487, %.pre-phi3398
  %19643 = getelementptr inbounds i16, i16* %blur_x841, i64 %19642
  %19644 = bitcast i16* %19643 to <16 x i16>*
  %19645 = load <16 x i16>, <16 x i16>* %19644, align 2, !tbaa !399
  %19646 = getelementptr inbounds i16, i16* %19643, i64 16
  %19647 = bitcast i16* %19646 to <16 x i16>*
  %19648 = load <16 x i16>, <16 x i16>* %19647, align 2, !tbaa !399
  %19649 = add nsw i64 %19490, %.pre-phi3398
  %19650 = getelementptr inbounds i16, i16* %blur_x841, i64 %19649
  %19651 = bitcast i16* %19650 to <16 x i16>*
  %19652 = load <16 x i16>, <16 x i16>* %19651, align 2, !tbaa !399
  %19653 = getelementptr inbounds i16, i16* %19650, i64 16
  %19654 = bitcast i16* %19653 to <16 x i16>*
  %19655 = load <16 x i16>, <16 x i16>* %19654, align 2, !tbaa !399
  %19656 = add <16 x i16> %19645, %19638
  %19657 = add <16 x i16> %19656, %19652
  %19658 = add <16 x i16> %19648, %19641
  %19659 = add <16 x i16> %19658, %19655
  %19660 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19657, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19661 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19659, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19662 = shufflevector <16 x i16> %19660, <16 x i16> %19661, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19663 = lshr <32 x i16> %19662, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19664 = shufflevector <32 x i16> %19663, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19665 = add nsw i64 %19494, %.pre-phi3398
  %19666 = getelementptr inbounds i16, i16* %255, i64 %19665
  %19667 = bitcast i16* %19666 to <16 x i16>*
  store <16 x i16> %19664, <16 x i16>* %19667, align 2, !tbaa !401
  %19668 = shufflevector <32 x i16> %19663, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19669 = getelementptr inbounds i16, i16* %19666, i64 16
  %19670 = bitcast i16* %19669 to <16 x i16>*
  store <16 x i16> %19668, <16 x i16>* %19670, align 2, !tbaa !401
  %indvars.iv.next3238 = add nuw nsw i64 %indvars.iv3237, 1
  %.not2440 = icmp eq i64 %indvars.iv.next3238, %370
  br i1 %.not2440, label %"end for blur_y.s0.x.x.rebased2209", label %"for blur_y.s0.x.x.rebased2208"

"for blur_y.s0.x.x.rebased2225":                  ; preds = %"for blur_y.s0.x.x.rebased2225.preheader", %"consume blur_x2235"
  %blur_y.s0.x.x.rebased2227 = phi i32 [ %19749, %"consume blur_x2235" ], [ 0, %"for blur_y.s0.x.x.rebased2225.preheader" ]
  %19671 = add nsw i32 %blur_y.s0.x.x.rebased2227, %t1582776
  %a614 = shl nsw i32 %19671, 5
  %19672 = icmp sgt i32 %a327, %a614
  %b620 = select i1 %19672, i32 %a614, i32 %a327
  %19673 = icmp slt i32 %19671, 1
  %19674 = icmp sgt i32 %194, %a614
  %19675 = or i1 %19673, %19674
  br i1 %19675, label %"produce blur_x2232", label %"consume blur_x2235"

"end for blur_y.s0.x.x.rebased2226":              ; preds = %"consume blur_x2235", %"end for blur_y.s0.x.x.rebased2209"
  br i1 %224, label %"produce blur_x2239", label %after_bb2236

"produce blur_x2232":                             ; preds = %"for blur_y.s0.x.x.rebased2225"
  %19676 = icmp slt i32 %b620, %194
  %blur_x.s0.x.v1.base.s2233 = select i1 %19676, i32 %b620, i32 %194
  %t11572234 = add nsw i32 %blur_x.s0.x.v1.base.s2233, %t21292205
  %19677 = sext i32 %t11572234 to i64
  %19678 = getelementptr inbounds i16, i16* %read_input784, i64 %19677
  %19679 = getelementptr inbounds i16, i16* %19678, i64 1
  %19680 = bitcast i16* %19679 to <16 x i16>*
  %19681 = load <16 x i16>, <16 x i16>* %19680, align 2, !tbaa !396
  %19682 = getelementptr inbounds i16, i16* %19678, i64 17
  %19683 = bitcast i16* %19682 to <16 x i16>*
  %19684 = load <16 x i16>, <16 x i16>* %19683, align 2, !tbaa !396
  %19685 = getelementptr inbounds i16, i16* %19678, i64 2
  %19686 = bitcast i16* %19685 to <16 x i16>*
  %19687 = load <16 x i16>, <16 x i16>* %19686, align 2, !tbaa !396
  %19688 = getelementptr inbounds i16, i16* %19678, i64 18
  %19689 = bitcast i16* %19688 to <16 x i16>*
  %19690 = load <16 x i16>, <16 x i16>* %19689, align 2, !tbaa !396
  %19691 = bitcast i16* %19678 to <16 x i16>*
  %19692 = load <16 x i16>, <16 x i16>* %19691, align 2, !tbaa !396
  %19693 = getelementptr inbounds i16, i16* %19678, i64 16
  %19694 = bitcast i16* %19693 to <16 x i16>*
  %19695 = load <16 x i16>, <16 x i16>* %19694, align 2, !tbaa !396
  %19696 = add <16 x i16> %19687, %19681
  %19697 = add <16 x i16> %19696, %19692
  %19698 = add <16 x i16> %19690, %19684
  %19699 = add <16 x i16> %19698, %19695
  %19700 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19697, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19701 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19699, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19702 = shufflevector <16 x i16> %19700, <16 x i16> %19701, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19703 = lshr <32 x i16> %19702, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19704 = shufflevector <32 x i16> %19703, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19705 = sext i32 %blur_x.s0.x.v1.base.s2233 to i64
  %19706 = add nsw i64 %19705, %19586
  %19707 = getelementptr inbounds i16, i16* %blur_x841, i64 %19706
  %19708 = bitcast i16* %19707 to <16 x i16>*
  store <16 x i16> %19704, <16 x i16>* %19708, align 2, !tbaa !399
  %19709 = shufflevector <32 x i16> %19703, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19710 = getelementptr inbounds i16, i16* %19707, i64 16
  %19711 = bitcast i16* %19710 to <16 x i16>*
  store <16 x i16> %19709, <16 x i16>* %19711, align 2, !tbaa !399
  br label %"consume blur_x2235"

"consume blur_x2235":                             ; preds = %"for blur_y.s0.x.x.rebased2225", %"produce blur_x2232"
  %19712 = sext i32 %b620 to i64
  %19713 = add nsw i64 %19589, %19712
  %19714 = getelementptr inbounds i16, i16* %blur_x841, i64 %19713
  %19715 = bitcast i16* %19714 to <16 x i16>*
  %19716 = load <16 x i16>, <16 x i16>* %19715, align 2, !tbaa !399
  %19717 = getelementptr inbounds i16, i16* %19714, i64 16
  %19718 = bitcast i16* %19717 to <16 x i16>*
  %19719 = load <16 x i16>, <16 x i16>* %19718, align 2, !tbaa !399
  %19720 = add nsw i64 %19592, %19712
  %19721 = getelementptr inbounds i16, i16* %blur_x841, i64 %19720
  %19722 = bitcast i16* %19721 to <16 x i16>*
  %19723 = load <16 x i16>, <16 x i16>* %19722, align 2, !tbaa !399
  %19724 = getelementptr inbounds i16, i16* %19721, i64 16
  %19725 = bitcast i16* %19724 to <16 x i16>*
  %19726 = load <16 x i16>, <16 x i16>* %19725, align 2, !tbaa !399
  %19727 = add nsw i64 %19595, %19712
  %19728 = getelementptr inbounds i16, i16* %blur_x841, i64 %19727
  %19729 = bitcast i16* %19728 to <16 x i16>*
  %19730 = load <16 x i16>, <16 x i16>* %19729, align 2, !tbaa !399
  %19731 = getelementptr inbounds i16, i16* %19728, i64 16
  %19732 = bitcast i16* %19731 to <16 x i16>*
  %19733 = load <16 x i16>, <16 x i16>* %19732, align 2, !tbaa !399
  %19734 = add <16 x i16> %19723, %19716
  %19735 = add <16 x i16> %19734, %19730
  %19736 = add <16 x i16> %19726, %19719
  %19737 = add <16 x i16> %19736, %19733
  %19738 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19735, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19739 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19737, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19740 = shufflevector <16 x i16> %19738, <16 x i16> %19739, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19741 = lshr <32 x i16> %19740, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19742 = shufflevector <32 x i16> %19741, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19743 = add nsw i64 %19599, %19712
  %19744 = getelementptr inbounds i16, i16* %255, i64 %19743
  %19745 = bitcast i16* %19744 to <16 x i16>*
  store <16 x i16> %19742, <16 x i16>* %19745, align 2, !tbaa !401
  %19746 = shufflevector <32 x i16> %19741, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19747 = getelementptr inbounds i16, i16* %19744, i64 16
  %19748 = bitcast i16* %19747 to <16 x i16>*
  store <16 x i16> %19746, <16 x i16>* %19748, align 2, !tbaa !401
  %19749 = add nuw nsw i32 %blur_y.s0.x.x.rebased2227, 1
  %.not2439 = icmp eq i32 %19749, %t1639861
  br i1 %.not2439, label %"end for blur_y.s0.x.x.rebased2226", label %"for blur_y.s0.x.x.rebased2225"

after_bb2236:                                     ; preds = %"end for blur_y.s0.x.x.rebased2226", %"produce blur_x2239"
  br i1 %289, label %"for blur_y.s0.x.x.rebased2251.preheader", label %"end for blur_y.s0.x.x.rebased2252", !prof !386

"for blur_y.s0.x.x.rebased2251.preheader":        ; preds = %after_bb2236
  %19750 = sext i32 %t1644878 to i64
  %19751 = zext i32 %.pre-phi3324 to i64
  %19752 = mul nsw i64 %19751, %298
  %19753 = sub nsw i64 %19752, %285
  %19754 = zext i32 %.pre-phi3328 to i64
  %19755 = mul nsw i64 %19754, %298
  %19756 = sub nsw i64 %19755, %285
  %19757 = zext i32 %.pre-phi3338 to i64
  %19758 = mul nsw i64 %19757, %298
  %19759 = sub nsw i64 %19758, %285
  %19760 = sext i32 %a339 to i64
  %19761 = add nsw i64 %19760, 31
  %19762 = mul nsw i64 %19761, %299
  %19763 = add nsw i64 %19762, %302
  br label %"for blur_y.s0.x.x.rebased2251"

"produce blur_x2239":                             ; preds = %"end for blur_y.s0.x.x.rebased2226"
  %19764 = getelementptr inbounds i16, i16* %read_input784, i64 %363
  %19765 = getelementptr inbounds i16, i16* %19764, i64 -31
  %19766 = bitcast i16* %19765 to <16 x i16>*
  %19767 = load <16 x i16>, <16 x i16>* %19766, align 2, !tbaa !396
  %19768 = getelementptr inbounds i16, i16* %19764, i64 -15
  %19769 = bitcast i16* %19768 to <16 x i16>*
  %19770 = load <16 x i16>, <16 x i16>* %19769, align 2, !tbaa !396
  %19771 = getelementptr inbounds i16, i16* %19764, i64 -30
  %19772 = bitcast i16* %19771 to <16 x i16>*
  %19773 = load <16 x i16>, <16 x i16>* %19772, align 2, !tbaa !396
  %19774 = getelementptr inbounds i16, i16* %19764, i64 -14
  %19775 = bitcast i16* %19774 to <16 x i16>*
  %19776 = load <16 x i16>, <16 x i16>* %19775, align 2, !tbaa !396
  %19777 = getelementptr inbounds i16, i16* %19764, i64 -32
  %19778 = bitcast i16* %19777 to <16 x i16>*
  %19779 = load <16 x i16>, <16 x i16>* %19778, align 2, !tbaa !396
  %19780 = getelementptr inbounds i16, i16* %19764, i64 -16
  %19781 = bitcast i16* %19780 to <16 x i16>*
  %19782 = load <16 x i16>, <16 x i16>* %19781, align 2, !tbaa !396
  %19783 = add <16 x i16> %19773, %19767
  %19784 = add <16 x i16> %19783, %19779
  %19785 = add <16 x i16> %19776, %19770
  %19786 = add <16 x i16> %19785, %19782
  %19787 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19784, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19788 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19786, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19789 = shufflevector <16 x i16> %19787, <16 x i16> %19788, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19790 = lshr <32 x i16> %19789, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19791 = shufflevector <32 x i16> %19790, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19792 = zext i32 %.pre-phi3328 to i64
  %19793 = mul nsw i64 %286, %19792
  %19794 = add nsw i64 %288, %19793
  %19795 = getelementptr inbounds i16, i16* %blur_x841, i64 %19794
  %19796 = getelementptr inbounds i16, i16* %19795, i64 -32
  %19797 = bitcast i16* %19796 to <16 x i16>*
  store <16 x i16> %19791, <16 x i16>* %19797, align 2, !tbaa !399
  %19798 = shufflevector <32 x i16> %19790, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19799 = getelementptr inbounds i16, i16* %19795, i64 -16
  %19800 = bitcast i16* %19799 to <16 x i16>*
  store <16 x i16> %19798, <16 x i16>* %19800, align 2, !tbaa !399
  %19801 = zext i32 %.pre-phi3324 to i64
  %19802 = mul nsw i64 %19801, %298
  %19803 = add nsw i64 %19802, %283
  %19804 = getelementptr inbounds i16, i16* %blur_x841, i64 %19803
  %19805 = getelementptr inbounds i16, i16* %19804, i64 -32
  %19806 = bitcast i16* %19805 to <16 x i16>*
  %19807 = load <16 x i16>, <16 x i16>* %19806, align 2, !tbaa !399
  %19808 = getelementptr inbounds i16, i16* %19804, i64 -16
  %19809 = bitcast i16* %19808 to <16 x i16>*
  %19810 = load <16 x i16>, <16 x i16>* %19809, align 2, !tbaa !399
  %19811 = mul nsw i64 %19792, %298
  %19812 = add nsw i64 %19811, %283
  %19813 = getelementptr inbounds i16, i16* %blur_x841, i64 %19812
  %19814 = getelementptr inbounds i16, i16* %19813, i64 -32
  %19815 = bitcast i16* %19814 to <16 x i16>*
  %19816 = load <16 x i16>, <16 x i16>* %19815, align 2, !tbaa !399
  %19817 = getelementptr inbounds i16, i16* %19813, i64 -16
  %19818 = bitcast i16* %19817 to <16 x i16>*
  %19819 = load <16 x i16>, <16 x i16>* %19818, align 2, !tbaa !399
  %19820 = zext i32 %.pre-phi3338 to i64
  %19821 = mul nsw i64 %19820, %298
  %19822 = add nsw i64 %19821, %283
  %19823 = getelementptr inbounds i16, i16* %blur_x841, i64 %19822
  %19824 = getelementptr inbounds i16, i16* %19823, i64 -32
  %19825 = bitcast i16* %19824 to <16 x i16>*
  %19826 = load <16 x i16>, <16 x i16>* %19825, align 2, !tbaa !399
  %19827 = getelementptr inbounds i16, i16* %19823, i64 -16
  %19828 = bitcast i16* %19827 to <16 x i16>*
  %19829 = load <16 x i16>, <16 x i16>* %19828, align 2, !tbaa !399
  %19830 = add <16 x i16> %19816, %19807
  %19831 = add <16 x i16> %19830, %19826
  %19832 = add <16 x i16> %19819, %19810
  %19833 = add <16 x i16> %19832, %19829
  %19834 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19831, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19835 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19833, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19836 = shufflevector <16 x i16> %19834, <16 x i16> %19835, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19837 = lshr <32 x i16> %19836, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19838 = shufflevector <32 x i16> %19837, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19839 = sext i32 %a339 to i64
  %19840 = add nsw i64 %19839, 31
  %19841 = mul nsw i64 %19840, %299
  %19842 = add nsw i64 %301, %19841
  %19843 = getelementptr inbounds i16, i16* %255, i64 %19842
  %19844 = getelementptr inbounds i16, i16* %19843, i64 -32
  %19845 = bitcast i16* %19844 to <16 x i16>*
  store <16 x i16> %19838, <16 x i16>* %19845, align 2, !tbaa !401
  %19846 = shufflevector <32 x i16> %19837, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19847 = getelementptr inbounds i16, i16* %19843, i64 -16
  %19848 = bitcast i16* %19847 to <16 x i16>*
  store <16 x i16> %19846, <16 x i16>* %19848, align 2, !tbaa !401
  br label %after_bb2236

"for blur_y.s0.x.x.rebased2251":                  ; preds = %"for blur_y.s0.x.x.rebased2251.preheader", %"consume blur_x2260"
  %indvars.iv3240 = phi i64 [ 0, %"for blur_y.s0.x.x.rebased2251.preheader" ], [ %indvars.iv.next3241, %"consume blur_x2260" ]
  %19849 = add nsw i64 %indvars.iv3240, %290
  %19850 = icmp slt i64 %19849, 1
  %19851 = trunc i64 %19849 to i32
  %19852 = shl nsw i32 %19851, 5
  %19853 = icmp sgt i32 %194, %19852
  %19854 = or i1 %19850, %19853
  br i1 %19854, label %"produce blur_x2258", label %"for blur_y.s0.x.x.rebased2251.consume blur_x2260_crit_edge"

"for blur_y.s0.x.x.rebased2251.consume blur_x2260_crit_edge": ; preds = %"for blur_y.s0.x.x.rebased2251"
  %.pre3399 = shl nsw i64 %19849, 5
  br label %"consume blur_x2260"

"end for blur_y.s0.x.x.rebased2252":              ; preds = %"consume blur_x2260", %after_bb2236
  br i1 %291, label %"for blur_y.s0.x.x.rebased2268.preheader", label %"end for blur_y.s0.x.x.rebased2269", !prof !386

"for blur_y.s0.x.x.rebased2268.preheader":        ; preds = %"end for blur_y.s0.x.x.rebased2252"
  %19855 = sext i32 %t1644878 to i64
  %19856 = zext i32 %.pre-phi3324 to i64
  %19857 = mul nsw i64 %19856, %298
  %19858 = sub nsw i64 %19857, %285
  %19859 = zext i32 %.pre-phi3328 to i64
  %19860 = mul nsw i64 %19859, %298
  %19861 = sub nsw i64 %19860, %285
  %19862 = zext i32 %.pre-phi3338 to i64
  %19863 = mul nsw i64 %19862, %298
  %19864 = sub nsw i64 %19863, %285
  %19865 = sext i32 %a339 to i64
  %19866 = add nsw i64 %19865, 31
  %19867 = mul nsw i64 %19866, %299
  %19868 = add nsw i64 %19867, %302
  br label %"for blur_y.s0.x.x.rebased2268"

"produce blur_x2258":                             ; preds = %"for blur_y.s0.x.x.rebased2251"
  %t11682259 = add nsw i32 %19852, %t21452248
  %19869 = sext i32 %t11682259 to i64
  %19870 = getelementptr inbounds i16, i16* %read_input784, i64 %19869
  %19871 = getelementptr inbounds i16, i16* %19870, i64 1
  %19872 = bitcast i16* %19871 to <16 x i16>*
  %19873 = load <16 x i16>, <16 x i16>* %19872, align 2, !tbaa !396
  %19874 = getelementptr inbounds i16, i16* %19870, i64 17
  %19875 = bitcast i16* %19874 to <16 x i16>*
  %19876 = load <16 x i16>, <16 x i16>* %19875, align 2, !tbaa !396
  %19877 = getelementptr inbounds i16, i16* %19870, i64 2
  %19878 = bitcast i16* %19877 to <16 x i16>*
  %19879 = load <16 x i16>, <16 x i16>* %19878, align 2, !tbaa !396
  %19880 = getelementptr inbounds i16, i16* %19870, i64 18
  %19881 = bitcast i16* %19880 to <16 x i16>*
  %19882 = load <16 x i16>, <16 x i16>* %19881, align 2, !tbaa !396
  %19883 = bitcast i16* %19870 to <16 x i16>*
  %19884 = load <16 x i16>, <16 x i16>* %19883, align 2, !tbaa !396
  %19885 = getelementptr inbounds i16, i16* %19870, i64 16
  %19886 = bitcast i16* %19885 to <16 x i16>*
  %19887 = load <16 x i16>, <16 x i16>* %19886, align 2, !tbaa !396
  %19888 = add <16 x i16> %19879, %19873
  %19889 = add <16 x i16> %19888, %19884
  %19890 = add <16 x i16> %19882, %19876
  %19891 = add <16 x i16> %19890, %19887
  %19892 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19889, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19893 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19891, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19894 = shufflevector <16 x i16> %19892, <16 x i16> %19893, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19895 = lshr <32 x i16> %19894, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19896 = shufflevector <32 x i16> %19895, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19897 = shl nsw i64 %19849, 5
  %19898 = add nsw i64 %19897, %19750
  %19899 = getelementptr inbounds i16, i16* %blur_x841, i64 %19898
  %19900 = bitcast i16* %19899 to <16 x i16>*
  store <16 x i16> %19896, <16 x i16>* %19900, align 2, !tbaa !399
  %19901 = shufflevector <32 x i16> %19895, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19902 = getelementptr inbounds i16, i16* %19899, i64 16
  %19903 = bitcast i16* %19902 to <16 x i16>*
  store <16 x i16> %19901, <16 x i16>* %19903, align 2, !tbaa !399
  br label %"consume blur_x2260"

"consume blur_x2260":                             ; preds = %"for blur_y.s0.x.x.rebased2251.consume blur_x2260_crit_edge", %"produce blur_x2258"
  %.pre-phi3400 = phi i64 [ %.pre3399, %"for blur_y.s0.x.x.rebased2251.consume blur_x2260_crit_edge" ], [ %19897, %"produce blur_x2258" ]
  %19904 = add nsw i64 %19753, %.pre-phi3400
  %19905 = getelementptr inbounds i16, i16* %blur_x841, i64 %19904
  %19906 = bitcast i16* %19905 to <16 x i16>*
  %19907 = load <16 x i16>, <16 x i16>* %19906, align 2, !tbaa !399
  %19908 = getelementptr inbounds i16, i16* %19905, i64 16
  %19909 = bitcast i16* %19908 to <16 x i16>*
  %19910 = load <16 x i16>, <16 x i16>* %19909, align 2, !tbaa !399
  %19911 = add nsw i64 %19756, %.pre-phi3400
  %19912 = getelementptr inbounds i16, i16* %blur_x841, i64 %19911
  %19913 = bitcast i16* %19912 to <16 x i16>*
  %19914 = load <16 x i16>, <16 x i16>* %19913, align 2, !tbaa !399
  %19915 = getelementptr inbounds i16, i16* %19912, i64 16
  %19916 = bitcast i16* %19915 to <16 x i16>*
  %19917 = load <16 x i16>, <16 x i16>* %19916, align 2, !tbaa !399
  %19918 = add nsw i64 %19759, %.pre-phi3400
  %19919 = getelementptr inbounds i16, i16* %blur_x841, i64 %19918
  %19920 = bitcast i16* %19919 to <16 x i16>*
  %19921 = load <16 x i16>, <16 x i16>* %19920, align 2, !tbaa !399
  %19922 = getelementptr inbounds i16, i16* %19919, i64 16
  %19923 = bitcast i16* %19922 to <16 x i16>*
  %19924 = load <16 x i16>, <16 x i16>* %19923, align 2, !tbaa !399
  %19925 = add <16 x i16> %19914, %19907
  %19926 = add <16 x i16> %19925, %19921
  %19927 = add <16 x i16> %19917, %19910
  %19928 = add <16 x i16> %19927, %19924
  %19929 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19926, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19930 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19928, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19931 = shufflevector <16 x i16> %19929, <16 x i16> %19930, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19932 = lshr <32 x i16> %19931, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19933 = shufflevector <32 x i16> %19932, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19934 = add nsw i64 %19763, %.pre-phi3400
  %19935 = getelementptr inbounds i16, i16* %255, i64 %19934
  %19936 = bitcast i16* %19935 to <16 x i16>*
  store <16 x i16> %19933, <16 x i16>* %19936, align 2, !tbaa !401
  %19937 = shufflevector <32 x i16> %19932, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19938 = getelementptr inbounds i16, i16* %19935, i64 16
  %19939 = bitcast i16* %19938 to <16 x i16>*
  store <16 x i16> %19937, <16 x i16>* %19939, align 2, !tbaa !401
  %indvars.iv.next3241 = add nuw nsw i64 %indvars.iv3240, 1
  %.not2438 = icmp eq i64 %indvars.iv.next3241, %370
  br i1 %.not2438, label %"end for blur_y.s0.x.x.rebased2252", label %"for blur_y.s0.x.x.rebased2251"

"for blur_y.s0.x.x.rebased2268":                  ; preds = %"for blur_y.s0.x.x.rebased2268.preheader", %"consume blur_x2278"
  %blur_y.s0.x.x.rebased2270 = phi i32 [ %20019, %"consume blur_x2278" ], [ 0, %"for blur_y.s0.x.x.rebased2268.preheader" ]
  %19940 = add nsw i32 %blur_y.s0.x.x.rebased2270, %t1582776
  %a621 = shl nsw i32 %19940, 5
  %19941 = icmp sgt i32 %a327, %a621
  %b627 = select i1 %19941, i32 %a621, i32 %a327
  %19942 = icmp slt i32 %19940, 1
  %19943 = icmp sgt i32 %194, %a621
  %19944 = or i1 %19942, %19943
  br i1 %19944, label %"produce blur_x2275", label %"consume blur_x2278"

"end for blur_y.s0.x.x.rebased2269":              ; preds = %"consume blur_x2278", %"end for blur_y.s0.x.x.rebased2252"
  %19945 = add nuw nsw i32 %blur_y.s0.y.y780, 1
  %.not2436 = icmp eq i32 %19945, %t1568777
  br i1 %.not2436, label %if.then.i2680.loopexit, label %"for blur_y.s0.y.y778"

"produce blur_x2275":                             ; preds = %"for blur_y.s0.x.x.rebased2268"
  %19946 = icmp slt i32 %b627, %194
  %blur_x.s0.x.v1.base.s2276 = select i1 %19946, i32 %b627, i32 %194
  %t11732277 = add nsw i32 %blur_x.s0.x.v1.base.s2276, %t21452248
  %19947 = sext i32 %t11732277 to i64
  %19948 = getelementptr inbounds i16, i16* %read_input784, i64 %19947
  %19949 = getelementptr inbounds i16, i16* %19948, i64 1
  %19950 = bitcast i16* %19949 to <16 x i16>*
  %19951 = load <16 x i16>, <16 x i16>* %19950, align 2, !tbaa !396
  %19952 = getelementptr inbounds i16, i16* %19948, i64 17
  %19953 = bitcast i16* %19952 to <16 x i16>*
  %19954 = load <16 x i16>, <16 x i16>* %19953, align 2, !tbaa !396
  %19955 = getelementptr inbounds i16, i16* %19948, i64 2
  %19956 = bitcast i16* %19955 to <16 x i16>*
  %19957 = load <16 x i16>, <16 x i16>* %19956, align 2, !tbaa !396
  %19958 = getelementptr inbounds i16, i16* %19948, i64 18
  %19959 = bitcast i16* %19958 to <16 x i16>*
  %19960 = load <16 x i16>, <16 x i16>* %19959, align 2, !tbaa !396
  %19961 = bitcast i16* %19948 to <16 x i16>*
  %19962 = load <16 x i16>, <16 x i16>* %19961, align 2, !tbaa !396
  %19963 = getelementptr inbounds i16, i16* %19948, i64 16
  %19964 = bitcast i16* %19963 to <16 x i16>*
  %19965 = load <16 x i16>, <16 x i16>* %19964, align 2, !tbaa !396
  %19966 = add <16 x i16> %19957, %19951
  %19967 = add <16 x i16> %19966, %19962
  %19968 = add <16 x i16> %19960, %19954
  %19969 = add <16 x i16> %19968, %19965
  %19970 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19967, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19971 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %19969, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %19972 = shufflevector <16 x i16> %19970, <16 x i16> %19971, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19973 = lshr <32 x i16> %19972, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %19974 = shufflevector <32 x i16> %19973, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %19975 = sext i32 %blur_x.s0.x.v1.base.s2276 to i64
  %19976 = add nsw i64 %19975, %19855
  %19977 = getelementptr inbounds i16, i16* %blur_x841, i64 %19976
  %19978 = bitcast i16* %19977 to <16 x i16>*
  store <16 x i16> %19974, <16 x i16>* %19978, align 2, !tbaa !399
  %19979 = shufflevector <32 x i16> %19973, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %19980 = getelementptr inbounds i16, i16* %19977, i64 16
  %19981 = bitcast i16* %19980 to <16 x i16>*
  store <16 x i16> %19979, <16 x i16>* %19981, align 2, !tbaa !399
  br label %"consume blur_x2278"

"consume blur_x2278":                             ; preds = %"for blur_y.s0.x.x.rebased2268", %"produce blur_x2275"
  %19982 = sext i32 %b627 to i64
  %19983 = add nsw i64 %19858, %19982
  %19984 = getelementptr inbounds i16, i16* %blur_x841, i64 %19983
  %19985 = bitcast i16* %19984 to <16 x i16>*
  %19986 = load <16 x i16>, <16 x i16>* %19985, align 2, !tbaa !399
  %19987 = getelementptr inbounds i16, i16* %19984, i64 16
  %19988 = bitcast i16* %19987 to <16 x i16>*
  %19989 = load <16 x i16>, <16 x i16>* %19988, align 2, !tbaa !399
  %19990 = add nsw i64 %19861, %19982
  %19991 = getelementptr inbounds i16, i16* %blur_x841, i64 %19990
  %19992 = bitcast i16* %19991 to <16 x i16>*
  %19993 = load <16 x i16>, <16 x i16>* %19992, align 2, !tbaa !399
  %19994 = getelementptr inbounds i16, i16* %19991, i64 16
  %19995 = bitcast i16* %19994 to <16 x i16>*
  %19996 = load <16 x i16>, <16 x i16>* %19995, align 2, !tbaa !399
  %19997 = add nsw i64 %19864, %19982
  %19998 = getelementptr inbounds i16, i16* %blur_x841, i64 %19997
  %19999 = bitcast i16* %19998 to <16 x i16>*
  %20000 = load <16 x i16>, <16 x i16>* %19999, align 2, !tbaa !399
  %20001 = getelementptr inbounds i16, i16* %19998, i64 16
  %20002 = bitcast i16* %20001 to <16 x i16>*
  %20003 = load <16 x i16>, <16 x i16>* %20002, align 2, !tbaa !399
  %20004 = add <16 x i16> %19993, %19986
  %20005 = add <16 x i16> %20004, %20000
  %20006 = add <16 x i16> %19996, %19989
  %20007 = add <16 x i16> %20006, %20003
  %20008 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20005, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %20009 = call <16 x i16> @llvm.x86.avx2.pmulhu.w(<16 x i16> %20007, <16 x i16> <i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845, i16 -21845>)
  %20010 = shufflevector <16 x i16> %20008, <16 x i16> %20009, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20011 = lshr <32 x i16> %20010, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %20012 = shufflevector <32 x i16> %20011, <32 x i16> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %20013 = add nsw i64 %19868, %19982
  %20014 = getelementptr inbounds i16, i16* %255, i64 %20013
  %20015 = bitcast i16* %20014 to <16 x i16>*
  store <16 x i16> %20012, <16 x i16>* %20015, align 2, !tbaa !401
  %20016 = shufflevector <32 x i16> %20011, <32 x i16> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %20017 = getelementptr inbounds i16, i16* %20014, i64 16
  %20018 = bitcast i16* %20017 to <16 x i16>*
  store <16 x i16> %20016, <16 x i16>* %20018, align 2, !tbaa !401
  %20019 = add nuw nsw i32 %blur_y.s0.x.x.rebased2270, 1
  %.not2437 = icmp eq i32 %20019, %t1639861
  br i1 %.not2437, label %"end for blur_y.s0.x.x.rebased2269", label %"for blur_y.s0.x.x.rebased2268"
}

; Function Attrs: nounwind
define i32 @blur3x3_argv(i8** nocapture readonly %0) local_unnamed_addr #11 {
entry:
  %1 = bitcast i8** %0 to %struct.halide_buffer_t**
  %2 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %1, align 8
  %3 = getelementptr i8*, i8** %0, i64 1
  %4 = bitcast i8** %3 to %struct.halide_buffer_t**
  %5 = load %struct.halide_buffer_t*, %struct.halide_buffer_t** %4, align 8
  %6 = tail call i32 @blur3x3(%struct.halide_buffer_t* %2, %struct.halide_buffer_t* %5) #18
  ret i32 0
}

; Function Attrs: norecurse nounwind readnone willreturn
define nonnull %struct.halide_filter_metadata_t* @blur3x3_metadata() local_unnamed_addr #12 {
entry:
  ret %struct.halide_filter_metadata_t* @blur3x3_metadata_storage
}

; Function Attrs: nofree nosync nounwind willreturn writeonly
declare void @llvm.masked.scatter.v8i32.v8p0i32(<8 x i32>, <8 x i32*>, i32 immarg, <8 x i1>) #13

; Function Attrs: nofree nosync nounwind readonly willreturn
declare <4 x i32> @llvm.masked.gather.v4i32.v4p0i32(<4 x i32*>, i32 immarg, <4 x i1>, <4 x i32>) #14

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i64 @llvm.vector.reduce.add.v4i64(<4 x i64>) #15

attributes #0 = { nounwind mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nosync nounwind willreturn }
attributes #4 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #6 = { alwaysinline nounwind willreturn mustprogress "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #8 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-builtins" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { nounwind "reciprocal-estimates"="none" }
attributes #11 = { nounwind }
attributes #12 = { norecurse nounwind readnone willreturn }
attributes #13 = { nofree nosync nounwind willreturn writeonly }
attributes #14 = { nofree nosync nounwind readonly willreturn }
attributes #15 = { nofree nosync nounwind readnone willreturn }
attributes #16 = { nobuiltin nounwind "no-builtins" }
attributes #17 = { nobuiltin "no-builtins" }
attributes #18 = { noinline }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6, !7, !8}
!llvm.ident = !{!9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9, !9}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, !"halide_use_soft_float_abi", i32 0}
!3 = !{i32 2, !"halide_mcpu", !"cascadelake"}
!4 = !{i32 2, !"halide_mattrs", !"+fma,+f16c"}
!5 = !{i32 2, !"halide_mabi", !""}
!6 = !{i32 2, !"halide_use_pic", i32 1}
!7 = !{i32 2, !"halide_use_large_code_model", i32 0}
!8 = !{i32 2, !"halide_per_instruction_fast_math_flags", i32 0}
!9 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !12, i64 0}
!12 = !{!"omnipotent char", !13, i64 0}
!13 = !{!"Simple C++ TBAA"}
!14 = !{!12, !12, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"bool", !12, i64 0}
!17 = !{i8 0, i8 2}
!18 = !{!19, !19, i64 0}
!19 = !{!"long", !12, i64 0}
!20 = !{!21, !11, i64 0}
!21 = !{!"_ZTSN6Halide7Runtime8Internal4workE", !22, i64 0, !11, i64 56, !11, i64 64, !11, i64 72, !23, i64 80, !11, i64 88, !23, i64 96, !11, i64 104, !23, i64 112, !23, i64 116, !23, i64 120, !16, i64 124}
!22 = !{!"_ZTS22halide_parallel_task_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !23, i64 32, !23, i64 36, !23, i64 40, !23, i64 44, !16, i64 48}
!23 = !{!"int", !12, i64 0}
!24 = !{!21, !23, i64 36}
!25 = !{!21, !23, i64 40}
!26 = !{!21, !16, i64 48}
!27 = !{!21, !11, i64 24}
!28 = !{!21, !23, i64 32}
!29 = !{!21, !11, i64 8}
!30 = !{!21, !23, i64 44}
!31 = !{!21, !11, i64 16}
!32 = !{!21, !11, i64 56}
!33 = !{!21, !11, i64 104}
!34 = !{!21, !23, i64 116}
!35 = !{!21, !23, i64 112}
!36 = !{!21, !23, i64 120}
!37 = !{!21, !16, i64 124}
!38 = !{!21, !11, i64 72}
!39 = !{!21, !23, i64 80}
!40 = !{!21, !11, i64 88}
!41 = !{!42, !42, i64 0}
!42 = !{!"vtable pointer", !13, i64 0}
!43 = !{!44, !11, i64 8}
!44 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization21mutex_parking_controlE", !11, i64 8}
!45 = !{!46, !16, i64 2121}
!46 = !{!"_ZTSN6Halide7Runtime8Internal12work_queue_tE", !47, i64 0, !23, i64 8, !23, i64 12, !11, i64 16, !23, i64 24, !23, i64 28, !23, i64 32, !48, i64 40, !48, i64 48, !48, i64 56, !23, i64 64, !23, i64 68, !12, i64 72, !16, i64 2120, !16, i64 2121, !23, i64 2124}
!47 = !{!"_ZTS12halide_mutex", !12, i64 0}
!48 = !{!"_ZTS11halide_cond", !12, i64 0}
!49 = distinct !{!49, !50}
!50 = !{!"llvm.loop.mustprogress"}
!51 = !{!46, !23, i64 8}
!52 = !{!46, !23, i64 24}
!53 = !{!46, !23, i64 2124}
!54 = !{!46, !23, i64 28}
!55 = distinct !{!55, !50}
!56 = !{!21, !23, i64 96}
!57 = !{!46, !11, i64 16}
!58 = !{!21, !11, i64 64}
!59 = !{!46, !23, i64 68}
!60 = !{!46, !23, i64 32}
!61 = distinct !{!61, !50}
!62 = distinct !{!62, !50}
!63 = !{!46, !16, i64 2120}
!64 = distinct !{!64, !50}
!65 = !{!66, !11, i64 0}
!66 = !{!"_ZTS26halide_semaphore_acquire_t", !11, i64 0, !23, i64 8}
!67 = !{!66, !23, i64 8}
!68 = distinct !{!68, !50}
!69 = !{!46, !23, i64 64}
!70 = distinct !{!70, !50}
!71 = distinct !{!71, !50}
!72 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 8, !10, i64 80, i64 4, !73, i64 88, i64 8, !10, i64 96, i64 4, !73, i64 104, i64 8, !10, i64 112, i64 4, !73, i64 116, i64 4, !73, i64 120, i64 4, !73, i64 124, i64 1, !15}
!73 = !{!23, !23, i64 0}
!74 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 28, i64 4, !73, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 1, !15, i64 48, i64 8, !10, i64 56, i64 8, !10, i64 64, i64 8, !10, i64 72, i64 4, !73, i64 80, i64 8, !10, i64 88, i64 4, !73, i64 96, i64 8, !10, i64 104, i64 4, !73, i64 108, i64 4, !73, i64 112, i64 4, !73, i64 116, i64 1, !15}
!75 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 4, !73, i64 32, i64 8, !10, i64 40, i64 4, !73, i64 48, i64 8, !10, i64 56, i64 4, !73, i64 60, i64 4, !73, i64 64, i64 4, !73, i64 68, i64 1, !15}
!76 = !{i64 0, i64 8, !10, i64 8, i64 4, !73, i64 12, i64 4, !73, i64 16, i64 4, !73, i64 20, i64 1, !15}
!77 = distinct !{!77, !50}
!78 = distinct !{!78, !50}
!79 = !{!80, !11, i64 144}
!80 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization10queue_dataE", !81, i64 0, !84, i64 136, !11, i64 144, !84, i64 152}
!81 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization13thread_parkerE", !82, i64 0, !83, i64 64, !16, i64 128}
!82 = !{!"_ZTS15pthread_mutex_t", !12, i64 0}
!83 = !{!"_ZTS14pthread_cond_t", !12, i64 0}
!84 = !{!"long long", !12, i64 0}
!85 = !{!86, !11, i64 16}
!86 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11hash_bucketE", !87, i64 0, !11, i64 8, !11, i64 16}
!87 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization9word_lockE", !84, i64 0}
!88 = distinct !{!88, !50}
!89 = !{!80, !84, i64 152}
!90 = !{!81, !16, i64 128}
!91 = distinct !{!91, !50}
!92 = !{!93, !11, i64 152}
!93 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20word_lock_queue_dataE", !81, i64 0, !11, i64 136, !11, i64 144, !11, i64 152}
!94 = !{!93, !11, i64 136}
!95 = !{!93, !11, i64 144}
!96 = distinct !{!96, !50}
!97 = distinct !{!97, !50}
!98 = distinct !{!98, !50}
!99 = !{!100, !11, i64 8}
!100 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization25broadcast_parking_controlE", !11, i64 8, !11, i64 16}
!101 = !{!100, !11, i64 16}
!102 = !{!103, !11, i64 8}
!103 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization20wait_parking_controlE", !11, i64 8, !11, i64 16}
!104 = !{!103, !11, i64 16}
!105 = !{!80, !84, i64 136}
!106 = !{!107, !16, i64 0}
!107 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization15validate_actionE", !16, i64 0, !84, i64 8}
!108 = !{!107, !84, i64 8}
!109 = !{!86, !11, i64 8}
!110 = !{!84, !84, i64 0}
!111 = !{!112, !11, i64 0}
!112 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization11bucket_pairE", !11, i64 0, !11, i64 8}
!113 = distinct !{!113, !50}
!114 = !{!112, !11, i64 8}
!115 = !{!116, !11, i64 0}
!116 = !{!"_ZTSN6Halide7Runtime8Internal14spawned_threadE", !11, i64 0, !11, i64 8, !19, i64 16}
!117 = !{!116, !11, i64 8}
!118 = !{!116, !19, i64 16}
!119 = !{!22, !23, i64 40}
!120 = !{i64 0, i64 8, !10, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !10, i64 32, i64 4, !73, i64 36, i64 4, !73, i64 40, i64 4, !73, i64 44, i64 4, !73, i64 48, i64 1, !15}
!121 = distinct !{!121, !50}
!122 = distinct !{!122, !50}
!123 = distinct !{!123, !50}
!124 = !{!125, !11, i64 8}
!125 = !{!"_ZTSN6Halide7Runtime8Internal15Synchronization22signal_parking_controlE", !11, i64 8, !11, i64 16}
!126 = !{!125, !11, i64 16}
!127 = !{!128, !11, i64 0}
!128 = !{!"_ZTS18halide_mutex_array", !11, i64 0}
!129 = distinct !{!129, !50}
!130 = !{!131, !134, i64 34}
!131 = !{!"_ZTS20halide_trace_event_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !132, i64 32, !135, i64 36, !23, i64 40, !23, i64 44, !23, i64 48}
!132 = !{!"_ZTS13halide_type_t", !133, i64 0, !12, i64 1, !134, i64 2}
!133 = !{!"_ZTS18halide_type_code_t", !12, i64 0}
!134 = !{!"short", !12, i64 0}
!135 = !{!"_ZTS25halide_trace_event_code_t", !12, i64 0}
!136 = !{!132, !12, i64 1}
!137 = !{!131, !23, i64 48}
!138 = !{!131, !11, i64 0}
!139 = !{!131, !11, i64 24}
!140 = !{!141, !23, i64 0}
!141 = !{!"_ZTSN6Halide7Runtime8Internal23SharedExclusiveSpinLockE", !23, i64 0}
!142 = !{!143, !23, i64 4}
!143 = !{!"_ZTSN6Halide7Runtime8Internal11TraceBufferE", !141, i64 0, !23, i64 4, !23, i64 8, !12, i64 12}
!144 = !{!143, !23, i64 8}
!145 = distinct !{!145, !50}
!146 = !{!147, !23, i64 0}
!147 = !{!"_ZTS21halide_trace_packet_t", !23, i64 0, !23, i64 4, !132, i64 8, !135, i64 12, !23, i64 16, !23, i64 20, !23, i64 24}
!148 = !{!147, !23, i64 4}
!149 = !{!131, !11, i64 16}
!150 = !{!131, !11, i64 8}
!151 = !{!147, !23, i64 24}
!152 = !{!147, !134, i64 10}
!153 = distinct !{!153, !50}
!154 = !{!131, !135, i64 36}
!155 = !{!131, !12, i64 33}
!156 = distinct !{!156, !50}
!157 = !{!131, !23, i64 44}
!158 = distinct !{!158, !50, !159}
!159 = !{!"llvm.loop.peeled.count", i32 1}
!160 = !{!131, !133, i64 32}
!161 = !{!134, !134, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"float", !12, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"double", !12, i64 0}
!166 = distinct !{!166, !50, !159}
!167 = distinct !{!167, !50}
!168 = !{!131, !23, i64 40}
!169 = distinct !{!169, !50}
!170 = distinct !{!170, !50}
!171 = distinct !{!171, !50}
!172 = !{!173, !11, i64 16}
!173 = !{!"_ZTS15halide_buffer_t", !84, i64 0, !11, i64 8, !11, i64 16, !84, i64 24, !132, i64 32, !23, i64 36, !11, i64 40, !11, i64 48}
!174 = !{!173, !84, i64 0}
!175 = !{!173, !23, i64 36}
!176 = !{!173, !11, i64 40}
!177 = !{i64 0, i64 4, !73, i64 4, i64 4, !73, i64 8, i64 4, !73, i64 12, i64 4, !73}
!178 = !{!179, !23, i64 4}
!179 = !{!"_ZTS18halide_dimension_t", !23, i64 0, !23, i64 4, !23, i64 8, !23, i64 12}
!180 = distinct !{!180, !50}
!181 = !{!179, !23, i64 0}
!182 = !{!179, !23, i64 8}
!183 = distinct !{!183, !50, !184}
!184 = !{!"llvm.loop.isvectorized", i32 1}
!185 = distinct !{!185, !186}
!186 = !{!"llvm.loop.unroll.disable"}
!187 = distinct !{!187, !50, !188, !184}
!188 = !{!"llvm.loop.unroll.runtime.disable"}
!189 = !{!190, !134, i64 0}
!190 = !{!"_ZTSN6Halide7Runtime8Internal18halide_tiff_headerE", !134, i64 0, !134, i64 2, !23, i64 4, !134, i64 8, !12, i64 10, !23, i64 190, !12, i64 194, !12, i64 202}
!191 = !{!190, !134, i64 2}
!192 = !{!190, !23, i64 4}
!193 = !{!190, !134, i64 8}
!194 = !{!195, !134, i64 0}
!195 = !{!"_ZTSN6Halide7Runtime8Internal8tiff_tagE", !134, i64 0, !134, i64 2, !23, i64 4, !12, i64 8}
!196 = !{!195, !134, i64 2}
!197 = !{!195, !23, i64 4}
!198 = distinct !{!198, !50}
!199 = distinct !{!199, !50}
!200 = distinct !{!200, !50}
!201 = distinct !{!201, !50}
!202 = distinct !{!202, !50}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !50, !184}
!209 = distinct !{!209, !186}
!210 = distinct !{!210, !186}
!211 = distinct !{!211, !50, !184}
!212 = distinct !{!212, !186}
!213 = distinct !{!213, !50, !184}
!214 = distinct !{!214, !50, !184}
!215 = distinct !{!215, !50, !188, !184}
!216 = distinct !{!216, !50, !184}
!217 = distinct !{!217, !50, !188, !184}
!218 = distinct !{!218, !50, !184}
!219 = distinct !{!219, !50, !188, !184}
!220 = distinct !{!220, !50}
!221 = distinct !{!221, !50, !184}
!222 = distinct !{!222, !50, !188, !184}
!223 = distinct !{!223, !50}
!224 = distinct !{!224, !50}
!225 = distinct !{!225, !50}
!226 = distinct !{!226, !50}
!227 = !{!228, !11, i64 0}
!228 = !{!"_ZTSN6Halide7Runtime8Internal10CacheEntryE", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !19, i64 32, !11, i64 40, !23, i64 48, !23, i64 52, !23, i64 56, !23, i64 60, !11, i64 64, !11, i64 72, !84, i64 80, !16, i64 88}
!229 = distinct !{!229, !50}
!230 = !{!228, !23, i64 56}
!231 = !{!228, !11, i64 24}
!232 = !{!228, !11, i64 72}
!233 = distinct !{!233, !50}
!234 = distinct !{!234, !50}
!235 = !{!236, !84, i64 0}
!236 = !{!"_ZTSN6Halide7Runtime8Internal11device_copyE", !84, i64 0, !84, i64 8, !84, i64 16, !12, i64 24, !12, i64 152, !12, i64 280, !84, i64 408}
!237 = !{!236, !84, i64 8}
!238 = !{!236, !84, i64 408}
!239 = distinct !{!239, !50}
!240 = !{!236, !84, i64 16}
!241 = distinct !{!241, !50, !184}
!242 = distinct !{!242, !50, !188, !184}
!243 = distinct !{!243, !50}
!244 = distinct !{!244, !186}
!245 = distinct !{!245, !50}
!246 = distinct !{!246, !50}
!247 = distinct !{!247, !50}
!248 = !{i64 0, i64 8, !110, i64 8, i64 8, !110, i64 16, i64 8, !110, i64 24, i64 128, !14, i64 152, i64 128, !14, i64 280, i64 128, !14, i64 408, i64 8, !110}
!249 = distinct !{!249, !50}
!250 = !{!179, !23, i64 12}
!251 = !{!228, !11, i64 16}
!252 = !{!228, !19, i64 32}
!253 = !{!228, !23, i64 48}
!254 = !{!228, !23, i64 52}
!255 = !{!228, !23, i64 60}
!256 = !{!228, !11, i64 64}
!257 = !{!228, !11, i64 40}
!258 = distinct !{!258, !50}
!259 = distinct !{!259, !50}
!260 = distinct !{!260, !50}
!261 = !{!228, !16, i64 88}
!262 = !{!228, !84, i64 80}
!263 = !{i64 0, i64 8, !110, i64 8, i64 8, !10, i64 16, i64 8, !10, i64 24, i64 8, !110, i64 32, i64 1, !264, i64 33, i64 1, !14, i64 34, i64 2, !161, i64 36, i64 4, !73, i64 40, i64 8, !10, i64 48, i64 8, !10}
!264 = !{!133, !133, i64 0}
!265 = distinct !{!265, !50}
!266 = distinct !{!266, !186}
!267 = distinct !{!267, !50}
!268 = !{!228, !11, i64 8}
!269 = distinct !{!269, !50}
!270 = distinct !{!270, !50, !184}
!271 = distinct !{!271, !50, !188, !184}
!272 = distinct !{!272, !50, !184}
!273 = distinct !{!273, !50, !188, !184}
!274 = distinct !{!274, !50}
!275 = distinct !{!275, !50}
!276 = distinct !{!276, !50}
!277 = distinct !{!277, !50}
!278 = distinct !{!278, !50}
!279 = distinct !{!279, !50, !184}
!280 = distinct !{!280, !50, !188, !184}
!281 = distinct !{!281, !50, !184}
!282 = distinct !{!282, !50, !188, !184}
!283 = distinct !{!283, !50}
!284 = !{!285, !23, i64 8}
!285 = !{!"_ZTSN6Halide7Runtime8Internal16CacheBlockHeaderE", !11, i64 0, !23, i64 8}
!286 = !{!285, !11, i64 0}
!287 = distinct !{!287, !50}
!288 = distinct !{!288, !186}
!289 = distinct !{!289, !50}
!290 = distinct !{!290, !50}
!291 = distinct !{!291, !50}
!292 = distinct !{!292, !50, !184}
!293 = distinct !{!293, !50, !188, !184}
!294 = distinct !{!294, !50, !184}
!295 = distinct !{!295, !50, !188, !184}
!296 = distinct !{!296, !50}
!297 = distinct !{!297, !50}
!298 = distinct !{!298, !50}
!299 = distinct !{!299, !50}
!300 = distinct !{!300, !50}
!301 = distinct !{!301, !50}
!302 = distinct !{!302, !50}
!303 = distinct !{!303, !50}
!304 = distinct !{!304, !50}
!305 = !{!132, !133, i64 0}
!306 = !{!132, !134, i64 2}
!307 = !{!173, !11, i64 8}
!308 = !{!173, !84, i64 24}
!309 = distinct !{!309, !50}
!310 = !{!311, !11, i64 0}
!311 = !{!"_ZTS29halide_device_allocation_pool", !11, i64 0, !11, i64 8}
!312 = distinct !{!312, !50}
!313 = !{!311, !11, i64 8}
!314 = !{!315, !11, i64 120}
!315 = !{!"_ZTS25halide_device_interface_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!316 = !{!317, !11, i64 48}
!317 = !{!"_ZTS30halide_device_interface_impl_t", !11, i64 0, !11, i64 8, !11, i64 16, !11, i64 24, !11, i64 32, !11, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !11, i64 72, !11, i64 80, !11, i64 88, !11, i64 96, !11, i64 104, !11, i64 112, !11, i64 120}
!318 = !{!317, !11, i64 40}
!319 = !{!317, !11, i64 56}
!320 = !{!317, !11, i64 0}
!321 = !{!317, !11, i64 16}
!322 = !{!317, !11, i64 8}
!323 = !{!317, !11, i64 32}
!324 = !{!317, !11, i64 24}
!325 = !{!317, !11, i64 64}
!326 = !{!317, !11, i64 72}
!327 = distinct !{!327, !50, !184}
!328 = distinct !{!328, !50, !188, !184}
!329 = distinct !{!329, !50, !184}
!330 = distinct !{!330, !50, !188, !184}
!331 = !{!317, !11, i64 112}
!332 = !{!317, !11, i64 120}
!333 = !{!317, !11, i64 80}
!334 = !{!317, !11, i64 88}
!335 = !{!317, !11, i64 96}
!336 = !{!317, !11, i64 104}
!337 = !{i32 22, i32 33}
!338 = !{!339, !11, i64 40}
!339 = !{!"_ZTS21halide_profiler_state", !47, i64 0, !23, i64 8, !23, i64 12, !23, i64 16, !23, i64 20, !11, i64 24, !11, i64 32, !11, i64 40}
!340 = !{!339, !23, i64 16}
!341 = !{!342, !84, i64 0}
!342 = !{!"_ZTS30halide_profiler_pipeline_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !11, i64 48, !11, i64 56, !11, i64 64, !23, i64 72, !23, i64 76, !23, i64 80, !23, i64 84, !23, i64 88}
!343 = !{!342, !23, i64 80}
!344 = !{!342, !84, i64 32}
!345 = !{!342, !84, i64 40}
!346 = !{!342, !11, i64 48}
!347 = !{!342, !23, i64 84}
!348 = !{!342, !23, i64 88}
!349 = !{!342, !84, i64 16}
!350 = !{!342, !84, i64 24}
!351 = !{!342, !23, i64 72}
!352 = !{!342, !11, i64 56}
!353 = distinct !{!353, !50}
!354 = !{!355, !84, i64 32}
!355 = !{!"_ZTS26halide_profiler_func_stats", !84, i64 0, !84, i64 8, !84, i64 16, !84, i64 24, !84, i64 32, !84, i64 40, !84, i64 48, !11, i64 56, !23, i64 64}
!356 = !{!355, !84, i64 0}
!357 = !{!355, !11, i64 56}
!358 = distinct !{!358, !50}
!359 = distinct !{!359, !50}
!360 = distinct !{!360, !50}
!361 = !{!355, !84, i64 40}
!362 = !{!355, !84, i64 48}
!363 = distinct !{!363, !50}
!364 = !{!355, !84, i64 16}
!365 = distinct !{!365, !50}
!366 = !{!355, !23, i64 64}
!367 = distinct !{!367, !50}
!368 = !{!355, !84, i64 24}
!369 = distinct !{!369, !50}
!370 = distinct !{!370, !50}
!371 = !{!339, !11, i64 24}
!372 = !{!342, !11, i64 64}
!373 = distinct !{!373, !50}
!374 = !{!339, !23, i64 12}
!375 = distinct !{!375, !50}
!376 = !{!342, !23, i64 76}
!377 = distinct !{!377, !50}
!378 = distinct !{!378, !50}
!379 = !{!339, !11, i64 32}
!380 = !{!339, !23, i64 20}
!381 = !{!339, !23, i64 8}
!382 = distinct !{!382, !50}
!383 = distinct !{!383, !50}
!384 = distinct !{!384, !50}
!385 = distinct !{!385, !50}
!386 = !{!"branch_weights", i32 1073741824, i32 0}
!387 = !{!388, !19, i64 8}
!388 = !{!"_ZTS25halide_pseudostack_slot_t", !11, i64 0, !19, i64 8, !19, i64 16}
!389 = !{!388, !11, i64 0}
!390 = !{!"branch_weights", i32 1, i32 2000}
!391 = !{!388, !19, i64 16}
!392 = !{!"branch_weights", i32 0, i32 1073741824}
!393 = !{!394, !394, i64 0}
!394 = !{!"input", !395, i64 0}
!395 = !{!"Halide buffer"}
!396 = !{!397, !397, i64 0}
!397 = !{!"read_input", !395, i64 0}
!398 = distinct !{!398, !186}
!399 = !{!400, !400, i64 0}
!400 = !{!"blur_x", !395, i64 0}
!401 = !{!402, !402, i64 0}
!402 = !{!"blur_y", !395, i64 0}
!403 = distinct !{!403, !186}
